process.env["NTBA_FIX_319"] = 1;
process.env["NTBA_FIX_350"] = 1;

process.on('uncaughtException', function (error) {
	console.log("\x1b[31muncaughtException: " + error + "\x1b[0m");
	console.log(error);
});

process.on('unhandledRejection', function (error, p) {
	if ((error.message.indexOf("Too Many Requests") == -1) && (error.message.indexOf("message is not modified") == -1))
		console.log("\x1b[31munhandledRejection: " + error.message + "\x1b[0m");
});

var max_mission_id = 290;
var timevar = [];
var answerCallbacks = {};

// Eventi automatici
var eventMana = 0;
var eventDust = 0;

// Festivit√† o disattivati
var eventStory = 0;
var halloween = 0;
var snowHouse = 0;
var snowHouseEnd = 0;

// Variabili globali
var assaultStop = 0;
var teamMission = 1;
var missionDayLimit = 10;
var sconto = 10;
var sconto_evento = 0;
var max_duration = 10;
var max_mob_value = 90;
var wait_room = 900;
var wait_dungeon = 2;
var wait_dungeon_long = 5;
var max_istance = 50;
var merchant_limit = 5;
var max_top_id = 6;
var rank_cap = 15;
var lobby_total_space = 5;
var lobby_restric_min = 10;
var dragon_limit_search = 15;
var rankList = [20, 50, 75, 100, 150, 200, 500, 750, 1000, 1500];
var progLev = [50, 100, 250, 450, 750, 1250, 1500, 1750, 2500, 3000, 3750];
var progLevRew = [50000, 100000, 125000, 150000, 250000, 1000000, 2500000, 5000000, 5000000, 10000000, 20000000];
var progMis = [10, 25, 50, 75, 100, 250, 500, 1000, 2000, 5000, 10000, 25000, 50000];
var progMisRew = [5000, 12500, 25000, 50000, 75000, 100000, 250000, 350000, 500000, 1000000, 2000000, 3000000, 5000000];
var progDung = [1, 5, 10, 25, 50, 75, 100, 250, 500, 1000, 1500, 2500, 3000];
var progDungRew = [10000, 50000, 75000, 100000, 250000, 500000, 750000, 1000000, 2000000, 3000000, 4500000, 6000000];
var progCraft = [100, 500, 1000, 2500, 5000, 10000, 20000, 50000, 75000, 100000, 200000, 300000, 500000, 1000000];
var progCraftRew = [10000, 50000, 75000, 150000, 250000, 500000, 1000000, 2000000, 4000000, 6000000, 8000000, 10000000, 20000000, 25000000];
var progMissionTeam = [50, 100, 250, 500, 750, 1000, 1500, 2000, 5000];
var progMissionTeamRew = [25000, 50000, 500000, 1000000, 2000000, 3000000, 4000000, 5000000, 10000000];
var progOffers = [50, 200, 500, 1000, 2000, 3000, 5000, 10000];
var progOffersRew = [50000, 100000, 250000, 500000, 1000000, 2500000, 5000000, 10000000];
var progCave = [25, 50, 100, 250, 500, 1000, 1500, 3000];
var progCaveRew = [10000, 20000, 50000, 100000, 200000, 500000, 1000000, 3000000];
var assaultEmojiList = ["‚ö°Ô∏è","‚òÑ","‚öî","üó°","üè∞","üê≤","ü•Å","üîã","üê∫","‚ú®","‚ò†Ô∏è","üíâ"];

var re = new RegExp("^[0-9]*$");
var re3 = new RegExp("[\"'<>]");
var re4 = new RegExp("^[a-zA-Z0-9√†√®√¨√≤√π ]{1,40}$");
var re5 = new RegExp("^[a-zA-Z0-9!?,.√†√®√©√¨√≤√π@ ]{1,255}$");
var re6 = new RegExp("^[a-zA-Z0-9√†√®√©√¨√≤√π\\'\\-\\* ]{1,255}$");
var re7 = new RegExp("^[a-zA-Z0-9√†√®√©√¨√≤√π\\'\?\! ]{1,2048}$");

var config = require('./config.js');
var mobGenerator = require('./mobGenerator.js');
var TelegramBot = require('node-telegram-bot-api');
var Schedule = require('node-schedule');
var request = require('request');
var readline = require('readline');
var mysql = require('mysql');
var mysql_sync = require('sync-mysql');
var express = require('express');
var http = require('http');
var https = require('https');
var fs = require('fs');
var bodyParser = require('body-parser');
var iniBuilder = require('ini-builder');

// Eventi
var crazyMode;					// nulla
var luckyMode;					// svuota contest
var arena;						// azzera le due tabelle
var lootteria;					// svuota event_lottery_coins e event_lottery_prize con extracted a 0
var villa;						// update a 10 punti e svuota tabella
var wanted;						// svuota event_wanted_status
var eventTeamStory;				// svuota event_team_story
var eventFestival;				// event_crafting_status con total_cnt a 0
var specialMission;				// nulla
var checkDragonTopOn;			// alla chiusura: svuota tabelle dragon_ e auto increment dummy a 100000
var gnomorra;					// svuota tabella event_gnomorra
var lootteriaBlock = 0;
var autoEstrazione = 0;

reloadEvents();

var token = config.maintoken;
var bot = new TelegramBot(token);
var app = express();

var path = "/loot/bot" + token;
var port = 25001;

var options = {
	"max_connections": 80
}
bot.setWebHook('https://fenixweb.net:8443' + path, options);
app.listen(port);

app.use(bodyParser.json());
app.post(path, function (req, res) {
	bot.processUpdate(req.body);
	res.sendStatus(200);
});

var j = Schedule.scheduleJob('00 3 * * *', function () { //3 notte
	if (checkDragonTopOn == 1)
		checkDragonTop();
	refreshDragonLife();
});

var j1 = Schedule.scheduleJob('00 8 * * *', function () { //8 di mattina
	if (checkDragonTopOn == 1)
		cleanDragon();
});

var j2 = Schedule.scheduleJob('59 23 * * *', function () { //23:59 notte
	saveActive();
	var d = new Date();
	if ((lootteria == 1) && (d.getDay() == 6))
		cleanLottery();
});

var j21 = Schedule.scheduleJob('59 23 1 * *', function () {
	saveActiveMonthly();
});

var j3 = Schedule.scheduleJob('01 00 * * *', function () { //00:01 notte
	var d = new Date();
	if ((d.getDay() != 5) && (d.getDay() != 4))
		autoMana();
	if (d.getDay() != 2)
		autoDust();
	if ((d.getDay() != 6) && (d.getDay() != 0))
		reloadAchievement();
	else
		resetAchievement();
	if (d.getDay() == 1)
		craftWeek();
	craftDay();
	resetTeamMission();
	resetGnomorra();
	refreshHeists();
	refreshLife();
	refreshManaBoost();
	refreshDustBoost();
	if (d.getDay() == 1)
		resetTeamWeekly();
});

var j4 = Schedule.scheduleJob('05 00 * * *', function () { //00:05 notte
	refreshMerchant(0);
	marketGeneration();
	resetDungeonSkip();
	resetRefill();
	deleteSearch();
	resetDragonReject();
	deleteHistory();
});

var j5 = Schedule.scheduleJob('00 15 * * *', function () { //15:00
	var d = new Date();
	if (d.getDay() == 1)
		updateSpecialItem();
	else if (d.getDay() == 2)
		resetSpecialItem();
});

var j6 = Schedule.scheduleJob('00 10 * * 6', function () { //10:00
	activateEvent();
});

var j7 = Schedule.scheduleJob('00 10 * * 1', function () { //10:00
	deactivateEvent();
});

var j8 = Schedule.scheduleJob('0 * * * *', function () { //ogni ora
	saveHourGlobal();
});

callNTimes(20000, function () { //20 secondi
	if (checkDragonTopOn == 1)
		checkDragonSearch();
});

callNTimes(40000, function () { //40 secondi
	checkDungeonRoom();
});

callNTimes(40000, function () { //40 secondi
	if (checkDragonTopOn == 1)
		checkDragonSearchCd();
});

callNTimes(60000, function () { //Ogni 1 minuto
	if (eventStory == 1)
		checkEventMissions();
	checkDragonArena();
	checkMissions();
	checkDragonTopCd();
	checkEventMissions();
	checkSpecialMissions();
	checkDungeonEnd();
	checkHeists();
	checkHeistsProgress();
	checkDust();
	checkMerchant();
	checkTeamMissions();

	checkAssaults();
	checkAssaultsItem();
	checkAssaultsEnd();
	checkAssaultsMob();
	checkAssaultsLock();
	checkAssaultsExpire();

	checkLobbyTime();
	checkBattleTime();
	checkBattleTimeLimit();
	checkFullLobby();
	checkRestrictMap();
	checkLobbyEnd();
	// checkSeasonEnd();

	if (crazyMode == 1)
		merchant_limit = 8;
	else
		merchant_limit = 5;
	var d = new Date();
	if ((d.getDay() != 6) && (d.getDay() != 0) && (luckyMode == 1))
		luckyMode = 0;
	if ((d.getDay() != 6) && (d.getDay() != 0) && (crazyMode == 1))
		crazyMode = 0;
	if ((d.getDay() != 6) && (d.getDay() != 0) && (wanted == 1))
		wanted = 0;
	if ((d.getDay() > 3) && (d.getDay() < 6) && (villa == 1))
		villa = 0;
	if ((d.getDay() == 4) || (d.getDay() == 5)) {
		eventMana = 1;
		checkKeyboard();
	} else {
		eventMana = 0;
		checkKeyboard();
	}
	if ((d.getDay() == 1) || (d.getDay() == 2)) {
		eventDust = 1;
		checkKeyboard();
	} else {
		eventDust = 0;
		checkKeyboard();
	}

	if (eventFestival == 1) {
		reloadFestival(0);
		checkFestivalWait();
		checkFestivalFinish();
	}
	if (autoEstrazione == 1)
		estrazione();
	if (gnomorra == 1) {
		checkGnomorraInvite();
		checkGnomorraGame();
	}
});

callNTimes(120000, function () { //Ogni 2 minuti
	checkProtection();
	checkDungeonNotification();
	checkDungeonNotificationIstance();
	checkReborn();
	checkDragonSleep();
	checkDragonBattle();
	checkCave();
	if (checkDragonTopOn == 1)
		checkDragonNoMatch();
	checkMissionTeamExpire();
	checkDungeonExpire();
	checkIstanceExpire();
	checkGlobalMsg();
	checkCardTrade();
});

callNTimes(300000, function () { //Ogni 5 minuti
	checkTeamCd();
	checkTravels();
	checkEnchant();
	checkEnchant2();
	checkEnchant3();
	var d = new Date();
	if ((d.getHours() > 9) && (d.getHours() < 22)) {
		checkMana();
		checkExtraDust();
	}
	checkDragonBoost();
});

callNTimes(1800000, function () { //Ogni mezz'ora
	checkEvents();
	checkTeamAct();
	checkAct();
	checkGnome();
});

callNTimes(3600000, function () { //Ogni ora
	calcBaseFunc(1);
	checkTeamClean();
	checkTeamPlayers();
});

console.log('Avvio bot...');

var connection = mysql.createConnection({
	host: config.dbhost,
	user: config.dbuser,
	password: config.dbpassword,
	database: config.dbdatabase
});
connection.connect();

var connection_sync = new mysql_sync({
	host: config.dbhost,
	user: config.dbuser,
	password: config.dbpassword,
	database: config.dbdatabase
});

process.on('SIGINT', function() {
	console.log("Spegnimento bot...");
	connection.end();
	process.exit();
});

process.on('SIGTERM', function() {
	console.log("Spegnimento bot...");
	connection.end();
	process.exit();
});

bot.on('polling_error', function(error) {
	console.log(error);
});

var d = new Date();

bot.on('message', function (message) {

	// per recupero mana perso
	/*
	if (message.forward_from != undefined) {
		if (message.forward_from.username == "lootgamebot") {
			if (message.forward_date >= 1562364060) {
				if (message.text.indexOf("Le miniere sono state chiuse") != -1) {
					console.log(message);
				}
			}
		}
	}
	*/

	if (message.text != undefined) {
		if ((message.text != "") && (message.text.indexOf("/start") == -1)) {
			//console.log(getNow("it") + " - " + message.from.username + ": " + message.text);
			connection.query('SELECT id FROM last_command WHERE account_id = ' + message.from.id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					connection.query('SELECT account_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0) {
							connection.query('INSERT INTO last_command (account_id, time) VALUES (' + message.from.id + ',"' + getNow("en") + '")', function (err, rows, fields) {
								if (err) {
									console.log("Errore chiave esterna message (" + message.from.username + " - " + message.from.id + "): " + message.text);
									bot.sendMessage(message.chat.id, "Si √® verificato un errore relativo al tuo account, contatta l'amministratore");
								};
							});
						}
					});
				} else {
					connection.query('UPDATE last_command SET time = "' + getNow("en") + '" WHERE account_id = ' + message.from.id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
			});
		}
	}
	connection.query('SELECT account_id, market_ban, id, status, exp, reborn, birth_date FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0)
			return;
		var player_id = rows[0].id;
		var status = rows[0].status;
		var lev = Math.floor(rows[0].exp / 10);
		var reborn = rows[0].reborn;
		var birth_date = rows[0].birth_date;

		if (message.successful_payment != undefined) {
			connection.query('SELECT payload, status, id FROM payments WHERE player_id = ' + player_id + ' ORDER BY id DESC', function (err, rows, fields) {
				if (err) throw err;

				if ((rows[0].payload != message.successful_payment.invoice_payload) || (rows[0].status != "WAIT")) {
					bot.sendMessage(message.chat.id, "Errore durante la verifica del pagamento, riprova", back);
					return;
				}

				connection.query('UPDATE payments SET status = "OK" WHERE id = ' + rows[0].id, function (err, rows, fields) {
					if (err) throw err;

					var amount = Math.floor(message.successful_payment.total_amount / 100);

					if (luckyMode == 1)
						amount = amount*2;

					bot.sendMessage("-1001098734700", "#Donazione " + message.from.username + " (" + message.from.id + ") per " + message.successful_payment.total_amount / 100 + " ‚Ç¨");
					bot.sendMessage(message.chat.id, "Hai ricevuto *" + amount + " üåï* per la tua donazione, grazie mille!", back);

					if (luckyMode == 1) {
						connection.query('UPDATE player SET donation = donation + ' + Math.round(amount/2) + ' WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					} else {
						connection.query('UPDATE player SET donation = donation + ' + amount + ' WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
					connection.query('UPDATE player SET moon_coin = moon_coin + ' + amount + ' WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});
					if (luckyMode == 1) {
						connection.query('INSERT INTO donation_history (player_id, amount, source) VALUES (' + player_id + ', ' + Math.round(amount/2) + ', "Telegram")', function (err, rows, fields) {
							if (err) throw err;
						});
					} else {
						connection.query('INSERT INTO donation_history (player_id, amount, source) VALUES (' + player_id + ', ' + amount + ', "Telegram")', function (err, rows, fields) {
							if (err) throw err;
						});
					}
				});
			});
		}

		if (status != null) {
			connection.query('UPDATE player SET status = NULL, status_cnt = 0 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			if (message.text.toLocaleLowerCase() != "interrompi") {
				var d = new Date();
				d.setMinutes(d.getMinutes() + 5);
				var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

				connection.query('UPDATE dragon_top_status SET no_match_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
				});
			}
		}

		if (rows[0].account_id != message.from.id) {
			if (rows[0].market_ban == 0) {
				bot.sendMessage("-1001098734700", "#Accountid " + message.from.username + "-" + message.from.id + ": " + message.text);
				connection.query('UPDATE player SET market_ban = 1 WHERE id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "E' stata rilevata un'incongruenza id relativa al tuo account, probabilmente a causa del cambio account collegato a questo username. Comunica all'amministratore che potr√† ripristinarlo, nel frattempo sei impossibilitato ad utilizzare il mercato.");
				});
			}
		}

		var now_d = new Date();
		var hour = now_d.getHours();
		var day = now_d.getDate();
		var month = now_d.getMonth();
		var year = now_d.getFullYear();

		if (((day == 31) && (month == 9) && (hour >= 12)) || ((day == 1) && (month == 10) && (hour <= 12))) {
			connection.query('SELECT COUNT(*) As cnt FROM one_time_gift WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (rows[0].cnt == 0) {
					connection.query('INSERT INTO one_time_gift (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
						if (err) throw err;
						addItem(player_id, 789);
						bot.sendMessage(message.chat.id, "Buon Halloween üéÉ!\nPer la tua presenza costante nel gioco, hai ricevuto una nuova IN non commerciabile: una *Zucchetta di Halloween 2019 (IN)*!", mark);
						console.log("One time gift a " + message.from.username);
					});
				}
			});
		}

		if ((day == 15) && (month == 4)) {
			connection.query('SELECT COUNT(*) As cnt FROM one_time_gift WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (rows[0].cnt == 0) {
					connection.query('INSERT INTO one_time_gift (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
						if (err) throw err;
						connection.query('UPDATE player SET moon_coin = moon_coin+2 WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						var age = calculateAge(new Date("2016-04-15"));
						bot.sendMessage(message.chat.id, "Oggi si festeggiano " + age + " anni di LootBot!\nPer festeggiare il giorno speciale ottieni *2 Monete Lunari* üåï!", mark);
						console.log("One time gift a " + message.from.username);
					});
				}
			});
		}

		if (birth_date != null) {
			birth_date = new Date(birth_date);
			if ((birth_date.getDate() == day) && (birth_date.getMonth() == month)) {
				connection.query('SELECT IFNULL(MAX(cnt), 0) As mx, IFNULL(year, 0) As year FROM birth_gift WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					if (year != rows[0].year) {
						var gift = rows[0].mx+1;
						if (gift == 1) {
							addItem(player_id, 769);
							bot.sendMessage(message.chat.id, "Buon Compleanno üç∞!\nHai ricevuto un dono da parte della Fenice sovrana di Lootia: la *Prima met√† della torta (S)*!", mark);
							connection.query('INSERT INTO birth_gift (player_id, cnt, year) VALUES (' + player_id + ', 1, ' + year + ')', function (err, rows, fields) {
								if (err) throw err;
							});
							console.log("Birthday gift 1 a " + message.from.username);
						} else if (gift == 2) {
							addItem(player_id, 770);
							bot.sendMessage(message.chat.id, "Buon Compleanno üç∞!\nHai ricevuto un dono da parte della Fenice sovrana di Lootia: la *Seconda met√† della torta (S)*! Ora puoi creare la *Torta Golosa* üéÇ con un ingrediente aggiuntivo!", mark);
							connection.query('UPDATE birth_gift SET cnt = 2, year = ' + year + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
							});
							console.log("Birthday gift 2 a " + message.from.username);
						}
					}
				});
			}
		}
	});

	var callback = answerCallbacks[message.chat.id];
	if (callback) {
		delete answerCallbacks[message.chat.id];
		return callback(message);
	}

	var reg = new RegExp("(alter|select|delete|insert|truncate|!=|<>)","gi");
	if (reg.test(message.text) == true)
		bot.sendMessage("-1001098734700", "#Inject " + message.from.username + ": " + message.text);

	if (message.from.username == undefined)
		bot.sendMessage(message.from.id, "Imposta un nickname per poter giocare! Puoi farlo dalle impostazioni di Telegram.", back);
});

bot.on("pre_checkout_query", function (message) {
	bot.answerPreCheckoutQuery(message.id, true);
});

var mainKeys = [];

var topOpen = "Assalto üê∫";
if (checkDragonTopOn == 1)
	topOpen = "Vette üê≤üî•";

mainKeys = [['‚öî Missione ‚öî'],
			['Dungeon üõ°', topOpen],
			['Alchimia ‚öóÔ∏è', 'Rifugio üî¶'],
			['Zaino üéí', 'Piazza üí∞', 'Scrigni üîë'],
			['Giocatore üë§', 'Team ‚öúÔ∏è'],
			['Imprese üèãÔ∏è', 'Drago üêâ', 'Esplorazioni üßó‚Äç‚ôÄ'],
			['Destino üîÆ', 'Eventi üéØ'],
			['Top üîù', 'Lunari üåï', 'Info üìñ']]

var defaultKeys = [];
defaultKeys = mainKeys.slice();

var resp = {
	reply_markup: JSON.stringify({
		force_reply: true
	})
};

var mark = {
	parse_mode: "Markdown"
};

var html = {
	parse_mode: "HTML"
};

var main_html = {};

var back = {
	parse_mode: "Markdown",
	disable_web_page_preview: true,
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Torna al menu"]]
	}
};

var back_html = {
	parse_mode: "Html",
	disable_web_page_preview: true,
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Torna al menu"]]
	}
};

var yesno = {
	parse_mode: "Markdown",
	reply_markup: {
		"force_reply": true,
		"resize_keyboard": true,
		keyboard: [["Si"], ["Torna al menu"]]
	}
};

var conf = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Conferma"], ["Torna al menu"]]
	}
};

var abort_travel = {
	parse_mode: "HTML",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Ritorna"], ["Torna al menu"]]
	}
};

var abort_travel_2 = {
	parse_mode: "HTML",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Ritorna"], ["Concludi immediatamente"], ["Torna al menu"]]
	}
};

var abort_mission = {
	parse_mode: "HTML",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Termina subito"], ["Torna al menu"]]
	}
};

var abort_heist = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Completa immediatamente"], ["Torna al menu"]]
	}
};

var team = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Torna al Team"], ["Torna al menu"]]
	}
};

var team_html = {
	parse_mode: "HTML",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Torna al Team"], ["Torna al menu"]]
	}
};

var no_preview = {
	parse_mode: "Markdown",
	disable_web_page_preview: true
};

var html_no_preview = {
	parse_mode: "HTML",
	disable_web_page_preview: true
};

var revive = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Torna in Vita"], ["Torna al menu"]]
	}
};

var keyrank = {
	parse_mode: "HTML",
	reply_markup: {
		resize_keyboard: true,
		keyboard: [['Top'], ['Torna al menu']]
	}
};

var no_preview_html = {
	parse_mode: "HTML",
	disable_web_page_preview: true
};

var no_preview_back = {
	parse_mode: "Markdown",
	disable_web_page_preview: true,
	reply_markup: {
		resize_keyboard: true,
		keyboard: [["Torna al menu"]]
	}
};

bot.onText(/^\/key/, function (message, match) {
	checkKeyboard();
	bot.sendMessage(message.chat.id, "Tastiera aggiornata");
});

bot.onText(/^\/assaultstop/, function (message, match) {
	if (assaultStop == 0) {
		assaultStop = 1;
		bot.sendMessage(message.chat.id, "Assalto messo in manutenzione!", back);
	} else {
		assaultStop = 0;
		bot.sendMessage(message.chat.id, "Assalto rimosso dalla manutenzione!", back);
	}
});

bot.onText(/^\/nextevent (.+)|^\/nextevent/, function (message, match) {
	if (message.from.id != 20471035)
		return;
	connection.query('SELECT next_event_name FROM config', function (err, rows, fields) {
		if (err) throw err;

		if (match[1] == undefined) {
			if (rows[0].next_event_name != null)
				bot.sendMessage(message.chat.id, "Evento impostato: " + rows[0].next_event_name + ", null per rimuoverlo");
			else
				bot.sendMessage(message.chat.id, "Evento non ancora impostato");
			return;
		}

		if (match[1] == "null") {
			connection.query('UPDATE config SET next_event_name = NULL', function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Prossimo evento annullato");
			});
		} else {
			var eventList = ["crazyMode", "luckyMode", "arena", "lootteria", "villa", "wanted", "eventTeamStory", "eventFestival", "specialMission", "checkDragonTopOn", "gnomorra"];

			if (eventList.indexOf(match[1]) == -1) {
				bot.sendMessage(message.chat.id, "Evento non valido");
				return;
			}

			connection.query('UPDATE config SET next_event_name = "' + match[1] + '"', function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Salvato!\nProssimo evento: " + match[1]);
			});		 
		}
	});
});

bot.onText(/^\/activateevent/, function (message, match) {
	if (message.from.id != 20471035)
		return;
	activateEvent();
	console.log("Attivazione manuale evento");
});

bot.onText(/^\/deactivateevent/, function (message, match) {
	if (message.from.id != 20471035)
		return;
	deactivateEvent();
	console.log("Disattivazione manuale evento");
});

var dMana = new Date();
if ((dMana.getDay() == 4) || (dMana.getDay() == 5))
	eventMana = 1;
else
	eventMana = 0;

if ((d.getDay() == 1) || (d.getDay() == 2)) {
	eventDust = 1;
	checkKeyboard();
} else {
	eventDust = 0;
	checkKeyboard();
}

checkKeyboard();

bot.onText(/^\/ping/, function (message, match) {
	bot.sendMessage(message.chat.id, "_Pong_", mark);
});

//EASTEREGG

bot.onText(/^Sniffa$/i, function (message, match) {
	bot.sendMessage(message.chat.id, "Uh, un üêº!");
});

bot.onText(/^Edo$/i, function (message, match) {
	bot.sendMessage(message.chat.id, "Boss ‚ö°Ô∏è");
});

//EASTEREGG

bot.onText(/^\/accountid (.+)/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('SELECT nickname, account_id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non ho trovato l'utente");
				return;
			}

			bot.sendMessage(message.chat.id, rows[0].account_id);
		});
	}
});

bot.onText(/^\/genmarket/, function (message, match) {
	marketGeneration();
	console.log("OK");
});

bot.onText(/^\/cleanInactive$/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query("SELECT COUNT(P.nickname) As cnt FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time IS NULL AND P.id < (SELECT MAX(id)-5000 FROM player)", function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Last command non memorizzato: " + rows[0].cnt + "\nContinuo?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query("SELECT P.id, P.nickname, P.account_id, L.time FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time IS NULL AND P.id < (SELECT MAX(id)-5000 FROM player)", function (err, rows, fields) {
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								console.log(rows[i].id + "  - " + rows[i].nickname + " inattivo dal " + rows[i].time);
							}
							bot.sendMessage(message.chat.id, "Continuare con la cancellazione?", yesno).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text.toLowerCase() == "si") {
										connection.query("SELECT P.id, P.nickname, P.account_id, L.time FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time IS NULL AND P.id < (SELECT MAX(id)-5000 FROM player) LIMIT 1000", function (err, rows, fields) {
											if (err) throw err;
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												console.log("Eliminato: " + rows[i].id + "  - " + rows[i].nickname + " inattivo dal " + rows[i].time);
												connection.query("DELETE FROM player WHERE id = " + rows[i].id + " LIMIT 1", function (err, rows, fields) {
													if (err) throw err;
												});
											}
											bot.sendMessage(message.chat.id, "Fin.", back);
										});
									};
								};
							});
						});
					}
				}
			});
		});
	};
});

bot.onText(/^\/cleanInactive6$/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query("SELECT COUNT(P.nickname) As cnt FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time < NOW() - INTERVAL 6 MONTH", function (err, rows, fields) {
			if (err) throw err;

			bot.sendMessage(message.chat.id, "Inattivi da + di 6 mesi: " + rows[0].cnt + "\nContinuo?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query("SELECT P.id, P.nickname, L.time FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time < NOW() - INTERVAL 6 MONTH", function (err, rows, fields) {
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								console.log(rows[i].id + "  - " + rows[i].nickname + " inattivo dal " + rows[i].time);
							}
							bot.sendMessage(message.chat.id, "Continuare con la cancellazione?", yesno).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text.toLowerCase() == "si") {
										connection.query("SELECT P.id, P.nickname, L.time FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time < NOW() - INTERVAL 6 MONTH LIMIT 1000", function (err, rows, fields) {
											if (err) throw err;
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												console.log("Eliminato: " + rows[i].id + "  - " + rows[i].nickname + " inattivo dal " + rows[i].time);
												connection.query("DELETE FROM player WHERE id = " + rows[i].id + " LIMIT 1", function (err, rows, fields) {
													if (err) throw err;
												});
											}
											bot.sendMessage(message.chat.id, "Fin.", back);
										});
									};
								};
							});
						});
					}
				}
			});
		});
	};
});

bot.onText(/^\/updateSpecial/, function (message, match) {
	if (message.from.id == 20471035) {
		updateSpecialItem();
		bot.sendMessage(message.chat.id, "Ok");
	}
});

bot.onText(/^\/stopglobal$/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('UPDATE config SET global_eventon = 0', function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Ok");
		});
	}
});

bot.onText(/^\/endglobal$/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('SELECT I.id As id1, I.name As name1, I2.id As id2, I2.name As name2, I3.id As id3, I3.name As name3 FROM config C INNER JOIN item I ON C.global_item1 = I.id INNER JOIN item I2 ON C.global_item2 = I2.id INNER JOIN item I3 ON C.global_item3 = I3.id', function (err, rows, fields) {
			if (err) throw err;

			var item_1 = rows[0].name1;
			var item_2 = rows[0].name2;
			var item_3 = rows[0].name3;
			var item_1id = rows[0].id1;
			var item_2id = rows[0].id2;
			var item_3id = rows[0].id3;

			console.log(item_1, item_2, item_3, item_1id, item_2id, item_3id);

			connection.query('SELECT COUNT(player_id) As cnt FROM achievement_global', function (err, rows, fields) {
				if (err) throw err;

				var tot = rows[0].cnt;

				connection.query('SELECT SUM(value) As val FROM achievement_global', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Il valore attuale √® " + formatNumber(rows[0].val) + " per " + formatNumber(tot) + " persone, sicuro di chiudere l'impresa? Ricorda il messaggio e il valore del bonus", yesno).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text.toLowerCase() == "si") {

								connection.query('UPDATE player SET global_end = 0', function (err, rows, fields) {
									if (err) throw err;

									connection.query('SELECT P.nickname, P.chat_id, A.player_id, A.value As val FROM achievement_global A INNER JOIN player P ON A.player_id = P.id WHERE P.account_id NOT IN (SELECT account_id FROM banlist) ORDER BY val DESC', function (err, rows, fields) {
										if (err) throw err;

										var minValue = 100;
										var bonusText = "-25% tempo missioni";

										var text = "";

										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											text = "";
											if (rows[i].val >= (rows[0].val / 3)) {
												addItem(rows[i].player_id, item_1id);
												text += "> " + item_1 + "\n";
											}
											if (rows[i].val >= (rows[0].val / 10)) {
												addItem(rows[i].player_id, item_2id);
												text += "> " + item_2 + "\n";
											}
											addItem(rows[i].player_id, item_3id);
											text += "> " + item_3 + "\n";

											if (rows[i].val >= minValue) {
												connection.query('UPDATE player SET global_end = 1 WHERE id = ' + rows[i].player_id, function (err, rows, fields) {
													if (err) throw err;
												});
												text += "> Bonus completamento: *" + bonusText + "*!\n";
											}

											text += "\n*Grazie per aver partecipato!*";

											bot.sendMessage(rows[i].chat_id, "Per il completamento dell'*Impresa Globale* hai ricevuto:\n" + text, mark);
										}
									});
									connection.query('(SELECT A.player_id, chat_id FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) ORDER BY A.value DESC LIMIT 100) UNION (SELECT A.player_id, chat_id FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) AND P.global_event < 5 ORDER BY A.value DESC LIMIT 100)', function (err, rows, fields) {
										if (err) throw err;
										var extra = "";
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											extra = "";
											if (i < 25) {
												addChest(rows[i].player_id, 7);
												extra = " ed ottieni uno Scrigno Capsula extra";
											}
											connection.query('UPDATE player SET global_event = global_event+1 WHERE id = ' + rows[i].player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											bot.sendMessage(rows[i].chat_id, "Per il tuo posizionamento in classifica la tua impresa globale viene conteggiata nelle statistiche" + extra + "!", mark);
										}
									});

									connection.query('DELETE FROM global_hourly', function (err, rows, fields) {
										if (err) throw err;
									});

									connection.query('UPDATE config SET global_eventon = 0, global_eventwait = 1, global_eventhide = 1', function (err, rows, fields) {
										if (err) throw err;
									});

									bot.sendMessage(message.chat.id, "Fatto!", back);
								});
							}
						}
					});
				});
			});
		});
	}
});

bot.onText(/^\/failglobal/, function (message, match) {
	if (message.from.id == 20471035) {

		connection.query('SELECT COUNT(player_id) As cnt FROM achievement_global', function (err, rows, fields) {
			if (err) throw err;

			var tot = rows[0].cnt;

			connection.query('SELECT SUM(value) As val FROM achievement_global', function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Il valore attuale √® " + formatNumber(rows[0].val) + " per " + formatNumber(tot) + " persone, sicuro di chiudere l'impresa FALLITA?", yesno).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text.toLowerCase() == "si") {
							connection.query('UPDATE player SET global_end = 0', function (err, rows, fields) {
								if (err) throw err;

								var minValue = 500;
								var minText = "stanze dungeon completate";
								var text = "nessuno scrigno U ottenuto in assalto!";

								connection.query('SELECT P.nickname, P.chat_id, A.player_id, A.value As val FROM player P LEFT JOIN achievement_global A ON A.player_id = P.id WHERE P.reborn > 1 AND P.account_id NOT IN (SELECT account_id FROM banlist) AND (A.value < ' + minValue + ' OR A.value IS NULL) GROUP BY P.id ORDER BY val DESC', function (err, rows, fields) {
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										connection.query('UPDATE player SET global_end = 1 WHERE id = ' + rows[i].player_id, function (err, rows, fields) {
											if (err) throw err;
										});
										bot.sendMessage(rows[i].chat_id, "Per il fallimento dell'Impresa Globale (minimo " + formatNumber(minValue) + " " + minText + "), da questo momento fino al termine della prossima impresa " + text);
										console.log(rows[i].nickname + " - Fallito");
									}
								});

								connection.query('UPDATE config SET global_eventon = 0, global_eventwait = 1', function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Fatto!");
								});
							});
						}
					}
				});
			});
		});
	};
});

bot.onText(/^\/msgtop$/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('UPDATE config SET global_msg = "Le <b>Vette dei Draghi</b> sono aperte!\nPartecipa agli incontri tra draghi pi√π popolari delle terre di Lootia e vinci sostanziosi <b>premi</b>!\nBuon divertimento!", global_msg_on = 1', function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Ora lancia /sendmsg per inviare i messaggi globali.");
		});
	}
});

bot.onText(/^\/cleantop$/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('ALTER TABLE dragon_dummy AUTO_INCREMENT = 100000;', function (err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM dragon_dummy;', function (err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM dragon_top_dummy;', function (err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM dragon_top_rank;', function (err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM dragon_top_status;', function (err, rows, fields) {
			if (err) throw err;
		});

		bot.sendMessage(message.chat.id, "Fatto!");
	}
});

bot.onText(/^\/topon$/, function (message, match) {
	if (message.from.id == 20471035) {
		updateValue("checkDragonTopOn", 1);
		reloadEvents();
		checkKeyboard();
		bot.sendMessage(message.chat.id, "Fatto!");
	}
});

bot.onText(/^\/endtop$/, function (message, match) {

	var test = 0;

	if (message.from.id == 20471035) {
		bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text == "Si") {
					connection.query('SELECT id FROM dragon_top_list ORDER BY id', function (err, rows, fields) {
						if (err) throw err;
						var top_id = 0;
						var mana = 0;
						var dust = 0;
						var chest = 0;
						var moon_qnt = 0;
						var extra_text = "";
						var chestText = "";
						var text = "";

						var multi = 1.2;

						if (test == 1)
							console.log("Modalit√† test attiva, nessun messaggio n√® aggiornamento");

						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							top_id = rows[i].id;
							connection.query('SELECT D.player_id, D.rank, P.chat_id FROM dragon_top_rank D, player P, dragon D2 WHERE P.id = D2.player_id AND D.player_id = P.id AND D.top_id = ' + top_id + ' ORDER BY D.rank DESC, D2.level ASC, P.id ASC', function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length > 0) {
									var acc = 0;
									for (var j = 0, len = Object.keys(rows).length; j < len; j++) {
										acc = ((10*this.top_id)+rows[j].rank);
										console.log("Accumulati: " + acc + " per " + rows[j].player_id);
										if (test == 0) {
											connection.query('UPDATE player SET top_rank_count = top_rank_count+' + acc + ' WHERE id = ' + rows[j].player_id, function (err, rows, fields) {
												if (err) throw err;
											});
										}
										if ((rows[j].rank < 12) && (this.top_id == 1)) {
											if (test == 0) {
												bot.sendMessage(rows[j].chat_id, "Per il tuo posizionamento nelle *Vette dei Draghi*, essendo rimasto al primo Monte e di basso rango, non hai ricevuto alcun premio aggiuntivo! La prossima volta prova ad impegnarti di pi√π :(", mark);
											}
											continue; // per non dare altri premi
										}

										mana = Math.round(Math.pow(this.top_id, multi) * 200);
										chest = Math.floor(this.top_id*Math.log2(rows[j].rank));
										if (chest < 0)
											chest = 0;
										if (rows[j].rank > 50)
											rows[j].rank = 50;
										dust = Math.round(rows[j].rank * (Math.pow(this.top_id, multi) * 8));

										if ((this.top_id == max_top_id) && (j < 8))
											moon_qnt = 4-Math.floor(j/2);
										else
											moon_qnt = 0;

										if ((j == 0) && (test == 0)) {
											connection.query('UPDATE player SET top_win = top_win+1 WHERE id = ' + rows[j].player_id, function (err, rows, fields) {
												if (err) throw err;
											});
										}

										console.log(rows[j].player_id, mana, chest, dust, moon_qnt);

										if (test == 0) {
											connection.query('UPDATE event_mana_status SET mana_1 = mana_1+' + mana + ', mana_2 = mana_2+' + mana + ', mana_3 = mana_3+' + mana + ' WHERE player_id = ' + rows[j].player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											addItem(rows[j].player_id, 646, dust);
											addChest(rows[j].player_id, 9, chest);
											setAchievement(rows[j].player_id, 81, mana);
										}

										chestText = "";
										if (chest > 0)
											chestText = "\n> " + chest + "x Scrigni Scaglia";

										extra_text = "";
										if (moon_qnt > 0) {
											if (test == 0) {
												connection.query('UPDATE player SET moon_coin = moon_coin+' + moon_qnt + ' WHERE id = ' + rows[j].player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											}
											extra_text = "\n> " + moon_qnt + "x Monete Lunari";
										}

										text = "Per il tuo posizionamento nelle *Vette dei Draghi* hai ricevuto:\n> " + formatNumber(mana) + " Mana per tipo\n> " + formatNumber(dust) + " unit√† di Polvere" + chestText + extra_text + "\n\nI premi durante le prossime stagioni potrebbero cambiare, grazie per aver partecipato!";

										if (test == 0)
											bot.sendMessage(rows[j].chat_id, text, mark);
										else
											console.log(text);
									}
									if (test == 0) {
										connection.query('UPDATE player SET top_first = 0', function (err, rows, fields) {
											if (err) throw err;
										});
									}
								}
							}.bind({
								top_id: top_id
							}));
						}
						bot.sendMessage(message.chat.id, "Fatto!", back);
					});
				};
			};
		});
	}
});

bot.onText(/^\/refreshSpread/i, function (message) {
	if (message.from.id == 20471035) {

		connection.query('SELECT id FROM item', function (err, rowsItem, fields) {
			if (err) throw err;

			for (var i = 0, len = Object.keys(rowsItem).length; i < len; i++) {
				var item_id = rowsItem[i].id;
				var rows = connection_sync.query('SELECT (SELECT COUNT(id) FROM player) As player, COUNT(id) As cnt FROM inventory WHERE item_id = ' + item_id);

				var calc_spread = Math.round((rows[0].cnt / rows[0].player) * 100);

				var rows = connection_sync.query('SELECT SUM(quantity) As num, (SELECT SUM(quantity) FROM inventory) As tot FROM inventory WHERE item_id = ' + item_id);

				var calc_spread_tot = Math.round((rows[0].num / rows[0].tot) * 100 * 1000) / 1000;

				connection.query('UPDATE item SET spread = ' + calc_spread + ', spread_tot = ' + calc_spread_tot + ' WHERE id = ' + item_id, function (err, rows, fields) {
					if (err) throw err;
				});

				console.log(item_id, calc_spread, calc_spread_tot);
			};
		});
	}
});

bot.onText(/^\/refreshEstimate/i, function (message) {
	if (message.from.id == 20471035) {

		connection.query('UPDATE item SET estimate = value WHERE estimate < value', function (err, rows, fields) {
			if (err) throw err;

			connection.query('SELECT id, name, estimate FROM item', function (err, rows, fields) {
				if (err) throw err;

				var id = 0;
				var est = 0;
				var n = "";

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					id = rows[i].id;
					est = rows[i].estimate;
					n = rows[i].name;

					connection.query('SELECT DISTINCT(from_id), price FROM market_direct_history WHERE time BETWEEN date_sub(NOW(),INTERVAL 1 WEEK) AND NOW() AND price != (SELECT value FROM item WHERE id = ' + id + ') AND item_id = ' + id + ' AND type = 2', function (err, rows, fields) {
						if (err) throw err;
						var price = 0;
						var arr = [];
						if (Object.keys(rows).length > 1) {
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if ((rows[i].price < (this.est) * 3) && (rows[i].price > (this.est / 3)))
									arr.push(rows[i].price);
							}

							if (arr.length > 1) {
								price = estimate(arr);

								if (!isNaN(price)) {
									connection.query('UPDATE item SET estimate = ' + price + ' WHERE id = ' + this.id, function (err, rows, fields) {
										if (err) throw err;
									});
									console.log("Estimate per " + this.n + ": " + price);
								} else {
									console.log("Estimate per " + this.n + ": scartato per isNaN");
								}
							} else {
								console.log("Estimate per " + this.n + ": scartato, pochi valori");
							}
						}
					}.bind({
						id: id,
						est: est,
						n: n
					}));
				}
			});
		});
	};
});

bot.onText(/^\/miner/, function (message, match) {

	if (!checkSpam(message))
		return;

	if (message.from.id != 20471035) {
		bot.sendMessage(message.chat.id, "Presto disponibile");
		return;
	}

	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		request('https://api.crypto-loot.com/user/balance?secret=' + config.cltoken + '&name=lootminer' + player_id, function(err, res, body) {
			if (err) throw err;

			var rate = 102400;
			var value = 1800;
			var json = JSON.parse(body);
			var tot = json.total;
			console.log("Miner:", json.total, json.balance);

			connection.query('SELECT total_hash FROM miner WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				var gain = 0;

				if (Object.keys(rows).length == 0) {
					connection.query('INSERT INTO miner (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Il tuo profilo √® stato creato! Usa il comando /miner per riaccere alla funzione.");
					});
					return;
				}

				if (tot > rows[0].total_hash) {
					gain = tot-rows[0].total_hash;
					bot.sendMessage(message.chat.id, "Hai ottenuto *" + Math.floor(gain/rate*100)/100 + " LBH* dall'ultimo accesso!", mark);
				}
				connection.query('UPDATE miner SET total_hash = ' + tot + ', hash = hash+' + gain + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					connection.query('SELECT hash FROM miner WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						var my_lbh = rows[0].hash/rate;
						connection.query('SELECT SUM(hash) As tot FROM miner', function (err, rows, fields) {
							if (err) throw err;
							var lbh = rows[0].tot/rate;

							var iKeys = [];
							iKeys.push([{
								text: "Vai al Miner!",
								url: "http://fenixweb.net/miner.php?user=" + player_id
							}]);

							bot.sendMessage(message.chat.id, "Benvenuto in Loot Miner!\nSono stati accumulati fin ora <b>" + Math.floor(lbh*1000)/1000 + " LBH</b> (dei quali <b>" + Math.floor(my_lbh*1000)/1000 + "</b> prodotti da te), puoi contribuire ad ottenerne altri cliccando sul pulsante sotto.\nUna volta raggiunti almeno <i>" + value + "</i> LBH, tutti i partecipanti otterrano 1 üåï!", {
								parse_mode: 'HTML',
								disable_web_page_preview: true,
								reply_markup: {
									inline_keyboard: iKeys
								}
							});

							if (lbh >= 1800)
								shareMoon();
						});
					});
				});
			});
		});
	});
});

bot.onText(/^\/comandi/, function (message, match) {
	if (message.from.id == 20471035) {
		bot.sendMessage(message.chat.id, "Lista comandi\n" +
						"/ban nick motivo\n" +
						"/unban nick\n" +
						"/marketban nick\n" +
						"/setwarn nick n\n" +
						"/setmsg messaggio\n" +
						"/save (memorizza gli attivi)\n" +
						"/active (stampa gli attivi)\n" +
						"/festival (cambia oggetto manualmente)\n" +
						"/getid nick\n" +
						"/lacrima nick\n" +
						"/dona nick numero (gestisce da solo luckymode)\n" +
						"/dai_scrigni nick,nome,qnt\n" +
						"/dai_ogg nick,ogg,qnt\n" +
						"/soldi nick,qnt\n" +
						"/dai_gemme nick,qnt\n" +
						"/dai_moon nick,qnt\n" +
						"/key (aggiorna tastiere)\n" +
						"/eventon /eventoff\n" +
						"/cmd backuplist/backup/reboot\n" +
						"/accountid nick\n" +
						"/genmarket (rigenera mercante pazzo)\n" +
						"/endglobal (fine globale)\n" +
						"/failglobal (fallimento globale)\n" +
						"/avviso testo (msg agli attivi < 48h)\n" +
						"/refill (lancia refreshLife())\n" +
						"/assaultstop (manutenzione assalto)");
	} else
		bot.sendMessage(message.chat.id, "Piacerebbe :D");
});

bot.onText(/^\/scorciatoia/, function (message, match) {
	bot.sendMessage(message.chat.id, "Lista comandi e scorciatoie\n" +
					"> mnu - Mostra il men√π principale del bot\n" +
					"> 'cerca' - Apre il men√π per la ricerca degli oggetti\n" +
					"> 'cerca nomeoggetto' - Ricerca uno specifico oggetto\n" +
					"> 'cerca (asterisco)nomeoggetto' - Forza la ricerca per uno specifico oggetto\n" +
					"> 'vendi nomeoggetto' - Accede direttamente alla vendita dell'oggetto specificato\n" +
					"> '/ricicla NomeOggetto,quantit√†' - Ricicla oggetti. Le quantit√† devono essere multipli di 5, massimo 50\n" +
					"> 'incremento (abbrev. inc) - Attiva l'incremento in assalto per il turno corrente\n" +
					"> 'equipaggia (equip) - Porta al men√π equipaggiamento\n" +
					"> rimuovi - Porta al men√π rimuovi equipaggiamento\n" +
					"> cura completa (cura, cc) - Cura il giocatore utilizzando automaticamente le pozioni possedute\n" +
					"> cura parziale (cp) - Cura il giocatore utilizzando automaticamente le pozioni possedute tranne quella per superare la saluta massima\n" +
					"> giocatore (io/me) - Apre la propria scheda giocatore\n" +
					"> dungeon (dg) - Apre il men√π del dungeon\n" +
					"> statodg - Visualizza lo stato del dungeon\n" +
					"> matchmaking (mm) - Avvia il matchmaking delle ispezioni\n" +
					"> party - Apre il men√π della gestione party\n" +
					"> '/eliminaX' - Scioglie il party specificato dal numero X\n" +
					"> albero talenti (albero) - Apre il men√π relativo ai Talenti\n" +
					"> riposa (per far riposare drago) - Cura il drago dopo una specifica attesa\n" +
					"> incarichi (va al men√π incarichi) - Apre il men√π incarichi\n" +
					"> '/invitati' - Mostra i player che si sono registrati usando il link invito\n" +
					"> '/sintesi 100,200,300' (blu, giallo, rosso) - Apre il men√π per procedere alla sintesi incantesimi\n" +
					"> '/trasmo bianca,gialla,rosso (spada, armatura, scudo)' - Apre il men√π per modificare l'equipaggiamento necro\n" +
					"> ispeziona - Apre il men√π rifugio");
});

bot.onText(/^\/marketban (.+)/, function (message, match) {
	match[1] = match[1].replace("@", "");
	if (message.from.id == 20471035) {
		connection.query('SELECT id, market_ban, nickname, id, account_id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non ho trovato nessun utente con quel nickname.");
				return;
			}

			if (rows[0].market_ban == 0) {
				connection.query('UPDATE player SET market_ban = 1 WHERE id = ' + rows[0].id, function (err, rows, fields) {
					if (err) throw err;
				});

				bot.sendMessage(message.chat.id, rows[0].nickname + " bannato dal mercato.");
			} else {
				connection.query('UPDATE player SET market_ban = 0 WHERE id = ' + rows[0].id, function (err, rows, fields) {
					if (err) throw err;
				});

				bot.sendMessage(message.chat.id, rows[0].nickname + " sbannato dal mercato.");
			}
		});
	};
});

bot.onText(/^\/sendmsg/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('DELETE FROM global_msg', function (err, rows, fields) {
			if (err) throw err;
			connection.query('ALTER TABLE global_msg AUTO_INCREMENT=1', function (err, rows, fields) {
				if (err) throw err;
				connection.query('UPDATE config SET global_msg_on = 1', function (err, rows, fields) {
					if (err) throw err;
					connection.query('INSERT INTO global_msg (chat_id) SELECT P.chat_id FROM last_command L, player P WHERE L.account_id = P.account_id AND L.time > NOW() - INTERVAL 4 WEEK AND P.global_msg = 1 AND P.account_id NOT IN (SELECT account_id FROM banlist)', function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Inserite " + rows.affectedRows + " voci");
					});
				});
			});
		});
	}
});

bot.onText(/^\/setmsg (.+)/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('UPDATE config SET global_msg = "' + match[1] + '", global_msg_on = 1', function (err, rows, fields) {
			if (err) throw err;
			connection.query('SELECT global_msg FROM config', function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Messaggio impostato, ora /sendmsg");
				bot.sendMessage(message.chat.id, rows[0].global_msg, no_preview_html);
			});
		});
	}
});

bot.onText(/^\/getmsg/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('SELECT global_msg FROM config', function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, rows[0].global_msg);
		});
	}
});

bot.onText(/^\/avviso (.+)/, function (message, match) {
	if (message.from.id == 20471035) {

		if (match[1] == undefined) {
			bot.sendMessage(message.chat.id, "Messaggio non impostato (/avviso testo)");
			return;
		}

		connection.query('SELECT chat_id FROM last_command, player WHERE last_command.account_id = player.account_id AND TIMESTAMPDIFF(HOUR, time, NOW()) < 48 AND player.account_id NOT IN (SELECT account_id FROM banlist) ORDER BY time ASC', function (err, rows, fields) {
			if (err) throw err;

			for (var i = 0, len = Object.keys(rows).length; i < len; i++)
				bot.sendMessage(rows[i].chat_id, "*Avviso*\n" + match[1], mark);

			bot.sendMessage(message.chat.id, "Inviato a " + Object.keys(rows).length + " utenti");
		});
	}
});

bot.onText(/^\/setwarn ([^\s]+) (.+)/, function (message, match) {
	if (message.from.id == 20471035) {
		connection.query('SELECT nickname, id, account_id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non ho trovato nessun utente con quel nickname.");
				return;
			}
			connection.query('UPDATE player SET market_warn = ' + match[2] + ' WHERE id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
			});
			bot.sendMessage(message.chat.id, rows[0].nickname + " impostato a " + match[2] + " warn");
		});
	};
});

bot.onText(/^\/ban ([^\s]+) (.+)|^\/ban/, function (message, match) {
	if (message.from.id == 20471035) {

		if (match[1] == undefined) {
			bot.sendMessage(message.chat.id, "Sintassi: /ban nickname motivo");
			return;
		}

		connection.query('SELECT nickname, id, account_id FROM player WHERE nickname = "' + match[1].replace("@", "") + '"', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non ho trovato nessun utente con quel nickname.");
				return;
			}

			connection.query('INSERT INTO banlist (account_id, reason) VALUES (' + rows[0].account_id + ',"' + match[2] + '")', function (err, rows, fields) {
				if (err) throw err;
			});

			connection.query('DELETE FROM public_shop WHERE player_id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('UPDATE player SET market_ban = 1, mission_party = 0 WHERE id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('DELETE FROM team_player WHERE player_id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('UPDATE token SET token = NULL, status = "REVOKED" WHERE player_id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('DELETE FROM mission_team_party_player WHERE player_id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
			});

			removeFromAssault(rows[0].id);

			bot.sendMessage(message.chat.id, rows[0].nickname + " (" + rows[0].account_id + ") bannato.");
		});
	};
});

bot.onText(/^\/unban (.+)|^\/unban/, function (message, match) {
	if (message.from.id == 20471035) {

		if (match[1] == undefined) {
			bot.sendMessage(message.chat.id, "Sintassi: /unban nickname");
			return;
		}

		var nickname = match[1].replace("@", "");
		connection.query('SELECT nickname, account_id FROM player WHERE nickname = "' + nickname + '"', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non ho trovato nessun utente con quel nickname.");
				return;
			}

			connection.query('UPDATE player SET market_ban = 0 WHERE account_id = ' + rows[0].account_id, function (err, rows, fields) {
				if (err) throw err;
			});

			connection.query('DELETE FROM banlist WHERE account_id = ' + rows[0].account_id, function (err, rows, fields) {
				if (err) throw err;
			});

			bot.sendMessage(message.chat.id, rows[0].nickname + " sbannato!");
		});
	};
});

bot.onText(/^\/save/, function (message, match) {
	if (message.from.id != 20471035)
		return;
	saveActive();
	bot.sendMessage(message.chat.id, "Salvata");
});

bot.onText(/^\/festival/, function (message, match) {
	if (message.from.id != 20471035)
		return;
	reloadFestival(1);
	bot.sendMessage(message.chat.id, "Fatto!");
});

bot.onText(/^\/active/, function (message, match) {
	if (message.from.id != 20471035)
		return;
	connection.query('SELECT count, time FROM active_history ORDER BY time DESC LIMIT 50', function (err, rows, fields) {
		if (err) throw err;

		var text = "";
		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
			text += rows[i].count + " -> " + toDate("it", rows[i].time) + "\n";
		bot.sendMessage(message.chat.id, text);
	});
});

bot.onText(/\/start (.+)|\/start/i, function (message, match) {
	if (message.from.username == undefined) {
		bot.sendMessage(message.chat.id, "Devi impostare un username su Telegram per poter giocare, puoi farlo tramite le *impostazioni* dell'applicazione. Una volta impostato, usa di nuovo il comando /start, oppure /start CODICEINVITO nel caso di un link invito, altrimenti non riceverai il bonus invito.", mark);
		return;
	}

	var invite = match[1];
	if (invite != undefined)
		console.log("Codice invito: " + invite);

	var code = "Non disponibile";

	connection.query('SELECT 1 FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			connection.query('UPDATE player SET chat_id = ' + message.chat.id + ' WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Sei gi√† registrato! Se hai qualche problema, segnala all'amministratore", back);
			});
			return;
		}
		connection.query('SELECT 1 FROM player WHERE account_id = ' + message.from.id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				bot.sendMessage(message.chat.id, "Questo id √® gi√† registrato, se hai cambiato nome utente usa /migrazione. Grazie!", back);
				return;
			}

			var rnd_code = makeid();
			connection.query('SELECT nickname, id, chat_id FROM player WHERE invite_code = "' + invite + '"', function (err, rows, fields) {
				if (err) throw err;

				var invite = "";
				var money = 10000;	// Nuovo utente
				var gems = 1;
				if (Object.keys(rows).length > 0) {
					var d = new Date();
					var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

					connection.query('INSERT INTO referral_list (new_player, player_id, new_player_nick, player_nick, time) VALUES ((SELECT MAX(id) FROM player)+1, ' + rows[0].id + ',"' + message.from.username + '", "' + rows[0].nickname + '", "' + long_date + '")', function (err, rows, fields) {
						if (err) throw err;
					});

					invite = " (" + rows[0].nickname + ")";

					bot.sendMessage(rows[0].chat_id, "L'utente <b>" + message.from.username + "</b> si √® registrato con il tuo link invito, dopo che avr√† completato alcune missioni otterrai <b>monete e üíé</b>! Inoltre riceverai un premio cospicuo quando il giocatore raggiunger√† la varie rinascite (fino alla terza)!", html);
					bot.sendMessage(message.chat.id, "Ti sei registrato con il link invito di <b>" + rows[0].nickname + "</b> ed hai ricevuto <b>" + formatNumber(money)  + " ¬ß</b>  e <b>" + gems + "</b> üíé!", html);
				}
				connection.query('INSERT INTO player (id, exp, account_id, nickname, chat_id, money, gems, invite_code, life, total_life) VALUES (DEFAULT, 10, ' + message.from.id + ', "' + message.from.username + '", ' + message.chat.id + ', ' + money + ', ' + gems + ',"' + rnd_code + '", 10, 10)', function (err, rows, fields) {
					if (err) throw err;

					bot.sendMessage("-1001098734700", "#Registrazione: " + message.from.username + " (" + message.from.id + ")" + invite);

					printStart(message);
				});
			});
		});
	});
});

bot.onText(/\/fixdragon (.+)/, function (message, match) {
	connection.query('SELECT id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		connection.query('UPDATE dragon_top_status SET is_dummy = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Fatto!");
		});
	});
});

bot.onText(/\/cleanDb/, function (message, match) {
	connection.query('SELECT id, name FROM team', function (err, rows, fields) {
		if (err) throw err;
		var newname = "";
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			newname = "";
			if (re4.test(rows[i].name) == false) {
				newname = rows[i].name.replaceAll("[^a-zA-Z0-9√†√®√¨√≤√π ]", "").trim();
				console.log(rows[i].name + " -> " + newname);
				connection.query('UPDATE team SET name = "' + newname + '" WHERE id = ' + rows[i].id, function (err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
});

bot.onText(/Donazioni|Lunari/i, function (message) {
	var kb = {
		parse_mode: "HTML",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Fai una Donazione!"], ["Donatori complessivi"], ["Donatori ultimi 3 mesi"], ["Torna al menu"]]
		}
	};

	var date = new Date();

	connection.query("SELECT ROUND(SUM(amount)) As tot FROM donation_history WHERE YEAR(time) = " + date.getFullYear() + " AND MONTH(time) = " + (date.getMonth()+1), function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].tot == null)
			rows[0].tot = 0;

		var max = 90;
		var att = rows[0].tot;
		var progress = progressBar(att, max);

		var extra = "";
		if (luckyMode == 1)
			extra = "<b>Oggi le monete ottenute sono raddoppiate!</b>\n";

		bot.sendMessage(message.chat.id, "<b>Donazioni</b>\n\n<i>Magari non tutti voi sapete che mantenere il server di Loot Bot ha un costo che deve essere saldato ogni mese, non ci sono pubblicit√†, n√® acquisti pay2win, n√® sponsorizzazioni che contribuiscono al sostentamento. Perci√≤ tu nel tuo piccolo puoi aiutare donando attraverso il link sotto, qualsiasi cifra pu√≤ aiutare. Per motivarti un po' (lo so che ti stai chiedendo: 'e io che ci guadagno?') oltre al fatto che saprai che hai aiutato ad estendere di un mese questo passatempo, riceverai anche una Moneta Lunare per ogni euro donato.\nNon √® niente di obbligatorio e niente di troppo vantaggioso, anzi. Per√≤ purtroppo non sempre si riesce a mantenere tutto in modo gratuito. A me personalmente farebbe molto piacere la cosa, pensaci!</i>\n\nLink PayPal: https://www.paypal.me/EdoardoCortese\nIndirizzo Bitcoin: <code>3ChwKyXG4fo8NDAdQwJERUty78qumeyn91</code>\n\nRicordati di specificare il nickname, se hai problemi contattami in privato (@fenix45).\nIn caso di abbandono del gioco o casi simili, la donazione <i>non verr√†</i> rimborsata.\n" + extra + "\nProgresso per il mese attuale: " + progress + " " + att + " ‚Ç¨ / " + max + " ‚Ç¨", kb);
	});
});

bot.onText(/Fai una Donazione!/i, function (message) {

	var iKeys = [];
	iKeys.push([{
		text: "Paypal",
		url: "https://www.paypal.me/EdoardoCortese"
	}]);
	iKeys.push([{
		text: "2 ‚Ç¨",
		callback_data: "pay:2.00"
	},{
		text: "4 ‚Ç¨",
		callback_data: "pay:4.00"
	}]);
	iKeys.push([{
		text: "10 ‚Ç¨",
		callback_data: "pay:10.00"
	},{
		text: "20 ‚Ç¨",
		callback_data: "pay:20.00"
	}]);
	iKeys.push([{
		text: "50 ‚Ç¨",
		callback_data: "pay:50.00"
	},{
		text: "100 ‚Ç¨",
		callback_data: "pay:100.00"
	}]);

	bot.sendMessage(message.chat.id, "Seleziona l'importo della tua donazione, se il pagamento avviene tramite Telegram attraverso il servizio Stripe le üåï vengono accreditate immediatamente. Nel caso di Paypal potrebbero subire ritardi di qualche ora.\n<b>RICORDA DI SPECIFICARE IL NICKNAME SU PAYPAL!</b>", {
		parse_mode: 'HTML',
		disable_web_page_preview: true,
		reply_markup: {
			inline_keyboard: iKeys
		}
	});
});

Array.prototype.randomElement = function () {
	return this[Math.floor(Math.random() * this.length)]
}

bot.on('callback_query', function (message) {
	var text = message.data;
	var func = text.split(":")[0];
	var param = text.split(":")[1];

	connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			bot.answerCallbackQuery(message.id, {text: 'Registrati per utilizzare questa funzione!'});
			return;
		}

		var player_id = rows[0].id;
		var chat_id = rows[0].chat_id;

		if (func == "pay") {
			var payload = player_id + Date.now() + param;
			var prices = [{
				label: "Donazione",
				amount: parseInt(param.replace(".", ""))
			}];
			connection.query('INSERT INTO payments (player_id, payload, amount, status) VALUES (' + player_id + ', "' + payload + '", ' + param + ', "WAIT")', function (err, rows, fields) {
				if (err) throw err;
				bot.sendInvoice(chat_id, "Donazione", "Donazione di " + param + "‚Ç¨", payload, "350862534:LIVE:NTg4MzAxNGMzMzI5", "pay", "EUR", prices);
			});
		} else if (func == "team_miss") {

			var part_id = text.split(":")[2];

			connection.query('SELECT T.part_id, T.team_id, T.party_id, T.assigned_to, T.report_id, P.answ_id, T.text_user FROM mission_team_party_player P, mission_team_party T WHERE P.party_id = T.party_id AND P.team_id = T.team_id AND P.player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.answerCallbackQuery(message.id, {text: 'Errore'});
					return;
				}

				var team_id = rows[0].team_id;
				var party_id = rows[0].party_id;
				var assigned_to = rows[0].assigned_to;
				var report_id = rows[0].report_id;
				var text_user = rows[0].text_user;

				if (rows[0].part_id != part_id) {
					bot.answerCallbackQuery(message.id, {text: 'Parte di incarico gi√† completata!'});
					return;
				}

				if (param != "update") {
					if (rows[0].answ_id > 0) {
						bot.answerCallbackQuery(message.id, {text: 'Hai gi√† votato!'});
						param = "update";
						return;
					}
				}

				connection.query('SELECT COUNT(id) As cnt FROM mission_team_party_player P WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
					if (err) throw err;
					var party_cnt = rows[0].cnt;

					connection.query('SELECT question, answ1, answ2, answ3, pnt1, pnt2, pnt3, report1, report2, report3 FROM mission_team_list_part WHERE list_id = ' + assigned_to + ' AND part_id = ' + part_id, function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0) {
							bot.answerCallbackQuery(message.id, {text: 'Errore'});
							return;
						}

						var question = rows[0].question;
						var answ1 = rows[0].answ1;
						var answ2 = rows[0].answ2;
						var answ3 = rows[0].answ3;
						var pnt1 = rows[0].pnt1;
						var pnt2 = rows[0].pnt2;
						var pnt3 = rows[0].pnt3;
						var report1 = rows[0].report1;
						var report2 = rows[0].report2;
						var report3 = rows[0].report3;

						var iKeys = [];
						iKeys.push([{
							text: "Aggiorna",
							callback_data: "team_miss:update:" + part_id
						}]);

						if (param != "update")
							connection_sync.query('UPDATE mission_team_party_player SET answ_id = ' + param + ' WHERE player_id = ' + player_id);

						connection.query('SELECT answ_id FROM mission_team_party_player WHERE team_id = ' + team_id + ' AND party_id = ' + party_id + ' AND answ_id != 0', function (err, rows, fields) {
							if (err) throw err;

							var text = "\n\nScelte del tuo party:\n";
							var val1 = 0;
							var val2 = 0;
							var val3 = 0;
							var valmax = 0;
							var len = Object.keys(rows).length;
							for (var i = 0; i < len; i++) {
								if (rows[i].answ_id == 1)
									val1++;
								else if (rows[i].answ_id == 2)
									val2++;
								else if (rows[i].answ_id == 3)
									val3++;
							}

							if ((val1 > val2) && (val1 > val3))
								valmax = 1;
							else if ((val2 > val1) && (val2 > val3))
								valmax = 2;
							else if ((val3 > val2) && (val3 > val1))
								valmax = 3;

							var isRandom = 0;

							if (valmax == 0) {
								if ((val1 == val2) && (val2 == val3))
									valmax = [1,2,3].randomElement();
								else if (val1 == val2)
									valmax = [1,2].randomElement();
								else if (val1 == val3)
									valmax = [1,3].randomElement();
								else if (val2 == val3)
									valmax = [2,3].randomElement();
								else
									valmax = [1,2,3].randomElement();
								isRandom = 1;
							}

							var choice = "";
							var choiceNum = 0;
							if (valmax == 1)
								text += "<b>" + answ1 + " (" + Math.round(val1*100/len) + "%)</b>\n";
							else
								text += answ1 + " (" + Math.round(val1*100/len) + "%)\n";
							if (valmax == 2)
								text += "<b>" + answ2 + " (" + Math.round(val2*100/len) + "%)</b>\n";
							else
								text += answ2 + " (" + Math.round(val2*100/len) + "%)\n";
							if (valmax == 3)
								text += "<b>" + answ3 + " (" + Math.round(val3*100/len) + "%)</b>\n";
							else
								text += answ3 + " (" + Math.round(val3*100/len) + "%)\n";

							if (valmax == 1) {
								choice = answ1;
								choiceNum = val1;
							} else if (valmax == 2) {
								choice = answ2;
								choiceNum = val2;
							} else {
								choice = answ3;
								choiceNum = val3;
							}

							text += "\nVoti: " + len + "/" + party_cnt;

							connection.query('SELECT text FROM mission_team_report WHERE report_id = ' + report_id + ' AND part_id = ' + (part_id-1) + ' ORDER BY id DESC', function (err, rows, fields) {
								if (err) throw err;

								var last_answer = "";
								if (Object.keys(rows).length > 0)
									last_answer = capitalizeFirstLetter(rows[0].text);

								if ((text_user == null) || (text_user == undefined))
									question = question.replaceAll("%casuale%", "qualcuno");
								else
									question = question.replaceAll("%casuale%", text_user);

								var team = connection_sync.query('SELECT name FROM team WHERE id = ' + team_id);
								question = question.replaceAll("%team%", team[0].name);

								var newtext = "<b>Incarico in corso</b>\n\n<i>" + last_answer + question + "</i>" + text;
								var checktext = newtext.replaceAll("<[^>]*>", "").trim();

								if (message.message.text != checktext) {
									bot.editMessageText(newtext, {
										chat_id: message.message.chat.id,
										message_id: message.message.message_id,
										parse_mode: 'HTML',
										reply_markup: {
											inline_keyboard: iKeys
										}
									}).catch(function (err) {
										if (err)
											console.log("Errore editMessage");
									});
									bot.answerCallbackQuery(message.id, {text: 'Aggiornato'});
								} else
									bot.answerCallbackQuery(message.id, {text: 'Nessuna novit√†'});
							});

							if ((len >= party_cnt) && (param != "update")) {
								connection.query('SELECT duration, parts FROM mission_team_list WHERE id = ' + assigned_to, function (err, rows, fields) {
									if (err) throw err;

									var duration = rows[0].duration;
									var total_parts = rows[0].parts;

									var d = new Date();
									d.setSeconds(d.getSeconds() + duration);
									var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
									var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

									connection.query('UPDATE mission_team_party SET mission_time_end = "' + long_date + '" WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
										connection.query('SELECT player_id, player.chat_id FROM mission_team_party_player, player WHERE mission_team_party_player.player_id = player.id AND team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
											if (err) throw err;

											var txt = "proseguite l'incarico fino alle " + short_date + "!";
											var randomText = "";
											if (part_id == total_parts)
												txt = "attendete l'assegnazione delle ricompense alle " + short_date + "!";
											if (isRandom)
												randomText = " (in modo casuale tra le scelte a pari merito)";
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												bot.sendMessage(rows[i].chat_id, "La decisione presa, da parte di " + choiceNum + " membri del party" + randomText + ", √® _" + choice + "_; " + txt, mark);
											}

											connection.query('UPDATE mission_team_party SET wait = 0, text_user = NULL WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
												if (err) throw err;
											});

											var paramPnt = 0;
											var paramText = "";
											if (valmax == 1) {
												paramPnt = pnt1;
												paramText = report1;
											} else if (valmax == 2) {
												paramPnt = pnt2;
												paramText = report2;
											} else if (valmax == 3) {
												paramPnt = pnt3;
												paramText = report3;
											}

											paramText = paramText.replace(/"/g, "'");

											if (part_id == 1) {
												connection.query('SELECT MAX(report_id) As mx FROM mission_team_report', function (err, rows, fields) {
													if (err) throw err;

													var maxid = 1;
													if (rows[0].mx != null)
														maxid = parseInt(rows[0].mx)+1;

													connection.query('INSERT INTO mission_team_report (report_id, party_id, team_id, part_id, answ_id, pnt, text) VALUES (' + maxid + ', ' + party_id + ', ' + team_id + ', ' + part_id + ', ' + valmax + ', ' + paramPnt + ',"' + paramText + '")', function (err, rows, fields) {
														if (err) throw err;
														connection.query('UPDATE mission_team_party SET report_id = ' + maxid + ' WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
															if (err) throw err;
														});
													});
												});
											} else {
												connection.query('INSERT INTO mission_team_report (report_id, party_id, team_id, part_id, answ_id, pnt, text) VALUES (' + report_id + ', ' + party_id + ', ' + team_id + ', ' + part_id + ', ' + valmax + ', ' + paramPnt + ',"' + paramText + '")', function (err, rows, fields) {
													if (err) throw err;
												});
											}
										});
									});
								});
							}
						});
					});
				});
			});
		}
	});
});

bot.onText(/donatori ultimi 3 mesi|donatori complessivi/i, function (message) {
	var top = "";
	var query = "";
	var period = "";
	if (message.text.toLowerCase().indexOf("complessivi") != -1) {
		query = "SELECT nickname, SUM(amount) As donation FROM donation_history, player WHERE player.account_id NOT IN (SELECT account_id FROM banlist) AND donation_history.player_id = player.id GROUP BY player_id ORDER BY donation DESC";
		period = "complessiva";
	} else {
		query = "SELECT nickname, SUM(amount) As donation FROM donation_history, player WHERE player.account_id NOT IN (SELECT account_id FROM banlist) AND donation_history.player_id = player.id AND DATEDIFF(CURDATE(), CAST(time As date)) < 90 GROUP BY player_id ORDER BY donation DESC";
		period = "degli ultimi 3 mesi";
	}
	connection.query(query, function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			var c = 1;
			for (var i = 0, len = Object.keys(rows).length - 1; i < len; i++) {
				top += c + "¬∞ " + rows[i].nickname + " (" + rows[i].donation + " ‚Ç¨)\n";
				if (rows[i].donation != rows[i + 1].donation)
					c++;
			}
			top += c + "¬∞ " + rows[Object.keys(rows).length - 1].nickname + " (" + rows[Object.keys(rows).length - 1].donation + " ‚Ç¨)\n";
		} else
			top = "Nessuna donazione :(\n";
		bot.sendMessage(message.chat.id, "<b>Top " + period + ":</b>\n" + top, back_html);
	});
});

bot.onText(/avvEstraz/, function (message) {
	if (message.from.id == 20471035) {
		bot.sendMessage("@EstrazioniLootteria", "L'estrazione inizier√† a breve!");
		bot.sendMessage(message.chat.id, "Inviato");
	};
});

bot.onText(/prossimaEstraz/, function (message) {
	if (message.from.id == 20471035)
		bot.sendMessage("@EstrazioniLootteria", "Acquista ora i biglietti per la Lootteria di oggi!");
});

bot.onText(/fineEstraz/, function (message) {
	if (message.from.id == 20471035) {
		var kb = {
			parse_mode: "Markdown",
			disable_web_page_preview: true,
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Scrigno di Consolazione"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT player.nickname, player.id, player.chat_id FROM event_lottery_coins, player WHERE event_lottery_coins.player_id = player.id GROUP BY player_id', function (err, rows, fields) {
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				bot.sendMessage(rows[i].chat_id, "*Lootteria*: L'estrazione √® terminata! Usa il pulsante sotto per ricevere uno scrigno di consolazione!\n(Puoi anche scrivere Scrigno di Consolazione)", kb);
			}
			bot.sendMessage(message.chat.id, "Notifica inviata a " + Object.keys(rows).length + " utenti");
		});
	};
});

bot.onText(/Scrigno di Consolazione/i, function (message) {
	connection.query('SELECT id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var date = new Date();

		connection.query('SELECT extracted FROM event_lottery_prize WHERE day = ' + date.getDay() + ' ORDER BY id DESC', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Nessuna lotteria disponibile.", back);
				return;
			}
			if (rows[0].extracted == 0) {
				bot.sendMessage(message.chat.id, "L'estrazione √® in corso!", back)
				return;
			}

			connection.query('SELECT id FROM event_lottery_coins WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Non hai partecipato alla lotteria oppure hai vinto qualcosa durante l'estrazione.", back);
					return;
				}

				var chest_id = 0;
				var chestName = "";
				switch (date.getDay()) {
					case 6:
						chestName = "Scrigno di Diamante";
						chest_id = 4;
						break;
					case 0:
						chestName = "Scrigno Leggendario";
						chest_id = 5;
						break;
					default:
						bot.sendMessage(message.chat.id, "Non √® pi√π possibile riscattare il premio di consolazione", back);
						return;
						break;
				}

				bot.sendMessage(message.chat.id, "Riscattare lo Scrigno?", yesno).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text.toLowerCase() == "si") {
							addChest(player_id, chest_id);

							bot.sendMessage(message.chat.id, "Hai ricevuto *" + chestName + "* come premio di consolazione!", back);

							connection.query('DELETE FROM event_lottery_coins WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								console.log(player_id + " consolazione riscattata");
							});
						};
					};
				});
			});
		});
	});
});

bot.onText(/^\/estrazione$/, function (message) {
	if (message.from.id == 20471035) {
		if (autoEstrazione == 0)
			autoEstrazione = 1;
		else
			autoEstrazione = 0;
		bot.sendMessage(message.chat.id, "Autoestrazione impostato a " + autoEstrazione);
	};
});

bot.onText(/\/getid (.+)/, function (message, match) {
	connection.query('SELECT id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(message.chat.id, rows[0].id);
	});
});

bot.onText(/\/dona (.+)/, function (message, match) {
	if (message.from.id == 20471035) {
		if (match[1] == undefined) {
			bot.sendMessage(message.chat.id, "/dona nickname quantit√†");
			return;
		}

		var split = match[1].split(" ");

		var nick = split[0];
		var qnt = split[1];

		if (luckyMode == 1)
			qnt = qnt*2;

		connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + nick + '"', function (err, rows, fields) {
			if (err) throw err;
			var player_id = rows[0].id;

			connection.query('UPDATE player SET moon_coin = moon_coin + ' + qnt + ', donation = donation + ' + qnt + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
			if (luckyMode == 1) {
				connection.query('INSERT INTO donation_history (player_id, amount, source) VALUES (' + player_id + ', ' + Math.round(qnt/2) + ', "Paypal")', function (err, rows, fields) {
					if (err) throw err;
				});
			} else {
				connection.query('INSERT INTO donation_history (player_id, amount, source) VALUES (' + player_id + ', ' + qnt + ', "Paypal")', function (err, rows, fields) {
					if (err) throw err;
				});
			}
			bot.sendMessage(rows[0].chat_id, "Hai ricevuto *" + qnt + " üåï* dall'amministratore per la tua donazione! Grazie mille!", mark);
			bot.sendMessage(message.chat.id, "Consegnati!");
		});
	} else {
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/^\/m (.+)|^\/m$/, function (message, match) {
	if (match[1] == undefined) {
		bot.sendMessage(message.chat.id, "Sintassi: /m nickname testo");
		return;
	}

	var split = match[1].split(/ (.+)/);

	var nick = split[0];
	var msg = split[1];

	if (re3.test(msg) == true) {
		bot.sendMessage(message.chat.id, "Non puoi usare virgolette doppie, singole e <>");
		return;
	}

	nick = nick.replace("@", "");

	connection.query('SELECT account_id, id, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);
		var reb = rows[0].reborn;

		if ((level < 20) && (reb == 1)) {
			bot.sendMessage(message.chat.id, "Raggiungi il livello 20 prima di poter inviare messaggi privati agli altri giocatori", back);
			return;
		}

		connection.query('SELECT id, player_id, allow FROM direct_message WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO direct_message (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Sei stato aggiunto al registro messaggi, usa /ricezione per bloccare i messaggi o riattivarli");
				});
			}

			connection.query('SELECT team_id, role FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var team_id = 0;
				var role = 0;
				if (Object.keys(rows).length > 0) {
					team_id = rows[0].team_id;
					role = rows[0].role;
				}

				connection.query('SELECT id, chat_id, account_id, exp, reborn FROM player WHERE nickname = "' + nick + '"', function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Il giocatore non esiste!");
						return;
					}

					var banReason = isBanned(rows[0].account_id);
					if (banReason != null) {
						bot.sendMessage(message.chat.id, "Il giocatore √® bannato");
						return;
					}

					if ((Math.floor(rows[0].exp/10) < 20) && (rows[0].reborn == 1)) {
						bot.sendMessage(message.chat.id, "Il destinatario non ha ancora raggiunto il livello 20, non pu√≤ ricevere messaggi privati", back);
						return;
					}

					var player_id2 = rows[0].id;
					var chat_id2 = rows[0].chat_id;

					connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id2, function (err, rows, fields) {
						if (err) throw err;

						var team_id2 = 0;
						if (Object.keys(rows).length > 0)
							team_id2 = rows[0].team_id;

						connection.query('SELECT id, player_id, allow FROM direct_message WHERE player_id = ' + player_id2, function (err, rows, fields) {
							if (err) throw err;
							var allow = 1;
							if (Object.keys(rows).length == 0) {
								connection.query('INSERT INTO direct_message (player_id, to_id) VALUES (' + player_id2 + ', ' + player_id + ')', function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id2, "Sei stato aggiunto al registro messaggi, usa /ricezione per bloccare i messaggi in entrata o riattivarli, '/r testo' per rispondere all'ultima discussione");
								});
							} else
								allow = rows[0].allow;

							if (message.from.id != 20471035) {
								if (allow == 0) {
									bot.sendMessage(message.chat.id, "Il giocatore ha bloccato la ricezione messaggi");
									return;
								}
							}

							msg = msg.replace(/[^A-Za-z0-9√†√®√¨√≤√π\.'!?\-_ ]/gi, '');
							if (msg.length > 128)
								msg = msg.slice(0, 128) + "...";

							connection.query('UPDATE direct_message SET reply_text = "' + msg + '", to_id = ' + player_id + ' WHERE player_id = ' + player_id2, function (err, rows, fields) {
								if (err) throw err;
							});

							var extra = "";
							if ((team_id != 0) && (team_id2 != 0)) {
								if (team_id == team_id2) {
									if (role == 0)
										extra = " (membro del tuo team)";
									else if (role == 1)
										extra = " (admin del tuo team)";
									else if (role == 2)
										extra = " (vice admin del tuo team)";
								}
							}

							bot.sendMessage(chat_id2, "<b>Messaggio da </b>@" + message.from.username + extra + ":\n" + msg, html);
							bot.sendMessage(message.chat.id, "Inviato!");
						});
					});
				});
			});
		});
	});
});

bot.onText(/^\/r (.+)|^\/r$/, function (message, match) {
	if (match[1] == undefined) {
		bot.sendMessage(message.chat.id, "Sintassi: /r testo");
		return;
	}

	var msg = match[1];

	if (re3.test(msg) == true) {
		bot.sendMessage(message.chat.id, "Non puoi usare virgolette doppie, singole e <>");
		return;
	}

	connection.query('SELECT account_id, id, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);
		var reb = rows[0].reborn;

		if ((level < 20) && (reb == 1)) {
			bot.sendMessage(message.chat.id, "Raggiungi il livello 20 prima di poter rispondere ai messaggi privati agli altri giocatori", back);
			return;
		}

		connection.query('SELECT id, player_id, allow, to_id, reply_text FROM direct_message WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Inizia prima una conversazione");
				return;
			}

			if (rows[0].to_id == 0) {
				bot.sendMessage(message.chat.id, "Nessun messaggio a cui rispondere");
				return;
			}

			var reply_text = rows[0].reply_text;

			connection.query('SELECT id, chat_id, account_id, exp, reborn FROM player WHERE id = ' + rows[0].to_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Il giocatore non esiste!");
					return;
				}

				var banReason = isBanned(rows[0].account_id);
				if (banReason != null) {
					bot.sendMessage(message.chat.id, "Il giocatore √® bannato");
					return;
				}

				if ((Math.floor(rows[0].exp/10) < 20) && (rows[0].reborn == 1)) {
					bot.sendMessage(message.chat.id, "Il destinatario non ha ancora raggiunto il livello 20, non pu√≤ ricevere messaggi privati", back);
					return;
				}

				var player_id2 = rows[0].id;
				var chat_id2 = rows[0].chat_id;

				connection.query('SELECT id, player_id, allow FROM direct_message WHERE player_id = ' + player_id2, function (err, rows, fields) {
					if (err) throw err;
					var allow = 1;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Il giocatore non √® registrato, invia prima un messaggio");
						return;
					} else
						allow = rows[0].allow;

					if (message.from.id != 20471035) {
						if (allow == 0) {
							bot.sendMessage(message.chat.id, "Il giocatore ha bloccato la ricezione messaggi");
							return;
						}
					}

					msg = msg.replace(/[^A-Za-z0-9√†√®√¨√≤√π\.'!?\-_ ]/gi, '');
					if (msg.length > 128)
						msg = msg.slice(0, 128) + "...";

					connection.query('UPDATE direct_message SET reply_text = "' + msg + '", to_id = ' + player_id + ' WHERE player_id = ' + player_id2, function (err, rows, fields) {
						if (err) throw err;
					});

					bot.sendMessage(chat_id2, "<b>Risposta da </b>@" + message.from.username + ":\n<i>" + reply_text + "</i>\n" + msg, html);
					bot.sendMessage(message.chat.id, "Inviato!");
				});
			});
		});
	});
});

bot.onText(/\/ricezione/, function (message, match) {
	connection.query('SELECT id, player_id, allow FROM direct_message WHERE player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			bot.sendMessage(message.chat.id, "Registrati prima inviando un messaggio");
			return;
		}

		var allow = rows[0].allow;
		var player_id = rows[0].player_id;

		if (allow == 1) {
			allow = 0;
			bot.sendMessage(message.chat.id, "Ricezione messaggi disattivata");
		} else if (allow == 0) {
			allow = 1;
			bot.sendMessage(message.chat.id, "Ricezione messaggi attivata");
		}
		connection.query('UPDATE direct_message SET allow = ' + allow + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});
});

bot.onText(/\/link (.+)|\/link/, function (message, match) {
	if ((message.from.id == 20471035)) {
		if (match[1] == undefined) {
			bot.sendMessage(message.chat.id, "/link new_player,old_player");
			return;
		}
		var split = match[1].split(",");
		connection.query('SELECT id FROM player WHERE nickname = "' + split[0] + '"', function (err, rows, fields) {
			if (err) throw err;

			var new_player_id = rows[0].id;

			connection.query('SELECT id FROM player WHERE nickname = "' + split[1] + '"', function (err, rows, fields) {
				if (err) throw err;

				var player_id = rows[0].id;

				var d = new Date();
				var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

				connection.query('INSERT INTO referral_list (new_player, player_id, new_player_nick, player_nick, time) VALUES (' + new_player_id + ', ' + player_id + ',"' + split[0] + '", "' + split[1] + '", "' + long_date + '")', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Fatto");
				});
			});
		});
	}
});

bot.onText(/\/unlock (.+)|\/unlock/, function (message, match) {
	if ((message.from.id == 20471035)) {
		if (match[1] == undefined) {
			bot.sendMessage(message.chat.id, "/unlock player");
			return;
		}
		match[1] = match[1].replace("@", "");
		connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
			if (err) throw err;

			var player_id = rows[0].id;

			var d = new Date();
			var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

			connection.query('UPDATE player SET account_id = chat_id, market_ban = 0, holiday = 0, heist_protection = NULL WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				connection.query('DELETE FROM holiday WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Fatto");
				});
			});
		});
	}
});

bot.onText(/\/dai_scrigni (.+),(.+),(.+)/, function (message, match) {
	var nick = match[1].trim();
	var chest_name = match[2].trim();
	var qnt = match[3].trim();

	if (message.from.id == 20471035) {
		connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + nick + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Utente non trovato");
				return;
			}
			var chat_id = rows[0].chat_id;
			var player_id = rows[0].id;
			connection.query('SELECT id, name FROM chest WHERE name = "' + chest_name + '"', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Scrigno non trovato");
					return;
				}
				var chest_name = rows[0].name;
				var chest_id = rows[0].id;
				addChest(player_id, chest_id, qnt);
				bot.sendMessage(chat_id, "Hai ricevuto " + qnt + "x *" + chest_name + "* dal Mercante Leggendario!", mark);
				bot.sendMessage(message.chat.id, "Consegnato!");
			});
		});
	} else {
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/dai_ogg (.+),(.+),(.+)/, function (message, match) {
	var nick = match[1].trim();
	var item_name = match[2].trim();
	var qnt = match[3].trim();

	if (message.from.id == 20471035) {
		connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + nick + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Utente non trovato");
				return;
			}
			var chat_id = rows[0].chat_id;
			var player_id = rows[0].id;
			connection.query('SELECT id, name FROM item WHERE name = "' + item_name + '"', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Oggetto non trovato");
					return;
				}
				var item_name = rows[0].name;
				var item_id = rows[0].id;
				addItem(player_id, item_id, qnt);
				bot.sendMessage(chat_id, "Hai ricevuto " + qnt + "x *" + item_name + "* dal Mercante Leggendario!", mark);
				bot.sendMessage(message.chat.id, "Consegnato!");
			});
		});
	} else {
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/soldi (.+),(.+)/, function (message, match) {
	var nick = match[1].trim();
	var qnt = match[2].trim();

	if (message.from.id == 20471035) {
		connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + nick + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Utente non trovato");
				return;
			}
			var chat_id = rows[0].chat_id;
			var player_id = rows[0].id;

			var query = "";
			var msg = "";
			if ((qnt.indexOf("-") != -1) || (qnt.indexOf("+") != -1)) {
				query = "money = money " + qnt;
				msg = "Hai ricevuto *" + qnt + " ¬ß* dal Mercante Leggendario!";
			} else {
				query = "money = " + qnt;
				msg = "Il tuo patrimonio √® stato impostato a *" + qnt + " ¬ß* dal Mercante Leggendario!";
			}

			connection.query('UPDATE player SET ' + query + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				bot.sendMessage(chat_id, msg, mark);
				bot.sendMessage(message.chat.id, "Consegnato!");
			});
		});
	} else {
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/dai_gemme (.+),(.+)/, function (message, match) {
	var nick = match[1].trim();
	var qnt = match[2].trim();

	if (message.from.id == 20471035) {
		connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + nick + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Utente non trovato");
				return;
			}
			var chat_id = rows[0].chat_id;
			var player_id = rows[0].id;

			var query = "";
			var msg = "";
			if ((qnt.indexOf("-") != -1) || (qnt.indexOf("+") != -1)) {
				query = "gems = gems " + qnt;
				msg = "Hai ricevuto *" + qnt + " üíé* dal Mercante Leggendario!";
			} else {
				query = "gems = " + qnt;
				msg = "Le tue üíé sono state impostate a *" + qnt + "* dal Mercante Leggendario!";
			}

			connection.query('UPDATE player SET ' + query + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				bot.sendMessage(chat_id, msg, mark);
				bot.sendMessage(message.chat.id, "Consegnato!");
			});
		});
	} else {
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/dai_moon (.+),(.+)/, function (message, match) {
	var nick = match[1].trim();
	var qnt = match[2].trim();

	if (message.from.id == 20471035) {
		connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + nick + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Utente non trovato");
				return;
			}
			var chat_id = rows[0].chat_id;
			var player_id = rows[0].id;

			var query = "";
			var msg = "";
			if ((qnt.indexOf("-") != -1) || (qnt.indexOf("+") != -1)) {
				query = "moon_coin = moon_coin " + qnt;
				msg = "Hai ricevuto *" + qnt + " üåï* dal Mercante Leggendario!";
			} else {
				query = "moon_coin = " + qnt;
				msg = "Le tue üåï sono state impostate a *" + qnt + "* dal Mercante Leggendario!";
			}

			connection.query('UPDATE player SET ' + query + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				bot.sendMessage(chat_id, msg, mark);
				bot.sendMessage(message.chat.id, "Consegnato!");
			});
		});
	} else {
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/invitati/i, function (message) {
	connection.query('SELECT P.nickname, P.exp, P.reborn FROM referral_list R, player P WHERE R.new_player = P.id AND R.player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			bot.sendMessage(message.chat.id, "Nessun utente si √® registrato con il tuo link invito");
			return;
		}

		var text = Object.keys(rows).length + " giocatori si sono registrati con il tuo link invito:\n";
		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
			text += "> @" + rows[i].nickname + " Livello: " + Math.floor(rows[i].exp / 10) + " Rinascita: " + (rows[i].reborn - 1) + "\n";
		bot.sendMessage(message.chat.id, text);
	});
});

bot.onText(/\/globali/, function (message, match) {
	connection.query('SELECT global_msg FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;	

		if (rows[0].global_msg == 1) {
			connection.query('UPDATE player SET global_msg = 0 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Ricezione avvisi disattivata, usa /globali per riattivarla");
			});
		} else {
			connection.query('UPDATE player SET global_msg = 1 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Ricezione avvisi attivata, usa /globali per disattivarla");
			});
		}
	});
});

bot.onText(/\/messaggio (.+)|\/messaggio/, function (message, match) {
	if ((match[1] == undefined) || (match[1] == "")) {
		bot.sendMessage(message.chat.id, "Specifica il messaggio da inviare al tuo team, puoi usare l'HTML e \\n per andare a capo. Sintassi: /messaggio testo", back);
		return;
	}

	var msg = match[1];

	connection.query('SELECT account_id, id, money, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			return;	
		}

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", back);
				return;
			}

			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id + ' AND role > 0', function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Non hai i poteri sufficienti per utilizzare questa funzione", back);
					return;
				}

				var msg_pre = "Messaggio dal Vice Amministratore Team";
				if (rows[0].role == 1)
					msg_pre = "Messaggio dall'Amministratore Team";

				connection.query('SELECT player_id, chat_id FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' ORDER BY team_player.id', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Nessun membro a cui inviare il messaggio", back);
						return;
					}

					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].chat_id != message.chat.id)
							bot.sendMessage(rows[i].chat_id, msg_pre + "\n" + msg, html);
					}
					bot.sendMessage(message.chat.id, "Messaggio inviato a " + (Object.keys(rows).length - 1) + " giocatori del team");
				});
			});
		});
	});
});

bot.onText(/\/migrazione/, function (message, match) {

	if (message.from.username == undefined) {
		bot.sendMessage(message.chat.id, "Imposta il nickname prima di migrare", back);
		return;
	}

	connection.query('SELECT account_id FROM player WHERE account_id = ' + message.from.id, function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		bot.sendMessage(message.chat.id, "Il tuo account verr√† aggiornato al tuo attuale username, verr√† inviata una notifica all'amministratore. Continuare?", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					connection.query('SELECT id, nickname, account_id FROM player WHERE account_id = ' + message.from.id, function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0) {
							bot.sendMessage(message.chat.id, "Non ho trovato il tuo account, segnala all'amministratore", back);
							return;
						}

						var banReason = isBanned(rows[0].account_id);
						if (banReason != null) {
							var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
							bot.sendMessage(message.chat.id, text, mark);
							return;
						}

						var id = rows[0].id;
						var nickname = rows[0].nickname;

						connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length > 0) {
								bot.sendMessage(message.chat.id, "Non puoi migrare su un utente gi√† registrato, contatta l'amministratore", back);
								//bot.sendMessage("-1001098734700", "#MigrazioneNegata: " + message.from.username);
								return;
							}

							connection.query('UPDATE player SET nickname = "' + message.from.username + '" WHERE id = ' + id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Migrazione completata!", back);

								bot.sendMessage("-1001098734700", "#Migrazione: " + nickname + " -> " + message.from.username);
							});
						});
					});
				};
			};
		});
	});
});

bot.onText(/\/riscatta (.+)/, function (message, match) {
	connection.query('SELECT account_id, id FROM player WHERE account_id = ' + message.from.id, function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var code = match[1];
		connection.query('SELECT used, nickname, chest_id, item_id, money, gems FROM code_list WHERE code = "' + code + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Questo codice non √® valido", back);
				return;
			}
			if (rows[0].used != "") {
				bot.sendMessage(message.chat.id, "Questo codice √® gi√† stato utilizzato", back);
				return;
			}
			var nick = rows[0].nickname;
			if ((nick != message.from.username) && (nick != "")) {
				bot.sendMessage(message.chat.id, "Non puoi riscattare questo codice privato", back);
				return;
			}
			var chest_id = parseInt(rows[0].chest_id);
			if (chest_id != 0) {
				addChest(player_id, chest_id);

				connection.query('SELECT name FROM chest WHERE id = ' + chest_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Hai ottenuto *" + rows[0].name + "*!", back);
				});
			}
			var item_id = parseInt(rows[0].item_id);
			if (item_id != 0) {
				addItem(player_id, item_id);
				connection.query('SELECT name FROM item WHERE id = ' + item_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Hai ottenuto *" + rows[0].name + "*!", back);
				});
			}
			var money = parseInt(rows[0].money);
			if (money != 0) {
				connection.query('UPDATE player SET money = money + ' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Hai ottenuto *" + money + "* ¬ß!", back);
				});
			}
			var gems = parseInt(rows[0].gems);
			if (gems != 0) {
				connection.query('UPDATE player SET gems = gems + ' + gems + ' WHERE id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Hai ottenuto *" + gems + "* üíé !", back);
				});
			}
			connection.query('UPDATE code_list SET used = "' + message.from.username + '" WHERE code = "' + code + '"', function (err, rows, fields) {
				if (err) throw err;
				console.log("Codice: " + code + " utilizzato");
			});
		});
	});
});

bot.onText(/craftweek/i, function (message) {
	if (message.from.id == 20471035) {
		bot.sendMessage(message.chat.id, "Sicuro?", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					craftWeek();
					bot.sendMessage(message.chat.id, "Fatto!", back);
				}
			}
		});
	}
});

bot.onText(/resetach/i, function (message) {
	if (message.from.id == 20471035) {
		bot.sendMessage(message.chat.id, "Sicuro?", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					reloadAchievement();
					bot.sendMessage(message.chat.id, "Fatto!", back);
				};
			};
		});
	}
});

bot.onText(/automana/i, function (message) {
	if (message.from.id == 20471035) {
		bot.sendMessage(message.chat.id, "Sicuro?", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					autoMana();
					bot.sendMessage(message.chat.id, "Fatto!", back);
				};
			};
		});
	}
});

bot.onText(/^info/i, function (message) {

	if (message.text.toLowerCase().indexOf("globale") != -1)
		return;

	printStart(message);
});

bot.onText(/torna al menu$/i, function (message) {
	if (message.from.username != undefined) {
		connection.query('SELECT account_id FROM plus_players WHERE account_id = ' + message.from.id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO plus_players (account_id, nickname) VALUES (' + message.from.id + ',"' + message.from.username + '")', function (err, rows, fields) {
					if (err) throw err;
					console.log(message.from.username + " aggiunto");
				});
			} else {
				connection.query('SELECT id, real_name, gender, birth_date FROM player WHERE account_id = "' + message.from.id + '"', function (err, rows, fields) {
					if (err) throw err;

					var query = "";
					if (Object.keys(rows).length > 0) {
						if (rows[0].real_name != null)
							query += ", real_name = '" + rows[0].real_name + "'";
						if (rows[0].gender != null)
							query += ", gender = '" + rows[0].gender + "'";
						if (rows[0].birth_date != null) {
							var d = new Date(rows[0].birth_date);
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate());
							query += ", birth_date = '" + long_date + "'";
						}

						if (query == "") {
							connection.query('UPDATE plus_players SET nickname = "' + message.from.username + '" WHERE account_id = ' + message.from.id, function (err, rows, fields) {
								if (err) throw err;
							});
						} else {
							connection.query('UPDATE plus_players SET nickname = "' + message.from.username + '"' + query + ' WHERE account_id = ' + message.from.id, function (err, rows, fields) {
								if (err) throw err;
							});
						}
					}
				});
			}
		});
	}
	calcLife(message);
	mainMenu(message);
});

bot.onText(/niente$|nessuno$|annulla$|^mnu$/i, function (message) {
	mainMenu(message);
});

bot.onText(/giocatore|giocatrice|^io$|^me$/i, function (message) {
	getInfo(message, message.from.username, 6);
});

bot.onText(/^\/refill/i, function (message) {
	if (message.from.id == 20471035) {
		refreshLife();
		bot.sendMessage(message.chat.id, "Fatto");
	}
});

bot.onText(/Descrizioni/i, function (message) {
	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Soprannome"], ["Descrizione personale"], ["Descrizione rifugio"], ["Descrizione spia"], ["Torna al menu"]]
		}
	};

	bot.sendMessage(message.chat.id, "Quale descrizione impostare?", kb);
});

bot.onText(/Sesso ‚ö§/i, function (message) {
	connection.query('SELECT id, real_name, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var my_gender = rows[0].gender;

		if (rows[0].real_name == null) {
			bot.sendMessage(message.chat.id, "Puoi inserire sotto il tuo vero nome, questo verr√† utilizzato per identificare il tuo sesso e di conseguenza alcuni testi verranno visualizzati diversamente.\nAttenzione: puoi farlo solamente una volta, non sbagliare!\n\nInserisci il tuo nome qua sotto senza caratteri speciali o spazi.", back).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text == "Torna al menu")
						return;
					else {
						request('https://gender-api.com/get?name=' + answer.text + '&key=xTZExqbJQfWzdGPzcP&country=IT', function (error, response, body) {
							if (response.statusCode == 200) {
								var json = JSON.parse(body);

								if ((json.name == undefined) || (json.gender == undefined)) {
									bot.sendMessage(message.chat.id, "Per il momento non √® pi√π possibile inserire nomi, riprova tra qualche giorno/ora", back);
									return;
								}

								var gender = "M";
								if (json.gender == "female")
									gender = "F";

								if (json.accuracy < 30) {
									bot.sendMessage(message.chat.id, "Non √® stato possibile identificare il sesso, contatta l'amministratore", back);
									return;
								}

								connection.query('UPDATE player SET real_name = "' + json.name + '", gender = "' + gender + '" WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err; 

									bot.sendMessage(message.chat.id, "Hai inserito *" + json.name + "*, il sesso identificato √® *" + gender + "* con un accuratezza del *" + json.accuracy + "%*", back);

								});
							} else
								bot.sendMessage(message.chat.id, "Errore, riprova", back);
						});
					}
				}
			});
		} else {
			bot.sendMessage(message.chat.id, "Hai gi√† impostato il nome, il sesso salvato √® " + my_gender + ". Per il momento non √® possibile modificarlo, in caso di problemi contatta l'amministratore", back);
			return;
		}
	});
});

bot.onText(/^Nascita/i, function (message) {
	connection.query('SELECT id, birth_date FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var birth_date = rows[0].birth_date;

		if (rows[0].birth_date == null) {
			bot.sendMessage(message.chat.id, "Puoi inserire sotto la tua data di nascita, chiss√† cosa potr√† succedere!\nAttenzione: puoi farlo solamente una volta, non sbagliare!\n\nInserisci la data qui sotto nel formato gg/mm/aaaa.", back).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text == "Torna al menu")
						return;
					else {
						var reg = /^([0-2][0-9]|(3)[0-1])(\/)(((0)[0-9])|((1)[0-2]))(\/)\d{4}$/g;
						var date = answer.text;
						if (reg.test(date) == false) {
							bot.sendMessage(message.chat.id, "Inserisci la data nel formato richiesto!", back);
							return;
						}
						var split = answer.text.split("/");
						var d = new Date(split[2], split[1]-1, split[0]);
						var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate());
						connection.query('UPDATE player SET birth_date = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err; 
							long_date = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
							bot.sendMessage(message.chat.id, "Hai inserito *" + long_date + "*!", back);
						});
					}
				}
			});
		} else {
			var d = new Date(birth_date);
			var long_date = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
			bot.sendMessage(message.chat.id, "Hai gi√† impostato la data di nascita: " + long_date + ". Per il momento non √® possibile modificarlo, in caso di problemi contatta l'amministratore", back);
			return;
		}
	});
});

bot.onText(/Rimodulatore di Flaridion|Torna al rimodulatore|^rimodulatore$/i, function (message) {
	connection.query('SELECT COUNT(id) As cnt FROM artifacts WHERE player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].cnt < 5) {
			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna all'alchimia"], ["Torna al menu"]]
				}
			};

			bot.sendMessage(message.chat.id, "Devi possedere almeno 5 artefatti per accedere a questa funzionalit√†!", kb);
			return;
		}

		connection.query('SELECT id, reborn, account_id, money, power_dmg, power_def, power_weapon, power_armor, power_shield, power_dragon_dmg, power_dragon_def, power_dragon_crit, power_pnt, power_used, gain_exp, gender, global_event FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
			if (err) throw err;

			var player_id = rows[0].id;
			var power_pnt = rows[0].power_pnt;
			var gain_exp = rows[0].gain_exp;
			var my_money = rows[0].money;
			var reborn = rows[0].reborn;

			var power_used = rows[0].power_used;
			var power_dmg = parseInt(rows[0].power_dmg);
			var power_def = parseInt(rows[0].power_def);
			var power_weapon = parseInt(rows[0].power_weapon);
			var power_armor = parseInt(rows[0].power_armor);
			var power_shield = parseInt(rows[0].power_shield);
			var power_dragon_dmg = parseInt(rows[0].power_dragon_dmg);
			var power_dragon_def = parseInt(rows[0].power_dragon_def);
			var power_dragon_crit = parseInt(rows[0].power_dragon_crit);

			var global_event = rows[0].global_event;

			var arrMolt = [2, 1, 20, 20, 35, 4, 4, 30];

			var gender_text = "o";
			if (rows[0].gender == "F")
				gender_text = "a";

			var banReason = isBanned(rows[0].account_id);
			if (banReason != null) {
				var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
				bot.sendMessage(message.chat.id, text, mark);
				return;
			}

			var dragon_desc = "Raggiungi la R5 per sbloccare altri potenziamenti!";
			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Acquista Flaridion üí∞", "Reset üö´"], 
							   ["Attacco (" + rimodPrice(power_dmg, power_dmg+1, arrMolt[0]) + " Flaridion)", 
								"Difesa (" + rimodPrice(power_def, power_def+1, arrMolt[1]) + " Flaridion)"], 
							   ["Critico (" + rimodPrice(power_weapon, power_weapon+1, arrMolt[2]) + " Flaridion)"], 
							   ["Dimezzamento (" + rimodPrice(power_armor, power_armor+1, arrMolt[3]) + " Flaridion)"], 
							   ["Annullamento (" + rimodPrice(power_shield, power_shield+1, arrMolt[4]) + " Flaridion)"], 
							   ["Torna all'alchimia"], ["Torna al menu"]]
				}
			};

			if (reborn >= 6) {
				kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Acquista Flaridion üí∞", "Reset üö´"], 
								   ["Attacco (" + rimodPrice(power_dmg, power_dmg+1, arrMolt[0]) + " Flaridion)", 
									"Difesa (" + rimodPrice(power_def, power_def+1, arrMolt[1]) + " Flaridion)"], 
								   ["Critico (" + rimodPrice(power_weapon, power_weapon+1, arrMolt[2]) + " Flaridion)"], 
								   ["Dimezzamento (" + rimodPrice(power_armor, power_armor+1, arrMolt[3]) + " Flaridion)"], 
								   ["Annullamento (" + rimodPrice(power_shield, power_shield+1, arrMolt[4]) + " Flaridion)"], 
								   ["Attacco Drago (" + rimodPrice(power_dragon_dmg, power_dragon_dmg+1, arrMolt[5]) + " Flaridion)", 
									"Difesa Drago (" + rimodPrice(power_dragon_def, power_dragon_def+1, arrMolt[6]) + " Flaridion)"], 
								   ["Critico Drago (" + rimodPrice(power_dragon_crit, power_dragon_crit+1, arrMolt[7]) + " Flaridion)"], 
								   ["Torna all'alchimia"], ["Torna al menu"]]
					}
				};
				dragon_desc = "*Attacco Drago*: +" + formatNumber(power_dragon_dmg) + " su " + flariCap(arrMolt[5], global_event) + "\n" +
					"*Difesa Drago*: +" + formatNumber(power_dragon_def) + " su " + flariCap(arrMolt[6], global_event) + "\n" +
					"*Critico Drago*: +" + formatNumber(power_dragon_crit) + " su " + flariCap(arrMolt[7], global_event) + "\n";
			}

			var kbYesNo = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Si"], ["Torna al rimodulatore"], ["Torna al menu"]]
				}
			};

			var kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna al rimodulatore"], ["Torna al menu"]]
				}
			};

			var kbNum = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["1", "5", "10"], ["Torna al rimodulatore"], ["Torna al menu"]]
				}
			};

			var kbQnt = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["1", "2", "3"], ["10", "50", "100"], ["Torna al rimodulatore"], ["Torna al menu"]]
				}
			};

			var text = "Benvenut" + gender_text + " dal *Rimodulatore di Flaridion* üî®!\nPuoi acquistare i Flaridion per ottenere forza e abilit√† aggiuntiva, ogni caratteristica ha un costo diverso ed incrementa man mano che la caratteristica viene potenziata. Al momento possiedi *" + formatNumber(power_pnt) + " Flaridion* inutilizzati, ne hai utilizzati " + formatNumber(power_used) + ".\nPuoi aumentare il valore massimo partecipando attivamente alle Imprese Globali.\n\n" +
				"*Attacco*: +" + formatNumber(power_dmg) + " su " + flariCap(arrMolt[0], global_event) + "\n" +
				"*Difesa*: +" + formatNumber(power_def) + " su " + flariCap(arrMolt[1], global_event) + "\n" +
				"*Critico Arma*: +" + power_weapon + " su " + flariCap(arrMolt[2], global_event) + "\n" +
				"*Dimezzamento Armatura*: +" + power_armor + " su " + flariCap(arrMolt[3], global_event) + "\n" +
				"*Annullamento Scudo*: +" + power_shield + " su " + flariCap(arrMolt[4], global_event) + "\n" +
				dragon_desc + "\nCosa vuoi fare?";

			bot.sendMessage(message.chat.id, text, kb).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if ((answer.text == "Torna al menu") || (answer.text == "Torna all'alchimia"))
						return;
					else if (answer.text.indexOf("Acquista Flaridion") != -1) {
						var price_money = 1000000;
						var price_exp = 30;

						bot.sendMessage(message.chat.id, "Ogni Flaridion ti coster√† *" + formatNumber(price_money) + "* ¬ß e *" + price_exp + "* exp accumulata, hai a disposizione *" + formatNumber(my_money) + "* ¬ß e *" + gain_exp + "* exp accumulata, quanti ne vuoi acquistare?", kbNum).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if ((answer.text == "Torna al rimodulatore") || (answer.text == "Torna al menu"))
									return;
								else {
									var num = parseInt(answer.text);
									if (isNaN(num)) {
										bot.sendMessage(message.chat.id, "Quantit√† non valida!", kbBack);
										return;
									}
									if (num < 1) {
										bot.sendMessage(message.chat.id, "Devi acquistarne almeno uno!", kbBack);
										return;
									}

									bot.sendMessage(message.chat.id, "Sicuro di voler acquistare *" + formatNumber(num) + " Flaridion*?", kbYesNo).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.toLowerCase() == "si") {
												connection.query('SELECT money, gain_exp FROM player WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													price_money = price_money * num;
													price_exp = price_exp * num;

													if (rows[0].money < price_money) {
														bot.sendMessage(message.chat.id, "Non hai abbastanza monete, te ne servono " + formatNumber(price_money) + "!", kbBack);
														return;
													}

													if (rows[0].gain_exp < price_exp) {
														bot.sendMessage(message.chat.id, "Non hai abbastanza exp accumulata, te ne serve " + formatNumber(price_exp) + "!", kbBack);
														return;
													}

													connection.query('UPDATE player SET money = money-' + price_money + ', gain_exp = gain_exp-' + price_exp + ', power_pnt = power_pnt+' + num + ' WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Acquisto completato! Il mercante ti assegna *" + num + " Flaridion* e ti ringrazia per l'affare concluso!", kbBack);
													});
												});
											}
										}
									});
								}
							}
						});
					} else if (answer.text.indexOf("Reset") != -1) {
						if (power_used == 0) {
							bot.sendMessage(message.chat.id, "Devi procedere almeno ad un potenziamento per poterli resettare", kbBack);
							return;
						}
						var gems = 500;
						bot.sendMessage(message.chat.id, "Puoi redistribuire i potenziamenti al costo di *" + gems + " üíé* ottenendo *" + formatNumber(power_used) + " Flaridion*, procedi?", kbYesNo).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase() == "si") {
									connection.query('SELECT gems FROM player WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										if (rows[0].gems < gems) {
											bot.sendMessage(message.chat.id, "Non hai abbastanza üíé!", kbBack);
											return;
										}

										connection.query('UPDATE player SET gems = gems-' + gems + ', power_used = 0, power_pnt = power_pnt+' + power_used + ', power_dmg = 0, power_def = 0, power_weapon = 0, power_armor = 0, power_shield = 0 WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Sono stati riaccreditati " + formatNumber(power_used) + " Flaridion!", kbBack);
										});
									});
								}
							}
						});
					} else {
						var price_coin = 1;
						var value = 0;
						var query = "";
						var power_name = answer.text.substr(0, answer.text.indexOf("(") - 1);
						var molt = 0;
						if (power_name == "Attacco") {
							value = power_dmg;
							query = "power_dmg";
							molt = arrMolt[0];
						} else if (power_name == "Difesa") {
							value = power_def;
							query = "power_def";
							molt = arrMolt[1];
						} else if (power_name == "Critico") {
							value = power_weapon;
							query = "power_weapon";
							molt = arrMolt[2];
						} else if (power_name == "Dimezzamento") {
							value = power_armor;
							query = "power_armor";
							molt = arrMolt[3];
						} else if (power_name == "Annullamento") {
							value = power_shield;
							query = "power_shield";
							molt = arrMolt[4];
						} else if (power_name == "Attacco Drago") {
							if (reborn < 6) {
								bot.sendMessage(message.chat.id, "Raggiungi la R5 per accedere a questo potenziamento!", kbBack);
								return;
							}
							value = power_dragon_dmg;
							query = "power_dragon_dmg";
							molt = arrMolt[5];
						} else if (power_name == "Difesa Drago") {
							if (reborn < 6) {
								bot.sendMessage(message.chat.id, "Raggiungi la R5 per accedere a questo potenziamento!", kbBack);
								return;
							}
							value = power_dragon_def;
							query = "power_dragon_def";
							molt = arrMolt[6];
						} else if (power_name == "Critico Drago") {
							if (reborn < 6) {
								bot.sendMessage(message.chat.id, "Raggiungi la R5 per accedere a questo potenziamento!", kbBack);
								return;
							}
							value = power_dragon_crit;
							query = "power_dragon_crit";
							molt = arrMolt[7];
						} else {
							bot.sendMessage(message.chat.id, "Caratteristica non valida", kbBack);
							return;
						}

						var qnt = 0;

						bot.sendMessage(message.chat.id, "Di quanto vuoi incrementare questa caratteristica?", kbQnt).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text == "Torna al menu")
									return;

								qnt = parseInt(answer.text);

								if (isNaN(qnt) || (qnt < 1) || (qnt > 100)) {
									bot.sendMessage(message.chat.id, "Quantit√† non valida, inserisci un numero compreso tra 1 e 100", kbBack);
									return;
								}

								var max_qnt = flariCap(molt, global_event);
								if (value+qnt > max_qnt) {
									bot.sendMessage(message.chat.id, "Completa pi√π imprese globali per potenziare ulteriormente questa caratteristica (massimo attuale: " + max_qnt + ")", kbBack);
									return;
								}

								price_coin = rimodPrice(value, value+qnt, molt);

								if ((price_coin > 1000000) || (price_coin == Infinity)) {
									bot.sendMessage(message.chat.id, "Inserisci una quantit√† minore per visualizzare il costo totale", kbBack);
									return;
								}

								bot.sendMessage(message.chat.id, "Il Rimodulatore incrementer√† questa caratteristica di *" + qnt + "* al costo di *" + price_coin + " Flaridion*, confermi?", kbYesNo).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {
											bot.sendMessage(message.chat.id, "Sicuro di voler consumare *" + price_coin + "* Flaridion per potenziare *" + power_name + "*?", kbYesNo).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text.toLowerCase() == "si") {
														connection.query('SELECT power_pnt FROM player WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															if (rows[0].power_pnt < price_coin) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza Flaridion!", kbBack);
																return;
															}
															connection.query('UPDATE player SET power_pnt = power_pnt-' + price_coin + ', ' + query + ' = ' + query + '+' + qnt + ', power_used = power_used+' + price_coin + ' WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Il Rimodulatore di Flaridion ha portato la tua caratteristica *" + power_name + "* a *+" + (value+qnt) + "*!", kbBack);
																//console.log(message.from.username + " rimodulatore di " + power_name + " a " + (value+qnt) + " per " + price_coin);
															});
														});
													}
												}
											});
										}
									}
								});
							}
						});
					}
				};
			});
		});
	});
});

bot.onText(/annulla bevanda/i, function (message) {
	connection.query('SELECT id, boost_id, boost_mission, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		if (rows[0].boost_id == 0) {
			bot.sendMessage(message.chat.id, "Non hai nessuna bevanda attiva, puoi produrle con il drago o trovarle nelle missioni", back);
			return;
		}

		var cost = 100000;
		if (crazyMode == 1)
			cost = 200000;

		cost = cost*rows[0].reborn;

		bot.sendMessage(message.chat.id, "Sei sicuro di voler annullare la bevanda attiva? Ti coster√† " + formatNumber(cost) + " ¬ß", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						var money = rows[0].money;

						if (money < cost) {
							bot.sendMessage(message.chat.id, "Non hai abbastanza monete!", back);
							return;
						}

						connection.query('UPDATE player SET money = money-' + cost + ', boost_id = 0, boost_mission = 0 WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "La bevanda attiva √® stata annullata!", back);
						});
					});
				};
			};
		});
	});
});

bot.onText(/descrizione rifugio/i, function (message) {
	connection.query('SELECT id, ability, heist_description FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].ability < 200) {
			bot.sendMessage(message.chat.id, "Raggiungi 200 punti abilit√† per sbloccare questa funzione", back);
			return;
		}

		var player_id = rows[0].id;

		var text = "";
		if (rows[0].heist_description != null)
			text = "\nLa descrizione rifugio attuale impostata √®: " + rows[0].heist_description;

		bot.sendMessage(message.chat.id, "Inserisci la descrizione che comparir√† quando altri giocatori ti ispezionano e falliscono.\nNon utilizzare insulti, bestemmie, offese verso gli altri player, ecc., massimo 500 caratteri, non andare a capo e non tutti i simboli sono consentiti (solo a-zA-Z0-9√†√®√¨√≤√π√©.,?!'@ e spazi). Scrivi _cancella_ per rimuovere la descrizione." + text, back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text != "Torna al menu") {
					var resp = answer.text;

					if (resp.toLowerCase() == "cancella") {
						bot.sendMessage(message.chat.id, "Descrizione rifugio rimossa", back);
						connection.query('UPDATE player SET heist_description = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						return;
					}

					var reg = new RegExp("^[a-zA-Z0-9√†√®√¨√≤√π√©.,\\\?\!\'\@\(\) ]{1,500}$");
					if (reg.test(resp) == false) {
						bot.sendMessage(message.chat.id, "Descrizione non valida, riprova", back);
						return;
					}
					bot.sendMessage(message.chat.id, "Descrizione rifugio impostata:\n\n_" + resp + "_", back);
					connection.query('UPDATE player SET heist_description = "' + resp + '" WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
			}
		});
	});
});

bot.onText(/descrizione spia/i, function (message) {
	connection.query('SELECT id, ability, house_id, spy_description FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if ((rows[0].ability < 200) || (rows[0].house_id < 6)) {
			bot.sendMessage(message.chat.id, "Raggiungi 200 punti abilit√† ed il livello del rifugio 6 per sbloccare questa funzione", back);
			return;
		}

		var player_id = rows[0].id;

		var text = "";
		if (rows[0].spy_description != null)
			text = "\nLa descrizione spia attuale impostata √®: " + rows[0].spy_description;

		bot.sendMessage(message.chat.id, "Inserisci la descrizione che comparir√† quando spii altri giocatori.\nNon utilizzare insulti, bestemmie, offese verso gli altri player, ecc., massimo 500 caratteri, non andare a capo e non tutti i simboli sono consentiti (solo a-zA-Z0-9√†√®√¨√≤√π√©.,?!'@ e spazi). Scrivi _cancella_ per rimuovere la descrizione." + text, back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text != "Torna al menu") {
					var resp = answer.text;

					if (resp.toLowerCase() == "cancella") {
						bot.sendMessage(message.chat.id, "Descrizione spia rimossa", back);
						connection.query('UPDATE player SET spy_description = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						return;
					}

					var reg = new RegExp("^[a-zA-Z0-9√†√®√¨√≤√π√©.,\\\?\!\'\@\(\) ]{1,500}$");
					if (reg.test(resp) == false) {
						bot.sendMessage(message.chat.id, "Descrizione non valida, riprova", back);
						return;
					}
					bot.sendMessage(message.chat.id, "Descrizione spia impostata:\n\n_" + resp + "_", back);
					connection.query('UPDATE player SET spy_description = "' + resp + '" WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
			}
		});
	});
});

bot.onText(/descrizione personale/i, function (message) {
	connection.query('SELECT id, player_description FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		var text = "";
		if (rows[0].player_description != null)
			text = "\nLa descrizione personale attuale impostata √®: " + rows[0].player_description;

		bot.sendMessage(message.chat.id, "Inserisci la descrizione del tuo personaggio, comparir√† quando altri giocatori ti spiano.\nNon utilizzare insulti, bestemmie, offese verso gli altri player, ecc., massimo 500 caratteri, non andare a capo e non tutti i simboli sono consentiti (solo a-zA-Z0-9√†√®√¨√≤√π√©.,?!'@ e spazi). Scrivi _cancella_ per rimuovere la descrizione." + text, back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text != "Torna al menu") {
					var resp = answer.text;

					if (resp.toLowerCase() == "cancella") {
						bot.sendMessage(message.chat.id, "Descrizione personaggio rimossa", back);
						connection.query('UPDATE player SET player_description = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						return;
					}

					var reg = new RegExp("^[a-zA-Z0-9√†√®√¨√≤√π√©.,\\\?\!\'\@\(\) ]{1,500}$");
					if (reg.test(resp) == false) {
						bot.sendMessage(message.chat.id, "Descrizione non valida, riprova", back);
						return;
					}
					bot.sendMessage(message.chat.id, "Descrizione personaggio impostata:\n\n_" + resp + "_", back);
					connection.query('UPDATE player SET player_description = "' + resp + '" WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
			}
		});
	});
});

bot.onText(/soprannome/i, function (message) {
	connection.query('SELECT id, exp, player_custom_nickname FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		if (Math.floor(rows[0].exp/10) < 1000) {
			bot.sendMessage(message.chat.id, "Puoi impostare il soprannome solo al livello 1.000", back);
			return;
		}

		var text = "";
		if (rows[0].player_custom_nickname != null)
			text = "\nIl soprannome attuale impostato √®: " + rows[0].player_custom_nickname;

		bot.sendMessage(message.chat.id, "Inserisci il soprannome per il tuo personaggio, comparir√† a fianco al tuo nome, come ad esempio 'fenix45 l'ubriaco'.\nNon utilizzare insulti, bestemmie, offese verso gli altri player, ecc., massimo 20 caratteri, non andare a capo e non tutti i simboli sono consentiti. Scrivi _cancella_ per rimuovere il soprannome." + text, back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text != "Torna al menu") {
					var resp = answer.text;

					if (resp.toLowerCase() == "cancella") {
						bot.sendMessage(message.chat.id, "Soprannome rimosso", back);
						connection.query('UPDATE player SET player_custom_nickname = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						return;
					}

					var reg = new RegExp("^[a-zA-Z√†√®√¨√≤√π√©.,\\\?\!\'\@\(\) ]{1,20}$");
					if (reg.test(resp) == false) {
						bot.sendMessage(message.chat.id, "Soprannome non valido, riprova", back);
						return;
					}
					bot.sendMessage(message.chat.id, "Soprannome personaggio impostato:\n\n<i>" + message.from.username + " " + resp + "</i>", back_html);
					connection.query('UPDATE player SET player_custom_nickname = "' + resp + '" WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
			}
		});
	});
});

bot.onText(/trasmogrificazione|trasmo$|^\/trasmo (.+)/i, function (message, match) {
	connection.query('SELECT id, exp, weapon_id, weapon2_id, weapon3_id, weapon_enchant_bonus, weapon2_enchant_bonus, weapon3_enchant_bonus FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp / 10);

		var weapon1_id = rows[0].weapon_id;
		var weapon2_id = rows[0].weapon2_id;
		var weapon3_id = rows[0].weapon3_id;

		var weapon_enchant_bonus = rows[0].weapon_enchant_bonus;
		var weapon2_enchant_bonus = rows[0].weapon2_enchant_bonus;
		var weapon3_enchant_bonus = rows[0].weapon3_enchant_bonus;

		connection.query('SELECT 1 FROM necro_change WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {

				var kb = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Procedi"], ["Torna all'alchimia"], ["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Per sbloccare questa funzionalit√† ti serviranno questi requisiti:\n" +
								"> 160 Livelli complessivi dei Talenti\n" +
								"> Almeno 4 Artefatti ottenuti\n" +
								"> Livello 1000\n" +
								"> Drago al livello 200\n" +
								"> Set Necro Base (verr√† consumato)\n" +
								"\nIn seguito potrai cambiare il tipo di equipaggiamento Necro.", kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Procedi") {

							connection.query("SELECT SUM(ability_level) As cnt FROM ability WHERE player_id = " + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (rows[0].cnt < 160) {
									bot.sendMessage(message.chat.id, "I talenti ottenuti non sono sufficienti", back);
									return;
								}

								connection.query("SELECT COUNT(item_id) As cnt FROM artifacts WHERE player_id = " + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (rows[0].cnt < 4) {
										bot.sendMessage(message.chat.id, "Gli artefatti ottenuti non sono sufficienti", back);
										return;
									}

									if (level < 1000) {
										bot.sendMessage(message.chat.id, "Il livello del personaggio ottenuto non √® sufficiente", back);
										return;
									}

									connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Non possiedi il drago", back);
											return;
										}

										if (rows[0].level < 200) {
											bot.sendMessage(message.chat.id, "Il livello del drago ottenuto non √® sufficiente", back);
											return;
										}

										if (getItemCnt(player_id, 221) < 1) {
											bot.sendMessage(message.chat.id, "Non possiedi la Necrolama", back);
											return;
										}

										if (getItemCnt(player_id, 577) < 1) {
											bot.sendMessage(message.chat.id, "Non possiedi la Corazza Necro", back);
											return;
										}

										if (getItemCnt(player_id, 600) < 1) {
											bot.sendMessage(message.chat.id, "Non possiedi lo Scudo Necro", back);
											return;
										}

										delItem(player_id, 221, 1);
										delItem(player_id, 577, 1);
										delItem(player_id, 600, 1);

										connection.query('INSERT INTO necro_change (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai ottenuto l'accesso alle *Porte degli Dei*, potrai cambiare il tipo di equipaggiamento Necro su richiesta!", back);
										});
									});
								});
							});
						};
					};
				});
				return;
			}

			var kbMain = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Necrolama"], ["Corazza Necro"], ["Scudo Necro"], ["Torna all'alchimia"], ["Torna al menu"]]
				}
			};

			var kb = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Rossa", "Gialla", "Blu"], ["Torna alla trasmo"]]
				}
			};

			var kbM = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Rosso", "Giallo", "Blu"], ["Torna alla trasmo"]]
				}
			};

			var kbW = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Rossa", "Gialla"], ["Blu", "Bianca"], ["Torna alla trasmo"]]
				}
			};

			var kbW2 = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Rosso", "Giallo"], ["Blu", "Bianco"], ["Torna alla trasmo"]]
				}
			};

			connection.query('SELECT step FROM necro_game WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var step6 = 0;
				var step7 = 0;
				var step8 = 0;
				if (Object.keys(rows).length > 0) {
					if (rows[0].step == 6)
						step6 = 1;
					else if (rows[0].step == 7) {
						step6 = 1;
						step7 = 1;
					} else if (rows[0].step == 8) {
						step6 = 1;
						step7 = 1;
						step8 = 1;
					}
				}

				var kbBack = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Torna alla trasmo"], ["Torna al menu"]]
					}
				};

				if (message.text.indexOf("/trasmo") != -1) {

					if (match[1] == undefined) {
						bot.sendMessage(message.chat.id, "Sintassi: /trasmo bianca,gialla,rosso (spada, armatura, scudo)");
						return;
					}

					var query = match[1].split(",");
					var len = Object.keys(query).length;
					if (len < 3) {
						bot.sendMessage(message.chat.id, "Sintassi: /trasmo bianca,gialla,rosso (spada, armatura, scudo), lascia vuoto un campo per mantenere l'equip attuale");
						return;
					}

					query[0] = query[0].trim();
					query[1] = query[1].trim();
					query[2] = query[2].trim();

					connection.query('SELECT weapon_id, weapon2_id, weapon3_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						if ((rows[0].weapon_id != 638) && (rows[0].weapon_id != 639) && (rows[0].weapon_id != 640) && (rows[0].weapon_id != 754)) {
							bot.sendMessage(message.chat.id, "Equipaggia una delle 4 lame incantate per poterla scambiare");
							return;
						}

						if ((rows[0].weapon2_id != 688) && (rows[0].weapon2_id != 689) && (rows[0].weapon2_id != 690) && (rows[0].weapon2_id != 790)) {
							bot.sendMessage(message.chat.id, "Equipaggia una delle 4 corazze incantate per poterla scambiare");
							return;
						}

						if ((rows[0].weapon3_id != 671) && (rows[0].weapon3_id != 672) && (rows[0].weapon3_id != 673) && (rows[0].weapon3_id != 791)) {
							bot.sendMessage(message.chat.id, "Equipaggia uno dei 4 scudi incantati per poterlo scambiare");
							return;
						}

						var weapon = 0;
						if ((query[0].toLowerCase() == "rossa") || (query[0].toLowerCase() == "rosso"))
							weapon = 639;
						else if ((query[0].toLowerCase() == "giallo") || (query[0].toLowerCase() == "gialla"))
							weapon = 638;
						else if (query[0].toLowerCase() == "blu")
							weapon = 640;
						else if ((query[0].toLowerCase() == "bianco") || (query[0].toLowerCase() == "bianca")) {
							if (step6 == 0) {
								bot.sendMessage(message.chat.id, "Devi prima sbloccare la trasmogrificazione della Necrolama di Phoenix nella Necro del Destino!");
								return;
							}
							weapon = 754;
						} else
							weapon = rows[0].weapon_id;

						var weapon2 = 0;
						if ((query[1].toLowerCase() == "rossa") || (query[1].toLowerCase() == "rosso"))
							weapon2 = 688;
						else if ((query[1].toLowerCase() == "giallo") || (query[1].toLowerCase() == "gialla"))
							weapon2 = 690;
						else if (query[1].toLowerCase() == "blu")
							weapon2 = 689;
						else if (query[1].toLowerCase() == "bianca") {
							if (step7 == 0) {
								bot.sendMessage(message.chat.id, "Devi prima sbloccare la trasmogrificazione della Corazza Necro di Phoenix nella Necro del Destino!");
								return;
							}
							weapon2 = 790;
						} else
							weapon2 = rows[0].weapon2_id;

						var weapon3 = 0;
						if ((query[2].toLowerCase() == "rossa") || (query[2].toLowerCase() == "rosso"))
							weapon3 = 672;
						else if ((query[2].toLowerCase() == "giallo") || (query[2].toLowerCase() == "gialla"))
							weapon3 = 671;
						else if (query[2].toLowerCase() == "blu")
							weapon3 = 673;
						else if (query[2].toLowerCase() == "bianco") {
							if (step8 == 0) {
								bot.sendMessage(message.chat.id, "Devi prima sbloccare la trasmogrificazione dello Scudo Necro di Phoenix nella Necro del Destino!");
								return;
							}
							weapon3 = 791;
						} else
							weapon3 = rows[0].weapon3_id;

						connection.query('UPDATE player SET weapon_id = ' + weapon + ', weapon2_id = ' + weapon2 + ', weapon3_id = ' + weapon3 + ' WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Equipaggiamento cambiato di tipo!");
						});
					});

					return;
				}

				var weapon1_status = "Non equipaggiata";
				if (weapon1_id == 639)
					weapon1_status = "üî•";
				else if (weapon1_id == 638)
					weapon1_status = "‚ö°Ô∏è";
				else if (weapon1_id == 640)
					weapon1_status = "üåä";
				else if (weapon1_id == 754)
					weapon1_status = "‚ú®";

				if (weapon_enchant_bonus == 1)
					weapon1_status += " (üåä)";
				else if (weapon_enchant_bonus == 2)
					weapon1_status += " (‚ö°Ô∏è)";
				else if (weapon_enchant_bonus == 3)
					weapon1_status += " (üî•)";

				var weapon2_status = "Non equipaggiata";
				if (weapon2_id == 688)
					weapon2_status = "üî•";
				else if (weapon2_id == 690)
					weapon2_status = "‚ö°Ô∏è";
				else if (weapon2_id == 689)
					weapon2_status = "üåä";
				else if (weapon2_id == 790)
					weapon2_status = "‚ú®";

				if (weapon2_enchant_bonus == 1)
					weapon2_status += " (üåä)";
				else if (weapon2_enchant_bonus == 2)
					weapon2_status += " (‚ö°Ô∏è)";
				else if (weapon2_enchant_bonus == 3)
					weapon2_status += " (üî•)";

				var weapon3_status = "Non equipaggiato";
				if (weapon3_id == 672)
					weapon3_status = "üî•";
				else if (weapon3_id == 671)
					weapon3_status = "‚ö°Ô∏è";
				else if (weapon3_id == 673)
					weapon3_status = "üåä";
				else if (weapon3_id == 791)
					weapon3_status = "‚ú®";

				if (weapon3_enchant_bonus == 1)
					weapon3_status += " (üåä)";
				else if (weapon3_enchant_bonus == 2)
					weapon3_status += " (‚ö°Ô∏è)";
				else if (weapon3_enchant_bonus == 3)
					weapon3_status += " (üî•)";

				var text = 	"Stato attuale:\n" +
					"Arma: " + weapon1_status + "\n" +
					"Armatura: " + weapon2_status + "\n" +
					"Scudo: " + weapon3_status + "\n";

				bot.sendMessage(message.chat.id, "Scegli l'oggetto dell'Equip Necro da cambiare\n" + text, kbMain).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Torna al menu")
							return;
						else {
							var set = answer.text;
							if (((set.toLowerCase() == "necrolama") && (step6 == 1)) || ((set.toLowerCase() == "corazza necro") && (step7 == 1)))
								kb = kbW;
							else if ((set.toLowerCase() == "scudo necro") && (step8 == 0))
								kb = kbM;
							else if ((set.toLowerCase() == "scudo necro") && (step8 == 1))
								kb = kbW2;

							bot.sendMessage(message.chat.id, "Con quale tipo di oggetto vuoi scambiarlo?", kb).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if ((answer.text == "Torna al menu") || (answer.text == "Torna alla trasmo"))
										return;
									var type = answer.text;
									if (set.toLowerCase() == "necrolama") {
										connection.query('SELECT weapon_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											if ((rows[0].weapon_id != 638) && (rows[0].weapon_id != 639) && (rows[0].weapon_id != 640) && (rows[0].weapon_id != 754)) {
												bot.sendMessage(message.chat.id, "Equipaggia una delle 4 lame incantate per poterla scambiare", kbBack);
												return;
											}

											var id = 0;
											if (type.toLowerCase() == "rossa")
												id = 639;
											else if (type.toLowerCase() == "gialla")
												id = 638;
											else if (type.toLowerCase() == "blu")
												id = 640;
											else if (type.toLowerCase() == "bianca") {
												if (step6 == 0) {
													bot.sendMessage(message.chat.id, "Devi prima sbloccare la trasmogrificazione della Necrolama di Phoenix nella Necro del Destino!", kbBack);
													return;
												}
												id = 754;
											} else {
												bot.sendMessage(message.chat.id, "Colore non valido", kbBack);
												return;
											}

											connection.query('UPDATE player SET weapon_id = ' + id + ' WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Necrolama cambiata di tipo, ora √® *" + type + "*!", kbBack);
											});
										});
									} else if (set.toLowerCase() == "corazza necro") {
										connection.query('SELECT weapon2_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											if ((rows[0].weapon2_id != 688) && (rows[0].weapon2_id != 689) && (rows[0].weapon2_id != 690) && (rows[0].weapon2_id != 790)) {
												bot.sendMessage(message.chat.id, "Equipaggia una delle 4 corazze incantate per poterla scambiare", kbBack);
												return;
											}

											var id = 0;
											if (type.toLowerCase() == "rossa")
												id = 688;
											else if (type.toLowerCase() == "gialla")
												id = 690;
											else if (type.toLowerCase() == "blu")
												id = 689;
											else if (type.toLowerCase() == "bianca") {
												if (step7 == 0) {
													bot.sendMessage(message.chat.id, "Devi prima sbloccare la trasmogrificazione della Corazza Necro di Phoenix nella Necro del Destino!", kbBack);
													return;
												}
												id = 790;
											} else {
												bot.sendMessage(message.chat.id, "Colore non valido", kbBack);
												return;
											}

											connection.query('UPDATE player SET weapon2_id = ' + id + ' WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Corazza Necro cambiata di tipo, ora √® *" + type + "*!", kbBack);
											});
										});
									} else if (set.toLowerCase() == "scudo necro") {
										connection.query('SELECT weapon3_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											if ((rows[0].weapon3_id != 671) && (rows[0].weapon3_id != 672) && (rows[0].weapon3_id != 673) && (rows[0].weapon3_id != 791)) {
												bot.sendMessage(message.chat.id, "Equipaggia uno dei 4 scudi incantati per poterlo scambiare", kbBack);
												return;
											}

											var id = 0;
											if (type.toLowerCase() == "rosso") {
												id = 672;
												type = "Rosso";
											} else if (type.toLowerCase() == "giallo") {
												id = 671;
												type = "Giallo";
											} else if (type.toLowerCase() == "blu") {
												id = 673;
											} else if (type.toLowerCase() == "bianco") {
												if (step8 == 0) {
													bot.sendMessage(message.chat.id, "Devi prima sbloccare la trasmogrificazione dello Scudo Necro di Phoenix nella Necro del Destino!", kbBack);
													return;
												}
												id = 791;
											} else {
												bot.sendMessage(message.chat.id, "Colore non valido", kbBack);
												return;
											}

											connection.query('UPDATE player SET weapon3_id = ' + id + ' WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Scudo Necro cambiato di tipo, ora √® *" + type + "*!", kbBack);
											});
										});
									}
								};
							});
						};
					};
				});
			});
		});
	});
});

bot.onText(/nomina equip/i, function (message) {
	var kb = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Nomina Necrolama"], ["Nomina Corazza Necro"], ["Nomina Scudo Necro"], ["Nomina Rifugio"], ["Torna al giocatore"], ["Torna al menu"]]
		}
	};

	bot.sendMessage(message.chat.id, "Quale elemento vuoi rinominare?", kb);
});

bot.onText(/nomina necrolama/i, function (message) {
	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al giocatore"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, weapon_id, custom_name FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var weapon_id = rows[0].weapon_id;

		if (rows[0].custom_name != null) {
			bot.sendMessage(message.chat.id, "Ripristinare il nome originale della Necrolama?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('UPDATE player SET custom_name = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai ripristinato il nome originale della tua Necrolama!", kbBack);
						});
					}
				}
			});
			return;
		}

		if ((weapon_id != 638) && (weapon_id != 639) && (weapon_id != 640) && (weapon_id != 754)) {
			bot.sendMessage(message.chat.id, "Equipaggia una delle 4 Necrolame Incantate per utilizzare questa funzionalit√†", kbBack);
			return;
		}

		bot.sendMessage(message.chat.id, "Inserisci il nome da utilizzare per la tua *Necrolama*, risulter√† poi in questo modo: '_Nomeinserito_+lama' per esempio inserendo '_Banana_', il nome diventer√† '_Bananalama_'.\nNon utilizzare nomi non consoni, divinit√†, insulti, ecc., massimo 20 caratteri e nessun simbolo!", back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text != "Torna al menu") {
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z√†√®√¨√≤√π√©.,\\\?\!\'\@\(\)]{1,20}$");
					if (reg.test(resp) == false) {
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", kbBack);
						return;
					}
					connection.query('SELECT name FROM item WHERE id = ' + weapon_id, function (err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Complimenti! La tua nuova Necrolama si chiama ora *" + resp + rows[0].name.replace("Necro", "") + "*!", kbBack);
						connection.query('UPDATE player SET custom_name = "' + resp + '" WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					});
				}
			}
		});
	});
});

bot.onText(/nomina corazza necro/i, function (message) {
	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al giocatore"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, weapon2_id, custom_name2 FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var weapon2_id = rows[0].weapon2_id;

		if (rows[0].custom_name2 != null) {
			bot.sendMessage(message.chat.id, "Ripristinare il nome originale della Corazza?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('UPDATE player SET custom_name2 = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai ripristinato il nome originale della tua Corazza!", kbBack);
						});
					}
				}
			});
			return;
		}

		if ((weapon2_id != 688) && (weapon2_id != 689) && (weapon2_id != 690) && (weapon2_id != 790)) {
			bot.sendMessage(message.chat.id, "Equipaggia una delle 3 Corazze Incantate per utilizzare questa funzionalit√†", kbBack);
			return;
		}

		bot.sendMessage(message.chat.id, "Inserisci il nome da utilizzare per la tua *Corazza*, risulter√† poi in questo modo: 'Corazza _Nomeinserito_' per esempio inserendo '_Banana_', il nome diventer√† 'Corazza _Banana_'.\nNon utilizzare nomi non consoni, divinit√†, insulti, ecc., massimo 20 caratteri e nessun simbolo!", back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text != "Torna al menu") {
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z√†√®√¨√≤√π√©.,\\\?\!\'\@\(\)]{1,20}$");
					if (reg.test(resp) == false) {
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", kbBack);
						return;
					}
					connection.query('SELECT name FROM item WHERE id = ' + weapon2_id, function (err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Complimenti! La tua nuova Corazza si chiama ora *" + rows[0].name.replace("Necro", resp) + "*!", kbBack);
						connection.query('UPDATE player SET custom_name2 = "' + resp + '" WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					});
				}
			}
		});
	});
});

bot.onText(/nomina scudo necro/i, function (message) {
	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al giocatore"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, weapon3_id, custom_name3 FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var weapon3_id = rows[0].weapon3_id;

		if (rows[0].custom_name3 != null) {
			bot.sendMessage(message.chat.id, "Ripristinare il nome originale dello Scudo?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('UPDATE player SET custom_name3 = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai ripristinato il nome originale del tuo Scudo!", kbBack);
						});
					}
				}
			});
			return;
		}

		if ((weapon3_id != 671) && (weapon3_id != 672) && (weapon3_id != 673) && (weapon3_id != 791)) {
			bot.sendMessage(message.chat.id, "Equipaggia uno dei 4 Scudi Incantati per utilizzare questa funzionalit√†", kbBack);
			return;
		}

		bot.sendMessage(message.chat.id, "Inserisci il nome da utilizzare per il tuo *Scudo*, risulter√† poi in questo modo: 'Scudo _Nomeinserito_' per esempio inserendo '_Banana_', il nome diventer√† 'Scudo _Banana_'.\nNon utilizzare nomi non consoni, divinit√†, insulti, ecc., massimo 20 caratteri e nessun simbolo!", back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text != "Torna al menu") {
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z√†√®√¨√≤√π√©.,\\\?\!\'\@\(\)]{1,20}$");
					if (reg.test(resp) == false) {
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", kbBack);
						return;
					}
					connection.query('SELECT name FROM item WHERE id = ' + weapon3_id, function (err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Complimenti! Il tuo nuovo Scudo si chiama ora *" + rows[0].name.replace("Necro", resp) + "*!", kbBack);
						connection.query('UPDATE player SET custom_name3 = "' + resp + '" WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					});
				}
			}
		});
	});
});

bot.onText(/nomina rifugio/i, function (message) {
	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al giocatore"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, house_id, custom_name_h FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var house_id = rows[0].house_id;

		if (rows[0].custom_name_h != null) {
			bot.sendMessage(message.chat.id, "Ripristinare il nome originale del Rifugio?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('UPDATE player SET custom_name_h = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai ripristinato il nome originale del Rifugio!", kbBack);
						});
					}
				}
			});
			return;
		}

		if (house_id < 5) {
			bot.sendMessage(message.chat.id, "Devi possedere il rifugio almeno al livello 5 per utilizzare questa funzionalit√†", kbBack);
			return;
		}

		bot.sendMessage(message.chat.id, "Inserisci il nome da utilizzare per il tuo *Rifugio*, risulter√† poi in questo modo: 'Rifugio _Nomeinserito_' per esempio inserendo '_Banana_', il nome diventer√† 'Rifugio _Banana_'.\nNon utilizzare nomi non consoni, divinit√†, insulti, ecc., massimo 30 caratteri, spazi e nessun simbolo!", back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text != "Torna al menu") {
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z ]{0,30}$");
					if (reg.test(resp) == false) {
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", kbBack);
						return;
					}
					connection.query('SELECT name FROM house WHERE grade = ' + house_id, function (err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Complimenti! Il tuo nuovo Rifugio si chiama ora *Rifugio " + resp + "*!", kbBack);
						connection.query('UPDATE player SET custom_name_h = "' + resp + '" WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					});
				}
			}
		});
	});
});

bot.onText(/resetta guide/i, function (message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		bot.sendMessage(message.chat.id, "Sei sicuro di voler ripristinare tutte le guide per sezione?", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					connection.query('DELETE FROM help_message WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Le guide sono state resettate!", back);
					});
				}
			}
		});
	});
});

bot.onText(/casa dei giochi/i, function (message) {

	var s = 1;
	if ((message.from.id != 20471035) && (message.from.username != "Gaius87") && (message.from.username != "Raukonar"))
		s = 0;

	if (s == 0) {
		var d = new Date();
		if (d.getDay() != 3) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money, exp, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);
		var myMoney = rows[0].money;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		if ((level < 50) && (rows[0].reborn == 1)) {
			bot.sendMessage(message.chat.id, "Raggiungi almeno il livello 50 per accedere a questa funzione! Dopo di che potrai tentare la fortuna in vari mini giochi e ottenere interessanti somme di monete!", back);
			return;
		}

		var game = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Numero Fortunato ü•á", "Combo Craft üíé"], ["Carte e Pirata üìÉ", "Minatore Lancia-dadi üé≤"], ["Torna al menu"]]
			}
		};

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbBack2 = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbRote = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				one_time_keyboard: true,
				keyboard: [["Gira Rotelle ‚öôÔ∏è"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbNum = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Gioca Numeri üî¢"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbCard = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Vedi la Carta üìÉ"], ["Classifica", "Tabella Premi"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbDice = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Lancia il Dado üé≤"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT id FROM game_house_stats WHERE type = 1 AND player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO game_house_stats (player_id, type) VALUES (' + player_id + ', 1)', function (err, rows, fields) {
					if (err) throw err;
				});
			}
		});

		connection.query('SELECT id FROM game_house_stats WHERE type = 2 AND player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO game_house_stats (player_id, type) VALUES (' + player_id + ', 2)', function (err, rows, fields) {
					if (err) throw err;
				});
			}
		});

		connection.query('SELECT id FROM game_house_stats WHERE type = 3 AND player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO game_house_stats (player_id, type) VALUES (' + player_id + ', 3)', function (err, rows, fields) {
					if (err) throw err;
				});
			}
		});

		connection.query('SELECT id FROM game_house_stats WHERE type = 4 AND player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO game_house_stats (player_id, type) VALUES (' + player_id + ', 4)', function (err, rows, fields) {
					if (err) throw err;
				});
			}
		});

		connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var mana_txt = "";
			if (Object.keys(rows).length > 0)
				mana_txt += formatNumber(rows[0].mana_1) + " üåä Mana Blu, " + formatNumber(rows[0].mana_2) + " ‚ö°Ô∏è Mana Giallo, " + formatNumber(rows[0].mana_3) + " üî• Mana Rosso\n";
			else
				mana_txt += "0 üåä Mana Blu, 0 ‚ö°Ô∏è Mana Giallo, 0 üî• Mana Rosso\n";

			setAchievement(player_id, 70, 1);

			bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella Casa dei Giochi!\nSeleziona il gioco a cui vuoi partecipare", game).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if ((answer.text.indexOf("Numero Fortunato") != -1)) {
						bot.sendMessage(message.chat.id, "*Numero Fortunato*\n\nIn questo gioco puoi puntare su uno o pi√π numeri e offrire una certa somma di ¬ß, quando avrai specificato entrambe le informazioni, la _Sfera Tempesta_ verr√† fatta girare nel grosso campo da gioco e si fermer√† su uno dei 36 numeri (37 considerando lo 0, che per√≤ √® sempre perdente). Se almeno una delle tue previsioni sar√† corretta, otterrai una vincita pari a quanto puntato per il numero di previsioni.\n\nAl momento possiedi " + formatNumber(myMoney) + " ¬ß", kbNum);
					} else if ((answer.text.indexOf("Combo Craft") != -1)) {
						var price = 10000;
						bot.sendMessage(message.chat.id, "*Combo di Craft*\n\nIn questo gioco puoi tentare la fortuna facendo girare le 3 _Rotelle X_ e tentare di vincere qualcosa. Quando tutte e 3 segneranno lo stesso simbolo, otterrai oggetti o strumenti particolari. Ogni giocata ti coster√† " + price + " ¬ß, procedi?\n\nAl momento possiedi " + formatNumber(myMoney) + " ¬ß", kbRote);
					} else if ((answer.text.indexOf("Carte e Pirata") != -1)) {
						var price = 5000;
						bot.sendMessage(message.chat.id, "*Carte e Pirata*\n\nIn questo gioco dovrai sfidare il Pirata a _Carte Stropicciate_ e indovinare pi√π volte possibili di fila se la carta successiva sar√† pi√π alta o pi√π bassa della precedente. Le carte hanno un valore che varia casualmente tra 1 e 20. Giocare ti coster√† " + price + " ¬ß a carta, il gioco finisce quando non indovini e riceverai un premio partendo dalle 5 vittorie di fila, procedi?\n\nAl momento possiedi " + formatNumber(myMoney) + " ¬ß", kbCard).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text == "Classifica") {

									var text = "Classifica per vittorie consecutive:\n";
									var c = 1;
									var mypnt = 0;
									var totpnt = 0;
									var mypos = 0;
									var size = 20;

									connection.query('SELECT nickname, record FROM game_house_stats, player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND game_house_stats.player_id = player.id AND player.id NOT IN (1,3) AND game_house_stats.type = 3 ORDER BY record DESC', function (err, rows, fields) {
										if (err) throw err;
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											if (c < size + 1) {
												rows[i].total_cnt = formatNumber(rows[i].record);
												text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].record + ")\n";
											}
											if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
												mypnt = rows[i].record;
												mypos = c;
											}
											c++;
										}
										text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + mypnt + ")";

										bot.sendMessage(message.chat.id, text, kbBack2);
									});
								} else if (answer.text == "Tabella Premi") {
									var text = "*Tabella premi*:\n\n" +
										"_(Vittorie consecutive)_\n" +
										"5-6: 5x Scrigno di Legno\n" +
										"7-9: 5x Scrigno di Ferro\n" +
										"10-11: 5x Scrigno Prezioso\n" +
										"12-14: 5x Scrigno di Diamante\n" +
										"15-19: 5x Scrigno Leggendario\n" +
										"20-24: 5x Scrigno Epico\n" +
										"25-29: 15x Scrigno Epico\n" +
										"30-in su: 1x Scrigno Capsula";

									bot.sendMessage(message.chat.id, text, kbBack);
								}
							};
						});
					} else if (answer.text.indexOf("Minatore") != -1) {
						bot.sendMessage(message.chat.id, "*Minatore*\n\nIn questo gioco puoi tentare la fortuna scommettendo unit√† di Mana contro il misterioso Minatore. Se il tuo dado si avviciner√† pi√π di quello avversario al numero sul tavolo, vincerai la stessa quantit√† di Mana giocato. In caso di parit√† riotterrai il Mana giocato, i dadi sono di 10 facce.\n\nAl momento possiedi " + mana_txt, kbDice);
					}
				};
			});
		});
	});
});

bot.onText(/lancia il dado/i, function (message) {
	if (!checkSpam(message))
		return;

	var s = 1;
	if ((message.from.id != 20471035) && (message.from.username != "Gaius87") && (message.from.username != "Raukonar"))
		s = 0;

	if (s == 0) {
		var d = new Date();
		if (d.getDay() != 3) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money, exp FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);

		if ((level < 50) && (rows[0].reborn == 1)) {
			bot.sendMessage(message.chat.id, "Sblocca la casa dei giochi per accedere a questa funzione!", back);
			return;
		}

		var kbChoice = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["50 üåä Blu", "100 üåä Blu"], ["50 ‚ö°Ô∏è Giallo", "100 ‚ö°Ô∏è Giallo"], ["50 üî• Rosso", "100 üî• Rosso"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbNum = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Lancia"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbAgain = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Rilancia il dado"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, "Seleziona la quantit√† di *Mana* che vuoi giocare contro il _Minatore_, poi lancia il dado.", kbChoice).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {

				if (answer.text == "Torna alla casa dei giochi")
					return;

				if (answer.text.indexOf(" ") == -1) {
					bot.sendMessage(message.chat.id, "Usa uno dei pulsanti per selezionare il mana", kbBack);
					return;
				}

				var mana = answer.text.trim().split(" ");
				var color = mana[2].trim().toLowerCase();
				var qnt = parseInt(mana[0].trim());

				var mana_num = 0;
				if (color == "blu")
					mana_num = 1;
				else if (color == "giallo")
					mana_num = 2;
				else if (color == "rosso")
					mana_num = 3;
				else {
					bot.sendMessage(message.chat.id, "Colore del mana non valido", kbBack);
					return;
				}

				if ((qnt == NaN) || (qnt == undefined)) {
					bot.sendMessage(message.chat.id, "Quantit√† del mana non valida", kbBack);
					return;
				}

				if ((qnt != 50) && (qnt != 100)) {
					bot.sendMessage(message.chat.id, "Quantit√† del mana non valida", kbBack);
					return;
				}

				var extracted = Math.round(getRandomArbitrary(1, 10));

				bot.sendMessage(message.chat.id, "In caso di vittoria otterrai " + qnt + " Mana " + capitalizeFirstLetter(color) + ", in caso di sconfitta perderai quello giocato.\nIl numero sul tavolo indica *" + extracted + "*, lanci il dado?", kbNum).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if ((answer.text != "Torna alla casa dei giochi") && (answer.text != "Torna al menu")) {
							connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "Accedi almeno una volta alle Miniere di Mana per utilizzare questo gioco", kbBack);
									return;
								}

								var checkMana = 0;
								if (mana_num == 1)
									checkMana = rows[0].mana_1;
								else if (mana_num == 2)
									checkMana = rows[0].mana_2;
								else if (mana_num == 3)
									checkMana = rows[0].mana_3;

								if (checkMana < qnt) {
									bot.sendMessage(message.chat.id, "Non hai abbastanza Mana " + capitalizeFirstLetter(color) + ", riprova", kbBack);
									return;
								}

								connection.query('UPDATE event_mana_status SET mana_' + mana_num + ' = mana_' + mana_num + '-' + qnt + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									var my_num = Math.round(getRandomArbitrary(1, 10));
									var enemy_num = Math.round(getRandomArbitrary(1, 10));

									var my_diff = Math.abs(extracted-my_num);
									var enemy_diff = Math.abs(extracted-enemy_num);

									var win_text = "il minatore ha vinto, hai perso *" + qnt + "* Mana " + capitalizeFirstLetter(color) + "!";
									if (my_diff < enemy_diff) {
										win_text = "hai vinto ed ottenuto *" + qnt + "* Mana " + capitalizeFirstLetter(color) + "!";
										connection.query('UPDATE event_mana_status SET mana_' + mana_num + ' = mana_' + mana_num + '+' + (qnt*2) + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE game_house_stats SET win = win+1 WHERE player_id = ' + player_id + ' AND type = 4', function (err, rows, fields) {
											if (err) throw err;
										});
									} else if (my_diff > enemy_diff) {
										connection.query('UPDATE game_house_stats SET lose = lose+1 WHERE player_id = ' + player_id + ' AND type = 4', function (err, rows, fields) {
											if (err) throw err;
										});
									} else {
										win_text = "parit√†, hai riottenuto il mana giocato!";
										connection.query('UPDATE event_mana_status SET mana_' + mana_num + ' = mana_' + mana_num + '+' + qnt + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
									}

									connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										var mana_txt = "\n\nPossiedi " + formatNumber(rows[0].mana_1) + " üåä Mana Blu, " + formatNumber(rows[0].mana_2) + " ‚ö°Ô∏è Mana Giallo e " + formatNumber(rows[0].mana_3) + " üî• Mana Rosso, vuoi ritentare?";

										bot.sendMessage(message.chat.id, "Il dado del tuo avversario mostra un *" + enemy_num + "*, il tuo mostra un *" + my_num + "*, " + win_text + mana_txt + "", kbAgain);
									});
								});
							});
						};
					};
				});
			};
		});
	});
});

bot.onText(/gioca numeri/i, function (message) {
	if (!checkSpam(message))
		return;

	var s = 1;
	if ((message.from.id != 20471035) && (message.from.username != "Gaius87") && (message.from.username != "Raukonar"))
		s = 0;

	if (s == 0) {
		var d = new Date();
		if (d.getDay() != 3) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money, exp FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);
		var myMoney = rows[0].money;

		if ((level < 50) && (rows[0].reborn == 1)) {
			bot.sendMessage(message.chat.id, "Sblocca la casa dei giochi per accedere a questa funzione!", back);
			return;
		}

		var kbChoice = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Tutti i pari", "Tutti i dispari"], ["Primi 12", "Secondi 12", "Ultimi 12"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbNum = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Gioca Numeri"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				one_time_keyboard: true,
				keyboard: [["Si"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, "Seleziona i numeri che vuoi giocare, separati da virgola. Oppure indica i gruppi di numeri attraverso i pulsanti.", kbChoice).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {

				if (answer.text == "Torna alla casa dei giochi")
					return;

				if (answer.text == "Tutti i pari")
					answer.text = "2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36";
				else if (answer.text == "Tutti i dispari")
					answer.text = "1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35";
				else if (answer.text == "Primi 12")
					answer.text = "1,2,3,4,5,6,7,8,9,10,11,12";
				else if (answer.text == "Secondi 12")
					answer.text = "13,14,15,16,17,18,19,20,21,22,23,24";
				else if (answer.text == "Ultimi 12")
					answer.text = "25,26,27,28,29,30,31,32,33,34,35,36";

				var numbers = answer.text.trim().split(",");
				var len = Object.keys(numbers).length;

				if (len < 1) {
					bot.sendMessage(message.chat.id, "Inserisci almeno un numero, riprova", kbNum);
					return;
				}

				if (len > 18) {
					bot.sendMessage(message.chat.id, "Troppi numeri, massimo 18, riprova", kbNum);
					return;
				}

				var check = 0;
				var checkn = 0;

				for (var i = 0; i < len; i++) {
					numbers[i] = Math.round(numbers[i]);

					if (isNaN(numbers[i])) {
						bot.sendMessage(message.chat.id, "Almeno un numero non √® valido, riprova", kbNum);
						return;
					}
					if ((numbers[i] < 1) || (numbers[i] > 36)) {
						bot.sendMessage(message.chat.id, numbers[i] + " non √® valido, deve essere compreso tra 1 e 36", kbNum);
						return;
					}
					checkn = 0;
					for (var j = 0; j < len; j++) {
						if (numbers[i] == numbers[j])
							checkn++;
						if (checkn >= 2) {
							bot.sendMessage(message.chat.id, numbers[i] + " non √® valido, √® gi√† stato inserito", kbNum);
							return;
						}
					}
				}

				connection.query('SELECT money, ability FROM player WHERE id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					var max = 15000*Math.max(Math.min(Math.floor(rows[0].ability/100), 10), 1);

					bot.sendMessage(message.chat.id, "La tua puntata in caso di vittoria sar√† x*" + Math.round(36 / len) + "*, ora indica l'ammontare per la tua puntata, massimo " + formatNumber(max) + " ¬ß. Possiedi " + formatNumber(rows[0].money) + " ¬ß", kbBack).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if ((answer.text != "Torna alla casa dei giochi") && (answer.text != "Torna al menu")) {
								var money = parseInt(answer.text.replaceAll(/\./, ""));

								if (isNaN(money)) {
									bot.sendMessage(message.chat.id, "Valore non valido, riprova", kbNum);
									return;
								}

								money = Math.round(money);

								if (money > max) {
									bot.sendMessage(message.chat.id, "Il massimo √® " + formatNumber(max) + " ¬ß", kbNum);
									return;
								}

								if (money < 1) {
									bot.sendMessage(message.chat.id, "Il minimo √® 1 ¬ß", kbNum);
									return;
								}

								connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (rows[0].money < money) {
										bot.sendMessage(message.chat.id, "Non hai cos√¨ tante monete, riprova", kbNum);
										return;
									}

									var win = Math.floor(money * Math.round(36 / len));

									bot.sendMessage(message.chat.id, "Bene, ecco un riassunto:\nNumeri: " + numbers.join() + "\nImporto: " + formatNumber(money) + " ¬ß\n\nIn caso di vittoria otterrai: " + formatNumber(win) + " ¬ß, procedi?", kbYesNo).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.toLowerCase() == "si") {
												connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (rows[0].money < money) {
														bot.sendMessage(message.chat.id, "Non hai monete sufficienti", kbNum);
														return;
													}

													var extracted = Math.round(Math.random() * 36);

													bot.sendMessage(message.chat.id, "La sfera viene lanciata sul campo...");
													setTimeout(function () {
														bot.sendMessage(message.chat.id, "Rotola rotola...");
														setTimeout(function () {

															connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;

																if (rows[0].money < money) {
																	bot.sendMessage(message.chat.id, "Non hai cos√¨ tante monete", kbNum);
																	return;
																}

																connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;

																	if (numbers.indexOf(extracted) != -1) {
																		bot.sendMessage(message.chat.id, "E si ferma sul numero *" + extracted + "*!\n\nHAI VINTO e ottenuto *" + formatNumber(win) + "* ¬ß!", kbNum);

																		connection.query('UPDATE player SET money = money+' + win + ' WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});

																		connection.query('UPDATE game_house_stats SET win = win+1, pay = pay+ ' + money + ' WHERE player_id = ' + player_id + ' AND type = 1', function (err, rows, fields) {
																			if (err) throw err;
																		});
																	} else {
																		bot.sendMessage(message.chat.id, "E si ferma sul numero *" + extracted + "*!\n\nHAI PERSO!", kbNum);

																		connection.query('UPDATE game_house_stats SET lose = lose+1, pay = pay+ ' + money + ' WHERE player_id = ' + player_id + ' AND type = 1', function (err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																});
															});
														}, 2000);
													}, 2000);
												});
											}
										};
									});
								});
							};
						};
					});
				});
			};
		});
	});
});

bot.onText(/gira rotelle/i, function (message) {
	if (!checkSpam(message))
		return;

	var s = 1;
	if ((message.from.id != 20471035) && (message.from.username != "Gaius87") && (message.from.username != "Raukonar"))
		s = 0;

	if (s == 0) {
		var d = new Date();
		if (d.getDay() != 3) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna alla casa dei giochi"], ["Torna al menu"]]
		}
	};

	var kbRote = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			one_time_keyboard: true,
			keyboard: [["Gira Rotelle"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money, exp FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);
		var myMoney = rows[0].money;

		if ((level < 50) && (rows[0].reborn == 1)) {
			bot.sendMessage(message.chat.id, "Sblocca la casa dei giochi per accedere a questa funzione!", back);
			return;
		}

		connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var price = 10000;

			if (rows[0].money < price) {
				bot.sendMessage(message.chat.id, "Non hai monete sufficienti, ne servono " + formatNumber(price), kbBack);
				return;
			}

			var symArray = ["üåï", "üé≤", "üìö", "üõ°", "üçø", "üçª", "üî©", "üç´", "üéØ", "üí∞"];
			var symLen = symArray.length;
			var sym1 = symArray[Math.floor(Math.random() * symLen)];
			var sym2 = symArray[Math.floor(Math.random() * symLen)];
			var sym3 = symArray[Math.floor(Math.random() * symLen)];

			var sym4 = symArray[Math.floor(Math.random() * symLen)];
			var sym5 = symArray[Math.floor(Math.random() * symLen)];
			var sym6 = symArray[Math.floor(Math.random() * symLen)];

			var sym7 = symArray[Math.floor(Math.random() * symLen)];
			var sym8 = symArray[Math.floor(Math.random() * symLen)];
			var sym9 = symArray[Math.floor(Math.random() * symLen)];

			bot.sendMessage(message.chat.id, "Le rotelle cominciano a roteare...");
			setTimeout(function () {
				bot.sendMessage(message.chat.id, "Lentamente rallentano...");
				setTimeout(function () {

					connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						if (rows[0].money < price) {
							bot.sendMessage(message.chat.id, "Non hai monete sufficienti, ne servono " + formatNumber(price), kbBack);
							return;
						}

						connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							var win = 0;
							var result = "";
							if ((sym1 == sym2) && (sym2 == sym3)) {
								win += 1;
								result += "Orizzontale prima riga con 3 " + sym1 + "\n";
							}
							if ((sym4 == sym5) && (sym5 == sym6)) {
								win += 1;
								result += "Orizzontale seconda riga con 3 " + sym4 + "\n";
							}
							if ((sym7 == sym8) && (sym8 == sym9)) {
								win += 1;
								result += "Orizzontale terza riga con 3 " + sym7 + "\n";
							}

							if ((sym1 == sym5) && (sym5 == sym9)) {
								win += 1;
								result += "Diagonale da sinistra con 3 " + sym1 + "\n";
							}
							if ((sym3 == sym5) && (sym5 == sym7)) {
								win += 1;
								result += "Diagonale da destra con 3 " + sym3 + "\n";
							}

							if ((sym1 == sym4) && (sym4 == sym7)) {
								win += 1;
								result += "Verticale prima colonna con 3 " + sym1 + "\n";
							}
							if ((sym2 == sym5) && (sym5 == sym8)) {
								win += 1;
								result += "Verticale seconda colonna con 3 " + sym2 + "\n";
							}
							if ((sym3 == sym6) && (sym6 == sym9)) {
								win += 1;
								result += "Verticale terza colonna con 3 " + sym3 + "\n";
							}

							if ((sym1 == "üî©") && (sym2 == "üî©") && (sym3 == "üî©")) {
								addItem(player_id, 220);
								bot.sendMessage(message.chat.id, "Con questa particolare combinazione hai ottenuto una *Capsula Prelevazione*! Che fortuna!", back);
							}

							var txt = "";
							if (win > 0) {
								txt = "\n\nHAI VINTO!\nRisultato:\n" + result;

								connection.query('UPDATE game_house_stats SET win = win+1, pay = pay+ ' + price + ' WHERE player_id = ' + player_id + ' AND type = 2', function (err, rows, fields) {
									if (err) throw err;
								});
							} else {
								txt = "\n\nHAI PERSO!";
								connection.query('UPDATE game_house_stats SET lose = lose+1, pay = pay+ ' + price + ' WHERE player_id = ' + player_id + ' AND type = 2', function (err, rows, fields) {
									if (err) throw err;
								});
							}

							bot.sendMessage(message.chat.id, "E si fermano indicando 9 simboli\n\n" + sym1 + " " + sym2 + " " + sym3 + " \n" + sym4 + " " + sym5 + " " + sym6 + " \n" + sym7 + " " + sym8 + " " + sym9 + " " + txt, kbRote);

							if (win > 0) {
								var rand = 0;
								for (var i = 0; i < win; i++) {
									rand = Math.random() * 100;

									if (rand < 90) {
										connection.query('SELECT id, name FROM item WHERE estimate < 100000 AND rarity IN ("C","NC","R","UR","L","E") ORDER BY RAND()', function (err, rows, fields) {
											var name = rows[0].name;
											addItem(player_id, rows[0].id);
											bot.sendMessage(message.chat.id, "Con questa particolare combinazione hai ottenuto: *" + name + "*!", mark);
										});
									} else if (rand < 99) {
										connection.query('SELECT id, name FROM item WHERE rarity = "D" AND name LIKE "Pietra%" ORDER BY RAND()', function (err, rows, fields) {
											var name = rows[0].name;
											addItem(player_id, rows[0].id);
											bot.sendMessage(message.chat.id, "Con questa particolare combinazione hai ottenuto un: *" + name + "*!", mark);
										});
									} else {
										connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function (err, rows, fields) {
											bot.sendMessage(message.chat.id, "Con questa particolare combinazione hai ottenuto una *Gemma*!", mark);
										});
									}
								}
							}
						});
					});
				}, 2000);
			}, 2000);
		});
	});
});

bot.onText(/vedi la carta/i, function (message) {
	if (!checkSpam(message))
		return;

	var s = 1;
	if ((message.from.id != 20471035) && (message.from.username != "Gaius87") && (message.from.username != "Raukonar"))
		s = 0;

	if (s == 0) {
		var d = new Date();
		if (d.getDay() != 3) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)) {
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money, exp FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);
		var myMoney = rows[0].money;

		if ((level < 50) && (rows[0].reborn == 1)) {
			bot.sendMessage(message.chat.id, "Sblocca la casa dei giochi per accedere a questa funzione!", back);
			return;
		}

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbChoice2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Pi√π bassa ‚¨áÔ∏è", "Pi√π alta ‚¨ÜÔ∏è"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		var kbCard = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Vedi la Carta üìÉ"], ["Torna alla casa dei giochi"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT player_id, streak, card FROM house_game_3 WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var price = 5000;
			var streak = 0;
			var card = Math.round(Math.random() * 19 + 1);
			var record = 0;

			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO house_game_3 (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
				});
			} else {
				streak = rows[0].streak;
				card = rows[0].card;
			}

			if (myMoney < price) {
				bot.sendMessage(message.chat.id, "Non hai monete sufficienti", kbBack);
				return;
			}

			connection.query('SELECT record FROM game_house_stats WHERE type = 3 AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0)
					record = rows[0].record;

				connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					connection.query('UPDATE house_game_3 SET card = ' + card + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Sequenza di vittorie: *" + streak + "*\nIl Pirata tira fuori la carta stropicciata e legge ad alta voce il numero scritto sopra:\n\n*" + card + "*\n\nSecondo te la carta successiva sar√†...", kbChoice2).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {

								var card2 = Math.round(Math.random() * 19 + 1);
								var win = 0;

								if (answer.text.indexOf("Pi√π alta") != -1) {
									if (card2 > card)
										win = 1;
									else if (card2 < card)
										win = 0;
									else if (card2 == card)
										win = 1
								} else if (answer.text.indexOf("Pi√π bassa") != -1) {
									if (card2 < card)
										win = 1;
									else if (card2 > card)
										win = 0;
									else if (card2 == card)
										win = 1;
								} else
									return;

								if (win == 1) {
									bot.sendMessage(message.chat.id, "Il Pirata prende l'altra carta e la apre piano piano, al suo interno si legge un numero:\n\n*" + card2 + "*\n\nHAI VINTO!", kbCard);
									connection.query('UPDATE house_game_3 SET card = ' + card2 + ', streak = streak+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
									});
								} else {

									var txt = "\nMa hai vinto solo " + streak + " turni di fila, non ti meriti nessun premio.";

									var chest_id = 0;
									var qnt = 0;
									var chest_name = "";

									if ((streak >= 5) && (streak <= 6)) {
										chest_name = "Scrigno di Legno";
										chest_id = 1;
										qnt = 5;
									}
									if ((streak >= 7) && (streak <= 9)) {
										chest_name = "Scrigno di Ferro";
										chest_id = 2;
										qnt = 5;
									}
									if ((streak >= 10) && (streak <= 11)) {
										chest_name = "Scrigno Prezioso";
										chest_id = 3;
										qnt = 5;
									}
									if ((streak >= 12) && (streak <= 14)) {
										chest_name = "Scrigno di Diamante";
										chest_id = 4;
										qnt = 5;
									}
									if ((streak >= 15) && (streak <= 19)) {
										chest_name = "Scrigno Leggendario";
										chest_id = 5;
										qnt = 5;
									}
									if ((streak >= 20) && (streak <= 24)) {
										chest_name = "Scrigno Epico";
										chest_id = 6;
										qnt = 5;
									}
									if ((streak >= 25) && (streak <= 29)) {
										chest_name = "Scrigno Epico";
										chest_id = 6;
										qnt = 15;
									}
									if (streak >= 30) {
										chest_name = "Scrigno Capsula";
										chest_id = 7;
										qnt = 1;
									}

									if (streak > record) {
										connection.query('UPDATE game_house_stats SET record = ' + streak + ' WHERE type = 3 AND player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
									}

									var num = (chest_id + 1);

									if (chest_id > 0) {
										txt = "\nIn base alle " + streak + " vittorie consecutive hai vinto *" + qnt + "x " + chest_name + "*!";

										addChest(player_id, chest_id, qnt);

										connection.query('UPDATE game_house_stats SET win = win+1, pay = pay+ ' + price + ' WHERE player_id = ' + player_id + ' AND type = 3', function (err, rows, fields) {
											if (err) throw err;
										});
									} else {
										connection.query('UPDATE game_house_stats SET lose = lose+1, pay = pay+ ' + price + ' WHERE player_id = ' + player_id + ' AND type = 3', function (err, rows, fields) {
											if (err) throw err;
										});
									}

									bot.sendMessage(message.chat.id, "Sequenza di vittorie: *" + streak + "*\nIl Pirata prende un'altra carta e la apre lentamente, al suo interno si legge un numero:\n\n*" + card2 + "*\n\nHAI PERSO!" + txt, kbCard);
									connection.query('DELETE FROM house_game_3 WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
									});
								}
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/$vocazioni|vocazione|torna alle vocazioni/i, function (message) {

	if (message.text.toLowerCase() == "cambia vocazione")
		return;

	connection.query('SELECT account_id, id, class, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var player_class = rows[0].class;
		var reborn = rows[0].reborn;

		if (reborn == 1) {
			bot.sendMessage(message.chat.id, "Non puoi selezionare una vocazione fino alla Rinascita 1 (Livello 100). Potrai scegliere la strada che il tuo eroe desidera intraprendere ottenendo particolari abilit√†!\nPuoi visualizzare le Vocazioni e le loro descrizione in questo documento: http://telegra.ph/Lista-Vocazioni-di-Loot-01-26", back);
			return;
		}

		connection.query('SELECT name FROM class', function (err, rows, fields) {
			if (err) throw err;

			var iKeys = [];
			var text = "";

			for (var i = 1, len = Object.keys(rows).length; i < len; i++)
				iKeys.push([rows[i].name]);

			iKeys.push(["Torna al menu"]);

			var sClass = {
				parse_mode: "Markdown",
				disable_web_page_preview: true,
				reply_markup: {
					resize_keyboard: true,
					keyboard: iKeys
				}
			};

			var bClass = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna alle vocazioni"]]
				}
			};

			var backChange = {
				parse_mode: "Markdown",
				disable_web_page_preview: true,
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Cambia Vocazione"], ["Torna al menu"]]
				}
			};

			var cClass = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Si"], ["Torna alle vocazioni"]]
				}
			};

			if (player_class == 1) {
				bot.sendMessage(message.chat.id, "Le *Vocazioni* sono dei percorsi che puoi scegliere e per migliorare una particolare sezione del tuo personaggio.\nSeleziona la vocazione che preferisci per trarne i benefici associati, ma fai attenzione, cambiarla avr√† un costo molto elevato!\n\nIn questo documento sono descritte nei particolari, scegli saggiamente: http://telegra.ph/Lista-Vocazioni-di-Loot-01-26", sClass).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text != "Torna al menu") {
							connection.query('SELECT id, name FROM class WHERE name = "' + answer.text + '"', function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "Vocazione non valida!", bClass);
									return;
								}

								var class_id = rows[0].id;
								var class_name = rows[0].name;
								var description = rows[0].description;

								bot.sendMessage(message.chat.id, "Sicuro di voler scegliere la Vocazione " + classSym(class_name) + " *" + class_name + "*?", cClass).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {
											bot.sendMessage(message.chat.id, "Sicuro?", cClass).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text.toLowerCase() == "si") {
														connection.query('UPDATE player SET class = ' + class_id + ' WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Hai selezionato la vocazione *" + class_name + "*!", back);
														});
													}
												}
											});
										}
									}
								});
							});
						}
					};
				});
			} else {
				connection.query('SELECT name FROM class WHERE id = ' + player_class, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "La tua vocazione √® *" + rows[0].name + "* " + classSym(rows[0].name) + "\nUlteriori informazioni: http://telegra.ph/Lista-Vocazioni-di-Loot-01-26", backChange);
				});
			}
		});
	});
});

bot.onText(/cambia vocazione/i, function (message) {
	connection.query('SELECT account_id, id, class, reborn, gems, class_change, class_change_date, class_change_free FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var player_class = rows[0].class;
		var reborn = rows[0].reborn;
		var gems = rows[0].gems;
		var class_change = rows[0].class_change;
		var class_change_date = rows[0].class_change_date;
		var class_change_free = rows[0].class_change_free;

		if (reborn == 1) {
			bot.sendMessage(message.chat.id, "Sblocca le vocazioni prima di poterla cambiare", back);
			return;
		}

		if (reborn < 5) {
			bot.sendMessage(message.chat.id, "Puoi cambiare vocazione solo a Rinascita 4!", back);
			return;
		}

		var bClass = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alle vocazioni"]]
			}
		};
		var cClass = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna alle vocazioni"]]
			}
		};

		if (player_class == 1) {
			bot.sendMessage(message.chat.id, "Puoi cambiare vocazione solo dopo averne scelta una", bClass);
			return;
		}

		if (player_id != 1) {
			var now = new Date();
			if (now.getDate() != 15) {
				bot.sendMessage(message.chat.id, "E' possibile cambiare vocazione solo il 15 del mese", bClass);
				return;
			}
		}

		var d1 = new Date(class_change_date);
		var d2 = new Date();
		d1.setHours(0, 0, 0, 0);
		d2.setHours(0, 0, 0, 0);
		if (d1.getTime() == d2.getTime()) {
			bot.sendMessage(message.chat.id, "Hai gi√† cambiato vocazione una volta, potrai rifarlo il prossimo mese!", bClass);
			return;
		}

		var cost = 500+(250*class_change);
		bot.sendMessage(message.chat.id, "Sei sicuro di voler modificare la Vocazione? La prima volta √® gratis, dopo di che ti coster√† " + cost + " üíé ed il costo aumenter√† ogni cambio!\nNota: puoi farlo solo una volta durante questa giornata", cClass).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					if (class_change_free == 0) {
						connection.query('UPDATE player SET class = 1, class_change_date = NOW(), class_change_free = 1 WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai resettato la vocazione gratuitamente, ora puoi selezionarne una nuova!", bClass);
						});
					} else {
						if (gems < cost) {
							bot.sendMessage(message.chat.id, "Non hai abbastanza üíé", bClass);
							return;
						}
						connection.query('UPDATE player SET gems = gems-' + cost + ', class = 1, class_change = class_change+1, class_change_date = NOW() WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai resettato la vocazione al costo di " + cost + " üíé, ora puoi selezionarne una nuova!", bClass);
						});
					}

					console.log("Reset vocazione da " + player_class);
				}
			}
		});
	});
});

bot.onText(/statistiche/i, function (message) {
	connection.query('SELECT id, mission_count, achievement_count, dungeon_count, cave_count, travel_count, global_event, kill_streak_ok, gain_exp, mission_team_count, creation_date, top_rank_count, total_trophies FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var missioni = rows[0].mission_count;
		var imprese = rows[0].achievement_count;
		var dungeon_tot = rows[0].dungeon_count;
		var global_event = rows[0].global_event;
		var kill_streak_ok = rows[0].kill_streak_ok;
		var gain_exp = rows[0].gain_exp;
		var mission_team_count = rows[0].mission_team_count;
		var cave_count = rows[0].cave_count;
		var travel_count = rows[0].travel_count;
		var top_rank_count = rows[0].top_rank_count;
		var total_trophies = rows[0].total_trophies;

		var registrazione = "";
		if (rows[0].creation_date != null)
			registrazione = "*Registrazione*: " + toDate("it", rows[0].creation_date) + "\n";

		connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE to_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var ispezioniSubite = rows[0].cnt;

			connection.query('SELECT kill_streak FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var scalate = 0;
				if (Object.keys(rows).length > 0)
					scalate = rows[0].kill_streak;

				var scalateOk = "No";
				if (kill_streak_ok == 1)
					scalateOk = "Si";
				else {
					if (scalate >= 3) {
						connection.query('UPDATE player SET kill_streak_ok = 1 WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						scalateOk = "Si";
					}
				}

				connection.query('SELECT COUNT(id) As cnt FROM dragon_top_log WHERE (player_id = ' + player_id + ' AND win = 1) OR (enemy_player_id = ' + player_id + ' AND win = 2)', function (err, rows, fields) {
					if (err) throw err;

					var dragon_top_win = rows[0].cnt;

					connection.query('SELECT COUNT(id) As cnt FROM dragon_top_log WHERE (player_id = ' + player_id + ' AND win = 2) OR (enemy_player_id = ' + player_id + ' AND win = 1)', function (err, rows, fields) {
						if (err) throw err;

						var dragon_top_lose = rows[0].cnt;

						connection.query('SELECT total_cnt FROM merchant_offer WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							var contrabbandiere = 0;
							if (Object.keys(rows).length > 0)
								contrabbandiere = rows[0].total_cnt;

							connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE from_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								var ispezioniEffettuate = rows[0].cnt;
								connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE fail > 0 AND to_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									var ispezioniSubiteVinte = rows[0].cnt;
									connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE fail = 0 AND to_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										var ispezioniSubitePerse = rows[0].cnt;
										connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE fail = 0 AND from_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											var ispezioniEffettuateVinte = rows[0].cnt;
											connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE fail > 0 AND from_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												var ispezioniEffettuatePerse = rows[0].cnt;
												connection.query('SELECT COUNT(*) As cnt FROM search_history WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													var ricerche = rows[0].cnt;
													connection.query('SELECT SUM(quantity) As cnt FROM market_direct_history WHERE from_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														var vendite = rows[0].cnt;
														connection.query('SELECT SUM(quantity) As cnt FROM market_direct_history WHERE to_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															var acquisti = rows[0].cnt;
															connection.query('SELECT COUNT(*) As cnt FROM market_history WHERE from_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																var scambiOut = rows[0].cnt;
																connection.query('SELECT COUNT(*) As cnt FROM market_history WHERE to_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	var scambiIn = rows[0].cnt;
																	connection.query('SELECT COUNT(*) As cnt FROM referral_list WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																		var invitati = rows[0].cnt;
																		connection.query('SELECT SUM(quantity) As cnt FROM inventory WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			var oggetti = rows[0].cnt;
																			connection.query('SELECT COUNT(*) As cnt FROM public_lottery_history WHERE creator_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				var lotterie = rows[0].cnt;
																				connection.query('SELECT COUNT(*) As cnt FROM public_lottery_history WHERE player_id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																					var lotterieVinte = rows[0].cnt;
																					connection.query('SELECT COUNT(*) As cnt FROM ability WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																						var abilita = rows[0].cnt;
																						connection.query("SELECT SUM(ability_level) As cnt FROM ability WHERE player_id = " + player_id, function (err, rows, fields) {
																							if (err) throw err;
																							var talenti = rows[0].cnt;
																							connection.query("SELECT COUNT(id) As cnt FROM map_history WHERE player_id = " + player_id, function (err, rows, fields) {
																								if (err) throw err;
																								var map_plays = rows[0].cnt;
																								connection.query("SELECT COUNT(id) As cnt FROM map_history WHERE position = 1 AND player_id = " + player_id, function (err, rows, fields) {
																									if (err) throw err;
																									var map_win = rows[0].cnt;
																									connection.query("SELECT SUM(kills) As cnt FROM map_history WHERE player_id = " + player_id, function (err, rows, fields) {
																										if (err) throw err;
																										var map_kills = 0;
																										if (rows[0].cnt != null)
																											map_kills = rows[0].cnt;

																										var text = "*Statistiche giocatore*\n" +
																											"\nüë§ *Giocatore*:\n" +
																											registrazione +
																											"*Ricerche*: " + ricerche + " (ultimi 30g)\n" +
																											"*Utenti invitati*: " + invitati + "\n" +
																											"*Talenti sbloccati*: " + formatNumber(abilita) + "\n" +
																											"*Assalti personali nel team attuale*: " + formatNumber(scalate) + "\n" +
																											"*3 assalti completati*: " + scalateOk + "\n" +
																											"*Oggetti posseduti*: " + formatNumber(oggetti) + "\n" +
																											"*Imprese globali (partecipando attivamente)*: " + global_event + "\n" +
																											"*Esperienza accumulata*: " + formatNumber(gain_exp) + "\n" +
																											"*Offerte contrabbandiere accettate*: " + formatNumber(contrabbandiere) + "\n" +
																											"*Livelli Talenti raggiunti*: " + talenti + "\n" +
																											"*Incarichi completati*: " + mission_team_count + "\n" +
																											"*√ê accumulate*: " + formatNumber(top_rank_count) + "\n" +

																											"\n‚öîÔ∏è *Hai completato*:\n" +
																											"*Missioni*: " + formatNumber(missioni) + "\n" +
																											"*Imprese giornaliere*: " + formatNumber(imprese) + "\n" +
																											"*Dungeon*: " + formatNumber(dungeon_tot) + "\n" +
																											"*Cave*: " + formatNumber(cave_count) + "\n" +
																											"*Viaggi*: " + formatNumber(travel_count) + "\n" +

																											"\nüé≤ *Eventi*:\n" +
																											"*Scontri Vette vinti*: " + formatNumber(dragon_top_win) + "\n" +
																											"*Scontri Vette persi*: " + formatNumber(dragon_top_lose) + "\n" +

																											"\nüî¶ *Hai avviato " + formatNumber(ispezioniEffettuateVinte+ispezioniEffettuatePerse) + " ispezioni*:\n" +
																											"*Vinte*: " + formatNumber(ispezioniEffettuateVinte) + "\n" +
																											"*Perse*: " + formatNumber(ispezioniEffettuatePerse) + "\n" +

																											"\nüî¶ *Hai subito " + formatNumber(ispezioniSubite) + " ispezioni*:\n" +
																											"*Vinte*: " + formatNumber(ispezioniSubiteVinte) + "\n" +
																											"*Perse*: " + formatNumber(ispezioniSubitePerse) + "\n" +

																											"\nüó∫ *Mappe di Lootia*:\n" +
																											"*Partite*: " + formatNumber(map_plays) + "\n" +
																											"*Vittorie*: " + formatNumber(map_win) + "\n" +
																											"*Uccisioni*: " + formatNumber(map_kills) + "\n" +
																											"*Trofei*: " + formatNumber(total_trophies) + "\n" +

																											"\nüí∞ *Mercato*:\n" +
																											"*Acquisti*: " + formatNumber(acquisti) + "\n" +
																											"*Vendite*: " + formatNumber(vendite) + "\n" +
																											"*Scambi in uscita*: " + formatNumber(scambiOut) + "\n" +
																											"*Scambi in entrata*: " + formatNumber(scambiIn) + "\n" +
																											"*Lotterie*: " + formatNumber(lotterie) + "\n" +
																											"*Lotterie vinte*: " + formatNumber(lotterieVinte);
																										bot.sendMessage(message.chat.id, text, back);
																									});
																								});
																							});
																						});
																					});
																				});
																			});
																		});
																	});
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/^map$|mappe di lootia|entra nella mappa|torna alla mappa/i, function (message) {
	connection.query('SELECT id, holiday, account_id, gender, trophies FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var trophies = rows[0].trophies;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		var kbEvent = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Entra nella mappa"], ["Torna al menu"]]
			}
		};

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla mappa"], ["Torna al menu"]]
			}
		};

		var kbStop = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Esci dalla lobby"], ["Torna al menu"]]
			}
		};

		var kbMain = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Accedi alla Lobby üèπ", "Vittorie üéâ"], ["Come funziona? üí¨"], ["Torna al menu"]]
			}
		};

		if (message.from.id != 20471035) {
			var team = connection_sync.query("SELECT 1 FROM team_player WHERE player_id = " + player_id + " AND team_id IN (3, 277, 225)");
			if (Object.keys(team).length == 0) {
				bot.sendMessage(message.chat.id, "Il tuo team non √® abilitato all'accesso di questa funzione!", back)
				return;
			}
		}
		
		connection.query('SELECT map_season_end FROM config', function (err, rows, fields) {
			if (err) throw err;
			
			var now = new Date();
			var map_season_end = new Date(rows[0].map_season_end);
			var diff_m = parseInt(map_season_end-now)/1000/60;	// minuti
			var diff = diff_m + " minuti";
			if (diff_m <= 1)
				diff = "brevissimo";
			if (diff_m > 60)
				diff = Math.round(diff_m/60) + " ore";
			if (diff_m > 60*24)
				diff = Math.round(diff_m/(60*24)) + " giorni";

			connection.query('SELECT lobby_id FROM map_lobby WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					connection.query('INSERT INTO map_lobby (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Benvenuto nelle *Mappe di Lootia*!\nAffronta altri giocatori in mappe generate in modo completamente casuale, ottieni oggetti, monete, sfuggi a trappole e scambia oggetti per potenziare il tuo personaggio.\nOtteni o perdi trofei al termine della partita e vinci interessanti premi al termine della stagione!\nCosa aspetti?", kbEvent);
					});
				} else {
					var lobby_id = rows[0].lobby_id;
					if (lobby_id != null) {
						connection.query('SELECT 1 FROM map_lobby_list WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								connection.query('SELECT COUNT(lobby_id) As cnt FROM map_lobby WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Lobby in attesa... " + rows[0].cnt + "/" + lobby_total_space + " giocatori", kbStop);
								});
							} else if (message.text.toLowerCase() != "torna alla mappa")
								bot.sendMessage(message.chat.id, "Esplorazione mappa in corso!", kbBack);
						});
					} else {
						connection.query('SELECT COUNT(id) As cnt FROM map_lobby WHERE lobby_id IS NOT NULL', function (err, rows, fields) {
							if (err) throw err;

							var lobby_players = rows[0].cnt;

							bot.sendMessage(message.chat.id, "Benvenuto nelle <b>Mappe di Lootia</b> üèπ!\n\nAccedi alle lobby per affrontare altri combattenti su una mappa ogni volta differente, scala la classifica ed ottieni üèÜ!\n\n<b>" + lobby_players + "</b> ‚öîÔ∏è combattenti dentro una lobby\n<b>" + trophies + "</b> üèÜ in questa stagione (terminer√† tra " + diff + ")", kbMain).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al menu")
										return;

									if (answer.text.toLowerCase().indexOf("lobby") != -1) {
										var d = new Date();
										if ((d.getHours() < 9) || (d.getHours() > 22)) {
											bot.sendMessage(message.chat.id, "Puoi accedere ad una lobby solamente di giorno", kbBack2);
											return;
										}
										if (lobby_id != null) {
											bot.sendMessage(message.chat.id, "Sei gi√† in attesa in una lobby", kbStop);
											return;
										}

										connection.query('SELECT lobby_id, COUNT(lobby_id) As cnt FROM map_lobby WHERE lobby_id IS NOT NULL GROUP BY lobby_id HAVING cnt < ' + lobby_total_space + ' ORDER BY id', function (err, rows, fields) {
											if (err) throw err;

											var lobby_id;
											var text = "";

											if (Object.keys(rows).length == 0) {
												// nuova lobby

												var max_lobby = connection_sync.query('SELECT MAX(lobby_id) As mx FROM map_lobby WHERE lobby_id IS NOT NULL');

												if (Object.keys(max_lobby).length == 0)
													lobby_id = 1;
												else 
													lobby_id = max_lobby[0].mx+1;

												text = "Sei stato aggiunto ad una nuova lobby, attendi che altri giocatori si uniscano o interrompi la ricerca...";
											} else {
												lobby_id = rows[0].lobby_id;
												var members_cnt = rows[0].cnt;

												connection.query('SELECT chat_id FROM map_lobby M, player P WHERE M.player_id = P.id AND lobby_id = ' + lobby_id,  function (err, rows, fields) {
													if (err) throw err;

													for (var i = 0, len = Object.keys(rows).length; i < len; i++)
														bot.sendMessage(rows[i].chat_id, "Un giocatore si √® unito alla tua lobby! Ci sono " + (members_cnt+1) + " su " + lobby_total_space + " giocatori in attesa...");
												});

												var members = " insieme ad altri " + members_cnt + " partecipanti";
												var wait = ", attendi che altri giocatori si uniscano o interrompi la ricerca...";
												if (rows[0].cnt == 1)
													members = " insieme ad un altro partecipante";
												else if (rows[0].cnt == 0)
													members = "";
												if (rows[0].cnt == lobby_total_space)
													wait = ", a breve inizier√† lo scontro...";
												text = "Sei stato aggiunto alla lobby" + members + wait;
											}

											connection.query('UPDATE map_lobby SET lobby_id = ' + lobby_id + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});

											bot.sendMessage(message.chat.id, text, kbStop);
										});
									} else if (answer.text.toLowerCase().indexOf("vittorie") != -1) {
										connection.query('SELECT P.nickname, M.kills, M.insert_date FROM map_history M, player P WHERE M.player_id = P.id AND M.position = 1 ORDER BY M.id DESC LIMIT 25', function (err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length > 0) {
												var text = "<b>Ultime 25 vittorie:</b>";
												for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
													var kills = "uccisioni";
													if (rows[i].kills == 1)
														kills = "uccisione";
													text += "\n> " + rows[i].nickname + " con " + rows[i].kills + " " + kills + " il " + toDate("it", rows[i].insert_date);
												}
											} else
												text = "Ancora nessuna vittoria ottenuta questa stagione.";

											bot.sendMessage(message.chat.id, text, kbBack);
										});
									} else if (answer.text.toLowerCase().indexOf("come funziona") != -1) {
										bot.sendMessage(message.chat.id, "<b>Legenda simboli sulla mappa</b>\n\n" +
														"üìç Posizione del giocatore\n" +
														mapIdToSym(0) + " Vuoto\n" +
														mapIdToSym(1) + " Scrigno\n" +
														mapIdToSym(2) + " Scrigno Epico\n" +
														mapIdToSym(3) + " Trappola\n" +
														mapIdToSym(4) + " Farmacia\n" +
														mapIdToSym(5) + " Scambio\n" +
														mapIdToSym(6) + " Vendita\n" +
														mapIdToSym(7) + " Impulso\n" +
														mapIdToSym(8) + " Altro giocatore\n" +
														mapIdToSym(9) + " Rottame\n" +
														mapIdToSym(10) + " Mappa bruciata\n" +
														"\n<b>Combattimento</b>" +
														"\n> Il comando Attacco Caricato obbliga a saltare il primo turno successivo all'utilizzo, infligge pi√π danni rispetto all'attacco normale." +
														"\n> Il comando Difendi obbliga a saltare il primo turno successivo all'utilizzo, pu√≤ effettuare una parata parziale o totale del colpo subito." +
														"\n<b>Istruzioni base</b>" +
														"\n> Il personaggio inizier√† la partita con un equip base e zero monete." +
														"\n> Ogni " + lobby_restric_min + " minuti (" + (lobby_restric_min*2) + " appena avviata la partita) la mappa si restringe bruciando uno strato esterno fino alla mappa completa." +
														"\n> Quando un giocatore incontra un altro giocatore, ha inizio una battaglia dove lo sconfitto uscir√† dalla partita." +
														"\n> Se la trappola sconfigge il giocatore, quest'ultimo uscir√† dalla partita." + 
														"\n> Se il giocatore viene bruciato dal restringimento della mappa o ci entra di sua volont√†, uscir√† dalla partita." +
														"\n> La partita termina quando tutti i giocatori tranne uno sono stati sconfitti, oppure sono stati tutti bruciati.", kbBack);
									}
								}
							});
						});
					};
				}
			});
		});
	});
});

bot.onText(/esci dalla lobby/i, function (message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla mappa"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT lobby_id FROM map_lobby WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Accedi all'evento prima di uscire dalla lobby", kbBack);
				return;
			}

			var lobby_id = rows[0].lobby_id;

			if (lobby_id == null) {
				bot.sendMessage(message.chat.id, "Accedi ad una lobby prima di poterne uscire", kbBack);
				return;
			}

			connection.query('SELECT 1 FROM map_lobby_list WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					connection.query('UPDATE map_lobby SET lobby_id = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Sei uscito dalla lobby!", kbBack);

						connection.query('SELECT chat_id FROM map_lobby M, player P WHERE M.player_id = P.id AND lobby_id = ' + lobby_id,  function (err, rows, fields) {
							if (err) throw err;

							for (var i = 0, len = Object.keys(rows).length; i < len; i++)
								bot.sendMessage(rows[i].chat_id, "Un giocatore √® uscito dalla lobby!");
						});
					});
				} else {
					bot.sendMessage(message.chat.id, "Non puoi uscire dalla lobby finch√® sei in partita!", kbBack);
				}
			});
		});
	});
});

bot.onText(/attacca!/i, function (message) {
	connection.query('SELECT id, account_id, holiday, class, reborn, exp FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;
		var exp = rows[0].exp;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla mappa"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT lobby_id, enemy_id, my_turn, life, total_life, weapon_id, weapon2_id, weapon3_id, battle_heavy, battle_shield FROM map_lobby WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Accedi all'evento per entrare in combattimento", kbBack);
				return;
			}

			var lobby_id = rows[0].lobby_id;

			if (lobby_id == null) {
				bot.sendMessage(message.chat.id, "Accedi ad una lobby per entrare in combattimento", kbBack);
				return;
			}

			var enemy_id = rows[0].enemy_id;
			var my_turn = rows[0].my_turn;
			var enemy_player_id = enemy_id;

			if (enemy_id == null) {
				bot.sendMessage(message.chat.id, "Non sei in combattimento", kbBack);
				return;
			}

			if (my_turn == 0) {
				bot.sendMessage(message.chat.id, "Non √® il tuo turno!", kbBack);
				return;
			}

			var life = rows[0].life;
			var total_life = rows[0].total_life;
			var battle_heavy = rows[0].battle_heavy;
			var battle_shield = rows[0].battle_shield;

			var weapon_id = rows[0].weapon_id;
			var weapon2_id = rows[0].weapon2_id;
			var weapon3_id = rows[0].weapon3_id;

			var weapon = 0;
			var weapon2 = 0;
			var weapon3 = 0;
			var weapon_crit = 0;
			var weapon2_crit = 0;
			var weapon3_crit = 0;

			if (weapon_id != null) {
				var weapon_info = connection_sync.query("SELECT power, critical FROM item WHERE id = " + weapon_id);
				weapon = weapon_info[0].power;
				weapon_crit = weapon_info[0].critical;
			}
			if (weapon2_id != null) {
				var weapon2_info = connection_sync.query("SELECT power_armor, critical FROM item WHERE id = " + weapon2_id);
				weapon2 = weapon2_info[0].power_armor;
				weapon2_crit = weapon2_info[0].critical;
			}
			if (weapon3_id != null) {
				var weapon3_info = connection_sync.query("SELECT power_shield, critical FROM item WHERE id = " + weapon3_id);
				weapon3 = weapon3_info[0].power_shield;
				weapon3_crit = weapon3_info[0].critical;
			}

			var weapon_enchant = 0;
			var weapon2_enchant = 0;
			var weapon3_enchant = 0;
			var charm_id = null;
			var power_dmg = 0;
			var power_def = 0;
			var power_weapon = 0;
			var power_armor = 0;
			var power_shield = 0;
			var boost_mission = null;
			var boost_id = null;

			var kbFight = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["üó° Attacco"], ["‚öîÔ∏è Attacco caricato"], ["üõ° Difendi"], ["Torna al menu"]]
				}
			};

			if (battle_heavy) {
				kbFight = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["üó° Sferra attacco"], ["Torna al menu"]]
					}
				};
			}

			if (battle_shield) {
				kbFight = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["‚ú® Riprenditi"], ["Torna al menu"]]
					}
				};
			}

			var kbFightWait = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna alla mappa"], ["Torna al menu"]]
				}
			};

			var kbFightEnemy = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Attacca!"], ["Torna al menu"]]
				}
			};

			connection.query('SELECT P.chat_id, M.money, P.nickname, M.life, M.total_life, P.class, P.reborn, P.exp, M.battle_shield FROM player P, map_lobby M WHERE M.player_id = P.id AND P.id = ' + enemy_id, function (err, rows, fields) {
				if (err) throw err;

				var enemy_chat_id = rows[0].chat_id;
				var enemy_money = rows[0].money;
				var enemy_battle_shield = rows[0].battle_shield;

				var enemy_life = rows[0].life;
				var enemy_total_life = rows[0].total_life;
				var enemy_class_id = rows[0].class;
				var enemy_reborn = rows[0].reborn;
				var enemy_exp = rows[0].exp;

				var enemy_weapon_id = rows[0].weapon_id;
				var enemy_weapon2_id = rows[0].weapon2_id;
				var enemy_weapon3_id = rows[0].weapon3_id;

				var enemy_weapon = 0;
				var enemy_weapon2 = 0;
				var enemy_weapon3 = 0;
				var enemy_weapon_crit = 0;
				var enemy_weapon2_crit = 0;
				var enemy_weapon3_crit = 0;

				if (enemy_weapon_id != null) {
					var enemy_weapon_info = connection_sync.query("SELECT power, critical FROM item WHERE id = " + enemy_weapon_id);
					enemy_weapon = enemy_weapon_info[0].power;
					enemy_weapon_crit = enemy_weapon_info[0].critical;
				}
				if (enemy_weapon2_id != null) {
					var enemy_weapon2_info = connection_sync.query("SELECT power_armor, critical FROM item WHERE id = " + enemy_weapon2_id);
					enemy_weapon2 = enemy_weapon2_info[0].power_armor;
					enemy_weapon2_crit = enemy_weapon2_info[0].critical;
				}
				if (enemy_weapon3_id != null) {
					var enemy_weapon3_info = connection_sync.query("SELECT power_shield, critical FROM item WHERE id = " + enemy_weapon3_id);
					enemy_weapon3 = enemy_weapon3_info[0].power_shield;
					enemy_weapon3_crit = enemy_weapon3_info[0].critical;
				}

				var enemy_weapon_enchant = 0;
				var enemy_weapon2_enchant = 0;
				var enemy_weapon3_enchant = 0;
				var enemy_charm_id = null;
				var enemy_power_dmg = 0;
				var enemy_power_def = 0;
				var enemy_power_weapon = 0;
				var enemy_power_armor = 0;
				var enemy_power_shield = 0;
				var enemy_boost_mission = null;
				var enemy_boost_id = null;

				bot.sendMessage(message.chat.id, "Stai combattendo contro <b>" + rows[0].nickname + "</b>\n‚ù§Ô∏è " + formatNumber(rows[0].life) + " hp\nLa tua salute: " + formatNumber(life) + " hp\n\nCosa vuoi fare?", kbFight).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Torna al menu")
							return;

						var damage = getPlayerDamage(exp, weapon, weapon_enchant, charm_id, power_dmg, class_id, reborn);
						var defence = getPlayerDefence(weapon2, weapon3, weapon_enchant, weapon2_enchant, weapon3_enchant, exp, power_def);
						var crit = getPlayerCritics(player_id, weapon_crit, weapon2_crit, weapon3_crit, charm_id, power_weapon, power_armor, power_shield, class_id, reborn);
						var dragon = getPlayerDragon(player_id, class_id, reborn, charm_id);

						var full_damage = damage+dragon[0];
						var full_critical = crit[0]+dragon[2];
						var full_defence = defence+dragon[1];;

						var enemy_damage = getPlayerDamage(enemy_exp, enemy_weapon, enemy_weapon_enchant, enemy_charm_id, enemy_power_dmg, enemy_class_id, enemy_reborn);
						var enemy_defence = getPlayerDefence(enemy_weapon2, enemy_weapon3, enemy_weapon_enchant, enemy_weapon2_enchant, enemy_weapon3_enchant, enemy_exp, enemy_power_def);
						var enemy_crit = getPlayerCritics(enemy_player_id, enemy_weapon_crit, enemy_weapon2_crit, enemy_weapon3_crit, enemy_charm_id, enemy_power_weapon, enemy_power_armor, enemy_power_shield, enemy_class_id, enemy_reborn);
						var enemy_dragon = getPlayerDragon(enemy_player_id, enemy_class_id, enemy_reborn, enemy_charm_id);

						var enemy_full_damage = enemy_damage+enemy_dragon[0];
						var enemy_full_critical = enemy_crit[0]+enemy_dragon[2];
						var enemy_full_defence = enemy_defence+enemy_dragon[1];;

						full_damage = full_damage-enemy_full_defence;
						full_damage = Math.round(full_damage);

						if (full_damage < 0)
							full_damage = 0;

						var query = "";
						var enemy_query = "";

						var d = new Date();
						d.setMinutes(d.getMinutes() + 10);
						var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

						query = "my_turn = 0, battle_timeout = NULL, battle_shield = 0";
						enemy_query = "my_turn = 1, battle_timeout = '" + long_date + "', battle_shield = 0";

						var text = "";
						var enemy_text = "";
						var dmg = 0;
						if (answer.text.toLowerCase().indexOf("riprenditi") != -1) {
							if (battle_shield != 2)
								return;
							text += "Ti riprendi barcollando dall'ultima parata...";
							enemy_text += "L'avversario barcolla riprendendosi dall'ultimo attacco...";
							query += ", battle_shield = 0";
						} else if (answer.text.toLowerCase().indexOf("caricato") != -1) {
							if (battle_heavy == 1) {
								bot.sendMessage(message.chat.id, "Non puoi caricare un'altro attacco!", kbFight);
								return;
							}
							if (battle_shield == 2) {
								bot.sendMessage(message.chat.id, "Devi riprenderti prima di sferrare un altro attacco!", kbFight);
								return;
							}
							text += "Carichi l'attacco che verr√† sferrato al turno successivo!";
							enemy_text += "L'avversario inizia a caricare l'attacco!";
							query += ", battle_heavy = 1";
						} else if (answer.text.toLowerCase().indexOf("attacco") != -1) {
							if (battle_shield == 2) {
								bot.sendMessage(message.chat.id, "Devi riprenderti prima di sferrare un altro attacco!", kbFight);
								return;
							}
							var heavyText = "";
							if (battle_heavy == 1) {
								full_damage = full_damage*2;
								heavyText = " con attacco caricato";
								query += ", battle_heavy = 0";
							}
							var fullProtected = 0;
							var partialProtected = 0;
							var shieldText = "";
							if (enemy_battle_shield == 1) {
								var defenceRand = Math.random()*100;
								if (30 >= defenceRand) {
									text += "L'avversario si protegge con lo scudo!";
									enemy_text += "Riesci a proteggerti completamente dall'attacco del tuo avversario!";
									fullProtected = 1;
								} else
									partialProtected = 1;
								enemy_query += ", battle_shield = 2";
							}
							if (fullProtected == 0) {
								var randCrit = Math.random()*100;
								var critText = "";
								if (full_critical >= randCrit) {
									full_damage = full_damage*2;
									critText = " critici";
								}

								var randDodge = Math.random()*100;
								var probDodge = 10;
								if (probDodge >= randDodge) {
									text += "L'avversario riesce a schivare il tuo attacco!";
									enemy_text += "Riesci a schivare l'attacco del tuo avversario!";
								} else {
									dmg = full_damage;
									if (partialProtected == 1) {
										dmg = Math.round(dmg/2);
										shieldText = " ridotto grazie allo scudo";
									}
									text += "Attacchi l'avversario e gli infliggi <b>" + formatNumber(full_damage) + "</b> danni" + critText + heavyText + shieldText + "!";
									enemy_text += "Vieni colpito dall'avversario subendo <b>" + formatNumber(full_damage) + "</b> danni" + critText + heavyText + shieldText + "!";
								}
							}
						} else if (answer.text.toLowerCase().indexOf("difendi") != -1) {
							if (battle_heavy == 1) {
								bot.sendMessage(message.chat.id, "Non puoi difenderti se stai caricando un attacco!", kbFight);
								return;
							}
							if (battle_shield == 2) {
								bot.sendMessage(message.chat.id, "Devi riprenderti prima di difenderti nuovamente!", kbFight);
								return;
							}

							text += "Ti metti in posizione difensiva in attesa dell'avversario!";
							enemy_text += "L'avversario si mette in posizione difensiva con lo scudo pronto!";
							query += ", battle_shield = 1";
						} else
							return;

						if (enemy_life - dmg <= 0) {
							query += ", money = money+" + enemy_money + ", match_kills = match_kills+1, global_kills = global_kills+1";
							enemy_query += ", life = 0, money = money-" + enemy_money;
							text += "\nIn modo da sconfiggerlo definitivamente con un colpo mortale!\nFrugando nella sua sacca ottieni <b>" + formatNumber(enemy_money) + "</b> ¬ß!";
							enemy_text += "\nVieni sconfitto definitivamente con un colpo mortale!";
							mapPlayerKilled(lobby_id, enemy_id, 2);
						} else
							enemy_query += ", life = life-" + dmg;

						connection.query('UPDATE map_lobby SET ' + query + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						connection.query('UPDATE map_lobby SET ' + enemy_query + ' WHERE player_id = ' + enemy_id, function (err, rows, fields) {
							if (err) throw err;
						});

						bot.sendMessage(message.chat.id, text, kbFightWait);
						bot.sendMessage(enemy_chat_id, enemy_text, kbFightEnemy);
					}
				});
			});
		});
	});
});

bot.onText(/^vai in battaglia$|accedi all'edificio|^torna alla mappa|aggiorna mappa|^mappa$/i, function (message) {	
	connection.query('SELECT id, holiday, account_id, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla mappa"], ["Torna al menu"]]
			}
		};

		var kbBackBuild = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Accedi all'edificio"], ["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["No"], ["Torna al menu"]]
			}
		};

		var kbBackEnemy = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Attacca!"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT * FROM map_lobby WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0)
				return;

			var lobby_id = rows[0].lobby_id;

			if (lobby_id == null)
				return;

			var posX = rows[0].posX;
			var posY = rows[0].posY;

			if ((posX == null) || (posY == null)) {
				bot.sendMessage(message.chat.id, "La posizione di partenza non √® stata caricata correttamente", kbBack);
				return;
			}

			var life = rows[0].life;
			var total_life = rows[0].total_life;

			if ((life == null) || (total_life == null)) {
				bot.sendMessage(message.chat.id, "La salute di partenza non √® stata caricata correttamente", kbBack);
				return;
			}

			var weapon_id = rows[0].weapon_id;
			var weapon2_id = rows[0].weapon2_id;
			var weapon3_id = rows[0].weapon3_id;
			var money = rows[0].money;
			var scrap = rows[0].scrap;
			var last_obj = rows[0].last_obj;
			var last_obj_val = rows[0].last_obj_val;
			var pulsePosX = rows[0].pulsePosX;
			var pulsePosY = rows[0].pulsePosY;
			var enemy_id = rows[0].enemy_id;
			var killed = rows[0].killed;

			connection.query('SELECT map_json, next_restrict_time FROM map_lobby_list WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "La battaglia non √® ancora iniziata! Torna nella lobby e attendi altri giocatori", kbBack);
					return;
				}

				if (enemy_id != null) {
					bot.sendMessage(message.chat.id, "Battaglia in corso!", kbBackEnemy);
					return;
				}

				var next_restrict_time = rows[0].next_restrict_time;
				var mapMatrix = JSON.parse(rows[0].map_json);
				var checkEnemy = connection_sync.query('SELECT player_id, nickname, chat_id FROM map_lobby M, player P WHERE M.player_id = P.id AND killed = 0 AND enemy_id IS NULL AND player_id != ' + player_id + ' AND lobby_id = ' + lobby_id);
				var map = printMap(mapMatrix, posX, posY, pulsePosX, pulsePosY, killed, checkEnemy);

				connection.query('SELECT COUNT(id) As cnt FROM map_lobby WHERE killed = 0 AND lobby_id = ' + lobby_id, function (err, rows, fields) {
					if (err) throw err;

					if (last_obj == 4) {
						var perc = (total_life-life) / total_life*100;
						var price = perc*1000;
						bot.sendMessage(message.chat.id, "Puoi recuperare tutta la salute al costo di <b>" + formatNumber(price) + "</b> ¬ß, al momento possiedi " + formatNumber(money) + " ¬ß, procedi?", kbYesNo).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text == "Torna al menu")
									return;

								if (answer.text.toLowerCase().indexOf("si") != -1) {
									if (money < price) {
										bot.sendMessage(message.chat.id, "Non hai abbastanza monete nella sacca!", kbBack);
										return;
									}
									connection.query('UPDATE map_lobby SET life = total_life, money = money-' + price + ', last_obj = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai recuperato tutta la salute!", kbBack);
									});
								} else {
									connection.query('UPDATE map_lobby SET last_obj = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai rinunciato a recuperare la salute", kbBack);
									});
								}
							};
						});
						return;
					} else if (last_obj == 5) {
						var split = last_obj_val.split(":");
						var item_id = split[0];
						var price = split[1];
						connection.query('SELECT name, power, power_armor, power_shield FROM item WHERE id = ' + item_id, function (err, rows, fields) {
							if (err) throw err;

							var item_name = rows[0].name;

							var plur = "i";
							if (price == 1)
								plur = "e";

							var item_type = 0;
							var item_power = 0;
							if (rows[0].power > 0) {
								item_type = 1;
								item_power = rows[0].power;
							} else if (rows[0].power_armor < 0) {
								item_type = 2;
								item_power = rows[0].power_armor;
							} else if (rows[0].power_shield < 0) {
								item_type = 3;
								item_power = rows[0].power_shield;
							}

							bot.sendMessage(message.chat.id, "Puoi scambiare " + price + " üî© Rottam" + plur + " per <b>" + item_name + "</b>, al momento ne possiedi " + scrap + ", procedi?", kbYesNo).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al menu")
										return;

									if (answer.text.toLowerCase().indexOf("si") != -1) {
										if (scrap < price) {
											bot.sendMessage(message.chat.id, "Non hai abbastanza rottami nella sacca!", kbBack);
											return;
										}

										var text = "";

										// modifica anche sotto
										var item_query = "";
										if (item_id != 0) {
											if (item_type == 1) { 
												if (weapon_id != null) {
													var weapon = connection_sync.query("SELECT power FROM item WHERE id = " + weapon_id);
													if (item_power > weapon[0].power) {
														text += "\nArma sotituita!";
														item_query = ", weapon_id = '" + item_id + "'";
													}
												} else {
													text += "\nArma equipaggiata!";
													item_query = ", weapon_id = '" + item_id + "'";
												}
											} else if (item_type == 2) {
												if (weapon2_id != null) {
													var weapon2 = connection_sync.query("SELECT power_armor FROM item WHERE id = " + weapon2_id);
													if (item_power < weapon2[0].power_armor) {
														text += "\nArmatura sotituita!";
														item_query = ", weapon2_id = '" + item_id + "'";
													}
												} else {
													text += "\nArmatura equipaggiata!";
													item_query = ", weapon2_id = '" + item_id + "'";
												}
											} else if (item_type == 3) {
												if (weapon3_id != null) {
													var weapon3 = connection_sync.query("SELECT power_shield FROM item WHERE id = " + weapon3_id);
													if (item_power < weapon3[0].power_shield) {
														text += "\nScudo sotituito!";
														item_query = ", weapon3_id = '" + item_id + "'";
													}
												} else {
													text += "\nScudo equipaggiato!";
													item_query = ", weapon3_id = '" + item_id + "'";
												}
											}
										}

										connection.query('UPDATE map_lobby SET scrap = scrap-' + price + ', last_obj = NULL, last_obj_val = NULL' + item_query + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai accettato lo scambio!" + text, kbBack);
										});
									} else {
										connection.query('UPDATE map_lobby SET last_obj = NULL, last_obj_val = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai rinunciato allo scambio", kbBack);
										});
									}
								}
							});
						});
						return;
					} else if (last_obj == 6) {
						var split = last_obj_val.split(":");
						var item_id = split[0];
						var price = split[1];
						connection.query('SELECT name, power, power_armor, power_shield FROM item WHERE id = ' + item_id, function (err, rows, fields) {
							if (err) throw err;

							var item_name = rows[0].name;

							var plur = "i";
							if (price == 1)
								plur = "e";

							var item_type = 0;
							var item_power = 0;
							if (rows[0].power > 0) {
								item_type = 1;
								item_power = rows[0].power;
							} else if (rows[0].power_armor < 0) {
								item_type = 2;
								item_power = rows[0].power_armor;
							} else if (rows[0].power_shield < 0) {
								item_type = 3;
								item_power = rows[0].power_shield;
							}

							bot.sendMessage(message.chat.id, "Puoi acquistare <b>" + item_name + "</b> per " + formatNumber(price) + " ¬ß, al momento possiedi " + formatNumber(money) + " ¬ß, procedi?", kbYesNo).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al menu")
										return;

									if (answer.text.toLowerCase().indexOf("si") != -1) {
										if (money < price) {
											bot.sendMessage(message.chat.id, "Non hai abbastanza monete nella sacca!", kbBack);
											return;
										}

										var text = "";

										// modifica anche sotto
										var item_query = "";
										if (item_id != 0) {
											if (item_type == 1) { 
												if (weapon_id != null) {
													var weapon = connection_sync.query("SELECT power FROM item WHERE id = " + weapon_id);
													if (item_power > weapon[0].power) {
														text += "\nArma sotituita!";
														item_query = ", weapon_id = '" + item_id + "'";
													}
												} else {
													text += "\nArma equipaggiata!";
													item_query = ", weapon_id = '" + item_id + "'";
												}
											} else if (item_type == 2) {
												if (weapon2_id != null) {
													var weapon2 = connection_sync.query("SELECT power_armor FROM item WHERE id = " + weapon2_id);
													if (item_power < weapon2[0].power_armor) {
														text += "\nArmatura sotituita!";
														item_query = ", weapon2_id = '" + item_id + "'";
													}
												} else {
													text += "\nArmatura equipaggiata!";
													item_query = ", weapon2_id = '" + item_id + "'";
												}
											} else if (item_type == 3) {
												if (weapon3_id != null) {
													var weapon3 = connection_sync.query("SELECT power_shield FROM item WHERE id = " + weapon3_id);
													if (item_power < weapon3[0].power_shield) {
														text += "\nScudo sotituito!";
														item_query = ", weapon3_id = '" + item_id + "'";
													}
												} else {
													text += "\nScudo equipaggiato!";
													item_query = ", weapon3_id = '" + item_id + "'";
												}
											}
										}

										connection.query('UPDATE map_lobby SET money = money-' + price + ', last_obj = NULL, last_obj_val = NULL' + item_query + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai completato l'acquisto!" + text, kbBack);
										});
									} else {
										connection.query('UPDATE map_lobby SET last_obj = NULL, last_obj_val = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai rinunciato all'acquisto", kbBack);
										});
									}
								}
							});
						});
						return;
					}

					var total_players_alive = rows[0].cnt;
					var iKeys = [];
					var btnSx = 0;
					var btnDx = 0;
					var btnUp = 0;
					var btnDw = 0;
					//controllo direzioni possibili
					if (isUndefined(mapMatrix, posX-1, posY) == 0)
						btnSx = 1;
					if (isUndefined(mapMatrix, posX, posY-1) == 0)
						btnUp = 1;
					if (isUndefined(mapMatrix, posX+1, posY) == 0)
						btnDx = 1;
					if (isUndefined(mapMatrix, posX, posY+1) == 0)
						btnDw = 1;

					iKeys.push(["üó∫ Aggiorna mappa"]);

					if (btnUp)
						iKeys.push(["‚¨ÜÔ∏è"]);
					if ((btnDx == 1) && (btnSx == 1))
						iKeys.push(["‚¨ÖÔ∏è", "‚û°Ô∏è"]);
					else {
						if (btnDx)
							iKeys.push(["‚û°Ô∏è"]);
						if (btnSx)
							iKeys.push(["‚¨ÖÔ∏è"]);
					}
					if (btnDw)
						iKeys.push(["‚¨áÔ∏è"]);

					iKeys.push(["üõ† Sacca"]);
					iKeys.push(["Torna al menu"]);

					var kbSel = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					var wait_text = "";
					var time = connection_sync.query("SELECT wait_time FROM map_lobby WHERE player_id = " + player_id);
					if (time[0].wait_time != null) {
						var now = new Date();
						var wait_time = new Date(time[0].wait_time);
						var min = Math.round(((wait_time - now) / 1000) / 60);
						var plur = "i";
						if (min <= 1)
							plur = "o";
						if (min < 1)
							min = "meno di 1";
						wait_text = "\nüïê " + min + " minut" + plur;
					}

					var now = new Date();
					var next_restrict = new Date(next_restrict_time);
					var min = Math.round(((next_restrict - now) / 1000) / 60);
					var plur = "i";
					if (min <= 1)
						plur = "o";
					if (min < 1)
						min = "meno di 1";
					wait_text = "\n‚ò†Ô∏è " + min + " minut" + plur;

					if (killed == 1) {
						bot.sendMessage(message.chat.id, "Sei stato sconfitto.\nCi sono ancora " + total_players_alive + " sopravvissuti\n" + map, kbBack);
						return;
					}

					bot.sendMessage(message.chat.id, "üë• " + total_players_alive + " su " + lobby_total_space + " sopravvissuti\n‚ù§Ô∏è " + formatNumber(life) + wait_text + "\n" + map, kbSel).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if ((answer.text == "Torna al menu") || (answer.text.toLowerCase().indexOf("aggiorna") != -1))
								return;

							if (answer.text.toLowerCase().indexOf("sacca") != -1) {
								var weapon_desc = "üó° ";
								var weapon2_desc = "ü•ã ";
								var weapon3_desc = "üõ° ";
								var money_desc = "üí∞ " + formatNumber(money);
								if (weapon_id != null) {
									var weapon = connection_sync.query("SELECT name, power FROM item WHERE id = " + weapon_id);
									weapon_desc += weapon[0].name + " (" + weapon[0].power + ")";
								} else
									weapon_desc += "-";
								if (weapon2_id != null) {
									var weapon2 = connection_sync.query("SELECT name, power_armor FROM item WHERE id = " + weapon2_id);
									weapon2_desc += weapon2[0].name + " (" + weapon2[0].power_armor + ")";
								} else
									weapon2_desc += "-";
								if (weapon3_id != null) {
									var weapon3 = connection_sync.query("SELECT name, power_shield FROM item WHERE id = " + weapon3_id);
									weapon3_desc += weapon3[0].name + " (" + weapon3[0].power_shield + ")";
								} else
									weapon3_desc += "-";

								bot.sendMessage(message.chat.id, "Equipaggiamento attuale:\n" + weapon_desc + "\n" + weapon2_desc + "\n" + weapon3_desc + "\n" + money_desc, kbBack);
								return;
							}

							var time = connection_sync.query("SELECT wait_time FROM map_lobby WHERE player_id = " + player_id);
							if (time[0].wait_time != null) {
								var now = new Date();
								var wait_time = new Date(time[0].wait_time);
								var min = Math.round(((wait_time - now) / 1000) / 60);
								var plur = "i";
								if (min <= 1)
									plur = "o";
								if (min < 1)
									min = "meno di 1";
								bot.sendMessage(message.chat.id, "Ti stai riposando!\nPrima di procedere dovrai attendere ancora " + min + " minut" + plur + "!", kbBack);
								return;
							}

							if (answer.text == "‚¨ÜÔ∏è") {
								if (btnUp == 0) {
									bot.sendMessage(message.chat.id, "Non puoi spostarti in questa posizione", kbBack);
									return;
								}
								posY--;
							} else if (answer.text == "‚¨áÔ∏è") {
								if (btnDw == 0) {
									bot.sendMessage(message.chat.id, "Non puoi spostarti in questa posizione", kbBack);
									return;
								}
								posY++;
							} else if (answer.text == "‚û°Ô∏è") {
								if (btnDx == 0) {
									bot.sendMessage(message.chat.id, "Non puoi spostarti in questa posizione", kbBack);
									return;
								}
								posX++;
							} else if (answer.text == "‚¨ÖÔ∏è") {
								if (btnSx == 0) {
									bot.sendMessage(message.chat.id, "Non puoi spostarti in questa posizione", kbBack);
									return;
								}
								posX--;
							}

							// resetta impulso
							connection.query('UPDATE map_lobby SET pulsePosX = NULL, pulsePosY = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
							});

							connection.query('SELECT map_json FROM map_lobby_list WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
								if (err) throw err;

								// ricarica mappa per eventuali modifiche
								var mapMatrix = JSON.parse(rows[0].map_json);

								var objId = mapMatrix[posY][posX];
								var text = "";
								var last_obj_query = "";
								var scrap_query = "";
								var pulse_query = "";
								var enemy_query = "";
								var isBuild = 0;
								var isEnemy = 0;
								var toClear = 0;
								var enemy_id = 0;
								var enemy_chat_id = 0;

								var life_lost = 0;
								var item_id = 0;
								var money = 0;

								var checkEnemy = connection_sync.query('SELECT player_id, nickname, chat_id FROM map_lobby M, player P WHERE M.player_id = P.id AND posX = ' + posX + ' AND posY = ' + posY + ' AND killed = 0 AND enemy_id IS NULL AND player_id != ' + player_id + ' AND lobby_id = ' + lobby_id);
								if (Object.keys(checkEnemy).length > 0) {
									objId = 8; // salta gli item dopo
									isEnemy = 1;
									text += "Hai incontrato un altro giocatore!\nScambi uno sguardo di sfida a <b>" + checkEnemy[0].nickname + "</b> e ti prepari al duello!";
									enemy_id = checkEnemy[0].player_id;
									enemy_chat_id = checkEnemy[0].chat_id;
									enemy_query = ", enemy_id = " + enemy_id + ", my_turn = 1";
								}
								
								console.log("objId", message.from.username, objId);

								if (objId == 0)				// vuoto
									text = "Qui non c'√® nulla! Prosegui la tua esplorazione...";
								else if ((objId == 8) && (isEnemy == 0))	// postazione di partenza
									text = "Qui non c'√® nulla! Anche se noti delle impronte segnate nel fango, prosegui la tua esplorazione...";
								else if (objId == 1) {		// scrigno
									var rand = Math.random()*100;
									var item_type = 0;
									var item_power = 0;
									text = "Hai trovato uno üí∞ <b>Scrigno</b> con al suo interno:\n";
									if (rand < 70) {
										money = Math.round(getRandomArbitrary(1000, 2000));
										text += "> " + formatNumber(money) + " ¬ß";
									} else {
										var randRarity = Math.random()*100;
										var rarity = "";
										if (randRarity < 10)
											rarity = "L";
										else if (randRarity < 30)
											rarity = "UR";
										else if (randRarity < 60)
											rarity = "R";
										else
											rarity = "NC";
										var item = connection_sync.query("SELECT id, name, rarity, power, power_armor, power_shield FROM item WHERE (power > 1 OR power_armor < -1 OR power_shield < -1) AND rarity = '" + rarity + "' ORDER BY RAND()");
										if (item[0].power > 0) {
											item_type = 1;
											item_power = item[0].power;
										} else if (item[0].power_armor < 0) {
											item_type = 2;
											item_power = item[0].power_armor;
										} else if (item[0].power_shield < 0) {
											item_type = 3;
											item_power = item[0].power_shield;
										}
										item_id = item[0].id;
										text += "> " + item[0].name + " (" + item[0].rarity + ")";
									}
									toClear = 1;
								} else if (objId == 2) {		// scrigno epico
									var rand = Math.random()*100;
									text = "Hai trovato uno üí∞ <b>Scrigno Epico</b> con al suo interno:\n";
									if (rand < 70) {
										money = Math.round(getRandomArbitrary(2000, 3000));
										text += "> " + formatNumber(money) + " ¬ß";
									} else {
										var randRarity = Math.random()*100;
										var rarity = "";
										if (randRarity < 20)
											rarity = "UE";
										else
											rarity = "E";
										var item = connection_sync.query("SELECT id, name, rarity, power, power_armor, power_shield FROM item WHERE (power > 1 OR power_armor < -1 OR power_shield < -1) AND rarity = '" + rarity + "' ORDER BY RAND()");
										if (item[0].power > 0) {
											item_type = 1;
											item_power = item[0].power;
										} else if (item[0].power_armor < 0) {
											item_type = 2;
											item_power = item[0].power_armor;
										} else if (item[0].power_shield < 0) {
											item_type = 3;
											item_power = item[0].power_shield;
										}
										item_id = item[0].id;
										text += "> " + item[0].name + " (" + item[0].rarity + ")";
									}
									toClear = 1;
								} else if (objId == 3) {		// trappola
									var perc = Math.round(getRandomArbitrary(1, 5));
									life_lost = total_life*(perc/100);

									if (life <= life_lost) {
										mapPlayerKilled(lobby_id, player_id, 1);
										text = "Cadi in una ‚ö°Ô∏è Trappola e perdi <b>" + life_lost + "</b> hp, vieni ucciso e perdi la partita!\n";
									} else
										text = "Cadi in una ‚ö°Ô∏è Trappola e perdi <b>" + life_lost + "</b> hp!\n";
								} else if (objId == 4) {		// farmacia
									last_obj_query = ", last_obj = 4";
									isBuild = 1;
									text = "Raggiungi una üíä Farmacia, qui puoi recuperare la salute ad un costo onesto.\n";
								} else if (objId == 5) {		// scambio
									last_obj_query = ", last_obj = 5";
									var randRarity = Math.random()*100;
									var rarity = "";
									var price = 0;
									if (randRarity < 20) {
										rarity = "L";
										price = 3;
									} else if (randRarity < 50) {
										rarity = "UR";
										price = 2;
									} else {
										rarity = "R";
										price = 1;
									}
									var item = connection_sync.query("SELECT id FROM item WHERE (power > 1 OR power_armor < -1 OR power_shield < -1) AND rarity = '" + rarity + "' ORDER BY RAND()");
									last_obj_query += ", last_obj_val = '" + item[0].id + ":" + price + "'";
									isBuild = 1;
									text = "Raggiungi un üîÅ Centro Scambi, qui puoi scambiare oggetti che ti potranno essere utili.\n";
								} else if (objId == 6) {		// vendita
									last_obj_query = ", last_obj = 6";
									var randRarity = Math.random()*100;
									var rarity = "";
									var price = 0;
									if (randRarity < 20) {
										rarity = "L";
										price = 3000;
									} else if (randRarity < 50) {
										rarity = "UR";
										price = 2000;
									} else {
										rarity = "R";
										price = 1000;
									}
									var item = connection_sync.query("SELECT id FROM item WHERE (power > 1 OR power_armor < -1 OR power_shield < -1) AND rarity = '" + rarity + "' ORDER BY RAND()");
									last_obj_query += ", last_obj_val = '" + item[0].id + ":" + price + "'";
									isBuild = 1;
									text = "Raggiungi un Emporio, qui puoi acquistare oggetti che ti potranno essere utili.\n";
								} else if (objId == 7) {		// impulso
									pulse_query = ", pulsePosX = " + posX + ", pulsePosY = " + posY;
									text = "Calpesti uno strano pulsante che emana un'onda di energia: un ‚ú® <b>Impulso</b>! L'area circostante si vede pi√π chiaramente, ma l'effetto pu√≤ durare per poco tempo.";
									toClear = 1;
								} else if (objId == 9) {		// rottame
									scrap_query = ", scrap = scrap+1";
									text = "Hai trovato uno <b>Strano Congegno</b> con al suo interno un üî© <b>Rottame</b>, utile per gli scambi!";
									toClear = 1;
								} else if (objId == 10) {		// zona bruciata
									text = "Decidi di gettarti verso la tua sconfitta nell'area bruciata...";
									mapPlayerKilled(lobby_id, player_id, 3);
								}

								// svuota la risorsa
								if (toClear) {
									connection.query('SELECT map_json FROM map_lobby_list WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
										if (err) throw err;
										var updatedMap = updateMap(rows[0].map_json, posY, posX, 0);
										connection.query('UPDATE map_lobby_list SET map_json = "' + updatedMap + '" WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
											if (err) throw err;
										});
									});
								}

								// modifica anche sopra
								var item_query = "";
								if (item_id != 0) {
									if (item_type == 1) { 
										if (weapon_id != null) {
											var weapon = connection_sync.query("SELECT power FROM item WHERE id = " + weapon_id);
											if (item_power > weapon[0].power) {
												text += "\nArma sotituita!";
												item_query = ", weapon_id = '" + item_id + "'";
											}
										} else {
											text += "\nArma equipaggiata!";
											item_query = ", weapon_id = '" + item_id + "'";
										}
									} else if (item_type == 2) {
										if (weapon2_id != null) {
											var weapon2 = connection_sync.query("SELECT power_armor FROM item WHERE id = " + weapon2_id);
											if (item_power < weapon2[0].power_armor) {
												text += "\nArmatura sotituita!";
												item_query = ", weapon2_id = '" + item_id + "'";
											}
										} else {
											text += "\nArmatura equipaggiata!";
											item_query = ", weapon2_id = '" + item_id + "'";
										}
									} else if (item_type == 3) {
										if (weapon3_id != null) {
											var weapon3 = connection_sync.query("SELECT power_shield FROM item WHERE id = " + weapon3_id);
											if (item_power < weapon3[0].power_shield) {
												text += "\nScudo sotituito!";
												item_query = ", weapon3_id = '" + item_id + "'";
											}
										} else {
											text += "\nScudo equipaggiato!";
											item_query = ", weapon3_id = '" + item_id + "'";
										}
									}
								}

								var d = new Date();
								d.setMinutes(d.getMinutes() + 5);
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

								var d = new Date();
								d.setMinutes(d.getMinutes() + 60);
								var long_date_battle = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

								connection.query('UPDATE map_lobby SET wait_time = "' + long_date + '", battle_timeout_limit = "' + long_date_battle + '", posX = ' + posX + ', posY = ' + posY + item_query + last_obj_query + scrap_query + enemy_query + pulse_query + ', life = life-' + life_lost + ', money = money+' + money + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (isBuild)
										bot.sendMessage(message.chat.id, text, kbBackBuild);
									else if (isEnemy) {
										connection.query('UPDATE map_lobby SET enemy_id = ' + player_id + ' WHERE player_id = ' + enemy_id, function (err, rows, fields) {
											if (err) throw err;

											bot.sendMessage(message.chat.id, text, kbBackEnemy);
											bot.sendMessage(enemy_chat_id, "Sei stato sfidato a duello da un altro giocatore!\nOsservi <b>" + message.from.username + "</b> ricambiando lo sguardo di sfida!", html);
										});
									} else
										bot.sendMessage(message.chat.id, text, kbBack);
								});
							});
						};
					});
				});
			});
		});
	});
});

bot.onText(/dungeon|^dg$/i, function (message) {

	if (message.text.toLowerCase().indexOf("velocemente") != -1)
		return;

	if (message.text.toLowerCase().indexOf("stato dungeon") != -1)
		return;

	if (message.text.length > 25)
		return;

	var max_rooms_neg = 25;		// Diventa negativo dopo

	var dBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al dungeon"], ["Torna al menu"]]
		}
	};

	var dBack_html = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al dungeon"], ["Torna al menu"]]
		}
	};

	var dYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Si"], ["Torna al dungeon"]]
		}
	};

	connection.query('SELECT account_id, id, life, total_life, ability, money, rank, reborn, exp, class, dungeon_skip, dungeon_count, boost_id, boost_mission, gender, holiday, dungeon_time FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var player_life = rows[0].life;
		var player_total_life = rows[0].total_life;
		var player_ability = rows[0].ability;
		var player_money = rows[0].money;
		var player_rank_b = rows[0].rank;
		var player_rank = player_rank_b;
		if (player_rank > 500)
			player_rank = 500;
		var player_reborn = rows[0].reborn;
		var player_level = Math.floor(rows[0].exp / 10);
		var player_class_id = rows[0].class;
		var player_dungeon_skip = rows[0].dungeon_skip;
		var dungeon_count = rows[0].dungeon_count;
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;

		var gender_text = "a";
		var gender_text_g = "esploratrice";
		if (rows[0].gender == "M") {
			gender_text = "o";
			gender_text_g = "esploratore";
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if ((player_reborn == 1) && (player_level < 50)) {
			bot.sendMessage(message.chat.id, "Per accedere ai dungeon devi aver raggiunto almeno il livello 50, dopo di che potrai esplorare labirinti sempre differenti, combattere creature e risolvere misteriosi enigmi! Ma solo quando avrai abbastanza esperienza per farlo. Forza!", back);
			return;
		}

		if (player_id != 1) {
			if ((player_class_id == 1) && (player_reborn >= 3)) {
				bot.sendMessage(message.chat.id, "Raggiunta questa Rinascita la Vocazione √® obbligatoria, la puoi scegliere nella sezione Giocatore > Vocazione", back);
				return;
			}
		}

		if (player_life <= 0) {
			bot.sendMessage(message.chat.id, "Non puoi entrare nel dungeon da esausto", revive);
			return;
		}
		var dungeon_time = rows[0].dungeon_time;

		var nightText = "";
		var nightMode = 0;
		var now = new Date();
		if (now.getHours() <= 6) {
			nightText = "*, attento, di notte i dungeon nascondono pi√π insidie!*";
			nightMode = 1;
		}

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 3', function (err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0)
				abBonus = parseInt(rows[0].ability_level) * rows[0].val;

			connection.query('SELECT * FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					connection.query('SELECT name, rooms, min_rank, mob_power_multiplier FROM dungeon_list WHERE main = 1 ORDER BY min_rank', function (err, rows, fields) {
						if (err) throw err;

						var iKeys = [];
						iKeys.push(["Il mio Rango"]);
						var first = 0;
						var last = Object.keys(rows).length;
						var mob_power_multiplier = rows[0].mob_power_multiplier;

						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].min_rank > player_rank_b) {
								iKeys.push([rows[i].name + " (stanze: " + rows[i].rooms + ", punti min: " + rows[i].min_rank + ")"]);
								if (first == 0)
									first = i+1;
							}
						}

						if (first > 1)
							iKeys.splice(1, 0, [rows[first-2].name + " (stanze: " + rows[first-2].rooms + ", punti min: " + rows[first-2].min_rank + ")"]);
						else if (first == 0)
							iKeys.splice(1, 0, [rows[last-1].name + " (stanze: " + rows[last-1].rooms + ", punti min: " + rows[last-1].min_rank + ")"]);

						iKeys.push(["Azzera il Rango ‚ö†Ô∏è"]);
						iKeys.push(["Torna al menu"]);

						var dSelect = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						var rank = getRankName(player_rank_b, 0);

						bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella *Sala di Ritrovo degli Esploratori*\n\nQui puoi accedere ad un dungeon gi√† esistente, crearlo ed esplorarlo fino alla fine.\nIl tuo rango attuale √® _" + rank + "_ (" + player_rank_b + ")\nSeleziona il dungeon da esplorare" + nightText + "\n\nPuoi usare anche i comandi 'su', 'destra', 'sinistra' o ancora 'sx' e 'dx' per muoverti nel dungeon.", dSelect).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {

								if (answer.text == "Torna al menu")
									return;

								if (answer.text == "Il mio Rango") {
									var next_rank = 0;
									next_rank = parseInt(getRankName(player_rank_b, 1));
									bot.sendMessage(message.chat.id, "Rango Attuale: *" + formatNumber(rank) + "* (" + player_rank_b + ")\nAumento Rango a " + formatNumber(next_rank) + " punti\nHai completato " + formatNumber(dungeon_count) + " dungeon fin ora!", dBack);

									setTimeout(function () {
										bot.sendSticker(message.chat.id, getRankFileId(player_rank_b));
									}, 500);
									return;
								}

								if (answer.text.indexOf("Azzera il Rango") != -1) {
									if ((player_reborn < 2) || (player_level > 5)) {
										bot.sendMessage(message.chat.id, "Per resettare i tuoi punti dungeon, devi aver raggiunto la rinascita 2 ed essere massimo livello 5.", dBack);
										return;
									}
									bot.sendMessage(message.chat.id, "Sei sicuro di voler resettare i tuoi punti dungeon? Potrai farlo al massimo fino al livello 5", dYesNo).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.toLowerCase() == "si") {
												connection.query('UPDATE player SET rank = 0 WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai resettato i punti dungeon!", dBack);
												});
											}
										}
									});
									return;
								}

								if (dungeon_time != null) {
									var d = new Date(dungeon_time);
									var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

									var dVarco = {
										parse_mode: "Markdown",
										reply_markup: {
											resize_keyboard: true,
											keyboard: [["Usa Varco Temporale"], ["Prosegui il dungeon"], ["Torna al menu"]]
										}
									};

									bot.sendMessage(message.chat.id, "Puoi tornare nei dungeon alle " + short_date + "!", dVarco);
									return;
								}

								if (answer.text != "Torna al menu") {
									var name1 = answer.text.substring(0, answer.text.indexOf("(") - 1);
									name1 = name1.replace(/[0-9]/g, '').trim();

									connection.query('SELECT id, min_rank, rooms FROM dungeon_list WHERE main = 1 AND name = "' + name1 + '"', function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Il dungeon che hai selezionato non esiste", dBack);
											return;
										}

										if (player_rank_b < rows[0].min_rank) {
											bot.sendMessage(message.chat.id, "Sali di rango per iniziare questo dungeon", dBack);
											return;
										}

										var this_rank = rows[0].min_rank;
										var this_room = rows[0].rooms;

										var d = new Date();
										d.setHours(d.getHours() + (parseInt(this_room) + 5));
										var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

										connection.query('SELECT COUNT(id) As cnt FROM dungeon_list WHERE main = 0 AND name LIKE "' + name1 + '%"', function (err, rows, fields) {
											if (err) throw err;

											var this_istance_number = rows[0].cnt;

											connection.query('SELECT name, duration, cursed, IF(creator_id=' + player_id + ', 1, 0) As createdbyme FROM dungeon_list WHERE name LIKE "' + name1 + '%" AND duration < ' + max_duration + ' ORDER BY createdbyme DESC, duration DESC', function (err, rows, fields) {
												if (err) throw err;

												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Il dungeon che hai selezionato non esiste", dBack);
													return;
												}

												var iKeys = [];
												var cursedSym = "";
												iKeys.push(["Genera Nuova Istanza"]);

												for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
													if (i < 120) {
														var num = rows[i].name.match(/\d+/g);
														if (num != null) {
															cursedSym = "";
															if (rows[i].cursed == 1)
																cursedSym = " üß®";
															iKeys.push([rows[i].name + " (" + (max_duration - rows[i].duration) + " posti liberi)" + cursedSym]);
														}
													}
												}
												iKeys.push(["Torna al dungeon"]);
												iKeys.push(["Torna al menu"]);

												var dSelect2 = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: iKeys
													}
												};

												connection.query('SELECT min_rank FROM dungeon_list WHERE main = 1 ORDER BY min_rank', function (err, rows, fields) {
													if (err) throw err;

													var last_rank = 0;
													for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
														if (player_rank_b >= rows[i].min_rank)
															last_rank = rows[i].min_rank;
													}

													if (last_rank != this_rank) {
														bot.sendMessage(message.chat.id, "Il tuo rango √® troppo alto per accedere a questo dungeon", dBack);
														return;
													}

													connection.query('SELECT COUNT(*) As num FROM dungeon_list WHERE name LIKE "' + name1 + '%" AND main = 0 AND duration < ' + max_duration + ' AND TIMESTAMPDIFF(HOUR, NOW(), finish_date) > 48', function (err, rows, fields) {
														if (err) throw err;

														var max_creable = rows[0].num-max_duration;
														var max_creable_text = "";
														if (max_creable <= 0)
															max_creable_text = "Al momento non possono essere create altre varianti.";
														else if (max_creable == 1)
															max_creable_text = "Al momento pu√≤ essere ancora creata *1* variante.";
														else
															max_creable_text = "Al momento possono essere ancora create *" + max_creable + "* varianti.";

														bot.sendMessage(message.chat.id, "Seleziona una variante di dungeon esistente o creane una nuova, in ogni variante la disposizione delle stanze sar√† diversa e scompariranno alla scadenza dell'istanza. Puoi anche inserire solo il numero della variante.\n" + max_creable_text, dSelect2).then(function () {
															answerCallbacks[message.chat.id] = function (answer) {
																if ((answer.text != "Torna al menu") && (answer.text != "Torna al dungeon")) {

																	if (answer.text == "Genera Nuova Istanza") {
																		connection.query('SELECT COUNT(*) As num FROM dungeon_list WHERE name LIKE "' + name1 + '%" AND main = 0 AND duration < ' + max_duration + ' AND TIMESTAMPDIFF(HOUR, NOW(), finish_date) > 48', function (err, rows, fields) {
																			if (err) throw err;

																			if (rows[0].num > 5) {
																				bot.sendMessage(message.chat.id, "Possono esserci solo massimo 5 istanze non completatemente piene e con scadenza pi√π lontana di 2 giorni, accedi a quelle gi√† esistenti o attendi la scadenza!", dBack);
																				return;
																			}

																			connection.query('SELECT * FROM dungeon_list WHERE name LIKE "' + name1 + '%" ORDER BY LENGTH(name), name', function (err, rows, fields) {
																				if (err) throw err;

																				if (Object.keys(rows).length == 0) {
																					bot.sendMessage(message.chat.id, "Il dungeon che hai selezionato non esiste", dBack);
																					return;
																				}

																				var newname = "";
																				var dungeon_rooms = rows[0].rooms;
																				var dungeon_rank = rows[0].min_rank;
																				var istance = 0;
																				var num = rows[Object.keys(rows).length - 1].name.match(/\d+/g);
																				if (num == null) {
																					// Caso in cui esiste solo il dungeon base
																					istance = 1;
																				} else {
																					// Caso in cui √® presente gi√† una stanza numerata

																					var numArray = rows.map(function (item) {
																						return item.name.replace(/^\D+/g, '');
																					});

																					istance = findMissing(numArray);
																					if (istance == undefined) {
																						istance = parseInt(rows[Object.keys(rows).length - 1].name.replace(/^\D+/g, '')) + 1;
																						console.log("Istanza undefined (" + name1 + ")");
																					}
																					//console.log(">> NEWISTANCE: " + istance);
																				}

																				newname = name1 + " " + istance;

																				if (istance == -1) {
																					console.log("Istanza -1 (" + name1 + ")");
																					bot.sendMessage(message.chat.id, "Errore creazione istanza, riprova", dBack);
																					return;
																				}

																				if (Object.keys(rows).length > max_istance) {
																					bot.sendMessage(message.chat.id, "Questo dungeon ha raggiunto il limite massimo di istanze, gioca prima a quelle gi√† create", dBack);
																					return;
																				}

																				var isCursed = 0;
																				var cursedText = "";
																				var minutes = 144*this_room;
																				var rand = Math.random()*100;
																				if (rand <= 5) {
																					isCursed = 1;
																					minutes = Math.round(minutes/2);
																					cursedText = "\nHai generato un Dungeon Maledetto üß® Alcune stanze possiedono caratteristiche diverse, i mostri sono pi√π potenti, riceverai 2 Punti Rango al termine e ne perderai 2 in caso di sconfitta.";
																				}

																				var d = new Date();
																				d.setMinutes(d.getMinutes() + minutes);
																				var long_date2 = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																				connection.query('INSERT INTO dungeon_list (name, rooms, min_rank, finish_date, creator_id, cursed, mob_power_multiplier) VALUES ("' + newname + '",' + dungeon_rooms + ',' + dungeon_rank + ',"' + long_date2 + '",' + player_id + ', ' + isCursed + ', ' + mob_power_multiplier + ')', function (err, rows, fields) {
																					if (err) throw err;
																					connection.query('SELECT id, name, duration FROM dungeon_list WHERE name = "' + newname + '"', function (err, rows, fields) {
																						var dungeon_id = rows[0].id;
																						var dungeon_name = rows[0].name;

																						var duration = rows[0].duration;
																						if (duration >= max_duration) {
																							bot.sendMessage(message.chat.id, "Questo dungeon √® gi√† pieno di esploratori, aspetta che qualcuno esca o genera una nuova istanza.", dBack);
																							return;
																						}

																						connection.query('UPDATE dungeon_list SET duration = duration+1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																							if (err) throw err;

																							connection.query('INSERT INTO dungeon_status (player_id, dungeon_id, room_id, finish_time) VALUES (' + player_id + ',' + dungeon_id + ',1,"' + long_date + '")', function (err, rows, fields) {
																								if (err) throw err;
																								bot.sendMessage(message.chat.id, "Sei stato aggiunto alla Lista Avventurieri del dungeon *" + dungeon_name + "*!" + cursedText, dBack);
																							});
																						});
																					});
																				});
																			});
																		});
																	} else {
																		if (answer.text.length > 4)
																			answer.text = answer.text.substring(0, answer.text.indexOf("(") - 1);

																		var num = parseInt(answer.text.replace(/\D/g,''));

																		if (isNaN(num)) {
																			bot.sendMessage(message.chat.id, "Istanza non valida", dBack);
																			return;
																		}

																		connection.query('SELECT * FROM dungeon_list WHERE name = "' + name1 + ' ' + num + '"', function (err, rows, fields) {
																			if (err) throw err;

																			if (Object.keys(rows).length == 0) {
																				bot.sendMessage(message.chat.id, "Il dungeon che hai selezionato non esiste", dBack);
																				return;
																			}

																			if (player_rank_b < rows[0].min_rank) {
																				bot.sendMessage(message.chat.id, "Sali di rango per iniziare questo dungeon", dBack);
																				return;
																			}

																			var dungeon_id = rows[0].id;
																			var dungeon_name = rows[0].name;

																			var duration = rows[0].duration;
																			var creator_id = rows[0].creator_id;
																			var creation = rows[0].creation_date;
																			var finish = rows[0].finish_date;
																			var creator_comment = rows[0].creator_comment

																			var cursedText = "";
																			if (rows[0].cursed)
																				cursedText = " üß®";

																			var long_date_creation = toDate("it", creation);
																			var long_date_finish = toDate("it", finish);

																			var confDg = {
																				parse_mode: "HTML",
																				reply_markup: {
																					resize_keyboard: true,
																					keyboard: [["Si"], ["Torna al dungeon"]]
																				}
																			};

																			connection.query('SELECT nickname, room_id, rooms FROM dungeon_status S, dungeon_list L, player P WHERE L.id = ' + dungeon_id + ' AND L.id = S.dungeon_id AND S.player_id = P.id', function (err, rows, fields) {
																				if (err) throw err;

																				var playerlist = "";
																				if (Object.keys(rows).length > 0) {
																					playerlist = "\n";
																					var room;
																					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																						room = rows[i].room_id;
																						if (rows[i].room_id > rows[i].rooms)
																							room = "finale";
																						playerlist += "> " + rows[i].nickname + " (stanza " + room + ")\n";
																					}
																					playerlist += "\n";
																				};

																				var creator_comment_txt = "";
																				if (creator_comment != null)
																					creator_comment_txt = "\n<b>Commento del creatore</b>: " + creator_comment;

																				connection.query('SELECT nickname FROM player WHERE id = ' + creator_id, function (err, rows, fields) {
																					if (err) throw err;

																					var creator_name = "?";
																					if (Object.keys(rows).length > 0)
																						creator_name = rows[0].nickname;

																					bot.sendMessage(message.chat.id, "<i>" + name1 + " " + num + cursedText + "</i>\n<b>Data creazione</b>: " + long_date_creation + "\n<b>Creatore dell'istanza</b>: " + creator_name + "\n<b>Data crollo</b>: " + long_date_finish + "\n<b>Esploratori al suo interno</b>: " + duration + "/" + max_duration + creator_comment_txt + "\n" + playerlist + "Continuare?", confDg).then(function () {
																						answerCallbacks[message.chat.id] = function (answer) {
																							if (answer.text.toLowerCase() == "si") {
																								connection.query('SELECT duration FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
																									if (err) throw err;
																									if ((rows[0].duration >= max_duration) || (duration < 0)) {
																										bot.sendMessage(message.chat.id, "Questo dungeon √® gi√† pieno di esploratori, aspetta che qualcuno esca o genera una nuova istanza.", dBack);
																										return;
																									}

																									connection.query('UPDATE dungeon_list SET duration = duration+1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																										if (err) throw err;
																										connection.query('INSERT INTO dungeon_status (player_id, dungeon_id, room_id, finish_time) VALUES (' + player_id + ',' + dungeon_id + ',1,"' + long_date + '")', function (err, rows, fields) {
																											if (err) throw err;
																											bot.sendMessage(message.chat.id, "Sei stato aggiunto alla Lista Avventurieri del dungeon *" + dungeon_name + "*!", dBack);
																											setAchievement(player_id, 27, 1);
																										});
																									});
																								});
																							};
																						};
																					});
																				});
																			});
																		});
																	};
																};
															};
														});
													});
												});
											});
										});
									});
								};
							};
						});
					});
				} else {
					var dng_pass = rows[0].pass;

					if (dungeon_time != null) {
						var d = new Date(dungeon_time);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

						var dVarco = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Usa Varco Temporale"], ["Prosegui il dungeon"], ["Torna al menu"]]
							}
						};

						bot.sendMessage(message.chat.id, "Puoi tornare nei dungeon alle " + short_date + "!", dVarco);
						return;
					}

					var dungeon_id = parseInt(rows[0].dungeon_id);
					var room_id = parseInt(rows[0].room_id);
					var monster_id = rows[0].monster_id;
					var last_dir = rows[0].last_dir;
					var room_time = new Date(rows[0].room_time);
					var param = rows[0].param;
					var timecheck = rows[0].timevar;
					var finish_time = new Date(rows[0].finish_time);
					var unlimited = rows[0].unlimited;

					var comment = connection_sync.query('SELECT creator_id FROM dungeon_list WHERE id = ' + dungeon_id);

					if (comment[0].creator_id == player_id) {
						var dNav = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["‚ò†Ô∏è", "‚¨ÜÔ∏è", "üîë"], ["‚¨ÖÔ∏è", "üçµ", "‚û°Ô∏è"], ["Commenta", "Scappa", "Torna al menu"]]
							}
						};
					} else {
						var dNav = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["‚ò†Ô∏è", "‚¨ÜÔ∏è", "üîë"], ["‚¨ÖÔ∏è", "üçµ", "‚û°Ô∏è"], ["Scappa", "Torna al menu"]]
							}
						};
					}

					var dNext = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Prosegui il dungeon"], ["Torna al menu"]]
						}
					};

					var dNext2 = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Prosegui"], ["Torna al menu"]]
						}
					};

					var dStart = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Entra nel dungeon"], ["Torna al menu"]]
						}
					};

					var dBattle = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Attacca", "Scappa"], ["Torna al menu"]]
						}
					};

					var dChest = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Prendi"], ["Torna al menu"]]
						}
					};

					var dPeople = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Aiuta", "Ignora"], ["Torna al menu"]]
						}
					};

					var dPotions = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Segui la Vecchia", "Ignora"], ["Torna al menu"]]
						}
					};

					var dButtons = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["1", "2", "3"], ["4", "5", "6"], ["‚ù£Ô∏è", "‚ù§Ô∏è"], ["Scappa"], ["Torna al menu"]]
						}
					};

					var dKeys = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Tipo A: Scorciatoia"], ["Tipo B: Rivelazione"], ["Tipo C: Riavvolgimento"], ["Tipo D: Congelamento"], ["Torna al dungeon"]]
						}
					};

					if (rows[0].room_time != null) {
						var now = new Date();
						var min = Math.round(((room_time - now) / 1000) / 60);
						if (min >= 0) {
							if (min > 0) {
								var plur = "i";
								if (min == 1)
									plur = "o";
								var strArr = [	"Esausto, ti sei fermato a riposare. Proseguirai tra %min%...",
											  "Confuso e pieno di d√©j√†-vu ti fermi ed osservi i corridoi: √® molto forte la sensazione d'essere gi√† passato da questa parte. Ti convincerai a proseguire non prima di %min%...",
											  "Violenti geyser eruttano vapore ustionante dal pavimento. Sei riuscito a valutarne il ritmo, capendo che dovrai aspettare %min% prima di poter superare la zona.",
											  "Il rintocco lento delle gocce pigre che cadono dalle stalattiti di calcare ti affascina ed attrae: resti a contare i respiri, assaporando l'aria umida per altri %min%...",
											  "Terribili eco ti gelano le ossa. Continui a voltarti nervosamente, terrorizzato. Trovi uno stretto cunicolo e ti acquatti stringendo le ginocchia al petto. Dondoli su e gi√π per altri %min%...",
											  "Un fiume di ribollente lava ostacola il tuo cammino. C'√® la fermata di un vaporetto alla tua destra, ma il prossimo passer√† tra %min%",
											  "Un Gigante dall'aria poco furba √® rimasto incastrato nel tunnel. Lo tiri per un piede, cercando di liberarlo. Non ci riuscirai prima di %min%...",
											  "Stai correndo velocemente lungo un ampio corridoio e all'improvviso ti accorgi: 'quel carrello vendeva gelati?'. Torni in dietro e si: GELATI! Aspetti diligentemente in fila, pronto a gustarti cocco-e-ananas tra %min%",
											  "Avanzando tra trappole e mostri trovi un area verde ed un cartello 'pic nic'. Ti fermi ad accarezzare il muschio umido per %min%.",
											  "L'ultima stanza ti ha shockato! Pensieroso hai adagiato il mento ispido sul palmo della mano, approfittando di %min% per riflettere sul senso della vita, dell'universo e tutto quanto...",
											  "Non c'√® alcuna fretta: riposi in un piccolo chiosco altri %min%, sorseggiando 3 caff√®!",
											  "Ennesimi problemi di buffering... la rotella smetter√† di girare tra %min%",
											  "Destra? Sinistra? √à tutto cos√¨ dannatamente uguale e ben renderizzato in questo posto! Resterei ancora qui a guardarlo per %min%!",
											  "Aspettando di entrare in una stanza fai per sbaglio cadere questo testo: stanza ti %min%! alla arrivare per mancano",
											  "Stai percorrendo un tunnel in cui non c'√® segnale, riprova tra %min%!",
											  "Potresti entrare nella prossima stanza gi√† ora, ma sei sicuro accadr√† qualcosa li dentro entro %min%!",
											  "Continui a correre come un forsennato in giro per i corridoi ancora per %min%...",
											  "Girovaghi ancora per i men√π per %min% prima di arrivare a una stanza",
											  "Aspetti che il moto rotatorio terrestre cambi andando a tuo favore. Secondo i tuoi calcoli ci dovrebbero volere %min%!",
											  "Durante la tua bella attesa trovi un dizionario bello dei sinonimi. Decidi bellamente di ignorarlo e proseguire verso la bella porta per altri %min%."
											 ];
								var rand = Math.round(Math.random() * (Object.keys(strArr).length - 1));
								var str = strArr[rand].replace("%min%", "*" + min + "* minut" + plur);
								bot.sendMessage(message.chat.id, str, dNext);
							} else {
								var strArr = [	"Ti aggiusti la cinta e gli stivali, sei quasi pronto per continuare l'esplorazione...",
											  "Un piccolo ruscello nasce timido da sotto una parete umida. Ti avvicini e noti che l'acqua √® opaca, densa. Immergi un dito ed hai la conferma: √® sangue d'orco! Ti guardi attorno prima di proseguire...",
											  "Ti stai rinfrescando ad una fonte d'acqua, il caldo √® sempre pi√π opprimente...",
											  "Nell'oscurit√† dei corridoi si intravede finalmente uno spazio illuminato: la prossima stanza √® vicina!",
											  "Muschi e licheni si fanno spazio dove un raggio di luce rompe le rocce. Oltre questo giardino vedi l'ingresso della prossima stanza. Rallenti il passo, godendo degli odori e dell'innaturale calma..."
											 ];
								var rand = Math.round(Math.random() * (Object.keys(strArr).length - 1));
								bot.sendMessage(message.chat.id, strArr[rand], dNext);
							}
							return;
						} else {
							connection.query('UPDATE dungeon_status SET room_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
							});
						}
					}

					connection.query('UPDATE player SET magic_active = 1, dragon_to = 2 WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});

					var text = "";

					connection.query('SELECT * FROM dungeon_rooms WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0) {
							connection.query('SELECT rooms, id FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0) {
									connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Il dungeon corrispondente non esiste pi√π, selezionane un altro.", back);
									});
									return;
								}

								bot.sendMessage(message.chat.id, "Il dungeon √® in costruzione, attendi.");

								var rooms = parseInt(rows[0].rooms);
								var id = rows[0].id;

								//	Mostro: > 10
								//	Scrigno: 1
								//	Monete: 2
								//	Trappola: 3
								//	Viandante: 4
								//	Trasporto: 5
								//	Persone in pericolo: 6
								//	Vecchia strega: 7
								//	Elementale: 8
								//	Divisa in due: 9
								//	Spada o bottino: 10
								//	Fontana di Mana: 0
								//  Fessura nel muro: -1
								//  Ascia Gigante: -2
								//	Gabbia con parola: -3
								//	Predone scambio: -4
								//	Meditazione: -5
								//	Desideri: -6
								//	Drago di Last: -7
								//	Stanza vuota: -8
								//	Marinaio: -9
								//	Porta misteriosa: -10
								//	Pozzo: -11
								//	Anziano saggio: -12
								// 	Mappatore distratto: -13
								//	Specchio magico: -14
								// 	Alchimista: -15
								// 	Bombarolo: -16
								//	Stanza Esplosiva: -17
								//	Gioielliere Pazzo: -18
								// 	Stanza dell'Energia: -19
								//	Mercante Draconico: -20
								//	Stanza Cuore e Spirito: -21
								//	Maledizione di Unna: -22
								//	Stanza dell'urlo: -23
								//	Stanza impolverata: -24
								//	Vicolo cieco: -25

								var arr = [];
								var p1 = Math.round((rooms * 3) / 100 * 60);
								var rand = 0;
								var rooms_mob = rooms;
								if (rooms_mob > max_mob_value-15)	// cap stanze per mob
									rooms_mob = max_mob_value-15;

								for (var i = 0; i < (rooms * 3); i++) {
									if (i < p1) {	// mostro
										rand = Math.round(Math.random() * 10 + (rooms_mob + 1)); //per evitare che venga generato 10, cio√® un errore dove non trova il mostro
										arr.push([rand]);
									} else {
										rand = Math.round(Math.random() * (max_rooms_neg+10) - max_rooms_neg);	//minimo = max_rooms_neg, massimo = 10
										arr.push([rand]);
									}
								}

								arr = shuffle(arr);

								var arr1 = arr.slice(0, rooms);
								var arr2 = arr.slice(rooms, rooms * 2);
								var arr3 = arr.slice(rooms * 2, rooms * 3);

								for (var i = 0; i < rooms; i++) {
									top = arr1[i];
									right = arr2[i];
									left = arr3[i];
									connection.query('INSERT INTO dungeon_rooms (room_id, dungeon_id, player_id, dir_top, dir_right, dir_left) VALUES (' + (i + 1) + ',' + dungeon_id + ',' + player_id + ',' + top + ',' + right + ',' + left + ')', function (err, rows, fields) {
										if (err) throw err;
									});
									if ((top == 4) || (right == 4) || (left == 4)) {
										var randC = Math.random()*100;
										var craftable = "craftable = 0 AND";
										if (randC < 10)	// sia craftati che non col 10%
											craftable = "";
										connection.query('SELECT id, value, estimate FROM item WHERE ' + craftable + ' rarity NOT IN ("UE","A","H","S","D","U","IN","X") ORDER BY RAND() LIMIT 3', function (err, rows, fields) {
											if (err) throw err;

											var item1 = rows[0].id;
											var item2 = rows[1].id;
											var item3 = rows[2].id;

											var est1 = parseInt(rows[0].estimate);
											var est2 = parseInt(rows[1].estimate);
											var est3 = parseInt(rows[2].estimate);

											var price1 = Math.round(Math.random() * (est1 * 0.1) + (est1));
											var price2 = Math.round(Math.random() * (est2 * 0.1) + (est2));
											var price3 = Math.round(Math.random() * (est3 * 0.1) + (est3));

											connection.query('INSERT INTO dungeon_market (room_id, dungeon_id, item_1, item_2, item_3, price_1, price_2, price_3) VALUES (' + (this.i + 1) + ',' + dungeon_id + ',' + item1 + ',' + item2 + ',' + item3 + ',' + price1 + ',' + price2 + ',' + price3 + ')', function (err, rows, fields) {
												if (err) throw err;
											});
										}.bind({
											i: i
										}));
									}
									if ((top == -4) || (right == -4) || (left == -4)) {
										var rand_trade = Math.random()*100;
										var craftable = 1;
										if (rand_trade > 15)
											craftable = 0;

										connection.query('SELECT id FROM item WHERE craftable =  ' + craftable + ' AND rarity NOT IN ("UE","A","H","S","D","U","IN","X") ORDER BY RAND() LIMIT 2', function (err, rows, fields) {
											if (err) throw err;

											var item1 = rows[0].id;
											var item2 = rows[1].id;

											connection.query('INSERT INTO dungeon_trade (room_id, dungeon_id, item_1, item_2) ' +
															 'VALUES (' + (this.i + 1) + ',' + dungeon_id + ',' + item1 + ',' + item2 + ')',
															 function (err, rows, fields) {
												if (err) throw err;
											});
										}.bind({
											i: i
										}));
									}
									if ((top == -11) || (right == -11) || (left == -11)) {
										connection.query('SELECT COUNT(id) As cnt FROM dungeon_well WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
											if (err) throw err;

											if (rows[0].cnt == 0) {
												var rand = Math.round(Math.random() * (player_rank * 100)) + (player_rank * 100);
												connection.query('INSERT INTO dungeon_well (dungeon_id, amount) VALUES (' + dungeon_id + ',' + rand + ')', function (err, rows, fields) {
													if (err) throw err;
												});
											};
										});
									}
								}

								//console.log("Generazione dungeon con " + rooms + " stanze completata");

								connection.query('UPDATE dungeon_status SET room_id = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Il dungeon √® stato creato, ora inizia l'esplorazione!", dStart);
								});
							});
						} else {
							connection.query('SELECT rooms, finish_date, cursed, mob_power_multiplier FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
								if (err) throw err;

								var room_num = rows[0].rooms;
								var instance_finish_time = rows[0].finish_date;
								var cursed = rows[0].cursed;
								var mob_power_multiplier = rows[0].mob_power_multiplier;

								connection.query('SELECT * FROM dungeon_rooms WHERE room_id = ' + room_id + ' AND dungeon_id = ' + dungeon_id, function (err, rows, fields) {
									if (err) throw err;

									if (monster_id != 0) {
										bot.sendMessage(message.chat.id, "Stai combattendo contro un mostro!\nNon puoi proseguire senza averlo prima sconfitto.", dBattle).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text == "Scappa") {
													bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() == "si") {

																var rand = Math.random() * 100;
																if (rand < 20)
																	var dmg = Math.round(player_total_life * 20 / 100);
																else
																	var dmg = Math.round(player_total_life * 30 / 100);

																var exText = "";

																connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});

																if (player_life - dmg <= 0) {
																	exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																	var d = new Date();
																	d.setHours(d.getHours() + wait_dungeon_long);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	if (cursed == 1) {
																		if (rank == 1) {
																			connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		} else if (rank > 1) {
																			connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																	} else {
																		if (rank > 0) {
																			connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																	}
																} else {
																	exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																	var d = new Date();
																	d.setHours(d.getHours() + (wait_dungeon - 1));
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + formatNumber(dmg) + " hp, " + exText, back);
															}
														}
													});
												}
											};
										});
										return;
									}

									var now = new Date();
									var dungeon_tot = Math.round((finish_time - now) / 1000); // In secondi
									var instance_tot = Math.round((instance_finish_time - now) / 1000); // In secondi

									var end_time = Math.min(dungeon_tot, instance_tot);
									if (unlimited == 1)
										end_time = instance_tot;
									var time_rem = toTime(end_time, 0);
									if (end_time < 0)
										time_rem = "pochi secondi";
									text = "Stanza " + room_id + "/" + room_num + " (" + time_rem + " rimanenti)\n";

									if (room_id == 1) {
										text += "Decidi di addentrarti nel dungeon. Nell'oscurit√† intravedi una strada e vari corridoi che si perdono a vista d'occhio. Quale direzione scegli di intraprendere?";
									} else {
										var dText = [
											"L'atmosfera cupa e misteriosa ti inquieta, hai davanti a te 3 strade, dove prosegui?",
											"Una stanza di fronte a te mostra 3 porte in 3 diverse direzioni, dove decidi di proseguire?",
											"Indeciso sulla direzione, rimani a riflettere sperando che sia il miglior percorso, quale strada scegli?",
											"Di fronte a te diverse strade che portano in direzioni diverse, dove ti dirigi?"
										];
										var len = parseInt(Object.keys(dText).length) - 1;
										var index = Math.round(Math.random() * len);

										text += dText[index];
									}

									if (Object.keys(rows).length == 0) {
										bot.sendMessage(message.chat.id, "Sei arrivato alla stanza finale! Per uscire devi sconfiggere la Bestia del Dungeon.");

										var monsterLev = (parseInt(room_num) + 10);

										if (monsterLev > max_mob_value-5)
											monsterLev = max_mob_value-5;

										if (nightMode == 1)
											monsterLev += 5;

										connection.query('SELECT id, name, level, life FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields) {
											if (err) throw err;
											if (Object.keys(rows).length == 0) {
												bot.sendMessage(message.chat.id, "Errore", back);
												return;
											}
											connection.query('UPDATE dungeon_status SET boss_battle = 1, monster_id = ' + rows[0].id + ', monster_life = ' + (rows[0].life * 3) + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});

											setTimeout(function () {
												bot.sendMessage(message.chat.id, "Incontri una Bestia *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo e completare il dungeon, oppure scappare.", dBattle).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Scappa") {
															bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {

																		var rand = Math.random() * 100;
																		if (rand < 50) {
																			var dmg = Math.round(player_total_life * 20 / 100);
																		} else {
																			var dmg = Math.round(player_total_life * 30 / 100);
																		}

																		var exText = "";

																		connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});

																		if (player_life - dmg <= 0) {
																			exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																			var d = new Date();
																			d.setHours(d.getHours() + wait_dungeon_long);
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																			connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			if (cursed == 1) {
																				if (rank == 1) {
																					connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																				} else if (rank > 1) {
																					connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																				}
																			} else {
																				if (rank > 0) {
																					connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																				}
																			}
																		} else {
																			exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																			var d = new Date();
																			d.setHours(d.getHours() + (wait_dungeon - 1));
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																			connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																		connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + formatNumber(dmg) + " hp, " + exText, back);
																	}
																}
															});
														}
													};
												});
											}, 1000);
										});
										return;
									}

									var dir_top = parseInt(rows[0].dir_top);
									var dir_right = parseInt(rows[0].dir_right);
									var dir_left = parseInt(rows[0].dir_left);
									var dir = null;

									if (last_dir != null)
										dNav = dNext2;

									bot.sendMessage(message.chat.id, text, dNav).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text == "Torna al menu")
												return;
											if ((answer.text == "‚¨ÜÔ∏è") || (answer.text.toLowerCase() == "su"))
												dir = dir_top;
											else if ((answer.text == "‚¨ÖÔ∏è") || (answer.text.toLowerCase() == "sinistra") || (answer.text.toLowerCase() == "sx"))
												dir = dir_left;
											else if ((answer.text == "‚û°Ô∏è") || (answer.text.toLowerCase() == "destra") || (answer.text.toLowerCase() == "dx"))
												dir = dir_right;
											else if (answer.text == "Commenta") {
												connection.query('SELECT creator_id FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
													if (err) throw err;

													if (rows[0].creator_id != player_id) {
														bot.sendMessage(message.chat.id, "Deve essere creatore dell'istanza per scrivere un commento", dBack);
														return;
													}

													var dComment = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															keyboard: [["Cancella"], ["Torna al dungeon"]]
														}
													};

													bot.sendMessage(message.chat.id, "Scrivi il commento che vedranno gli utenti prima di accedere alla tua istanza.", dComment).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if ((answer.text == "Torna al menu") || (answer.text == "Torna al dungeon"))
																return;

															if (answer.text == "Cancella") {
																connection.query('UPDATE dungeon_list SET creator_comment = NULL WHERE id = ' + dungeon_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Commento rimosso!", dBack);
																});
															} else {
																var reg = new RegExp("^[a-zA-Z0-9√†√®√¨√≤√π√©.,\\\?\!\'\@\(\) ]{1,1000}$");
																if (reg.test(answer.text) == false) {
																	bot.sendMessage(message.chat.id, "Commento non valido, riprova", dBack);
																	return;
																}
																connection.query('UPDATE dungeon_list SET creator_comment = "' + answer.text + '" WHERE id = ' + dungeon_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Commento inserito!", dBack);
																});
															}
														};
													});
												});
												return;
											} else if (answer.text == "üîë") {
												bot.sendMessage(message.chat.id, "Puoi utilizzare le chiavi per sfruttare diverse funzionalit√†", dKeys).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Tipo A: Scorciatoia") {
															bot.sendMessage(message.chat.id, "Puoi prendere una scorciatoia utilizzando una Chiave Tipo A, procedi?\nNe possiedi " + getItemCnt(player_id, 604), dYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {
																		if (getItemCnt(player_id, 604) == 0)
																			bot.sendMessage(message.chat.id, "Non hai abbastanza Chiavi Tipo A", dBack);
																		else {
																			delItem(player_id, 604, 1);
																			connection.query('UPDATE dungeon_status SET room_id = room_id+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Hai preso una scorciatoia!", dBack);
																				setAchievement(player_id, 73, 1);
																			});
																		}
																	}
																}
															});
														} else if (answer.text == "Tipo B: Rivelazione") {
															bot.sendMessage(message.chat.id, "Puoi rivelare le stanze utilizzando una Chiave Tipo B, procedi?\nNe possiedi " + getItemCnt(player_id, 605), dYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {
																		if (getItemCnt(player_id, 605) == 0)
																			bot.sendMessage(message.chat.id, "Non hai abbastanza Chiavi Tipo B", dBack);
																		else {
																			delItem(player_id, 605, 1);
																			var text = "Scelta stanza successiva:\n";
																			var i = 0;
																			var d = 0;
																			var t = "";

																			while (i < 3) {
																				if (i == 0) {
																					d = dir_top;
																					t = "Avanti";
																				} else if (i == 1) {
																					d = dir_right;
																					t = "Destra";
																				} else if (i == 2) {
																					d = dir_left;
																					t = "Sinistra";
																				}
																				text += "*" + t + ":* " + dungeonToDesc(d) + "\n";
																				i++;
																			}

																			bot.sendMessage(message.chat.id, text, dBack);
																			setAchievement(player_id, 74, 1);
																		}
																	}
																}
															});
														} else if (answer.text == "Tipo C: Riavvolgimento") {
															bot.sendMessage(message.chat.id, "Puoi tornare alla stanza precedente utilizzando una Chiave Tipo C, procedi?\nNe possiedi " + getItemCnt(player_id, 784), dYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {
																		if (getItemCnt(player_id, 784) == 0)
																			bot.sendMessage(message.chat.id, "Non hai abbastanza Chiavi Tipo C", dBack);
																		else {
																			delItem(player_id, 784, 1);

																			if (room_id <= 1) {
																				bot.sendMessage(message.chat.id, "Non puoi utilizzare questa chiave se ti trovi alla prima stanza del dungeon", dBack);
																				return;
																			}

																			connection.query('UPDATE dungeon_status SET room_id = room_id-1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Sei tornato alla stanza precedente!", dBack);
																			});
																		}
																	}
																}
															});
														} else if (answer.text == "Tipo D: Congelamento") {
															bot.sendMessage(message.chat.id, "Puoi evitare di essere espulso dal dungeon finch√® non scade l'istanza utilizzando una Chiave Tipo D, procedi?\nNe possiedi " + getItemCnt(player_id, 787), dYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {
																		if (getItemCnt(player_id, 787) == 0)
																			bot.sendMessage(message.chat.id, "Non hai abbastanza Chiavi Tipo D", dBack);
																		else {
																			delItem(player_id, 787, 1);

																			connection.query('UPDATE dungeon_status SET unlimited = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Il dungeon scadr√† solamente al crollo dell'istanza!", dBack);
																			});
																		}
																	}
																}
															});
														}
													};
												});
												return;
											} else if (answer.text == "Scappa") {
												bot.sendMessage(message.chat.id, "Sicuro di voler uscire dal dungeon? Se possiedi un Kit Fuga lo consumerai e non dovrai attendere prima di rientrare. Non perderai punti rango.", dYesNo).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text.toLowerCase() == "si") {
															setAchievement(player_id, 51, 1);
															var extra = "";
															if (getItemCnt(player_id, 616) > 0) {
																delItem(player_id, 616, 1);
																extra = " scappando con un Kit Fuga!";
															} else {
																var d = new Date();
																d.setHours(d.getHours() + wait_dungeon_long);
																var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															}
															connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai deciso di rinunciare al dungeon" + extra, back);
															});
														}
													}
												});
												return;
											} else if (answer.text == "‚ò†Ô∏è") {

												if (dng_pass != 0) {
													bot.sendMessage(message.chat.id, "Questo dungeon √® gi√† stato passato, non puoi passarlo nuovamente", dBack);
													return;
												}

												connection.query('SELECT name, inventory.quantity As num FROM item, inventory WHERE item.name LIKE "Pass%" AND inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Non possiedi nessun pass.", dBack);
														return;
													}

													var iKeys = [];
													for (var i = 0, len = Object.keys(rows).length; i < len; i++)
														iKeys.push([rows[i].name + " (" + rows[i].num + ")"]);
													iKeys.push(["Torna al dungeon"]);

													var dPass = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															keyboard: iKeys
														}
													};

													bot.sendMessage(message.chat.id, "Avventuriero, in caso di difficolt√† puoi ricorrere all'uso di un *Pass* che ti permette di chiedere aiuto ad un tuo compagno di team e fargli proseguire il dungeon al tuo posto.\nPuoi usare il Pass Bronzo per compagni di Rinascita pari alla tua, Pass Argento per compagni entro 1 rinascita di differenza, il Pass Oro entro 2 rinascite di differenza.\nNota: al completamento del dungeon otterrete entrambi il punto solo se la vostra differenza rango √® inferiore a 150, siete nella stessa fascia rango dungeon ed il rango del destinatario √® superiore al tuo.", dPass).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {

															if (answer.text != "Torna al dungeon") {
																var passName = answer.text.substring(0, answer.text.indexOf("(") - 1);

																connection.query('SELECT item.name, item.id FROM item, inventory WHERE item.name = "' + passName + '" AND inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
																	if (err) throw err;
																	if (Object.keys(rows).length == 0) {
																		bot.sendMessage(message.chat.id, "Non possiedi il pass selezionato.", dBack);
																		return;
																	} else {

																		var passId = rows[0].id;

																		if ((passId != 608) && (passId != 609) && (passId != 610)) {
																			bot.sendMessage(message.chat.id, "Pass non valido", dBack);
																			return;
																		}

																		connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			if (Object.keys(rows).length == 0) {
																				bot.sendMessage(message.chat.id, "Devi essere in un team per utilizzare questa funzionalit√†.", dBack);
																				return;
																			} else {
																				var team_id = rows[0].team_id;
																				connection.query('SELECT nickname, dungeon_id FROM team_player, player LEFT JOIN dungeon_status ON player.id = dungeon_status.player_id WHERE player.id = team_player.player_id AND team_id = ' + rows[0].team_id + ' AND player.id != ' + player_id + ' AND dungeon_time IS NULL AND dungeon_id IS NULL', function (err, rows, fields) {
																					if (err) throw err;
																					if (Object.keys(rows).length == 0) {
																						bot.sendMessage(message.chat.id, "Nessun compagno di team disponibile.", dBack);
																						return;
																					} else {
																						var iKeys2 = [];
																						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																							iKeys2.push([rows[i].nickname]);
																						}
																						iKeys2.push(["Torna al dungeon"]);

																						var dTeam = {
																							parse_mode: "Markdown",
																							reply_markup: {
																								resize_keyboard: true,
																								keyboard: iKeys2
																							}
																						};

																						bot.sendMessage(message.chat.id, "Seleziona il compagno di team con cui scambiarti, ricorda che questo utente non deve essere in un dungeon.", dTeam).then(function () {
																							answerCallbacks[message.chat.id] = function (answer) {
																								connection.query('SELECT nickname, rank, dungeon_time, player.reborn, player.id, player.chat_id FROM team_player, player WHERE player.nickname = "' + answer.text + '" AND player.id = team_player.player_id AND team_id = ' + team_id + ' AND player_id != ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																									if (Object.keys(rows).length == 0) {
																										bot.sendMessage(message.chat.id, "Utente non valido.", dBack);
																										return;
																									} else {
																										var new_playerid = rows[0].id;
																										var chat_id = rows[0].chat_id;
																										var pass_reborn = rows[0].reborn;
																										var pass_rank = rows[0].rank;

																										if (passId == 608) {
																											if (player_reborn != pass_reborn) {
																												bot.sendMessage(message.chat.id, "Puoi usare questo pass solo verso utenti con rinascita pari alla tua", dBack);
																												return;
																											}
																										} else if (passId == 609) {
																											if (pass_reborn - player_reborn > 1) {
																												bot.sendMessage(message.chat.id, "Puoi usare questo pass solo verso utenti con rinascita pi√π alta di 1 rispetto alla tua, o uguale", dBack);
																												return;
																											}
																										} else if (passId == 610) {
																											if (pass_reborn - player_reborn > 2) {
																												bot.sendMessage(message.chat.id, "Puoi usare questo pass solo verso utenti con rinascita pi√π alta di 2 rispetto alla tua, pi√π alta di 1, o uguale", dBack);
																												return;
																											}
																										}

																										bot.sendMessage(message.chat.id, "Sei sicuro?", dYesNo).then(function () {
																											answerCallbacks[message.chat.id] = function (answer) {
																												if (answer.text.toLowerCase() == "si") {
																													if (rows[0].dungeon_time != null) {
																														bot.sendMessage(message.chat.id, "L'utente √® in attesa dungeon", dBack);
																														return;
																													}

																													if (getItemCnt(player_id, passId) == 0) {
																														bot.sendMessage(message.chat.id, "Non possiedi il pass selezionato.", dBack);
																														return;
																													}

																													connection.query('SELECT id FROM dungeon_status WHERE player_id = ' + new_playerid, function (err, rows, fields) {
																														if (err) throw err;
																														if (Object.keys(rows).length > 0) {
																															bot.sendMessage(message.chat.id, "L'utente selezionato √® attualmente in un dungeon", dBack);
																															return;
																														}
																														delItem(player_id, passId, 1);

																														connection.query('UPDATE dungeon_status SET pass = ' + player_id + ', player_id = ' + new_playerid + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																															if (err) throw err;

																															var d = new Date();
																															d.setHours(d.getHours() + wait_dungeon);
																															var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																															connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																																if (err) throw err;
																																bot.sendMessage(message.chat.id, "Hai completato lo scambio con il compagno di team!", back);
																																bot.sendMessage(chat_id, message.from.username + " ha richiesto lo scambio con te nel dungeon!", dBack_html);
																																setAchievement(player_id, 46, 1);
																																setAchievement(new_playerid, 67, 1);
																															});
																														});
																													});
																												}
																											}
																										});
																									}
																								});
																							};
																						});
																					}
																				});
																			}
																		});
																	}
																});
															}
														};
													});
												});
												return;
											} else if (last_dir == null)
												return;

											if (last_dir != null)
												dir = last_dir;

											var d = new Date();
											var sec = wait_room;

											if (abBonus > 0)
												sec -= abBonus;
											if ((player_class_id == 3) && (player_reborn == 3))
												sec = sec - 120;
											if ((player_class_id == 9) && (player_reborn > 1))
												sec = sec - 120;
											if ((player_class_id == 9) && (player_reborn == 5))
												sec = sec - 180;
											if ((player_class_id == 3) && (player_reborn >= 4))
												sec = sec - 240;
											if (crazyMode == 1)
												sec = sec - 120;

											if (boost_id == 8)
												sec = Math.ceil(sec/2);

											d.setSeconds(d.getSeconds() + sec);

											var room_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
											var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

											connection.query('UPDATE dungeon_status SET last_dir = ' + dir + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});

											if (dir > 10) {
												var monsterLev = dir - 10;



												connection.query('SELECT id, min_rank FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
													if (err) throw err;

													var min_rank = rows[0].min_rank;

													connection.query('SELECT id, name, min_rank FROM dungeon_list WHERE min_rank > ' + min_rank + ' ORDER BY min_rank ASC LIMIT 1', function (err, rows, fields) {
														if (err) throw err;

														var max_rank = 0;
														if (Object.keys(rows).length == 0)
															max_rank = 250; //Controllare
														else
															max_rank = rows[0].min_rank;

														var startrank = 50;
														var extra = "";
														if (player_rank >= startrank) {
															var perc = ((player_rank - min_rank) * 2);
															var rand = Math.random() * 100;
															if (perc >= rand) {
																var monster_boost = Math.round(Math.random() * 7 + 3);
																monsterLev += monster_boost;
																extra = "L'aria si fa pi√π pesante verso la prossima stanza. ";
															}
														}

														if (nightMode == 1)
															monsterLev += 5;

														if (monsterLev > max_mob_value)
															monsterLev = max_mob_value;

														connection.query('SELECT id, life, name, level FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields) {
															if (err) throw err;
															if (Object.keys(rows).length == 0) {
																bot.sendMessage(message.chat.id, "Errore selezione mostro: " + monsterLev, back);
																return;
															}

															rows[0].life = rows[0].life*mob_power_multiplier;

															connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															bot.sendMessage(message.chat.id, extra + "Incontri un *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text == "Scappa") {
																		bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function () {
																			answerCallbacks[message.chat.id] = function (answer) {
																				if (answer.text.toLowerCase() == "si") {

																					var rand = Math.random() * 100;
																					if (rand < 50)
																						var dmg = Math.round(player_total_life * 20 / 100);
																					else
																						var dmg = Math.round(player_total_life * 30 / 100);

																					var exText = "";

																					connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});

																					if (player_life - dmg <= 0) {
																						exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																						var d = new Date();
																						d.setHours(d.getHours() + wait_dungeon_long);
																						var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																						connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																						connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																						connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																						if (cursed == 1) {
																							if (rank == 1) {
																								connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							} else if (rank > 1) {
																								connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							}
																						} else {
																							if (rank > 0) {
																								connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							}
																						}
																					} else {
																						exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																						var d = new Date();
																						d.setHours(d.getHours() + (wait_dungeon - 1));
																						var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																						connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					}
																					connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																					bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + formatNumber(dmg) + " hp, " + exText, back);
																				}
																			}
																		});
																	}
																};
															});
														});
													});
												});
											} else if (dir == 1) {
												bot.sendMessage(message.chat.id, "Nella stanza sembra esserci uno *scrigno* pronto per essere aperto, cosa fai?", dChest).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Prendi") {
															var rand = Math.round((Math.random() * 99) + 1);
															var rand2 = Math.round((Math.random() * 99) + 1);

															if (rand2 < 50) {
																var chest_id = 0;
																var qnt = 1;
																if (rand <= 50)
																	chest_id = 3;
																else if ((rand > 50) && (rand <= 70))
																	chest_id = 4;
																else if ((rand > 70) && (rand <= 90))
																	chest_id = 5;
																else if ((rand > 90) && (rand <= 95))
																	chest_id = 6;
																else
																	chest_id = 0;

																if (cursed == 1)
																	qnt = 2;

																if (chest_id > 0) {
																	connection.query('SELECT name FROM chest WHERE id = ' + chest_id, function (err, rows, fields) {
																		if (err) throw err;
																		var chestName = rows[0].name;
																		addChest(player_id, chest_id, qnt);
																		bot.sendMessage(message.chat.id, "Hai trovato " + qnt + "x *" + chestName + "*!", dNext);
																	});
																} else {
																	addItem(player_id, 604);
																	bot.sendMessage(message.chat.id, "Aprendo uno strano scrigno hai trovato una *Chiave Tipo A*!", dNext);
																}
															} else {
																var monsterLev = Math.round(Math.random() * Math.round(room_num / 2) + Math.round(room_num / 2));

																if (monsterLev > max_mob_value)
																	monsterLev = max_mob_value;

																connection.query('SELECT id, life, name, level FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields) {
																	if (err) throw err;
																	if (Object.keys(rows).length == 0) {
																		bot.sendMessage(message.chat.id, "Errore selezione mostro: " + monsterLev, back);
																		return;
																	}
																	connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	bot.sendMessage(message.chat.id, "Hai trovato uno Scrigno! Ma appena lo tocchi esso assume le sembianze di un *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function () {
																		answerCallbacks[message.chat.id] = function (answer) {
																			if (answer.text == "Scappa") {
																				bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function () {
																					answerCallbacks[message.chat.id] = function (answer) {
																						if (answer.text.toLowerCase() == "si") {

																							var rand = Math.random() * 100;
																							if (rand < 50)
																								var dmg = Math.round(player_total_life * 20 / 100);
																							else
																								var dmg = Math.round(player_total_life * 30 / 100);

																							var exText = "";

																							connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							if (player_life - dmg <= 0) {
																								exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																								var d = new Date();
																								d.setHours(d.getHours() + wait_dungeon_long);
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								if (cursed == 1) {
																									if (rank == 1) {
																										connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									} else if (rank > 1) {
																										connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									}
																								} else {
																									if (rank > 0) {
																										connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									}
																								}
																							} else {
																								exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																								var d = new Date();
																								d.setHours(d.getHours() + (wait_dungeon - 1));
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							}
																							connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + formatNumber(dmg) + " hp, " + exText, back);
																						}
																					}
																				});
																			}
																		};
																	});
																});
																connection.query('UPDATE dungeon_status SET last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																return;
															}
														} else if (answer.text == "Ignora")
															bot.sendMessage(message.chat.id, "Hai ignorato lo Scrigno", dNext);
														else
															return;

														if (boost_id == 8)
															setBoost(player_id, boost_mission, boost_id);

														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}
												});
											} else if (dir == 2) {
												bot.sendMessage(message.chat.id, "Al centro della stanza vedi un mucchietto di monete dall'aria invitante, cosa fai?", dChest).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Prendi") {
															if (player_rank == 0)
																player_rank = 1;
															var randC = Math.random()*100;
															if (randC < 30) {
																bot.sendMessage(message.chat.id, "Corri verso il mucchietto ma mentre ti avvicini vedi un altro avventuriero arraffartelo da sotto il naso! Prosegui alla prossima stanza con un po' di tristezza negli occhi", dNext);
															} else if (randC < 98) {
																var rand = Math.round(Math.random() * (player_rank * 100)) + (player_rank * 100);
																if (cursed == 1)
																	rand = rand*2;
																connection.query('UPDATE player SET money = money+' + rand + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Corri verso il mucchietto e ne raccogli il pi√π possibile, hai ottenuto *" + formatNumber(rand) + "* ¬ß! Prosegui alla prossima stanza con il borsellino un po' pi√π pesante", dNext);

																	setAchievement(player_id, 83, rand);
																});
															} else if (randC < 100) {
																connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Corri verso il mucchietto ma mentre lo guardi noti che si trasforma in una pietruzza luccicante, hai ottenuto una *Gemma*! Prosegui alla prossima stanza pieno di soddisfazione", dNext);
																});
															}
														} else
															return;
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}
												});
											} else if (dir == 3) {
												var rand = Math.random()*100;
												var trap = 0;
												if (rand < 70) {
													var dmg = Math.round(Math.random() * (player_life / 10 * 2) + 1);
													trap = 1;
												} else if (rand < 90) {
													bot.sendMessage(message.chat.id, "Hai schivato con destrezza una trappola piazzata sul muro della stanza, ottieni 5 exp!", dNext);
													setExp(player_id, 5);
												} else {
													var dmg = Math.round(Math.random() * (player_life / 3 * 2) + 1);
													trap = 1;
												}

												if (cursed == 1)
													dmg = dmg*2;

												if (trap == 1) {
													connection.query('UPDATE player SET life = life - ' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														var dText = [
															"Camminando per raggiungere la prossima stanza, una trappola per orsi ti ha ferito la gamba, hai perso " + formatNumber(dmg) + " hp!",
															"Percorrendo un corridoio scivoli su una pozzanghera giallognola e tiri una testata contro un muro in pietra, perdi " + formatNumber(dmg) + " hp!",
															"Uno strano pulsante rosso come un pomodoro ti incuriosisce, lo premi e ti cade addosso un pietrone, facendoti perdere " + formatNumber(dmg) + " hp!",
															"Vedi un Nano della terra di Grumpi e ti chiedi come faccia a trovarsi in un luogo del genere, girandosi si rivela essere un goblin che ti colpisce togliendoti " + formatNumber(dmg) + " hp!"
														];
														var len = parseInt(Object.keys(dText).length) - 1;
														var index = Math.round(Math.random() * len);

														text = dText[index];

														bot.sendMessage(message.chat.id, text, dNext);
													});
												}

												if (boost_id == 8)
													setBoost(player_id, boost_mission, boost_id);
												connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
												connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											} else if (dir == 4) {
												var iKeys = [];
												var items = [];
												var prices = [];

												var text = "Nella stanza incontri un viandante, ti propone alcuni oggetti a buon prezzo, puoi acquistarne uno oppure ignorarlo e procedere.\n";

												connection.query('SELECT I.id As item1id, DM.price_1 As price1, DM.price_2 As price2, DM.price_3 As price3, I.value As item1val, I.name As item1n, I2.id As item2id, I2.value As item2val, I2.name As item2n, I3.id As item3id, I3.value As item3val, I3.name As item3n FROM dungeon_market DM INNER JOIN item I ON DM.item_1 = I.id INNER JOIN item I2 ON DM.item_2 = I2.id INNER JOIN item I3 ON DM.item_3 = I3.id WHERE DM.dungeon_id = ' + dungeon_id + ' AND DM.room_id = ' + room_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0) {
														connection.query('UPDATE dungeon_status SET last_dir = NULL, room_id = room_id+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Il viandante al momento non √® disponibile, la stanza viene saltata", dNext);
														});
														return;
													}

													var multi = 15;
													text += "\n> " + rows[0].item1n + " (" + formatNumber(rows[0].price1) + " ¬ß)";
													text += "\n> " + rows[0].item2n + " (" + formatNumber(rows[0].price2) + " ¬ß)";
													text += "\n> " + rows[0].item3n + " (" + formatNumber(rows[0].price3) + " ¬ß)";

													iKeys.push(["Accetta Oggetto 1"]);
													iKeys.push(["Accetta Oggetto 2"]);
													iKeys.push(["Accetta Oggetto 3"]);
													items.push(rows[0].item1id);
													items.push(rows[0].item2id);
													items.push(rows[0].item3id);
													prices.push(rows[0].price1);
													prices.push(rows[0].price2);
													prices.push(rows[0].price3);

													iKeys.push(["Ignora"]);
													iKeys.push(["Torna al menu"]);

													var dItems = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															keyboard: iKeys
														}
													};

													bot.sendMessage(message.chat.id, text, dItems).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															var ogg = answer.text;
															if (ogg == "Ignora") {
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	connection.query('UPDATE dungeon_status SET last_dir = NULL, room_id = room_id+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Decidi di ignorare il viandante e prosegui", dNext);
																	});
																});
																return;
															} else if (ogg == "Torna al menu")
																return;
															else {
																var itemN = parseInt(ogg.substring(Object.keys(ogg).length - 1));

																if ((itemN > 3) || (itemN < 1)) {
																	bot.sendMessage(message.chat.id, "Il viandante non possiede questo oggetto", back);
																	return;
																}

																var item_id = items[itemN - 1];
																var item_price = prices[itemN - 1];

																if (item_id == undefined) {
																	bot.sendMessage(message.chat.id, "Il viandante non possiede questo oggetto", back);
																	return;
																}
																if (item_price == undefined) {
																	bot.sendMessage(message.chat.id, "Il viandante non possiede questo oggetto", back);
																	return;
																}

																connection.query('SELECT id, name, value FROM item WHERE id = ' + item_id, function (err, rows, fields) {
																	if (err) throw err;

																	if (player_money - item_price < 0) {
																		bot.sendMessage(message.chat.id, "Non hai abbastanza monete", back);
																		return;
																	}

																	//console.log("PRICE: " + item_price);

																	bot.sendMessage(message.chat.id, "Acquistare " + rows[0].name + " per " + formatNumber(item_price) + " ¬ß?", dYesNo).then(function () {
																		answerCallbacks[message.chat.id] = function (answer) {
																			if (answer.text.toLowerCase() == "si") {
																				addItem(player_id, item_id);
																				connection.query('UPDATE player SET money = money-' + item_price + ' WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;

																					if (boost_id == 8)
																						setBoost(player_id, boost_mission, boost_id);
																					connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});

																					connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});

																					bot.sendMessage(message.chat.id, "Acquisto completato!", dNext);
																				});
																			}
																		}
																	});
																});
															}
														}
													});
												});
											} else if (dir == 5) {
												var rand = Math.round(Math.random() * 100);

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Sinistra", "Centro", "Destra"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Il corridoio si stringe in un'umida strettoia, sembrerebbe un vicolo cieco!\nTasti le pareti con una mano e all'improvviso un meccanismo rivela tre leve di legno, logore dal tempo.\nQuale tiri?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if ((answer.text == "Sinistra") || (answer.text == "Centro") || (answer.text == "Destra")) {
															if (rand <= 50) {
																if (room_id > 2) {
																	room_id--;
																	bot.sendMessage(message.chat.id, "Indeciso, sfiori lentamente le leve ed inavvertitamente ne spingi una:\nUna botola nascosta si apre all'improvviso sotto di te, scivoli lungo un tunnel melmoso, sbatti la testa e svieni.\nQuando recuperi coscienza sei a terra, nella stanza precedente.", dNext);
																} else
																	bot.sendMessage(message.chat.id, "Spingendo una leva senti degli strani rumori, ma non succede nulla!", dNext);
															} else if ((rand > 50) && (rand <= 90)) {
																room_id++;
																bot.sendMessage(message.chat.id, "Tiri la leva verso di te ed in una parete si apre uno stretto varco: strisciando in un tunnel claustrofobico riesci a raggiungere la stanza successiva.", dNext);
															} else if (rand > 90) {
																room_id += 2;
																bot.sendMessage(message.chat.id, "Tiri la leva verso di te ed una parete si apre in un gran fragore: √® una scorciatoia che ti permette di superare 2 stanze!", dNext);
															}
															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = ' + room_id + ', last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else
															return;
													}
												});
											} else if (dir == 6) {
												var dText = [
													"una ragazza che sembra essere in difficolt√†",
													"un bambino che piange",
													"un uomo ferito e sanguinante",
													"una donna impaurita",
													"un anziano dolorante"
												];
												var len = parseInt(Object.keys(dText).length) - 1;
												var index = Math.round(Math.random() * len);

												text = dText[index];

												bot.sendMessage(message.chat.id, "Appena entrato nella stanza vedi nell'angolo " + text + ", cosa fai?", dPeople).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Aiuta") {
															var rand = Math.random() * 100;
															if (rand < 50) {
																var monsterLev = Math.round(Math.random() * Math.round(room_num / 2) + Math.round(room_num / 2));

																if (monsterLev > max_mob_value-5)
																	monsterLev = max_mob_value-5;

																connection.query('SELECT id, life, name, level FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields) {
																	if (err) throw err;
																	if (Object.keys(rows).length == 0) {
																		bot.sendMessage(message.chat.id, "Errore selezione mostro", back);
																		return;
																	}
																	connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});

																	bot.sendMessage(message.chat.id, "Decidi di toccare la persona davanti a te, ma questa si gira e sembra essere un *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function () {
																		answerCallbacks[message.chat.id] = function (answer) {
																			if (answer.text == "Scappa") {
																				bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function () {
																					answerCallbacks[message.chat.id] = function (answer) {
																						if (answer.text.toLowerCase() == "si") {

																							var rand = Math.random() * 100;
																							if (rand < 50)
																								var dmg = Math.round(player_total_life * 20 / 100);
																							else
																								var dmg = Math.round(player_total_life * 30 / 100);

																							var exText = "";

																							connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							if (player_life - dmg <= 0) {
																								exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																								var d = new Date();
																								d.setHours(d.getHours() + wait_dungeon_long);
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								if (cursed == 1) {
																									if (rank == 1) {
																										connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									} else if (rank > 1) {
																										connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									}
																								} else {
																									if (rank > 0) {
																										connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									}
																								}
																							} else {
																								exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																								var d = new Date();
																								d.setHours(d.getHours() + (wait_dungeon - 1));
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							}
																							connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + formatNumber(dmg) + " hp, " + exText, back);
																						}
																					}
																				});
																			};
																		};
																	});
																});
																connection.query('UPDATE dungeon_status SET last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																return; // Non cancellare
															} else {
																if (rand > 85) {
																	addItem(player_id, 608);
																	bot.sendMessage(message.chat.id, "Decidi di toccare la persona davanti a te, si gira e ti ringrazia per averla trovata, regalandoti un *Pass Bronzo*!", dNext);
																} else {
																	connection.query('SELECT id, name FROM item WHERE rarity = "R" AND craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
																		var itemName = rows[0].name;
																		addItem(player_id, rows[0].id);
																		bot.sendMessage(message.chat.id, "Decidi di toccare la persona davanti a te, si gira e ti ringrazia per averla trovata, regalandoti: *" + itemName + "*!", dNext);
																	});
																}
															}
														} else if (answer.text == "Ignora")
															bot.sendMessage(message.chat.id, "Hai ignorato la persona", dNext);
														else
															return;

														if (boost_id == 8)
															setBoost(player_id, boost_mission, boost_id);
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});

														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													};
												});
											} else if (dir == 7) {
												var dText = [
													"Un'anziana signora in lontananza ti chiama",
													"Una vecchina poco affidabile in lontananza attira la tua attenzione"
												];
												var len = parseInt(Object.keys(dText).length) - 1;
												var index = Math.round(Math.random() * len);

												text = dText[index];

												bot.sendMessage(message.chat.id, "Aprendo la porta ti ritrovi in un ambiente aperto, con alberi e liane che ricoprono ogni cosa. " + text + ", cosa fai?", dPotions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Segui la Vecchia") {
															var rand = Math.random() * 100;
															setAchievement(player_id, 78, 1);
															if (rand < 50) {
																var qnt = 1;
																if (cursed == 1)
																	qnt = 2;
																if (player_reborn <= 3) {
																	addItem(player_id, 94, qnt);
																	bot.sendMessage(message.chat.id, "La vecchina ha preparato una Pozione, e decide di regalartene un po' per aver avuto fiducia in lei. Ottieni cos√¨ " + qnt + "x *Pozione Grande*", dNext);
																} else if (player_reborn == 4) {
																	addItem(player_id, 619, qnt);
																	bot.sendMessage(message.chat.id, "La vecchina sta cucinando una Fenice appena catturata per la cena, e decide di regalartene un po' per aver avuto fiducia in lei. Ottieni cos√¨ " + qnt + "x *Piuma di Fenice*", dNext);
																} else if (player_reborn == 5) {
																	addItem(player_id, 647, qnt);
																	bot.sendMessage(message.chat.id, "La vecchina sta incenerendo una Fenice appena catturata per un incantesimo, e decide di regalartene un po' per aver avuto fiducia in lei. Ottieni cos√¨ " + qnt + "x *Cenere di Fenice*", dNext);
																}
															} else {
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '", last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "La vecchina ha preparato una Pozione, e decidi di provarla, ma appena bevuta ti addormenti, al tuo risveglio sei nuovamente davanti alle 3 porte che ti avevano condotto in questa foresta.", dNext);
																});
																return; //NON CANCELLARE
															}
														} else if (answer.text == "Ignora")
															bot.sendMessage(message.chat.id, "Hai ignorato la Vecchia", dNext);
														else
															return;

														if (boost_id == 8)
															setBoost(player_id, boost_mission, boost_id);
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													};
												});
											} else if (dir == 8) {
												var type = 0;
												var d = new Date();
												var rand = Math.round(d.getHours() / 4) % 2;

												if ((param == null) || (param == undefined)) {
													var randNum = Math.round(Math.random() * 5 + 1) + ",0";
													connection.query('UPDATE dungeon_status SET param = "' + randNum + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
													});
													param = randNum;
												}

												bot.sendMessage(message.chat.id, "Appena aperta la porta della stanza, un freddo polare ti avvolge, appare una pulsantiera congelata, probabilmente uno di quei bottoni potrebbe aprire la porta successiva.\n\nSalute: " + formatNumber(player_life) + " hp", dButtons).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {

														if ((answer.text == "Torna al menu") || (answer.text == "‚ù£Ô∏è") || (answer.text == "‚ù§Ô∏è"))
															return;

														if (answer.text == "Scappa") {
															bot.sendMessage(message.chat.id, "Sicuro di voler uscire dal dungeon? Se possiedi un Kit Fuga lo consumerai e non dovrai attendere prima di rientrare. Non perderai punti rango.", dYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {

																		var extra = "";
																		if (getItemCnt(player_id, 616) > 0) {
																			delItem(player_id, 616, 1);
																			extra = " scappando con un Kit Fuga!";
																		} else {
																			var d = new Date();
																			d.setHours(d.getHours() + wait_dungeon_long);
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																			connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																		connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai deciso di rinunciare al dungeon" + extra, back);
																		});
																	}
																}
															});
															return;
														}

														if ((parseInt(answer.text) < 1) || (parseInt(answer.text > 6))) {
															bot.sendMessage(message.chat.id, "Pulsante non valido, riprova", dBack);
															return;
														} else if ((parseInt(answer.text) >= 1) || (parseInt(answer.text <= 6))) {

															var rand = Math.random() * 200;

															if (parseInt(answer.text) != parseInt(param.split(",")[0])) {
																var damage = Math.round(Math.random() * (player_total_life / 15) + (player_total_life / 15));
																damage = Math.round(damage / 2);

																if (cursed == 1)
																	damage = damage*2;

																connection.query('UPDATE player SET life = life - ' + damage + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;

																	var randKey = Math.random() * 100;
																	if (randKey < 3) {
																		addItem(player_id, 605);
																		bot.sendMessage(message.chat.id, "Si apre una piastrella del muro dal quale cade una *Chiave Tipo B*!", dNext);
																	}

																	if (param.split(",")[1] >= 5) {
																		bot.sendMessage(message.chat.id, "Hai effettuato tutti i tentativi possibili! Uno strano suono rimbomba nelle pareti e si apre la porta per la prossima stanza!", dNext);
																		if (boost_id == 8)
																			setBoost(player_id, boost_mission, boost_id);
																		connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_status SET param = NULL, room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		return;
																	}

																	bot.sendMessage(message.chat.id, "Hai sbagliato pulsante! Il gelo ti provoca una perdita pari a " + formatNumber(damage) + " hp!", dNext);

																	if ((answer.text == (param.split(",")[0] / 2)) && (rand < 1) && (player_reborn >= 3)) {
																		addItem(player_id, 598);
																		bot.sendMessage(message.chat.id, "Si apre una crepa nella parete, da cui esce un soffio di vento ottieni cos√¨ un *Soffio di Morte*!", mark);
																	}

																	if (player_life - damage <= 0) {
																		bot.sendMessage(message.chat.id, "Sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.", back);

																		var d = new Date();
																		d.setHours(d.getHours() + wait_dungeon_long);
																		var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																		connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		if (cursed == 1) {
																			if (rank == 1) {
																				connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			} else if (rank > 1) {
																				connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			}
																		} else {
																			if (rank > 0) {
																				connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			}
																		}
																	}

																	randNum = param.split(",")[0] + "," + (parseInt(param.split(",")[1])+1);

																	connection.query('UPDATE dungeon_status SET param = "' + randNum + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																});
															} else {
																if (rand < 10) {
																	addItem(player_id, 609);
																	bot.sendMessage(message.chat.id, "Hai trovato il pulsante corretto! Sul soffitto si apre una botola dalla quale vedi scendere un foglietto, ottieni cos√¨ un *Pass Argento*!\nProsegui alla prossima stanza.", dNext);
																} else {
																	bot.sendMessage(message.chat.id, "Hai trovato il pulsante corretto! Prosegui alla prossima stanza.", dNext);
																}
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET param = NULL, room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															};
														};
													};
												});
											} else if (dir == 9) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Pi√π Raro", "Meno Raro"], ["Ignora"], ["Torna al menu"]]
													}
												};

												var rand = Math.random() * 100;

												bot.sendMessage(message.chat.id, "Raggiungi una stanza suddivisa in due, vedi un oggetto per lato, dove ti dirigi?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if ((answer.text == "Pi√π Raro") || (answer.text == "Meno Raro")) {

															var monsterLev = room_num;
															if (monsterLev > max_mob_value-5)
																monsterLev = max_mob_value-5;

															var rarity = "";

															if (answer.text == "Pi√π Raro") {
																if (rand > 30)
																	rarity = "UR";
																else
																	rarity = "L";
															} else if (answer.text == "Meno Raro") {
																if (rand > 50)
																	rarity = "R";
																else
																	rarity = "NC";
																monsterLev -= 5;
															}

															connection.query('SELECT name, id FROM item WHERE rarity = "' + rarity + '" AND craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
																if (err) throw err;
																var itemName = rows[0].name;
																var itemId = rows[0].id;

																connection.query('SELECT id, life, name, level FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields) {
																	if (err) throw err;
																	if (Object.keys(rows).length == 0) {
																		bot.sendMessage(message.chat.id, "Errore selezione mostro", back);
																		return;
																	}
																	connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	var mName = rows[0].name;
																	var mLevel = rows[0].level;

																	var qnt = 1;
																	if (cursed == 1)
																		qnt = 2;

																	addItem(player_id, itemId, qnt);

																	var text = "Ti avvicini all'oggetto con calma, scopri che si tratta di " + qnt + "x *" + itemName + "*, ma appena lo prendi, appare di fronte a te un";
																	bot.sendMessage(message.chat.id, text + " *" + mName + "* di livello *" + mLevel + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function () {
																		answerCallbacks[message.chat.id] = function (answer) {
																			if (answer.text == "Scappa") {
																				bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function () {
																					answerCallbacks[message.chat.id] = function (answer) {
																						if (answer.text.toLowerCase() == "si") {

																							var rand = Math.random() * 100;
																							if (rand < 50)
																								var dmg = Math.round(player_total_life * 20 / 100);
																							else
																								var dmg = Math.round(player_total_life * 30 / 100);

																							var exText = "";

																							connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							if (player_life - dmg <= 0) {
																								exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																								var d = new Date();
																								d.setHours(d.getHours() + wait_dungeon_long);
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								if (cursed == 1) {
																									if (rank == 1) {
																										connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									} else if (rank > 1) {
																										connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									}
																								} else {
																									if (rank > 0) {
																										connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									}
																								}
																							} else {
																								exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																								var d = new Date();
																								d.setHours(d.getHours() + (wait_dungeon - 1));
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							}
																							connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + formatNumber(dmg) + " hp, " + exText, back);
																						}
																					}
																				});
																			}
																		};
																	});
																});
															});
															connection.query('UPDATE dungeon_status SET last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															return;
														} else if (answer.text == "Ignora") {
															bot.sendMessage(message.chat.id, "Hai ignorato gli oggetti", dNext);
															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else
															return;
													}
												});
											} else if (dir == 10) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Accumula tutte"], ["Accumula monete", "Estrai spada"], ["Torna al menu"]]
													}
												};

												if ((param == null) || (param == undefined)) {
													param = "0;0";
													connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
													});
												}

												var param_arr = param.split(";");
												var acc_money = param_arr[0];
												var acc_prob = param_arr[1];

												if (player_rank == 0)
													player_rank = 1;

												bot.sendMessage(message.chat.id, "Entri in una stanza piena d'oro luccicante e una spada conficcata nel muro, puoi decidere di raccogliere monete ma un messaggio su un cartello raccomanda di non essere troppo avido, cosa fai?\nFin ora hai accumulato *" + formatNumber(acc_money) + "* ¬ß per la probabilit√† del *" + acc_prob + "*% di rischiare la vita.", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Accumula monete") {
															var middle = Math.pow(player_rank, 0.60) * 1000
															var min = middle * 0.66;
															var max = middle * 1.33;
															var rand = Math.round(Math.random() * (max - min + 1) + min);

															acc_money = parseInt(acc_money) + rand;

															if (acc_prob >= 10) {
																bot.sendMessage(message.chat.id, "Non ci sono pi√π monete nella stanza!", dNext);
																return;
															}

															var randKey = Math.random() * 100;
															var prob = 1;
															if (cursed == 1)
																prob = 2;
															if (randKey < prob) {
																addItem(player_id, 616);
																bot.sendMessage(message.chat.id, "In mezzo ai mucchi trovi un *Kit Fuga*!", dNext);
															}

															acc_prob = parseInt(acc_prob) + 1;
															param = acc_money + ";" + acc_prob;

															connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});

															bot.sendMessage(message.chat.id, "Hai deciso di accumulare altre monete, raggiungi cos√¨ un bottino di *" + formatNumber(acc_money) + "* ¬ß", dNext);
														} else if (answer.text == "Accumula tutte") {
															if (acc_prob > 0) {
																bot.sendMessage(message.chat.id, "Puoi accumulare tutto solo appena entri nella stanza!", dNext);
																return;
															}

															var middle = Math.pow(player_rank, 0.60) * 1000
															var min = middle * 0.66;
															var max = middle * 1.33;
															var rand = Math.round(Math.random() * (max - min + 1) + min)*10;

															acc_money = rand;

															var randKey = Math.random() * 100;
															var prob = 10;
															if (cursed == 1)
																prob = 15;
															if (randKey < prob) {
																addItem(player_id, 616);
																bot.sendMessage(message.chat.id, "In mezzo ai mucchi trovi un *Kit Fuga*!", dNext);
															}

															acc_prob = 10;
															param = acc_money + ";" + acc_prob;

															connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});

															bot.sendMessage(message.chat.id, "Hai deciso di accumulare tutte le monete nella stanza, raggiungi cos√¨ un bottino di *" + formatNumber(acc_money) + "* ¬ß", dNext);
														} else if (answer.text == "Estrai spada") {
															var prob = Math.random()*100;
															if (cursed == 1)
																acc_prob = acc_prob*2;
															if (acc_prob >= prob) {
																connection.query('UPDATE player SET life = 0 WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;

																	var d = new Date();
																	d.setHours(d.getHours() + wait_dungeon_long);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});

																	bot.sendMessage(message.chat.id, "La spada provoca un piccolo terremoto e si apre la porta! Ma un dolore lancinante al petto ti fa perdere i sensi, probabilmente a causa della tua avidit√†, vieni cos√¨ portato fuori dal dungeon in orribili condizioni.", back);
																});
																return;
															}

															connection.query('UPDATE player SET money = money + ' + acc_money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																if (acc_money == 0) {
																	bot.sendMessage(message.chat.id, "La spada provoca un piccolo terremoto e si apre la porta! Immediatamente per√≤ senti una voce spiritica risuonare nell'aria.\nSi apre la porta e prosegui senza nessuna moneta!", dNext);
																} else {
																	bot.sendMessage(message.chat.id, "La spada provoca un piccolo terremoto e si apre la porta! Ottieni *" + formatNumber(acc_money) + "* ¬ß sapendo di averla scampata per un soffio!", dNext);

																	setAchievement(player_id, 83, acc_money);
																}
															});

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET param = NULL, room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													};
												});
											} else if (dir == 0) {
												var rand = Math.round(Math.random() * 100);

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Esamina"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Appena entrato nella stanza noti subito una strana fontana situata nel centro, cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Esamina") {
															connection.query('SELECT COUNT(*) As cnt FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;

																var color = "";
																var type = 0;
																if (rows[0].cnt > 0) {
																	if (rand <= 20) {
																		color = "Rosso";
																		type = 3;
																	} else if ((rand > 20) && (rand <= 40)) {
																		color = "Blu";
																		type = 1;
																	} else if ((rand > 40) && (rand <= 60)) {
																		color = "Giallo";
																		type = 2;
																	}
																}
																var cnt = 100;
																if (cursed == 1)
																	cnt = 50;
																if (color != "") {
																	connection.query('UPDATE event_mana_status SET mana_' + type + ' = mana_' + type + '+' + cnt + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Ti avvicini alla fontana e vedi che l'acqua ha uno strano colore, la esamini meglio ed ottieni " + cnt + " Mana " + color + "!", dNext);
																		setAchievement(player_id, 81, cnt);
																	});
																	if (boost_id == 8)
																		setBoost(player_id, boost_mission, boost_id);
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																} else {
																	var monsterLev = Math.round(Math.random() * Math.round(room_num / 2) + Math.round(room_num / 2));

																	if (monsterLev > max_mob_value-5)
																		monsterLev = max_mob_value-5;

																	connection.query('SELECT id, life, name, level FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields) {
																		if (err) throw err;
																		if (Object.keys(rows).length == 0) {
																			bot.sendMessage(message.chat.id, "Errore selezione mostro: " + monsterLev, back);
																			return;
																		}
																		connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		bot.sendMessage(message.chat.id, "Ti avvicini alla fontana per esaminarla meglio, appena provi a toccare l'acqua dal suo interno esce un *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function () {
																			answerCallbacks[message.chat.id] = function (answer) {
																				if (answer.text == "Scappa") {
																					bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function () {
																						answerCallbacks[message.chat.id] = function (answer) {
																							if (answer.text.toLowerCase() == "si") {

																								var rand = Math.random() * 100;
																								if (rand < 50)
																									var dmg = Math.round(player_total_life * 20 / 100);
																								else
																									var dmg = Math.round(player_total_life * 30 / 100);

																								var exText = "";

																								connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});

																								if (player_life - dmg <= 0) {
																									exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																									var d = new Date();
																									d.setHours(d.getHours() + wait_dungeon_long);
																									var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																									connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									if (cursed == 1) {
																										if (rank == 1) {
																											connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																												if (err) throw err;
																											});
																										} else if (rank > 1) {
																											connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																												if (err) throw err;
																											});
																										}
																									} else {
																										if (rank > 0) {
																											connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																												if (err) throw err;
																											});
																										}
																									}
																								} else {
																									exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																									var d = new Date();
																									d.setHours(d.getHours() + (wait_dungeon - 1));
																									var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																									connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																								connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + formatNumber(dmg) + " hp, " + exText, back);
																							}
																						}
																					});
																				}
																			};
																		});
																	});
																}
															});
														} else
															return;
													}
												});
											} else if (dir == -1) {
												var rand = Math.round(Math.random() * 100);

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Inserisci Monete"], ["Sfonda il Muro"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Questa stanza √® strana, scorgi solamente una fessura sul muro di fronte, con l'indicazione di una monetina. A fianco si erge un grosso portone, sembra poco resistente. Cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Inserisci Monete") {
															connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																var money = Math.round(rows[0].money * 0.0002);
																if (money <= 0) {
																	bot.sendMessage(message.chat.id, "Non hai abbastanza monete, non puoi procedere, torna quando avrai qualche moneta da parte", dNext);
																	return;
																}
																connection.query('UPDATE player SET money = money - ' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Scegli di inserire nella fessura " + formatNumber(money) + " ¬ß, il portone ti ringrazia con una voce inquietante, e si apre lentamente, cos√¨ da aprire la strada per la stanza seguente.", dNext);
																});
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});

																setAchievement(player_id, 77, 1);
															});
														} else if (answer.text == "Sfonda il Muro") {
															bot.sendMessage(message.chat.id, "Sicuro di voler sfondare il muro?", yesno).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {
																		connection.query('SELECT life, total_life FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			var life = Math.round(rows[0].total_life * getRandomArbitrary(0.3, 0.6));
																			if (cursed == 1)
																				life = life*2;
																			if (life >= rows[0].total_life*0.9)
																				life = rows[0].total_life*0.9;
																			if (rows[0].life - life <= 0) {
																				connection.query('UPDATE player SET life = life - ' + life + ' WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																					bot.sendMessage(message.chat.id, "Tirando spallate troppo forti hai perso i sensi e quindi portato fuori dal dungeon", back);
																				});

																				var d = new Date();
																				d.setHours(d.getHours() + wait_dungeon_long);
																				var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																				connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																				connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																				connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			} else {
																				connection.query('UPDATE player SET life = life - ' + life + ' WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																					bot.sendMessage(message.chat.id, "Scegli di tirare gi√π il portone a spallate, perdi cos√¨ " + formatNumber(life) + " hp, ma riesci ad aprire la strada per la stanza seguente.", dNext);
																				});
																			}
																			if (boost_id == 8)
																				setBoost(player_id, boost_mission, boost_id);
																			connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		});
																	}
																};
															});
														} else
															return;
													}
												});
											} else if (dir == -2) {
												var rand = Math.round(Math.random() * 100);

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Procedi"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Un cartello con un punto esclamativo ti preoccupa, al centro della stanza c'√® un taglio che la percorre per tutta la sua larghezza, l'unica alternativa √® procedere.", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Procedi") {
															connection.query('SELECT life, total_life FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																var life = Math.round(rows[0].life / 2);
																if (cursed == 1)
																	life = rows[0].total_life*0.9;
																var rand = Math.random() * 100;

																connection.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;

																	var combat = 0;
																	if (Object.keys(rows).length > 0)
																		combat = rows[0].combat;

																	connection.query('SELECT level, life, sleep_h FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;

																		var prob = 0;
																		var lev = 0;
																		if ((Object.keys(rows).length > 0) && (combat == 0)) {
																			lev = rows[0].level;
																			if ((rows[0].life > 0) || ((rows[0].life == 0) && (rows[0].sleep_h > 0))) {
																				if (lev == 200)
																					prob = 100;
																				else if (lev >= 150)
																					prob = 75;
																				else if (lev >= 100)
																					prob = 50;
																				else if (lev >= 50)
																					prob = 25;
																				else
																					prob = lev;
																			}
																		}

																		if (prob >= rand) {
																			addItem(player_id, 72);
																			bot.sendMessage(message.chat.id, "Come avanzi di due passi scatta un meccanismo e un'ascia gigantesca ti precipita addosso, fortunatamente il tuo drago riesce a difenderti bloccandola completamente e vicino alla porta trovi un sacchettino contenente una Pietra Cuore Leggendario!", dNext);
																		} else {
																			connection.query('UPDATE player SET life = life - ' + life + ' WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				if (cursed == 1) {
																					bot.sendMessage(message.chat.id, "Come avanzi di due passi scatta un meccanismo e un'ascia gigantesca ti precipita addosso, il tuo drago non √® abbastanza forte per proteggerti, l'ascia ti prende in pieno e perdi quasi l'intera salute!", dNext);
																				} else {
																					bot.sendMessage(message.chat.id, "Come avanzi di due passi scatta un meccanismo e un'ascia gigantesca ti precipita addosso, il tuo drago non √® abbastanza forte per proteggerti, l'ascia ti prende in pieno e perdi met√† della tua salute!", dNext);
																				}
																			});
																		}
																		if (boost_id == 8)
																			setBoost(player_id, boost_mission, boost_id);
																		connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	});
																});
															});
														} else
															return;
													}
												});
											} else if (dir == -3) {
												var min = room_id - 3;
												var max = room_id + 10;

												connection.query('SELECT room_id, dir_top, dir_right, dir_left FROM dungeon_rooms WHERE room_id BETWEEN ' + min + ' AND ' + max + ' AND room_id != ' + room_id + ' AND dungeon_id = ' + dungeon_id + ' ORDER BY RAND()', function (err, rows, fields) {
													if (err) throw err;

													if ((param == null) || (param == undefined)) {
														var i1 = rows[0].room_id;
														var i2 = rows[1].room_id;
														var i3 = rows[2].room_id;
														var d1 = "";
														var d2 = "";
														var d3 = "";
														var r1 = 0;
														var r2 = 0;
														var r3 = 0;
														var c1 = 0;
														var c2 = 0;
														var c3 = 0;

														var rand0 = Math.random() * 100;
														if (rand0 < 33) {
															c1 = 1;
															c2 = 0;
															c3 = 0;
														} else if (rand0 < 66) {
															c1 = 0;
															c2 = 1;
															c3 = 0;
														} else {
															c1 = 0;
															c2 = 0;
															c3 = 1;
														}

														var rand1 = Math.random() * 100;
														if (rand1 < 30) {
															r1 = rows[0].dir_top;
															d1 = "top";
														} else if (rand1 < 60) {
															r1 = rows[0].dir_right;
															d1 = "right";
														} else {
															r1 = rows[0].dir_left;
															d1 = "left";
														}
														if (c1 == 0) {
															if (r1 > 8)
																r1 = Math.round(getRandomArbitrary(-10, 9));
															else
																r1++;
														}

														var rand2 = Math.random() * 100;
														if (rand2 < 30) {
															r2 = rows[1].dir_top;
															d2 = "top";
														} else if (rand2 < 60) {
															r2 = rows[1].dir_right;
															d2 = "right";
														} else {
															r2 = rows[1].dir_left;
															d2 = "left";
														}
														if (c2 == 0) {
															if (r2 > 8)
																r2 = Math.round(getRandomArbitrary(-10, 9));
															else
																r2++;
														}

														var rand3 = Math.random() * 100;
														if (rand3 < 30) {
															r3 = rows[2].dir_top;
															d3 = "top";
														} else if (rand3 < 60) {
															r3 = rows[2].dir_right;
															d3 = "right";
														} else {
															r3 = rows[2].dir_left;
															d3 = "left";
														}
														if (c3 == 0) {
															if (r3 > 8)
																r3 = Math.round(getRandomArbitrary(-10, 9));
															else
																r3++;
														}

														var sequence = i1 + "," + r1 + "," + d1 + "," + c1 + "," +
															i2 + "," + r2 + "," + d2 + "," + c2 + "," +
															i3 + "," + r3 + "," + d3 + "," + c3;

														connection.query('UPDATE dungeon_status SET param = "' + sequence + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
														param = sequence;
													}

													var params = param.split(",");
													var iKeys = [];

													var dir1 = "";
													var dir2 = "";
													var dir3 = "";

													if (params[2] == "top")
														dir1 = "Avanti";
													else if (params[2] == "right")
														dir1 = "Destra";
													else
														dir1 = "Sinistra";
													if (params[6] == "top")
														dir2 = "Avanti";
													else if (params[6] == "right")
														dir2 = "Destra";
													else
														dir2 = "Sinistra";
													if (params[10] == "top")
														dir3 = "Avanti";
													else if (params[10] == "right")
														dir3 = "Destra";
													else
														dir3 = "Sinistra";
													iKeys.push(["1. Stanza " + params[0] + " (" + dir1 + "): " + dungeonToDesc(params[1])]);
													iKeys.push(["2. Stanza " + params[4] + " (" + dir2 + "): " + dungeonToDesc(params[5])]);
													iKeys.push(["3. Stanza " + params[8] + " (" + dir3 + "): " + dungeonToDesc(params[9])]);

													iKeys.push(["Cambia Incisione"]);
													iKeys.push(["Torna al menu"]);

													var dOptions = {
														parse_mode: "HTML",
														reply_markup: {
															resize_keyboard: true,
															keyboard: iKeys
														}
													};

													var next = -1;
													var winroom = 1;
													if (params[3] != 0)
														winroom = params[0];
													else if (params[7] != 0)
														winroom = params[4];
													else if (params[11] != 0)
														winroom = params[8];
													else {
														bot.sendMessage(message.chat.id, "Errore misterioso, contatta l'admin", back);
														return;
													}

													bot.sendMessage(message.chat.id, "In questa stanza non noti nessuna porta, al loro posto 3 incisioni con un pulsante ciascuna, le leggi e rifletti su quale premere.", dOptions).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {

															if (answer.text == "Cambia Incisione") {
																bot.sendMessage(message.chat.id, "Per cambiare le iscrizioni dovrai attendere 10 minuti, procedi?", dYesNo).then(function () {
																	answerCallbacks[message.chat.id] = function (answer) {
																		if (answer.text.toLowerCase() == "si") {

																			var d = new Date();
																			d.setMinutes(d.getMinutes() + 10);
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

																			connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});

																			if (timecheck >= 5) {
																				connection.query('UPDATE dungeon_status SET room_id = ' + winroom + ', last_dir = NULL, param = NULL, timevar = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																					bot.sendMessage(message.chat.id, "Hai esaurito i tentativi, vieni automaticamente sbalzato alla stanza corretta!", dNext);
																				});
																				return;
																			}

																			connection.query('UPDATE dungeon_status SET param = NULL, timevar = timevar+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Le iscrizioni piano piano svaniscono...", dNext);
																			});
																		}
																	}
																});
																return;
															}

															if (answer.text.indexOf("1.") != -1) {
																if (params[3] == 0)
																	win = 0;
																else
																	win = 1;
																next = params[0];
															} else if (answer.text.indexOf("2.") != -1) {
																if (params[7] == 0)
																	win = 0;
																else
																	win = 1;
																next = params[4];
															} else if (answer.text.indexOf("3.") != -1) {
																if (params[11] == 0)
																	win = 0;
																else
																	win = 1;
																next = params[8];
															} else
																return;

															if (next == -1) {
																bot.sendMessage(message.chat.id, "Errore selezione stanza, riprova (" + next + ")", back);
																return;
															}

															if (next == 0)
																next++;

															if (win == 1) {
																connection.query('UPDATE dungeon_status SET param = NULL, timevar = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Premi un pulsante e sul muro appare un messaggio con scritto _'La stanza indicata corrisponde perfettamente alla sua descrizione!'_, vieni teletrasportato alla stanza " + next + " del dungeon", dNext);
																});
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = ' + next + ', last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															} else {
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '", timevar = timevar+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;

																	if (timecheck >= 5) {
																		connection.query('UPDATE dungeon_status SET room_id = ' + winroom + ', last_dir = NULL, param = NULL, timevar = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai esaurito i tentativi, vieni automaticamente sbalzato alla stanza corretta!", dNext);
																		});
																		return;
																	}

																	bot.sendMessage(message.chat.id, "Premi un pulsante ma sul muro appare un messaggio con scritto _'La stanza indicata non corrisponde alla sua descrizione, non conosci abbastanza bene il dungeon'_, sei costretto ad aspettare un po' di tempo per riprovare.", dNext);
																});
															}
														}
													});
												});
											} else if (dir == -4) {
												var iKeys = [];

												var text = "Nella stanza incontri un predone del deserto dall'aria docile, ti propone uno scambio, puoi accettarlo o ignorarlo e procedere.\n";

												connection.query('SELECT I.id As item1id, I.name As item1n, I2.id As item2id, I2.name As item2n FROM dungeon_trade DT INNER JOIN item I ON DT.item_1 = I.id INNER JOIN item I2 ON DT.item_2 = I2.id WHERE DT.dungeon_id = ' + dungeon_id + ' AND DT.room_id = ' + room_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0) {
														connection.query('UPDATE dungeon_status SET last_dir = NULL, room_id = room_id+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Il predone al momento non √® disponibile, la stanza viene saltata", dNext);
														});
														return;
													}
													text += "Ti offre *" + rows[0].item1n + "* in cambio del tuo *" + rows[0].item2n + "*";

													iKeys.push(["Accetta", "Ignora"]);
													iKeys.push(["Cerca *" + rows[0].item1n]);
													iKeys.push(["Cerca *" + rows[0].item2n]);
													iKeys.push(["Torna al menu"]);

													var item1id = rows[0].item1id;
													var item2id = rows[0].item2id;

													var dItems = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															keyboard: iKeys
														}
													};

													bot.sendMessage(message.chat.id, text, dItems).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															var ogg = answer.text;
															if (ogg == "Ignora") {
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	connection.query('UPDATE dungeon_status SET last_dir = NULL, room_id = room_id+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Decidi di ignorare il predone e prosegui", dNext);
																	});
																});
																return;
															} else if ((ogg == "Torna al menu") || (ogg.indexOf("*") != -1))
																return;
															else {
																bot.sendMessage(message.chat.id, "Sicuro di voler accettare lo scambio?", dYesNo).then(function () {
																	answerCallbacks[message.chat.id] = function (answer) {
																		if (answer.text.toLowerCase() == "si") {
																			if (getItemCnt(player_id, item2id) < 1) {
																				bot.sendMessage(message.chat.id, "Non possiedi l'oggetto richiesto", back);
																				return;
																			}

																			addItem(player_id, item1id);
																			delItem(player_id, item2id, 1);

																			if (boost_id == 8)
																				setBoost(player_id, boost_mission, boost_id);
																			connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});

																			connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});

																			bot.sendMessage(message.chat.id, "Scambio effettuato!", dNext);
																		}
																	}
																});

															}
														}
													});
												});
											} else if (dir == -5) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Medita"], ["Termina Meditazione"], ["Torna al menu"]]
													}
												};

												var text = "";
												if (param == null) {
													text = "Non hai ancora meditato";
													param = 0;
												} else {
													var plur = "e";
													if (param == 1)
														plur = "a";
													text = "Fin ora hai meditato " + param + " volt" + plur;
												}

												bot.sendMessage(message.chat.id, "Raggiungi una stanza con un'incisione profonda: Stanza della Meditazione, cosa vuoi fare?\n" + text, dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Medita") {
															if (param > 6) {
																bot.sendMessage(message.chat.id, "Non puoi meditare troppo a lungo", dNext);
																return;
															}
															if (param == 0) {
																connection.query('UPDATE dungeon_status SET param = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															} else {
																connection.query('UPDATE dungeon_status SET param = param+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															}

															var rand = Math.random() * 100;
															if (rand < 4) {
																addItem(player_id, 610);
																bot.sendMessage(message.chat.id, "Per l'altissimo livello di meditazione hai ottenuto un *Pass Oro*!", mark);
															}

															var d = new Date();
															if (cursed == 1)
																d.setMinutes(d.getMinutes() + 20 + (param * 20));
															else
																d.setMinutes(d.getMinutes() + 10 + (param * 10));
															var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
															var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

															connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai iniziato a meditare, finirai alle " + short_date, dNext);
															});
															return;
														} else if (answer.text == "Termina Meditazione") {
															if ((param == null) || (param == 0)) {
																bot.sendMessage(message.chat.id, "Affamato d‚Äôazione, decidi di non perdere tempo e prosegui senza esitare verso la prossima stanza...", dNext);
															} else {
																var rand = Math.random() * 100;
																if (cursed == 1)
																	param = param*2;
																if (rand < 30) {
																	addItem(player_id, 70, param);
																	bot.sendMessage(message.chat.id, "Per la meditazione prolungata, il saggio della montagna ti premia con " + param + "x Pietra Anima Preziosa!", dNext);
																} else if (rand < 60) {
																	addChest(player_id, 3, param);
																	bot.sendMessage(message.chat.id, "Per la meditazione prolungata, il saggio della montagna ti premia con " + param + "x Scrigni Preziosi!", dNext);
																} else {
																	if (param > 5)
																		param = param * 3;
																	else
																		param = param * 2;
																	addItem(player_id, 646, param);
																	bot.sendMessage(message.chat.id, "Per la meditazione prolungata, il saggio della montagna ti premia con " + param + "x Polvere!", dNext);
																}
															}

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET param = NULL, room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else
															return;
													}
												});
											} else if (dir == -6) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Tornare in piena salute"], ["Avere uno zaino pieno zeppo"], ["Essere ricco sfondato"], ["Completare il dungeon velocemente"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Davanti a te si erge un portale completamente rosso, una voce rimbomba al suo interno: esprimi un desiderio avventuriero! 'Vorrei...'", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														var rand = Math.random() * 100;
														if (answer.text == "Tornare in piena salute") {
															if (rand < 40) {
																connection.query('UPDATE player SET life = total_life WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ed √® stato ascoltato! Hai recuperato tutti gli hp!", dNext);
																});
															} else {
																connection.query('UPDATE player SET life = 1 WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Ti rimane 1 solo hp!", dNext);
																});
															}
															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else if (answer.text == "Avere uno zaino pieno zeppo") {
															connection.query('SELECT item.id, item.name FROM item, inventory WHERE item.id = inventory.item_id AND rarity = "UR" AND player_id = ' + player_id + ' AND inventory.quantity > 0 ORDER BY RAND()', function (err, rows, fields) {
																if (err) throw err;
																if (rand < 40) {
																	var name = rows[0].name;
																	addItem(player_id, rows[0].id);
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ed √® stato ascoltato! Hai ottenuto " + name + "!", dNext);
																} else {
																	if (Object.keys(rows).length == 0) {
																		bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Avendo lo zaino vuoto per√≤ non hai perso nulla!", dNext);
																	} else {
																		var name = rows[0].name;
																		delItem(player_id, rows[0].id, 1);
																		bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Hai perso " + name + "!", dNext);
																	}
																}
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															});
														} else if (answer.text == "Essere ricco sfondato") {
															if (player_rank == 0)
																player_rank = 1;
															var money = Math.round(getRandomArbitrary(100 * player_rank, 300 * player_rank));
															if (rand < 40) {
																connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ed √® stato ascoltato! Hai ottenuto " + formatNumber(money) + " ¬ß!", dNext);
																	setAchievement(player_id, 83, money);
																});
															} else {
																connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	if (rows[0].money < money)
																		money = rows[0].money;
																	connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Hai perso " + formatNumber(money) + " ¬ß!", dNext);
																	});
																});
															}
															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else if (answer.text == "Completare il dungeon velocemente") {
															if (rand < 40) {
																room_id += 2;
																bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ed √® stato ascoltato! Avanzi di due stanze!", dNext);
															} else {
																if (room_id < 3) {
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Essendo all'inizio del dungeon vieni sbalzato fuori perdendo un punto rango!", back);

																	var d = new Date();
																	d.setHours(d.getHours() + wait_dungeon_long);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	if (player_rank > 0) {
																		connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																} else {
																	room_id -= 2;
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Retrocedi di due stanze!", dNext);
																}
															}
															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = ' + room_id + ', last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else
															return;
													};
												});
											} else if (dir == -7) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Attacca con il Drago"], ["Ignora"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Entri nella stanza e per sbaglio pesti una mattonella leggermente rovinata, il muro si apre ed esce l'immenso drago di LastSoldier95, cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Attacca con il Drago") {

															connection.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;

																var combat = 0;
																if (Object.keys(rows).length > 0)
																	combat = rows[0].combat;

																var rand = Math.random()*100;
																connection.query('SELECT name, type, level, life, sleep_h FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;

																	if ((Object.keys(rows).length == 0) || (combat == 1)) {
																		addItem(player_id, 70);
																		bot.sendMessage(message.chat.id, "Colpendo il drago scopri che si tratta in realt√† di un peluche, ma comunque ottieni una Pietra Anima Preziosa!", dNext);
																	} else {
																		var dragon_name = rows[0].name + " " + rows[0].type;
																		if ((rows[0].life > 0) || ((rows[0].life == 0) && (rows[0].sleep_h > 0))) {
																			if (rows[0].level/4 > rand) {
																				var max = 1;
																				if (cursed == 1)
																					max = 3;
																				var qnt = Math.round(getRandomArbitrary(1, max));
																				addItem(player_id, 72, qnt);
																				bot.sendMessage(message.chat.id, dragon_name + " riesce a sconfiggere il grande Drago Darkrai, lasciandolo a terra esausto! Passando per la sua dimora sgraffigni velocemente " + qnt + "x Pietra Cuore Leggendario!", dNext);
																			} else {
																				var max = 5;
																				if (cursed == 1)
																					max = 15;
																				var lost = Math.round(getRandomArbitrary(5, max));
																				connection.query('UPDATE dragon SET exp = exp-' + lost + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																					bot.sendMessage(message.chat.id, dragon_name + " viene spazzato via dal grande Drago Darkrai, cos√¨ perde " + lost + " punti pietra!", dNext);
																					checkDragon(player_id);
																				});
																			}
																		} else {
																			addItem(player_id, 71);
																			bot.sendMessage(message.chat.id, "Colpendo il drago scopri che si tratta in realt√† di un peluche, ma comunque ottieni una Pietra Anima Preziosa!", dNext);
																		}
																	};
																	if (boost_id == 8)
																		setBoost(player_id, boost_mission, boost_id);
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																});
															});
														} else if (answer.text == "Ignora") {
															bot.sendMessage(message.chat.id, "Corri velocemente verso l'uscita e passi alla stanza successiva", dNext);
															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else
															return;
													};
												});
											} else if (dir == -8) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["..."], ["Torna al menu"]]
													}
												};

												setAchievement(player_id, 50, 1);

												bot.sendMessage(message.chat.id, "Entri in una stanza apparentemente vuota, cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "...") {
															var rand = Math.random() * 200;
															var text = "";

															var qnt = 1;
															if (cursed == 1)
																qnt = 2;

															if (rand < 50) {
																addItem(player_id, 93, qnt);
																text = "qualcosa che in effetti potrebbe farti sentire meglio...";
															} else if (rand < 70) {
																addItem(player_id, 619, qnt);
																text = "qualcosa che pu√≤ farti rialzare una volta in pi√π...";
															} else if (rand < 105) {
																connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																text = "qualcosa che luccica e riflette la luce in modo incredibile...";
															} else if (rand < 140) {
																var d = new Date();
																if ((d.getMonth() < 4) || (d.getMonth() > 7)) {	//gennaio->maggio, settembre->dicembre
																	addItem(player_id, 33, qnt);
																	text = "qualcosa che ti fa stare un po' pi√π al caldo...";
																} else {
																	addItem(player_id, 269, qnt);
																	text = "qualcosa che ti fa sentire un po' pi√π al fresco...";
																}
															} else if (rand < 170) {
																addItem(player_id, 646, qnt*5);
																text = "qualcosa che ti provoca un prurito fastidioso...";
															} else if (rand < 199) {
																setExp(player_id, 10, qnt);
																text = "qualcosa che ti fa sentire un po' pi√π esperto di prima...";
															} else {
																addItem(player_id, 200, qnt);
																text = "qualcosa che ti provoca un brivido nella schiena...";
															}

															bot.sendMessage(message.chat.id, "Succede qualcosa, " + text + "\nProcedi alla prossima stanza con aria interrogativa...", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														};
													};
												});
											} else if (dir == -9) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Punta"], ["Ignora"], ["Torna al menu"]]
													}
												};

												var dOptions2 = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Gioca"], ["Torna al menu"]]
													}
												};

												var dNum = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["1", "2", "3"], ["4", "5", "6"], ["Torna al menu"]]
													}
												};

												if (param != null) {

													var id = param.split(":");

													connection.query('SELECT name FROM item WHERE id = ' + id[0], function (err, rows, fields) {
														if (err) throw err;

														var name1 = rows[0].name; //player

														connection.query('SELECT name FROM item WHERE id = ' + id[1], function (err, rows, fields) {
															if (err) throw err;

															var name2 = rows[0].name; //marinaio

															bot.sendMessage(message.chat.id, "Il marinaio aspetta il tuo turno avendo puntato *" + name2 + "*, mentre tu hai puntato *" + name1 + "*, scegli un numero da 1 a 6 e lancia il dado, il vincitore sar√† colui che si avviciner√† di pi√π al risultato del dado", dNum).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text == "Torna al menu")
																		return;
																	else {
																		var num1 = Math.round(parseInt(answer.text));
																		if ((num1 < 1) || (num1 > 6) || (isNaN(num1))) {
																			bot.sendMessage(message.chat.id, "Il dado ha solo numeri da 1 a 6...", dBack);
																			return;
																		}
																		var num2 = Math.round(Math.random() * 5 + 1);
																		var dado = Math.round(Math.random() * 5 + 1);

																		var vic1 = Math.abs(dado - num1);
																		var vic2 = Math.abs(dado - num2);

																		var text = "Tu hai scelto il *" + num1 + "*\nIl marinaio ha scelto il *" + num2 + "*\n\nSul dado √® uscito il... *" + dado + "*!";
																		if (vic1 < vic2) {
																			bot.sendMessage(message.chat.id, text + "\n\nHai VINTO!", dNext);
																			addItem(player_id, id[0]);
																			addItem(player_id, id[1]);
																		} else if (vic1 == vic2) {
																			addItem(player_id, id[0]);
																			bot.sendMessage(message.chat.id, text + "\n\nPARITA'! Hai recuperato il tuo oggetto!", dNext);
																		} else {
																			bot.sendMessage(message.chat.id, text + "\n\nHai PERSO!", dNext);
																		}
																		if (boost_id == 8)
																			setBoost(player_id, boost_mission, boost_id);
																		connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																}
															});
														});
													});
												} else {
													bot.sendMessage(message.chat.id, "Nella stanza incontri un marinaio dall'aria furba. Ti propone una partita ai dadi, il vincitore otterr√† l'oggetto dell'avversario! Vuoi partecipare?", dOptions).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text == "Punta") {
																bot.sendMessage(message.chat.id, "Inserisci il nome dell'oggetto da puntare, solo oggetti base e rarit√† fino alla E", back).then(function () {
																	answerCallbacks[message.chat.id] = function (answer) {
																		if (answer.text == "Torna al menu")
																			return;
																		else {
																			connection.query('SELECT item.id, item.rarity, item.name FROM item, inventory WHERE item.id = inventory.item_id AND player_id = ' + player_id + ' AND name = "' + answer.text + '" AND craftable = 0 AND item.rarity IN ("C","NC","R","UR","L","E") AND inventory.quantity > 0', function (err, rows, fields) {
																				if (err) throw err;
																				if (Object.keys(rows).length == 0) {
																					bot.sendMessage(message.chat.id, "L'oggetto inserito non √® valido", back);
																					return;
																				}

																				var id1 = rows[0].id;
																				var name1 = rows[0].name;
																				var rar = rows[0].rarity;

																				delItem(player_id, id1, 1);

																				connection.query('SELECT id, name FROM item WHERE craftable = 0 AND item.rarity = "' + rar + '" AND id != ' + id1 + ' ORDER BY RAND()', function (err, rows, fields) {
																					if (err) throw err;

																					var id2 = rows[0].id;
																					var name2 = rows[0].name;

																					param = id1 + ":" + id2;

																					connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																					bot.sendMessage(message.chat.id, "Hai puntato il tuo oggetto", dNext);
																				});
																			});
																		}
																	};
																});
															} else if (answer.text == "Ignora") {
																bot.sendMessage(message.chat.id, "Ringrazi il marinaio dell'offerta e passi alla stanza successiva", dNext);
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															}
														}
													});
												}
											} else if (dir == -10) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Porta Normale"], ["Porta Misteriosa"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Oltrepassando la porta ti trovi davanti ad altre due porte, una con un'aria familiare, l'altra con un grosso punto interrogativo scolpito sopra, quale apri?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Porta Normale") {

															bot.sendMessage(message.chat.id, "Scegli la solita porta arrugginita e procedi alla stanza successiva", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else if (answer.text == "Porta Misteriosa") {
															connection.query('SELECT room_id FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;

																var room_id = parseInt(rows[0].room_id);

																connection.query('SELECT rooms FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
																	if (err) throw err;
																	var rooms = rows[0].rooms;

																	var variation = 10;
																	if (cursed == 1)
																		variation = 15;

																	var min = room_id - variation;
																	var max = room_id + variation;

																	if (min <= 0)
																		min = 1;
																	if (max > rooms)
																		max = rooms;

																	var room = room_id;
																	while (room == room_id)
																		room = Math.round(getRandomArbitrary(min, max));

																	bot.sendMessage(message.chat.id, "Apri lentamente la porta e la attraversi, ritrovandoti alla stanza numero *" + room + "* del dungeon!", dNext);

																	if (boost_id == 8)
																		setBoost(player_id, boost_mission, boost_id);
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = ' + room + ', last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																});
															});
														}
													};
												});
											} else if (dir == -11) {
												connection.query('SELECT amount FROM dungeon_well WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Vedi un pozzo in lontananza, ma √® diroccato e non puoi far altro che proseguire", dNext);
														if (boost_id == 8)
															setBoost(player_id, boost_mission, boost_id);
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
														return;
													}

													var stored_money = rows[0].amount;
													var min = player_rank * 100;

													if (min == 0)
														min = 1000;

													var dOptions = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															keyboard: [[min + " ¬ß"], ["Prova a raccoglierle"], ["Torna al menu"]]
														}
													};

													var text = "";
													if (stored_money == 0)
														text = "_Neanche l'ombra di una monetina..._";
													else if (stored_money < 100000)
														text = "_Una piccola quantit√† di monetine..._";
													else if (stored_money < 500000)
														text = "_Alcune monetine..._";
													else if (stored_money < 10000000)
														text = "_Un bel gruzzolo..._";
													else
														text = "_Un ottimo malloppo..._";

													bot.sendMessage(message.chat.id, "Una luce esagerata ti avvolge, esci in un piccolo spiazzo di prato con un pozzo al centro ed uno schermino appoggiato sopra, puoi buttare una porzione di monetine al suo interno, sembra l'unico modo per proseguire, oppure puoi cercare di raccogliere tutto il malloppo.\n\nLo schermino segna: '" + text + "', butti...", dOptions).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.indexOf("¬ß") != -1) {

																var money = parseInt(answer.text.replace("¬ß", ""));

																if (money < min) {
																	bot.sendMessage(message.chat.id, "Inserisci almeno il valore minimo: " + min + " ¬ß!", dBack);
																	return;
																}

																connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	var mymoney = rows[0].money;

																	if (mymoney < money) {
																		bot.sendMessage(message.chat.id, "Non hai cos√¨ tante monetine...", dBack);
																		return;
																	}

																	if (money <= 0) {
																		bot.sendMessage(message.chat.id, "Non essere cos√¨ tirchio!", dNext);
																		return;
																	}

																	if (mymoney == 0) {
																		bot.sendMessage(message.chat.id, "Non puoi procedere senza monete!", dBack);
																		return;
																	}

																	connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Hai gettato nel pozzo *" + formatNumber(money) + "* monetine!\nOra prosegui alla prossima stanza", dNext);

																		connection.query('UPDATE dungeon_well SET amount = amount+' + money + ' WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		if (boost_id == 8)
																			setBoost(player_id, boost_mission, boost_id);
																		connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	});
																});
															} else if (answer.text == "Prova a raccoglierle") {
																var rand = Math.random() * 100;

																if (stored_money == 0) {
																	bot.sendMessage(message.chat.id, "Il pozzo √® vuoto, √® inutile cercare di prendere qualcosa", dBack);
																	return;
																}

																connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;

																	var mymoney = rows[0].money;
																	if (mymoney < Math.round(stored_money)) {
																		bot.sendMessage(message.chat.id, "Il pozzo √® troppo alto per te! Non puoi farcela, procedi in altro modo", dBack);
																		return;
																	}

																	if (mymoney == 0) {
																		bot.sendMessage(message.chat.id, "Non puoi procedere senza monete!", dBack);
																		return;
																	}

																	if (rand < 40) {
																		connection.query('UPDATE player SET money = money+' + stored_money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Sei tornato tutto intero con un sacchettino contenente *" + formatNumber(stored_money) + "* monetine!\nOra prosegui alla prossima stanza", dNext);

																			setAchievement(player_id, 83, stored_money);
																		});
																		connection.query('UPDATE dungeon_well SET amount = 0 WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	} else {
																		connection.query('UPDATE player SET money = money-' + stored_money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Cerchi di raggiungere le monete ma purtroppo non ci arrivi. Nel tentativo ti sei sporto troppo e te ne sono cadute *" + formatNumber(stored_money) + "*!\nOra prosegui alla prossima stanza", dNext);
																		});
																		connection.query('UPDATE dungeon_well SET amount = amount+' + stored_money + ' WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																	if (boost_id == 8)
																		setBoost(player_id, boost_mission, boost_id);
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																});
															}
														}
													});
												});
											} else if (dir == -12) {

												var keys = 1;
												if (cursed == 1)
													keys = 2;

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Consegna " + keys + " üóù"], ["Ignora"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Al centro della stanza vedi un signore anziano con gli occhi sbarrati, si alza e ti porge la mano con un simbolo disegnato sopra: " + keys + " üóù. Cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text.indexOf("Consegna") != -1) {
															bot.sendMessage(message.chat.id, "Sicuro?", dYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {

																	if (answer.text.toLowerCase() != "si")
																		return;

																	connection.query('SELECT mkeys FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;

																		if (rows[0].mkeys < keys) {
																			bot.sendMessage(message.chat.id, "Non hai abbastanza üóù, ne servono "  +keys + ", ignori l'anziano saggio e prosegui", dNext);

																			if (boost_id == 8)
																				setBoost(player_id, boost_mission, boost_id);
																			connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		} else {
																			connection.query('UPDATE player SET mkeys = mkeys-' + keys + ' WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;

																				var rand = Math.round(Math.random()*2);
																				var sage_dir = "";
																				var text_dir = "";
																				if (rand == 0) {
																					sage_dir = "dir_top";
																					text_dir = "dritto";
																				} else if (rand == 1) {
																					sage_dir = "dir_left";
																					text_dir = "sinistra";
																				} else if (rand == 2) {
																					sage_dir = "dir_right";
																					text_dir = "destra";
																				}

																				connection.query('SELECT room_id, ' + sage_dir + ' As dir FROM dungeon_rooms WHERE dungeon_id = ' + dungeon_id + ' AND room_id > ' + room_id + ' AND ' + sage_dir + ' < 11 ORDER BY RAND()', function (err, rows, fields) {
																					if (err) throw err;
																					if (Object.keys(rows).length > 0) {
																						bot.sendMessage(message.chat.id, "L'anziano si concentra e un'aura azzurrina si forma attorno a lui, dopo alcuni secondi spalanca gli occhi urlando: " + dungeonToDesc(rows[0].dir).toUpperCase() + " " + text_dir.toUpperCase() + " " + rows[0].room_id + "!!\nDopo di che se ne va a passo lento...", dNext);

																						if (boost_id == 8)
																							setBoost(player_id, boost_mission, boost_id);
																						connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																						connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					} else {
																						bot.sendMessage(message.chat.id, "L'anziano purtroppo non riesce a vedere alcuna stanza particolare davanti a te, ti restituisce le üóù e ti congeda con un po' di malinconia sul volto...", dNext);

																						connection.query('UPDATE player SET mkeys = mkeys+10 WHERE id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});

																						if (boost_id == 8)
																							setBoost(player_id, boost_mission, boost_id);
																						connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																						connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					}
																				});
																			});
																		}
																	});
																}
															});
														} else if (answer.text == "Ignora") {

															bot.sendMessage(message.chat.id, "Hai ignorato l'anziano saggio", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													}
												});
											} else if (dir == -13) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Disturba"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "_Ehy amico lo sai chi sono?_. Si presenta cos√¨ un tipo strano in un angolino della stanza. _Posso fare solo ci√≤ che non vorresti!_. Si gira di schiena e digita qualcosa su un marchingegno strano...", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Disturba") {

															var randKey = Math.random() * 100;
															if (randKey < 5) {
																addItem(player_id, 784);
																bot.sendMessage(message.chat.id, "Di colpo appare nello zaino una *Chiave Tipo C*!", dNext);
															}

															connection.query('SELECT id, room_id, dir_top, dir_right, dir_left FROM dungeon_rooms WHERE dungeon_id = ' + dungeon_id + ' AND room_id != ' + room_id + ' ORDER BY RAND()', function (err, rows, fields) {
																if (err) throw err;

																var arr = [rows[0].dir_top, rows[0].dir_left, rows[0].dir_right];
																arr = shuffle(arr);
																var newT = arr[0];
																var newL = arr[1];
																var newR = arr[2];

																connection.query('UPDATE dungeon_rooms SET dir_right = ' + newR + ', dir_left = ' + newL + ', dir_top = ' + newT + ' WHERE id = ' + rows[0].id, function (err, rows, fields) {
																	if (err) throw err;
																});
																bot.sendMessage(message.chat.id, "Tocchi lo strano tipo sulla schiena. Si gira di scatto: _Amico ho appena invertito le scelte della stanza " + rows[0].room_id + ", buon divertimento! ihih..._ Ti giri e continui seguendo il corridoio...", dNext);

																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});

																setAchievement(player_id, 79, 1);
															});
														}
													}
												});
											} else if (dir == -14) {

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Tocchi lo specchio", "Ignora"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Entri in una stanza con un piccolo specchio al centro. Ti avvicini e noti che √® morbido, quasi liquido...", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Tocchi lo specchio") {
															var new_dir = 0;
															if (Math.round(Math.random()) == 1) {
																new_dir = Math.round(Math.random() * 10 + (room_num + 1));
																if (new_dir > max_mob_value)
																	new_dir = max_mob_value;
															} else {
																// esclude 4, -4, -11, -14
																while ((new_dir == 0) || (new_dir == 4) || (new_dir == -4) || (new_dir == -11) || (new_dir == -14))
																	new_dir = Math.round(Math.random() * 21 - max_rooms_neg);
															}

															var my_dir = "";
															if (dir == dir_top)
																my_dir = "dir_top";
															else if (dir == dir_right)
																my_dir = "dir_right";
															else if (dir == dir_left)
																my_dir = "dir_left";
															else {
																bot.sendMessage(message.chat.id, "Questa stanza √® gi√† stata specchiata, retrocedi alla precedente", dNext);
																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																if (room_id > 1) {
																	connection.query('UPDATE dungeon_status SET room_id = room_id-1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																} else {
																	connection.query('UPDATE dungeon_status SET last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																return;
															}

															bot.sendMessage(message.chat.id, "Un sospiro...\nSbatti gli occhi e senti il tuo corpo farsi pesante. La stanza si smaterializza e cambia aspetto, diventando una stanza _" + dungeonToDesc(new_dir) + "_ mentre vieni sbalzato indietro da una forza misteriosa.", dNext);

															connection.query('UPDATE dungeon_rooms SET ' + my_dir + ' = ' + new_dir + ' WHERE room_id = ' + room_id + ' AND dungeon_id = ' + dungeon_id, function (err, rows, fields) {
																if (err) throw err;
															});

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															if (room_id > 1) {
																connection.query('UPDATE dungeon_status SET room_id = room_id-1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															} else {
																connection.query('UPDATE dungeon_status SET last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															}
														} else if (answer.text == "Ignora") {
															bot.sendMessage(message.chat.id, "Giri curioso attorno al piccolo specchio, e lo osservi incresparsi come una tavola d'acqua col vento...\nEsiti un ultimo istante, prima di proseguire verso la prossima stanza", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													}
												});
											} else if (dir == -15) {

												connection.query('SELECT id FROM item WHERE craftable = 1 AND rarity IN ("NC","R","UR","L","E") ORDER BY RAND()', function (err, rows, fields) {
													if (err) throw err;

													var itemid = rows[0].id;

													connection.query('SELECT id FROM item WHERE name LIKE "Bevanda%" ORDER BY RAND()', function (err, rows, fields) {
														if (err) throw err;
														if (param == null) {
															param = itemid + "," + rows[0].id;
															connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}

														var item1 = param.split(",")[0];	// Craft
														var item2 = param.split(",")[1];	// Bevanda

														connection.query('SELECT name FROM item WHERE id = ' + item1, function (err, rows, fields) {
															if (err) throw err;

															var item1_name = rows[0].name;

															var item1qnt = getItemCnt(player_id, item1);
															var item_poss = "";
															if (item1qnt > 0)
																item_poss = " ‚úÖ";

															connection.query('SELECT name FROM item WHERE id = ' + item2, function (err, rows, fields) {
																if (err) throw err;

																var item2_name = rows[0].name;

																var dOptions = {
																	parse_mode: "Markdown",
																	reply_markup: {
																		resize_keyboard: true,
																		keyboard: [["Si", "No"], ["Cerca *" + item1_name], ["Torna al menu"]]
																	}
																};

																bot.sendMessage(message.chat.id, "Non fai che un passo, una voce mite ma ferma ti paralizza:\n¬´Io sono l'Alchimista dell'Ovest e ti chiedo, giovane " + gender_text_g + ": scambieresti il tuo *" + item1_name + "*" + item_poss + " per *" + item2_name + "*?¬ª", dOptions).then(function () {
																	answerCallbacks[message.chat.id] = function (answer) {
																		if (answer.text == "Si") {

																			if (getItemCnt(player_id, item1) == 0) {
																				bot.sendMessage(message.chat.id, "Non possiedi l'oggetto richiesto", dBack);
																				return;
																			}

																			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 19', function (err, rows, fields) {
																				if (err) throw err;

																				var abBonusStone = 0;
																				if (Object.keys(rows).length > 0)
																					abBonusStone = parseInt(rows[0].ability_level) * rows[0].val;

																				var rand3 = Math.random()*100;
																				var mplus = 0;
																				var boost_mission = 0;
																				if (rand3 < abBonusStone)
																					mplus = 1;

																				var boost_id = 0;
																				var boost_mission = 3;
																				if (item2 == 48)
																					boost_id = 1;
																				else if (item2 == 601)
																					boost_id = 2;
																				else if (item2 == 613)
																					boost_id = 3;
																				else if (item2 == 617) {
																					boost_mission = 2;
																					boost_id = 4;
																				} else if (item2 == 642)
																					boost_id = 5;
																				else if (item2 == 265)
																					boost_id = 6;
																				else if (item2 == 650)
																					boost_id = 7;
																				else if (item2 == 758) {
																					boost_mission = 2;	// solo in questo caso, +1 utilizzi perch√® ne "spreca" uno in questa stanza (dopo)
																					boost_id = 8;
																				} else if (item2 == 760) {
																					boost_mission = 2;
																					boost_id = 9;
																				} else {
																					bot.sendMessage(message.chat.id, "Bevanda non valida", dBack);
																					return;
																				}

																				boost_mission += mplus;

																				if (boost_id == 8)
																					boost_mission++;

																				delItem(player_id, item1, 1);
																				setAchievement(player_id, 78, 1);
																				setAchievement(player_id, 69, 1);

																				connection.query('UPDATE player SET boost_id = ' + boost_id + ', boost_mission = ' + boost_mission + ' WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;

																					bot.sendMessage(message.chat.id, "Hai bevuto la " + item2_name + " e ti senti un po' meglio, prosegui il dungeon", dNext);

																					if (boost_id == 8)
																						setBoost(player_id, boost_mission, boost_id);

																					connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																					connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																				});
																			});
																		} else if (answer.text == "No") {

																			bot.sendMessage(message.chat.id, "Ignori l'offerta e prosegui", dNext);

																			if (boost_id == 8)
																				setBoost(player_id, boost_mission, boost_id);

																			connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																	}
																});
															});
														});
													});
												});
											} else if (dir == -16) {

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Consegna üóù"], ["Ignora"], ["Torna al menu"]]
													}
												};

												var keys = 1;
												if (cursed == 1)
													keys = 2;

												bot.sendMessage(message.chat.id, "Sull'angolo della stanza noti un uomo magro con un cappello a forma di Bomba, si presenta come Bombarolo e chiede " + keys + "x Chiave Mistica üóù in cambio di una delle sue creazioni, cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text.indexOf("Consegna") != -1) {
															connection.query('SELECT mkeys FROM player WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;

																if (rows[0].mkeys < keys) {
																	bot.sendMessage(message.chat.id, "Non hai abbastanza üóù!", dBack);
																	return;
																}

																connection.query('SELECT id, name FROM item WHERE cons_val > 0 AND category = 4 AND rarity IN ("C","NC","R","UR") ORDER BY RAND()', function (err, rows, fields) {
																	if (err) throw err;

																	var item_id = rows[0].id;
																	var item_name = rows[0].name;

																	bot.sendMessage(message.chat.id, "Decidi di donare " + keys + "x üóù al Bombarolo, che con grande felicit√† e fierezza ricambia regalandoti 1x *" + item_name + "*!", dNext);
																	addItem(player_id, item_id);

																	connection.query('UPDATE player SET mkeys = mkeys-' + keys + ' WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});

																	if (boost_id == 8)
																		setBoost(player_id, boost_mission, boost_id);
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																});
															});
														} else if (answer.text == "Ignora") {

															bot.sendMessage(message.chat.id, "Ignori la richiesta e prosegui", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);

															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													}
												});
											} else if (dir == -17) {

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Attraversa"], ["Ignora"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Senti puzza di bruciato, ti accorgi di essere entrato in una stanza piena di esplosivi, vedi un piccolo Scrigno al centro, cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text.indexOf("Attraversa") != -1) {
															connection.query('SELECT item.id, item.name FROM inventory, item WHERE inventory.item_id = item.id AND cons_val > 0 AND category = 4 AND rarity IN ("C","NC","R","UR") AND quantity > 0 AND player_id = ' + player_id + ' ORDER BY RAND()', function (err, rows, fields) {
																if (err) throw err;

																var item_id = 0;
																var item_name = "";
																if (Object.keys(rows).length > 0) {
																	item_id = rows[0].id;
																	item_name = rows[0].name;
																}

																var rand = Math.random()*100;
																var text = "";
																if (rand < 60) {
																	if (item_id != 0) {
																		text = "Muovendoti lentamente senti un fruscio provenire dallo zaino, ti allontani velocemente e vedi saltare in aria un *" + item_name + "*!\nProsegui con la faccia piena di fuliggine...";
																		delItem(player_id, item_id, 1);
																	} else {
																		text = "Muovendoti lentamente senti un fruscio provenire dallo zaino, ti allontani velocemente ma non succede nulla!\nRiprendi lo zaino e prosegui...";
																	}
																} else {
																	var qnt = Math.round(getRandomArbitrary(5, 10));
																	if (cursed == 1)
																		qnt = qnt*2;
																	text = "Muovendoti lentamente senti un fruscio provenire dietro alcune casse impilate, indaghi e vedi un mucchietto di " + qnt + "x *Polvere* che non ti lasci scappare!\nProsegui con la faccia piena di fuliggine...";
																	addItem(player_id, 646, qnt);
																}

																bot.sendMessage(message.chat.id, text, dNext);

																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});

																setAchievement(player_id, 80, 1);
															});
														} else if (answer.text == "Ignora") {

															bot.sendMessage(message.chat.id, "Ignori la stanza e prosegui", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);

															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													}
												});
											} else if (dir == -18) {

												var qnt = 1;
												if (cursed == 1)
													qnt = 2;

												connection.query('SELECT id FROM item WHERE estimate BETWEEN 50000 AND 250000 AND rarity IN ("E","L") ORDER BY RAND()', function (err, rows, fields) {
													if (err) throw err;

													var itemid = rows[0].id;
													if (param == null) {
														param = itemid;
														connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}

													var item1 = param;

													var item1qnt = getItemCnt(player_id, item1);
													var item_poss = "";
													if (item1qnt > 0)
														item_poss = " ‚úÖ";

													connection.query('SELECT name FROM item WHERE id = ' + item1, function (err, rows, fields) {
														if (err) throw err;

														var item1_name = rows[0].name;

														var dOptions = {
															parse_mode: "Markdown",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [["Si", "No"], ["Cerca *" + item1_name], ["Torna al menu"]]
															}
														};

														bot.sendMessage(message.chat.id, "Entri in una stanza completamente luccicante, quasi accecante, uno strano tipo barbuto si presenta come il Gioielliere, offre " + qnt + "x üíé in cambio di un particolare oggetto, in questo caso: *" + item1_name + "*" + item_poss + ", accetti l'offerta?", dOptions).then(function () {
															answerCallbacks[message.chat.id] = function (answer) {
																if (answer.text == "Si") {

																	if (getItemCnt(player_id, item1) == 0) {
																		bot.sendMessage(message.chat.id, "Non possiedi l'oggetto richiesto", dBack);
																		return;
																	}

																	bot.sendMessage(message.chat.id, "Accetti l'offerta del Gioielliere, che sogghignando si prepara a cambiare la sua offerta per i prossimi passanti, intanto prosegui il dungeon chiudendoti la porta alle spalle...", dNext);

																	delItem(player_id, item1, 1);
																	setAchievement(player_id, 77, 1);

																	connection.query('UPDATE player SET gems = gems+' + qnt + ' WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;

																		if (boost_id == 8)
																			setBoost(player_id, boost_mission, boost_id);

																		connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	});
																} else if (answer.text == "No") {

																	bot.sendMessage(message.chat.id, "Ignori l'offerta del Gioielliere e prosegui", dNext);

																	if (boost_id == 8)
																		setBoost(player_id, boost_mission, boost_id);

																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}
														});
													});
												});
											} else if (dir == -19) {

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Passi attraverso"], ["Passi di fianco"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Spalancata la porta della stanza vieni sbalzato all'indietro da una potentissima energia magica, cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text.indexOf("Passi attraverso") != -1) {

															connection.query('SELECT weapon2_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {

																var weapon2_id = rows[0].weapon2_id;

																connection.query('SELECT 1 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	if (Object.keys(rows).length == 0) {
																		bot.sendMessage(message.chat.id, "Non sei ancora degno di accedere a questa stanza, puoi solo evitarla", dBack);
																		return;
																	}

																	var rand = Math.random()*100;
																	var text = "";

																	var mana = 0;
																	var name = "";
																	var qnt = Math.round(getRandomArbitrary(100, 400))
																	var life = 0.75;
																	if (cursed == 1) {
																		qnt = qnt*2;
																		life = 0.9;
																	}
																	if (weapon2_id == 690)
																		mana = 2;
																	else if (weapon2_id == 688)
																		mana = 3;
																	else if (weapon2_id == 689)
																		mana = 1;
																	else if (weapon2_id == 790) {
																		var randMana = Math.round(getRandomArbitrary(1, 3));
																		mana = randMana;
																	}

																	if (mana == 1)
																		name = "Blu";
																	else if (mana == 2)
																		name = "Giallo";
																	else if (mana == 3)
																		name = "Rosso";

																	if (mana > 0) {
																		if (rand < 40) {
																			text = "Scegli di affrontare l'energia magica, ma con il tuo scudo riesci a proteggerti ed ad assorbire " + qnt + " Mana " + name + "!\nSuperata la prova prosegui il dungeon sospirando...";
																		} else {
																			text = "Scegli di affrontare l'energia magica, il tuo scudo non riesce a proteggerti e vieni investito dall'ondata, ma riesci comunque ad assorbire " + qnt + " Mana " + name + "!\nSuperata la prova prosegui il dungeon sospirando...";
																			connection.query('UPDATE player SET life = ROUND(life-(life*' + life + ')) WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																		connection.query('UPDATE event_mana_status SET mana_' + mana + ' = mana_' + mana + ' + ' + qnt + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		setAchievement(player_id, 29, qnt);
																		setAchievement(player_id, 81, qnt);
																	} else {
																		text = "Scegli di affrontare l'energia magica, il tuo scudo non riesce a proteggerti e vieni investito dall'ondata!\nSuperata la prova prosegui il dungeon sospirando...";

																		connection.query('UPDATE player SET life = ROUND(life-(life*0.75)) WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	}

																	bot.sendMessage(message.chat.id, text, dNext);

																	if (boost_id == 8)
																		setBoost(player_id, boost_mission, boost_id);
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																});
															});
														} else if (answer.text == "Passi di fianco") {

															bot.sendMessage(message.chat.id, "Cerchi di evitare il fascio di energia passando a fianco e procedi alla prossima stanza...", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);

															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													}
												});
											} else if (dir == -20) {

												connection.query('SELECT id FROM item WHERE rarity = "D" AND name NOT LIKE "Pietra%" ORDER BY RAND()', function (err, rows, fields) {
													if (err) throw err;

													var itemid = rows[0].id;
													if (param == null) {
														param = itemid;
														connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}

													var item1 = param;

													connection.query('SELECT name FROM item WHERE id = ' + item1, function (err, rows, fields) {
														if (err) throw err;

														var item1_name = rows[0].name;

														var dOptions = {
															parse_mode: "Markdown",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [["Si", "No"], ["Cerca *" + item1_name], ["Torna al menu"]]
															}
														};

														var dYesNo = {
															parse_mode: "Markdown",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [["Si"], ["Torna al menu"]]
															}
														};

														var qnt = 5;
														if (cursed == 1)
															qnt = 10;

														bot.sendMessage(message.chat.id, "Entri in una stanza che non ha affatto le sembianze di una stanza, piuttosto un grosso parco, al centro una ragazza circondata da Draghi, si tratta di un *Mercante Draconico*, fornisce oggetti utili al proprio drago in cambio di " + qnt + "x Pietre Cuore Leggendario.\nStavolta vuole scambiare *" + item1_name + "*, accetti l'offerta?", dOptions).then(function () {
															answerCallbacks[message.chat.id] = function (answer) {
																if (answer.text.toLowerCase() == "si") {

																	bot.sendMessage(message.chat.id, "Sicuro di accettare lo scambio?", dYesNo).then(function () {
																		answerCallbacks[message.chat.id] = function (answer) {

																			if (answer.text.toLowerCase() != "si")
																				return;

																			if (getItemCnt(player_id, 72) < qnt) {
																				bot.sendMessage(message.chat.id, "Non possiedi abbastanza copie dell'oggetto richiesto", dBack);
																				return;
																			}

																			bot.sendMessage(message.chat.id, "Accetti lo scambio del Mercante che ti ringrazia sorridendo e ti porge l'oggetto pattuito, prosegui velocemente alla stanza successiva...", dNext);

																			delItem(player_id, 72, qnt);
																			addItem(player_id, item1);
																			setAchievement(player_id, 79, 1);

																			var rand = Math.random()*100;
																			if (rand < 3) {
																				addItem(player_id, 220);
																				bot.sendMessage(message.chat.id, "Per ringraziarti dello scambo il Mercante ti regala anche una *Capsula Prelevazione*!", mark);
																			}

																			if (boost_id == 8)
																				setBoost(player_id, boost_mission, boost_id);

																			connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																	});
																} else if (answer.text == "No") {

																	bot.sendMessage(message.chat.id, "Ignori lo scambio del Mercante e prosegui", dNext);

																	if (boost_id == 8)
																		setBoost(player_id, boost_mission, boost_id);

																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}
														});
													});
												});
											} else if (dir == -21) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Concentrati"], ["Termina Concentrazione"], ["Torna al menu"]]
													}
												};

												var text = "";
												if (param == null) {
													text = "Non ti sei ancora concentrato abbastanza";
													param = 0;
												} else {
													var plur = "e";
													if (param == 1)
														plur = "a";
													text = "Fin ora ti sei concentrato " + param + " volt" + plur;
												}

												bot.sendMessage(message.chat.id, "Raggiungi una stanza completamente trasparente, sembra quasi fluttuare nel cielo, leggi l'insegna: Stanza del Cuore e dello Spirito, sai che concentrarti ti porter√† benefici, cosa fai?\n" + text, dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Concentrati") {
															if (param > 6) {
																bot.sendMessage(message.chat.id, "Non puoi concentrarti troppo a lungo", dNext);
																return;
															}
															if (param == 0) {
																connection.query('UPDATE dungeon_status SET param = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															} else {
																connection.query('UPDATE dungeon_status SET param = param+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															}

															var rand = Math.random() * 100;
															if (rand < 4) {
																addItem(player_id, 610);
																bot.sendMessage(message.chat.id, "Per l'altissimo livello di concentrazione hai ottenuto un *Pass Oro*!", mark);
															}

															var d = new Date();
															if (cursed == 1)
																d.setMinutes(d.getMinutes() + 30 + (param * 30));
															else
																d.setMinutes(d.getMinutes() + 15 + (param * 15));
															var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
															var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

															connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai iniziato la concentrazione, finirai alle " + short_date, dNext);
															});
															return;
														} else if (answer.text == "Termina Concentrazione") {
															if ((param == null) || (param == 0)) {
																bot.sendMessage(message.chat.id, "Ti senti talmente pronto da non necessitare di ulteriore concentrazione, prosegui cos√¨ alla prossima stanza...", dNext);
															} else {
																var rand = Math.random() * 100;
																param = param*2;
																if (cursed == 1)
																	param = param*2;
																if (rand < 70) {
																	bot.sendMessage(message.chat.id, "Per la concentrazione prolungata, il saggio dello Spirito Libero ti premia con " + param + " exp!", dNext);
																	setExp(player_id, param);
																} else {
																	param = param*2;
																	bot.sendMessage(message.chat.id, "Per la concentrazione prolungata ed una particolare dose di fortuna, il saggio dello Spirito Libero ti premia con " + param + " exp!", dNext);
																	setExp(player_id, param);
																}
															}

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET param = NULL, room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else
															return;
													}
												});
											} else if (dir == -22) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Ah"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Entrando nella stanza pesti una leva nascosta, la maledizione Unna t'ha colpito!", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Ah") {

															var d = new Date();
															var day = d.getDay();

															var text = "_Scricchiolando_ la leva emette un rumore inquietante...\n";

															if ((day == 1) || (day == 2)) {				// luned√¨-marted√¨
																var exist = connection_sync.query("SELECT 1 FROM event_dust_status WHERE extracting = 1 AND player_id = " + player_id);
																if (Object.keys(exist).length > 0) {
																	connection.query('UPDATE event_dust_status SET `generated` = 0, notified = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	text += "Il Generatore di *Polvere* √® stato azzerato!";
																} else
																	text += "Ma per stavolta nulla accade!";
															} else if ((day == 4) || (day == 5)) { 		// gioved√¨-venerd√¨
																var exist = connection_sync.query("SELECT 1 FROM event_mana_status WHERE time_start IS NOT NULL AND player_id = " + player_id);
																if (Object.keys(exist).length > 0) {
																	connection.query('UPDATE event_mana_status SET time_start = NOW() WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	text += "L'estrazione di *Mana* √® stata resettata!";
																} else 
																	text += "Ma per stavolta nulla accade!";
															} else {
																var money = Math.round(getRandomArbitrary(-player_rank*200, player_rank*200));
																if (cursed == 1)
																	money = money*2;

																var query = " + " + Math.abs(money);
																if (money < 0)
																	query = " - " + Math.abs(money);

																var p = connection_sync.query("SELECT money FROM player WHERE id = " + player_id);
																if ((p[0].money-Math.abs(money) > 0) && (money > 0)) {
																	connection.query('UPDATE player SET money = money' + query + ' WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});

																	if (money > 0)
																		text += "Nel tuo borsellino appaiono *" + formatNumber(money) + "* ¬ß!";
																	else
																		text += "Dal tuo borsellino evaporano *" + formatNumber(Math.abs(money)) + "* ¬ß!";
																} else
																	text += "Ma per stavolta nulla accade!";
															}

															text += "\n\nLentamente prosegui verso la stanza successiva...";

															bot.sendMessage(message.chat.id, text, dNext);

															var d = new Date();
															d.setMinutes(d.getMinutes() + Math.round(getRandomArbitrary(2, 30)));
															var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

															connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															return;
														} else
															return;
													}
												});
											} else if (dir == -23) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Urla"], ["Ignora"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Entri in una stanza che anzich√© una parete ha un'immenso crepaccio, cosa vuoi fare?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Urla") {															
															var rand = Math.random()*100;
															var d = new Date();
															if (rand < 50) {
																var damage = Math.round(getRandomArbitrary(room_id*100, room_id*200));
																connection.query('UPDATE player SET life = life-' + damage + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																bot.sendMessage(message.chat.id, "Fai un grande respiro ed emetti un urlo talmente forte da spaventare i Cerbrutti a distanza di km, il crepaccio si spacca ma alcune pietre ti precipitano addosso (perdi " + formatNumber(damage) + " hp), procedi verso la prossima stanza pi√π lentamente a causa delle ferite", dNext);
																if (cursed == 1)
																	d.setMinutes(d.getMinutes() + 40);
																else
																	d.setMinutes(d.getMinutes() + 20);
															} else {
																bot.sendMessage(message.chat.id, "Fai un grande respiro ed emetti un urlo talmente forte da spaventare i Cerbrutti a distanza di km, il crepaccio si spacca e procedi verso la prossima stanza sentendoti molto pi√π leggero e veloce", dNext);
																d.setMinutes(d.getMinutes() + 1);
															}

															var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

															connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															return;
														} else if (answer.text == "Ignora") {

															bot.sendMessage(message.chat.id, "Ignori la crepa e prosegui da una strada alternativa", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);

															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															return;
														}
													}
												});
											} else if (dir == -24) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Spolvera"], ["Ignora"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Entri in una stanza completamente piena di polvere, cos√¨ fitta da neanche riuscire a vederne l'uscita, cosa vuoi fare?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Spolvera") {

															var dust = 50;
															if (cursed == 1)
																dust = 100;

															addItem(player_id, 646, dust);

															var d = new Date();
															var dur = 20;
															if (cursed == 1)
																dur = 40;

															d.setMinutes(d.getMinutes() + dur);
															bot.sendMessage(message.chat.id, "Inizi a spolverare, ci impieghi " + dur + " minuti, ma ottieni " + dust + " Polvere! Prosegui verso la porta un po' tossicchiante...", dNext);

															var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

															setAchievement(player_id, 80, 1);

															connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															return;
														} else if (answer.text == "Ignora") {

															bot.sendMessage(message.chat.id, "Prosegui dritto e fortunatamente trovi la porta per la prossima stanza", dNext);

															if (boost_id == 8)
																setBoost(player_id, boost_mission, boost_id);

															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															return;
														}
													}
												});
											} else if (dir == -25) {
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Torna indietro"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Raggiungi una stanza con un cartello con su scritto 'Questo √® un vicolo cieco', cosa fai?", dOptions).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text == "Torna indietro") {
															if (room_id > 1) {
																bot.sendMessage(message.chat.id, "Torni alla stanza precedente con rassegnazione...", dNext);

																if (boost_id == 8)
																	setBoost(player_id, boost_mission, boost_id);

																connection.query('UPDATE dungeon_status SET room_id = room_id, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															} else {
																bot.sendMessage(message.chat.id, "Ti accorgi di essere all'inizio del dungeon, non essendoci stanze precedenti a quella in cui ti trovi, esci all'aria aperta prendendo una boccata d'aria fresca...", dNext);

																var d = new Date();
																d.setHours(d.getHours() + wait_dungeon_long);
																var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															}
															return;
														}
													}
												});
											} else
												bot.sendMessage(message.chat.id, "Direzione non valida, segnala all'amministratore questo valore: " + dir, dBack);
										}
									});
								});
							});
						};
					});
				}
			});
		});
	});
});

bot.onText(/stato dungeon|statodg/i, function (message) {
	var dBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al dungeon"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT account_id, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT room_id, last_dir, dungeon_id, finish_time FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Devi essere all'interno di un dungeon per vederne i dettagli", dBack);
				return;
			}

			var room_id = rows[0].room_id;
			var last_dir = rows[0].last_id;
			var last_dir_txt = "";
			if (last_dir != null)
				last_dir_txt = " (" + dungeonToDesc(last_dir) + ")";
			var now = new Date();
			var dungeon_finish = Math.round((rows[0].finish_time - now) / 1000); // In secondi

			var dungeon_id = rows[0].dungeon_id;

			connection.query('SELECT finish_date, name, cursed, rooms FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
				if (err) throw err;

				var dungeon_name = rows[0].name;
				var finish_date = rows[0].finish_date;
				var cursed = rows[0].cursed;
				var rooms = rows[0].rooms;

				connection.query('SELECT nickname, room_id FROM dungeon_status, player WHERE dungeon_status.player_id = player.id AND dungeon_id = ' + dungeon_id, function (err, rows, fields) {
					if (err) throw err;

					var players = "";
					var player_num = 0;
					if (Object.keys(rows).length > 0) {
						players = "\n\nEsploratori al suo interno:\n";
						player_num = Object.keys(rows).length;
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].room_id > rooms)
								rows[i].room_id = "finale";
							players += "> " + rows[i].nickname + " (Stanza " + rows[i].room_id + ")\n";
						}
					}

					var instance_tot = Math.round((finish_date - now) / 1000); // In secondi
					var cursed_text = "";
					if (cursed == 1)
						cursed_text = " üß®";
					var istance_time = "";
					if (instance_tot < 0)
						istance_time = "<b>imminente</b>";
					else
						istance_time = "tra " + toTime(instance_tot, 0);
					bot.sendMessage(message.chat.id, "<b>" + dungeon_name + "</b>" + cursed_text + "\nCi sono " + player_num + " esploratori al suo interno\nTi trovi nella stanza numero " + room_id + last_dir_txt + "\nCrollo dungeon tra " + toTime(dungeon_finish, 0) + "\nCrollo istanza " + istance_time + players, dBack);
				});
			});
		});
	});
});

bot.onText(/usa varco/i, function (message) {
	var dBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al dungeon"], ["Torna al menu"]]
		}
	};

	var dVarco = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Si"], ["Prosegui il dungeon"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT account_id, id, dungeon_time, dungeon_skip FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;
		var dungeon_time = rows[0].dungeon_time;
		var dungeon_skip = rows[0].dungeon_skip;

		if (dungeon_time == null) {
			bot.sendMessage(message.chat.id, "Non puoi usare il Varco se non sei in attesa dungeon", dBack);
			return;
		}

		var d = new Date(dungeon_time);
		var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

		bot.sendMessage(message.chat.id, "Puoi tornare nei dungeon alle " + short_date + "\nVuoi utilizzare un Varco Temporale per annullare l'attesa?\nNe possiedi " + getItemCnt(player_id, 645) + ", puoi utilizzarli ancora " + (3-rows[0].dungeon_skip) + " volte prima che la struttura spazio-temporale si laceri", dVarco).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {

					if (crazyMode == 0) {
						if (dungeon_skip >= 3) {
							bot.sendMessage(message.chat.id, "Il Varco Temporale √® surriscaldato, √® possibile usarlo solamente 3 volte al giorno! Potrai usarlo nuovamente domani", back);
							return;
						}
					}

					if (getItemCnt(player_id, 645) == 0) {
						bot.sendMessage(message.chat.id, "Non possiedi un Varco Temporale", back);
						return;
					}

					delItem(player_id, 645, 1);
					connection.query('UPDATE player SET dungeon_time = NULL, dungeon_skip = dungeon_skip+1 WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Entri in un varco che ti permette di avanzare nel tempo e farti entrare nuovamente del dungeon!", dBack);
						setAchievement(player_id, 41, 1);
					});
				}
			};
		});
	});
});

bot.onText(/attacca$|^Lancia ([a-zA-Z ]+) ([0-9]+)/i, function (message, match) {

	var dYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Si"], ["Torna al dungeon"]]
		}
	};

	var dungKb = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Attacca"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;
		var player_weapon_id = rows[0].weapon_id;
		var player_weapon2_id = rows[0].weapon2_id;
		var player_weapon3_id = rows[0].weapon3_id;
		var reborn = rows[0].reborn;
		var class_id = rows[0].class;
		var player_paralyzed = rows[0].paralyzed;
		var player_charm_id = rows[0].charm_id;
		var global_end = rows[0].global_end;
		var now_rank = rows[0].rank;
		var refilled = rows[0].refilled;

		var critical = parseInt(rows[0].weapon_crit);
		var critical_armor = parseInt(rows[0].weapon2_crit);
		var critical_shield = parseInt(rows[0].weapon3_crit);
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;

		var power_dmg = rows[0].power_dmg;
		var power_def = rows[0].power_def;
		var power_weapon = rows[0].power_weapon;
		var power_armor = rows[0].power_armor;
		var power_shield = rows[0].power_shield;
		var power_dragon_dmg = rows[0].power_dragon_dmg;
		var power_dragon_def = rows[0].power_dragon_def;
		var power_dragon_crit = rows[0].power_dragon_crit;

		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;

		critical += power_weapon;
		critical_armor += power_armor;
		critical_shield += power_shield;

		if ((boost_mission == 0) && (boost_id != 0)) {
			connection.query('UPDATE player SET boost_id = 0 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
			boost_mission = 0;
			boost_id = 0;
		}

		if (player_charm_id == 404)
			critical += 6;
		if (player_charm_id == 493)
			critical += 2;
		if (player_charm_id == 494)
			critical += 4;
		if (player_charm_id == 495)
			critical_armor += 3;
		if (player_charm_id == 496)
			critical_shield += 3;
		if (charm_id == 696) {
			critical += 5;
			critical_armor += 5;
			critical_shield += 3;
		}
		if ((class_id == 2) && (reborn == 3))
			critical_armor += 5;
		if ((class_id == 2) && (reborn >= 4)) {
			critical_armor += 7;
			critical_shield += 7;
		}
		if ((class_id == 4) && (reborn == 3)) {
			critical += 2;
			critical_armor += 2;
			critical_shield += 2;
		}
		if ((class_id == 4) && (reborn >= 4)) {
			critical += 7;
			critical_armor += 7;
			critical_shield += 7;
		}
		if ((class_id == 5) && (reborn == 3))
			critical_shield += 4;
		if ((class_id == 5) && (reborn >= 4))
			critical_shield += 8;
		if ((class_id == 6) && (reborn == 3))
			critical_armor += 2;
		if ((class_id == 6) && (reborn == 3))
			critical_shield += 2;
		if ((class_id == 6) && (reborn >= 4))
			critical_armor += 7;
		if ((class_id == 6) && (reborn >= 4))
			critical_shield += 7;
		if ((class_id == 6) && (reborn == 5))
			critical_armor += 7;
		if ((class_id == 6) && (reborn == 5))
			critical_shield += 7;
		if ((class_id == 8) && (reborn == 3))
			critical_shield += 5;
		if ((class_id == 8) && (reborn >= 4))
			critical_shield += 7;
		if ((class_id == 8) && (reborn == 5))
			critical += 10;
		if ((class_id == 9) && (reborn == 3)) {
			critical += 2;
			critical_shield += 2;
		}
		if ((class_id == 9) && (reborn >= 4)) {
			critical += 7;
			critical_shield += 7;
		}

		var danno = Math.round(Math.random() * (rows[0].exp / 15 + rows[0].weapon) + rows[0].weapon);
		danno += rows[0].weapon_enchant;
		danno += power_dmg;

		var charm_id = rows[0].charm_id;
		var player_exp = rows[0].exp;
		var player_life = rows[0].life;
		var player_total_life = rows[0].total_life;
		var rank = rows[0].rank;
		var automagic1 = rows[0].weapon_enchant_bonus;
		var automagic2 = rows[0].weapon2_enchant_bonus;
		var automagic3 = rows[0].weapon3_enchant_bonus;
		var boost_cast = rows[0].boost_cast;

		if (player_life <= 0) {
			bot.sendMessage(message.chat.id, "Non puoi combattere da esausto!", revive);
			return;
		}

		if (charm_id == 62)
			danno += 10;
		else if (charm_id == 184)
			danno += 25;
		else if (charm_id == 188)
			danno += 30;
		else if (charm_id == 698)
			danno += 50;

		var bonus = 0;
		if (rows[0].weapon2 < 0) {
			var bonus = Math.abs(rows[0].weapon2) + Math.abs(rows[0].weapon3) + rows[0].weapon3_enchant + rows[0].weapon2_enchant;
			bonus += Math.round(Math.random() * ((rows[0].exp / 10 + bonus) / 2));
		}
		bonus += power_def;
		danno = parseInt(danno);
		bonus = parseInt(bonus);

		var critical_rand = Math.round(Math.random() * 100) + 1;
		var crit_bool = 0;
		var crit_txt = "";

		if (crazyMode == 1)
			danno = danno * 2;

		var magic = 0;
		var magicId = 0;
		var magicPow = 0;
		var magicPowBase = 0;

		if (message.text.indexOf("Lancia") != -1) {
			if (rows[0].magic_active == 1) {
				if (match[1] == magicToName(1))
					magic = 1;
				else if (match[1] == magicToName(2))
					magic = 2;
				else if (match[1] == magicToName(3))
					magic = 3;
				else if (match[1] == magicToName(4))
					magic = 4;
			} else
				return;
		}

		if (rows[0].dungeon_time != null) {
			var d = new Date(rows[0].dungeon_time);
			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

			bot.sendMessage(message.chat.id, "Puoi tornare nei dungeon alle " + short_date, back);
			return;
		}

		var pow = 0;
		if (match[2] != undefined)
			pow = match[2];

		var magicDouble = 0;
		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 10', function (err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0)
				abBonus = parseInt(rows[0].ability_level) * rows[0].val;

			connection.query('DELETE FROM magic WHERE quantity <= 0 AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				connection.query('SELECT type, id, power, quantity FROM magic WHERE player_id = ' + player_id + ' AND power = ' + pow + ' AND type = ' + magic, function (err, rows, fields) {
					if (err) throw err;

					if (magic != 0) {
						if (Object.keys(rows).length > 0) {
							if (rows[0].quantity <= 0) {
								bot.sendMessage(message.chat.id, "Hai terminato gli utilizzi dell'incantesimo selezionato!", dungKb);
								return;
							} else {
								magicId = rows[0].id;
								magicPow = rows[0].power;
								magicPowBase = magicPow;

								var rand = Math.random() * 100;
								if ((class_id == 4) && ((magic == 3) || (magic == 4)) && (reborn == 5))
									abBonus += 25;
								if (rand < abBonus)
									magicDouble = 1;
							}
						} else {
							bot.sendMessage(message.chat.id, "Non possiedi l'incantesimo selezionato!", dungKb);
							return;
						}
					}

					var automagic = 0;

					if (charm_id == 698)
						boost_cast += 3;

					if (magic == 0) {
						var magicrand = Math.random() * 100;
						if (magicrand < (5 + boost_cast)) {
							if (player_weapon_id == 630) {
								magic = 2;
								automagic = 1;
								magicPow = 50;
							} else if (player_weapon_id == 631) {
								magic = 3;
								automagic = 1;
								magicPow = 50;
							} else if (player_weapon_id == 632) {
								magic = 1;
								automagic = 1;
								magicPow = 50;
							}
						}
						if (magicrand < (10 + boost_cast)) {
							if (player_weapon_id == 638) {
								magic = 2;
								automagic = 1;
								magicPow = 200;
							} else if (player_weapon_id == 639) {
								magic = 3;
								automagic = 1;
								magicPow = 150;
							} else if (player_weapon_id == 640) {
								magic = 1;
								automagic = 1;
								magicPow = 150;
							}
						}
						if (magicrand < (30 + boost_cast)) {
							if (player_weapon_id == 754) {
								var randMagic = Math.round(getRandomArbitrary(1, 4));
								magic = randMagic;
								automagic = 1;
								magicPow = 150;
							}
						}

						// Incantesimo da enchant
						if ((magicrand > 80) && (automagic1 > 0) && (automagic == 0)) {
							var magicrand2 = Math.random() * 100;
							if (automagic1 == 1) {
								magic = 1;
								automagic = 1;
								magicPow = 50;
							} else if (automagic1 == 2) {
								magic = 2;
								automagic = 1;
								magicPow = 150;
							} else {
								magic = 3;
								automagic = 1;
								magicPow = 50;
							}
						}
					}

					var check = 0;
					if (magicDouble == 1) {
						if (automagic == 0) {	// per escludere lame
							if ((class_id == 2) && (reborn == 3)) {
								magicPow += magicPow * 0.1;
								magicPow += magicPowBase;
								check = 1;
							}
							if ((class_id == 2) && (reborn == 4)) {
								magicPow += magicPow * 0.25;
								magicPow += magicPowBase;
								check = 1;
							}
							if ((class_id == 2) && (reborn == 5)) {
								magicPow += magicPow * 0.75;
								magicPow += magicPowBase;
								check = 1;
							}
							if ((class_id == 3) && (reborn == 5)) {
								magicPow += magicPow * 0.3;
								magicPow += magicPowBase;
								check = 1;
							}
						}
						if (check == 0)
							magicPow += magicPowBase;
					} else {
						if (automagic == 0) {	// per escludere lame
							if ((class_id == 2) && (reborn == 3))
								magicPow += magicPow * 0.1;
							if ((class_id == 2) && (reborn == 4))
								magicPow += magicPow * 0.25;
							if ((class_id == 2) && (reborn == 5))
								magicPow += magicPow * 0.75;
							if ((class_id == 3) && (reborn == 5))
								magicPow += magicPow * 0.3;
						}
					}

					if ((class_id == 8) && (reborn > 1))
						magicPow -= magicPow * 0.1;
					if ((class_id == 5) && (reborn == 3) && (magic == 1))
						magicPow += magicPow * 0.5;
					if ((class_id == 5) && (reborn >= 4) && (magic == 1))
						magicPow += magicPow * 1;

					connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 1', function (err, rows, fields) {
						if (err) throw err;

						var abBonus = 0;
						if (Object.keys(rows).length > 0) {
							abBonus = rows[0].ability_level * rows[0].val;
							critical += abBonus;
							critical_armor += abBonus;
							critical_shield += abBonus;
						}

						connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 3', function (err, rows, fields) {
							if (err) throw err;

							var abBonus2 = 0;
							if (Object.keys(rows).length > 0)
								abBonus2 = parseInt(rows[0].ability_level) * rows[0].val;

							connection.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								var combat = 0;
								if (Object.keys(rows).length > 0)
									combat = rows[0].combat;

								connection.query('SELECT damage, critical, defence, claws, saddle, life, sleep_h FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									if ((Object.keys(rows).length > 0) && (combat == 0)) {
										if ((rows[0].life > 0) || ((rows[0].life == 0) && (rows[0].sleep_h > 0))) {

											if ((class_id == 7) && (reborn > 1) && (reborn == 5))
												rows[0].claws += rows[0].claws * 1;
											else if ((class_id == 7) && (reborn > 1))
												rows[0].claws += rows[0].claws * 0.5;
											if ((class_id == 7) && (reborn > 1) && (reborn == 5))
												rows[0].saddle += rows[0].saddle * 1;
											else if ((class_id == 7) && (reborn > 1))
												rows[0].saddle += rows[0].saddle * 0.5;

											rows[0].damage += power_dragon_dmg;
											rows[0].defence += power_dragon_def;
											rows[0].critical += power_dragon_crit;

											danno += parseInt(rows[0].damage);
											danno += parseInt(rows[0].claws);
											bonus += parseInt(rows[0].defence);
											bonus += parseInt(rows[0].saddle);
											var dragon_crit = rows[0].critical;
											if (charm_id == 602) {
												danno += 25;
												dragon_crit += 10;
											}
											if (charm_id == 695) {
												danno += 30;
												dragon_crit += 15;
											}

											if ((class_id == 7) && (reborn == 3))
												dragon_crit += 5;
											if ((class_id == 7) && (reborn >= 4))
												dragon_crit += 7;
											if ((class_id == 7) && (reborn == 5))
												critical += dragon_crit / 2;
										}
									}

									if ((class_id == 8) && (reborn == 2))
										danno += danno * 0.10;
									else if ((class_id == 8) && (reborn == 3))
										danno += danno * 0.15;
									else if ((class_id == 8) && (reborn == 4))
										danno += danno * 0.17;
									else if ((class_id == 8) && (reborn == 5))
										danno += danno * 0.30;

									connection.query('SELECT * FROM dungeon_status WHERE player_id = ' + player_id + ' AND monster_id != 0', function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Non sei in combattimento contro un mostro!", back);
											return;
										}

										var monster_id = rows[0].monster_id;
										var monster_life = rows[0].monster_life;
										var boss_battle = rows[0].boss_battle;
										var room_id = rows[0].room_id;
										var dungeon_id = rows[0].dungeon_id;
										var pass_id = rows[0].pass;

										var paralyzed = rows[0].monster_paralyzed;
										var critic = rows[0].monster_critic;

										connection.query('SELECT cursed, mob_power_multiplier, min_rank FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
											if (err) throw err;

											var cursed = rows[0].cursed;
											var mob_power_multiplier = rows[0].mob_power_multiplier;
											var dungeon_min_rank = rows[0].min_rank;

											connection.query('SELECT name, life, level, weapon_id, weapon2_id, weapon3_id, charm_id FROM dungeon_monsters WHERE id = ' + monster_id, function (err, rows, fields) {
												if (err) throw err;

												var monster_name = rows[0].name;
												var monster_total_life = rows[0].life;
												var monster_level = rows[0].level;
												var weapon_id = rows[0].weapon_id;
												var weapon2_id = rows[0].weapon2_id;
												var weapon3_id = rows[0].weapon3_id;
												var charm_id = rows[0].charm_id;

												connection.query('SELECT name, power, critical FROM item WHERE id = ' + weapon_id, function (err, rows, fields) {
													if (err) throw err;

													var weapon_dmg = rows[0].power;
													if ((weapon_id == 221) || (weapon_id == 638) || (weapon_id == 639) || (weapon_id == 640) || (weapon_id == 754))
														weapon_dmg = calcNecro(300, monster_level, 3, 1);
													else if (weapon_id == 373)
														weapon_dmg = power_dmg;
													var weapon_name = rows[0].name + " (+" + weapon_dmg + ")";
													var en_crit = rows[0].critical;

													weapon_dmg = weapon_dmg*mob_power_multiplier;
													en_crit = en_crit*mob_power_multiplier;

													connection.query('SELECT name, power_armor, critical FROM item WHERE id = ' + weapon2_id, function (err, rows, fields) {
														if (err) throw err;

														var weapon2_name = "-";
														var weapon2_dmg = 0;
														var en_crit2 = 0;
														if (Object.keys(rows).length > 0) {
															weapon2_dmg = rows[0].power_armor;
															if ((weapon2_id == 577) || (weapon2_id == 688) || (weapon2_id == 689) || (weapon2_id == 690) || (weapon2_id == 790)) {
																weapon2_dmg = -Math.abs(calcNecro(250, monster_level, 3, 1));
																extra = ", Probab. /2: " + critic + "%";
															}
															weapon2_name = rows[0].name + " (" + weapon2_dmg + ")";
															en_crit2 = rows[0].critical;
														}

														weapon2_dmg = weapon2_dmg*mob_power_multiplier;
														en_crit2 = en_crit2*mob_power_multiplier;

														connection.query('SELECT name, power_shield, critical FROM item WHERE id = ' + weapon3_id, function (err, rows, fields) {
															if (err) throw err;

															var weapon3_name = "-";
															var weapon3_dmg = 0;
															var en_crit3 = 0;
															if (Object.keys(rows).length > 0) {
																weapon3_dmg = rows[0].power_shield;
																if ((weapon3_id == 600) || (weapon3_id == 671) || (weapon3_id == 672) || (weapon3_id == 673) || (weapon3_id == 791))
																	weapon3_dmg = -Math.abs(calcNecro(250, monster_level, 3, 1));
																weapon3_name = rows[0].name + " (" + weapon3_dmg + ")";
																en_crit3 = rows[0].critical;
															}

															weapon3_dmg = weapon3_dmg*mob_power_multiplier;
															en_crit3 = en_crit3*mob_power_multiplier;

															connection.query('SELECT name FROM item WHERE id = ' + charm_id, function (err, rows, fields) {
																if (err) throw err;

																var charm_name = "-";
																if (Object.keys(rows).length > 0)
																	charm_name = rows[0].name;

																var dBattleM = {
																	parse_mode: "Markdown",
																	reply_markup: {
																		resize_keyboard: true,
																		keyboard: [["Attacca " + monster_name], ["‚ù£Ô∏è", "üçµ", "‚ù§Ô∏è"], ["Incantesimi ‚ú®"], ["Scappa", "Torna al menu"]]
																	}
																};

																var dNext = {
																	parse_mode: "Markdown",
																	reply_markup: {
																		resize_keyboard: true,
																		keyboard: [["Prosegui il dungeon"], ["Torna al menu"]]
																	}
																};

																var dBattle = {
																	parse_mode: "Markdown",
																	reply_markup: {
																		resize_keyboard: true,
																		keyboard: [["Attacca"], ["Torna al menu"]]
																	}
																};

																var status = "‚öîÔ∏è Normale";
																var my_status = "‚öîÔ∏è Normale";

																if (paralyzed > 0)
																	status = "‚ö°Ô∏è Paralizzato (" + paralyzed + " turni)";
																if (critic > 0)
																	status = "üåÄ Vulnerabile (" + critic + " turni)";
																if ((paralyzed > 0) && (critic > 0))
																	status = "‚ö°Ô∏è Paralizzato (" + paralyzed + " turni) e üåÄ Vulnerabile (" + critic + " turni)";

																var multiply = "";
																if (mob_power_multiplier > 1)
																	multiply = "üí• Evoluto (x" + mob_power_multiplier + ")";

																if (player_paralyzed > 0)
																	my_status = "‚ö°Ô∏è Paralizzato (" + player_paralyzed + " turni)";

																if ((paralyzed > 0) && (automagic == 1) && (magic == 2)) {
																	automagic = 0;
																	magic = 0;
																	connection.query('UPDATE player SET boost_cast = boost_cast+5 WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																if ((critic > 0) && (automagic == 1) && (magic == 4)) {
																	automagic = 0;
																	magic = 0;
																	connection.query('UPDATE player SET boost_cast = boost_cast+5 WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}

																var heart = "‚ù§Ô∏è";
																if (player_life/player_total_life*100 < 15)
																	heart = "üñ§";
																else if (player_life/player_total_life*100 < 60)
																	heart = "üß°";

																bot.sendMessage(message.chat.id, "*" + monster_name + "*\n" +
																				"\n‚ù§Ô∏è *" + formatNumber(monster_life) + "* hp\n" +
																				status + "\n" +
																				multiply + "\n" +
																				"üó° " + weapon_name + "\n" +
																				(weapon2_name != "-" ? "ü•ã " + weapon2_name + "\n" : "") +
																				(weapon3_name != "-" ? "üõ° " + weapon3_name + "\n" : "") +
																				(charm_name != "-" ? "üìø " + charm_name + "\n" : "") +
																				"\n" + heart + " *" + formatNumber(player_life) + "* hp\n" +
																				my_status, dBattleM).then(function () {
																	answerCallbacks[message.chat.id] = function (answer) {

																		if (answer.text == "Scappa") {
																			bot.sendMessage(message.chat.id, "Sicuro di voler uscire dal dungeon?", dYesNo).then(function () {
																				answerCallbacks[message.chat.id] = function (answer) {
																					if (answer.text.toLowerCase() == "si") {

																						var rand = Math.random() * 100;
																						if (rand < 50)
																							var dmg = Math.round(player_total_life * 50 / 100);
																						else
																							var dmg = Math.round(player_total_life * 40 / 100);

																						var exText = "";

																						connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});

																						if (player_life - dmg <= 0) {
																							exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																							var d = new Date();
																							d.setHours(d.getHours() + wait_dungeon_long);
																							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																							connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							if (cursed == 1) {
																								if (rank == 1) {
																									connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								} else if (rank > 1) {
																									connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																							} else {
																								if (rank > 0) {
																									connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																							}
																							connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																						} else {
																							exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																							var d = new Date();
																							d.setHours(d.getHours() + (wait_dungeon - 1));
																							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																							connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																						}
																						connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																						bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + formatNumber(dmg) + " hp, " + exText, back);
																					}
																				}
																			});
																			return;
																		}
																		if (answer.text.indexOf("Attacca") == -1)
																			return;

																		if (magic != 0) {
																			var shieldRand = Math.random()*100;
																			if (shieldRand <= 5) {
																				if (((magic == 1) && (weapon3_id == 673)) || ((magic == 2) && (weapon3_id == 671)) || ((magic == 3) && (weapon3_id == 672)) || ((magic == 4) && (weapon3_id == 791)))
																					magic = 0;
																			}
																		}

																		if (paralyzed > 0) {
																			connection.query('UPDATE dungeon_status SET monster_paralyzed = monster_paralyzed-1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																		if (critic > 0) {
																			connection.query('UPDATE dungeon_status SET monster_critic = monster_critic-1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}

																		if ((magic != 0) && (player_paralyzed == 0))
																			setAchievement(player_id, 6, 1);

																		var meParalyzed = 0;
																		if (player_paralyzed > 0) {
																			connection.query('UPDATE player SET paralyzed = paralyzed-1 WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			meParalyzed = 1;
																			danno = 0;
																			magic = 0;
																		}

																		if (magic != 1) {
																			connection.query('UPDATE player SET boost_cast = 0 WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}

																		if ((magic == 2) && (meParalyzed == 0)) {
																			var turn = 0;
																			if (magicPow < 100)
																				turn = 1;
																			else if (magicPow < 200)
																				turn = 2;
																			else if (magicPow < 250)
																				turn = 3;
																			else if (magicPow < 300)
																				turn = 4;
																			else if (magicPow < 350)
																				turn = 5;
																			else if (magicPow < 400)
																				turn = 6;
																			else
																				turn = 7;
																			var r = Math.random() * 100;
																			if ((automagic == 1) && (r < 50))
																				turn++;
																			paralyzed = turn;
																			setAchievement(player_id, 61, turn);
																			connection.query('UPDATE dungeon_status SET monster_paralyzed = ' + (turn - 1) + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				if (magicDouble == 1) {
																					bot.sendMessage(message.chat.id, "Il mostro √® stato paralizzato per " + turn + " turni (x2)!");
																				} else {
																					bot.sendMessage(message.chat.id, "Il mostro √® stato paralizzato per " + turn + " turni!");
																				}

																				connection.query('UPDATE player SET boost_cast = 0 WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			});
																		}

																		if ((magic == 4) && (meParalyzed == 0)) {
																			var turn = 0;
																			if (magicPow < 100)
																				turn = 1;
																			else if (magicPow < 200)
																				turn = 2;
																			else if (magicPow < 250)
																				turn = 3;
																			else if (magicPow < 300)
																				turn = 4;
																			else if (magicPow < 350)
																				turn = 5;
																			else if (magicPow < 400)
																				turn = 6;
																			else
																				turn = 7;
																			var r = Math.random() * 100;
																			if ((automagic == 1) && (r < 50))
																				turn++;
																			critic = turn;
																			setAchievement(player_id, 62, turn);
																			connection.query('UPDATE dungeon_status SET monster_critic = ' + turn + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				if (magicDouble == 1) {
																					bot.sendMessage(message.chat.id, "Il mostro √® vulnerabile ai colpi critici per " + turn + " turni (x2)!");
																				} else {
																					bot.sendMessage(message.chat.id, "Il mostro √® vulnerabile ai colpi critici per " + turn + " turni!");
																				}
																			});
																		}

																		if ((magic != 0) && (automagic == 0) && (meParalyzed == 0)) {
																			connection.query('UPDATE magic SET quantity = quantity - 1 WHERE id = ' + magicId, function (err, rows, fields) {
																				if (err) throw err;
																				//console.log("Magia con ID " + magicId + " utilizzata");
																			});
																		}

																		connection.query('SELECT * FROM dungeon_status WHERE player_id = ' + player_id + ' AND monster_id != 0', function (err, rows, fields) {
																			if (err) throw err;

																			if (Object.keys(rows).length == 0) {
																				console.log("Errore dungeon_status per player_id = " + player_id)
																				bot.sendMessage(message.chat.id, "Errore mob, contatta l'amministratore");
																				return;
																			}

																			if (paralyzed == 0)
																				paralyzed = rows[0].monster_paralyzed;
																			if (critic == 0)
																				critic = rows[0].monster_critic;

																			if (critic != 0)
																				critical += 50;

																			var critical_rand = Math.round(Math.random() * 100) + 1;

																			if ((critical_rand <= critical) && (meParalyzed == 0)) {
																				danno = danno * 2;
																				crit_bool = 1;
																				setAchievement(player_id, 33, 1);
																				crit_txt = " CRITICI";
																			}

																			var magic_txt = "";
																			if ((magic == 3) && (meParalyzed == 0)) {
																				danno = danno * (magicPow / 30);
																				if (magicDouble == 1)
																					magic_txt = " con un incantesimo (x2)";
																				else
																					magic_txt = " con un incantesimo";
																			}

																			var damage = 100 + (Math.pow(monster_level, 2) * (1 + 1.5 * Math.random())) / 3.3 + Math.pow(weapon_dmg, 2) / 10.5 - bonus;

																			var heal = Math.round(((magicPow/350)*Math.abs(damage))*10);
																			if (magic == 1)
																				danno += heal;

																			if (cursed == 1)	// dopo altrimenti la cura √® pi√π bassa
																				damage = damage*2;

																			if (charm_id == 404)
																				en_crit += 6;
																			if (charm_id == 493)
																				en_crit += 2;
																			if (charm_id == 494)
																				en_crit += 4;
																			if (charm_id == 495)
																				en_crit2 += 3;
																			if (charm_id == 496)
																				en_crit3 += 3;
																			if (charm_id == 696) {
																				en_crit += 5;
																				en_crit2 += 5;
																				en_crit3 += 3;
																			}

																			if (charm_id == 63)
																				damage = damage - 5;
																			else if (charm_id == 186)
																				damage = damage - 15;
																			else if (charm_id == 189)
																				damage = damage - 20;

																			if (player_charm_id == 698) {
																				en_crit -= 5;
																				en_crit2 -= 5;
																				en_crit3 -= 5;
																			}

																			var critical_rand2 = Math.round(Math.random() * 100) + 1;
																			var crit_txt2 = "";

																			if ((critical_rand2 <= critical_armor) && (meParalyzed == 0)) {
																				damage = damage / 1.5;
																				crit_txt2 = ", ridotti grazie alla tua corazza";
																				setAchievement(player_id, 31, 1);
																			}

																			if (player_charm_id == 63)
																				damage = damage - 5;
																			else if (player_charm_id == 186)
																				damage = damage - 15;
																			else if (player_charm_id == 189)
																				damage = damage - 20;

																			if (charm_id == 62)
																				damage += 10;
																			else if (charm_id == 184)
																				damage += 25;
																			else if (charm_id == 188)
																				damage += 30;
																			else if (charm_id == 698)
																				damage += 50;

																			if ((class_id == 2) && (reborn > 1))
																				damage += damage * 0.05;
																			if ((class_id == 6) && (reborn > 1))
																				damage -= damage * 0.15;
																			if ((class_id == 8) && (reborn > 1))
																				damage += damage * 0.1;
																			if ((class_id == 9) && (reborn > 1))
																				damage += damage * 0.1;

																			damage = Math.round(damage);

																			var critical_rand = Math.random() * 100;
																			var en_crit_txt = "";
																			if ((critical_rand <= en_crit) && (paralyzed == 0)) {
																				damage = damage * 2;
																				en_crit_bool = 1;
																				en_crit_txt = " CRITICI ";
																			}

																			if (damage <= 0)
																				damage = 0;

																			var critical_rand3 = Math.round(Math.random() * 100) + 1;
																			var crit_bool3 = 0;
																			var crit_txt3 = "";

																			if ((critical_rand3 <= critical_shield) && (meParalyzed == 0)) {
																				damage = 0;
																				crit_bool3 = 1;
																				crit_txt3 = " ed il colpo viene assorbito completamente dallo scudo";
																				setAchievement(player_id, 32, 1);
																			}

																			danno = danno - (Math.abs(weapon2_dmg) + Math.abs(weapon3_dmg));

																			var enemy_magic = "";
																			var enemy_magicRand = Math.random() * 100;
																			var heal_enemy = 0;
																			var restored = "";

																			var bonus1 = 0;
																			var bonus2 = 0;
																			var bonus3 = 0;
																			if (weapon_id == 638)
																				bonus1 = 5;
																			else if (weapon_id == 639)
																				bonus2 = 5;
																			else if (weapon_id == 640)
																				bonus3 = 5;

																			if ((monster_level >= 50) && (paralyzed == 0)) {
																				if ((monster_level - 49) > enemy_magicRand) {
																					var rand = Math.random() * 100;

																					if (rand < (30+bonus2)) {
																						var r = 100;
																						rand = Math.random() * 100;
																						if ((player_weapon3_id == 672) || (automagic3 == 3))
																							r = 50;
																						else if (player_weapon3_id == 791)
																							r = 75;
																						if (r >= rand) {
																							enemy_magic = magicToName(3);
																							damage = damage * 2;
																							setAchievement(player_id, 66, 1);
																							if (((player_weapon2_id == 688) || (automagic2 == 3)) || (player_weapon2_id == 790)) {
																								var r2 = Math.random() * 100;
																								var prob = 50;
																								if (player_weapon2_id == 790)
																									prob = 25;
																								if (r2 < prob) {
																									var restore = Math.round(getRandomArbitrary(50, 150));
																									restored = " Hai assorbito " + restore + " üî• Mana Rosso dall'incantesimo!";
																									connection.query('UPDATE event_mana_status SET mana_3 = mana_3 + ' + restore + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									setAchievement(player_id, 29, restore);
																									setAchievement(player_id, 81, restore);
																								}
																							}
																						}
																					} else if (rand < (60+bonus3)) {
																						var r = 100;
																						rand = Math.random() * 100;
																						if ((player_weapon3_id == 673) || (automagic3 == 1))
																							r = 50;
																						else if (player_weapon3_id == 791)
																							r = 75;
																						if (r >= rand) {
																							enemy_magic = magicToName(1);
																							heal_enemy = getRandomArbitrary(monster_total_life * 0.01, monster_total_life * 0.1);
																							if (monster_life + heal_enemy > monster_total_life)
																								heal_enemy = monster_total_life - monster_life;
																							if (heal_enemy < 0)
																								heal_enemy = Math.abs(heal_enemy);
																							if (heal_enemy > 50000)
																								heal_enemy = 50000;
																							heal_enemy = Math.round(heal_enemy);
																							//console.log("heal_dungeon: " + heal_enemy);
																							connection.query('UPDATE dungeon_status SET monster_life = monster_life+' + heal_enemy + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							monster_life += heal_enemy;	// altrimenti non conta bene la riduzione o quando deve essere ucciso
																							setAchievement(player_id, 66, 1);
																							if (((player_weapon2_id == 689) || (automagic2 == 1)) || (player_weapon2_id == 790)) {
																								var r2 = Math.random() * 100;
																								var prob = 50;
																								if (player_weapon2_id == 790)
																									prob = 25;
																								if (r2 < prob) {
																									var restore = Math.round(getRandomArbitrary(50, 150));
																									restored = " Hai assorbito " + restore + " üåä Mana Blu dall'incantesimo!";
																									connection.query('UPDATE event_mana_status SET mana_1 = mana_1 + ' + restore + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									setAchievement(player_id, 29, restore);
																									setAchievement(player_id, 81, restore);
																								}
																							}
																						}
																					} else {
																						var r = 100;
																						rand = Math.random() * 100;
																						if ((player_weapon3_id == 671) || (automagic3 == 2))
																							r = 50;
																						else if (player_weapon3_id == 791)
																							r = 75;
																						if ((r >= rand) && (meParalyzed == 0)) {
																							enemy_magic = magicToName(2);
																							connection.query('UPDATE player SET paralyzed = 2 WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							setAchievement(player_id, 66, 1);
																							if (((player_weapon2_id == 690) || (automagic2 == 2)) || (player_weapon2_id == 790)) {
																								var r2 = Math.random() * 100;
																								var prob = 50;
																								if (player_weapon2_id == 790) 
																									prob = 25;
																								if (r2 < prob) {
																									var restore = Math.round(getRandomArbitrary(50, 150));
																									restored = " Hai assorbito " + restore + " ‚ö°Ô∏è Mana Giallo dall'incantesimo!";
																									connection.query('UPDATE event_mana_status SET mana_2 = mana_2 + ' + restore + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									setAchievement(player_id, 29, restore);
																									setAchievement(player_id, 81, restore);
																								}
																							}
																						}
																					}
																				}
																			}

																			var multi = Math.round(Math.floor(player_exp / 10) / 10);
																			if (multi >= 3)
																				danno = danno * 3;
																			else
																				danno = danno * multi;

																			if ((boost_mission > 0) && (boost_id == 6) && (meParalyzed == 0)) {
																				setBoost(player_id, boost_mission, boost_id);
																				danno = danno * 2;
																			}

																			var en_rand = Math.random() * 100;
																			var crit_en2 = "";
																			if (en_rand <= en_crit2) {
																				danno = danno / 2;
																				crit_en2 = ", ridotti a causa della sua corazza";
																			}

																			en_rand = Math.random() * 100;
																			if (en_rand <= en_crit3)
																				danno = 0;

																			if (danno < 0)
																				danno = 0;

																			if (danno - monster_life > 0)
																				danno = monster_life;

																			danno = Math.round(danno);

																			if (danno > 0) {
																				setAchievement(player_id, 2, danno);
																				if ((player_weapon_id == 0) && (player_weapon2_id == 0) && (player_weapon3_id == 0))
																					setAchievement(player_id, 71, danno);
																			}

																			if (danno > monster_life)
																				danno = monster_life;

																			var lifesum = monster_life - danno;
																			if (lifesum <= 0) {
																				connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0, room_id = room_id+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;

																					var chest_id = Math.ceil(room_id / 10);
																					var money = 0;
																					var moneyText = "";
																					var rand = Math.random() * 100;
																					var exp = 1;

																					if (cursed == 1)
																						exp = 0;

																					if (chest_id >= 4)
																						chest_id = 4;

																					money = Math.round(Math.random() * (room_id * 50) + (rank * 2));
																					var now = new Date();
																					if (now.getHours() < 6)
																						money = money * 2;
																					if ((class_id == 9) && (reborn == 5))
																						money += money * 0.1;

																					if (rand < 15)
																						chest_id++;
																					if (boss_battle == 1) {
																						chest_id++;
																						exp++;
																					}
																					if (crazyMode == 1) {
																						if (chest_id < 6)
																							chest_id++;
																					}

																					connection.query('SELECT name FROM chest WHERE id = ' + chest_id, function (err, rows, fields) {
																						if (err) throw err;

																						var chestName = rows[0].name;
																						var randS = Math.random() * 100;
																						var chest = 0;
																						if (randS <= 90) {
																							addChest(player_id, chest_id);
																							chest = 1;
																						}
																						if ((boss_battle == 1) && (chest == 0)) {
																							addChest(player_id, chest_id);
																							chest = 1;
																						}
																						if ((boost_mission > 0) && (boost_id == 7)) {
																							money = money*10;
																							setBoost(player_id, boost_mission, boost_id);
																						}
																						if (boss_battle == 1)
																							money = money*3;

																						/*
																						if (global_end == 1) {
																							money = money*2;
																							chest++;
																							addChest(player_id, chest_id);
																						}
																						*/

																						money = Math.round(money);
																						moneyText = formatNumber(money) + " ¬ß";

																						if (enemy_magic == magicToName(2))
																							bot.sendMessage(message.chat.id, "Prima di esalare l'ultimo respiro, lancia " + enemy_magic);

																						if (restored != "")
																							bot.sendMessage(message.chat.id, restored.trim());

																						if (player_weapon_id == 373)
																							setAchievement(player_id, 52, 1);

																						if ((player_weapon_id == 264) || (player_weapon2_id == 266) || (player_weapon3_id == 272))
																							setAchievement(player_id, 76, 1);

																						if (danno >= monster_total_life)
																							setAchievement(player_id, 84, 1);

																						var exp_text = "";
																						if (exp > 0)
																							exp_text =  " ed ottenuto " + exp + " exp";

																						if (chest > 0)
																							bot.sendMessage(message.chat.id, "Hai ucciso il mostro, infliggendo " + formatNumber(danno) + " danni" + exp_text + ".\nFrugando tra le sue cose hai ottenuto *" + moneyText + "* e " + chest + "x *" + chestName + "*!", dNext);
																						else if (chest == 0)
																							bot.sendMessage(message.chat.id, "Hai ucciso il mostro, infliggendo " + formatNumber(danno) + " danni" + exp_text + ".\nFrugando tra le sue cose hai ottenuto *" + moneyText + "*!", dNext);

																						if ((snowHouse == 1) && (snowHouseEnd == 0)) {
																							var rand = Math.random()*100;
																							if (rand < 5) {
																								connection.query('SELECT COUNT(id) As cnt FROM event_snowball_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																									if (rows[0].cnt > 0) {
																										connection.query('SELECT COUNT(id) As cnt FROM event_snowball_list WHERE player_id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																											var snowball = 1+parseInt(rows[0].cnt);
																											connection.query('UPDATE event_snowball_status SET snowball = snowball+' + snowball + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																												if (err) throw err;
																												if (snowball > 1)
																													bot.sendMessage(message.chat.id, "Hai trovato " + snowball + " Palle di Neve!");
																												else
																													bot.sendMessage(message.chat.id, "Hai trovato 1 Palla di Neve!");
																												console.log(snowball + " palle di neve a " + message.from.username);
																											});
																										});
																									}
																								});
																							};
																						};

																						setAchievement(player_id, 3, 1);

																						if (boss_battle == 1) {
																							connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;

																								var rankPoint = 1;
																								if (luckyMode == 1) {
																									var d = new Date();
																									var rand = Math.random() * 100;
																									if (d.getDay() == 6) {
																										if (rand < 25)
																											rankPoint = 2;
																									} else if (d.getDay() == 0) {
																										if (rand < 25)
																											rankPoint = 2;
																										else if ((rand > 25) && (rand < 50))
																											rankPoint = 0;
																									}
																								}

																								if (crazyMode == 1) {
																									var prob = Math.round()*100;
																									if (prob < 50)
																										rankPoint = 2;
																								}

																								if (cursed == 1)
																									rankPoint = 2;

																								var refill = "";
																								if (player_life < player_total_life / 2) {
																									connection.query('UPDATE player SET life = ROUND(total_life/2,0) WHERE id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									refill = "Inoltre la tua salute √® stata ricaricata fino al 50%!";
																								}

																								var plur = "o";
																								if (rankPoint > 1)
																									plur = "i";

																								connection.query('SELECT min_rank FROM dungeon_list WHERE main = 1 AND min_rank > ' + dungeon_min_rank + ' ORDER BY min_rank ASC LIMIT 1', function (err, rows, fields) {
																									if (err) throw err;

																									var min_rank_succ = 9999;	// per l'ultimo, da 1000 a 9999
																									if (Object.keys(rows).length > 0)
																										min_rank_succ = rows[0].min_rank;

																									connection.query('SELECT chat_id, rank FROM player WHERE id = ' + pass_id, function (err, rows, fields) {
																										if (err) throw err;

																										var getrank1 = 0;

																										if (pass_id != 0) {
																											var getrank2 = 0;
																											// console.log("rank: ", dungeon_min_rank, rows[0].rank, min_rank_succ);
																											if ((dungeon_min_rank <= rows[0].rank) && (min_rank_succ >= rows[0].rank)) {	// stessa fascia di rango
																												connection.query('UPDATE player SET rank = rank+' + rankPoint + ' WHERE id = ' + player_id, function (err, rows, fields) {
																													if (err) throw err;
																												});
																												getrank1 = 1;
																												connection.query('UPDATE player SET rank = rank+' + rankPoint + ' WHERE id = ' + pass_id, function (err, rows, fields) {
																													if (err) throw err;
																												});
																												getrank2 = 1;
																											} else if (rank - rows[0].rank >= 150) {
																												connection.query('UPDATE player SET rank = rank+' + rankPoint + ' WHERE id = ' + pass_id, function (err, rows, fields) {
																													if (err) throw err;
																												});
																												getrank2 = 1;
																											} else {
																												connection.query('UPDATE player SET rank = rank+' + rankPoint + ' WHERE id = ' + player_id, function (err, rows, fields) {
																													if (err) throw err;
																												});
																												getrank1 = 1;
																												connection.query('UPDATE player SET rank = rank+' + rankPoint + ' WHERE id = ' + pass_id, function (err, rows, fields) {
																													if (err) throw err;
																												});
																												getrank2 = 1;
																											}

																											if (getrank2 == 1)
																												bot.sendMessage(rows[0].chat_id, "Il tuo compagno " + message.from.username + " ha completato il dungeon ed hai ottenuto " + rankPoint + " punt" + plur + " rango!");
																											else
																												bot.sendMessage(rows[0].chat_id, "Il tuo compagno " + message.from.username + " ha completato il dungeon!");
																										} else {
																											connection.query('UPDATE player SET rank = rank+' + rankPoint + ' WHERE id = ' + player_id, function (err, rows, fields) {
																												if (err) throw err;
																											});
																											getrank1 = 1;
																										}

																										if (getrank1 == 1)
																											now_rank += rankPoint;

																										setAchievement(player_id, 26, 1);

																										connection.query('SELECT name FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
																											if (err) throw err;

																											var dungeon_name = rows[0].name;

																											var dBack = {
																												parse_mode: "Markdown",
																												reply_markup: {
																													resize_keyboard: true,
																													keyboard: [["Torna al dungeon"], ["Torna al menu"]]
																												}
																											};

																											if (getrank1 == 1)
																												bot.sendMessage(message.chat.id, "Hai completato il dungeon *" + dungeon_name + "*! Hai ottenuto " + rankPoint + " punt" + plur + " rango, ne possiedi " + now_rank + "!\n" + refill, dBack);
																											else
																												bot.sendMessage(message.chat.id, "Hai completato il dungeon *" + dungeon_name + "*, possiedi " + now_rank + " rango!\n" + refill, dBack);
																										});

																										var rand = Math.round(Math.random() * 100);
																										if ((rand <= 5) && (rank > 20)) {
																											addItem(player_id, 618);
																											bot.sendMessage(message.chat.id, "Sul pavimento appena fuori dal dungeon hai trovato una *Capsula Estrazione*! Che fortuna!", mark);
																										}

																										var d = new Date();
																										d.setHours(d.getHours() + wait_dungeon);
																										var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																										connection.query('UPDATE player SET dungeon_count = dungeon_count+1, dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																											if (err) throw err;
																										});

																										connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																									});
																								});
																							});
																						}

																						var d = new Date();
																						var sec = wait_room;

																						if (abBonus2 > 0)
																							sec -= abBonus2;
																						if ((class_id == 3) && (reborn == 3))
																							sec = sec - 120;
																						if ((class_id == 9) && (reborn > 1))
																							sec = sec - 120;
																						if ((class_id == 9) && (reborn == 5))
																							sec = sec - 180;
																						if ((class_id == 3) && (reborn >= 4))
																							sec = sec - 240;
																						if (crazyMode == 1)
																							sec = sec - 120;

																						if (boost_id == 8)
																							sec = Math.ceil(sec/2);

																						d.setSeconds(d.getSeconds() + sec);

																						var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

																						if (boost_id == 8)
																							setBoost(player_id, boost_mission, boost_id);
																						connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});

																						if (exp > 0)
																							setExp(player_id, exp);

																						connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					});
																				});
																				return;
																			} else {
																				if (meParalyzed == 0) {
																					if (danno == 0) {
																						if (paralyzed > 0)
																							bot.sendMessage(message.chat.id, "Non hai inflitto danno al mostro!");
																						else
																							bot.sendMessage(message.chat.id, "Il mostro ha evitato il tuo colpo!");
																					} else
																						bot.sendMessage(message.chat.id, "Hai colpito il mostro e hai inferto *" + formatNumber(danno) + "* danni" + crit_txt + magic_txt + crit_en2 + "!", mark);
																				} else if (meParalyzed == 1) {
																					if ((player_paralyzed - 1) != 0)
																						bot.sendMessage(message.chat.id, "Non sei riuscito a colpire il mostro, sei ancora paralizzato per " + (player_paralyzed - 1) + " turni");
																					else
																						bot.sendMessage(message.chat.id, "Non sei riuscito a colpire il mostro, ma ora non sei pi√π paralizzato");
																				}
																				connection.query('UPDATE dungeon_status SET monster_life = ' + lifesum + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			}

																			if (paralyzed > 0) {
																				bot.sendMessage(message.chat.id, "Il mostro √® paralizzato!", dBattle);
																				return;
																			}

																			var extra = "";
																			if (enemy_magic != "") {
																				extra = "ha lanciato *" + enemy_magic + "*";
																				if (heal_enemy != 0)
																					extra += " (+" + formatNumber(heal_enemy) + " hp)";
																			}

																			if (magic == 1)
																				damage = 0;

																			if (damage > 0)
																				setAchievement(player_id, 30, damage);

																			var mylifesum = player_life - damage;
																			if (mylifesum <= 0) {
																				connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 6', function (err, rows, fields) {
																					if (err) throw err;

																					if (Object.keys(rows).length > 0) {
																						if (rows[0].ability_level > 0) {
																							var att = Math.ceil(rows[0].ability_level / 2);
																							if ((class_id == 5) && (reborn == 5))
																								att += 5;
																							if (refilled < att) {
																								var refill = Math.floor(player_total_life * (rows[0].ability_level / 10)); // Cura = livello*10%
																								connection.query('UPDATE player SET refilled = refilled+1, life = ' + refill + ' WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																									bot.sendMessage(message.chat.id, "Il mostro ti colpisce mortalmente ma grazie all'Intervento Divino torni in battaglia con " + formatNumber(refill) + "/" + formatNumber(player_total_life) + " hp! (" + (att-(refilled+1)) + " residui)", dBattle);
																								});
																								return;
																							}
																						}
																					}

																					connection.query('UPDATE player SET life = life-' + damage + ', paralyzed = 0 WHERE id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																						connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;

																							if (extra != "")
																								bot.sendMessage(message.chat.id, "Il mostro " + extra + " e ti ha ucciso, vieni riportato all'entrata del dungeon.\nIl tuo rango viene ridotto.", back);
																							else
																								bot.sendMessage(message.chat.id, "Sei stato ucciso dal mostro, vieni riportato all'entrata del dungeon.\nIl tuo rango viene ridotto.", back);

																							var d = new Date();
																							d.setHours(d.getHours() + wait_dungeon_long);
																							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																							connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							if (cursed == 1) {
																								if (rank == 1) {
																									connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								} else if (rank > 1) {
																									connection.query('UPDATE player SET rank = rank-2 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																							} else {
																								if (rank > 0) {
																									connection.query('UPDATE player SET rank = rank-1 WHERE rank > 0 AND id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																							}
																						});
																					});
																				});
																				return;
																			} else {
																				var text2 = " hai perso *" + formatNumber(damage) + "* hp" + en_crit_txt + crit_txt2 + "!" + restored;
																				var magic_txt2 = "";

																				connection.query('UPDATE player SET life = life-' + damage + ' WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																					if (magic == 1) {
																						connection.query('UPDATE player SET life = life+' + heal + ' WHERE id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																							calcLife(message);
																							//console.log("Ricarica salute dungeon: " + heal);
																						});
																						if (magicDouble == 1) {
																							magic_txt2 += " (+" + formatNumber(heal) + " hp e danni - x2)";
																						} else {
																							magic_txt2 += " (+" + formatNumber(heal) + " hp e danni)";
																						}
																					}

																					if (damage == 0) {
																						if (extra != "") {
																							bot.sendMessage(message.chat.id, "Il mostro " + extra + ", ma il suo attacco successivo non riesce a scalfire l'armatura" + magic_txt2 + "!" + restored, dBattle);
																						} else if (magic == 1) {
																							bot.sendMessage(message.chat.id, "Hai lanciato " + magicToName(1) + ", previeni il danno del mostro e ne rifletti una parte potenziando il tuo attacco (subisce *" + formatNumber(danno) + "* danni), inoltre ti curi di *" + formatNumber(heal) + "* hp", dBattle);
																						} else {
																							bot.sendMessage(message.chat.id, "Il mostro non riesce a scalfire l'armatura" + crit_txt3 + magic_txt2 + "!", dBattle);
																						}
																					} else {
																						if (extra != "")
																							extra += " e ";
																						bot.sendMessage(message.chat.id, "Il mostro " + extra + "ti ha ferito," + text2 + magic_txt2, dBattle);
																					}
																				});
																			}
																		});
																	};
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/cassa rinascita|torna alla cassa$/i, function (message) {
	connection.query('SELECT account_id, holiday, id, reborn, exp FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var exp = rows[0].exp;

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla cassa"]]
			}
		};

		var kbConf = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Conferma"], ["Torna al menu"]]
			}
		};

		if (reborn > 3) {
			bot.sendMessage(message.chat.id, "Non puoi utilizzare la Cassa a questa rinascita!", back);
			return;
		}

		connection.query('SELECT 1 FROM reborn_save WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				bot.sendMessage(message.chat.id, "Hai gi√† attivato il salvataggio zaino per questa rinascita", back);
				return;
			}

			var cost = 10*reborn;
			bot.sendMessage(message.chat.id, "La Cassa Rinascita manterr√† per te tutti gli oggetti nello zaino per sole " + cost + " üíé durante la rinascita, continuare?", kbConf).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text == "Conferma") {

						connection.query('SELECT gems FROM player WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							if (rows[0].gems < cost) {
								bot.sendMessage(message.chat.id, "Non hai abbastanza üíé, ne servono " + cost, back);
								return;
							}

							connection.query('UPDATE player SET gems = gems-' + cost + ' WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO reborn_save (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Salvataggio completato! Hai speso " + cost + " üíé", back);
									return;
								});
							});
						});
					}
				}
			});
		});
	});
});

bot.onText(/rinasci/i, function (message) {
	if (message.text.toLowerCase() == "cassa rinascita")
		return;

	if (message.text.indexOf("Rinascita") != -1)
		return;

	connection.query('SELECT account_id, holiday, id, reborn, exp FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var maxlev = 150;

		if (reborn == 1) {
			maxlev = 150;
			if (rows[0].exp < 1000) {
				bot.sendMessage(message.chat.id, "Raggiungi il livello 100 per accedere alla rinascita.", back);
				return;
			}
		} else if (reborn == 2) {
			maxlev = 200;
			if (rows[0].exp < 1500) {
				bot.sendMessage(message.chat.id, "Raggiungi il livello 150 per accedere alla rinascita.", back);
				return;
			}
		} else if (reborn == 3) {
			maxlev = 300;
			if (rows[0].exp < 2000) {
				bot.sendMessage(message.chat.id, "Raggiungi il livello 200 per accedere alla rinascita.", back);
				return;
			}
		} else if (reborn == 4) {
			maxlev = 1000;
			if (rows[0].exp < 3000) {
				bot.sendMessage(message.chat.id, "Raggiungi il livello 300 per accedere alla rinascita.", back);
				return;
			}
		} else if (reborn == 5) {
			maxlev = 2000;
			if (rows[0].exp < 10000) {
				bot.sendMessage(message.chat.id, "Raggiungi il livello 1.000 per accedere alla rinascita.", back);
				return;
			}
		} else {
			bot.sendMessage(message.chat.id, "Hai raggiunto il massimo livello di rinascita.", back);
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Avvia Rinascita " + reborn], ["Cassa Rinascita"], ["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna al menu"]]
			}
		};

		var text = "*Desideri rinascere?*\nIl tuo personaggio perder√† exp e zaino (se non salvato nella Cassa Rinascita)!\nRiceverai il simbolo di rinascita nelle informazioni del tuo account, inoltre un premio in ¬ß e una grande quantit√† di Scrigni per ricominciare a creare oggetti!\nDopo la rinascita il livello massimo sar√† " + maxlev + "!";

		if (reborn == 4)
			text = "Desideri rinascere?\nIl tuo personaggio non perder√† alcuna risorsa, riceverai il simbolo speciale e il massimo livello sar√† il 1.000. Tuttavia per iniziare la rinascita ti servono almeno due Artefatti!\nProcedi?";
		else if (reborn == 5)
			text = "Desideri rinascere?\nIl tuo personaggio non perder√† alcuna risorsa, il massimo livello sar√† il 2.000. Tuttavia per iniziare la rinascita ti servono almeno sei Artefatti!\nProcedi?";

		bot.sendMessage(message.chat.id, text, kb).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				var resp = answer.text;
				if (resp == "Avvia Rinascita " + reborn) {
					connection.query('SELECT 1 FROM reborn_save WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var rebornSave = 0;
						var save = "\nNon hai salvato gli oggetti nella Cassa Rinascita, perderai tutto lo zaino, scrigni, monete ed exp.";
						if (Object.keys(rows).length == 1) {
							rebornSave = 1;
							save = "\nHai salvato gli oggetti nella Cassa Rinascita, non perderai lo zaino ma solo scrigni, monete ed exp.";
						}
						if (reborn >= 4) {
							rebornSave = 1;
							save = "\nNon √® necessario salvare gli oggetti, non perderai nulla.";
						}

						bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler continuare?" + save, kbYesNo).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase() != "si") {
									return;
								}
								if (reborn == 1) {
									var money = 250000;
									var reborn_val = 2;
									var chest1 = 30;
									var chest2 = 25;
									var chest3 = 20;
									var chest4 = 15;
									var chest5 = 10;
									var chest6 = 5;
									var chest7 = 1;

									connection.query('SELECT player_id FROM referral_list WHERE new_player = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length > 0) {
											connection.query('SELECT chat_id, id FROM player WHERE id = ' + rows[0].player_id, function (err, rows, fields) {
												if (err) throw err;
												var chat_id = rows[0].chat_id;
												connection.query('UPDATE player SET gems = gems+1, money = money+500000, gems = gems+10 WHERE id = ' + rows[0].id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(chat_id, "L'utente <b>" + message.from.username + "</b> che hai invitato ha appena raggiunto la Rinascita 1! Hai ottenuto cos√¨ 10 üíé e 500.000 ¬ß!", html);
												});
											});
										}
									});

								} else if (reborn == 2) {
									var money = 500000;
									var reborn_val = 3;
									var chest1 = 50;
									var chest2 = 45;
									var chest3 = 35;
									var chest4 = 30;
									var chest5 = 20;
									var chest6 = 10;
									var chest7 = 1;

									connection.query('SELECT player_id FROM referral_list WHERE new_player = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length > 0) {
											connection.query('SELECT chat_id, id FROM player WHERE id = ' + rows[0].player_id, function (err, rows, fields) {
												if (err) throw err;
												var chat_id = rows[0].chat_id;
												connection.query('UPDATE player SET gems = gems+1, money = money+1000000, gems = gems+10 WHERE id = ' + rows[0].id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(chat_id, "L'utente <b>" + message.from.username + "</b> che hai invitato ha appena raggiunto la Rinascita 2! Hai ottenuto cos√¨ 10 üíé e 1.000.000 ¬ß!", html);
												});
											});
										}
									});
								} else if (reborn == 3) {
									var money = 750000;
									var reborn_val = 4;
									var chest1 = 100;
									var chest2 = 70;
									var chest3 = 60;
									var chest4 = 50;
									var chest5 = 40;
									var chest6 = 20;
									var chest7 = 2;

									connection.query('SELECT player_id FROM referral_list WHERE new_player = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length > 0) {
											connection.query('SELECT chat_id, id FROM player WHERE id = ' + rows[0].player_id, function (err, rows, fields) {
												if (err) throw err;
												var chat_id = rows[0].chat_id;
												connection.query('UPDATE player SET gems = gems+1, money = money+2000000, gems = gems+10 WHERE id = ' + rows[0].id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(chat_id, "L'utente <b>" + message.from.username + "</b> che hai invitato ha appena raggiunto la Rinascita 3! Hai ottenuto cos√¨ 10 üíé e 2.000.000 ¬ß!", html);
												});
											});
										}
									});
								} else if (reborn == 4) {
									var reborn_val = 5;

									connection.query('SELECT COUNT(id) As num FROM artifacts WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (rows[0].num < 2) {
											bot.sendMessage(message.chat.id, "Devi prima ottenere almeno due artefatti!", back);
											return;
										}

										connection.query('UPDATE player SET exp = 1, life = 100, total_life = 100, mission_auto_id = 1, reborn = ' + reborn_val + ' WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai completato la quarta rinascita! Ma la strada √® ancora lunga!", back);
										});
									});
									return;
								} else if (reborn == 5) {
									var reborn_val = 6;

									connection.query('SELECT COUNT(id) As num FROM artifacts WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (rows[0].num < 6) {
											bot.sendMessage(message.chat.id, "Devi prima ottenere almeno sei artefatti!", back);
											return;
										}

										connection.query('UPDATE player SET exp = 1, life = 100, total_life = 100, mission_auto_id = 1, reborn = ' + reborn_val + ' WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai completato la quinta rinascita!", back);
										});
									});
									return;
								} else {
									bot.sendMessage(message.chat.id, "Rinascita non valida!", back);
									return;
								}

								connection.query('UPDATE player SET exp = 10, life = 100, total_life = 100, money = ' + money + ', mission_auto_id = 1, reborn = ' + reborn_val + ' WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (rebornSave == 0)
										delAllInventory(player_id);
									else {
										connection.query('DELETE FROM reborn_save WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
									}

									delAllChestInventory(player_id);

									addChest(player_id, 1, chest1);
									addChest(player_id, 2, chest2);
									addChest(player_id, 3, chest3);
									addChest(player_id, 4, chest4);
									addChest(player_id, 5, chest5);
									addChest(player_id, 6, chest6);
									addChest(player_id, 7, chest7);

									bot.sendMessage(message.chat.id, "Complimenti, " + message.from.username + "!\n" +
													"Hai completato la rinascita " + reborn + " e hai ottenuto:\n" +
													chest1 + " Scrigni di Legno\n" +
													chest2 + " Scrigni di Ferro\n" +
													chest3 + " Scrigni Preziosi\n" +
													chest4 + " Scrigni di Diamante\n" +
													chest5 + " Scrigni Leggendari\n" +
													chest6 + " Scrigni Epici\n" +
													chest7 + " Scrigni Capsula\n" +
													"Oltre a " + money + " ¬ß\n" +
													"Ed ora continua la tua incredibile avventura! Buon game!", back_html);
									console.log("Rinascita " + reborn + " per " + message.from.username + " completata");
									calcLife(message);
								});
							};
						});
					});
				}
			};
		});
	});
});

bot.onText(/link invito/i, function (message) {
	connection.query('SELECT id, invite_code, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		code = "*Il tuo codice invito*: https://telegram.me/lootgamebot?start=" + rows[0].invite_code + "\n\nAssicurati che il nickname sia impostato prima di  utilizzare il link!";
		bot.sendMessage(message.chat.id, code, no_preview_back).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text == "Torna al menu") {
					return;
				}
			};
		});
	});
});

bot.onText(/Ritorna/i, function (message) {
	connection.query('SELECT id, holiday, travel_id, travel_time_end, travel_limit, cave_id, cave_time_end, cave_limit, exp, gems FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var player_id = rows[0].id;
		var travel_time_end = rows[0].travel_time_end;
		var cave_time_end = rows[0].cave_time_end;

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if ((rows[0].travel_id == 0) && (rows[0].cave_id == 0)) {
			bot.sendMessage(message.chat.id, "Non sei in viaggio.", kbBack);
			return;
		}

		var travel_id = rows[0].travel_id;
		var cave_id = rows[0].cave_id;
		var cave_limit = rows[0].cave_limit;
		var travel_limit = rows[0].travel_limit;

		if (rows[0].exp < 5) {
			bot.sendMessage(message.chat.id, "Non hai abbastanza exp!", kbBack)
			return;
		}

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna ai viaggi"], ["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, "Sicuro di voler annullare il viaggio? Ti coster√† 5 exp", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					if (travel_id != 0) {
						if (travel_limit > 1) {
							bot.sendMessage(message.chat.id, "Sei gi√† ritornato da un viaggio troppe volte!", kbBack)
							return;
						}

						setAchievement(player_id, 59, 1);

						connection.query('SELECT duration FROM travel WHERE id = ' + travel_id, function (err, rows, fields) {
							if (err) throw err;
							connection.query('UPDATE player SET travel_id = 0, travel_time_end = NULL, exp = exp-5, travel_limit = travel_limit+1 WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai sacrificato 5 exp e sei rientrato dal viaggio senza averlo completato.", kbBack);
							});
						});
					} else if (cave_id != 0) {
						if (cave_limit > 1) {
							bot.sendMessage(message.chat.id, "Sei gi√† ritornato da una cava troppe volte!", kbBack)
							return;
						}

						setAchievement(player_id, 59, 1);

						connection.query('SELECT duration FROM cave WHERE id = ' + cave_id, function (err, rows, fields) {
							if (err) throw err;
							connection.query('UPDATE player SET cave_id = 0, cave_time_end = NULL, exp = exp-5, cave_limit = cave_limit+1 WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai sacrificato 5 exp e sei rientrato dalla cava senza averla completata.", kbBack);
							});
						});
					}
				}
			};
		});
	});
});

bot.onText(/Termina subito/i, function (message) {
	connection.query('SELECT holiday, mission_id, mission_time_end, id, gems FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var mission_time_end = rows[0].mission_time_end;
		var player_id = rows[0].id;

		if (rows[0].mission_id == 0) {
			bot.sendMessage(message.chat.id, "Non sei in missione.", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var d = new Date(mission_time_end);
		var now = new Date();
		var diff = Math.round(((now - d) / 1000) / 60); //minuti
		diff = Math.abs(diff);

		if (diff < 5) {
			bot.sendMessage(message.chat.id, "Manca meno di 5 minuti al termine della missione, pazienta!", back)
			return;
		}

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Emporio"], ["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, "Sicuro di voler terminare subito la missione? Consumerai una üíé. Ne possiedi " + rows[0].gems, yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					connection.query('SELECT gems, mission_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						if (rows[0].mission_id == 0) {
							bot.sendMessage(message.chat.id, "Non sei pi√π in missione.", back);
							return;
						}
						if (rows[0].gems < 1) {
							bot.sendMessage(message.chat.id, "Non hai abbastanza üíé.", kbBack);
							return;
						}

						setAchievement(player_id, 24, 1);

						var d2 = new Date();
						var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

						connection.query('UPDATE player SET gems = gems-1, mission_time_end = "' + long_date + '", mission_gem = 1, event = 1 WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Missione terminata! Attendi qualche secondo per ricevere il premio...", back);
						});
					});
				}
			};
		});
	});
});

bot.onText(/Completa immediatamente/i, function (message) {

	if (wanted == 1) {
		bot.sendMessage(message.chat.id, "Le ispezioni durante il ricercato non possono essere velocizzate!", back)
		return;
	}

	connection.query('SELECT holiday, id, gems FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var gems = rows[0].gems;

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		connection.query('SELECT id, datetime FROM heist WHERE from_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non hai un ispezione in corso", back);
				return;
			}

			var d = new Date(rows[0].datetime);
			var now = new Date();
			var diff = Math.round(((now - d) / 1000) / 60); //minuti
			diff = Math.abs(diff);

			if (diff < 5) {
				bot.sendMessage(message.chat.id, "Manca meno di 5 minuti al termine dell'ispezione, pazienta!", back)
				return;
			}

			bot.sendMessage(message.chat.id, "Sicuro di voler terminare subito l'ispezione?\nConsumerai due üíé. Ne possiedi " + gems, yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('SELECT id, datetime FROM heist WHERE from_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Non hai pi√π un ispezione in corso", back);
								return;
							}

							connection.query('SELECT gems FROM player WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								var kbBack = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["Emporio"], ["Torna al menu"]]
									}
								};

								if (rows[0].gems < 2) {
									bot.sendMessage(message.chat.id, "Non hai abbastanza üíé.", kbBack);
									return;
								}

								var d2 = new Date();
								var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

								connection.query('UPDATE heist SET datetime = "' + long_date + '" WHERE from_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									connection.query('UPDATE player SET gems = gems-2 WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Fatto! Attendi qualche secondo per conoscere il risultato.", back);
									});
								});
							});
						});
					}
				};
			});
		});
	});
});

bot.onText(/Concludi immediatamente/i, function (message) {
	/*
	if (message.from.id != 20471035) {
		return;
	}
	*/

	connection.query('SELECT id, holiday, boost_id, boost_mission, cave_id, cave_time_end, gems FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var gems = rows[0].gems;

		if (rows[0].cave_id == 0) {
			bot.sendMessage(message.chat.id, "Non sei in cava.", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var d = new Date(rows[0].cave_time_end);
		var now = new Date();
		var diff = Math.round(((now - d) / 1000) / 60); //minuti
		diff = Math.abs(diff);

		if (diff < 5) {
			bot.sendMessage(message.chat.id, "Manca meno di 5 minuti al termine dell'esplorazione della cava, pazienta!", back)
			return;
		}

		var cave_id = rows[0].cave_id;

		if (cave_id != 0) {
			var num = 0;
			if ((rows[0].boost_id == 3) && (rows[0].boost_mission > 0))
				num = (3 + cave_id) * 2;
			else
				num = (3 + cave_id);
			bot.sendMessage(message.chat.id, "Sicuro di voler terminare subito l'esplorazione della cava? Ti coster√† " + num + " üíé. Ne possiedi " + gems, yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('SELECT gems, cave_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							if (rows[0].cave_id == 0) {
								bot.sendMessage(message.chat.id, "Non sei pi√π in cava.", back);
								return;
							}

							var kbBack = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Emporio"], ["Torna al menu"]]
								}
							};

							if (rows[0].gems < num) {
								bot.sendMessage(message.chat.id, "Non hai abbastanza üíé.", kbBack);
								return;
							}

							setAchievement(player_id, 24, 1);

							var d2 = new Date();
							var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

							connection.query('UPDATE player SET gems = gems-' + num + ', cave_time_end = "' + long_date + '", cave_gem = 1 WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Fatto! Attendi qualche minuto per ricevere il premio.", back);
							});
						});
					}
				};
			});
		}
	});
});

bot.onText(/scomponi/i, function (message) {

	if (eventFestival == 1) {
		bot.sendMessage(message.chat.id, "Durante il festival non √® possibile utilizzare questa funzione!", back);
		return;
	}

	connection.query('SELECT id, exp, reborn, holiday, gems, account_id, craft_count FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;

		if ((Math.floor(exp / 10) < 50) && (reborn == 1)) {
			bot.sendMessage(message.chat.id, "Il tuo livello √® troppo basso", back);
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Niente"], ["Torna all'alchimia"]]
			}
		};

		bot.sendMessage(message.chat.id, "Puoi scomporre un oggetto nei suoi oggetti di creazione in base a questi criteri:\n\n" +
						"NC: 5.000 ¬ß\n" +
						"R: 10.000 ¬ß + 2 Punti Creazione\n" +
						"UR: 25.000 ¬ß + 4 Punti Creazione\n" +
						"S: 1 üíé + 5 Punti Creazione\n" +
						"L-E: 1 üíé + 6-10 Punti Creazione\n" +
						"UE-U: 2 üíé + 50-70 Punti Creazione\n\n" +
						"I punti vengono controllati sulle creazioni settimanali. Scrivi il nome completo dell'oggetto da scomporre.", kb).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text == "Niente")
					return;
				else {
					var ogg = answer.text.trim();

					var kbQnt = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["1", "5", "10"], ["Annulla"]]
						}
					};

					connection.query('SELECT item.id, item.rarity, item.craftable FROM item WHERE item.name = "' + ogg + '"', function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0) {
							bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste", back);
							return;
						}

						bot.sendMessage(message.chat.id, "Quante copie dell'oggetto vuoi scomporre? Ne possiedi " + getItemCnt(player_id, rows[0].id), kbQnt).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text != "Annulla") {

									var qnt = answer.text;

									connection.query('SELECT item.id, item.rarity, item.craftable, inventory.quantity FROM item, inventory WHERE item.id = inventory.item_id AND inventory.player_id = ' + player_id + ' AND item.name = "' + ogg + '" AND inventory.quantity > 0', function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", back);
											return;
										}

										if (rows[0].craftable == 0) {
											bot.sendMessage(message.chat.id, "L'oggetto selezionato non √® creabile", back);
											return;
										}

										if ((qnt < 1) || (re.test(qnt) == false)) {
											bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
											return;
										}

										qnt = parseInt(qnt);

										if (rows[0].quantity < qnt) {
											bot.sendMessage(message.chat.id, "Non possiedi abbastanza copie dell'oggetto selezionato.", back);
											return;
										}

										var craft = 0;
										var money = 0;
										var gems = 0;
										if (rows[0].rarity == "NC")
											money = 5000;
										else if (rows[0].rarity == "R") {
											money = 10000;
											craft = 2;
										} else if (rows[0].rarity == "UR") {
											money = 25000;
											craft = 4;
										} else if (rows[0].rarity == "L") {
											gems = 1;
											craft = 6;
										} else if (rows[0].rarity == "E") {
											gems = 1;
											craft = 10;
										} else if (rows[0].rarity == "UE") {
											gems = 2;
											craft = 50;
										} else if (rows[0].rarity == "U") {
											gems = 2;
											craft = 70;
										} else if (rows[0].rarity == "S") {
											gems = 1;
											craft = 5;
										} else {
											bot.sendMessage(message.chat.id, "Questa rarit√† non √® scomponibile", back);
											return;
										}

										money = money*qnt;
										gems = gems*qnt;
										craft = craft*qnt;

										var cons = "";
										if (money > 0)
											cons += "> " + formatNumber(money) + " ¬ß\n";
										if (gems > 0)
											cons += "> " + formatNumber(gems) + " üíé\n";
										if (craft > 0)
											cons += "> " + formatNumber(craft) + " punti creazione\n";

										bot.sendMessage(message.chat.id, "Sei sicuro? Consumerai:\n" + cons, yesno).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text == "Torna al menu") {
													return;
												} else if (answer.text.toLowerCase() == "si") {

													connection.query('SELECT item.id, item.rarity, item.craftable, inventory.quantity FROM item, inventory WHERE item.id = inventory.item_id AND inventory.player_id = ' + player_id + ' AND item.name = "' + ogg + '" AND inventory.quantity > 0', function (err, rows, fields) {
														if (err) throw err;

														if (Object.keys(rows).length == 0) {
															bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", back);
															return;
														}

														if (rows[0].quantity < qnt) {
															bot.sendMessage(message.chat.id, "Non possiedi abbastanza copie dell'oggetto selezionato.", back);
															return;
														}

														var material_result = rows[0].id;
														var rarity = rows[0].rarity;

														connection.query('SELECT gems, craft_count, money, craft_week FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
															if (err) throw err;

															if (rows[0].craft_week < craft) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza punti creazione settimanali", back);
																return;
															}

															if (rows[0].gems < gems) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza üíé", back);
																return;
															}

															if (rows[0].money < money) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza monete", back);
																return;
															}

															connection.query('UPDATE player SET money = money - ' + money + ', craft_week = craft_week - ' + craft + ', craft_day = craft_day - ' + craft + ', craft_count = craft_count - ' + craft + ', gems = gems - ' + gems + ' WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																connection.query('SELECT material_1, material_2, material_3 FROM craft WHERE material_result = ' + material_result, function (err, rows, fields) {
																	if (err) throw err;

																	addItem(player_id, rows[0].material_1, qnt);
																	addItem(player_id, rows[0].material_2, qnt);
																	addItem(player_id, rows[0].material_3, qnt);

																	delItem(player_id, material_result, qnt);

																	setAchievement(player_id, 25, qnt);

																	var kb = {
																		parse_mode: "Markdown",
																		reply_markup: {
																			resize_keyboard: true,
																			keyboard: [["Scomponi Ancora"], ["Torna al menu"]]
																		}
																	};

																	bot.sendMessage(message.chat.id, "Hai completato con successo la scomposizione!", kb);
																});
															});
														});
													});
												}
											}
										});
									});
								}
							}
						});
					});
				}
			};
		});
	});
});

bot.onText(/^Incanta|Torna all'incantamento/i, function (message) {

	if (message.text == "Incantaspade")
		return;

	connection.query('SELECT account_id, holiday, id, gems, class, reborn, exp, weapon, weapon2, weapon3, weapon_enchant, weapon2_enchant, weapon3_enchant, weapon_enchant_end, weapon2_enchant_end, weapon3_enchant_end, weapon_enchant_bonus, weapon2_enchant_bonus, weapon3_enchant_bonus, power_weapon, power_armor, power_shield FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var gems = rows[0].gems;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;
		var exp = rows[0].exp;
		var w1 = parseInt(rows[0].weapon);
		var w2 = parseInt(rows[0].weapon2);
		var w3 = parseInt(rows[0].weapon3);
		var p1 = rows[0].power_weapon;
		var p2 = rows[0].power_armor;
		var p3 = rows[0].power_shield;
		var e1 = rows[0].weapon_enchant;
		var e2 = rows[0].weapon2_enchant;
		var e3 = rows[0].weapon3_enchant;
		var t1 = rows[0].weapon_enchant_end;
		var t2 = rows[0].weapon2_enchant_end;
		var t3 = rows[0].weapon3_enchant_end;
		var b1 = rows[0].weapon_enchant_bonus;
		var b2 = rows[0].weapon2_enchant_bonus;
		var b3 = rows[0].weapon3_enchant_bonus;

		if ((t1 != null) && (t2 != null) && (t3 != null))
			setAchievement(player_id, 23, 999);

		if ((message.text.indexOf("Arma") != -1) || (message.text.indexOf("Armatura") != -1) || (message.text.indexOf("Scudo") != -1)) {
			connection.query('SELECT item.name, item.rarity, inventory.quantity As num FROM player, inventory, item WHERE player.id = inventory.player_id AND item.rarity IN ("E","X") AND inventory.item_id = item.id AND item.name LIKE "Runa%" AND player.id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
				if (err) throw err;

				var iKeys = [];

				if (Object.keys(rows).length > 0) {
					for (var i = 0, len = Object.keys(rows).length; i < len; i++)
						iKeys.push([rows[i].name + " (" + rows[i].rarity + ", " + rows[i].num + ")"]);
				}

				iKeys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: iKeys
					}
				};

				var kbBack = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Torna all'incantamento"],["Torna al menu"]]
					}
				};

				var type = message.text.substring(message.text.indexOf(" ") + 1);
				var text = "";
				var w_dmg = 0;
				var w_enc = 0;

				if (type == "Arma") {
					text = "dell'arma";
					w_dmg = w1;
					if (t1 != null) {
						var d = new Date(t1);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
						var kbExt = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Estendi Arma"], ["Torna all'incantamento"],["Torna al menu"]]
							}
						};
						bot.sendMessage(message.chat.id, "L'incantamento su questo oggetto √® ancora efficace fino alle " + short_date + ", puoi estenderlo di due ore al costo di 1 üíé", kbExt);
						return;
					}
				}
				if (type == "Armatura") {
					text = "dell'armatura";
					w_dmg = w2;
					if (t2 != null) {
						var d = new Date(t2);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
						var kbExt = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Estendi Armatura"], ["Torna all'incantamento"],["Torna al menu"]]
							}
						};
						bot.sendMessage(message.chat.id, "L'incantamento su questo oggetto √® ancora efficace fino alle " + short_date + ", puoi estenderlo di due ore al costo di 1 üíé", kbExt);
						return;
					}
				}
				if (type == "Scudo") {
					text = "dello scudo";
					w_dmg = w3;
					if (t3 != null) {
						var d = new Date(t3);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
						var kbExt = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Estendi Scudo"], ["Torna all'incantamento"],["Torna al menu"]]
							}
						};
						bot.sendMessage(message.chat.id, "L'incantamento su questo oggetto √® ancora efficace fino alle " + short_date + ", puoi estenderlo di due ore al costo di 1 üíé", kbExt);
						return;
					}
				}

				var kb2 = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Gemme", "Runa"], ["Torna al menu"]]
					}
				};

				connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 20', function (err, rows, fields) {
					if (err) throw err;

					var abBonus = 0;
					if (Object.keys(rows).length > 0)
						abBonus = parseInt(rows[0].ability_level) * rows[0].val;

					var d = new Date();
					var duration = 0;
					if (crazyMode == 1)
						duration = Math.round((10080+abBonus)/60);
					else
						duration = Math.round((2880+abBonus)/60);

					bot.sendMessage(message.chat.id, "Il valore attuale " + text + " √® *" + w_dmg + "*, puoi aumentarne temporaneamente il valore e attribuirle l'abilit√†  di lancio incantesimi, il tipo di incantesimo verr√† attribuito casualmente.\nL'effetto dell'incantamento durer√† *" + duration + " ore*\nVuoi utilizzare due üíé oppure una runa?", kb2).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {

							if (answer.text == "Torna al menu")
								return;
							else if (answer.text == "Runa") {
								bot.sendMessage(message.chat.id, "Quale Runa vuoi utilizzare?", kb).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text == "Torna al menu")
											return;

										var runa = "";
										var pos = answer.text.indexOf("(");
										if (pos != -1)
											runa = answer.text.substr(0, pos - 1);

										connection.query('SELECT item.name, item.id, item.rarity FROM inventory, item WHERE inventory.item_id = item.id AND item.name = "' + runa + '" AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0 AND item.rarity IN ("E","X")', function (err, rows, fields) {
											if (err) throw err;
											if (Object.keys(rows).length == 0) {
												bot.sendMessage(message.chat.id, "Non possiedi abbastanza Rune o la Runa selezionata non √® consentita!", kbBack);
												return;
											}

											var rand = 0;
											if (rows[0].rarity == "E")
												rand = Math.random() * 5 + 20; //20-25
											else if (rows[0].rarity == "X")
												rand = Math.floor(getRealLevel(reborn, Math.floor(exp/10))/20);
											else {
												bot.sendMessage(message.chat.id, "Non possiedi la Runa selezionata!", kbBack);
												return;
											}

											rand = Math.round(rand);
											delItem(player_id, rows[0].id, 1);
											setEnchant(message, player_id, type, rand, class_id, reborn);
										});
									};
								});
							} else if (answer.text == "Gemme") {
								bot.sendMessage(message.chat.id, "Sicuro di voler utilizzare due üíé?", yesno).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {
											if (gems < 2) {
												bot.sendMessage(message.chat.id, "Non possiedi abbastanza üíé", kbBack);
												return;
											} else {
												connection.query('UPDATE player SET gems = gems-2 WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											}
											var rand = 0;
											rand = Math.random() * 5 + 25; //5-30
											rand = Math.round(rand);

											setEnchant(message, player_id, type, rand, class_id, reborn);
										}
									}
								});
							}
						}
					});
				});
			});
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Incanta Arma", "Incanta Armatura", "Incanta Scudo"], ["Torna all'alchimia"], ["Torna al menu"]]
			}
		};

		var status = "";

		if (t1 != null) {
			var d = new Date(t1);
			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();

			status += "\n> Arma Incantata +" + e1 + " " + numToMana(b1) + " (" + short_date + ")";
		}

		if (t2 != null) {
			var d = new Date(t2);
			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();

			status += "\n> Armatura Incantata +" + e2 + " " + numToMana(b2) + " (" + short_date + ")";
		}

		if (t3 != null) {
			var d = new Date(t3);
			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();

			status += "\n> Scudo Incantato +" + e3 + " " + numToMana(b3) + " (" + short_date + ")";
		}

		bot.sendMessage(message.chat.id, "Per incantare un oggetto dell'equipaggiamento ti serve una Runa E oppure 2 üíé, aumenterai il valore dell'oggetto e la probabilit√† di lanciare incantesimi.\n" + status, kb);
	});
});

bot.onText(/^estendi (.+)/i, function (message, match) {
	connection.query('SELECT account_id, holiday, id, gems, weapon_enchant, weapon2_enchant, weapon3_enchant, weapon_enchant_end, weapon2_enchant_end, weapon3_enchant_end, weapon_enchant_bonus, weapon2_enchant_bonus, weapon3_enchant_bonus, power_weapon, power_armor, power_shield FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var gems = rows[0].gems;

		var weapon = match[1].toLowerCase();

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna all'incantamento"],["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna all'incantamento"],["Torna al menu"]]
			}
		};

		var weapon_desc = "";
		if (weapon == "arma") {
			if (rows[0].weapon_enchant == 0) {
				bot.sendMessage(message.chat.id, "Per poter estenderne l'incantamento, l'arma deve essere incantata", kbBack)
				return;
			}
			weapon_desc = "dell'arma";
		} else if (weapon == "armatura") {
			if (rows[0].weapon2_enchant == 0) {
				bot.sendMessage(message.chat.id, "Per poter estenderne l'incantamento, l'armatura deve essere incantata", kbBack)
				return;
			}
			weapon_desc = "dell'armatura";
		} else if (weapon == "scudo") {
			if (rows[0].weapon3_enchant == 0) {
				bot.sendMessage(message.chat.id, "Per poter estenderne l'incantamento, lo scudo deve essere incantato", kbBack)
				return;
			}
			weapon_desc = "dello scudo";
		} else {
			bot.sendMessage(message.chat.id, "Tipo di equipaggiamento non valido", kbBack);
			return;
		}

		bot.sendMessage(message.chat.id, "Puoi estendere di 2 ore l'incantamento attuale " + weapon_desc + ", ti coster√† 1 üíé, procedi?", kbYesNo).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {

					if (gems < 1) {
						bot.sendMessage(message.chat.id, "Non hai abbastanza üíé", kbBack);
						return;
					}

					connection.query('SELECT weapon_enchant, weapon2_enchant, weapon3_enchant, weapon_enchant_end, weapon2_enchant_end, weapon3_enchant_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						if (weapon == "arma") {
							if (rows[0].weapon_enchant == 0) {
								bot.sendMessage(message.chat.id, "L'arma non √® incantata", kbBack);
								return;
							}
							var d = new Date(rows[0].weapon_enchant_end);
							d.setHours(d.getHours() + 2);
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
							var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

							connection.query('UPDATE player SET gems = gems-1, weapon_enchant_end = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "L'incantamento dell'arma √® stato esteso fino alle " + short_date, kbBack);
							});
						} else if (weapon == "armatura") {
							if (rows[0].weapon2_enchant == 0) {
								bot.sendMessage(message.chat.id, "L'armatura non √® incantata", kbBack);
								return;
							}
							var d = new Date(rows[0].weapon2_enchant_end);
							d.setHours(d.getHours() + 2);
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
							var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

							connection.query('UPDATE player SET gems = gems-1, weapon2_enchant_end = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "L'incantamento dell'armatura √® stato esteso fino alle " + short_date, kbBack);
							});
						} else if (weapon == "scudo") {
							if (rows[0].weapon3_enchant == 0) {
								bot.sendMessage(message.chat.id, "Lo scudo non √® incantato", kbBack);
								return;
							}
							var d = new Date(rows[0].weapon3_enchant_end);
							d.setHours(d.getHours() + 2);
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
							var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

							connection.query('UPDATE player SET gems = gems-1, weapon3_enchant_end = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "L'incantamento dello scudo √® stato esteso fino alle " + short_date, kbBack);
							});
						}
					});
				}
			}
		});
	});
});

bot.onText(/fai nascere il drago|accudisci drago|nutri ancora|^drago$|^drago üêâ$|torna al drago/i, function (message) {
	connection.query('SELECT holiday, id, exp, charm_id, account_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var exp = rows[0].exp;

		helpMsg(message.chat.id, player_id, 5);

		connection.query('SELECT * FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length <= 0) {
				// Non possiede ancora il drago

				if (exp < 100) {
					bot.sendMessage(message.chat.id, "Devi aver raggiunto 100 exp per far nascere il drago.", back);
					return;
				}

				var dragon = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Dai un nome al drago!"], ["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Vuoi far nascere il drago?\nIl drago √® utile in varie situazioni:\n- Ti aiuta nelle lotte durante gli assalti\n- Riduce i tempi dei viaggi\n- Incrementa la protezione del tuo rifugio\n- Consente di produrre bevande per le missioni o i viaggi\n\nTi serviranno le seguenti pietre:\n> Pietra Anima di Legno\n> Pietra Anima di Ferro\n> Pietra Anima Preziosa\n> Pietra Cuore di Diamante\n> Pietra Cuore Leggendario\n> Pietra Spirito Epico\nSi possono trovare nelle cave dei viaggi (dal livello 10).", dragon);
			} else {
				var dragon_name = rows[0].name;
				var dragon_lev = rows[0].level;
				var dragon_exp = rows[0].exp;
				var dragon_evolved = rows[0].evolved;
				var dragon_claws = rows[0].claws;
				var dragon_saddle = rows[0].saddle;
				var dragon_saddle_id = rows[0].saddle_id;
				var dragon_claws_id = rows[0].claws_id;
				var dragon_arms_id = rows[0].arms_id;
				var dragon_type = rows[0].type;
				var dragon_arms_duration = rows[0].arms_duration;

				var dragon_claws_name = "";
				var dragon_claws_desc = "";
				var dragon_saddle_name = "";
				var dragon_saddle_desc = "";
				var dragon_arms_name = "";
				var dragon_arms_desc = "";

				if (dragon_evolved == 0) {
					if (dragon_lev >= 100)
						setAchievement(player_id, 4, 999);
				} else if (dragon_evolved == 1) {
					if (dragon_lev >= 200)
						setAchievement(player_id, 4, 999);
				} else {
					if (dragon_lev >= 300)
						setAchievement(player_id, 4, 999);
				}

				connection.query('SELECT name, description FROM item WHERE id = ' + dragon_claws_id, function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						dragon_claws_name = rows[0].name;
						dragon_claws_desc = rows[0].description;
						if (dragon_claws_desc == null)
							dragon_claws_desc = "Nessun effetto aggiuntivo";
					}
					connection.query('SELECT name, description FROM item WHERE id = ' + dragon_saddle_id, function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0) {
							dragon_saddle_name = rows[0].name;
							dragon_saddle_desc = rows[0].description;
							if (dragon_saddle_desc == null)
								dragon_saddle_desc = "Nessun effetto aggiuntivo";
						}
						connection.query('SELECT name, description FROM item WHERE id = ' + dragon_arms_id, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length > 0) {
								dragon_arms_name = rows[0].name;
								dragon_arms_desc = rows[0].description;
								if (dragon_arms_desc == null)
									dragon_arms_desc = "Nessun effetto aggiuntivo";
							}

							var iKeys = [];
							iKeys.push(["Equipaggia Drago üêâ"]);
							iKeys.push(["Rinomina Drago üí¨", "Cambia Tipo " + dragonSym(dragon_type)]);
							iKeys.push(["Bevande üç∂", "Riposa üí§", "Risorse üçµ"]);
							iKeys.push(["Ripristina Bevanda üç∂"]);

							connection.query('SELECT item.name, inventory.quantity As num FROM item, inventory WHERE inventory.player_id = ' + player_id + ' AND item.id = inventory.item_id AND item.name LIKE "Pietra%" AND item.rarity = "D" AND inventory.quantity > 0 ORDER BY item.id', function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length > 0) {
									for (var i = 0, len = Object.keys(rows).length; i < len; i++)
										iKeys.push(["Dai " + rows[i].name + " (" + rows[i].num + ")"]);
									iKeys.push(["Dai tutte"]);
									iKeys.push(["Dai tutte tranne epiche"]);
								}

								if ((dragon_lev == 100) && (dragon_evolved == 0))
									iKeys.push(["Scaglia Evolutiva ‚òÑÔ∏è"]);
								if ((dragon_lev == 200) && (dragon_evolved == 1))
									iKeys.push(["Scaglia Evolutiva Plus ‚òÑÔ∏è"]);

								iKeys.push(["Torna al menu"]);

								var kb = {
									parse_mode: "HTML",
									reply_markup: {
										resize_keyboard: true,
										keyboard: iKeys
									}
								};

								var claws_text = "";
								if (dragon_claws_id > 0) {
									claws_text = "\n<b>Artigli</b>: " + dragon_claws_name + " +" + dragon_claws + " (" + dragon_claws_desc + ")";
								}
								var saddle_text = "";
								if (dragon_saddle_id > 0) {
									saddle_text = "\n<b>Sella</b>: " + dragon_saddle_name + " -" + dragon_saddle + " (" + dragon_saddle_desc + ")";
								}
								var arms_text = "";
								if (dragon_arms_id > 0) {
									arms_text = "\n<b>Stemma</b>: " + dragon_arms_name + " (" + dragon_arms_duration + " scontri residui, " + dragon_arms_desc + ")";
								}

								var bonustext = "";

								var sInfernale = 0;
								var sGlaciale = 0;
								var sOscuro = 0;
								var sCeleste = 0;
								var sAbissale = 0;
								var sVette = 0;

								if ((dragon_saddle_id == 213) || (dragon_saddle_id == 718) || (dragon_saddle_id == 719) || (dragon_saddle_id == 720)) //Infernale
									sInfernale++;
								else if ((dragon_saddle_id == 214) || (dragon_saddle_id == 724) || (dragon_saddle_id == 725) || (dragon_saddle_id == 726)) //Glaciale
									sGlaciale++;
								else if ((dragon_saddle_id == 215) || (dragon_saddle_id == 730) || (dragon_saddle_id == 731) || (dragon_saddle_id == 732)) //Oscuro
									sOscuro++;
								else if ((dragon_saddle_id == 216) || (dragon_saddle_id == 736) || (dragon_saddle_id == 737) || (dragon_saddle_id == 738)) //Celeste
									sCeleste++;
								else if ((dragon_saddle_id == 217) || (dragon_saddle_id == 742) || (dragon_saddle_id == 743) || (dragon_saddle_id == 744)) //Abissale
									sAbissale++;
								else if ((dragon_saddle_id == 218) || (dragon_saddle_id == 748) || (dragon_saddle_id == 749) || (dragon_saddle_id == 750)) //Vette
									sVette++;

								if ((dragon_claws_id == 207) || (dragon_claws_id == 715) || (dragon_claws_id == 716) || (dragon_claws_id == 717)) //Infernale
									sInfernale++;
								else if ((dragon_claws_id == 208) || (dragon_claws_id == 721) || (dragon_claws_id == 722) || (dragon_claws_id == 723))//Glaciale
									sGlaciale++;
								else if ((dragon_claws_id == 209) || (dragon_claws_id == 727) || (dragon_claws_id == 728) || (dragon_claws_id == 729)) //Oscuro
									sOscuro++;
								else if ((dragon_claws_id == 210) || (dragon_claws_id == 733) || (dragon_claws_id == 734) || (dragon_claws_id == 735)) //Celeste
									sCeleste++;
								else if ((dragon_claws_id == 211) || (dragon_claws_id == 739) || (dragon_claws_id == 740) || (dragon_claws_id == 741)) //Abissale
									sAbissale++;
								else if ((dragon_claws_id == 212) || (dragon_claws_id == 745) || (dragon_claws_id == 746) || (dragon_claws_id == 747)) //Vette
									sVette++;

								if (sInfernale == 2)
									bonustext = "\nSet Infernale equipaggiato!";
								else if (sGlaciale == 2)
									bonustext = "\nSet Glaciale equipaggiato!";
								else if (sOscuro == 2)
									bonustext = "\nSet Oscuro equipaggiato!";
								else if (sCeleste == 2)
									bonustext = "\nSet Celeste equipaggiato!";
								else if (sAbissale == 2)
									bonustext = "\nSet Abissale equipaggiato!";
								else if (sVette == 2)
									bonustext = "\nSet delle Vette equipaggiato!";

								var remain_exp = (70 * (dragon_lev+1)) - dragon_exp;
								var remain_text = "";

								if (remain_exp == 0)
									remain_exp = 70;

								if (((dragon_lev < 300) && (dragon_evolved == 2)) || 
									((dragon_lev < 200) && (dragon_evolved == 1)) || 
									((dragon_lev < 100) && (dragon_evolved == 0)))
									remain_text = " (ancora " + remain_exp + " punti pietra)";

								if ((dragon_lev == 100) && (dragon_evolved == 0))
									remain_text = " (Scaglia Evolutiva necessaria!)";
								else if ((dragon_lev == 200) && (dragon_evolved == 1))
									remain_text = " (Scaglia Evolutiva Plus necessaria!)";

								connection.query('SELECT item.name, item.id, inventory.quantity FROM item, inventory WHERE inventory.player_id = ' + player_id + ' AND item.id = inventory.item_id AND item.name LIKE "Pietra%" AND item.rarity = "D" AND inventory.quantity > 0', function (err, rows, fields) {
									if (err) throw err;
									var stonePnt = 0;
									var stoneQnt = 0;
									if (Object.keys(rows).length > 0) {
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											stonePnt += (rows[i].id-67)*rows[i].quantity;
											stoneQnt += rows[i].quantity;
										}
									}

									bot.sendMessage(message.chat.id, "Cosa vuoi fare con il tuo drago?\n\n<b>Nome</b>: " + dragon_name + " " + dragon_type + " " + dragonSym(dragon_type) + "\n<b>Crescita</b>: Livello " + dragon_lev + remain_text + claws_text + saddle_text + arms_text + bonustext + "\nPossiedi <b>" + formatNumber(stoneQnt) + "</b> pietre per <b>" + formatNumber(stonePnt) + "</b> punti", kb).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.indexOf("Scaglia Evolutiva") != -1) {
												var itemid = 649;
												var maxlev = 200;
												var evolved_n = 1;
												var item_name = "";
												if (dragon_evolved == 2) {
													bot.sendMessage(message.chat.id, "Il tuo drago √® gi√† stato evoluto al massimo possibile!", back);
													return;
												} else if (dragon_evolved == 1) {
													itemid = 772;
													maxlev = 300;
													evolved_n = 2;
													item_name = " Plus";
												}

												bot.sendMessage(message.chat.id, "La Scaglia Evolutiva" + item_name + " consente di aumentare il livello massimo del tuo drago al " + maxlev + ", vuoi utilizzarla?", yesno).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text.toLowerCase() == "si") {
															if (getItemCnt(player_id, itemid) == 0) {
																bot.sendMessage(message.chat.id, "Non possiedi la Scaglia Evolutiva" + item_name, back);
																return;
															}
															delItem(player_id, itemid, 1);
															connection.query('UPDATE dragon SET evolved = ' + evolved_n + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Il tuo drago si √® evoluto, pu√≤ superare il suo livello massimo e raggiungere il " + maxlev + "!", back);
															});
														}
													};
												});
											}
										};
									});
								});
							});
						});
					});
				});
			}
		});
	});
});

bot.onText(/Dai un nome al drago/i, function (message) {
	connection.query('SELECT id, holiday, exp, account_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var exp = rows[0].exp;

		connection.query('SELECT 1 FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length <= 0) {

				if (exp < 100) {
					bot.sendMessage(message.chat.id, "Devi aver raggiunto 100 exp per far nascere il drago.", back);
					return;
				}

				connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id IN (68, 69, 70, 71, 72, 73) AND quantity > 0', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length >= 6) {
						var d = new Date();
						var rand = Math.round(d.getDate() / 5);
						var type = "";
						if (rand == 1)
							type = "delle Montagne";
						else if (rand == 2)
							type = "dei Cieli";
						else if (rand == 3)
							type = "Infernale";
						else if (rand == 4)
							type = "dell'Oscurit√†";
						else if (rand == 5)
							type = "dei Mari";
						else
							type = "dei Ghiacci";

						bot.sendMessage(message.chat.id, "Il drago " + type + " √® nato!\nCome vorresti chiamarlo?", back).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								var name = answer.text.trim();

								if (name == "Torna al menu")
									return;

								if ((name == "Si") || (name == "") || (name.indexOf("_") != -1)) {
									bot.sendMessage(message.chat.id, "Il nome inserito non √® valido, riprova.", back);
									return;
								}

								if (re4.test(name) == false) {
									bot.sendMessage(message.chat.id, "I simboli non sono consentiti o il nome √® troppo lungo (max 40 caratteri).", back);
									return;
								}

								for (var i = 1, len = 7; i < len; i++) {
									delItem(player_id, (67+i), 1);
								}
								connection.query('INSERT INTO dragon (id, player_id, name, exp, level, damage, defence, type) VALUES (DEFAULT, ' + player_id + ', "' + name + '", 70, 1, 1, 1, "' + type + '")', function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Complimenti, √® nato *" + name + "*, puoi nutrirlo per farlo crescere e trarne vantaggi!", back);
									checkDragon(player_id);
								});
							};
						});
					} else {
						bot.sendMessage(message.chat.id, "Non hai abbastanza pietre per far nascere il drago!", back);
					}
				});
			} else {
				bot.sendMessage(message.chat.id, "Possiedi gi√† il drago!", back);
				return;
			}
		});
	});
});

bot.onText(/^bevande|torna alle bevande/i, function (message) {
	connection.query('SELECT account_id, holiday, id, class, reborn, boost_id, boost_mission FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var kb3 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alle bevande"], ["Torna al drago"], ["Torna al menu"]]
			}
		};

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		if (reborn == 1) {
			bot.sendMessage(message.chat.id, "Devi raggiungere almeno la Rinascita 1 (Livello 100) per utilizzare questa funzione! Dopo di che potrai ottenere ogni tipo di Bevanda magica grazie ai poteri del drago!", back)
			return;
		}

		connection.query('SELECT level, exp, boost_time, boost_id FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;

			if (rows[0].boost_time != null) {
				var boost_time = new Date(rows[0].boost_time);
				var now = new Date();

				if (boost_time < now) {
					var boost_id = rows[0].boost_id;
					if (boost_id == 0) {
						boost_id = Math.round(Math.random() * 8 + 1);
						connection.query('UPDATE dragon SET boost_id = ' + boost_id + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					}

					connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 19', function (err, rows, fields) {
						if (err) throw err;

						var abBonusStone = 0;
						if (Object.keys(rows).length > 0)
							abBonusStone = parseInt(rows[0].ability_level) * rows[0].val;

						var rand3 = Math.random()*100;
						var mplus = 0;
						var m = 0;
						if (rand3 < abBonusStone)
							mplus = 1;

						var itemId = 0;
						var m = 3;
						if (boost_id == 1)
							itemId = 48;
						else if (boost_id == 2)
							itemId = 601;
						else if (boost_id == 3)
							itemId = 613;
						else if (boost_id == 4) {
							itemId = 617;
							m = 2;
						} else if (boost_id == 5)
							itemId = 642;
						else if (boost_id == 6)
							itemId = 265;
						else if (boost_id == 7)
							itemId = 650;
						else if (boost_id == 8) {
							itemId = 758;
							m = 2;
						} else if (boost_id == 9) {
							itemId = 760;
							m = 2;
						} else {
							bot.sendMessage(message.chat.id, "Bevanda non valida", back);
							return;
						}

						m += mplus;

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Attiva", "Scarta"], ["Torna al drago"], ["Torna al menu"]]
							}
						};

						connection.query('SELECT name FROM item WHERE id = ' + itemId, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "La *" + rows[0].name + "* √® pronta, cosa vuoi fare? Attivandola andr√† a rimpiazzare la bevanda eventualmente attiva", kb2).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Attiva") {
										connection.query('UPDATE player SET boost_id = ' + boost_id + ', boost_mission = ' + m + ' WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											connection.query('UPDATE dragon SET boost_id = 0, boost_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Bevanda attivata!", kb3);
												setAchievement(player_id, 69, 1);
											});
										});
									} else if (answer.text == "Scarta") {
										connection.query('UPDATE dragon SET boost_id = 0, boost_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Bevanda scartata!", kb3);
											setAchievement(player_id, 75, 1);
										});
									}
								};
							});
						});
					});
				} else {
					var short_date = addZero(boost_time.getHours()) + ':' + addZero(boost_time.getMinutes());
					bot.sendMessage(message.chat.id, "La bevanda √® ancora in produzione, attendi fino alle " + short_date, back);
				}
				return;
			}

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Inizia Produzione"], ["Torna al menu"]]
				}
			};

			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 17', function (err, rows, fields) {
				if (err) throw err;

				var abBonus = 0;
				if (Object.keys(rows).length > 0)
					abBonus = parseInt(rows[0].ability_level) * rows[0].val;

				var timem = 0;
				/*
				if ((class_id == 7) && (reborn > 1)) {
					timem = 120;
				}
				*/

				var time = Math.round((1440-abBonus-timem)*60);

				bot.sendMessage(message.chat.id, "Puoi far produrre una bevanda casuale al drago, ci impiegher√† " + toTime(time, 0) + " e ti coster√† una Pietra Spirito Epico\nOppure puoi ripristinare la carica della bevanda attuale al costo di Polvere (S)", kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Inizia Produzione") {
							if (getItemCnt(player_id, 73) == 0) {
								bot.sendMessage(message.chat.id, "Non hai nessuna Pietra Spirito Epico da consumare!", kb3);
								return;
							}

							var d = new Date();
							d.setMinutes(d.getMinutes() + (1440-abBonus-timem));
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
							var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

							connection.query('UPDATE dragon SET boost_time = "' + long_date + '", boost_notification = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Produzione iniziata, dovrai attendere fino alle " + short_date + ", poi torna a recuperare la bevanda", kb3);
							});
							delItem(player_id, 73, 1);
							setAchievement(player_id, 38, 1);
						}
					}
				});
			});
		});
	});
});

bot.onText(/ripristina bevanda/i, function (message) {
	connection.query('SELECT account_id, holiday, id, class, reborn, boost_id, boost_mission FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var kb3 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alle bevande"], ["Torna al drago"], ["Torna al menu"]]
			}
		};

		var kb4 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna alle bevande"], ["Torna al menu"]]
			}
		};

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var active_boost_id = rows[0].boost_id;
		var active_boost_mission = rows[0].boost_mission;

		if (reborn == 1) {
			bot.sendMessage(message.chat.id, "Devi raggiungere almeno la Rinascita 1 (Livello 100) per utilizzare questa funzione! Dopo di che potrai ottenere ogni tipo di Bevanda magica grazie ai poteri del drago!", back)
			return;
		}

		if (active_boost_id == 0) {
			bot.sendMessage(message.chat.id, "Devi avere una bevanda attiva per poterla ripristinare!", kb3);
			return;
		}

		if (active_boost_mission > 2) {
			bot.sendMessage(message.chat.id, "Per ripristinare la bevanda deve possedere meno di 3 cariche!", kb3);
			return;
		}

		var restore = (3-active_boost_mission);
		var dust = 500*restore;

		var plur = "he";
		if (restore == 1)
			plur = "a";

		bot.sendMessage(message.chat.id, "Ripristinare " + restore + " caric" + plur + " di questa bevanda ti coster√† " + dust + " unit√† di Polvere, procedi?", kb4).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {
					if (getItemCnt(player_id, 646) < dust) {
						bot.sendMessage(message.chat.id, "Non possiedi abbastanza polvere!", kb3);
						return;
					}

					delItem(player_id, 646, dust);

					connection.query('UPDATE player SET boost_mission = boost_mission+' + restore + ' WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Cariche della bevanda ripristinate!", kb3);
					});
				}
			}
		});
	});
});

bot.onText(/cambia tipo/i, function (message) {
	var tipo = message.text.substring(message.text.indexOf(":") + 2);

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al drago"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT account_id, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT level, exp, claws, saddle, saddle_id, claws_id, type FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;
			var dragon_claws = rows[0].claws;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_type = rows[0].type;

			if ((dragon_saddle_id != 0) || (dragon_claws_id != 0)) {
				bot.sendMessage(message.chat.id, "Prima di cambiare tipo al drago devi rimuovere tutti i suoi equipaggiamenti.", kbBack);
				return;
			}

			connection.query('SELECT id, top_id FROM dragon_top_status WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0) {
					if (rows[0].top_id > 0) {
						bot.sendMessage(message.chat.id, "Non puoi cambiare tipo al drago finch√® sei iscritto alla Vetta.", kbBack);
						return;
					}
				}

				var kbD = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["dei Mari"], ["dei Ghiacci"], ["Infernale"], ["dei Cieli"], ["delle Montagne"], ["dell'Oscurit√†"], ["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Inserisci il nuovo tipo del drago, verr√† consumato un Mutaforma ed *il suo livello verr√† azzerato*.", kbD).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						var newtype = answer.text;

						if (getItemCnt(player_id, 219) == 0) {
							bot.sendMessage(message.chat.id, "Ti serve il Mutaforma per cambiare tipo al drago.", kbBack);
							return;
						}

						if ((newtype == "") || (newtype == "Torna al menu") || (newtype == "Cambia Tipo")) {
							bot.sendMessage(message.chat.id, "Tipo non valido!", kbBack);
							return;
						}
						if ((newtype != "dei Mari") && (newtype != "dei Ghiacci") && (newtype != "Infernale") && (newtype != "dei Cieli") && (newtype != "delle Montagne") && (newtype != "dell'Oscurit√†")) {
							bot.sendMessage(message.chat.id, "Tipo non valido!", kbBack);
							return;
						}

						connection.query('UPDATE dragon SET exp = 70, level = 1, type = "' + newtype + '", evolved = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							delItem(player_id, 219, 1);
							bot.sendMessage(message.chat.id, "Hai cambiato tipo al drago!", kbBack);
							checkDragon(player_id);
						});
					};
				});
			});
		});
	});
});

bot.onText(/rinomina drago/i, function (message) {
	var name = message.text.substring(message.text.indexOf(":") + 1);
	connection.query('SELECT account_id, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT 1 FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}
			bot.sendMessage(message.chat.id, "Inserisci il nuovo nome del drago, verr√† consumato un Rinominatore.", back).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					var newname = answer.text;

					if ((newname == "") || (newname == "Torna al menu") || (newname == "Rinomina")) {
						bot.sendMessage(message.chat.id, "Nome non valido!", back);
						return;
					}

					if (re4.test(newname) == false) {
						bot.sendMessage(message.chat.id, "I simboli non sono consentiti oppure il nome √® troppo lungo (max 40 caratteri).", back);
						return;
					}

					bot.sendMessage(message.chat.id, "Sei sicuro di voler rinominare il drago: " + newname + "?", yesno).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text.toLowerCase() == "si") {
								if (getItemCnt(player_id, 199) == 0) {
									bot.sendMessage(message.chat.id, "Ti serve il Rinominatore per rinominare il drago.", back);
									return;
								}
								connection.query('UPDATE dragon SET name = "' + newname.trim() + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									delItem(player_id, 199, 1);
									bot.sendMessage(message.chat.id, "Hai rinominato il drago!", back);
								});
							}
						}
					});
				};
			});
		});
	});
});

bot.onText(/cambia nome/i, function (message) {
	var name = message.text.substring(message.text.indexOf(":") + 1);
	connection.query('SELECT id, account_id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = player_id;

				if (rows[0].role == 1)
					isAdmin = 1;

				if (isAdmin == 0) {
					bot.sendMessage(message.chat.id, "Devi essere amministratore per rinominare il team.", back);
					return;
				}

				if (getItemCnt(player_id, 199) == 0) {
					bot.sendMessage(message.chat.id, "Ti serve il Rinominatore per rinominare il team.", back);
					return;
				}

				bot.sendMessage(message.chat.id, "Inserisci il nuovo nome del team, verr√† consumato un Rinominatore.", back).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						var newname = answer.text;

						if (getItemCnt(player_id, 199) == 0) {
							bot.sendMessage(message.chat.id, "Ti serve il Rinominatore per rinominare il team.", back);
							return;
						}

						if ((newname.indexOf("Team") != -1) || (newname.indexOf("team") != -1) || (newname == "") || (newname.indexOf("_") != -1) || (newname.indexOf("*") != -1) || (newname.toLowerCase() == "Torna al menu") || (newname == "") || (newname == "Torna al menu") || (newname == "Rinomina") || (newname.toLowerCase().indexOf("madre") != -1) || (newname.toLowerCase().indexOf("accademia") != -1)) {
							bot.sendMessage(message.chat.id, "Nome non valido.", back);
							return;
						}

						if (re4.test(newname) == false) {
							bot.sendMessage(message.chat.id, "I simboli non sono consentiti o il nome √® troppo lungo (max 40 caratteri).", back);
							return;
						}

						connection.query('UPDATE team SET name = "' + newname.trim() + '" WHERE id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
						});
						delItem(player_id, 199, 1);
						bot.sendMessage(message.chat.id, "Hai rinominato il team!", team);
					};
				});
			});
		});
	});
});

bot.onText(/slogan/i, function (message) {
	var name = message.text.substring(message.text.indexOf(":") + 1);
	connection.query('SELECT account_id, id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = player_id;

				if (rows[0].role == 1)
					isAdmin = 1;

				if (isAdmin == 0) {
					bot.sendMessage(message.chat.id, "Devi essere amministratore per modificare lo slogan.", back);
					return;
				}

				if (getItemCnt(player_id, 199) == 0) {
					bot.sendMessage(message.chat.id, "Ti serve il Rinominatore per modificare lo slogan.", back);
					return;
				}

				bot.sendMessage(message.chat.id, "Inserisci il nuovo slogan del team, verr√† consumato un Rinominatore, per rimuoverlo scrivi Svuota.", back).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						var slogan = answer.text;

						if (slogan == "Svuota") {
							connection.query('UPDATE team SET slogan = NULL WHERE id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;
							});
							bot.sendMessage(message.chat.id, "Slogan resettato!", team);
							return;
						}

						if (getItemCnt(player_id, 199) == 0) {
							bot.sendMessage(message.chat.id, "Ti serve il Rinominatore per modificare lo slogan.", back);
							return;
						}

						if ((slogan == "") || (slogan == "Torna al menu")) {
							bot.sendMessage(message.chat.id, "Nome non valido!", back);
							return;
						}

						if (re5.test(slogan) == false) {
							bot.sendMessage(message.chat.id, "I simboli non sono consentiti o lo slogan √® troppo lungo (max 255 caratteri).", back);
							return;
						}

						connection.query('UPDATE team SET slogan = "' + slogan.trim() + '" WHERE id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
						});
						delItem(player_id, 199, 1);
						bot.sendMessage(message.chat.id, "Hai modificato lo slogan!", team);
					};
				});
			});
		});
	});
});

bot.onText(/pergamena/i, function (message) {
	var name = message.text.substring(message.text.indexOf(":") + 1);
	connection.query('SELECT account_id, id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = player_id;

				if (rows[0].role == 1)
					isAdmin = 1;

				if (isAdmin == 0) {
					bot.sendMessage(message.chat.id, "Devi essere amministratore per modificare la pergamena.", back);
					return;
				}

				var price = 50000;

				bot.sendMessage(message.chat.id, "Inserisci la nuova pergamena del team per narrare la tua storia attraverso i borghi di Lootia, potrai sbloccare la funzione al raggiungimento dei " + formatNumber(price) + " ü¶ã spesi, per rimoverlo scrivi Svuota.", back).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Torna al menu")
							return;
						var story = answer.text;

						if (story == "Svuota") {
							connection.query('UPDATE team SET story = NULL WHERE id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;
							});
							bot.sendMessage(message.chat.id, "Pergamena resettata!", team);
							return;
						}

						if (story == "") {
							bot.sendMessage(message.chat.id, "Testo non valido!", back);
							return;
						}

						connection.query('SELECT point, point_spent FROM team WHERE id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;

							if (rows[0].point_spent < price) {
								bot.sendMessage(message.chat.id, "Il team non ha speso abbastanza ü¶ã, ne mancano " + formatNumber(price-rows[0].point_spent) + ".", back);
								return;
							}

							if (re7.test(story) == false) {
								bot.sendMessage(message.chat.id, "I simboli non sono consentiti o il testo √® troppo lungo (max 2048 caratteri).", back);
								return;
							}

							connection.query('UPDATE team SET point = point-' + price + ', point_spent = point_spent+' + price + ', story = "' + story.trim() + '" WHERE id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;
							});
							bot.sendMessage(message.chat.id, "Hai modificato la pergamena del team!", team);
						});
					};
				});
			});
		});
	});
});

bot.onText(/dai pietra/i, function (message) {
	var foodmore = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Nutri Ancora"], ["Torna al menu"]]
		}
	};

	var pietra = message.text.substring(message.text.indexOf(" ") + 1);

	connection.query('SELECT account_id, holiday, id, charm_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var charm_id = rows[0].charm_id;

		connection.query('SELECT level, exp, evolved, claws, saddle, saddle_id, claws_id, type FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;
			var dragon_evolved = rows[0].evolved;
			var dragon_claws = rows[0].claws;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_type = rows[0].type;

			if (dragon_evolved == 0) {
				if (dragon_lev >= 100) {
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			} else if (dragon_evolved == 1) {
				if (dragon_lev >= 200) {
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			} else {
				if (dragon_lev >= 300) {
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			}

			connection.query('SELECT COUNT(*) As cnt FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var pos = pietra.indexOf("(");
				if (pos != -1)
					pietra = pietra.substr(0, pos - 1);

				connection.query('SELECT inventory.quantity As cnt, item.id FROM item, inventory WHERE inventory.player_id = ' + player_id + ' AND item.id = inventory.item_id AND item.name = "' + pietra + '" AND item.rarity = "D" AND quantity > 0', function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Non possiedi questa pietra.", back);
						return;
					}

					var cnt = rows[0].cnt;
					var stoneId = rows[0].id;

					cnt = cnt.toString();

					if (cnt > 1) {
						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["1"], [cnt], ["Torna al menu"]]
							}
						};
					} else {
						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["1"], ["Torna al menu"]]
							}
						};
					}

					bot.sendMessage(message.chat.id, "Quante pietre vuoi utilizzare?", kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text != "Torna al menu") {

								var qnt = answer.text;

								if ((qnt < 1) || (re.test(qnt) == false)) {
									bot.sendMessage(message.chat.id, "Quantit√† non valida", foodmore);
									return;
								}

								qnt = parseInt(qnt);

								if (getItemCnt(player_id, stoneId) < qnt) {
									bot.sendMessage(message.chat.id, "Non possiedi abbastanza pietre.", foodmore);
									return;
								}

								var val = stoneId - 67;
								val = val * qnt;

								var exp = (dragon_exp + val);
								var lev = Math.floor((dragon_exp + val) / 70);
								if (dragon_evolved == 0) {
									if (exp > 7000) {
										bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 100", foodmore);
										return;
									}
								} else if (dragon_evolved == 1) {
									if (exp > 14000) {
										bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 200", foodmore);
										return;
									}
								} else {
									if (exp > 21000) {
										bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 300", foodmore);
										return;
									}
								}
								lev = lev + 1;

								delItem(player_id, stoneId, qnt);
								connection.query('UPDATE dragon SET exp = exp+' + val + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									var plur = "e";
									if (qnt == 1)
										plur = "a";

									connection.query('SELECT level, exp, evolved FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										var remain_exp = (70 * (rows[0].level+1)) - rows[0].exp;
										var remain_text = "";

										if (remain_exp == 0)
											remain_exp = 70;

										if (remain_exp < 0)
											remain_exp = (70+remain_exp) % 70;

										if (((rows[0].level+val < 300) && (rows[0].evolved == 2)) || 
											((rows[0].level+val < 200) && (rows[0].evolved == 1)) || 
											((rows[0].level+val < 100) && (rows[0].evolved == 0)))
											remain_text = ", " + remain_exp + " per il prossimo livello";

										bot.sendMessage(message.chat.id, "Hai nutrito il drago con " + qnt + " pietr" + plur + " (" + val + " punti pietra" + remain_text + ")!", foodmore);
										checkDragon(player_id);
									});
								});

								setAchievement(player_id, 4, val);
							};
						};
					});
				});
			});
		});
	});
});

bot.onText(/^\/checkDragonTop$/i, function (message, match) {
	checkDragonTop();
	bot.sendMessage(message.chat.id, "Fatto");
});

bot.onText(/^\/checkDragon (.+)|^\/checkdragon$/i, function (message, match) {
	if (match[1] == undefined) {
		connection.query('SELECT name, player_id FROM dragon', function (err, rows, fields) {
			if (err) throw err;
			for (i = 0; i < Object.keys(rows).length; i++) {
				checkDragon(rows[i].player_id);
				console.log("Ricalcolo di " + rows[i].name);
			}
			bot.sendMessage(message.chat.id, "Fatto");
		});
	} else {
		connection.query('SELECT id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
			if (err) throw err;
			checkDragon(rows[0].id);
			bot.sendMessage(message.chat.id, "Fatto");
		});
	}
});

bot.onText(/dai tutte tranne (.+)|dai tutte/i, function (message, match) {

	var foodmore = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Nutri Ancora"], ["Torna al menu"]]
		}
	};

	var filter = "";
	if (match[1] != undefined) {
		if (match[1] == "epiche")
			filter = " AND item.id != 73";
	}

	connection.query('SELECT account_id, holiday, id, charm_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var charm_id = rows[0].charm_id;

		connection.query('SELECT level, exp, evolved, claws, saddle, saddle_id, claws_id FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;
			var dragon_evolved = rows[0].evolved;
			var dragon_claws = rows[0].claws;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_type = rows[0].type;

			if (dragon_evolved == 0) {
				if (dragon_lev >= 100) {
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			} else if (dragon_evolved == 1) {
				if (dragon_lev >= 200) {
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			} else {
				if (dragon_lev >= 300) {
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			}

			connection.query('SELECT COUNT(*) As cnt FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				bot.sendMessage(message.chat.id, "Sei sicuro?", yesno).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text.toLowerCase() == "si") {
							connection.query('SELECT item.name, item.id, inventory.quantity FROM item, inventory WHERE inventory.player_id = ' + player_id + ' AND item.id = inventory.item_id AND item.name LIKE "Pietra%" AND inventory.quantity > 0 AND item.rarity = "D"' + filter, function (err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length > 0) {
									var val = 0;
									var qnt = 0;

									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										val += (rows[i].id - 67)*rows[i].quantity;
										qnt += parseInt(rows[i].quantity);
									}

									var lev = Math.floor((dragon_exp + val) / 70);
									if (dragon_evolved == 0) {
										if (lev > 100) {
											bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 100", foodmore);
											return;
										}
									} else if (dragon_evolved == 1) {
										if (lev > 200) {
											bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 200", foodmore);
											return;
										}
									} else {
										if (lev > 300) {
											bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 300", foodmore);
											return;
										}
									}
									lev = lev + 1;

									connection.query('UPDATE inventory, item SET inventory.quantity = 0 WHERE inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND item.rarity = "D" AND item.name LIKE "Pietra%"' + filter, function (err, rows, fields) {
										if (err) throw err;
										connection.query('UPDATE dragon SET exp = exp+' + val + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											var plur = "e";
											if (qnt == 1)
												plur = "a";

											bot.sendMessage(message.chat.id, "Hai nutrito il drago con " + qnt + " pietr" + plur + " (" + val + " punti pietra)!", foodmore);
											checkDragon(player_id);
										});
									});

									setAchievement(player_id, 4, val);
								} else {
									if (filter != "")
										bot.sendMessage(message.chat.id, "Non hai nessuna pietra del tipo specificato nello zaino.", back);
									else
										bot.sendMessage(message.chat.id, "Non hai nessuna pietra nello zaino.", back);
									return;
								}
							});
						};
					};
				});
			});
		});
	});
});

bot.onText(/equipaggia drago/i, function (message) {
	connection.query('SELECT account_id, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT level, exp, evolved, claws, saddle, saddle_id, claws_id, arms_id, type, arms_duration FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;
			var dragon_evolved = rows[0].evolved;
			var dragon_claws = rows[0].claws;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_arms_id = rows[0].arms_id;
			var dragon_type = rows[0].type;
			var arms_duration = rows[0].arms_duration;

			connection.query('SELECT item.name, item.dragon_power, item.description FROM item, inventory WHERE inventory.player_id = ' + player_id + ' AND item.id = inventory.item_id AND (item.dragon_power <> 0 OR (item.name LIKE "Stemma%" AND rarity = "UE")) AND inventory.quantity > 0 ORDER BY item.name', function (err, rows, fields) {
				if (err) throw err;
				var Keys = [];

				if (Object.keys(rows).length > 0) {
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].dragon_power > 0)
							Keys.push([rows[i].name + " (+" + rows[i].dragon_power + " attacco)"]);
						else if (rows[i].dragon_power < 0)
							Keys.push([rows[i].name + " (+" + Math.abs(rows[i].dragon_power) + " difesa)"]);
						else
							Keys.push([rows[i].name + " (Efficace solo sulla Vetta)"]);
					}
				}

				Keys.push(["Stacca Artigli"], ["Stacca Sella"], ["Stacca Stemma"]);
				Keys.push(["Torna al drago"]);
				Keys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: Keys
					}
				};

				var kbBack = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Torna al drago"], ["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Cosa vuoi equipaggiare al drago? üêâ", kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if ((answer.text == "Torna al menu") || (answer.text == "Torna al drago"))
							return;
						if (answer.text.indexOf("Stacca") != -1) {
							var necess = 70;
							var lev = ((dragon_exp) / necess).toFixed(2);
							if ((lev == "100") || (lev == "100.00"))
								lev = "100.00";
							var dPerc = (lev + "").split(".")[1];
							lev = parseFloat(lev) + 1;
							var dLev = (lev + "").split(".")[0];

							var action = "";
							if (answer.text.indexOf("Artigli") != -1)
								action = "Artigli";
							else if (answer.text.indexOf("Sella") != -1)
								action = "Sella";
							else if (answer.text.indexOf("Stemma") != -1)
								action = "Stemma";
							else {
								bot.sendMessage(message.chat.id, "Equipaggiamento da staccare non valido", kbBack);
								return;
							}

							bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									var resp = answer.text;
									if (resp.toLowerCase() != "si")
										return;

									connection.query('SELECT saddle_id, claws_id, arms_id FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										dragon_saddle_id = rows[0].saddle_id;
										dragon_claws_id = rows[0].claws_id;
										dragon_arms_id = rows[0].arms_id;

										if (action == "Sella") {
											if (dragon_saddle_id != 0) {
												addItem(player_id, dragon_saddle_id);
												bot.sendMessage(message.chat.id, "Hai rimosso l'equipaggiamento sella dal drago.", kbBack);

												connection.query('UPDATE dragon SET damage = ' + dLev + ', defence = ' + Math.floor(dLev / 2) + ', saddle_id = 0, saddle = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});

												checkDragon(player_id);
											} else
												bot.sendMessage(message.chat.id, "La sella non √® equipaggiata.", kbBack);
										} else if (action == "Artigli") {
											if (dragon_claws_id != 0) {
												addItem(player_id, dragon_claws_id);
												bot.sendMessage(message.chat.id, "Hai rimosso l'equipaggiamento artigli dal drago.", kbBack);

												connection.query('UPDATE dragon SET damage = ' + dLev + ', defence = ' + Math.floor(dLev / 2) + ', claws_id = 0, claws = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});

												checkDragon(player_id);
											} else
												bot.sendMessage(message.chat.id, "Gli artigli non sono equipaggiati.", kbBack);
										} else if (action == "Stemma") {
											if (dragon_arms_id != 0) {

												if (arms_duration <= 29) {
													bot.sendMessage(message.chat.id, "Potrai rimuovere lo stemma solamente tra " + arms_duration + ' scontri', kbBack);
													return;
												}

												addItem(player_id, dragon_arms_id);
												bot.sendMessage(message.chat.id, "Hai rimosso l'equipaggiamento stemma dal drago.", kbBack);

												connection.query('UPDATE dragon SET arms_id = 0, arms_duration = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});

												checkDragon(player_id);
											} else
												bot.sendMessage(message.chat.id, "Lo stemma non √® equipaggiato.", kbBack);
										}
									});
								};
							});
						} else {
							var equip = answer.text;
							var pos = answer.text.indexOf("(");
							if (pos != -1)
								equip = equip.substr(0, pos - 1);

							connection.query('SELECT item.id, item.dragon_power FROM item, inventory WHERE inventory.player_id = ' + player_id + ' AND item.id = inventory.item_id AND (item.dragon_power <> 0 OR (item.name LIKE "Stemma%" AND rarity = "UE")) AND name = "' + equip + '" AND inventory.quantity > 0', function (err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "L'oggetto specificato non √® consentito", kbBack);
									return;
								}

								bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {
											var itemid = rows[0].id;
											var dragon_power = rows[0].dragon_power;

											if (getItemCnt(player_id, itemid) == 0) {
												bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato.", kbBack);
												return;
											}

											if (dragon_power == 0) {
												connection.query('SELECT arms_id FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (rows[0].arms_id != 0) {
														if (arms_duration <= 29) {
															bot.sendMessage(message.chat.id, "Potrai sostituire lo stemma solamente tra " + arms_duration + ' scontri', kbBack);
															return;
														}
														addItem(player_id, rows[0].arms_id);
														bot.sendMessage(message.chat.id, "Lo stemma precedentemente equipaggiato √® tornato nell'inventario");
													}

													delItem(player_id, itemid, 1);

													var dur = 30;

													connection.query('UPDATE dragon SET arms_id = ' + itemid + ', arms_duration = ' + dur + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Stemma equipaggiato! Durer√† 30 scontri, dopo il primo scontro non potrai rimuoverlo fino a che non si romper√†", kbBack);
													});
												});
												return;
											}

											var type = ["Infernal", "Oscur", "Glacial", "Celest", "Abissal", "delle Vett"];
											var this_type = "";

											if (dragon_type == "Infernale")
												this_type = "Infernal";
											else if (dragon_type == "dei Ghiacci")
												this_type = "Glacial";
											else if (dragon_type == "dell'Oscurit√†")
												this_type = "Oscur";
											else if (dragon_type == "dei Cieli")
												this_type = "Celest";
											else if (dragon_type == "dei Mari")
												this_type = "Abissal";
											else if (dragon_type == "delle Montagne")
												this_type = "delle Vett";

											var isSet = 0;
											var setText = "";

											if (searchArrayInString(equip, type) != -1) {
												if (equip.indexOf(this_type) != -1) {
													isSet = 1;
													setText = "\nQuesto oggetto fa parte di un set, equipaggia anche l'altro per ottenere ulteriori benefici";
												} else {
													bot.sendMessage(message.chat.id, "Questo oggetto pu√≤ solo essere equipaggiato al tipo del drago corrispondente", back);
													return;
												}
											}

											if (dragon_power > 0) {
												connection.query('SELECT claws_id FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													if (rows[0].claws_id != 0) {
														addItem(player_id, rows[0].claws_id);
														bot.sendMessage(message.chat.id, "Gli artigli precedentemente equipaggiati sono tornati nell'inventario");
													}

													var damage = 0;
													var defence = 0;
													var critical = 0;
													if (isSet == 1) {
														if ((dragon_saddle_id == 213) || (dragon_saddle_id == 718) || (dragon_saddle_id == 719) || (dragon_saddle_id == 720)) { //Infernale
															damage = 25;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno!", kbBack);
														} else if ((dragon_saddle_id == 214) || (dragon_saddle_id == 724) || (dragon_saddle_id == 725) || (dragon_saddle_id == 726)) { //Glaciale
															defence = 25;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + defence + " difesa!", kbBack);
														} else if ((dragon_saddle_id == 215) || (dragon_saddle_id == 730) || (dragon_saddle_id == 731) || (dragon_saddle_id == 732)) { //Oscuro
															damage = 15;
															defence = 10;
															critical = 5;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defence + " difesa e " + critical + "% critico!", kbBack);
														} else if ((dragon_saddle_id == 216) || (dragon_saddle_id == 736) || (dragon_saddle_id == 737) || (dragon_saddle_id == 738)) { //Celeste
															defence = 15;
															damage = 10;
															critical = 5;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defence + " difesa e " + critical + "% critico!", kbBack);
														} else if ((dragon_saddle_id == 217) || (dragon_saddle_id == 742) || (dragon_saddle_id == 743) || (dragon_saddle_id == 744)) { //Abissale
															damage = 10;
															defence = 5;
															critical = 10;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno, +" + defence + " difesa e " + critical + "% critico!", kbBack);
														} else if ((dragon_saddle_id == 218) || (dragon_saddle_id == 748) || (dragon_saddle_id == 749) || (dragon_saddle_id == 750)) { //Vette
															damage = 5;
															defence = 10;
															critical = 10;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defence + " difesa e " + critical + "% critico!", kbBack);
														}
													}

													delItem(player_id, itemid, 1);

													connection.query('UPDATE dragon SET claws_id = ' + itemid + ', critical = ' + critical + ', defence = defence + ' + defence + ', damage = damage + ' + damage + ', claws = ' + dragon_power + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Artigli equipaggiati!" + setText, kbBack);
														checkDragon(player_id);
													});
												});
											} else if (dragon_power < 0) {
												connection.query('SELECT saddle_id FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													if (rows[0].saddle_id != 0) {
														addItem(player_id, rows[0].saddle_id);
														bot.sendMessage(message.chat.id, "La sella precedentemente equipaggiata √® tornata nell'inventario");
													}
													var damage = 0;
													var defence = 0;
													var critical = 0;

													if (isSet == 1) {
														if ((dragon_claws_id == 207) || (dragon_claws_id == 715) || (dragon_claws_id == 716) || (dragon_claws_id == 717)) { //Infernale
															damage = 25;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno!", kbBack);
														} else if ((dragon_claws_id == 208) || (dragon_claws_id == 721) || (dragon_claws_id == 722) || (dragon_claws_id == 723)) { //Glaciale
															defence = 25;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + defence + " difesa!", kbBack);
														} else if ((dragon_claws_id == 209) || (dragon_claws_id == 727) || (dragon_claws_id == 728) || (dragon_claws_id == 729)) { //Oscuro
															damage = 15;
															defence = 10;
															critical = 5;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defence + " difesa e " + critical + "% critico!", kbBack);
														} else if ((dragon_claws_id == 210) || (dragon_claws_id == 733) || (dragon_claws_id == 734) || (dragon_claws_id == 735)) { //Celeste
															defence = 15;
															damage = 10;
															critical = 5;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defence + " difesa e " + critical + "% critico!", kbBack);
														} else if ((dragon_claws_id == 211) || (dragon_claws_id == 739) || (dragon_claws_id == 740) || (dragon_claws_id == 741)) { //Abissale
															damage = 10;
															defence = 5;
															critical = 10;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno, +" + defence + " difesa e " + critical + "% critico!", kbBack);
														} else if ((dragon_claws_id == 212) || (dragon_claws_id == 745) || (dragon_claws_id == 746) || (dragon_claws_id == 747)) { //Vette
															damage = 5;
															defence = 10;
															critical = 10;
															bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defence + " difesa e " + critical + "% critico!", kbBack);
														}
													}

													delItem(player_id, itemid, 1);
													connection.query('UPDATE dragon SET damage = damage + ' + damage + ', critical = ' + critical + ', defence = defence + ' + defence + ', saddle_id = ' + itemid + ', saddle = ' + Math.abs(dragon_power) + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Sella equipaggiata!" + setText, kbBack);
														checkDragon(player_id);
													});
												});
											};
										};
									};
								});
							});
						};
					};
				});
			});
		});
	});
});

bot.onText(/cassaforte/i, function (message, match) {	
	connection.query('SELECT account_id, holiday, id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		connection.query('SELECT team_id, role FROM team_player WHERE player_id = ' + rows[0].id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.from.id, "Devi essere in un team per utilizzare questa funzione");
				return;
			}

			var team_id = rows[0].team_id;
			var role = rows[0].role;

			/*
			if ((team_id != 3) && (team_id != 277) && (team_id != 497)) {
				if (message.from.id != 20471035) {
					bot.sendMessage(message.chat.id, "Manutenzione");
					return;
				}
			}
			*/

			if (role != 1) {
				var kb = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Deposita'], ['Torna al team']]
					}
				};
			} else {
				var kb = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Deposita', 'Ritira'], ['Log'], ['Torna al team']]
					}
				};
			}

			var kbBack = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['Torna alla cassaforte']]
				}
			};

			var kbYesNo = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['Si'], ['Torna alla cassaforte']]
				}
			};

			connection.query('SELECT P.nickname, T.money FROM team_safe T, player P WHERE T.player_id = P.id AND team_id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;

				var safe_tot = 0;
				var text = "";
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					safe_tot += parseInt(rows[i].money);
					text += "> " + rows[i].nickname + " - " + formatNumber(rows[i].money) + " ¬ß\n";
				}

				var current = "\nNon contiene monete";
				if (safe_tot > 0)
					current = "\nContiene in totale " + formatNumber(safe_tot) + " ¬ß";

				bot.sendMessage(message.chat.id, "La <b>Cassaforte</b> serve ad avere un luogo comune per depositare le proprie monete, cos√¨ che possano essere poi utilizzate dall'amministratore per vari scopi\nCosa vuoi fare con la cassaforte?" + current + "\n\n" + text, kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Deposita") {
							bot.sendMessage(message.chat.id, "Quante monete vuoi depositare?\nNe possiedi " + formatNumber(money), kbBack).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna alla cassaforte")
										return;

									if (isNaN(parseInt(answer.text))) {
										bot.sendMessage(message.from.id, "Valore non valido", kbBack);
										return;
									}

									var deposit = parseInt(answer.text);
									if (deposit < 1) {
										bot.sendMessage(message.from.id, "Inserisci un valore maggiore di zero", kbBack);
										return;
									}

									bot.sendMessage(message.chat.id, "Sei sicuro di voler depositare " + formatNumber(deposit) + " ¬ß?\nSolo l'amministratore potr√† ritirarle", kbYesNo).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.toLowerCase() == "si") {
												connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (rows[0].money < deposit) {
														bot.sendMessage(message.from.id, "Non hai abbastanza monete", kbBack);
														return;
													}

													connection.query('UPDATE player SET money = money-' + deposit + ' WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														connection.query('SELECT 1 FROM team_safe WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															if (Object.keys(rows).length == 0) {
																connection.query('INSERT INTO team_safe (team_id, player_id, money) VALUES (' + team_id + ',' + player_id + ',' + deposit + ')', function (err, rows, fields) {
																	if (err) throw err;
																});
															} else {
																connection.query('UPDATE team_safe SET money = money+' + deposit + ' WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															}

															bot.sendMessage(message.from.id, "Hai depositato correttamente " + formatNumber(deposit) + " ¬ß!", kbBack);

															connection.query('INSERT INTO team_safe_log (team_id, player_id, money) VALUES (' + team_id + ',' + player_id + ',' + deposit + ')', function (err, rows, fields) {
																if (err) throw err;
															});
														});
													});
												});
											}
										}
									});
								}
							});
						} else if (answer.text == "Ritira") {
							if (role != 1) {
								bot.sendMessage(message.from.id, "Pu√≤ ritirare le monete solo l'amministratore", kbBack);
								return;
							}

							if (safe_tot == 0) {
								bot.sendMessage(message.from.id, "Non ci sono monete nella cassaforte", kbBack);
								return;
							}

							var kbNum = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [[safe_tot.toString()], ['Torna alla cassaforte']]
								}
							};

							bot.sendMessage(message.chat.id, "Quante monete vuoi ritirare?\nNella cassaforte ce ne sono " + formatNumber(safe_tot), kbNum).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (isNaN(parseInt(answer.text))) {
										bot.sendMessage(message.from.id, "Valore non valido", kbBack);
										return;
									}

									var get = parseInt(answer.text);
									if (get < 1) {
										bot.sendMessage(message.from.id, "Inserisci un valore maggiore di zero", kbBack);
										return;
									}

									if (get > safe_tot) {
										bot.sendMessage(message.from.id, "Non puoi ritirare pi√π monete di quante ne siano disponibili", kbBack);
										return;
									}

									bot.sendMessage(message.chat.id, "Sei sicuro di voler ritirare " + formatNumber(get) + " ¬ß?", kbYesNo).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.toLowerCase() == "si") {
												connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (rows[0].money + get > 1000000000) {
														bot.sendMessage(message.from.id, "Ritirando tutte queste monete supereresti il limite massimo, riprova", kbBack);
														return;
													}

													connection.query('SELECT money FROM team_safe WHERE team_id = ' + team_id, function (err, rows, fields) {
														if (err) throw err;

														var restore = 0;
														var text = "";
														for (var i = 0, len = Object.keys(rows).length; i < len; i++)
															restore += parseInt(rows[i].money);

														var quantityReq = get;
														connection.query('SELECT id, money FROM team_safe WHERE team_id = ' + team_id, function (err, rows, fields) {
															if (err) throw err;
															for (var k = 0, len = Object.keys(rows).length; k < len; k++) {
																if (rows[k].money == quantityReq) {
																	connection.query('DELETE FROM team_safe WHERE id = ' + rows[k].id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	break;
																} else {
																	if (quantityReq >= rows[k].money) {
																		connection.query('DELETE FROM team_safe WHERE id = ' + rows[k].id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		quantityReq -= rows[k].money;
																	} else {
																		connection.query('UPDATE team_safe SET money = money-' + quantityReq + ' WHERE id = ' + rows[k].id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		break;
																	}
																}
															}
														});

														connection.query('UPDATE player SET money = money+' + get + ' WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.from.id, "Hai ritirato correttamente " + formatNumber(get) + " ¬ß!", kbBack);
														});
													});
												});
											}
										}
									});
								}
							});
						} else if (answer.text == "Log") {
							connection.query('SELECT P.nickname, L.money, L.insert_date FROM team_safe_log L, player P WHERE L.player_id = P.id AND L.team_id = ' + team_id + ' ORDER BY L.insert_date DESC LIMIT 50', function (err, rows, fields) {
								if (err) throw err;

								var text = "Ultimi 50 depositi:\n";
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									var d = new Date(rows[i].insert_date);
									text += "> " + rows[i].nickname + " - " + rows[i].money + " ¬ß il " + toDate("it", d) + "\n";
								}

								bot.sendMessage(message.from.id, text, kbBack);
							})
						}
					}
				});
			});
		});
	});
});

bot.onText(/magazzino/i, function (message, match) {
	connection.query('SELECT account_id, holiday, id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].id;

		connection.query('SELECT team_id, role FROM team_player WHERE player_id = ' + rows[0].id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.from.id, "Devi essere in un team per utilizzare questa funzione");
				return;
			}

			var team_id = rows[0].team_id;
			var role = rows[0].role;

			/*
			if ((team_id != 3) && (team_id != 277) && (team_id != 497)) {
				if (message.from.id != 20471035) {
					bot.sendMessage(message.chat.id, "Manutenzione");
					return;
				}
			}
			*/

			var kb = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['Deposita'], ['Torna al team']]
				}
			};

			if (role == 1) {
				var kb = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Deposita'], ['Log'], ['Torna al team']]
					}
				};
			}

			var kbBack = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['Torna al magazzino']]
				}
			};

			var kbYesNo = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['Si'], ['Torna al magazzino']]
				}
			};

			connection.query('SELECT P.nickname, I.name, T.quantity FROM team_store T, player P, item I WHERE T.player_id = P.id AND T.item_id = I.id AND team_id = ' + team_id + ' ORDER BY I.name', function (err, rows, fields) {
				if (err) throw err;

				var text = "";
				for (var i = 0, len = Object.keys(rows).length; i < len; i++)
					text += "> " + rows[i].nickname + " - " + rows[i].quantity + "x " + rows[i].name + "\n";

				bot.sendMessage(message.chat.id, "Il <b>Magazzino</b> √® un deposito in cui tutti i membri del team possono lasciare i propri oggetti per far s√¨ che vengano automaticamente utilizzati solo per migliorare le postazioni nell'Assalto.\nCosa vuoi fare con il magazzino?\n\n" + text, kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Deposita") {
							bot.sendMessage(message.chat.id, "Quale oggetto vuoi depositare?", kbBack).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al magazzino")
										return;
									connection.query('SELECT id, name FROM item WHERE ((craftable = 1 AND rarity IN ("NC", "R", "UR", "L", "E")) OR (name LIKE "Pietra%" AND rarity = "D")) AND name = "' + answer.text + '"', function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.from.id, "L'oggetto specificato non esiste o non √® consentito, sono consentiti solo i creabili di rarit√† NC -> E e Pietre del Drago", kbBack);
											return;
										}

										var item_id = rows[0].id;
										var item_name = rows[0].name;
										var qnt = getItemCnt(player_id, item_id);

										var kbNum = {
											parse_mode: "HTML",
											reply_markup: {
												resize_keyboard: true,
												keyboard: [['1', '100', '1000'], ['Torna al magazzino']]
											}
										};

										bot.sendMessage(message.chat.id, "Quante copie dell'oggetto vuoi inserire?\nNe possiedi " + formatNumber(qnt), kbNum).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (isNaN(parseInt(answer.text))) {
													bot.sendMessage(message.from.id, "Quantit√† non valida", kbBack);
													return;
												}

												var quantity = parseInt(answer.text);
												if (quantity < 1) {
													bot.sendMessage(message.from.id, "Inserisci una quantit√† maggiore di zero", kbBack);
													return;
												}

												if (getItemCnt(player_id, item_id) < quantity) {
													bot.sendMessage(message.from.id, "Non hai abbastanza copie dell'oggetto specificato", kbBack);
													return;
												}

												delItem(player_id, item_id, quantity);

												connection.query('SELECT 1 FROM team_store WHERE item_id = ' + item_id + ' AND team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0) {
														connection.query('INSERT INTO team_store (team_id, player_id, item_id, quantity) VALUES (' + team_id + ',' + player_id + ',' + item_id + ', ' + quantity + ')', function (err, rows, fields) {
															if (err) throw err;
														});
													} else {
														connection.query('UPDATE team_store SET quantity = quantity+' + quantity + ' WHERE team_id = ' + team_id + ' AND player_id = ' + player_id + ' AND item_id = ' + item_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}
												});

												bot.sendMessage(message.from.id, "Hai depositato correttamente " + quantity + "x " + item_name + "!", kbBack);

												connection.query('INSERT INTO team_store_log (team_id, player_id, item_id, quantity) VALUES (' + team_id + ',' + player_id + ',' + item_id + ', ' + quantity + ')', function (err, rows, fields) {
													if (err) throw err;
												});
											}
										});
									});
								}
							});
						} else if (answer.text == "Log") {
							connection.query('SELECT P.nickname, I.name, L.quantity, L.insert_date FROM team_store_log L, player P, item I WHERE L.player_id = P.id AND L.item_id = I.id AND L.team_id = ' + team_id + ' ORDER BY L.insert_date DESC LIMIT 50', function (err, rows, fields) {
								if (err) throw err;

								var text = "Ultimi 50 depositi:\n";
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									var d = new Date(rows[i].insert_date);
									text += "> " + rows[i].nickname + " - " + rows[i].quantity + "x " + rows[i].name + " il " + toDate("it", d) + "\n";
								}

								bot.sendMessage(message.from.id, text, kbBack);
							})
						}
					}
				});
			});
		});
	});
});

bot.onText(/^\/pagateam (.+)|^\/pagateam/i, function (message, match) {

	if (!checkSpam(message))
		return;

	var syntax = "Sintassi: '/pagateam monete,messaggio' per inviare una certa quantit√† di monete ad ogni compagno di team, tranne te stesso";
	var text = "";

	if (message.text.indexOf(" ") != -1)
		text = message.text.substring(message.text.indexOf(" ") + 1, message.text.lenght);
	else {
		bot.sendMessage(message.from.id, syntax);
		return;
	}

	var elements = text.split(",");

	if ((Object.keys(elements).length != 1) && (Object.keys(elements).length != 2)) {
		bot.sendMessage(message.from.id, "Numero parametri errato: " + Object.keys(elements).length + " su 1/2\n" + syntax);
		return;
	}

	var price = parseInt(elements[0].replace(/[^\w\s]/gi, '').trim());
	var msg = "";
	if (Object.keys(elements).length == 2)
		msg = elements[1].trim();

	if (isNaN(price)) {
		bot.sendMessage(message.from.id, "Il parametro prezzo non √® valido");
		return;
	}
	if (price <= 0) {
		bot.sendMessage(message.from.id, "Il parametro prezzo deve essere maggiore di zero");
		return;
	}
	if (price > 100000000) {
		bot.sendMessage(message.from.id, "Il parametro prezzo non pu√≤ essere pi√π alto di 100kk");
		return;
	}

	connection.query('SELECT id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var money = rows[0].money;

		connection.query('SELECT team_id FROM team_player WHERE player_id = ' + rows[0].id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.from.id, "Devi essere in un team per utilizzare questo comando");
				return;
			}

			connection.query('SELECT nickname, player_id, chat_id FROM team_player, player WHERE player.id = team_player.player_id AND team_id = ' + rows[0].team_id + ' AND player_id != ' + player_id + ' AND suspended = 0', function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.from.id, "Non ci sono compagni validi a cui inviare monete");
					return;
				}

				var total_price = (price * Object.keys(rows).length);
				if (money < total_price) {
					bot.sendMessage(message.from.id, "Non hai abbastanza monete, te ne servono " + formatNumber(total_price));
					return;
				}

				var d2 = new Date();
				var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					connection.query('UPDATE player SET money = money+' + price + ' WHERE id = ' + rows[i].player_id, function (err, rows, fields) {
						if (err) throw err;
					});

					var extra = "";
					if (msg != "")
						extra = "\nCon scritto: <i>" + msg + "</i>";

					bot.sendMessage(rows[i].chat_id, "Hai ricevuto <b>" + price + " ¬ß</b> da " + message.from.username + " del tuo team!" + extra, html);

					connection.query('INSERT INTO pay_history (from_id, to_id, price, hist_time) VALUES (' + player_id + ',' + rows[i].player_id + ',' + price + ',"' + long_date + '")', function (err, rows, fields) {
						if (err) throw err;
					});
				}

				connection.query('UPDATE player SET money = money-' + total_price + ' WHERE id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Hai inviato correttamente *" + formatNumber(total_price) + " ¬ß* al team!", mark);
				});
			});
		});
	});
});

bot.onText(/vette dei draghi|vetta|^vette|^interrompi$/i, function (message) {

	if (message.text.toLowerCase().indexOf("vetta delle anime") != -1)
		return;

	if (Object.keys(message.text).length > 30)
		return;

	connection.query('SELECT id, account_id, reborn, top_first, gender, holiday, top_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var top_first = rows[0].top_first;
		var top_min = rows[0].top_min;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		if (reborn < 2) {
			bot.sendMessage(message.chat.id, "Devi raggiungere almeno la Rinascita 1 (Livello 100) per utilizzare questa funzione! Dopo di che potrai combattere in incredibili arene comandando il tuo drago! Ma solo quando sia tu che lui avrete abbastanza esperienza per farlo. Forza!", back);
			return;
		}

		connection.query('SELECT id, name, type, level, life, total_life, arms_id, sleep_time_end FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}

			var dragon_id = rows[0].id;
			var dragon_name = rows[0].name;
			var my_dragon_type = rows[0].type;
			var dragon_level = rows[0].level;
			var dragon_life = rows[0].life;
			var dragon_total_life = rows[0].total_life;
			var dragon_arms_id = rows[0].arms_id;
			var sleep_time = rows[0].sleep_time_end;
			var dragon_status = "In salute";

			if (dragon_life <= 0)
				dragon_status = "Esausto";

			if (rows[0].sleep_h > 0) {
				var d = new Date(sleep_time);
				var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
				dragon_status = "Dorme fino alle " + short_date;
			}

			var finishD = new Date("2019-11-20 12:00:00");
			var startD = new Date(finishD);

			var finish_date = addZero(finishD.getHours()) + ':' + addZero(finishD.getMinutes()) + " del " + addZero(finishD.getDate()) + "/" + addZero(finishD.getMonth() + 1) + "/" + finishD.getFullYear();
			var finish_date_f = addZero(finishD.getDate()) + "/" + addZero(finishD.getMonth() + 1) + " alle " + addZero(finishD.getHours()) + ':' + addZero(finishD.getMinutes());

			startD.setDate(startD.getDate() - 7);
			var start_date_f = addZero(startD.getDate()) + "/" + addZero(startD.getMonth() + 1) + " alle " + addZero(startD.getHours()) + ':' + addZero(startD.getMinutes());

			connection.query('SELECT nickname, CONCAT(D.name, " ", D.type) As dragon, L.name, R.rank FROM dragon_top_rank R, dragon D, player, dragon_top_list L WHERE L.id = top_id AND R.dragon_id = D.id AND player.id = R.player_id ORDER BY R.top_id DESC, R.rank DESC LIMIT 25', function (err, rows, fields) {
				if (err) throw err;

				var top = "";
				if (Object.keys(rows).length > 0) {
					top = "\n\nClassifica della stagione precedente:\n";
					var c = 0;
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						c++;
						top += c + "¬∞ " + rows[i].dragon + " di " + rows[i].nickname + " (" + rows[i].name + ", " + rows[i].rank + " √ê)\n";
					}
				}

				if (player_id != 1) {
					if (checkDragonTopOn == 0) {
						bot.sendMessage(message.chat.id, "\nProssima stagione: " + start_date_f + " - " + finish_date_f + "\nSe hai partecipato alla stagione precedente, riceverai i premi a breve!" + top, back_html);
						return;
					}
				}

				var kb2 = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Entra nella Vetta'], ['Torna al menu']]
					}
				};

				var kbBack = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Torna alla vetta'], ['Torna al menu']]
					}
				};

				var kbBack_html = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Torna alla vetta'], ['Torna al menu']]
					}
				};

				var kbClean_html = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Nascondi log vecchi', 'Mostra log vecchi'], ['Torna alla vetta'], ['Torna al menu']]
					}
				};

				var kbClean2_html = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Mostra log vecchi', 'Torna alla vetta'], ['Torna al menu']]
					}
				};

				var kbCombat = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Entra in combattimento'], ['Torna al menu']]
					}
				};

				var kbYesNo = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Si'], ['Torna alla vetta']]
					}
				};

				var kbWake = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Si'], ['Torna alla vetta']]
					}
				};

				connection.query('SELECT id, top_id, enemy_dragon_id, wait_time, no_match_time, is_dummy, reject FROM dragon_top_status WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						if (dragon_level < 30) {
							bot.sendMessage(message.chat.id, "E' richiesto almeno il livello 30 del drago per partecipare.", back);
							return;
						}

						var now = new Date();
						var now_date_compare = addZero(now.getDate()) + "/" + addZero(now.getMonth() + 1) + "/" + now.getFullYear();
						var finish_date_compare = addZero(finishD.getDate()) + "/" + addZero(finishD.getMonth() + 1) + "/" + finishD.getFullYear();
						if (now_date_compare == finish_date_compare) {
							bot.sendMessage(message.chat.id, "Non puoi accedere alle vette l'ultimo giorno.", back);
							return;
						}

						connection.query('INSERT INTO dragon_top_status (player_id, dragon_id) VALUES (' + player_id + ',' + dragon_id + ')', function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nelle <b>Vette dei Draghi</b> üê≤!\nIn questo luoghi dovrai sottoporre il tuo <i>" + dragon_name + "</i> all'ardua sfida di raggiungere le cime dei monti pi√π alti di Lootia! Durante questa sfida incontrerai altri draghi, dovrai sfidarli ed essere un bravo domatore per salire fino alla vetta. Le battaglie si svolgono in diversi Monti, tutti iniziano dal primo e man mano che si ottengono vittorie si passa al successivo!\nRicorda che quando il drago combatte, non ti potr√† aiutare nelle battaglie al di fuori della vetta.\n\n<b>Funzionamento</b>:\n\n- Il drago da sfidare verr√† scelto casualmente in base al Monte in cui si viene inseriti\n- Una volta sconfitto si ottiene 1 √ê o pi√π, se si viene sconfitti lo si perde\n- Al termine della giornata per avanzare di Monte √® necessario raggiungere almeno 12 √ê, mentre se ne possiedi 2 o meno tornerai al precedente, inoltre spostandoti di monte le √ê si resettano\n- Ogni mossa consuma un certo numero di Scaglie ‚öúÔ∏è e ne ottieni una alla fine di ogni turno, per un massimo di 5, puoi ottenerne una anche solo Saltando il turno\n- Riceverai un premio in base al posizionamento ottenuto alla fine della stagione.\n- Al primo accesso otterrai √ê in base al livello del tuo drago\n\nLa stagione attuale scadr√† alle " + finish_date, kb2);
						});
					} else {
						var top_id = rows[0].top_id;
						var enemy_dragon_id = rows[0].enemy_dragon_id;
						var wait_time = rows[0].wait_time;
						var no_match_time = rows[0].no_match_time;
						var is_dummy = rows[0].is_dummy;
						var reject = rows[0].reject;

						if (enemy_dragon_id != null) {
							bot.sendMessage(message.chat.id, "Stai combattendo contro un drago!", kbCombat);
							return;
						}

						if (top_id == 0) {
							var top_id = 1;
							if (dragon_level > 200)
								top_id = 2;

							connection.query('SELECT name FROM dragon_top_list WHERE id = ' + top_id, function (err, rows, fields) {
								if (err) throw err;
								var name = rows[0].name;

								var d = new Date();
								d.setMinutes(d.getMinutes() + 5);
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

								connection.query('UPDATE dragon_top_status SET top_id = ' + top_id + ', no_match_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									var start_rank = Math.floor(dragon_level / 25);
									if (top_first == 1)
										start_rank = 0;
									else {
										connection.query('UPDATE player SET top_first = 1 WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
									}

									if (top_id == 2)
										start_rank = 6;

									connection.query('INSERT INTO dragon_top_rank (player_id, top_id, dragon_id, rank) VALUES (' + player_id + ',' + top_id + ',' + dragon_id + ',' + start_rank + ')', function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Sei stato assegnato al monte di partenza, il *" + name + "*!", kbBack);
									});
								});
							});
						} else {
							connection.query('SELECT combat, rank FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								var inCombat = 0;
								if (rows[0].combat == 1)
									inCombat = 1;

								var my_dragon_rank = rows[0].rank;

								connection.query('SELECT 1 FROM dragon_top_status WHERE enemy_dragon_id = ' + dragon_id, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 1)
										inCombat = 1;

									connection.query('SELECT R.id, R.dragon_id, R.rank, D.name, D.type FROM dragon_top_rank R, dragon D, player P WHERE P.id = D.player_id AND R.dragon_id = D.id AND top_id = ' + top_id + ' ORDER BY rank DESC, D.level ASC, P.id ASC', function (err, rows, fields) {
										if (err) throw err;

										var range = 5;
										var leaderboard = [];
										var dragon_names = [];
										var dragon_type = [];
										var dragon_rank = [];
										var mypos = 0;
										var myrank = 0;
										var text = "";

										var dragon_num = Object.keys(rows).length;

										for (var i = 0, len = dragon_num; i < len; i++) {
											leaderboard.push(rows[i].id);
											dragon_names.push(rows[i].name);
											dragon_type.push(rows[i].type);
											dragon_rank.push(rows[i].rank);
											if (dragon_id == rows[i].dragon_id) {
												mypos = i;
												myrank = rows[i].rank;
											}
										}

										if (top_min == 0) {
											for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
												if (dragon_names[i] != undefined) {
													if (i == mypos)
														text += (i + 1) + "¬∞ <b>" + dragon_names[i] + " " + dragon_type[i] + "</b> " + dragonSym(dragon_type[i]) + " (" + dragon_rank[i] + " √ê)\n";
													else
														text += (i + 1) + "¬∞ " + dragon_names[i] + " " + dragon_type[i] + " " + dragonSym(dragon_type[i]) + " (" + dragon_rank[i] + " √ê)\n";
												}
											}
										} else {
											for (var i = 0; i < 25; i++) {
												if (dragon_names[i] != undefined) {
													if (i == mypos)
														text += (i + 1) + "¬∞ <b>" + dragon_names[i] + " " + dragon_type[i] + "</b> " + dragonSym(dragon_type[i]) + " (" + dragon_rank[i] + " √ê)\n";
													else
														text += (i + 1) + "¬∞ " + dragon_names[i] + " " + dragon_type[i] + " " + dragonSym(dragon_type[i]) + " (" + dragon_rank[i] + " √ê)\n";
												}
											}

											text += "\nTu: " + (mypos+1) + "¬∞ " + dragon_name + " " + my_dragon_type + " " + dragonSym(my_dragon_type) + " (" + myrank + " √ê)\n";
										}

										connection.query('SELECT name, pnt FROM dragon_top_list WHERE id = ' + top_id, function (err, rows, fields) {
											if (err) throw err;

											var kb = {
												parse_mode: "HTML",
												reply_markup: {
													resize_keyboard: true,
													keyboard: [['Combatti üêâ'], ['Riposa üí§', 'Abbandona üö´'], ['Risorse üçµ', 'Log üìÉ'], ['Monti ‚õ∞'], ['Torna al menu']]
												}
											};
											var kbSleep = {
												parse_mode: "HTML",
												reply_markup: {
													resize_keyboard: true,
													keyboard: [['10', '20', '30', '40'], ['50', '60', '70', '80'], ['90', '100'], ['Torna alla vetta'], ['Torna al menu']]
												}
											};

											var arena = rows[0].name;
											var arenaPnt = rows[0].pnt;

											connection.query('SELECT D.name, D.id, D.arms_id, D.type, D.level, D.life, D.total_life, S.battle_time, P.chat_id, P.id As player_id, R.rank, R.top_id, C.name As class_name FROM dragon D, dragon_top_status S, player P, dragon_top_rank R, class C WHERE P.class = C.id AND R.player_id = P.id AND P.id = D.player_id AND D.id = S.dragon_id AND S.enemy_dragon_id = ' + dragon_id, function (err, rows, fields) {
												if (err) throw err;
												var inCombatText = "";
												var enemy_dragon_id = null;
												var enemy_dragon_life = 0;
												var enemy_dragon_total_life = 0;
												var enemy_dragon_name = "";
												var enemy_dragon_type = "";
												var enemy_dragon_level = 0;
												var enemy_dragon_arms_id = 0;
												var enemy_dragon_rank = 0;
												var enemy_top_id = 0;
												var enemy_class = "";
												var player_id2 = 0;
												var chat_id2 = 0;
												if ((inCombat == 1) && (Object.keys(rows).length > 0)) {
													var d = new Date(rows[0].battle_time);
													var battle_time = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
													enemy_dragon_id = rows[0].id;
													enemy_dragon_life = rows[0].life;
													enemy_dragon_total_life = rows[0].total_life;
													enemy_dragon_name = rows[0].name;
													enemy_dragon_type = rows[0].type;
													enemy_dragon_level = rows[0].level;
													enemy_dragon_arms_id = rows[0].arms_id;
													chat_id2 = rows[0].chat_id;
													player_id2 = rows[0].player_id;
													enemy_dragon_rank = rows[0].rank;
													enemy_top_id = rows[0].top_id;
													enemy_class = rows[0].class_name + " " + classSym(rows[0].class_name);
													inCombatText = "\nIl tuo drago √® in combattimento nell'arena contro " + rows[0].name + ", scadr√† alle " + battle_time + "!";

													kb = {
														parse_mode: "HTML",
														reply_markup: {
															resize_keyboard: true,
															keyboard: [['Risorse üçµ', 'Scruta üîé'], ['Rinuncia üö´', 'Log üìÉ'], ['Torna al menu']]
														}
													};
												}

												var status = "<i>" + dragon_name + " " + my_dragon_type + " " + dragonSym(my_dragon_type) +
													"</i>\nSalute: |" + progressBar(dragon_life, dragon_total_life) + "| " + formatNumber(dragon_life) + " üî∫\nStato: " + dragon_status + "\n";

												var toptext = "";
												if (top_id == 1)
													toptext = arenaPnt + " √ê o pi√π per salire";
												else if (top_id == max_top_id)
													toptext = "2 √ê o meno per scendere, nessun limite massimo";
												else
													toptext = arenaPnt + " √ê o pi√π per salire, 2 √ê o meno per scendere";

												bot.sendMessage(message.chat.id, status + "\nClassifica attuale <b>" + arena + "</b>\n(" + dragon_num + " draghi,  " + toptext + ")\n\n" + text + inCombatText + "\nLa stagione attuale scadr√† alle " + finish_date + "\nI Monti verranno aggiornati alle 3:00 di ogni notte", kb).then(function () {
													answerCallbacks[message.chat.id] = function (answer) {
														if (answer.text.indexOf("Combatti") != -1) {
															connection.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;

																if (rows[0].combat == 1) {
																	bot.sendMessage(message.chat.id, "Il drago √® gi√† impegnato in uno scontro!", kbBack);
																	return;
																}

																var d = new Date();
																var err = 0;
																if (d.getHours() == 2) {
																	if (d.getMinutes() > 30)
																		err = 1;
																}
																if ((d.getHours() >= 3) && (d.getHours() < 9))
																	err = 1;
																if (err == 1) {
																	bot.sendMessage(message.chat.id, "Non puoi avviare scontri tra le 2.30 e le 9.00!", kbBack);
																	return;
																}

																bot.sendMessage(message.chat.id, "Cercare un drago avversario? Durante la battaglia il tuo drago non potr√† accompagnarti nelle tue avventure", kbYesNo).then(function () {
																	answerCallbacks[message.chat.id] = function (answer) {
																		if (answer.text.toLowerCase() == "si") {

																			var now = new Date();

																			if (finishD < now) {
																				bot.sendMessage(message.chat.id, "La stagione √® terminata! A breve riceverai il premio finale ma nel frattempo non puoi cercare altre battaglie", kbBack);
																				return;
																			}

																			connection.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;

																				if (rows[0].combat == 1) {
																					bot.sendMessage(message.chat.id, "Il drago √® stato appena sfidato!", kbBack);
																					return;
																				}

																				connection.query('SELECT sleep_time_end FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;

																					if (rows[0].sleep_time_end != null) {
																						var d = new Date(rows[0].sleep_time_end);
																						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
																						bot.sendMessage(message.chat.id, "Il tuo drago sta riposando... Si sveglier√† alle " + short_date, kbBack);
																						return;
																						return;
																					}

																					connection.query('SELECT wait_time, no_match_time FROM dragon_top_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;

																						if (rows[0].wait_time != null) {
																							var d = new Date(rows[0].wait_time);
																							var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
																							bot.sendMessage(message.chat.id, "Il tuo drago ha appena concluso uno scontro, attendi fino alle " + short_date, kbBack);
																							return;
																						}

																						if (rows[0].no_match_time != null) {
																							connection.query('UPDATE dragon_top_status SET no_match_time = NULL WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																						}

																						var kbSleep = {
																							parse_mode: "HTML",
																							reply_markup: {
																								resize_keyboard: true,
																								keyboard: [['Riposa'], ["Torna alla vetta"]]
																							}
																						};

																						connection.query('SELECT life FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;

																							if (rows[0].life <= 0) {
																								bot.sendMessage(message.chat.id, "Il tuo drago √® esausto, fallo riposare per tornare a combattere!", kbSleep);
																								return;
																							}

																							var kbStop = {
																								parse_mode: "HTML",
																								reply_markup: {
																									resize_keyboard: true,
																									keyboard: [['Interrompi']]
																								}
																							};

																							connection.query('SELECT COUNT(*) As cnt FROM player, dragon_top_rank d WHERE player.id = d.player_id AND status > 0 AND d.top_id = ' + top_id, function (err, rows, fields) {
																								if (err) throw err;

																								var cnt = rows[0].cnt;
																								connection.query('UPDATE player SET status = IFNULL((SELECT * FROM (SELECT MAX(status) As mx FROM player, dragon_top_rank d WHERE player.id = d.player_id AND status IS NOT NULL AND d.top_id = ' + top_id + ') As a),0)+1 WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;

																									var queue = cnt + " draghi in coda";
																									if (cnt == 1)
																										queue = "1 drago in coda";
																									else if (cnt == 0)
																										queue = "Nessun drago in coda";

																									bot.sendMessage(message.chat.id, "Ricerca avversario in corso... Scrivendo qualsiasi cosa la ricerca sar√† interrotta. Nel caso non vi fossero draghi in coda, scadr√† tra 5 minuti.\n" + queue, kbStop);
																								});
																							});
																						});
																					});
																				});
																			});
																		};
																	};
																});
															});
														} else if (answer.text == "ricarica") {
															if (player_id != 1)
																return;
															connection.query('UPDATE dragon SET life = total_life WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Ricaricato!", kbBack);
															});
														} else if (answer.text.indexOf("Rinuncia") != -1) {

															// Solo se in difesa
															if (inCombat == 0) {
																bot.sendMessage(message.chat.id, "Puoi rinunciare ad uno scontro solo mentre sei in combattimento", kbBack);
																return;
															}

															if (reject >= 3) {
																bot.sendMessage(message.chat.id, "Hai gi√† rinunciato a 3 incontri oggi", kbBack);
																return;
															}

															bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler abbandonare la battaglia? Verr√† conteggiata come persa, inoltre puoi rinunciare solamente ad un combattimento al giorno.", kbYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {
																		connection.query('SELECT combat, rank FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;

																			if (rows[0].combat == 0) {
																				bot.sendMessage(message.chat.id, "Puoi rinunciare ad uno scontro solo mentre sei in combattimento", kbBack);
																				return;
																			}

																			var d = new Date();
																			d.setMinutes(d.getMinutes() + 5);
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																			var d = new Date();
																			d.setMinutes(d.getMinutes() + 15);
																			var long_date2 = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																			connection.query('UPDATE dragon_top_status SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date + '", reject = reject+1 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																				if (err) throw err;
																				connection.query('UPDATE dragon_top_status SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date2 + '" WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																					if (err) throw err;
																					connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																						if (err) throw err;
																						connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																							if (err) throw err;

																							var chest = 1;

																							if (enemy_dragon_level > (dragon_level + 50))
																								chest = 0;

																							if (enemy_dragon_arms_id == 714) {
																								var randS = Math.random() * 100;
																								if (randS < 50)
																									chest++;
																							}

																							if (my_dragon_rank == 0)		// exploit
																								chest = 0;

																							var extra = "";
																							if (chest == 1) {
																								extra = " uno Scrigno Scaglia!";
																								addChest(player_id2, 9);
																							} else if (chest > 1) {
																								extra = " " + chest + " Scrigni Scaglia!";
																								addChest(player_id2, 9, chest);
																							}

																							if (my_dragon_rank > 0) {
																								connection.query('UPDATE dragon_top_rank SET rank = rank-1 WHERE rank > 0 AND dragon_id = ' + dragon_id, function (err, rows, fields) {
																									if (err) throw err;
																								});

																								var win_rank = 1;
																								if (enemy_top_id < max_top_id) {
																									if (enemy_dragon_rank + win_rank >= rank_cap) {
																										win_rank = rank_cap - enemy_dragon_rank;
																										if (win_rank < 0)
																											win_rank = 0;
																									}
																								}

																								connection.query('UPDATE dragon_top_rank SET rank = rank+' + win_rank + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																									if (err) throw err;
																								});

																								bot.sendMessage(message.chat.id, "Hai abbandonato la battaglia e hai perso 1 √ê!", kbBack);

																								if (extra != "")
																									extra = " e" + extra;
																								bot.sendMessage(chat_id2, "Il tuo sfidante " + dragon_name + " ha abbandonato lo scontro, hai ottenuto " + win_rank + " √ê" + extra + "!");
																							} else {
																								bot.sendMessage(message.chat.id, "Hai abbandonato la battaglia!", kbBack);

																								if (extra != "")
																									extra = " e hai ricevuto" + extra;
																								bot.sendMessage(chat_id2, "Il tuo sfidante " + dragon_name + " ha abbandonato lo scontro" + extra + "!");
																							}

																							var d = new Date();
																							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																							connection.query('INSERT INTO dragon_top_log (player_id, dragon_id, enemy_player_id, enemy_dragon_id, time, win, note) VALUES (' + player_id + ',' + dragon_id + ',' + player_id2 + ',' + enemy_dragon_id + ',"' + long_date + '",2,"Rinuncia")', function (err, rows, fields) {
																								if (err) throw err;
																							});
																						});
																					});
																				});
																			});
																		});
																	};
																};
															});
														} else if (answer.text.indexOf("Scruta") != -1) {
															if (inCombat == 0) {
																bot.sendMessage(message.chat.id, "Puoi visualizzare info sul drago avversario solo mentre sei in combattimento", kbBack);
																return;
															}
															bot.sendMessage(message.chat.id, "<b>Informazioni sul drago avversario:</b>\nSalute: " + progressBar(enemy_dragon_life, enemy_dragon_total_life) + " " + formatNumber(enemy_dragon_life) + "/" + formatNumber(enemy_dragon_total_life) + "\nNome: " + enemy_dragon_name + " " + enemy_dragon_type + " " + dragonSym(enemy_dragon_type) + "\nLivello: " + enemy_dragon_level + "\nVocazione: " + enemy_class, kbBack_html);
															return;
														} else if (answer.text.indexOf("Monti") != -1) {
															connection.query('SELECT L.name, COUNT(R.top_id) As cnt FROM dragon_top_rank R, dragon_top_list L WHERE L.id = R.top_id GROUP BY R.top_id ORDER BY top_id', function (err, rows, fields) {
																if (err) throw err;
																var text = "";
																for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																	if (top_id == i+1)
																		text += (i+1) + ". *" + rows[i].name + "* (" + rows[i].cnt + ")\n";
																	else
																		text += (i+1) + ". " + rows[i].name + " (" + rows[i].cnt + ")\n";
																}
																bot.sendMessage(message.chat.id, "*Informazioni sui Monti:*\n" + text, kbBack);
															});
															return;
														} else if (answer.text.indexOf("Abbandona") != -1) {
															if (inCombat == 1) {
																bot.sendMessage(message.chat.id, "Non puoi abbandonare la vetta mentre il tuo drago √® impegnato in uno scontro", kbBack);
																return;
															}
															bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler abbandonare? Al tuo rientro sarai costretto a ricominciare", kbYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {

																		connection.query('SELECT combat, rank FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;

																			if (rows[0].combat == 1) {
																				bot.sendMessage(message.chat.id, "Non puoi abbandonare la vetta mentre il tuo drago √® impegnato in uno scontro", kbBack);
																				return;
																			}

																			connection.query('DELETE FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Hai abbandonato la vetta", kbBack);
																			});

																			connection.query('UPDATE dragon_top_status SET top_id = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		});
																	};
																};
															});
														} else if (answer.text.indexOf("Log") != -1) {
															connection.query('SELECT L.id, P1.nickname As nick1, P2.nickname As nick2, D1.name As dragon1, D2.name As dragon2, D1.type As type1, D2.type As type2, win, note, time FROM dragon_top_log L INNER JOIN player P1 ON P1.id = L.player_id INNER JOIN player P2 ON P2.id = L.enemy_player_id INNER JOIN dragon D1 ON D1.id = L.dragon_id INNER JOIN dragon D2 ON D2.id = L.enemy_dragon_id WHERE (dragon_id = ' + dragon_id + ' OR enemy_dragon_id = ' + dragon_id + ') AND player_visible = 1 AND enemy_visible = 1 ORDER BY L.id DESC LIMIT 30', function (err, rows, fields) {
																if (err) throw err;

																if (Object.keys(rows).length > 0) {
																	var text = "";
																	for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																		if (rows[i].win == 1) {
																			rows[i].dragon1 = "<b>" + rows[i].dragon1 + " " + rows[i].type1 + " " + dragonSym(rows[i].type1) + "</b>";
																			rows[i].dragon2 = rows[i].dragon2 + " " + rows[i].type2 + " " + dragonSym(rows[i].type2);
																		} else {
																			rows[i].dragon2 = "<b>" + rows[i].dragon2 + " " + rows[i].type2 + " " + dragonSym(rows[i].type2) + "</b>";
																			rows[i].dragon1 = rows[i].dragon1 + " " + rows[i].type1 + " " + dragonSym(rows[i].type1);
																		}

																		var d = new Date(rows[i].time);
																		var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

																		text += rows[i].dragon1 + " vs " + rows[i].dragon2 + " (" + rows[i].note + " alle " + short_date + ")\n";
																	}
																	bot.sendMessage(message.chat.id, "Ultime 30 battaglie:\n\n" + text, kbClean_html);
																} else
																	bot.sendMessage(message.chat.id, "Non hai ancora completato alcuna battaglia!\nOppure sono tutte nascoste perch√® √® da molto che non combatti :(", kbClean2_html);
															});
														}
													};
												});
											});
										});
									});
								});
							});
						};
					};
				});
			});
		});
	});
});

bot.onText(/mostra log vecchi|nascondi log vecchi/i, function (message) {
	connection.query('SELECT id, account_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [['Torna alla vetta'], ['Torna al menu']]
			}
		};

		if (message.text.indexOf("Nascondi") != -1) {
			connection.query('UPDATE dragon_top_log SET player_visible = 0 WHERE player_id = ' + player_id + ' AND DATEDIFF(CURDATE(), CAST(time As date)) > 10', function (err, rows, fields) {
				if (err) throw err;
				connection.query('UPDATE dragon_top_log SET enemy_visible = 0 WHERE enemy_player_id = ' + player_id + ' AND DATEDIFF(CURDATE(), CAST(time As date)) > 10', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Tutti gli scontri precedenti a questa stagione sono stati nascosti", kbBack);
				});
			});
		} else if (message.text.indexOf("Mostra") != -1) {
			connection.query('UPDATE dragon_top_log SET player_visible = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				connection.query('UPDATE dragon_top_log SET enemy_visible = 1 WHERE enemy_player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Tutti gli scontri precedenti a questa stagione sono stati resi visibili", kbBack);
				});
			});
		}
	});
});

bot.onText(/riposa/i, function (message) {
	connection.query('SELECT account_id, holiday, id, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;

		if (reborn < 2) {
			bot.sendMessage(message.chat.id, "Accedi alle Vette dei Draghi per sbloccare questa funzione!", back);
			return;
		}

		connection.query('SELECT id, sleep_time_end, life, total_life FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}

			var dragon_id = rows[0].id;
			var sleep_time = rows[0].sleep_time_end;
			var dragon_life = rows[0].life;
			var dragon_total_life = rows[0].total_life;

			var kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['Torna alla vetta'], ['Torna al drago'], ['Torna al menu']]
				}
			};

			var kbSleep = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['10', '20', '30', '40'], ['50', '60', '70', '80'], ['90', '100'], ['Torna alla vetta'], ['Torna al drago'], ['Torna al menu']]
				}
			};

			connection.query('SELECT id, top_id, enemy_dragon_id, wait_time FROM dragon_top_status WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0) {
					if (rows[0].enemy_dragon_id != null) {
						bot.sendMessage(message.chat.id, "Il drago √® impegnato in uno scontro, non pu√≤ riposarsi", kbBack);
						return;
					}
				}

				connection.query('SELECT id FROM dragon_top_status WHERE enemy_dragon_id = ' + dragon_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length > 0) {
						bot.sendMessage(message.chat.id, "Il drago √® impegnato in uno scontro, non pu√≤ riposarsi", kbBack);
						return;
					}

					if (sleep_time != null) {
						var d = new Date(sleep_time);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
						bot.sendMessage(message.chat.id, "Il tuo drago sta riposando... Si sveglier√† alle " + short_date, kbBack);
						return;
					}

					if (dragon_life >= dragon_total_life) {
						bot.sendMessage(message.chat.id, "Il tuo drago √® in piena salute, non serve riposare", kbBack);
						return;
					}

					var full = 100 - (dragon_life / dragon_total_life * 100);
					full = Math.ceil(full / 10) * 10;

					bot.sendMessage(message.chat.id, "Puoi far riposare il tuo drago per fargli recuperare salute, recuperer√† il 10% per ogni 10 min riposo, per quanti minuti vuoi farlo riposare? Per tornare a piena salute dovr√† riposare " + full + " minuti", kbSleep).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text == "Torna al menu")
								return;

							var h = parseInt(answer.text);

							connection.query('SELECT id FROM dragon_top_status WHERE enemy_dragon_id = ' + dragon_id, function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length > 0) {
									bot.sendMessage(message.chat.id, "Il drago √® impegnato in uno scontro, non pu√≤ riposarsi", kbBack);
									return;
								}

								if (isNaN(h) || (h < 10) || (h > 100)) {
									bot.sendMessage(message.chat.id, "Valore non valido: minimo 10 minuti, massimo 100", kbBack);
									return;
								}

								if (h > full) {
									bot.sendMessage(message.chat.id, "Non puoi riposare pi√π del necessario, massimo " + full + " minuti", kbBack);
									return;
								}

								var d = new Date();
								d.setMinutes(d.getMinutes() + h);
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
								var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

								connection.query('UPDATE dragon SET sleep_h = ' + h + ', sleep_time_end = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Il tuo drago si riposer√† fino alle " + short_date, kbBack);
								});
							});
						};
					});
				});
			});
		});
	});
});

bot.onText(/^Risorse/i, function (message) {
	connection.query('SELECT account_id, id, reborn, charm_id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var charm_id = rows[0].charm_id;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [['Torna alla vetta'], ['Torna al drago'], ['Torna al menu']]
			}
		};

		var kbNext = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [['Continua a Combattere'], ['Torna alla vetta'], ['Torna al drago'], ['Torna al menu']]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [['Si'], ['Continua a Combattere'], ['Torna alla vetta'], ['Torna al drago']]
			}
		};

		connection.query('SELECT id, life, total_life, scale, level, evolved FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}

			var dragon_id = rows[0].id;
			var dragon_life = rows[0].life;
			var dragon_total_life = rows[0].total_life;
			var dragon_scale = rows[0].scale;
			var dragon_level = rows[0].level;
			var dragon_evolved = rows[0].evolved;

			connection.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var inCombat = 0;
				var iscritto = Object.keys(rows).length;

				if (iscritto > 0) {
					if (rows[0].combat == 1)
						inCombat = 1;
				}

				connection.query('SELECT dragon.name, dragon.type FROM dragon, dragon_top_status WHERE dragon.id = dragon_top_status.dragon_id AND enemy_dragon_id = ' + dragon_id, function (err, rows, fields) {
					if (err) throw err;
					var inCombatText = "";
					var combatSubito = Object.keys(rows).length;
					if ((inCombat == 1) && (combatSubito > 0)) {
						inCombatText = "Il tuo drago √® in combattimento nell'arena contro " + rows[0].name + " " + rows[0].type + ", attendi che lo scontro finisca prima di utilizzare questo oggetto!";
					}

					connection.query('SELECT item.name, inventory.quantity As cnt FROM item, inventory WHERE item.id = inventory.item_id AND item.category = 6 AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
						if (err) throw err;

						var iKeys = [];

						for (var i = 0, len = Object.keys(rows).length; i < len; i++)
							iKeys.push([rows[i].name + " (" + rows[i].cnt + ")"]);

						iKeys.push(["Continua a combattere"]);
						iKeys.push(["Torna al menu"]);

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, "Quale oggetto vuoi utilizzare?", kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if ((answer.text == "Continua a combattere") || (answer.text == "Torna al menu"))
									return;
								var item = answer.text.substring(0, answer.text.indexOf("(") - 1);
								connection.query('SELECT id FROM item WHERE name = "' + item + '"', function (err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0) {
										bot.sendMessage(message.chat.id, "L'oggetto selezionato non esiste", kbNext);
										return;
									}
									var item_id = rows[0].id;
									if (getItemCnt(player_id, item_id) == 0) {
										bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", kbNext);
										return;
									}

									if (item_id == 706) {
										if (((dragon_level == 100) && (dragon_evolved == 0)) ||
											((dragon_level == 200) && (dragon_evolved == 1)) || 
											(dragon_level == 300))
											setAchievement(player_id, 64, 999);
										else
											setAchievement(player_id, 64, 1);
									}

									if (item_id != 706) {
										if (inCombat == 0) {
											bot.sendMessage(message.chat.id, "Questo oggetto pu√≤ essere utilizzato solo se il drago si trova in combattimento nella vetta!", kbNext);
											return;
										}
										if (iscritto == 0) {
											bot.sendMessage(message.chat.id, "Questo oggetto pu√≤ essere utilizzato solo se il drago √® iscritto alle Vette", back);
											return;
										}
										if ((item_id == 700) || (item_id == 701) || (item_id == 702)) {
											if (inCombatText != "") {
												bot.sendMessage(message.chat.id, inCombatText, kbNext);
												return;
											}
										};
									} else {
										if ((inCombat == 1) || ((inCombat == 1) && (combatSubito > 0))) {
											bot.sendMessage(message.chat.id, "Questo oggetto non pu√≤ essere utilizzato se il drago si trova in combattimento nella vetta!", kbNext);
											return;
										}
									}

									if ((item_id == 700) || (item_id == 701) || (item_id == 702)) {

										var scale = 0;
										if (item_id == 700)
											scale = 1;
										else if (item_id == 701)
											scale = 2;
										else if (item_id == 702)
											scale = 3;

										if (dragon_scale + scale > 5)
											scale = 5 - dragon_scale;

										connection.query('UPDATE dragon SET scale = scale+' + scale + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai ottenuto " + scale + " ‚öúÔ∏è!", kbNext);
											delItem(player_id, item_id, 1);
										});
									} else if ((item_id == 703) || (item_id == 704) || (item_id == 705) || (item_id == 785) || (item_id == 786)) {

										var life = 0;
										if (item_id == 703)
											life = 0.05;
										else if (item_id == 704)
											life = 0.1;
										else if (item_id == 705)
											life = 0.2;
										else if (item_id == 785)
											life = 0.5;
										else if (item_id == 786)
											life = 1;

										dragon_life += dragon_total_life * life;

										if (dragon_life > dragon_total_life)
											dragon_life = dragon_total_life;

										dragon_life = Math.round(dragon_life);

										connection.query('UPDATE dragon SET life = ' + dragon_life + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											life = life * 100;
											bot.sendMessage(message.chat.id, "Il tuo drago ha recuperato la salute e ora possiede " + dragon_life + " hp!", kbNext);
											delItem(player_id, item_id, 1);
										});
									} else if (item_id == 706) {

										if (((dragon_level == 100) && (dragon_evolved == 0)) || 
											((dragon_level == 200) && (dragon_evolved == 1)) || 
											(dragon_level == 300)) {
											bot.sendMessage(message.chat.id, "Non puoi usare questo oggetto su un drago al livello massimo!", kbNext);
											return;
										}

										var sign = "+";
										var text = "ottenuto";
										var rand = Math.random() * 100;
										var extra = "";
										if ((rand < 50) && (dragon_level > 5)) {
											sign = "-";
											text = "perso";
											extra = ", level = level-1";
										}

										connection.query('UPDATE dragon SET exp = exp' + sign + '70' + extra + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Il tuo drago ha " + text + " un livello!", kbNext);
											checkDragon(player_id);
											delItem(player_id, item_id, 1);
										});
									};
								});
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/Entra in combattimento|Continua a combattere/i, function (message) {
	connection.query('SELECT account_id, id, reborn, charm_id, holiday, class, power_dragon_dmg, power_dragon_def, power_dragon_crit FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var charm_id = rows[0].charm_id;
		var class_id = rows[0].class;

		var power_dragon_dmg = rows[0].power_dragon_dmg;
		var power_dragon_def = rows[0].power_dragon_def;
		var power_dragon_crit = rows[0].power_dragon_crit;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [['Torna alla vetta'], ['Torna al menu']]
			}
		};

		var kbNext = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [['Continua a Combattere'], ['Torna al menu']]
			}
		};

		var kbNext = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [['Continua a Combattere'], ['Torna al menu']]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [['Si'], ['Continua a Combattere']]
			}
		};

		var d = new Date();
		d.setMinutes(d.getMinutes() + 15);
		var dragon_time = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
		var dragon_time_short = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

		connection.query('SELECT * FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}

			var dragon_id = rows[0].id;
			var dragon_name = rows[0].name;
			var dragon_level = rows[0].level;
			var dragon_type = rows[0].type;
			var dragon_scale = rows[0].scale;
			var dragon_life = rows[0].life;
			var dragon_total_life = rows[0].total_life;

			var dragon_damage = rows[0].damage;
			var dragon_defence = rows[0].defence;
			var dragon_claws = rows[0].claws;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_arms_id = rows[0].arms_id;
			var dragon_arms_duration = rows[0].arms_duration;
			var dragon_crit = rows[0].critical;

			dragon_damage += power_dragon_dmg;
			dragon_defence += power_dragon_def;
			dragon_crit += power_dragon_crit;

			if ((class_id == 7) && (reborn > 1) && (reborn == 5))
				dragon_claws += dragon_claws * 1;
			else if ((class_id == 7) && (reborn > 1))
				dragon_claws += dragon_claws * 0.5;
			if ((class_id == 7) && (reborn > 1) && (reborn == 5))
				dragon_saddle += dragon_saddle * 1;
			else if ((class_id == 7) && (reborn > 1))
				dragon_saddle += dragon_saddle * 0.5;

			if ((class_id == 7) && (reborn == 3))
				dragon_crit += 5;
			if ((class_id == 7) && (reborn >= 4))
				dragon_crit += 7;

			connection.query('SELECT * FROM dragon_move WHERE type = ' + dragonToId(dragon_type) + ' ORDER BY scale ASC', function (err, rows, fields) {
				if (err) throw err;

				var move = [];
				var dragon_moves = [];

				for (var i = 0, len = Object.keys(rows).length; i < len; i++)
					dragon_moves.push(rows[i].name);

				move.push([dragonSymId(rows[0].move_type) + " " + rows[0].name + " (" + rows[0].scale + " ‚öúÔ∏è)",
						   dragonSymId(rows[1].move_type) + " " + rows[1].name + " (" + rows[1].scale + " ‚öúÔ∏è)"]);
				move.push([dragonSymId(rows[2].move_type) + " " + rows[2].name + " (" + rows[2].scale + " ‚öúÔ∏è)",
						   dragonSymId(rows[3].move_type) + " " + rows[3].name + " (" + rows[3].scale + " ‚öúÔ∏è)"]);
				move.push(["Salta (+1 ‚öúÔ∏è)", "Risorse üçµ"]);
				move.push(["Scruta üîé", "Rinuncia üö´", "Torna al menu"]);

				var kbCombat = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: move
					}
				};

				connection.query('SELECT id, is_dummy, top_id, enemy_dragon_id, poison, dmg_boost, ice, protection, wait_dmg, confusion, battle_time, reject FROM dragon_top_status WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Non sei iscritto alla vetta", kbBack);
						return;
					}

					if (rows[0].enemy_dragon_id == null) {
						bot.sendMessage(message.chat.id, "Non sei pi√π in combattimento", kbBack);
						return;
					}

					var enemy_dragon_id = rows[0].enemy_dragon_id;

					var d = new Date(rows[0].battle_time);
					var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
					var top_id = rows[0].top_id;

					var dmg_boost = rows[0].dmg_boost;
					var poison = rows[0].poison;
					var ice = rows[0].ice;
					var protection = rows[0].protection;
					var wait_dmg = rows[0].wait_dmg;
					var confusion = rows[0].confusion;
					var reject = rows[0].reject;

					var is_dummy = rows[0].is_dummy;
					var target_table_status = "dragon_top_status";
					var target_table_dragon = "dragon";
					if (is_dummy == 1) {
						target_table_status = "dragon_top_dummy";
						target_table_dragon = "dragon_dummy";
					}

					var altered = "";
					var alteredCnt = 0;
					if (dmg_boost > 0) {
						altered += "Aumento danni";
						alteredCnt = 1;
					}
					if (poison > 0) {
						if (alteredCnt == 1)
							altered += ", ";
						altered += "Avvelenato";
						alteredCnt = 1;
					}
					if (ice > 0) {
						if (alteredCnt == 1)
							altered += ", ";
						altered += "Congelato";
						alteredCnt = 1;
					}
					if (protection > 0) {
						if (alteredCnt == 1)
							altered += ", ";
						altered += "Protetto";
						alteredCnt = 1;
					}
					if (wait_dmg > 0) {
						if (alteredCnt == 1)
							altered += ", ";
						altered += "Colpo pesante";
						alteredCnt = 1;
					}
					if (confusion > 0) {
						if (alteredCnt == 1)
							altered += ", ";
						altered += "Confuso";
						alteredCnt = 1;
					}
					if (alteredCnt == 0)
						altered = "Normale";

					connection.query('SELECT top_id, dmg_boost, poison, ice, protection, wait_dmg, confusion FROM ' + target_table_status + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0) {
							bot.sendMessage(message.chat.id, "Il drago avversario non esiste, contatta l'amministratore", kbBack);
							return;
						}

						var enemy_dmg_boost = rows[0].dmg_boost;
						var enemy_poison = rows[0].poison;
						var enemy_ice = rows[0].ice;
						var enemy_protection = rows[0].protection;
						var enemy_wait_dmg = rows[0].wait_dmg;
						var enemy_confusion = rows[0].confusion;

						var enemy_top_id = rows[0].top_id;

						var enemy_altered = "";
						var alteredCnt = 0;
						if (enemy_dmg_boost > 0) {
							enemy_altered += "Aumento danni";
							alteredCnt = 1;
						}
						if (enemy_poison > 0) {
							if (alteredCnt == 1)
								enemy_altered += ", ";
							enemy_altered += "Avvelenato";
							alteredCnt = 1;
						}
						if (enemy_ice > 0) {
							if (alteredCnt == 1)
								enemy_altered += ", ";
							enemy_altered += "Congelato";
							alteredCnt = 1;
						}
						if (enemy_protection > 0) {
							if (alteredCnt == 1)
								enemy_altered += ", ";
							enemy_altered += "Protetto";
							alteredCnt = 1;
						}
						if (enemy_wait_dmg > 0) {
							if (alteredCnt == 1)
								enemy_altered += ", ";
							enemy_altered += "Colpo pesante";
							alteredCnt = 1;
						}
						if (enemy_confusion > 0) {
							if (alteredCnt == 1)
								enemy_altered += ", ";
							enemy_altered += "Confuso";
							alteredCnt = 1;
						}
						if (alteredCnt == 0)
							enemy_altered = "Normale";

						connection.query('SELECT combat, rank FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Accedi alla vetta prima di entrare in combattimento", kbBack);
								return;
							}

							if (rows[0].combat == 0) {
								bot.sendMessage(message.chat.id, "Cerca un avversario prima di entrare in combattimento", kbBack);
								return;
							}

							var dragon_rank = rows[0].rank;

							connection.query('SELECT player.id, player.charm_id, player.chat_id, player.class, player.reborn, class.name As class_name, power_dragon_dmg, power_dragon_def, power_dragon_crit FROM player, dragon, class WHERE class.id = player.class AND player.id = dragon.player_id AND dragon.id = ' + enemy_dragon_id, function (err, rows, fields) {
								if (err) throw err;

								var player_id2 = 0;
								var enemy_charm_id = 0;
								var chat_id2 = 0;
								var reborn2 = 0;
								var class_id2 = 0;
								var enemy_class = "";
								var enemy_power_dragon_dmg = 0;
								var enemy_power_dragon_def = 0;
								var enemy_power_dragon_crit = 0;

								if (is_dummy == 0) {
									player_id2 = rows[0].id;
									enemy_charm_id = rows[0].charm_id;
									chat_id2 = rows[0].chat_id;
									reborn2 = rows[0].reborn;
									class_id2 = rows[0].class;
									enemy_class = rows[0].class_name + " " + classSym(rows[0].class_name);
									enemy_power_dragon_dmg = rows[0].power_dragon_dmg;
									enemy_power_dragon_def = rows[0].power_dragon_def;
									enemy_power_dragon_crit = rows[0].power_dragon_crit;
								} else {
									enemy_charm_id = 695;
									if (class_id == 7) {
										class_id2 = 7;
										var classRow = connection_sync.query('SELECT name FROM class WHERE id = ' + class_id2);
										enemy_class = classRow[0].name + " " + classSym(classRow[0].name);
									} else
										enemy_class = "-";
								}

								connection.query('SELECT combat, rank FROM dragon_top_rank WHERE player_id = ' + player_id2, function (err, rows, fields) {
									if (err) throw err;

									var enemy_dragon_rank = 0;
									if (is_dummy == 0) {
										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Il drago avversario non √® pi√π disponibile (" + enemy_dragon_id + ")", kbBack);
											return;
										}
										enemy_dragon_rank = rows[0].rank;
									} else
										enemy_dragon_rank = dragon_rank;

									connection.query('SELECT * FROM ' + target_table_dragon + ' WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
										if (err) throw err;

										var enemy_dragon_name = rows[0].name;
										var enemy_dragon_level = rows[0].level;
										var enemy_dragon_type = rows[0].type;
										var enemy_dragon_life = rows[0].life;
										var enemy_dragon_total_life = rows[0].total_life;
										var enemy_dragon_scale = rows[0].scale;

										var enemy_dragon_damage = rows[0].damage;
										var enemy_dragon_defence = rows[0].defence;
										var enemy_dragon_claws = rows[0].claws;
										var enemy_dragon_claws_id = rows[0].claws_id;
										var enemy_dragon_saddle = rows[0].saddle;
										var enemy_dragon_saddle_id = rows[0].saddle_id;
										var enemy_dragon_arms_id = rows[0].arms_id;
										var enemy_dragon_arms_duration = rows[0].arms_duration;
										var enemy_dragon_crit = rows[0].critical;

										enemy_dragon_damage += enemy_power_dragon_dmg;
										enemy_dragon_defence += enemy_power_dragon_def;
										enemy_dragon_crit += enemy_power_dragon_crit;

										if ((class_id2 == 7) && (reborn2 > 1) && (reborn2 == 5))
											enemy_dragon_claws += enemy_dragon_claws * 1;
										else if ((class_id2 == 7) && (reborn2 > 1))
											enemy_dragon_claws += enemy_dragon_claws * 0.5;
										if ((class_id2 == 7) && (reborn2 > 1) && (reborn2 == 5))
											enemy_dragon_saddle += enemy_dragon_saddle * 1;
										else if ((class_id2 == 7) && (reborn2 > 1))
											enemy_dragon_saddle += enemy_dragon_saddle * 0.5;
										if ((class_id2 == 7) && (reborn2 == 3))
											enemy_dragon_crit += 5;
										if ((class_id2 == 7) && (reborn2 >= 4))
											enemy_dragon_crit += 7;

										var scale = "";
										if (dragon_scale > 0) {
											for (var i = 0; i < dragon_scale; i++)
												scale += "‚öúÔ∏è ";
										} else
											scale = "-"

										var status = "Tuo drago " + dragonSym(dragon_type) + ": " + formatNumber(dragon_life) + " üî∫ (" + altered + ")\n|" + progressBar(dragon_life, dragon_total_life) + "|\n\n";

										status += "Avversario " + dragonSym(enemy_dragon_type) + ": " + formatNumber(enemy_dragon_life) + " üî∫ (" + enemy_altered + ")\n|" + progressBar(enemy_dragon_life, enemy_dragon_total_life) + "|\n\n";

										status += "Scaglie: " + scale + "\n";
										status += "Si conclude alle " + short_date;

										bot.sendMessage(message.chat.id, status + "\nQuale mossa utilizzare?", kbCombat).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {

												if (answer.text == "Torna al menu")
													return;

												if (answer.text.indexOf("Risorse") != -1)
													return;

												if (answer.text.indexOf("Scruta") != -1) {
													bot.sendMessage(message.chat.id, "<b>Informazioni sul drago avversario:</b>\n" + "Nome: " + enemy_dragon_name + " " + enemy_dragon_type + " " + dragonSym(enemy_dragon_type) + "\nLivello: " + enemy_dragon_level + "\nVocazione: " + enemy_class, kbNext);
													return;
												}

												if (answer.text.indexOf("Rinuncia") != -1) {
													if (reject >= 3) {
														bot.sendMessage(message.chat.id, "Hai gi√† rinunciato a 3 incontri oggi", kbBack);
														return;
													}
													bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler abbandonare la battaglia? Verr√† conteggiata come persa, inoltre puoi rinunciare solamente ad un combattimento al giorno.", kbYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() == "si") {

																var d = new Date();
																d.setMinutes(d.getMinutes() + 5);
																var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																var d = new Date();
																d.setMinutes(d.getMinutes() + 15);
																var long_date2 = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																connection.query('UPDATE dragon_top_status SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date + '", is_dummy = 0, reject = reject+1 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																	if (err) throw err;
																	connection.query('UPDATE ' + target_table_status + ' SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date2 + '" WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																				if (err) throw err;

																				var chest = 1;

																				if (enemy_dragon_level > (dragon_level + 50))
																					chest = 0;

																				if (enemy_dragon_arms_id == 714) {
																					var randS = Math.random() * 100;
																					if (randS < 50)
																						chest++;
																				}

																				var extra = "";
																				if (chest == 1) {
																					extra = " uno Scrigno Scaglia!";

																					if (is_dummy == 0)
																						addChest(player_id2, 9);
																				} else if (chest > 1) {
																					extra = " " + chest + " Scrigni Scaglia!";

																					if (is_dummy == 0)
																						addChest(player_id2, 9, chest);
																				}

																				if (dragon_rank > 0) {
																					connection.query('UPDATE dragon_top_rank SET rank = rank-1 WHERE rank > 0 AND dragon_id = ' + dragon_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																					if (enemy_top_id < max_top_id) {
																						connection.query('UPDATE dragon_top_rank SET rank = rank+1 WHERE rank < ' + rank_cap + ' AND dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					}

																					bot.sendMessage(message.chat.id, "Hai abbandonato la battaglia e hai perso 1 √ê!", kbBack);

																					if (extra != "")
																						extra = " e" + extra;
																					if (is_dummy == 0)
																						bot.sendMessage(chat_id2, "Il tuo sfidante " + dragon_name + " ha abbandonato lo scontro, hai ottenuto 1 √ê" + extra + "!");
																				} else {
																					bot.sendMessage(message.chat.id, "Hai abbandonato la battaglia!", kbBack);

																					if (extra != "")
																						extra = " e hai ricevuto" + extra;
																					if (is_dummy == 0)
																						bot.sendMessage(chat_id2, "Il tuo sfidante " + dragon_name + " ha abbandonato lo scontro" + extra + "!");
																				}

																				var d = new Date();
																				var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																				if (is_dummy == 0) {
																					connection.query('INSERT INTO dragon_top_log (player_id, dragon_id, enemy_player_id, enemy_dragon_id, time, win, note) VALUES (' + player_id + ',' + dragon_id + ',' + player_id2 + ',' + enemy_dragon_id + ',"' + long_date + '",2,"Rinuncia")', function (err, rows, fields) {
																						if (err) throw err;
																					});
																				} else if (is_dummy == 1) {
																					connection.query('DELETE FROM dragon_top_dummy WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																						if (err) throw err;
																						connection.query('DELETE FROM dragon_dummy WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					});
																				}
																			});
																		});
																	});
																});
															};
														};
													});
													return;
												}

												var skip = 0;
												if (answer.text.indexOf("Salta") != -1)
													skip = 1;

												var move = answer.text.substring(3, answer.text.indexOf("(") - 1);
												if ((dragon_moves.indexOf(move) == -1) && (skip == 0))
													return;

												connection.query('SELECT enemy_dragon_id FROM dragon_top_status WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													var enemy_dragon_id = rows[0].enemy_dragon_id;
													if (enemy_dragon_id == null) {
														bot.sendMessage(message.chat.id, "Non sei pi√π in combattimento", kbBack);
														return;
													}

													connection.query('SELECT name, scale, damage, move_type FROM dragon_move WHERE name = "' + move + '"', function (err, rows, fields) {
														if (err) throw err;

														var move_damage = 0;
														var move_name = "";
														var move_scale = 0;
														var move_type = 0;

														if (Object.keys(rows).length > 0) {
															if (dragon_scale < rows[0].scale) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza ‚öúÔ∏è per utilizzare questa mossa (" + rows[0].scale + " necessarie)", kbNext);
																return;
															}

															move_damage = rows[0].damage;
															move_name = rows[0].name;
															move_scale = rows[0].scale;
															move_type = rows[0].move_type;
														}

														var enemySkip = 0;

														//Per saltare i turni a volte
														var rand = Math.random() * 100;
														var prob = 50 - 10 * enemy_dragon_scale;
														if (prob > rand)
															enemySkip = 1;

														connection.query('SELECT name, scale, damage, move_type FROM dragon_move WHERE scale <= ' + enemy_dragon_scale + ' AND type = ' + dragonToId(enemy_dragon_type) + ' ORDER BY RAND()', function (err, rows, fields) {

															var enemy_move_name = "";
															var enemy_move_damage = 0;
															var enemy_move_type = 0;
															var enemy_move_scale = 0;

															if ((Object.keys(rows).length > 0) && (enemySkip == 0)) {
																enemy_move_name = rows[0].name;
																enemy_move_damage = rows[0].damage;
																enemy_move_type = rows[0].move_type;
																enemy_move_scale = rows[0].scale;

																connection.query('UPDATE ' + target_table_dragon + ' SET scale = scale-' + rows[0].scale + ' WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
																	if (err) throw err;
																});

																enemy_dragon_scale -= rows[0].scale;
															} else
																enemySkip = 1;

															dragon_scale -= move_scale;

															connection.query('UPDATE dragon SET scale = scale-' + move_scale + ' WHERE id = ' + dragon_id, function (err, rows, fields) {
																if (err) throw err;

																var rand = Math.random() * 100;
																var crit_txt = "";

																var weak1 = typeWeak(dragonToId(dragon_type), dragonToId(enemy_dragon_type), 0, 0);
																var weak2 = typeWeak(dragonToId(enemy_dragon_type), dragonToId(dragon_type), 0, 1);
																var moveWeak1 = typeWeak(move_type, dragonToId(enemy_dragon_type), 1, 0);
																var moveWeak2 = typeWeak(enemy_move_type, dragonToId(dragon_type), 1, 1);

																var moveCrit1 = 0;
																var moveCrit2 = 0;

																var dmg_multi = 50;

																//Mio

																if ((move_type == 1) && (enemy_poison == 0) && (ice == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (move_scale * 2) * 8;
																	if (enemy_dragon_arms_id == 710)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 720)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 725)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 732)
																		randC -= 10;
																	if (enemy_dragon_saddle_id == 738)
																		randC -= 10;
																	if (enemy_dragon_claws_id == 744)
																		randC -= 5;
																	if (enemy_dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		enemy_poison = 2;
																		if (dragon_claws_id == 741) {
																			var rand = Math.random() * 100;
																			if (rand < 10) {
																				enemy_poison++;
																			}
																		}
																		connection.query('UPDATE ' + target_table_status + ' SET poison = ' + enemy_poison + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai avvelenato il drago nemico!");
																		});
																	}
																}
																if ((move_type == 2) && (protection == 0) && (ice == 0) && (confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (move_scale * 2) * 8;
																	if (enemy_dragon_arms_id == 710)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 720)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 725)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 732)
																		randC -= 10;
																	if (enemy_dragon_saddle_id == 738)
																		randC -= 10;
																	if (enemy_dragon_claws_id == 744)
																		randC -= 5;
																	if (enemy_dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		protection = 1;
																		if (dragon_claws_id == 746) {
																			var rand = Math.random() * 100;
																			if (rand < 10) {
																				protection++;
																			}
																		}
																		connection.query('UPDATE dragon_top_status SET protection = ' + protection + ' WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai attivato la protezione dai danni!");
																		});
																	}
																}
																if ((move_type == 3) && (dmg_boost == 0) && (ice == 0) && (confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (move_scale * 2) * 8;
																	if (enemy_dragon_arms_id == 710)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 720)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 725)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 732)
																		randC -= 10;
																	if (enemy_dragon_saddle_id == 738)
																		randC -= 10;
																	if (enemy_dragon_claws_id == 744)
																		randC -= 5;
																	if (enemy_dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		dmg_boost = 3;
																		if (dragon_claws_id == 717) {
																			var rand = Math.random() * 100;
																			if (rand < 10) {
																				dmg_boost++;
																			}
																		}
																		connection.query('UPDATE dragon_top_status SET dmg_boost = ' + dmg_boost + ' WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai attivato il danno incrementato!");
																		});
																	}
																}
																if ((move_type == 4) && (enemy_confusion == 0) && (ice == 0) && (confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (move_scale * 2) * 6;
																	if (enemy_dragon_arms_id == 710)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 720)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 725)
																		randC -= 5;
																	if (dragon_claws_id == 716)
																		randC += 10;
																	if (enemy_dragon_saddle_id == 732)
																		randC -= 10;
																	if (enemy_dragon_saddle_id == 738)
																		randC -= 10;
																	if (enemy_dragon_claws_id == 744)
																		randC -= 5;
																	if (enemy_dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		enemy_confusion = 1;
																		if (dragon_claws_id == 727) {
																			var rand = Math.random() * 100;
																			if (rand < 10) {
																				enemy_confusion++;
																			}
																		}
																		connection.query('UPDATE ' + target_table_status + ' SET confusion = ' + enemy_confusion + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai confuso il drago nemico!");
																		});
																	}
																}
																if ((move_type == 5) && (wait_dmg == 0) && (ice == 0) && (confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (move_scale * 2) * 8;
																	if (enemy_dragon_arms_id == 710)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 720)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 725)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 732)
																		randC -= 10;
																	if (enemy_dragon_saddle_id == 738)
																		randC -= 10;
																	if (enemy_dragon_claws_id == 744)
																		randC -= 5;
																	if (enemy_dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		connection.query('UPDATE dragon_top_status SET wait_dmg = 2 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Colpo pesante in caricamento (2 turni)!");
																		});
																		wait_dmg = 2;
																	}
																}
																if ((move_type == 6) && (enemy_ice == 0) && (ice == 0) && (confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (move_scale * 2) * 8;
																	if (enemy_dragon_arms_id == 710)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 720)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 725)
																		randC -= 5;
																	if (enemy_dragon_saddle_id == 732)
																		randC -= 10;
																	if (enemy_dragon_saddle_id == 738)
																		randC -= 10;
																	if (enemy_dragon_claws_id == 744)
																		randC -= 5;
																	if (enemy_dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		enemy_ice = 1;
																		if (dragon_claws_id == 721) {
																			var rand = Math.random() * 100;
																			if (rand < 10) {
																				enemy_ice++;
																			}
																		}
																		connection.query('UPDATE ' + target_table_status + ' SET ice = ' + enemy_ice + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai congelato il drago nemico!");
																		});
																	}
																}

																var damage = dragon_damage + dragon_claws;
																var max = damage + (damage * 0.1);
																var min = damage - (damage * 0.1);
																damage = getRandomArbitrary(min, max);
																damage -= (enemy_dragon_defence + enemy_dragon_saddle);

																if (charm_id == 602) {
																	damage += 25;
																	dragon_crit += 10;
																}
																if (charm_id == 695) {
																	damage += 30;
																	dragon_crit += 15;
																}
																if (dragon_claws_id == 747)
																	dragon_crit += 5;

																//Nemico

																if ((enemy_move_type == 1) && (poison == 0) && (enemySkip == 0) && (enemy_ice == 0) && (enemy_confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (enemy_move_scale * 2) * 8;
																	if (dragon_arms_id == 710)
																		randC -= 5;
																	if (dragon_saddle_id == 720)
																		randC -= 5;
																	if (dragon_saddle_id == 725)
																		randC -= 5;
																	if (dragon_saddle_id == 732)
																		randC -= 10;
																	if (dragon_saddle_id == 738)
																		randC -= 10;
																	if (dragon_claws_id == 744)
																		randC -= 5;
																	if (dragon_claws_id == 749)
																		randC -= 5;

																	if (rand < randC) {
																		poison = 2;
																		if (enemy_dragon_claws_id == 741) {
																			var rand = Math.random() * 100;
																			if (rand < 10)
																				poison++;
																		}
																		connection.query('UPDATE dragon_top_status SET poison = ' + poison + ' WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Sei stato avvelenato dal drago nemico!");
																		});
																	}
																}
																if ((enemy_move_type == 2) && (enemy_protection == 0) && (enemySkip == 0) && (enemy_ice == 0) && (enemy_confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (enemy_move_scale * 2) * 8;
																	if (dragon_arms_id == 710)
																		randC -= 5;
																	if (dragon_saddle_id == 720)
																		randC -= 5;
																	if (dragon_saddle_id == 725)
																		randC -= 5;
																	if (dragon_saddle_id == 732)
																		randC -= 10;
																	if (dragon_saddle_id == 738)
																		randC -= 10;
																	if (dragon_claws_id == 744)
																		randC -= 5;
																	if (dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		enemy_protection = 1;
																		if (enemy_dragon_claws_id == 746) {
																			var rand = Math.random() * 100;
																			if (rand < 10)
																				enemy_protection++;
																		}
																		connection.query('UPDATE ' + target_table_status + ' SET protection = ' + enemy_protection + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Il drago nemico ha attivato la protezione!");
																		});
																	}
																}
																if ((enemy_move_type == 3) && (enemy_dmg_boost == 0) && (enemySkip == 0) && (enemy_ice == 0) && (enemy_confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (enemy_move_scale * 2) * 8;
																	if (dragon_arms_id == 710)
																		randC -= 5;
																	if (dragon_saddle_id == 720)
																		randC -= 5;
																	if (dragon_saddle_id == 725)
																		randC -= 5;
																	if (dragon_saddle_id == 732)
																		randC -= 10;
																	if (dragon_saddle_id == 738)
																		randC -= 10;
																	if (dragon_claws_id == 744)
																		randC -= 5;
																	if (dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		enemy_dmg_boost = 3;
																		if (enemy_dragon_claws_id == 717) {
																			var rand = Math.random() * 100;
																			if (rand < 10)
																				enemy_dmg_boost++;
																		}
																		connection.query('UPDATE ' + target_table_status + ' SET dmg_boost = ' + enemy_dmg_boost + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Il drago nemico ha attivato il danno incrementato!");
																		});
																	}
																}
																if ((enemy_move_type == 4) && (confusion == 0) && (enemySkip == 0) && (enemy_ice == 0) && (enemy_confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (enemy_move_scale * 2) * 6;
																	if (dragon_arms_id == 710)
																		randC -= 5;
																	if (dragon_saddle_id == 720)
																		randC -= 5;
																	if (dragon_saddle_id == 725)
																		randC -= 5;
																	if (enemy_dragon_claws_id == 716)
																		randC += 10;
																	if (dragon_saddle_id == 732)
																		randC -= 10;
																	if (dragon_saddle_id == 738)
																		randC -= 10;
																	if (dragon_claws_id == 744)
																		randC -= 5;
																	if (dragon_claws_id == 749)
																		randC -= 5;

																	if (rand < randC) {
																		confusion = 1;
																		if (enemy_dragon_claws_id == 727) {
																			var rand = Math.random() * 100;
																			if (rand < 10)
																				confusion++;
																		}
																		connection.query('UPDATE dragon_top_status SET confusion = ' + confusion + ' WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Il drago nemico ti ha confuso!");
																		});
																	}
																}
																if ((enemy_move_type == 5) && (enemy_wait_dmg == 0) && (enemySkip == 0) && (enemy_ice == 0) && (enemy_confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (enemy_move_scale * 2) * 8;
																	if (dragon_arms_id == 710)
																		randC -= 5;
																	if (dragon_saddle_id == 720)
																		randC -= 5;
																	if (dragon_saddle_id == 725)
																		randC -= 5;
																	if (dragon_saddle_id == 732)
																		randC -= 10;
																	if (dragon_saddle_id == 738)
																		randC -= 10;
																	if (dragon_claws_id == 744)
																		randC -= 5;
																	if (dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		connection.query('UPDATE ' + target_table_status + ' SET wait_dmg = 2 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Il drago nemico sta caricando un colpo!");
																		});
																		enemy_wait_dmg = 2;
																	}
																}
																if ((enemy_move_type == 6) && (ice == 0) && (enemySkip == 0) && (enemy_ice == 0) && (enemy_confusion == 0)) {
																	var rand = Math.random() * 100;
																	var randC = (enemy_move_scale * 2) * 8;
																	if (dragon_arms_id == 710)
																		randC -= 5;
																	if (dragon_saddle_id == 720)
																		randC -= 5;
																	if (dragon_saddle_id == 725)
																		randC -= 5;
																	if (dragon_saddle_id == 732)
																		randC -= 10;
																	if (dragon_saddle_id == 738)
																		randC -= 10;
																	if (dragon_claws_id == 744)
																		randC -= 5;
																	if (dragon_claws_id == 749)
																		randC -= 5;
																	if (rand < randC) {
																		ice = 1;
																		if (enemy_dragon_claws_id == 721) {
																			var rand = Math.random() * 100;
																			if (rand < 10)
																				ice++;
																		}
																		connection.query('UPDATE dragon_top_status SET ice = ' + ice + ' WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Il drago nemico ti ha congelato!");
																		});
																	}
																}

																rand = Math.random() * 100;
																var enemy_crit_txt = "";

																var enemy_damage = enemy_dragon_damage + enemy_dragon_claws;
																var max = enemy_damage + (enemy_damage * 0.1);
																var min = enemy_damage - (enemy_damage * 0.1);
																enemy_damage = getRandomArbitrary(min, max);
																enemy_damage -= (dragon_defence + dragon_saddle);

																if (enemy_charm_id == 602) {
																	enemy_damage += 25;
																	enemy_dragon_crit += 10;
																}
																if (enemy_charm_id == 695) {
																	enemy_damage += 30;
																	enemy_dragon_crit += 15;
																}
																if (enemy_dragon_claws_id == 747)
																	enemy_dragon_crit += 5;

																// Mie mosse

																if ((dmg_boost > 0) && (skip == 0) && (wait_dmg <= 1)) {
																	damage += damage * 0.25;
																	connection.query('UPDATE dragon_top_status SET dmg_boost = dmg_boost-1 WHERE dmg_boost > 0 AND dragon_id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																var enemy_poison_dmg = 0;
																if (enemy_poison > 0) {
																	enemy_poison_dmg = damage * getRandomArbitrary(0.5, 0.65);
																	damage += enemy_poison_dmg;
																	connection.query('UPDATE ' + target_table_status + ' SET poison = poison-1 WHERE poison > 0 AND dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																if ((ice > 0) && (skip == 0)) {
																	damage = 0;
																	connection.query('UPDATE dragon_top_status SET ice = ice-1 WHERE ice > 0 AND dragon_id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																if ((enemy_protection > 0) && (skip == 0)) {
																	damage -= damage * 0.5;
																	connection.query('UPDATE ' + target_table_status + ' SET protection = protection-1 WHERE protection > 0 AND dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																var high_dmg = 0;
																if ((wait_dmg > 0) && (skip == 0)) {
																	if ((wait_dmg == 1) && (ice == 0)) {
																		high_dmg = damage;
																		damage += high_dmg;
																	} else
																		skip = 1;
																	connection.query('UPDATE dragon_top_status SET wait_dmg = wait_dmg-1 WHERE wait_dmg > 0 AND dragon_id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																var enemy_conf_dmg = 0;
																if ((enemy_confusion > 0) && (enemy_ice == 0) && (enemySkip == 0)) {
																	enemy_conf_dmg = damage * 0.5;
																	damage += enemy_conf_dmg;
																	connection.query('UPDATE ' + target_table_status + ' SET confusion = confusion-1 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	enemySkip = 1;
																}

																var rand = Math.random() * 100;
																var crit_val = 0;
																if (dragon_crit > rand) {
																	if ((dragon_arms_id == 712) || (dragon_claws_id == 733)) {
																		if (dragon_arms_id == 712) {
																			crit_val = 1.5;
																			damage += damage * crit_val;
																		}
																		if (dragon_claws_id == 733) {
																			crit_val = 1.3;
																			damage += damage * crit_val;
																		}
																	} else {
																		crit_val = 1;
																		damage += damage * crit_val;
																	}
																	crit_txt = " CRITICI";
																}

																damage += damage * weak1["myDmg"];
																damage += damage * moveWeak1["myDmg"];

																if (moveWeak1["myDmg"] != 0)
																	moveCrit1 = 1;

																//Mosse nemico

																if ((enemy_dmg_boost > 0) && (enemySkip == 0) && (enemy_wait_dmg <= 1)) {
																	enemy_damage += enemy_damage * 0.25;
																	connection.query('UPDATE ' + target_table_status + ' SET dmg_boost = dmg_boost-1 WHERE dmg_boost > 0 AND dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																var conf_dmg = 0;
																if ((confusion > 0) && (ice == 0) && (skip == 0)) {
																	conf_dmg = enemy_damage * 0.5;
																	enemy_damage += conf_dmg;
																	connection.query('UPDATE dragon_top_status SET confusion = confusion-1 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	skip = 1;
																}
																var poison_dmg = 0;
																if (poison > 0) {
																	poison_dmg = enemy_damage * getRandomArbitrary(0.5, 0.65);
																	enemy_damage += poison_dmg;
																	connection.query('UPDATE dragon_top_status SET poison = poison-1 WHERE poison > 0 AND dragon_id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																if ((enemy_ice > 0) && (enemySkip == 0)) {
																	enemy_damage = 0;
																	connection.query('UPDATE ' + target_table_status + ' SET ice = ice-1 WHERE ice > 0 AND dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																if ((protection > 0) && (enemySkip == 0)) {
																	enemy_damage -= enemy_damage * 0.5;
																	connection.query('UPDATE dragon_top_status SET protection = protection-1 WHERE protection > 0 AND dragon_id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}

																var enemy_high_dmg = 0;
																if ((enemy_wait_dmg > 0) && (enemySkip == 0)) {
																	if ((enemy_wait_dmg == 1) && (enemy_ice == 0)) {
																		enemy_high_dmg = enemy_damage;
																		enemy_damage += enemy_high_dmg;
																	} else
																		enemySkip = 1;
																	connection.query('UPDATE ' + target_table_status + ' SET wait_dmg = wait_dmg-1 WHERE wait_dmg > 0 AND dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}

																var rand = Math.random() * 100;
																var enemy_crit_val = 0;
																if (enemy_dragon_crit > rand) {
																	if ((enemy_dragon_arms_id == 712) || (enemy_dragon_claws_id == 733)) {
																		if (enemy_dragon_arms_id == 712) {
																			enemy_crit_val = 1.5;
																			enemy_damage += enemy_damage * enemy_crit_val;
																		}
																		if (enemy_dragon_claws_id == 733) {
																			enemy_crit_val = 1.3;
																			enemy_damage += enemy_damage * enemy_crit_val;
																		}
																	} else {
																		enemy_crit_val = 1;
																		enemy_damage += enemy_damage * enemy_crit_val;
																	}
																	enemy_crit_txt = " CRITICI";
																}

																enemy_damage += enemy_damage * weak2["myDmg"];
																enemy_damage += enemy_damage * moveWeak2["myDmg"];

																if (moveWeak2["myDmg"] != 0)
																	moveCrit2 = 1;

																//Riduzioni e aumenti di danno
																if (dragon_arms_id == 711)
																	damage += damage * 0.1;
																if (enemy_dragon_arms_id == 711)
																	enemy_damage += enemy_damage * 0.1;
																if (enemy_dragon_arms_id == 713)
																	damage -= damage * 0.1;
																if (dragon_arms_id == 713)
																	enemy_damage -= enemy_damage * 0.1;
																if (enemy_dragon_claws_id == 722)
																	damage -= damage * 0.1;
																if (dragon_claws_id == 722)
																	enemy_damage -= enemy_damage * 0.1;
																if (dragon_arms_id == 728)
																	damage += damage * 0.05;
																if (enemy_dragon_arms_id == 728)
																	enemy_damage += enemy_damage * 0.05;

																if (enemy_dragon_type == 3) {
																	if (dragon_saddle_id == 726)
																		enemy_damage -= enemy_damage * 0.1;
																}
																if (dragon_type == 3) {
																	if (enemy_dragon_saddle_id == 726)
																		damage -= damage * 0.1;
																}
																if (enemy_dragon_type == 1) {
																	if (dragon_saddle_id == 731)
																		enemy_damage -= enemy_damage * 0.1;
																}
																if (dragon_type == 1) {
																	if (enemy_dragon_saddle_id == 731)
																		damage -= damage * 0.1;
																}
																if (dragon_claws_id == 735)
																	enemy_damage -= enemy_damage * 0.05;
																if (enemy_dragon_claws_id == 735)
																	damage -= damage * 0.05;
																if (dragon_claws_id == 739)
																	enemy_damage -= enemy_damage * 0.1;
																if (enemy_dragon_claws_id == 739)
																	damage -= damage * 0.1;

																// Resistenze tipo
																if ((dragon_type == 1) && (enemy_dragon_type == 4)) {
																	if (enemy_dragon_saddle_id == 743)
																		enemy_damage -= enemy_damage * 0.5;
																}
																if ((dragon_type == 3) && (enemy_dragon_type == 2)) {
																	if (enemy_dragon_saddle_id == 719)
																		enemy_damage -= enemy_damage * 0.5;
																}
																if ((dragon_type == 6) && (enemy_dragon_type == 1)) {
																	if (enemy_dragon_saddle_id == 726)
																		enemy_damage -= enemy_damage * 0.5;
																}
																if ((dragon_type == 5) && (enemy_dragon_type == 3)) {
																	if (enemy_dragon_saddle_id == 737)
																		enemy_damage -= enemy_damage * 0.5;
																}
																if ((dragon_type == 4) && (enemy_dragon_type == 6)) {
																	if (enemy_dragon_saddle_id == 731)
																		enemy_damage -= enemy_damage * 0.5;
																}
																if ((dragon_type == 2) && (enemy_dragon_type == 5)) {
																	if (enemy_dragon_saddle_id == 750)
																		enemy_damage -= enemy_damage * 0.5;
																}
																//nemico
																if ((enemy_dragon_type == 1) && (dragon_type == 4)) {
																	if (dragon_saddle_id == 743)
																		damage -= damage * 0.5;
																}
																if ((enemy_dragon_type == 3) && (dragon_type == 2)) {
																	if (dragon_saddle_id == 719)
																		damage -= damage * 0.5;
																}
																if ((enemy_dragon_type == 6) && (dragon_type == 1)) {
																	if (dragon_saddle_id == 726)
																		damage -= damage * 0.5;
																}
																if ((enemy_dragon_type == 5) && (dragon_type == 3)) {
																	if (dragon_saddle_id == 737)
																		damage -= damage * 0.5;
																}
																if ((enemy_dragon_type == 4) && (dragon_type == 6)) {
																	if (dragon_saddle_id == 731)
																		damage -= damage * 0.5;
																}
																if ((enemy_dragon_type == 2) && (dragon_type == 5)) {
																	if (dragon_saddle_id == 750)
																		damage -= damage * 0.5;
																}

																if (damage < 0)
																	damage = 0;

																if (enemy_damage < 0)
																	enemy_damage = 0;

																damage += damage * move_damage;
																enemy_damage += enemy_damage * enemy_move_damage;

																if (skip == 1) {
																	damage = 0;
																	if (enemy_poison_dmg > 0) {
																		enemy_poison_dmg = (enemy_poison_dmg * dmg_multi) + (enemy_poison_dmg * enemy_crit_val);
																		damage = enemy_poison_dmg;
																	}
																}

																if (enemySkip == 1) {
																	enemy_damage = 0;
																	if (poison_dmg > 0) {
																		poison_dmg = (poison_dmg * dmg_multi) + (poison_dmg * crit_val);
																		enemy_damage = poison_dmg;
																	}
																}

																// Effettivi
																if (skip == 0)
																	damage = damage * dmg_multi;
																if (enemySkip == 0)
																	enemy_damage = enemy_damage * dmg_multi;

																// Solo visualizzazione
																damage = Math.round(damage);
																enemy_damage = Math.round(enemy_damage);
																if (enemySkip == 0) {
																	poison_dmg = poison_dmg * dmg_multi;
																	poison_dmg += poison_dmg * crit_val;
																}
																if (skip == 0) {
																	enemy_poison_dmg = enemy_poison_dmg * dmg_multi;
																	enemy_poison_dmg += enemy_poison_dmg * enemy_crit_val;
																}
																high_dmg = high_dmg * dmg_multi;
																high_dmg += high_dmg * crit_val;
																enemy_high_dmg = enemy_high_dmg * dmg_multi;
																enemy_high_dmg += enemy_high_dmg * enemy_crit_val;
																conf_dmg = conf_dmg * dmg_multi;
																conf_dmg += conf_dmg * crit_val;
																enemy_conf_dmg = enemy_conf_dmg * dmg_multi;
																enemy_conf_dmg += enemy_conf_dmg * enemy_crit_val;

																poison_dmg = Math.round(poison_dmg);
																enemy_poison_dmg = Math.round(enemy_poison_dmg);
																high_dmg = Math.round(high_dmg);
																enemy_high_dmg = Math.round(enemy_high_dmg);
																conf_dmg = Math.round(conf_dmg);
																enemy_conf_dmg = Math.round(enemy_conf_dmg);

																var over = 0;
																var enemy_over = 0;
																if (high_dmg > damage)
																	over = 1;
																if (enemy_high_dmg > enemy_damage)
																	enemy_over = 1;

																if (damage >= enemy_dragon_life) {
																	var d = new Date();
																	d.setMinutes(d.getMinutes() + 15);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																	connection.query('UPDATE dragon_top_status SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date + '" WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE ' + target_table_status + ' SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date + '" WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																				if (err) throw err;
																				connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																					if (err) throw err;
																					connection.query('UPDATE ' + target_table_dragon + ' SET life = 0 WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
																						if (err) throw err;

																						var rank = 1;
																						var rank_lost = 1;
																						if (dragon_level < (enemy_dragon_level - 20)) {
																							rank = 2;
																							rank_lost = 2;
																						}

																						// Il vincitore vince sempre il rango anche se il perdente non lo possiede, mentre quest'ultimo lo perde solo se lo possiede
																						if (enemy_dragon_rank >= rank_lost) {
																							connection.query('UPDATE dragon_top_rank SET rank = rank-' + rank_lost + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																						} else {
																							rank_lost = 1;
																							if (enemy_dragon_rank >= rank_lost) {
																								connection.query('UPDATE dragon_top_rank SET rank = rank-' + rank_lost + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							} else
																								rank_lost = 0;
																						}

																						if (top_id < max_top_id) {
																							if (dragon_rank + rank >= rank_cap) {
																								rank = rank_cap - dragon_rank;
																								if (rank < 0)
																									rank = 0;
																							}
																						}

																						connection.query('UPDATE dragon_top_rank SET rank = rank+' + rank + ' WHERE  dragon_id = ' + dragon_id, function (err, rows, fields) {
																							if (err) throw err;

																							var money = 0;
																							var chest = 1;
																							var randM = Math.random() * 100;
																							var bonus_money = "";
																							if (randM < 30) {
																								money = dragon_level * getRandomArbitrary(15, 30);
																								money = Math.round(money);
																								bonus_money = " (Bonus: " + formatNumber(money) + " ¬ß)";
																							}

																							if (dragon_level > (enemy_dragon_level + 50))
																								chest = 0;

																							if (dragon_arms_id == 714) {
																								var randS = Math.random() * 100;
																								if (randS < 50)
																									chest++;
																							}

																							var randP = Math.random() * 100;
																							if (randP < 2) {
																								var randP2 = Math.random() * 100;
																								if (randP2 < 70) {
																									addItem(player_id, 608);
																									bot.sendMessage(message.chat.id, "Per l'abilit√† dimostrata nel combattere con il tuo drago, hai ottenuto un *Pass Bronzo*!", mark);
																								} else if (randP2 < 90) {
																									addItem(player_id, 609);
																									bot.sendMessage(message.chat.id, "Per l'abilit√† dimostrata nel combattere con il tuo drago, hai ottenuto un *Pass Argento*!", mark);
																								} else {
																									addItem(player_id, 610);
																									bot.sendMessage(message.chat.id, "Per l'abilit√† dimostrata nel combattere con il tuo drago, hai ottenuto un *Pass Oro*!", mark);
																								}
																							}

																							var extra = "";
																							if (chest == 1) {
																								extra = " ed uno Scrigno Scaglia!";
																								addChest(player_id, 9);
																							} else if (chest > 1) {
																								extra = " e " + chest + " Scrigni Scaglia!";
																								addChest(player_id, 9, chest);
																							}

																							connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							bot.sendMessage(message.chat.id, "Hai sconfitto <b>" + enemy_dragon_name + "</b>, hai ottenuto " + rank + " √ê" + extra + bonus_money, kbBack);

																							if (is_dummy == 0) {
																								bot.sendMessage(chat_id2, "Il tuo drago √® stato sconfitto nella vetta da " + dragon_name + " ed hai perso " + rank_lost + " √ê! Fallo riposare per tornare a combattere!");
																							}

																							if (dragon_arms_id != 0) {
																								if (dragon_arms_duration <= 1) {
																									connection.query('UPDATE dragon SET arms_duration = 0, arms_id = 0 WHERE id = ' + dragon_id, function (err, rows, fields) {
																										if (err) throw err;
																										bot.sendMessage(message.chat.id, "Lo stemma equipaggiato si √® rotto!");
																									});
																								} else {
																									connection.query('UPDATE dragon SET arms_duration = arms_duration-1 WHERE id = ' + dragon_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																							}

																							connection.query('UPDATE dragon_top_status SET wait_time = "' + dragon_time + '", is_dummy = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							var d = new Date();
																							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																							if (is_dummy == 0) {
																								connection.query('INSERT INTO dragon_top_log (player_id, dragon_id, enemy_player_id, enemy_dragon_id, time, win, note) VALUES (' + player_id + ',' + dragon_id + ',' + player_id2 + ',' + enemy_dragon_id + ',"' + long_date + '",1,"Battaglia")', function (err, rows, fields) {
																									if (err) throw err;
																								});
																							} else if (is_dummy == 1) {
																								connection.query('DELETE FROM dragon_top_dummy WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																									if (err) throw err;
																									connection.query('DELETE FROM dragon_dummy WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								});
																							}
																						});
																					});
																				});
																			});
																		});
																	});
																	return;
																}

																if (enemy_damage >= dragon_life) {
																	var d = new Date();
																	d.setMinutes(d.getMinutes() + 15);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																	connection.query('UPDATE dragon_top_status SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date + '" WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE ' + target_table_status + ' SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date + '" WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																			if (err) throw err;
																			connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																				if (err) throw err;
																				connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																					if (err) throw err;
																					connection.query('UPDATE dragon SET life = 0 WHERE id = ' + dragon_id, function (err, rows, fields) {
																						if (err) throw err;

																						var rank = 1;
																						var rank_lost = 1;
																						if ((enemy_dragon_level + 20) < dragon_level) {
																							rank = 2;
																							rank_lost = 2;
																						}

																						// Il vincitore vince sempre il rango anche se il perdente non lo possiede, mentre quest'ultimo lo perde solo se lo possiede
																						if (dragon_rank >= rank_lost) {
																							connection.query('UPDATE dragon_top_rank SET rank = rank-' + rank_lost + ' WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																						} else {
																							rank_lost = 1;
																							if (dragon_rank >= rank_lost) {
																								connection.query('UPDATE dragon_top_rank SET rank = rank-' + rank_lost + ' WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							} else
																								rank_lost = 0;
																						}

																						if (enemy_top_id < max_top_id) {
																							if (enemy_dragon_rank + rank >= rank_cap) {
																								rank = rank_cap - enemy_dragon_rank;
																								if (rank < 0)
																									rank = 0;
																							}
																						}

																						connection.query('UPDATE dragon_top_rank SET rank = rank+' + rank + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																							if (err) throw err;

																							bot.sendMessage(message.chat.id, "Sei stato sconfitto da <b>" + enemy_dragon_name + "</b> ed hai perso " + rank_lost + " √ê!", kbBack);

																							if (is_dummy == 0)
																								addChest(player_id2, 9);

																							if (is_dummy == 0)
																								bot.sendMessage(chat_id2, "Il tuo drago ha vinto durante il combattimento contro " + dragon_name + " " + dragon_type + "!\nHai ottenuto uno Scrigno Scaglia e " + rank + " √ê!");

																							if (dragon_arms_id != 0) {
																								if (dragon_arms_duration <= 1) {
																									connection.query('UPDATE dragon SET arms_duration = 0, arms_id = 0 WHERE id = ' + dragon_id, function (err, rows, fields) {
																										if (err) throw err;
																										bot.sendMessage(message.chat.id, "Lo stemma equipaggiato si √® rotto!");
																									});
																								} else {
																									connection.query('UPDATE dragon SET arms_duration = arms_duration-1 WHERE id = ' + dragon_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																							}

																							connection.query('UPDATE dragon_top_status SET wait_time = "' + dragon_time + '", is_dummy = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							var d = new Date();
																							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																							if (is_dummy == 0) {
																								connection.query('INSERT INTO dragon_top_log (player_id, dragon_id, enemy_player_id, enemy_dragon_id, time, win, note) VALUES (' + player_id + ',' + dragon_id + ',' + player_id2 + ',' + enemy_dragon_id + ',"' + long_date + '",2,"Battaglia")', function (err, rows, fields) {
																									if (err) throw err;
																								});
																							} else if (is_dummy == 1) {
																								connection.query('DELETE FROM dragon_top_dummy WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
																									if (err) throw err;
																									connection.query('DELETE FROM dragon_dummy WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								});
																							}
																						});
																					});
																				});
																			});
																		});
																	});
																	return;
																}

																connection.query('UPDATE ' + target_table_dragon + ' SET life = life-' + damage + ' WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
																	if (err) throw err;
																	if (enemy_poison_dmg > 0) {
																		bot.sendMessage(message.chat.id, "Per avvelenamento il nemico ha perso " + formatNumber(enemy_poison_dmg) + " hp!");
																		damage -= enemy_poison_dmg;
																	}

																	if ((skip == 1) && (conf_dmg == 0)) {
																		if (ice > 0)
																			bot.sendMessage(message.chat.id, "Il tuo drago ha saltato il turno per congelamento!");
																		else if (wait_dmg > 0)
																			bot.sendMessage(message.chat.id, "Il tuo drago salta il turno! Si sta caricando!", kbNext);
																		else
																			bot.sendMessage(message.chat.id, "Il tuo drago ha saltato il turno!");
																	} else if (damage <= 0)
																		bot.sendMessage(message.chat.id, "Il tuo drago non ha inflitto alcun danno all'avversario!", kbNext);
																	else {
																		var extra = "";
																		if (moveCrit1 == 1)
																			extra = " E' superefficace!";
																		var moveEffect = ""
																		if (dmg_boost > 0)
																			moveEffect = "Aumentati grazie al potere della mossa di fuoco!\n";
																		if (enemy_protection > 0)
																			moveEffect = "Ridotti a causa della protezione!\n";
																		if (high_dmg > 0) {
																			if (over == 0)
																				moveEffect += "Dei quali " + formatNumber(high_dmg) + " per colpo pesante!\n";
																			else
																				moveEffect += "Dei quali " + formatNumber(high_dmg) + " per colpo pesante (con i quali hai superato la difesa)!\n";
																		}
																		if (enemy_conf_dmg > 0)
																			moveEffect += "Dei quali " + formatNumber(enemy_conf_dmg) + " derivano dall'essersi colpito da solo!\n";
																		bot.sendMessage(message.chat.id, "Il tuo drago ha inflitto *" + formatNumber(damage) + "* danni" + crit_txt + " all'avversario con " + dragonSymId(move_type) + " " + move_name + "!" + extra + "\n" + moveEffect, mark);
																	}

																	connection.query('UPDATE dragon SET life = life-' + enemy_damage + ' WHERE id = ' + dragon_id, function (err, rows, fields) {
																		if (err) throw err;
																		if (poison_dmg > 0) {
																			bot.sendMessage(message.chat.id, "Per avvelenamento hai perso " + formatNumber(poison_dmg) + " hp!");
																			enemy_damage -= poison_dmg;
																		}

																		if ((enemySkip == 1) && (enemy_conf_dmg == 0)) {
																			if (enemy_ice > 0)
																				bot.sendMessage(message.chat.id, "Il drago avversario salta il turno per congelamento!", kbNext);
																			else if (enemy_wait_dmg > 0)
																				bot.sendMessage(message.chat.id, "Il drago avversario salta il turno! Si sta caricando!", kbNext);
																			else
																				bot.sendMessage(message.chat.id, "Il drago avversario salta il turno!", kbNext);
																		} else if (enemy_damage <= 0) {
																			bot.sendMessage(message.chat.id, "Il drago avversario non ha inflitto alcun danno!", kbNext);
																		} else {
																			var extra = "";
																			if (moveCrit2 == 1)
																				extra = " E' superefficace!";
																			var moveEffect = ""
																			if (enemy_dmg_boost > 0)
																				moveEffect = "Aumentati grazie al potere della mossa di fuoco!\n";
																			if (protection > 0)
																				moveEffect = "Ridotti a causa della protezione!\n";
																			if (enemy_high_dmg > 0) {
																				if (enemy_over == 0)
																					moveEffect += "Dei quali " + formatNumber(enemy_high_dmg) + " per colpo pesante!\n";
																				else
																					moveEffect += "Dei quali " + formatNumber(enemy_high_dmg) + " per colpo pesante (con i quali ha superato la difesa)!\n";
																			}
																			if (conf_dmg > 0)
																				moveEffect += "Dei quali " + formatNumber(conf_dmg) + " derivano dall'esserti colpito da solo!\n";
																			bot.sendMessage(message.chat.id, "Il drago avversario ti infligge " + formatNumber(enemy_damage) + " danni" + enemy_crit_txt + " con " + dragonSymId(enemy_move_type) + " " + enemy_move_name + "!" + extra + "\n" + moveEffect, kbNext);
																		}

																		if ((dragon_scale + 1) <= 5) {
																			connection.query('UPDATE dragon SET scale = ' + (dragon_scale + 1) + ' WHERE id = ' + dragon_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																		if ((enemy_dragon_scale + 1) <= 5) {
																			connection.query('UPDATE ' + target_table_dragon + ' SET scale = ' + (enemy_dragon_scale + 1) + ' WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		};
																	});
																});
															});
														});
													});
												});
											};
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/team/i, function (message) {

	if (message.text.toLowerCase().indexOf("paga") != -1)
		return;

	if (message.text.toLowerCase().indexOf("del team") != -1)
		return;

	if (message.text.toLowerCase().indexOf("membri") != -1)
		return;

	connection.query('SELECT account_id, holiday, id, money, team_time FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		helpMsg(message.chat.id, player_id, 4);

		var new_price = 1000000;
		var price_drop = 0;
		var price_drop_msg = "";
		var n = new Date().getDay()
		var n2 = new Date().getDate();

		if (rows[0].team_time != null) {
			var d = new Date(rows[0].team_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['Liste Membri', 'Hall of Fame'], ['Torna al menu']]
				}
			};

			bot.sendMessage(message.chat.id, "Non puoi ancora entrare in un team, ne hai appena lasciato uno. Attendi fino alle " + long_date, kb);
			return;
		}

		if (n == 0) {
			price_drop = 1;
			new_price = 750000;
			price_drop_msg = "*SOLO OGGI* ";
		}

		connection.query('SELECT team.id As team_id, name, slogan, mission_count, kill_num, boost_id, point, point_spent, craft_count, players, details, max_players, boss_count, level, closed, mission_week_count, craft_week_count FROM team, team_player WHERE team.id = team_player.team_id AND player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [['Fonda nuovo'], ['Entra in uno esistente'], ['Liste Membri', 'Hall of Fame'], ['Torna al menu']]
					}
				};

				bot.sendMessage(message.chat.id, "I Team sono dei gruppi di battaglia utili per affrontare i temibili Assalti e gli Incarichi, puoi crearlo (" + price_drop_msg + "ti coster√† " + formatNumber(new_price) + " ¬ß) oppure entrare in uno gi√† esistente!", kb);
			} else {
				var team_id = rows[0].team_id;
				var team_name = rows[0].name;
				var team_slogan = rows[0].slogan;
				var team_mission_count = rows[0].mission_count;
				var team_mission_week_count = rows[0].mission_week_count;
				var team_kill_num = rows[0].kill_num;
				var team_boost_id = rows[0].boost_id;
				var team_point = rows[0].point;
				var team_point_spent = rows[0].point_spent;
				var team_craft = rows[0].craft_count;
				var team_week_craft = rows[0].craft_week_count;
				var team_players = rows[0].players;
				var team_details = rows[0].details;
				var team_max_players = rows[0].max_players;
				var team_boss_count = rows[0].boss_count;
				var team_level = rows[0].level;
				var team_closed = rows[0].closed;

				connection.query("SELECT completed, lost FROM assault WHERE team_id = " + team_id, function (err, rows, fields) {
					if (err) throw err;

					var team_assault_completed = 0;
					var team_assault_lost = 0;
					if (Object.keys(rows).length > 0) {
						team_assault_completed = rows[0].completed;
						team_assault_lost = rows[0].lost;
					}

					connection.query('SELECT T2.name, T2.players FROM team T1 JOIN team T2 ON T1.child_team = T2.id WHERE T1.id = ' + team_id, function (err, rows, fields) {
						if (err) throw err;

						var childName = "";
						var childPlayers = 0;
						if (Object.keys(rows).length > 0) {
							childName = rows[0].name;
							childPlayers = rows[0].players;
						}

						connection.query('SELECT T2.name, T2.players FROM team T1 JOIN team T2 ON T1.id = T2.id WHERE T1.child_team = ' + team_id, function (err, rows, fields) {
							if (err) throw err;

							var motherName = "";
							var motherPlayers = 0;
							if (Object.keys(rows).length > 0) {
								motherName = rows[0].name;
								motherPlayers = rows[0].players;
							}

							connection.query('SELECT team_player.role, team_player.player_id, player.nickname FROM team_player, player WHERE player.id = team_player.player_id AND team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								var isAdmin = 0;
								var isViceAdmin = 0;

								if (rows[0].role == 1)
									isAdmin = 1;
								else if (rows[0].role == 2)
									isViceAdmin = 1;

								connection.query('SELECT player.id, player.nickname FROM team_player, player WHERE player.id = team_player.player_id AND team_id = ' + team_id + ' AND role = 1', function (err, rows, fields) {
									if (err) throw err;

									var adminId = 0;
									var adminName = "";

									if (Object.keys(rows).length == 0) {
										connection.query('UPDATE team_player SET role = 1 WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
										adminName = message.from.username;
										adminId = player_id;
									} else {
										adminName = rows[0].nickname;
										adminId = rows[0].id;
									}

									connection.query('SELECT P.id As player_id, P.nickname, IF(DS.player_id IS NULL, 0, 1) As in_dungeon, DS.room_id, (SELECT rooms FROM dungeon_list WHERE id = DS.dungeon_id) As rooms, PP.party_id, C.name As class_name, TP.*, L.time, P.rank, P.weapon, P.mission_time_end, P.travel_time_end, P.cave_time_end, P.holiday, P.ability, P.reborn, P.craft_count, P.craft_week, P.money, P.life, P.total_life, P.exp, P.mission_party, APP.place_id, D.name As dragon_name, D.type As dragon_type, D.level As dragon_level FROM last_command L, team_player TP LEFT JOIN mission_team_party_player PP ON TP.player_id = PP.player_id LEFT JOIN dungeon_status DS ON TP.player_id = DS.player_id LEFT JOIN assault_place_player_id APP ON APP.player_id = TP.player_id LEFT JOIN dragon D ON D.player_id = TP.player_id, player P, team, class C WHERE P.class = C.id AND team.id = TP.team_id AND TP.player_id = P.id AND TP.team_id = ' + team_id + ' AND P.account_id = L.account_id GROUP BY nickname ORDER BY TP.role = 0, TP.role, P.reborn DESC, P.exp DESC', function (err, rows, fields) {
										if (err) throw err;

										if (team_max_players == 19) {
											connection.query('UPDATE team SET max_players = 20 WHERE id = ' + team_id, function (err, rows, fields) {
												if (err) throw err;
											});
										}

										var iKeys = [];

										var user_text = "\n\n\n<b>Membri nel team:</b>\n\n";
										var user_text2 = "";
										var partial_text = "\n\n<b>Attivit√† membri:</b>\n\n";

										var stars = "";
										var lev = 0;
										var weapon_d = 0;
										var dragon_claws = 0;
										var act = "";
										var d = new Date();
										var long_date = "";
										var last = "";
										var suspended = "";
										var nickname = "";
										var class_name = "";
										var life = 0;
										var total_life = 0;
										var craft_count = 0;
										var craft_count_week = 0;
										var money = 0;
										var ability = 0;
										var base_text = "";
										var party = "";
										var party_line = "";
										var assault_line = "";
										var dragon_line = "";
										var admin = "";
										var in_dungeon = "";

										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											stars = rebSym(rows[i].reborn);

											admin = "üë§ ";
											if (rows[i].role == 1)
												admin = "üëë ";
											else if (rows[i].role == 2)
												admin = "üî∞ ";

											lev = Math.floor(rows[i].exp / 10);

											act = "";
											if (rows[i].mission_time_end != null) {
												d = new Date(rows[i].mission_time_end);
												long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
												act = "üèÉüèΩ Missione (" + long_date + ")";
											} else if (rows[i].travel_time_end != null) {
												d = new Date(rows[i].travel_time_end);
												long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
												act = "üèÉ Viaggio (" + long_date + ")";
											} else if (rows[i].cave_time_end != null) {
												d = new Date(rows[i].cave_time_end);
												long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
												act = "üèÉüèΩ Cava (" + long_date + ")";
											} else if (rows[i].holiday == 1)
												act = "‚õ± Vacanza";
											else if (rows[i].mission_party == 1)
												act = "üèÉ Incarico";

											last = "Nascosto";
											if (rows[i].role == 0) {
												d = new Date(rows[i].time);
												last = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
											}

											suspended = "";
											if (rows[i].suspended == 1)
												suspended = " üí¨";

											assault_line = "";
											if (rows[i].place_id != null) {
												var place_name = connection_sync.query("SELECT name FROM assault_place WHERE id = " + rows[i].place_id);
												assault_line = "üê∫ Assegnato a " + assaultEmojiList[rows[i].place_id-1] + " " + place_name[0].name + "\n";
											}

											dragon_line = "";
											if (rows[i].dragon_name != null)
												dragon_line = "üêâ " + rows[i].dragon_name + " " + rows[i].dragon_type + " (Lv " + rows[i].dragon_level + ")" + dragonSym(rows[i].dragon_type) + "\n";

											var act_line = "";
											if ((act != "") || (suspended != ""))
												act_line = act + suspended + "\n";

											nickname = rows[i].nickname;
											class_name = rows[i].class_name;
											life = rows[i].life;
											total_life = rows[i].total_life;
											craft_count = rows[i].craft_count;
											craft_count_week = rows[i].craft_week;
											money = rows[i].money;
											ability = rows[i].ability;
											rank = rows[i].rank;
											party = rows[i].party_id;

											party_line = "";
											if (party != null)
												party_line = "üë• Party " + party + "\n";

											if (rows[i].in_dungeon == 0)
												in_dungeon = "Non in dungeon";
											else {
												if (rows[i].room_id > rows[i].rooms)
													in_dungeon = "Dungeon (Stanza finale)";
												else
													in_dungeon = "Dungeon (" + rows[i].room_id + "/" + rows[i].rooms + ")";
											}

											base_text = admin + "<i>" + nickname + "</i> " + stars + " " + lev + " \n" +
												"üèπ " + class_name + " " + classSym(class_name) + "\n" +
												act_line +
												dragon_line +
												party_line +
												"üïê " + last + "\n" +
												assault_line +
												"üõ° " + in_dungeon + ", " + formatNumber(rank) + " rango\n" +
												"‚ù§Ô∏è " + formatNumber(life) + "/" + formatNumber(total_life) + " hp\n" +
												"üì¶ " + formatNumber(craft_count) + " PC, " + formatNumber(craft_count_week) + " settimanali\n" +
												"üí∞ " + formatNumber(money) + " ¬ß\n" +
												"üî¶ " + ability + " abilit√†\n\n";

											partial_text += admin + "<i>" + nickname + "</i> " + stars + " " + lev + " \n" + act_line + "\n";

											if (i < 10)
												user_text += base_text;
											else
												user_text2 += base_text;
										}

										if ((isAdmin == 1) || (isViceAdmin == 1)) {
											// ADMIN
											var show_type = "Aperto";
											var show_details = "Non Visibili";
											if (checkDragonTopOn == 1)
												iKeys.push(["Assalto üê∫", "Incarichi üìú"]);
											else
												iKeys.push(["Incarichi üìú"]);
											iKeys.push(["Mappe di Lootia üó∫ (Test)"]);
											iKeys.push(["Dettaglio Membri üë•"]);
											iKeys.push(["Cassaforte üí∞", "Magazzino üì¶"]);
											iKeys.push(["Hall of Fame üèÜ", "Liste Membri üîé"]);
											iKeys.push(["Aumenta Posti ‚úö", "Accademia üè£"]);
											iKeys.push(["Potenziamenti Anima ü¶ã"]);
											iKeys.push(["Cambia Admin üëë", "Cambia Nome üí¨"]);
											if ((isAdmin == 1) && (isViceAdmin == 0)) {
												iKeys.push(["Slogan üìÉ", "Pergamena üìÑ"]);
												iKeys.push(["Sciogli ‚ùå"]);
											}
											if ((isAdmin == 0) && (isViceAdmin == 1))
												iKeys.push(["Lascia ‚ùå"]);
											iKeys.push(["Limite üö´", "Notifiche üí§"]);
											if (team_closed == 1)
												show_type = "Chiuso";
											if (team_details == 1)
												show_details = "Visibili";
											iKeys.push(["Tipo: " + show_type, "Dettagli: " + show_details]);
											iKeys.push(["Torna al menu"]);
										} else {
											// UTENTE
											if (checkDragonTopOn == 1)
												iKeys.push(["Assalto üê∫", "Incarichi üìú"]);
											else
												iKeys.push(["Incarichi üìú"]);
											iKeys.push(["Mappe di Lootia üó∫ (Test)"]);
											if (team_details == 1)
												iKeys.push(["Dettaglio Membri üë•"]);
											iKeys.push(["Cassaforte üí∞", "Magazzino üì¶"]);
											iKeys.push(["Hall of Fame üèÜ", "Notifiche üí§"]);
											iKeys.push(["Potenziamenti Anima ü¶ã"]);
											iKeys.push(["Liste Membri üîé", "Lascia ‚ùå"]);
											iKeys.push(["Torna al menu"]);
										}

										var kb = {
											parse_mode: "HTML",
											reply_markup: {
												resize_keyboard: true,
												keyboard: iKeys
											}
										};

										var boost_name = "";
										if (team_boost_id == 1)
											boost_name = " (Temporaneo: Unione Fatale)";
										else if (team_boost_id == 2)
											boost_name = " (Temporaneo: Bottino Ricco)";
										else if (team_boost_id == 3)
											boost_name = " (Temporaneo: Formazione Impenetrabile)";
										else if (team_boost_id == 4)
											boost_name = " (Temporaneo: Scrigni Redditizi)";

										var text = "üèÜ <b>" + team_name + "</b>\n";
										if (team_slogan != null)
											text += "üìÉ <i>" + team_slogan + "</i>\n";
										text += "üë• " + team_players + "/" + team_max_players + "\n";
										text += "üêó " + formatNumber(team_boss_count) + " Boss Sconfitti\n";
										text += "üì¶ " + formatNumber(team_craft) + " Punti Creazione (" + formatNumber(team_week_craft) + " settimanali)\n";
										text += "üìä " + team_kill_num + " Scalate\n";
										text += "üê∫ " + team_assault_completed + "/" + team_assault_lost + " Assalti\n";
										text += "üìú " + formatNumber(team_mission_count) + " Incarichi (" + formatNumber(team_mission_week_count) + " settimanali)\n";
										text += "ü¶ã " + formatNumber(team_point) + "/" + formatNumber(team_point_spent) + boost_name + "\n";

										if (isAdmin == 1)
											text += "Usa '/messaggio testo' per scrivere al team\n";

										if (childName != "")
											text += "\nAccademia " + childName + " (+5 ü¶ã/boss)";

										if (motherName != "") {
											if (childName == "")
												text += "\n";
											text += "\nTeam Madre " + motherName;
										}

										if ((isAdmin == 1) || (isViceAdmin == 1) || (team_details == 1))
											text += partial_text;

										bot.sendMessage(message.chat.id, text, kb).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.indexOf("Dettaglio Membri") != -1) {
													var extra = 0;
													var text = "";

													if (isAdmin == 1) {
														var kb = {
															parse_mode: "HTML",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [['Gestisci Membri', 'Torna al team'], ['Torna al menu']]
															}
														};
													} else {
														var kb = {
															parse_mode: "HTML",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [['Torna al team'], ['Torna al menu']]
															}
														};
													}

													if ((isAdmin == 1) || (isViceAdmin == 1) || (team_details == 1)) {
														text += user_text;
														extra = 1;
														bot.sendMessage(message.chat.id, text, kb);
														if ((team_players >= 11) && (extra == 1)) {
															setTimeout(function () {
																bot.sendMessage(message.chat.id, user_text2, kb);
															}, 500);
														}
													} else
														bot.sendMessage(message.chat.id, "Non sei abilitato a visualizzare la lista dei membri", team);
												}
											};
										});
									});
								});
							});
						});
					});
				});
			}
		});
	});
});

bot.onText(/^incarichi|torna agli incarichi/i, function (message) {
	connection.query('SELECT id, holiday, gender, travel_id, cave_id, mission_id, mission_special_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		var travel_id = rows[0].travel_id;
		var cave_id = rows[0].cave_id;
		var mission_id = rows[0].mission_id;
		var mission_special_id = rows[0].mission_special_id;

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT mission_day_count FROM team WHERE id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
				var mission_day_count = rows[0].mission_day_count;

				connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					var isAdmin = 0;

					if ((rows[0].role == 1) || (rows[0].role == 2))
						isAdmin = 1;

					connection.query('SELECT P1.assigned_to FROM mission_team_party P1, mission_team_party_player P2 WHERE P1.team_id = P2.team_id AND P1.party_id = P2.party_id AND P2.player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var my_assigned_to = 0;
						if (Object.keys(rows).length > 0)
							my_assigned_to = rows[0].assigned_to;

						connection.query('SELECT T.id, T.parts, T.title, T.description, T.duration, M.party_id, T.requirement_id, M.part_id, T.mandator, T.daynight FROM mission_team_list T LEFT JOIN mission_team_party M ON T.id = M.assigned_to AND M.team_id = ' + team_id + ' WHERE T.ready = 1 ORDER BY T.progress_num ASC, T.duration ASC', function (err, rows, fields) {
							if (err) throw err;

							var iKeys = [];
							var assigned = "";
							var text = "Benvenut" + gender_text + " negli <b>Incarichi</b> üìú!\nIl team pu√≤ iniziare al massimo " + missionDayLimit + " incarichi al giorno (" + (missionDayLimit-mission_day_count) + " rimanenti), forma un party per inviarlo in missione. A maggiori difficolt√† si ottengono migliori ricompense!\nIncarichi disponibili per il tuo team:\n\n";
							var progress = "";
							var my_assigned = "";
							var daynight = "";
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].id == my_assigned_to)
									my_assigned = "üìç";
								else
									my_assigned = "";

								if (rows[i].party_id != null) {
									assigned = " ‚úÖ (Assegnato al Party " + rows[i].party_id + ") " + my_assigned;
									progress = "\nProgresso: " + rows[i].part_id + "/" + rows[i].parts;
								} else {
									assigned = " üö´ (Non assegnato)";
									progress = "\nScelte: " + rows[i].parts;
								}

								if (rows[i].daynight == 1)
									daynight = "\nAvviabile solo di giorno ‚òÄÔ∏è";
								else if (rows[i].daynight == 2)
									daynight = "\nAvviabile solo di notte üåô";
								else
									daynight = "";

								var rowsCnt = connection_sync.query('SELECT AVG(complex) As cnt FROM mission_team_requirement WHERE requirement_id = ' + rows[i].requirement_id);
								text += "<b>" + rows[i].title + "</b>" + assigned + "\nMandante: " + rows[i].mandator + "\n<i>" + truncate(rows[i].description, 100) + "</i>\nDurata: " + toTime(rows[i].duration*(rows[i].parts+1)) + " (" + toTime(rows[i].duration) + "/scelta) ‚è≥\nDifficolt√†: " + Math.round(rowsCnt[0].cnt*10)/10 + "/10 üìà" + daynight + progress + " üó∫\n\n";
								iKeys.push([rows[i].title]);
							}

							text += "La notte dura dalle 23:00 alle 9:00.";

							if (isAdmin == 1)
								iKeys.push(["Gestisci Party üë•", "Il mio Party üë•"], ["Torna al team", "Torna al menu"])
							else
								iKeys.push(["Il mio Party üë•"], ["Torna al team", "Torna al menu"])

							var kb = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: iKeys
								}
							};

							var kbBack = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Torna ai party"], ["Torna al team"]]
								}
							};

							var kbBack2 = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Torna agli incarichi"], ["Torna al team"]]
								}
							};

							var kbBack3 = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Torna agli incarichi"], ["Torna al team"], ["Torna al menu"]]
								}
							};

							var kbBack4 = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Torna ai party"], ["Torna agli incarichi"], ["Torna al team"]]
								}
							};

							bot.sendMessage(message.chat.id, text, kb).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if ((answer.text.toLowerCase().indexOf("il mio party") != -1) || (answer.text.toLowerCase().indexOf("gestisci party") != -1) || (answer.text == "Torna al team") || (answer.text == "Torna al menu"))
										return;
									else {

										if (teamMission == 0) {
											bot.sendMessage(message.chat.id, "L'ufficio incarichi non ha ancora terminato le nuove missioni, torna tra poco!", kbBack2);
											return;
										}

										connection.query('SELECT id, title, description, duration, parts, ready, daynight, progress_num FROM mission_team_list WHERE title = "' + answer.text + '"', function (err, rows, fields) {
											if (err) throw err;
											if (Object.keys(rows).length == 0) {
												bot.sendMessage(message.chat.id, "Incarico non valido, riprova", kbBack);
												return;
											}
											if (rows[0].ready == 0) {
												bot.sendMessage(message.chat.id, "Questo incarico non √® ancora pronto, torna tra poco!", kbBack2);
												return;
											}
											var mission_title = rows[0].title;
											var mission_text = rows[0].description;
											var mission_id = rows[0].id;
											var mission_duration = rows[0].duration;
											var mission_parts = rows[0].parts;
											var mission_progress = rows[0].progress_num;
											var daynight = rows[0].daynight;

											connection.query('SELECT type, value, member FROM mission_team_requirement WHERE requirement_id = ' + mission_id, function (err, req, fields) {
												if (err) throw err;
												var text = "Requisiti per l'incarico:\n";
												var textReq = "";
												var type = "";
												var member = "";
												var value = 0;
												var reqLen = Object.keys(req).length;

												for (var i = 0; i < reqLen; i++) {

													value = req[i].value;

													if (req[i].type == "min_level")
														type = "Livello minimo (assoluto): ";
													if (req[i].type == "max_level")
														type = "Livello massimo (assoluto): ";
													else if (req[i].type == "reborn") {
														type = "Rinascita minima: ";
														value -= 1;
													} else if (req[i].type == "members")
														type = "Membri minimi: ";
													else if (req[i].type == "class") {
														type = "Vocazione: ";
														value = idToClass(value);
													} else if (req[i].type == "craft")
														type = "Punti creazione: ";
													else if (req[i].type == "rank")
														type = "Rango: ";
													else if (req[i].type == "team_boss")
														type = "Boss uccisi (team): ";
													else if (req[i].type == "team_compl")
														type = "Assalti (team): ";
													else if (req[i].type == "dragon_lev")
														type = "Livello minimo drago: ";
													else if (req[i].type == "trasmo") {
														type = "Trasmogrificazione sbloccata: ";
														value = "Sbloccata";
													} else if (req[i].type == "mission")
														type = "Missioni completate: ";

													if (req[i].type.indexOf("team") != -1) {
														member = " per il team";
													} else {
														if (req[i].member == "all")
															member = " per tutti i membri del party";
														else if (req[i].member > 1)
															member = " per almeno " + req[i].member + " membri del party";
														else if (req[i].member == 1)
															member = " per almeno 1 membro del party";
													}

													text += type + value + member + "\n";
													textReq += "> " + type + value + member + "\n";
												}

												connection.query('SELECT party_id, team_id, part_id, mission_start, mission_time_end, mission_time_limit FROM mission_team_party WHERE team_id = ' + team_id + ' AND assigned_to = ' + mission_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														var textMiss = "";
														var part_id = rows[0].part_id;
														var start_date = new Date(rows[0].mission_start);
														var part_date = new Date(rows[0].mission_time_end);
														var end_date = new Date(rows[0].mission_time_limit);

														connection.query('SELECT P.nickname FROM player P, mission_team_party_player M WHERE P.id = M.player_id AND M.team_id = ' + team_id + ' AND M.party_id = ' + rows[0].party_id, function (err, rows, fields) {
															if (err) throw err;

															var nickname_list = "";
															for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																nickname_list += rows[i].nickname + ", ";
															}
															nickname_list = nickname_list.slice(0, -2);

															textMiss += "<i>" + mission_title + "</i>\n";
															textMiss += "<b>Partecipanti</b>: " + nickname_list + "\n";
															textMiss += "<b>Requisiti</b>:\n" + textReq;
															textMiss += "<b>Progresso</b>: " + part_id + "/" + mission_parts + "\n";
															textMiss += "<b>Inizio</b>: " + addZero(start_date.getHours()) + ":" + addZero(start_date.getMinutes()) + " del " + addZero(start_date.getDate()) + "/" + addZero(start_date.getMonth() + 1) + "\n";
															textMiss += "<b>Prossima parte</b>: " + addZero(part_date.getHours()) + ":" + addZero(part_date.getMinutes()) + "\n";
															textMiss += "<b>Scadenza</b>: " + addZero(end_date.getHours()) + ":" + addZero(end_date.getMinutes()) + " del " + addZero(end_date.getDate()) + "/" + addZero(end_date.getMonth() + 1);

															bot.sendMessage(message.chat.id, textMiss, kbBack2);
														});
														return;
													} else if (isAdmin == 0) {
														bot.sendMessage(message.chat.id, "Solo l'amministratore pu√≤ assegnare un Incarico", kbBack2);
														return;
													}

													connection.query('SELECT id, party_id FROM mission_team_party WHERE assigned_to IS NULL AND team_id = ' + team_id, function (err, rows, fields) {
														if (err) throw err;

														var iKeys = [];
														if (Object.keys(rows).length > 0) {
															for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																iKeys.push(["Assegna a Party " + rows[i].party_id]);
														}
														iKeys.push(["Torna agli incarichi"]);
														iKeys.push(["Torna al menu"]);

														var kb2 = {
															parse_mode: "HTML",
															reply_markup: {
																resize_keyboard: true,
																keyboard: iKeys
															}
														};

														connection.query('SELECT mission_day_count FROM team WHERE id = ' + team_id, function (err, rows, fields) {
															if (err) throw err;
															if (rows[0].mission_day_count >= missionDayLimit) {
																bot.sendMessage(message.chat.id, "Hai raggiunto il limite giornaliero di incarichi", kbBack);
																return;
															}

															if (daynight == 1) {
																var d = new Date();
																if ((d.getHours() < 9) || (d.getHours() > 22)) {
																	bot.sendMessage(message.chat.id, "Questo incarico √® avviabile solo di giorno", kbBack2);
																	return;
																}
															} else if (daynight == 2) {
																var d = new Date();
																if ((d.getHours() > 9) && (d.getHours() < 22)) {
																	bot.sendMessage(message.chat.id, "Questo incarico √® avviabile solo di notte", kbBack2);
																	return;
																}
															}

															bot.sendMessage(message.chat.id, text, kb2).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if ((answer.text == "Torna agli incarichi") || (answer.text == "Torna al menu")) {
																		return;
																	}

																	var split = answer.text.split(" ");
																	var party_id = parseInt(split[3]);

																	if ((party_id == undefined) || (isNaN(party_id))) {
																		bot.sendMessage(message.chat.id, "Party non valido, riprova", kbBack);
																		return;
																	}

																	connection.query('SELECT id, party_id, progress FROM mission_team_party WHERE assigned_to IS NULL AND team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
																		if (err) throw err;

																		if (Object.keys(rows).length == 0) {
																			bot.sendMessage(message.chat.id, "Party non valido, riprova", kbBack);
																			return;
																		}

																		if (mission_progress > 0) {
																			if ((rows[0].progress+1) < mission_progress) {
																				bot.sendMessage(message.chat.id, "Il party deve prima completare l'incarico collegato precedente a quello selezionato!", kbBack);
																				return;
																			} else if ((rows[0].progress+1) > mission_progress) {
																				bot.sendMessage(message.chat.id, "Il party deve prima completare l'incarico collegato successivo a quello selezionato!", kbBack);
																				return;
																			}
																		}

																		connection.query('SELECT boss_count, kill_num FROM team WHERE id = ' + team_id, function (err, teamRows, fields) {
																			if (err) throw err;

																			connection.query('SELECT mission_team_party_player.player_id, player.chat_id, player.exp, player.reborn, player.craft_count, player.class, player.rank, player.mission_id, player.mission_time_end, player.nickname, player.life, dragon.level, player.cave_id, player.travel_id, player.travel_time_end, player.cave_time_end, player.holiday, player.team_mission_time, player.mission_count FROM mission_team_party_player, player LEFT JOIN dragon ON player.id = dragon.player_id WHERE player.id = mission_team_party_player.player_id AND team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
																				if (err) throw err;
																				var err = 0;
																				var errMsg = "";
																				var partyLen = Object.keys(rows).length;

																				if (partyLen < 3) {
																					bot.sendMessage(message.chat.id, "Puoi avviare un incarico solo con un party composto da 3 o pi√π componenti", kbBack);
																					return;
																				}

																				var reqVal = 0;
																				var reqValMax = 0;

																				var inMiss = "";
																				for (var j = 0; j < partyLen; j++) {
																					if (rows[j].mission_id != 0) {
																						var d = new Date(rows[j].mission_time_end);
																						inMiss += "> " + rows[j].nickname + " fino al " + toDate("it", d) + "\n";
																					}
																				}
																				var inTravel = "";
																				for (var j = 0; j < partyLen; j++) {
																					if (rows[j].travel_id != 0) {
																						var d = new Date(rows[j].travel_time_end);
																						inTravel += "> " + rows[j].nickname + " fino al " + toDate("it", d) + "\n";
																					}
																				}
																				var inCave = "";
																				for (var j = 0; j < partyLen; j++) {
																					if (rows[j].cave_id != 0) {
																						var d = new Date(rows[j].cave_time_end);
																						inCave += "> " + rows[j].nickname + " fino al " + toDate("it", d) + "\n";
																					}
																				}
																				var inHoliday = "";
																				for (var j = 0; j < partyLen; j++) {
																					if (rows[j].holiday != 0)
																						inHoliday += "> " + rows[j].nickname + "\n";
																				}
																				var inCooldown = "";
																				for (var j = 0; j < partyLen; j++) {
																					if (rows[j].team_mission_time != null) {
																						var d = new Date(rows[j].team_mission_time);
																						inCooldown += "> " + rows[j].nickname + " fino al " + toDate("it", d) + "\n";
																					}
																				}

																				if (team_id != 1113) {
																					var inMissTxt = "";
																					if (inMiss != "")
																						inMissTxt = "Membri impegnati in missione:\n" + inMiss + "\n";
																					var inTravelTxt = "";
																					if (inTravel != "")
																						inTravelTxt = "Membri impegnati in viaggio:\n" + inTravel + "\n";
																					var inCaveTxt = "";
																					if (inCave != "")
																						inCaveTxt = "Membri impegnati in cava:\n" + inCave + "\n";
																					var inHolidayTxt = "";
																					if (inHoliday != "")
																						inHolidayTxt = "Membri in vacanza:\n" + inHoliday + "\n";
																					var inCooldownTxt = "";
																					if (inCooldown != "")
																						inCooldownTxt = "Membri in attesa cambio team:\n" + inCooldown + "\n";

																					if ((inMiss != "") || (inTravel != "") || (inCave != "") || (inHoliday != "") || (inCooldown != "")) {
																						bot.sendMessage(message.chat.id, inMissTxt + inTravelTxt + inCaveTxt + inHolidayTxt + inCooldownTxt, kbBack4);
																						return;
																					}
																				}

																				var noHealth = "";
																				for (var j = 0; j < partyLen; j++) {
																					if (rows[j].life == 0)
																						noHealth += "> " + rows[j].nickname + "\n";
																				}

																				if (noHealth != "") {
																					bot.sendMessage(message.chat.id, "Membri non in salute:\n" + noHealth, kbBack);
																					return;
																				}

																				for (var i = 0; i < reqLen; i++) {
																					if (req[i].type == "min_level") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							if (getRealLevel(rows[j].reborn, Math.floor(rows[j].exp / 10)) >= req[i].value)
																								reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Livello minimo non soddisfatto (" + reqVal + " su " + reqValMax + " necessari)";
																						}
																					}
																					if (req[i].type == "max_level") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							if (getRealLevel(rows[j].reborn, Math.floor(rows[j].exp / 10)) <= req[i].value)
																								reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Livello massimo non soddisfatto (" + reqVal + " su " + reqValMax + " necessari)";
																						}
																					}
																					if (req[i].type == "reborn") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							if (rows[j].reborn >= req[i].value)
																								reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Rinascita non soddisfatta (" + reqVal + " su " + reqValMax + " necessari)";
																						}
																					}
																					if (req[i].type == "members") {
																						reqVal = 0;
																						if (partyLen < req[i].value) {
																							err = 1;
																							errMsg = "Membri non soddisfatti (" + partyLen + " su " + req[i].value + " necessari)";
																						}
																					}
																					if (req[i].type == "class") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							if (rows[j].class == req[i].value)
																								reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Vocazione non soddisfatta (" + reqVal + " su " + reqValMax + " necessari)";
																						}
																					}
																					if (req[i].type == "craft") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							if (rows[j].craft_count >= req[i].value)
																								reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Punti creazioni non soddisfatti (" + reqVal + " su " + reqValMax + " necessari)";
																						}
																					}
																					if (req[i].type == "rank") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							if (rows[j].rank >= req[i].value)
																								reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Rango non soddisfatto (" + reqVal + " su " + reqValMax + " necessari)";
																						}
																					}
																					if (req[i].type == "team_boss") {
																						reqVal = 0;
																						if (teamRows[0].boss_count < req[i].value) {
																							err = 1;
																							errMsg = "Uccisioni boss non soddisfatte (" + teamRows[0].boss_count + " su " + req[i].value + " necessari)";
																						}
																					}
																					if (req[i].type == "team_compl") {
																						reqVal = 0;
																						if (teamRows[0].kill_num < req[i].value) {
																							err = 1;
																							errMsg = "Assalti non soddisfatti (" + teamRows[0].kill_num + " su " + req[i].value + " necessari)";
																						}
																					}
																					if (req[i].type == "dragon_lev") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							if (rows[j].level != null)
																								if (rows[j].level >= req[i].value)
																									reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Livello drago non soddisfatto (" + reqVal + " su " + reqValMax + " necessari)";
																						}
																					}
																					if (req[i].type == "trasmo") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							var trasmo = connection_sync.query("SELECT 1 FROM necro_change WHERE player_id = " + rows[j].player_id);
																							if (Object.keys(trasmo).length == 1)
																								reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Trasmogrificazione non soddisfatta (" + reqVal + " su " + reqValMax + " necessari)";
																						}
																					}
																					if (req[i].type == "mission") {
																						reqVal = 0;
																						reqValMax = req[i].member;
																						if (reqValMax == "all")
																							reqValMax = partyLen;
																						for (var j = 0; j < partyLen; j++) {
																							if (rows[j].mission_count >= req[i].value)
																								reqVal++;
																						}
																						if (reqVal < reqValMax) {
																							err = 1;
																							errMsg = "Missioni completate non soddisfatte (" + reqVal + " su " + reqValMax + " necessarie)";
																						}
																					}
																				}

																				if (err == 0) {
																					var d = new Date();
																					d.setSeconds(d.getSeconds() + mission_duration);
																					var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																					var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

																					var d2 = new Date();
																					d2.setSeconds(d2.getSeconds() + (mission_duration*(mission_parts*3)));
																					var long_date2 = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());
																					var short_date2 = addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + " del " + addZero(d2.getDate()) + "/" + addZero(d2.getMonth() + 1);

																					for (var j = 0; j < partyLen; j++) {
																						bot.sendMessage(rows[j].chat_id, "Il tuo party √® stato assegnato all'incarico <b>" + mission_title + "</b> fino alle " + short_date + ", scadr√† alle " + short_date2 + "!\n\n<i>" + mission_text + "</i>\n\nSe non vedi la schermata di votazione dopo il tempo di attesa usa /incarico.", html);
																						connection.query('UPDATE player SET mission_party = 1 WHERE id = ' + rows[j].player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					}

																					connection.query('UPDATE mission_team_party SET wait = 0, part_id = 0, mission_start = "' + toDate("en", new Date()) + '", mission_time_limit = "' + long_date2 + '", mission_time_end = "' + long_date + '", assigned_to = ' + mission_id + ' WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
																						if (err) throw err;
																						bot.sendMessage(message.chat.id, "Party assegnato all'incarico, inizier√† alle " + short_date + "!\nCompletatelo prima delle " + short_date2 + "!", kbBack3);
																					});
																					connection.query('UPDATE team SET mission_day_count = mission_day_count+1 WHERE id = ' + team_id, function (err, rows, fields) {
																						if (err) throw err;
																					});
																				} else
																					bot.sendMessage(message.chat.id, "Errore requisiti: " + errMsg, kbBack2);
																			});
																		});
																	});
																};
															});
														});
													});
												});
											});
										});
									};
								};
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/^il mio party|Esci dal party/i, function (message) {

	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna agli incarichi"], ["Torna al menu"]]
		}
	};

	var kbBack2 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Esci dal party"], ["Torna agli incarichi"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT party_id FROM mission_team_party_player WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Non sei in un party, contatta l'amministratore del team per essere aggiunto", kbBack);
					return;
				}

				var party_id = rows[0].party_id;

				connection.query('SELECT P.id, P.nickname, M.answ_id, M2.assigned_to, M2.wait FROM mission_team_party_player M, mission_team_party M2, player P WHERE M.player_id = P.id AND M2.party_id = M.party_id AND M2.team_id = M.team_id AND M.team_id = ' + team_id + ' AND M.party_id = ' + party_id, function (err, rows, fields) {
					if (err) throw err;

					if (message.text.toLowerCase() == "esci dal party") {
						if (Object.keys(rows).length < 2) {
							bot.sendMessage(message.chat.id, "Puoi uscire dal party solo se c'√® almeno ancora un altro membro", kbBack);
							return;
						}

						if (rows[0].assigned_to != null) {
							bot.sendMessage(message.chat.id, "Puoi uscire dal party solo se non √® in corso un incarico", kbBack);
							return;
						}

						connection.query('DELETE FROM mission_team_party_player WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Sei uscito dal party!", kbBack);
						});

						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].id != player_id)
								bot.sendMessage(message.chat.id, message.from.username + " ha lasciato il tuo party!");
						}

						return;
					}

					var text = "Il tuo Party " + party_id + " √® formato da " + Object.keys(rows).length + " membri:\n\n";
					var voted = "";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].assigned_to != null) {
							if (rows[i].answ_id == 0)
								voted = " ‚ùå";
							else
								voted = " ‚úÖ - Scelta " + rows[i].answ_id;
							if (rows[i].wait == 0)
								voted = " ‚è≥";
						}
						text += "> " + rows[i].nickname + voted + "\n";
					}
					bot.sendMessage(message.chat.id, text, kbBack2);
				});	
			});
		});
	});
});

bot.onText(/^party$|gestisci party|torna ai party/i, function (message) {

	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna agli incarichi"]]
		}
	};

	var kbBack2 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna ai party"]]
		}
	};

	var kbBack3 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna ai party"],["Torna agli incarichi"]]
		}
	};

	var kbYesNo = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Si"], ["Torna ai party"]]
		}
	};

	connection.query('SELECT id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;

				if ((rows[0].role == 1) || (rows[0].role == 2))
					isAdmin = 1;
				else {
					bot.sendMessage(message.chat.id, "Solo l'amministratore o il vice possono gestire i party", kbBack);
					return;
				}

				connection.query('SELECT P.nickname, M1.party_id, M1.assigned_to, L.title, M1.mission_time_end, M1.part_id, L.parts FROM mission_team_party_player M2, player P, mission_team_party M1 LEFT JOIN mission_team_list L ON M1.assigned_to = L.id WHERE M1.team_id = M2.team_id AND M2.player_id = P.id AND M1.party_id = M2.party_id AND M1.team_id = ' + team_id + ' ORDER BY M1.party_id', function (err, rows, fields) {
					if (err) throw err;

					var iKeys = [];
					var assigned = "";
					var text = "";
					var party_id_break = 0;
					if (Object.keys(rows).length > 0) {
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (party_id_break != rows[i].party_id) {
								if (rows[i].assigned_to != null) {
									assigned = " ‚úÖ";
									var d = new Date(rows[i].mission_time_end);
									var time_end = addZero(d.getHours()) + ":" + addZero(d.getMinutes());
									assigned_text = "Assegnato a " + rows[i].title + " fino alle " + time_end + " nella parte " + rows[i].part_id + "/" + rows[i].parts + "\n";
								} else {
									assigned = " üö´";
									assigned_text = "";
								}
								text += "\n\n<b>Party " + rows[i].party_id + "</b>" + assigned + "\n";
								text += assigned_text;
								iKeys.push(["Party " + rows[i].party_id + assigned]);
								party_id_break = rows[i].party_id;
							}
							text += "> " + rows[i].nickname + "\n";
						}
					} else
						text = "\n\nNessun party creato";
					iKeys.push(["Nuovo ‚úö","Torna agli incarichi"]);
					iKeys.push(["Torna al menu"]);

					var kb = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona il party da gestire, non puoi eliminare un party che sta svolgendo un incarico.\nIl simbolo a fianco al numero indica se √® impegnato o meno." + text, kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if ((answer.text == "Torna agli incarichi") || (answer.text == "Torna al menu"))
								return;
							else if (answer.text.toLowerCase().indexOf("party") != -1) {
								var split = answer.text.split(" ");
								var party_id = parseInt(split[1]);

								if (isNaN(party_id)) {
									bot.sendMessage(message.chat.id, "Il party richiesto non √® valido", kbBack);
									return;
								}

								connection.query('SELECT party_id, assigned_to FROM mission_team_party WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0) {
										bot.sendMessage(message.chat.id, "Il party richiesto non esiste", kbBack);
										return;
									}

									var assigned = rows[0].assigned_to;

									connection.query('SELECT P.nickname, M.player_id FROM mission_team_party_player M, player P WHERE M.player_id = P.id AND M.team_id = ' + team_id + ' AND M.party_id = ' + party_id, function (err, rows, fields) {
										if (err) throw err;

										var iKeys = [];

										var text = "Il Party " + party_id + " √® formato da " + Object.keys(rows).length + " membri:\n\n";
										iKeys.push(["Aggiungi membri al party " + party_id]);
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											text += "> " + rows[i].nickname + "\n";
											if (rows[i].player_id != player_id)
												iKeys.push(["Spia: " + rows[i].nickname]);
											iKeys.push(["Escludi: " + rows[i].nickname]);
										}

										iKeys.push(["Elimina ‚ùå", "Annulla Incarico üö´"],["Torna ai party"])

										var kbDel = {
											parse_mode: "HTML",
											reply_markup: {
												resize_keyboard: true,
												keyboard: iKeys
											}
										};

										bot.sendMessage(message.chat.id, text, kbDel).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.indexOf("Elimina") != -1) {

													bot.sendMessage(message.chat.id, "Sei sicuro di voler eliminare il party? Puoi anche usare il comando /elimina", kbYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() == "si") {
																if (assigned != null) {
																	bot.sendMessage(message.chat.id, "Non puoi eliminare un party assegnato ad un incarico!", kbBack);
																	return;
																}

																connection.query('SELECT P.id, P.chat_id FROM player P, mission_team_party_player M WHERE P.id = M.player_id AND M.party_id = ' + party_id + ' AND M.team_id = ' + team_id, function (err, rows, fields) {
																	if (err) throw err;
																	for(i = 0; i < Object.keys(rows).length; i++) {
																		bot.sendMessage(rows[i].chat_id, "Il tuo Party √® stato sciolto dall'amministratore");
																		connection.query("UPDATE player SET mission_party = 0 WHERE id = " + rows[i].id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																	connection.query('DELETE FROM mission_team_report WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('DELETE FROM mission_team_party WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
																		if (err) throw err;
																		connection.query('DELETE FROM mission_team_party_player WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
																			bot.sendMessage(message.chat.id, "Party " + party_id + " eliminato!", kbBack3);
																			return;
																		});
																	});
																});
															}
														}
													});
												} else if (answer.text.indexOf("Annulla") != -1) {
													bot.sendMessage(message.chat.id, "Sei sicuro di voler annullare l'incarico del party?", kbYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() == "si") {
																connection.query('SELECT report_id, assigned_to FROM mission_team_party WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
																	if (err) throw err;

																	if (rows[0].assigned_to == null) {
																		bot.sendMessage(message.chat.id, "Non puoi annullare un incarico se non √® stato assegnato", kbBack);
																		return;
																	}

																	connection.query('SELECT P.id, P.chat_id FROM player P, mission_team_party_player M WHERE P.id = M.player_id AND M.party_id = ' + party_id + ' AND M.team_id = ' + team_id, function (err, rows, fields) {
																		if (err) throw err;
																		for(i = 0; i < Object.keys(rows).length; i++) {
																			bot.sendMessage(rows[i].chat_id, "L'incarico √® stato annullato dall'amministratore del team! Tutto il party torna al villaggio...");
																			connection.query('UPDATE player SET mission_party = 0 WHERE id = ' + rows[i].id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																	});

																	bot.sendMessage(message.chat.id, "Incarico annullato!", kbBack3);

																	connection.query('UPDATE team SET mission_day_count = mission_day_count-1 WHERE id = ' + team_id, function (err, rows, fields) {
																		if (err) throw err;
																	});

																	// Pulizia (aggiorna anche l'altra)
																	connection.query('UPDATE mission_team_party SET part_id = 0, assigned_to = NULL, report_id = NULL, mission_start = NULL, mission_time_end = NULL, wait = 0, mission_time_limit = NULL, text_user = NULL WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE mission_team_party_player SET answ_id = 0 WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	var report_id = rows[0].report_id;
																	if (report_id != null) {
																		connection.query('DELETE FROM mission_team_report WHERE team_id = ' + team_id + ' AND party_id = ' + party_id + ' AND report_id = ' + report_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																});
															}
														}
													});
												}
											}
										});
									});
								});
							} else if (answer.text.indexOf("Nuovo") != -1) {
								connection.query('SELECT P.nickname FROM player P, team_player T WHERE P.id NOT IN (SELECT player_id FROM mission_team_party_player) AND P.id = T.player_id AND T.team_id = ' + team_id, function (err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0) {
										bot.sendMessage(message.chat.id, "Tutti i membri del team sono gi√† in un party, eliminane prima di crearne uno nuovo", kbBack3);
										return;
									}

									if (team_id != 1113) {
										if (Object.keys(rows).length < 3) {
											bot.sendMessage(message.chat.id, "Non ci sono abbastanza membri disponibili per formare un party", kbBack3);
											return;
										}
									}

									var text = "Membri disponibili:\n";
									for (var i = 0, len = Object.keys(rows).length; i < len; i++)
										text += "> <code>" + rows[i].nickname + "</code>\n";

									text += "\nScrivi la lista dei membri per il party separati da virgola, possono essere composti massimo da 5 giocatori, minimo da 3.";

									bot.sendMessage(message.chat.id, text, kbBack2).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text == "Torna ai party")
												return;

											var split = answer.text.split(",");
											var cnt = split.length;

											if (team_id != 1113) {
												if (cnt < 3) {
													bot.sendMessage(message.chat.id, "Un party deve essere composto almeno da 3 persone", kbBack3);
													return;
												}
												if (cnt > 5) {
													bot.sendMessage(message.chat.id, "Un party pu√≤ essere composto massimo da 5 persone", kbBack3);
													return;
												}
											}

											connection.query('SELECT party_id FROM mission_team_party WHERE team_id = ' + team_id, function (err, rows, fields) {
												if (err) throw err;

												var idList = [];
												for (var i = 0, len = Object.keys(rows).length; i < len; i++)
													idList.push(rows[i].party_id);

												var miss = 1;
												if (Object.keys(rows).length > 0)
													miss = findMissing(idList);

												var tot = 0;
												var idArray = [];
												var nickArray = [];
												var chatIdArray = [];

												for (var i = 0; i < cnt; i++)
													nickArray[i] = split[i].trim().toLowerCase();	// per confronto se pi√π uguali

												if (hasDuplicates(nickArray)) {
													bot.sendMessage(message.chat.id, "Non puoi inserire lo stesso membro pi√π di una volta", kbBack3);
													return;
												}

												for (var i = 0; i < cnt; i++) {
													var rows = connection_sync.query('SELECT P.id, P.chat_id FROM player P WHERE P.nickname = "' + nickArray[i] + '"');
													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, nickArray[i] + " non esiste", kbBack3);
														return;
													}
													idArray.push(rows[0].id);
													chatIdArray.push(rows[0].chat_id);
												}

												for (var i = 0; i < cnt; i++) {
													rows = connection_sync.query('SELECT id FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + idArray[i]);
													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, nickArray[i] + " non √® un membro del tuo team", kbBack3);
														return;
													}
												}

												for (var i = 0; i < cnt; i++) {
													rows = connection_sync.query('SELECT id FROM mission_team_party_player WHERE player_id = ' + idArray[i]);
													if (Object.keys(rows).length > 0) {
														bot.sendMessage(message.chat.id, nickArray[i] + " √® gi√† impegnato in un party", kbBack3);
														return;
													}
												}

												connection_sync.query('INSERT INTO mission_team_party (team_id, party_id) VALUES (' + team_id + ',' + miss + ')');

												for (var i = 0; i < cnt; i++) {
													connection.query('INSERT INTO mission_team_party_player (team_id, party_id, player_id) VALUES (' + team_id + ',' + miss + ',' + idArray[i] + ')', function (err, rows, fields) {
														if (err) throw err;
													});
													bot.sendMessage(chatIdArray[i], "Sei stato assegnato al Party " + miss + " dall'amministratore del team!");
												}

												bot.sendMessage(message.chat.id, cnt + " membri assegnati al Party " + miss + "!", kbBack3);
											});
										};
									});
								});
							};
						};
					});
				});
			});
		});
	});
});

bot.onText(/^aggiungi membri al party (.+)/i, function (message, match) {

	if (match[1] == undefined) {
		bot.sendMessage(message.chat.id, "Inserisci anche il parametro party", back)
		return;
	}

	var party_id = parseInt(match[1]);

	if (isNaN(party_id)) {
		bot.sendMessage(message.chat.id, "Party non valido!", back)
		return;
	}

	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al gestisci party"]]
		}
	};

	connection.query('SELECT id, account_id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var player_id = rows[0].id;

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;

				if ((rows[0].role == 1) || (rows[0].role == 2))
					isAdmin = 1;
				else {
					bot.sendMessage(message.chat.id, "Solo l'amministratore o il vice possono aggiungere giocatori ai party", kbBack);
					return;
				}

				connection.query('SELECT assigned_to FROM mission_team_party WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Il party inserito non esiste", kbBack);
						return;
					}

					if (rows[0].assigned_to != null) {
						bot.sendMessage(message.chat.id, "Puoi aggiungere giocatori al party solo se non sta svolgendo un incarico", kbBack);
						return;
					}

					connection.query('SELECT nickname FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND player_id NOT IN (SELECT player_id FROM mission_team_party_player WHERE team_id = ' + team_id + ' AND party_id = ' + party_id + ')', function (err, rows, fields) {
						if (err) throw err;

						var iKeys = [];

						for (var i = 0, len = Object.keys(rows).length; i < len; i++)
							iKeys.push([rows[i].nickname]);

						iKeys.push(["Torna al gestisci party"]);

						var kb = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, "Seleziona il giocatore da aggiungere al party", kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text == "Torna al gestisci party")
									return;

								connection.query('SELECT id FROM player WHERE nickname = "' + answer.text + '"', function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0) {
										bot.sendMessage(message.chat.id, "Il giocatore inserito non esiste", kbBack);
										return;
									}

									var player_add_id = rows[0].id;

									connection.query('SELECT 1 FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_add_id, function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Il giocatore inserito non √® nel tuo team", kbBack);
											return;
										}

										connection.query('SELECT 1 FROM mission_team_party_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_add_id, function (err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length > 0) {
												bot.sendMessage(message.chat.id, "Il giocatore √® gi√† assegnato ad un party", kbBack);
												return;
											}

											connection.query('SELECT COUNT(id) As cnt FROM mission_team_party_player WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
												if (err) throw err;

												if (rows[0].cnt > 4) {
													bot.sendMessage(message.chat.id, "Il party ha gi√† raggiunto il numero massimo di membri", kbBack);
													return;
												}

												connection.query('INSERT INTO mission_team_party_player (team_id, party_id, player_id) VALUES (' + team_id + ', ' + party_id + ', ' + player_add_id + ')', function (err, rows, fields) {
													if (err) throw err;

													bot.sendMessage(message.chat.id, "Il giocatore √® stato aggiunto al party!", kbBack);
												});
											});
										});
									});
								});
							}
						});
					});
				});
			});
		});
	});
});

bot.onText(/^escludi: (.+)/i, function (message, match) {

	if (match[1] == undefined) {
		bot.sendMessage(message.chat.id, "Inserisci anche il parametro giocatore", back)
		return;
	}

	connection.query('SELECT id, account_id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var player_id = rows[0].id;

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var kbYesNo = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna al gestisci party"]]
			}
		};

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna al gestisci party"]]
			}
		};

		bot.sendMessage(message.chat.id, "Sei sicuro di voler escludere il giocatore dal party?", kbYesNo).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() != "si")
					return;

				connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
						return;
					}
					var team_id = rows[0].team_id;

					connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var isAdmin = 0;

						if ((rows[0].role == 1) || (rows[0].role == 2))
							isAdmin = 1;
						else {
							bot.sendMessage(message.chat.id, "Solo l'amministratore o il vice possono escludere giocatori dal party", kbBack);
							return;
						}

						connection.query('SELECT id, nickname FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Il giocatore richiesto non esiste", kbBack);
								return;
							}

							var player_del_id = rows[0].id;
							var nickname_del = rows[0].nickname;

							connection.query('SELECT party_id FROM mission_team_party_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_del_id, function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "Il giocatore non √® nel tuo team oppure non √® assegnato ad un party", kbBack);
									return;
								}

								var party_id = rows[0].party_id;

								connection.query('SELECT P.id, P.nickname, M.answ_id, M2.assigned_to, M2.wait, P.chat_id FROM mission_team_party_player M, mission_team_party M2, player P WHERE M.player_id = P.id AND M2.party_id = M.party_id AND M2.team_id = M.team_id AND M.team_id = ' + team_id + ' AND M.party_id = ' + party_id, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length < 2) {
										bot.sendMessage(message.chat.id, "Puoi espellere il giocatore solo se c'√® almeno ancora un altro membro", kbBack);
										return;
									}

									if (rows[0].assigned_to != null) {
										bot.sendMessage(message.chat.id, "Puoi espellere il giocatore dal party solo se non √® in corso un incarico", kbBack);
										return;
									}

									connection.query('DELETE FROM mission_team_party_player WHERE player_id = ' + player_del_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Il giocatore √® stato escluso dal party!", kbBack);
									});

									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										if ((rows[i].id != player_id) && (rows[i].id != player_del_id))
											bot.sendMessage(rows[i].chat_id, nickname_del + " √® stato escluso dal tuo party!");
										if (rows[i].id == player_del_id)
											bot.sendMessage(rows[i].chat_id, nickname_del + ", sei stato escluso dal tuo party!");
									}
								});
							});
						});
					});
				});
			};
		});
	});
});

bot.onText(/^assalto|accedi all'assalto|torna all'assalto|panoramica|attendi l'arrivo/i, function (message) {
	connection.query('SELECT id, account_id, holiday, gender, boss_time FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var player_id = rows[0].id;

		if (assaultStop == 1) {
			bot.sendMessage(message.chat.id, "Manutenzione, riprova pi√π tardi!", back)
			return;
		}

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (rows[0].boss_time != null) {
			var d = new Date(rows[0].boss_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
			bot.sendMessage(message.chat.id, "Hai appena cambiato team, non puoi ancora accedere a questa funzione fino alle " + long_date + "!", back)
			return;
		}

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		helpMsg(message.chat.id, player_id, 3);

		connection.query('SELECT team.name, team_player.team_id, team.players, boost_id, boss_count FROM team_player, team WHERE team_player.team_id = team.id AND team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ')', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}

			var team_id = rows[0].team_id;
			var team_players = rows[0].players;
			var team_name = rows[0].name;
			var boss_count = rows[0].boss_count;

			if (team_id != 1113) {
				if (rows[0].players < 3) {
					bot.sendMessage(message.chat.id, "Il team deve essere composto da almeno 3 membri per utilizzare questa funzione", team);
					return;
				}
			}

			connection.query('SELECT role, suspended FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				if (rows[0].role > 0)
					isAdmin = 1;

				if (rows[0].suspended == 1) {
					bot.sendMessage(message.chat.id, "Se sei sospeso non puoi accedere a questa funzionalit√† :(", team);
					return;
				}

				var kbStart = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Accedi all'assalto"], ["Torna al menu"]]
					}
				};

				var kbBack = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Torna all'assalto"], ["Torna al menu"]]
					}
				};

				var kbBack_html = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Torna all'assalto"], ["Torna al menu"]]
					}
				};

				var kbMain = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["‚öîÔ∏è Avvia Assalto ‚öîÔ∏è"], ["Torna al team"]]
					}
				};

				var kbYesNo = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Si"], ["Torna all'assalto"], ["Torna al menu"]]
					}
				};

				connection.query('SELECT * FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {

						if (isAdmin == 0) {
							bot.sendMessage(message.chat.id, "Solo l'admin o il vice pu√≤ iscrivere il team agli assalti", back);
							return;
						}

						connection.query('INSERT INTO assault (team_id) VALUES (' + team_id + ')', function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "*Benvenut" + gender_text + " nell'Assalto!*\nGli assalti consentono al team di dimostrare il proprio valore in battaglia sconfiggendo tutti e 31 i boss e completando quindi la scalata, nelle prime 24 ore √® possibile organizzare le proprie postazioni per attacco e difesa assegnando ogni componente del team ad un ruolo. Ogni componente dovr√† impegnarsi al massimo per alzare il livello della propria struttura cos√¨ da fornire maggiori bonus in battaglia, mentre nelle successive 24 ore avr√† luogo lo scontro vero e proprio dove ogni giocatore metter√† in gioco le proprie abilit√† per sconfiggere ondate di mostri.\nOra va e preparati all'assalto!\nGuida inziale: https://telegra.ph/Introduzione-agli-Assalti-09-24", kbStart);
							console.log(team_name + " registrato all'assalto");
						});
					} else {
						var phase = rows[0].phase;
						var time_end = rows[0].time_end;
						var time_wait_end = rows[0].time_wait_end;
						var weak_time_end = rows[0].weak_time_end;
						var weak_unlocked = rows[0].weak_unlocked;
						var mob_name = rows[0].mob_name;
						var mob_life = rows[0].mob_life;
						var mob_total_life = rows[0].mob_total_life;
						var mob_paralyzed = rows[0].mob_paralyzed;
						var mob_critic = rows[0].mob_critic;
						var refresh_mob = rows[0].refresh_mob;
						var is_boss = rows[0].is_boss;
						var boss_num = rows[0].boss_num;
						var mob_turn = rows[0].mob_turn;
						var assault_lost = rows[0].lost;

						var main_text = "Benvenut" + gender_text + " nell'<b>Assalto</b>!\n";
						if (phase == 0) {
							var text = "L'assalto non √® in corso, attendi che l'amministratore del team o il suo vice diano inizio al <b>Giorno della Preparazione</b>!";
							if (isAdmin)
								text = "L'assalto non √® in corso, avvialo ed entra nel <b>Giorno della Preparazione</b>, avrai 24 ore di tempo per preparare il team al <b>Giorno dell'Assalto</b>!";
							bot.sendMessage(message.chat.id, main_text + text, kbMain).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text.toLowerCase().indexOf("avvia") != -1) {
										if (!isAdmin) {
											bot.sendMessage(message.chat.id, "Solo l'admin o il vice possono avviare un assalto", kbBack);
											return;
										}
										if (time_wait_end != null) {
											var d = new Date(time_wait_end);
											var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
											bot.sendMessage(message.chat.id, "Non puoi ancora avviare un assalto fino alle " + short_date + "!", kbBack);
											return;
										}

										bot.sendMessage(message.chat.id, "Sei sicuro di voler avviare l'assalto adesso?", kbYesNo).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.toLowerCase() == "si") {
													connection.query('SELECT phase FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
														if (err) throw err;

														if (rows[0].phase == 1) {
															bot.sendMessage(message.chat.id, "L'assalto √® gi√† stato avviato!", kbBack);
															return;
														}

														connection.query('UPDATE assault SET phase = 1, time_end = DATE_ADD(NOW(), INTERVAL 1 DAY) WHERE team_id = ' + team_id, function (err, rows, fields) {
															if (err) throw err;

															generateMobWeakness(team_id, 4);	// 3 + boss

															bot.sendMessage(message.chat.id, "Hai avviato il *Giorno della Preparazione*!", kbBack);
															connection.query('SELECT player_id, chat_id FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' ORDER BY team_player.id', function (err, rows, fields) {
																if (err) throw err;

																for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																	if (rows[i].chat_id != message.chat.id)
																		bot.sendMessage(rows[i].chat_id, "L'amministratore ha avviato il *Giorno della Preparazione*!\nTutti i giocatori escono dai loro rifugi per dirigersi alla magione del team, che si dice verr√† attaccata dai mostri mandati dalla Fenice di Lootia. A loro il compito di difenderla con tutte le loro forze.", mark);
																}
															});
														});
													});
												}
											}
										});
									}
								};
							});
						} else if (phase == 1) {
							var d = new Date(time_end);
							var now = new Date();
							var diff = Math.round((now - d) / 1000); //in secondi
							diff = Math.abs(diff);

							var text = "Il <b>Giorno della Preparazione " + boss_num + "</b> terminer√† tra " + toTime(diff) + "!\n\nOrganizzazione attuale intorno alla magione del team:\n";
							connection.query('SELECT AP.name, AP.id As place_id, P.id, P.nickname, P.exp, P.reborn, P.class, APT.level, APT.time_end, AP.class_bonus, C.name As class_bonus_name, (SELECT COUNT(id) As cnt FROM assault_place_player_id WHERE place_id = AP.id AND team_id = ' + team_id + ') As players, AP.max_players, AP.max_level FROM assault_place AP LEFT JOIN (SELECT * FROM assault_place_team WHERE team_id = ' + team_id + ') APT ON (APT.place_id = AP.id AND APT.team_id = ' + team_id + ') LEFT JOIN assault_place_player_id APP ON (AP.id = APP.place_id AND APP.team_id = ' + team_id + ') LEFT JOIN player P ON P.id = APP.player_id LEFT JOIN class C ON AP.class_bonus = C.id WHERE P.holiday = 0 OR P.holiday IS NULL ORDER BY AP.id', function (err, rows, fields) {
								if (err) throw err;

								var place_id_break = 0;
								var iKeys = [];
								var selected = -1;
								var selected_name = "";
								var selected_level = 0;
								var selected_count = 0;

								iKeys.push(["Panoramica üîÑ", "Rapporto üîé"]);

								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									if (place_id_break != rows[i].place_id) {
										if (rows[i].level == null)
											rows[i].level = 0;
										text += "\n" + assaultEmojiList[rows[i].place_id-1] + " <b>" + rows[i].name + "</b> (Lv " + rows[i].level + "/" + rows[i].max_level + ", Pg " + rows[i].players + "/" + rows[i].max_players + "):\n";
										text += "Bonus a " + rows[i].class_bonus_name + " " + classSym(rows[i].class_bonus) + "\n";
										selected_count += rows[i].players;
										if (rows[i].time_end != null) {
											var d = new Date(rows[i].time_end);
											var time = addZero(d.getHours()) + ":" + addZero(d.getMinutes());
											if (rows[i].level == 0)
												text += "üèó <i>In costruzione fino alle " + time + "</i>\n";
											else
												text += "üèó <i>In aggiornamento fino alle " + time + "</i>\n";
										}
										if (((rows[i].players == 0) && (rows[i].level > 0)) || ((rows[i].players > 0) && (rows[i].level == 0)))
											text += "üö´ <i>Rischio distruzione a fine preparazione</i> üö´\n";
										iKeys.push([rows[i].name]);
										place_id_break = rows[i].place_id;
									}

									if (rows[i].id != null) {
										if (rows[i].id == player_id) {
											text += "> <i>" + rows[i].nickname + "</i> - " + classSym(rows[i].class) + " " + Math.floor(rows[i].exp/10) + " " + rebSym(rows[i].reborn) + "\n";
											selected = rows[i].place_id;
											selected_name = rows[i].name;
											selected_level = rows[i].level;
										} else
											text += "> " + rows[i].nickname + " - " + classSym(rows[i].class) + " " + Math.floor(rows[i].exp/10) + " " + rebSym(rows[i].reborn) + "\n";
									} else
										text += "<i>Nessun membro in questa postazione</i>\n";
								}

								var tot_level = connection_sync.query('SELECT SUM(max_level) As cnt FROM assault_place');
								var my_tot_level = connection_sync.query('SELECT SUM(level) As cnt FROM assault_place_team WHERE team_id = ' + team_id);
								if (tot_level[0].cnt == my_tot_level[0].cnt) {
									setAchievement(player_id, 44, 999);
									setAchievement(player_id, 19, 999);
								}

								if (team_players-selected_count == 1)
									text += "\nAncora <b>1</b> membro deve scegliere la propria postazione!";
								else if (team_players-selected_count > 0) {
									if ((team_players-selected_count) < 5) {
										var no_place = connection_sync.query("SELECT nickname FROM player P, team_player TP LEFT JOIN assault_place_player_id A ON TP.player_id = A.player_id WHERE TP.player_id = P.id AND A.place_id IS NULL AND TP.team_id = " + team_id);
										var left = "";
										for (var i = 0, len = Object.keys(no_place).length; i < len; i++)
											left += no_place[i].nickname + ", ";
										left = left.slice(0, -2);
										text += "\n" + left + " devono scegliere la propria postazione";
									} else
										text += "\nAncora <b>" + (team_players-selected_count) + "</b> membri devono scegliere la propria postazione";
								}

								iKeys.push(["Torna al menu"]);

								if (selected != -1) {
									var build = "Potenzia üèó";
									if (selected_level == 0)
										build = "Costruisci üöß";
									text += "\nHai scelto di occuparti della postazione <i>" + selected_name + "</i>, produci risorse per migliorarlo e renderlo pi√π utile in battaglia!";

									var kb = {
										parse_mode: "HTML",
										reply_markup: {
											resize_keyboard: true,
											keyboard: [[build, "Gestisci üõ†"],["Rapporto üîé", "Panoramica üîÑ"], ["Esci ‚Ü©Ô∏è", "Torna al menu"]]
										}
									};

									if (isAdmin) {
										var full_kb = [[build, "Gestisci üõ†"],["Rapporto üîé", "Panoramica üîÑ"]];
										var index = 3;
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											if (rows[i].nickname != null) {
												full_kb.splice(index, 0, ["Rimuovi " + rows[i].nickname]);
												index++;
											}
										}
										full_kb.splice(index, 0, ["Esci ‚Ü©Ô∏è", "Torna al menu"]);
										kb = {
											parse_mode: "HTML",
											reply_markup: {
												resize_keyboard: true,
												keyboard: full_kb
											}
										};
									}
								} else {
									text += "\nNon hai ancora scelto una postazione! Scegli con attenzione.";
									var kb = {
										parse_mode: "HTML",
										reply_markup: {
											resize_keyboard: true,
											keyboard: iKeys
										}
									};
								}

								bot.sendMessage(message.chat.id, main_text + text, kb).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if ((answer.text == "Torna all'assalto") || (answer.text == "Torna al menu"))
											return;
										else if (answer.text.toLowerCase().indexOf("panoramica") != -1)
											return;
										else if (answer.text.toLowerCase().indexOf("rimuovi") != -1) {
											if (isAdmin == 0) {
												bot.sendMessage(message.chat.id, "Questa funzione pu√≤ essere usata solo dall'amministratore o dal vice", kbBack);
												return;
											}
											var split = answer.text.split(" ");
											if (split.length != 2) {
												bot.sendMessage(message.chat.id, "Errore, riprova", kbBack);
												return;
											}
											var nickname = split[1];
											connection.query('SELECT P.nickname, T.player_id FROM team_player T, player P WHERE T.player_id = P.id AND player_id = (SELECT id FROM player WHERE nickname = "' + nickname + '")', function (err, rows, fields) {
												if (err) throw err;

												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Il giocatore non esiste o non si trova nel tuo team", kbBack);
													return;
												}

												if (rows[0].player_id == player_id) {
													bot.sendMessage(message.chat.id, "Non puoi rimuovere te stesso", kbBack);
													return;
												}

												var remove_player_id = rows[0].player_id;
												var remove_nickname = rows[0].nickname;

												connection.query('SELECT place_id FROM assault_place_player_id WHERE team_id = ' + team_id + ' AND player_id = ' + remove_player_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Il giocatore non si trova in alcuna postazione!", kbBack);
														return;
													}

													var extra = "";
													var remove_place_id = rows[0].place_id;
													if (remove_place_id == 1)
														extra = "\nRimuovendo questo giocatore eliminerai tutti i suoi incantesimi caricati";
													else if (remove_place_id == 2)
														extra = "\nRimuovendo questo giocatore eliminerai tutti i suoi lanciabili caricati";

													bot.sendMessage(message.chat.id, "Sei sicuro di voler rimuovere " + remove_nickname + " dalla postazione?" + extra, kbYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() == "si") {
																connection.query('DELETE FROM assault_place_player_id WHERE player_id = ' + remove_player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																if (remove_place_id == 1) {
																	connection.query('DELETE FROM assault_place_magic WHERE player_id = ' + remove_player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																} else if (remove_place_id == 2) {
																	connection.query('DELETE FROM assault_place_cons WHERE player_id = ' + remove_player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																bot.sendMessage(message.chat.id, "Giocatore rimosso!", kbBack);
															}
														}
													});
												});
											});
										} else if (answer.text.toLowerCase().indexOf("esci") != -1) {
											if (selected == -1)
												bot.sendMessage(message.chat.id, "Non hai ancora selezionato una postazione!", kbBack);
											else {
												connection.query('SELECT level, time_end FROM assault_place_team WHERE team_id = ' + team_id + ' AND place_id = ' + selected, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														if ((rows[0].level == 0) && (rows[0].time_end != null)) {
															var d = new Date(rows[0].time_end);
															var time = addZero(d.getHours()) + ":" + addZero(d.getMinutes());
															bot.sendMessage(message.chat.id, "La postazione √® in costruzione, dovrai attendere fino alle " + time + " prima di uscire", kbBack);
															return;
														}
													}

													var text = "";
													if (selected == 1)
														text = "Uscendo da questa postazione perderai tutti i tuoi incantesimi caricati, continuare?";
													else if (selected == 2)
														text = "Uscendo da questa postazione perderai tutti i tuoi lanciabili caricati, continuare?";
													else
														text = "Sei sicuro di voler uscire dalla postazione?";

													bot.sendMessage(message.chat.id, text, kbYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() == "si") {
																connection.query('SELECT phase FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
																	if (err) throw err;

																	if (rows[0].phase != 1) {
																		bot.sendMessage(message.chat.id, "Non puoi uscire da una postazione in questa fase!", kbBack);
																		return;
																	}

																	connection.query('SELECT killed FROM assault_place_player_id WHERE player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;

																		if (rows[0].killed == 1) {
																			bot.sendMessage(message.chat.id, "Non puoi uscire dalla postazione finch√® sei in infermeria!", kbBack);
																			return;
																		}

																		if (selected == 1) {
																			connection.query('DELETE FROM assault_place_magic WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		} else if (selected == 2) {
																			connection.query('DELETE FROM assault_place_cons WHERE player_id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}

																		connection.query('DELETE FROM assault_place_player_id WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Sei uscito dalla postazione!", kbBack);
																		});
																	});
																});
															}
														};
													});
												});
											}
										} else if (answer.text.toLowerCase().indexOf("rapporto") != -1) {
											connection.query("SELECT mob_num, place_weak, place_strong, is_boss FROM assault_mob_weak WHERE team_id = " + team_id + " ORDER BY id", function (err, rows, fields) {
												if (err) throw err;

												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Il rapporto relativo all'ultima esplorazione non √® ancora disponibile!", kbBack);
													return;
												}

												if (weak_time_end != null) {
													var d = new Date(weak_time_end);
													var time = addZero(d.getHours()) + ":" + addZero(d.getMinutes());
													bot.sendMessage(message.chat.id, "Il rapporto relativo all'ultima esplorazione √® in corso di decifrazione, attendi fino alle " + time + "!", kbBack);
													return;
												} else if (weak_unlocked == 0) {
													connection.query("UPDATE assault SET weak_time_end = DATE_ADD(NOW(), INTERVAL 3 HOUR) WHERE team_id = " + team_id, function (err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Il rapporto relativo all'ultima esplorazione deve essere ancora decifrato, attendi 3 ore!", kbBack);
													});
													return;
												}

												var text = "Rapporto sui mob ottenuto dall'ultima esplorazione:\n";
												var mob = "";
												for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
													if (rows[i].is_boss == 0)
														mob = "Mob " + (rows[i].mob_num+1);
													else
														mob = "<b>Boss</b>";
													text += mob + ": " + assaultEmojiList[rows[i].place_weak-1] + " - " + assaultEmojiList[rows[i].place_strong-1] + "\n";
												}
												text += "\nA sinistra la debolezza üî∫ (subisce pi√π danni da giocatori e postazione indicata), a destra la resistenza üîª (subisce meno da giocatori e postazione indicata)";
												bot.sendMessage(message.chat.id, text, kbBack_html);
											});
										} else if ((answer.text.toLowerCase().indexOf("potenzia") != -1) || (answer.text.toLowerCase().indexOf("costruisci") != -1)) {
											if (selected == -1)
												bot.sendMessage(message.chat.id, "Non hai ancora selezionato una postazione!", kbBack);
											else {
												connection.query('SELECT name, max_level FROM assault_place WHERE id = ' + selected + ' OR name = "' + answer.text + '"', function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "La postazione selezionata non esiste", kbBack);
														return;
													}

													var max_level = rows[0].max_level;
													var place_name = rows[0].name;

													connection.query('SELECT COUNT(id) As cnt FROM assault_place_player_id WHERE team_id = ' + team_id + ' AND place_id = ' + selected, function (err, rows, fields) {
														if (err) throw err;

														var players = rows[0].cnt;

														connection.query('SELECT level, time_end, life, total_life FROM assault_place_team WHERE team_id = ' + team_id + ' AND place_id = ' + selected, function (err, rows, fields) {
															if (err) throw err;

															if (Object.keys(rows).length == 0) {
																var minutes = 30;
																connection.query('INSERT INTO assault_place_team (place_id, team_id, time_end) VALUES (' + selected + ',' + team_id + ', DATE_ADD(NOW(), INTERVAL ' + minutes + ' MINUTE))', function (err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai avviato la costruzione della postazione, torna tra " + minutes + " minuti per iniziare a potenziarla!", kbBack);
																});
																return;
															}

															if (rows[0].time_end != null) {
																var d = new Date(rows[0].time_end);
																var time = addZero(d.getHours()) + ":" + addZero(d.getMinutes());
																bot.sendMessage(message.chat.id, "La postazione √® in costruzione, torna alle " + time, kbBack);
																return;
															}

															if (rows[0].level == max_level) {
																bot.sendMessage(message.chat.id, "Questa postazione ha raggiunto il livello massimo", kbBack);
																return;
															}

															if (selected == 5) {
																if (rows[0].life < rows[0].total_life) {
																	bot.sendMessage(message.chat.id, "Le mura necessitano di essere riparate completamente prima di essere potenziate", kbBack);
																	return;
																}
															}

															var level = rows[0].level;
															var orderBy = "item.name";
															if (selected == 6)
																orderBy = "item.id";

															connection.query('SELECT item.id, name, rarity, quantity FROM assault_place_item, item WHERE item.id = assault_place_item.item_id AND place_id = ' + selected + ' AND team_id = ' + team_id + ' ORDER BY ' + orderBy, function (err, rows, fields) {
																if (err) throw err;

																var items = "";
																var iKeys = [];
																var compl = "";
																var paPrice = (level+1)*100;
																var myqnt = 0;
																var storeqnt = 0;
																iKeys.push(["Si"]);
																for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																	myqnt = getItemCnt(player_id, rows[i].id);
																	storeqnt = 0;

																	var checkStore = connection_sync.query('SELECT IFNULL(SUM(quantity), 0) As cnt FROM team_store WHERE team_id = ' + team_id + ' AND item_id = ' + rows[i].id);
																	if (Object.keys(checkStore).length > 0)
																		storeqnt = checkStore[0].cnt;

																	if (myqnt+storeqnt >= rows[i].quantity) {
																		compl = " ‚úÖ";
																		if (myqnt < rows[i].quantity)
																			compl += " üì¶";
																	} else {
																		compl = " üö´";
																		iKeys.push(["Cerca *" + rows[i].name]);
																	}

																	items += "> " + rows[i].name + " (" + rows[i].rarity + ") " + myqnt + "/" + rows[i].quantity + compl + "\n";
																}
																iKeys.push(["Potenzia istantaneamente (" + paPrice + " ü¶ã)"]);
																iKeys.push(["Torna all'assalto"]);
																iKeys.push(["Torna al menu"]);

																var kbYesNo = {
																	parse_mode: "HTML",
																	reply_markup: {
																		resize_keyboard: true,
																		keyboard: iKeys
																	}
																};

																bot.sendMessage(message.chat.id, "Puoi migliorare la postazione " + place_name + " al livello " + (level+1) + " consumando i seguenti oggetti:\n" + items + "\nContinuare?", kbYesNo).then(function () {
																	answerCallbacks[message.chat.id] = function (answer) {
																		if (answer.text.toLowerCase().indexOf("istantaneamente") != -1) {

																			kbYesNo = {
																				parse_mode: "HTML",
																				reply_markup: {
																					resize_keyboard: true,
																					keyboard: [["Si"], ["Torna all'assalto"]]
																				}
																			};

																			bot.sendMessage(message.chat.id, "Sicuro di voler utilizzare i PA per potenziare questa postazione?", kbYesNo).then(function () {
																				answerCallbacks[message.chat.id] = function (answer) {

																					if (answer.text.toLowerCase() != "si")
																						return;

																					connection.query('SELECT time_end FROM assault_place_team WHERE place_id = ' + selected + ' AND team_id = ' + team_id, function (err, rows, fields) {
																						if (err) throw err;

																						if (rows[0].time_end != null) {
																							bot.sendMessage(message.chat.id, "Il potenziamento √® gi√† stato avviato!", kbBack);
																							return;
																						}

																						connection.query('SELECT point FROM team WHERE id = ' + team_id, function (err, rows, fields) {
																							if (err) throw err;

																							if (rows[0].point < paPrice) {
																								bot.sendMessage(message.chat.id, "Il team non possiede abbastanza ü¶ã!", kbBack);
																								return;
																							}

																							if (isAdmin == 0) {
																								bot.sendMessage(message.chat.id, "Sicuro di voler inviare la richiesta all'amministratore?", kbYesNo).then(function () {
																									answerCallbacks[message.chat.id] = function (answer) {
																										if (answer.text.toLowerCase() != "si")
																											return;
																										connection.query('SELECT P.chat_id FROM team_player T, player P WHERE T.player_id = P.id AND T.role > 0 AND T.team_id = ' + team_id, function (err, rows, fields) {
																											if (err) throw err;
																											for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																												bot.sendMessage(rows[i].chat_id, "<b>" + message.from.username + "</b> richiede il potenziamento istantaneo della postazione <b>" + selected_name + "</b> al costo di <b>" + paPrice + "</b> ü¶ã!", html);
																											bot.sendMessage(message.chat.id, "Hai inviato correttamente la richiesta agli amministratori del team!", kbBack);
																										});
																									}
																								});
																								return;
																							}

																							connection.query('UPDATE team SET point = point-' + paPrice + ', point_spent = point_spent+' + paPrice + ' WHERE id = ' + team_id, function (err, rows, fields) {
																								if (err) throw err;
																								connection.query('UPDATE assault_place_team SET time_end = NOW() WHERE place_id = ' + selected + ' AND team_id = ' + team_id, function (err, rows, fields) {
																									if (err) throw err;
																									bot.sendMessage(message.chat.id, "Hai avviato l'incremento _istantaneo_ al livello *" + (level+1) + "* della postazione *" + selected_name + "*! Attendi qualche secondo!", kbBack);
																									setAchievement(player_id, 19, 1);
																									setAchievement(player_id, 44, 1);
																								});
																							});
																						});
																					});
																				}
																			});
																		} else if (answer.text.toLowerCase() == "si") {
																			connection.query('SELECT time_end FROM assault_place_team WHERE place_id = ' + selected + ' AND team_id = ' + team_id, function (err, rows, fields) {
																				if (err) throw err;

																				if (rows[0].time_end != null) {
																					bot.sendMessage(message.chat.id, "Il potenziamento √® gi√† stato avviato!", kbBack);
																					return;
																				}

																				connection.query('SELECT name, quantity, item_id FROM assault_place_item, item WHERE item.id = assault_place_item.item_id AND place_id = ' + selected + ' AND team_id = ' + team_id + ' ORDER BY item_id', function (err, rows, fields) {
																					if (err) throw err;

																					var cntToRemove = [];
																					var storeCntToRemove = [];
																					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																						var cnt = getItemCnt(player_id, rows[i].item_id);
																						var storeCnt = 0;

																						var checkStore = connection_sync.query('SELECT IFNULL(SUM(quantity), 0) As cnt FROM team_store WHERE team_id = ' + team_id + ' AND item_id = ' + rows[i].item_id);
																						if (Object.keys(checkStore).length > 0)
																							storeCnt = checkStore[0].cnt;

																						if (cnt+storeCnt < rows[i].quantity) {
																							var kb = {
																								parse_mode: "HTML",
																								reply_markup: {
																									resize_keyboard: true,
																									keyboard: [["Cerca *" + rows[i].name], ["Torna all'assalto"]]
																								}
																							};
																							bot.sendMessage(message.chat.id, "Non possiedi abbastanza " + rows[i].name + " (" + cnt + " su " + rows[i].quantity + ")", kb);
																							return;
																						}

																						// priorit√† magazzino
																						if (storeCnt < rows[i].quantity) {
																							storeCntToRemove.push(storeCnt);
																							cntToRemove.push(rows[i].quantity-storeCnt);
																						} else {
																							storeCntToRemove.push(rows[i].quantity);
																							cntToRemove.push(0);
																						}

																						// console.log(storeCntToRemove[i], cntToRemove[i], rows[i].quantity);
																					}

																					/*
																					console.log(storeCntToRemove);
																					console.log(cntToRemove);
																					console.log("Righe: " + Object.keys(rows).length);
																					*/

																					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																						// console.log(i, storeCntToRemove[i], cntToRemove[i]);
																						if (storeCntToRemove[i] > 0) {
																							// console.log("delItemStore " + rows[i].item_id + " " + storeCntToRemove[i]);
																							var storeItem = connection_sync.query('SELECT id, quantity FROM team_store WHERE team_id = ' + team_id + ' AND item_id = ' + rows[i].item_id);
																							quantityReq = storeCntToRemove[i];

																							for (var k = 0, len2 = Object.keys(storeItem).length; k < len2; k++) {
																								if (storeItem[k].quantity == quantityReq) {
																									// console.log("cancello riga magazzino al primo colpo DELETE FROM team_store WHERE id = " + storeItem[k].id);
																									connection.query('DELETE FROM team_store WHERE id = ' + storeItem[k].id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									// console.log("fatto, break");
																									break;
																								} else {
																									if (quantityReq >= storeItem[k].quantity) {
																										// console.log("cancello riga magazzino: DELETE FROM team_store WHERE id = " + storeItem[k].id);
																										connection.query('DELETE FROM team_store WHERE id = ' + storeItem[k].id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																										// console.log("fatto, continuo");
																										quantityReq -= storeItem[k].quantity;
																									} else {
																										// console.log("aggiorno quantit√† magazzino: UPDATE team_store SET quantity = quantity-" + quantityReq + " WHERE id = " + storeItem[k].id);
																										connection.query('UPDATE team_store SET quantity = quantity-' + quantityReq + ' WHERE id = ' + storeItem[k].id, function (err, rows, fields) {
																											if (err) throw err;
																										});
																										// console.log("fatto, break");
																										break;
																									}
																								}
																							}
																						}

																						if (cntToRemove[i] > 0) {
																							// console.log("delItem " + rows[i].item_id + " " + cntToRemove[i]);
																							delItem(player_id, rows[i].item_id, cntToRemove[i]);
																						}

																						// console.log("Finito " + i);
																					}

																					connection.query('UPDATE assault_place_team SET time_end = DATE_ADD(NOW(), INTERVAL 1 HOUR) WHERE place_id = ' + selected + ' AND team_id = ' + team_id, function (err, rows, fields) {
																						if (err) throw err;
																						bot.sendMessage(message.chat.id, "Hai avviato l'incremento al livello *" + (level+1) + "* della postazione *" + selected_name + "*! Torna tra 1 ora!", kbBack);
																						setAchievement(player_id, 19, 1);
																						setAchievement(player_id, 44, 1);
																					});
																				});
																			});
																		}
																	}
																});
															});
														});
													});
												});
											}
										} else if (answer.text.toLowerCase().indexOf("gestisci") != -1) {
											connection.query("SELECT level, life, total_life FROM assault_place_team WHERE team_id = " + team_id + " AND place_id = " + selected + " AND level > 0", function (err, rows, fields) {
												if (err) throw err;

												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Potenzia la postazione al livello 1 prima di gestirla!", kbBack);
													return;
												}

												var level = rows[0].level;	
												var life = rows[0].life;
												var total_life = rows[0].total_life;
												var text = "Gestisci <i>" + selected_name + "</i> (Lv " + level + ")\n";

												if (selected == 1) {

													var max_qnt = 20;

													connection.query('SELECT COUNT(AP.id) As cnt FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 1', function (err, rows, fields) {
														if (err) throw err;

														var player_cnt = rows[0].cnt;

														connection.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 1", function (err, rows, fields) {
															if (err) throw err;

															var class_bonus = "";
															if (rows[0].cnt > 0)
																class_bonus = " (<b>+" + (rows[0].cnt*2) + "%</b> potenza incantesimi per bonus classe)";

															connection.query("SELECT COUNT(id) As quantity FROM assault_place_magic WHERE team_id = " + team_id, function (err, rows, fields) {
																if (err) throw err;
																var tot_qnt = rows[0].quantity;
																text += "Ad ogni livello fornisce maggiore potenza base della postazione ed il <b>" + (player_cnt*5) + "%</b> probabilit√† raddoppio incantesimi. E' possibile caricarne ancora <b>" + (max_qnt-tot_qnt) + "</b>, verrano lanciati nell'ordine di inserimento." + class_bonus + "\n";
																connection.query("SELECT nickname, type, power FROM assault_place_magic APM, player WHERE APM.player_id = player.id AND team_id = " + team_id + " ORDER BY APM.id", function (err, rows, fields) {
																	if (err) throw err;

																	if (Object.keys(rows).length == 0)
																		text += "\nNessun incantesimo caricato";
																	else {
																		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																			text += "\n> " + magicToName(rows[i].type) + " " + rows[i].power + " (" + rows[i].nickname + ")";
																		text += "\n";
																	}

																	connection.query('DELETE FROM magic WHERE quantity <= 0 AND player_id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;

																		connection.query('SELECT type, power, quantity FROM magic WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;

																			var iKeys = [];

																			if (Object.keys(rows).length == 0)
																				text += "\nNon possiedi nessun incantesimo";
																			else {
																				for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																					iKeys.push(["Carica " + magicToName(rows[i].type) + " " + rows[i].power + " (" + rows[i].quantity + ")"]);
																			}

																			iKeys.push(["Torna all'assalto"]);

																			var kb = {
																				parse_mode: "HTML",
																				reply_markup: {
																					resize_keyboard: true,
																					keyboard: iKeys
																				}
																			};

																			bot.sendMessage(message.chat.id, text, kb).then(function () {
																				answerCallbacks[message.chat.id] = function (answer) {
																					if (answer.text.indexOf("Carica") != -1) {
																						connection.query("SELECT COUNT(id) As quantity FROM assault_place_magic WHERE team_id = " + team_id, function (err, rows, fields) {
																							if (err) throw err;
																							var tot_qnt = rows[0].quantity;

																							if (max_qnt-tot_qnt <= 0) {
																								bot.sendMessage(message.chat.id, "Non c'√® pi√π spazio per altri incantesimi!", kbBack);
																								return;
																							}

																							var magic = answer.text;
																							var magicNum = 0;
																							if (magic.indexOf(magicToName(1)) != -1)
																								magicNum = 1;
																							else if (magic.indexOf(magicToName(2)) != -1)
																								magicNum = 2;
																							else if (magic.indexOf(magicToName(3)) != -1)
																								magicNum = 3;
																							else if (magic.indexOf(magicToName(4)) != -1)
																								magicNum = 4;
																							else {
																								bot.sendMessage(message.chat.id, "Incantesimo non valido", kbBack);
																								return;
																							}

																							magic = magic.replace("Carica " + magicToName(1) + " ", "");
																							magic = magic.replace("Carica " + magicToName(2) + " ", "");
																							magic = magic.replace("Carica " + magicToName(3) + " ", "");
																							magic = magic.replace("Carica " + magicToName(4) + " ", "");

																							var magicPow = parseInt(magic.substring(0, magic.indexOf("(")-1));

																							if (isNaN(magicPow)) {
																								bot.sendMessage(message.chat.id, "Potenza incantesimo non valida", kbBack);
																								return;
																							}

																							connection.query('SELECT quantity FROM magic WHERE player_id = ' + player_id + ' AND power = ' + magicPow + ' AND type = ' + magicNum, function (err, rows, fields) {
																								if (err) throw err;

																								if ((Object.keys(rows).length == 0) || (rows[0].quantity < 1)) {
																									bot.sendMessage(message.chat.id, "Non possiedi l'incantesimo selezionato", kbBack);
																									return;
																								}

																								connection.query('UPDATE magic SET quantity = quantity-1 WHERE player_id = ' + player_id + ' AND power = ' + magicPow + ' AND type = ' + magicNum + ' LIMIT 1', function (err, rows, fields) {
																									if (err) throw err;

																									connection.query('INSERT INTO assault_place_magic (player_id, team_id, type, power) VALUES (' + player_id + ',' + team_id + ',' + magicNum + ',' + magicPow + ')', function (err, rows, fields) {
																										if (err) throw err;
																									});

																									bot.sendMessage(message.chat.id, "Hai caricato l'incantesimo nella Torre!", kbBack);
																								});
																							});
																						});
																					}
																				};
																			});
																		});
																	});
																});
															});
														});
													});
												} else if (selected == 2) {

													var lap_qnt = 5;
													var max_qnt = level*5;

													connection.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 2", function (err, rows, fields) {
														if (err) throw err;

														var class_bonus = "";
														if (rows[0].cnt > 0)
															class_bonus = " (<b>+" + (rows[0].cnt*2) + "%</b> danno consumabili per bonus classe)";

														connection.query("SELECT COUNT(id) As cnt FROM assault_place_cons WHERE team_id = " + team_id, function (err, rows, fields) {
															if (err) throw err;
															var tot_qnt = rows[0].cnt;
															text += "A questo livello fornisce <b>" + lap_qnt + "</b> lanci contemporanei di oggetti lanciabili, √® possibile caricarne ancora <b>" + (max_qnt-tot_qnt) + "</b>, verrano lanciati nell'ordine di inserimento" + class_bonus + "\n";
															connection.query("SELECT nickname, name, cons_val FROM assault_place_cons APC, item I, player P WHERE APC.player_id = P.id AND APC.item_id = I.id AND team_id = " + team_id + " ORDER BY APC.id", function (err, rows, fields) {
																if (err) throw err;

																if (Object.keys(rows).length == 0)
																	text += "\nNessun lanciabile caricato";
																else {
																	for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																		text += "\n> " + rows[i].name + " (" + (rows[i].cons_val*10) + " G, " + rows[i].nickname + ")";
																}

																connection.query('SELECT name, quantity, cons_val FROM item, inventory WHERE item.id = inventory.item_id AND quantity > 0 AND category = 4 AND player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;

																	var iKeys = [];

																	if (Object.keys(rows).length == 0)
																		text += "\n\nNon possiedi nessun lanciabile";
																	else {
																		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																			iKeys.push(["Carica " + rows[i].name + " (" + rows[i].quantity + ", " + (rows[i].cons_val*10) + " G)"]);
																	}

																	iKeys.push(["Torna all'assalto"]);

																	var kb = {
																		parse_mode: "HTML",
																		reply_markup: {
																			resize_keyboard: true,
																			keyboard: iKeys
																		}
																	};

																	var kbNum = {
																		parse_mode: "HTML",
																		reply_markup: {
																			resize_keyboard: true,
																			keyboard: [["1", "2", "5"], ["10", "25", "50"], ["Torna all'assalto"]]
																		}
																	};

																	bot.sendMessage(message.chat.id, text, kb).then(function () {
																		answerCallbacks[message.chat.id] = function (answer) {
																			if (answer.text.indexOf("Carica") != -1) {

																				var item_name = answer.text;

																				bot.sendMessage(message.chat.id, "Quanti lanciabili di questo tipo vuoi caricare?", kbNum).then(function () {
																					answerCallbacks[message.chat.id] = function (answer) {

																						var qnt = parseInt(answer.text);
																						if ((qnt < 1) || (qnt > 50)) {
																							bot.sendMessage(message.chat.id, "Inserisci una quantit√† compresa tra 1 e 50!", kbBack);
																							return;
																						}

																						connection.query("SELECT COUNT(id) As quantity FROM assault_place_cons WHERE team_id = " + team_id, function (err, rows, fields) {
																							if (err) throw err;
																							var tot_qnt = rows[0].quantity;

																							if (max_qnt-tot_qnt < qnt) {
																								bot.sendMessage(message.chat.id, "Non puoi caricare cos√¨ tanti lanciabili!", kbBack);
																								return;
																							}

																							var cons = item_name.replace("Carica ", "");
																							cons = cons.substring(0, cons.indexOf("(")-1);

																							connection.query('SELECT id FROM item WHERE name = "' + cons + '" AND category = 4', function (err, rows, fields) {
																								if (err) throw err;

																								if (Object.keys(rows).length == 0) {
																									bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste o non √® valido", kbBack);
																									return;
																								}

																								var item_id = rows[0].id;

																								connection.query('SELECT quantity FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id + " AND quantity > 0", function (err, rows, fields) {
																									if (err) throw err;

																									if ((Object.keys(rows).length == 0) || (rows[0].quantity < qnt)) {
																										bot.sendMessage(message.chat.id, "Non possiedi abbastanza lanciabili selezionati", kbBack);
																										return;
																									}

																									delItem(player_id, item_id, qnt);

																									for (var i = 0; i < qnt; i++) {
																										connection.query('INSERT INTO assault_place_cons (player_id, team_id, item_id) VALUES (' + player_id + ',' + team_id + ',' + item_id + ')', function (err, rows, fields) {
																											if (err) throw err;
																										});
																									}

																									bot.sendMessage(message.chat.id, "Hai caricato " + qnt + " lanciabili nella Piattaforma di Lancio!", kbBack);
																								});
																							});
																						});
																					}
																				});
																			};
																		};
																	});
																});
															});
														});
													});
												} else if (selected == 3) {
													connection.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 3", function (err, rows, fields) {
														if (err) throw err;

														var class_bonus = "";
														if (rows[0].cnt > 0)
															class_bonus = " (<b>+" + (rows[0].cnt*5) + "%</b> danno per bonus classe)";

														text += "A questo livello fornisce <b>x" + (level/2+3).toFixed(2).toString().replace(".",",") + "</b> danno durante la fase di battaglia\nPuoi solo potenziare questo tipo di postazione!" + class_bonus;
														bot.sendMessage(message.chat.id, text, kbBack_html);
													});
												} else if (selected == 4) {
													connection.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 4", function (err, rows, fields) {
														if (err) throw err;

														var class_bonus = "";
														if (rows[0].cnt > 0)
															class_bonus = " (<b>+" + (rows[0].cnt*5) + "%</b> danno per bonus classe)";

														text += "A questo livello fornisce <b>x" + (level/3+1).toFixed(2).toString().replace(".",",") + "</b> danno durante la fase di battaglia\nPuoi solo potenziare questo tipo di postazione!" + class_bonus;
														bot.sendMessage(message.chat.id, text, kbBack_html);
													});
												} else if (selected == 5) {
													connection.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 5", function (err, rows, fields) {
														if (err) throw err;

														var class_bonus = "";
														var class_bonus_val = 0;
														if (rows[0].cnt > 0) {
															class_bonus = " (<b>+" + (rows[0].cnt*5) + "%</b> salute per bonus classe)";
															class_bonus_val = (rows[0].cnt*5);
														}

														var players_num = connection_sync.query("SELECT COUNT(id) As cnt FROM assault_place_player_id WHERE team_id = " + team_id);
														var mob_damage = mobDamage(boss_count, players_num[0].cnt, boss_num, 1, mob_turn, assault_lost, 1);
														var place = connection_sync.query('SELECT level FROM assault_place_team WHERE place_id = 5 AND team_id = ' + team_id);
														var players = connection_sync.query('SELECT COUNT(id) As cnt FROM assault_place_player_id WHERE place_id = 5 AND team_id = ' + team_id);
														var wall_max_life = mob_damage * place[0].level * players[0].cnt;
														wall_max_life += wall_max_life*(class_bonus_val/100);
														wall_max_life = Math.round(wall_max_life);

														//console.log("Mura: " + team_id + " " + formatNumber(wall_max_life));

														var perc = Math.round(life/wall_max_life*100);

														text += "A questo livello fornisce <b>" + formatNumber(wall_max_life) + "</b> salute alle mura per protezione, possiede ancora la capacit√† di proteggere da <b>" + formatNumber(life) + "</b> danni (" + perc + "%)\nSi ripara automaticamente fino al 50% di salute alla sconfitta di un nemico, ma puoi comunque ripararla usando oggetti base (scrivi il nome se non lo vedi nella lista)." + class_bonus + "\n";

														if (total_life != wall_max_life) {
															connection_sync.query("UPDATE assault_place_team SET total_life = " + wall_max_life + " WHERE team_id = " + team_id + " AND place_id = 5");
															console.log("Salute mura adeguata (diversa da db) " + formatNumber(wall_max_life) + " - " + formatNumber(total_life));
														}

														if (life > wall_max_life) {
															connection_sync.query("UPDATE assault_place_team SET life = " + wall_max_life + " WHERE team_id = " + team_id + " AND place_id = 5");
															console.log("Salute mura adeguata (superato il max) " + formatNumber(life));
														}

														if (life >= wall_max_life) {
															text += "\nLa resistenza delle mura √® al massimo";
															bot.sendMessage(message.chat.id, text, kbBack_html);
															return;
														}

														connection.query('SELECT I.name, I.value, IV.quantity, R.id As rarity_id FROM item I, inventory IV, rarity R WHERE R.shortname = I.rarity AND I.id = IV.item_id AND IV.quantity > 0 AND I.craftable = 0 AND I.rarity IN ("C","NC","R","UR","L","R") AND IV.player_id = ' + player_id + " LIMIT 25", function (err, rows, fields) {
															if (err) throw err;

															var iKeys = [];

															if (Object.keys(rows).length == 0)
																text += "\nNon possiedi nessun oggetto base";
															else {
																for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																	iKeys.push(["Brucia " + rows[i].name + " (" + rows[i].quantity + ") +" + Math.ceil((rows[i].value/1000)+(rows[i].rarity_id*0.5)) + "% salute"]);
															}

															iKeys.push(["Torna all'assalto"]);

															var kb = {
																parse_mode: "HTML",
																reply_markup: {
																	resize_keyboard: true,
																	keyboard: iKeys
																}
															};

															var kb2 = {
																parse_mode: "HTML",
																reply_markup: {
																	resize_keyboard: true,
																	keyboard: [["1","5","10"],["25", "50"],["Torna all'assalto"]]
																}
															};

															bot.sendMessage(message.chat.id, text, kb).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.indexOf("Brucia") != -1) {
																		var cons = answer.text.replace("Brucia ", "");
																		cons = cons.substring(0, cons.indexOf("(")-1);

																		connection.query('SELECT I.id, I.value, R.id As rarity_id FROM item I, rarity R WHERE I.rarity = R.shortname AND I.name = "' + cons + '" AND I.craftable = 0 AND I.rarity IN ("C","NC","R","UR","L","R")', function (err, rows, fields) {
																			if (err) throw err;

																			if (Object.keys(rows).length == 0) {
																				bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste o non √® valido", kbBack);
																				return;
																			}

																			var item_id = rows[0].id;
																			var singleRefill = Math.round(wall_max_life*(Math.ceil((rows[0].value/1000)+(rows[0].rarity_id*0.5))/100));

																			bot.sendMessage(message.chat.id, "Seleziona la quantit√†", kb2).then(function () {
																				answerCallbacks[message.chat.id] = function (answer) {

																					if (answer.text == "Torna all'assalto")
																						return;

																					var qnt = parseInt(answer.text);
																					if ((isNaN(qnt)) || (qnt < 1) || (qnt > 500)) {
																						bot.sendMessage(message.chat.id, "Quantit√† non valida", kbBack);
																						return;
																					}

																					connection.query('SELECT quantity FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id + " AND quantity >= " + qnt, function (err, rows, fields) {
																						if (err) throw err;

																						if (Object.keys(rows).length == 0) {
																							bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato o non ne hai abbastanza copie", kbBack);
																							return;
																						}

																						connection.query("SELECT life, total_life FROM assault_place_team WHERE team_id = " + team_id + " AND place_id = 5", function (err, rows, fields) {
																							if (err) throw err;

																							delItem(player_id, item_id, qnt);

																							var life = rows[0].life;
																							var total_life = rows[0].total_life;

																							var refill = singleRefill*qnt;
																							var new_life = Math.round(life+refill);
																							if (new_life > total_life)
																								new_life = total_life;

																							connection.query("UPDATE assault_place_team SET life = " + new_life + " WHERE team_id = " + team_id + " AND place_id = 5", function (err, rows, fields) {
																								if (err) throw err;
																								bot.sendMessage(message.chat.id, "Hai ricostruito parte delle Mura, la resistenza attuale √® *" + formatNumber(new_life) + " su " + formatNumber(total_life) + "*!", kbBack);
																							});
																						});
																					});
																				}
																			});
																		});
																	}
																};
															});
														});
													});
												} else if (selected == 6) {
													connection.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 6", function (err, rows, fields) {
														if (err) throw err;

														var class_bonus = "";
														if (rows[0].cnt > 0)
															class_bonus = " (<b>+" + rows[0].cnt + "%</b> probabilit√† per bonus classe)";

														connection.query('SELECT COUNT(AP.id) As cnt FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 6', function (err, rows, fields) {
															if (err) throw err;
															text += "A questo livello fornisce <b>" + (level+(rows[0].cnt*5)) + "%</b> probabilit√† base di sferrare l'attacco speciale da parte del drago con un danno potente quanto lo sono i draghi dei membri nella postazione e scala in base alla vita del nemico\nPuoi solo potenziare questo tipo di postazione!" + class_bonus;
															bot.sendMessage(message.chat.id, text, kbBack_html);
														});
													});
												} else if (selected == 7) {
													connection.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 7", function (err, rows, fields) {
														if (err) throw err;

														var class_bonus = "";
														if (rows[0].cnt > 0)
															class_bonus = " (<b>+" + (rows[0].cnt*2) + "%</b> danno per bonus classe)";

														connection.query('SELECT COUNT(AP.id) As cnt FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 7', function (err, rows, fields) {
															if (err) throw err;
															text += "A questo livello fornisce <b>" + (level+(rows[0].cnt*5)) + "%</b> danno durante le fasi di battaglia di entrambe le artiglierie\nPuoi solo potenziare questo tipo di postazione!" + class_bonus;
															bot.sendMessage(message.chat.id, text, kbBack_html);
														});
													});
												} else if (selected == 8) {
													connection.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 8", function (err, rows, fields) {
														if (err) throw err;

														var class_bonus = "";
														if (rows[0].cnt > 0)
															class_bonus = " (<b>+" + (rows[0].cnt*2) + "%</b> salute per bonus classe)";

														connection.query('SELECT COUNT(AP.id) As cnt FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 8', function (err, rows, fields) {
															text += "A questo livello fornisce <b>" + (level+(rows[0].cnt*5)) + "%</b> recupero salute ogni turno e consumo massimo di <b>" + Math.round(level/2) + "</b> pozioni nella fase di cura. Le pozioni vengono utilizzate in modo da sprecarne il meno possibile, prima le grandi poi le medie ed infine le piccole.\nPuoi solo potenziare questo tipo di postazione!" + class_bonus;
															bot.sendMessage(message.chat.id, text, kbBack_html);
														});
													});
												}
											});
										} else {
											if (selected != -1)
												bot.sendMessage(message.chat.id, "Hai gi√† selezionato una postazione!", kbBack);
											else {

												if (validTeamMember(team_id, player_id) == 0) {
													bot.sendMessage(message.chat.id, "Non puoi accedere a nessuna postazione finch√® il team sar√† cos√¨ sbilanciato, la media assoluta dei livelli deve essere pi√π omogenea!", kbBack);
													return;
												}

												var place_name = answer.text;

												connection.query('SELECT AP.name, AP.description, AP.class_bonus, AP.max_players, COUNT(APP.id) As cnt FROM assault_place AP LEFT JOIN assault_place_player_id APP ON AP.id = APP.place_id AND APP.team_id = ' + team_id + ' WHERE name = "' + place_name + '"', function (err, rows, fields) {
													if (err) throw err;
													if (rows[0].name == null) {
														bot.sendMessage(message.chat.id, "Postazione non valida!", kbBack);
														return;
													}
													if (rows[0].cnt >= rows[0].max_players) {
														bot.sendMessage(message.chat.id, "Questa postazione √® piena!", kbBack);
														return;
													}

													var place_name = rows[0].name;
													var place_desc = rows[0].description;

													connection.query('SELECT name FROM class WHERE id IN (' + rows[0].class_bonus + ')', function (err, rows, fields) {
														if (err) throw err;

														var class_text = "";
														for (var i = 0, len = Object.keys(rows).length; i < len; i++)
															class_text += rows[i].name + ", ";
														class_text = class_text.slice(0, -2);

														bot.sendMessage(message.chat.id, "Sei sicuro di voler selezionare la postazione <b>" + place_name + "</b>? " + place_desc + "\nFornisce bonus alla vocazione <b>" + class_text + "</b>", kbYesNo).then(function () {
															answerCallbacks[message.chat.id] = function (answer) {
																if (answer.text.toLowerCase() == "si") {
																	connection.query('SELECT AP.id, AP.max_players, COUNT(APP.id) As cnt FROM assault_place AP LEFT JOIN assault_place_player_id APP ON AP.id = APP.place_id AND APP.team_id = ' + team_id + ' WHERE name = "' + place_name + '"', function (err, rows, fields) {
																		if (err) throw err;
																		if (Object.keys(rows).length == 0) {
																			bot.sendMessage(message.chat.id, "Postazione non valida!", kbBack);
																			return;
																		}
																		if (rows[0].cnt >= rows[0].max_players) {
																			bot.sendMessage(message.chat.id, "Questa postazione √® piena!", kbBack);
																			return;
																		}
																		connection.query('INSERT INTO assault_place_player_id (place_id, team_id, player_id) VALUES (' + rows[0].id + ',' + team_id + ',' + player_id + ')', function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Postazione selezionata!\nMigliorala per poterne trarre benefici nella *Giornata dell'Assalto*!", kbBack);
																		});
																	});
																}
															}
														});
													});
												});
											}
										}
									}
								});
							});
						} else if (phase == 2) {
							connection.query('SELECT MAX(time_end) As mx, COUNT(id) As cnt FROM assault_place_team WHERE time_end IS NOT NULL AND team_id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;

								if (rows[0].cnt > 0) {
									var d = new Date(rows[0].mx);
									var time = addZero(d.getHours()) + ":" + addZero(d.getMinutes());
									bot.sendMessage(message.chat.id, "Non puoi procedere finch√® tutte le strutture non hanno terminato la costruzione in corso!\nL'ultima terminer√† alle " + time, kbBack);
									return;
								}

								var d = new Date(time_end);
								var now = new Date();
								var diff = Math.round((now - d) / 1000); //in secondi
								diff = Math.abs(diff);

								var text = "Il <b>Giorno dell'Assalto " + boss_num + "</b> terminer√† tra " + toTime(diff) + "!\n";

								var extra = "";
								if (is_boss == 1)
									extra = "il temibile ";

								if (refresh_mob == 0) {
									text += "Riprendi la battaglia contro " + extra + "<b>" + mob_name + "</b>!";
									var kb = {
										parse_mode: "HTML",
										reply_markup: {
											resize_keyboard: true,
											keyboard: [["Riprendi battaglia ‚òÑÔ∏è"],["Torna al menu"]]
										}
									};
								} else {
									text += "Si sta avvicinando una grossa creatura verso la magione del team...";
									var kb = {
										parse_mode: "HTML",
										reply_markup: {
											resize_keyboard: true,
											keyboard: [["Attendi l'arrivo..."],["Torna al menu"]]
										}
									};
								}

								bot.sendMessage(message.chat.id, text, kb);
							});
						} else if (phase == 3) {
							var d = new Date(time_end);
							var now = new Date();
							var diff = Math.round((now - d) / 1000); //in secondi
							diff = Math.abs(diff);

							var kb = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Torna al team"], ["Torna al menu"]]
								}
							};

							bot.sendMessage(message.chat.id, "Il <b>Giorno dell'Assalto " + (boss_num-1) + "</b> √® stato completato, attendi ancora " + toTime(diff) + "!", kb);
						}
					}
				});
			});
		});
	});
});

bot.onText(/riprendi battaglia/i, function (message) {
	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Riprendi battaglia"],["Torna al menu"]]
		}
	};

	var kbBack2 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna all'assalto"],["Torna al menu"]]
		}
	};

	var kbBack3 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Incrementi effettuati"],["Torna all'assalto"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday, account_id, life FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;
		var player_life = rows[0].life;

		connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}

			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				if (rows[0].role > 0)
					isAdmin = 1;

				connection.query('SELECT name, kill_num, boss_count, level, boost_id FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;

					var team_boost_id = rows[0].boost_id;
					var kill_num = rows[0].kill_num;
					var boss_count = rows[0].boss_count;
					var team_level = rows[0].level;
					var team_name = rows[0].name;

					connection.query('SELECT level FROM team_boost WHERE team_id = ' + team_id + ' AND boost_id = 1', function (err, rows, fields) {
						if (err) throw err;

						var team_boost_damage = 0;
						if (Object.keys(rows).length > 0)
							team_boost_damage = 0.03 * rows[0].level;

						connection.query('SELECT level FROM team_boost WHERE team_id = ' + team_id + ' AND boost_id = 3', function (err, rows, fields) {
							if (err) throw err;

							var team_boost_defense = 0;
							if (Object.keys(rows).length > 0)
								team_boost_defense = (0.03 * rows[0].level);

							connection.query('SELECT place_id, role FROM assault_place_player_id WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "Non puoi partecipare al Giorno dell'Assalto senza aver partecipato al Giorno della Preparazione", kbBack2);
									return;
								}

								var elected = 0;
								if (rows[0].role == 1)
									elected = 1;

								var place_id = rows[0].place_id;

								connection.query('SELECT active FROM assault_place_team WHERE team_id = ' + team_id + ' AND place_id = ' + place_id, function (err, rows, fields) {
									if (err) throw err;

									var place_active = 1;
									if (Object.keys(rows).length > 0)
										place_active = rows[0].active;

									connection.query('SELECT P.nickname FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.role = 1 AND AP.team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;

										var elected_nickname = "";
										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Il team non possiede alcun eletto!", kbBack2);
											return;
										}

										elected_nickname = rows[0].nickname;

										connection.query('SELECT * FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length == 0) {
												bot.sendMessage(message.chat.id, "Il team deve essere iscritto agli assalti!", kbBack2);
												return;
											}

											var phase = rows[0].phase;
											var completed = rows[0].completed;
											var assault_lost = rows[0].lost;
											var mob_name = rows[0].mob_name;
											if (mob_name == null) {
												bot.sendMessage(message.chat.id, "Il mob non ha ancora raggiunto la magione!", kbBack3);
												return;
											}
											var mob_life = rows[0].mob_life;
											var mob_total_life = rows[0].mob_total_life;
											var mob_turn = rows[0].mob_turn;
											var boss_num = rows[0].boss_num;
											var mob_count = rows[0].mob_count;
											var is_boss = rows[0].is_boss;
											var epic_var = rows[0].epic_var;
											var epic_var_record = rows[0].epic_var_record;

											if (phase != 2) {
												bot.sendMessage(message.chat.id, "Non sei ancora nel Giorno dell'Assalto!", kbBack2);
												return;
											}

											connection.query("SELECT place_weak, place_strong FROM assault_mob_weak WHERE team_id = " + team_id + " AND mob_num = " + mob_count + " AND is_boss = " + is_boss, function (err, rows, fields) {
												if (err) throw err;

												var mob_place_weak = 0;
												var mob_place_strong = 0;
												if (Object.keys(rows).length > 0) {
													mob_place_weak = rows[0].place_weak;
													mob_place_strong = rows[0].place_strong;
												}

												connection.query("SELECT COUNT(id) As cnt FROM assault_place_miniboost WHERE team_id = " + team_id, function (err, rows, fields) {
													if (err) throw err;

													var miniboost_count = rows[0].cnt;
													var active = "Attiva ‚öôÔ∏è";
													var text = "\n\nProsegui lo scontro per sconfiggere i nemici!";

													var kb = {
														parse_mode: "HTML",
														reply_markup: {
															resize_keyboard: true,
															keyboard: [["Scatena attacco ‚òÑÔ∏è"], ["Incita üí¢", "Incremento üí¢"], ["Partecipanti üë•"], ["Notifiche üí§"], ["Cambia eletto üó°", "Arrenditi üè≥"],["Torna al menu"]]
														}
													};

													if ((elected == 1) && ((place_id == 1) || (place_id == 2))) {
														if (place_active == 1)
															active = "Disattiva ‚öôÔ∏è";

														kb = {
															parse_mode: "HTML",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [["Scatena attacco ‚òÑÔ∏è"], ["Incita üí¢", "Incremento üí¢"], ["Partecipanti üë•", active], ["Notifiche üí§"], ["Cambia eletto üó°", "Arrenditi üè≥"],["Torna al menu"]]
															}
														};
													} else if ((elected == 0) && (isAdmin == 0)) {
														kb = {
															parse_mode: "HTML",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [["Incita üí•", "Incremento üí¢"], ["Notifiche üí§"], ["Partecipanti üë•", "Torna al menu"]]
															}
														};

														if ((place_id == 1) || (place_id == 2)) {
															if (place_active == 1)
																active = "Disattiva ‚öôÔ∏è";

															kb = {
																parse_mode: "HTML",
																reply_markup: {
																	resize_keyboard: true,
																	keyboard: [["Incita üí•", "Incremento üí¢"], [active, "Notifiche üí§"], ["Partecipanti üë•", "Torna al menu"]]
																}
															};
														}
													} else if ((elected == 0) && (isAdmin == 1)) {
														kb = {
															parse_mode: "HTML",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [["Incita üí•", "Incremento üí¢"], ["Cambia eletto üó°", "Partecipanti üë•"], ["Notifiche üí§", "Torna al menu"]]
															}
														};

														if ((place_id == 1) || (place_id == 2)) {
															if (place_active == 1)
																active = "Disattiva ‚öôÔ∏è";
															kb = {
																parse_mode: "HTML",
																reply_markup: {
																	resize_keyboard: true,
																	keyboard: [["Incita üí•", "Incremento üí¢"], [active], ["Cambia eletto üó°", "Partecipanti üë•"], ["Notifiche üí§", "Torna al menu"]]
																}
															};
														}
													}

													if (elected == 0)
														text = "\n\nIncita l'eletto <b>" + elected_nickname + "</b> a proseguire lo scontro e attiva l'incremento!";

													if (miniboost_count > 1)
														text += "\n\nSono stati attivati <b>" + miniboost_count + "</b> incrementi";
													else if (miniboost_count == 1)
														text += "\n\nE' stato attivato <b>1</b> incremento";

													var gender_mob = "";
													if (!is_boss) {
														gender_mob = " un";
														if (mob_name.split(" ")[0].slice(-1) == "a")
															gender_mob = " una";
													}

													var extra = "";
													if (is_boss == 1)
														extra = ", uno dei temibili boss!";

													bot.sendMessage(message.chat.id, "Davanti alla magione del team si erge" + gender_mob + " <b>" + mob_name + "</b>" + extra + "\nSalute: " + progressBar(mob_life, mob_total_life) + " " + formatNumber(mob_life) + "/" + formatNumber(mob_total_life) + text, kb).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if ((answer.text == "Torna al team") || (answer.text == "Torna al menu"))
																return;

															// ricontrollo eletto
															var check = connection_sync.query('SELECT role FROM assault_place_player_id WHERE team_id = ' + team_id + ' AND player_id = ' + player_id);

															if (Object.keys(check).length == 0)
																return;

															elected = 0;
															if (check[0].role == 1)
																elected = 1;

															//console.log("Check: " + player_id + " " + elected);

															if ((answer.text.toLowerCase().indexOf("scatena") != -1) && (elected == 0)) {
																bot.sendMessage(message.chat.id, "Solo l'eletto pu√≤ scatenare lo scontro!", kbBack);
																return;
															}

															if ((answer.text.toLowerCase().indexOf("cambia") != -1) && (elected == 0) && (isAdmin == 0)) {
																bot.sendMessage(message.chat.id, "Solo l'eletto e gli admin possono passare il potere ad un altro membro!", kbBack);
																return;
															}

															if ((answer.text.toLowerCase().indexOf("arrenditi") != -1) && (elected == 0)) {
																bot.sendMessage(message.chat.id, "Solo l'eletto pu√≤ arrendersi!", kbBack);
																return;
															}

															if (answer.text.toLowerCase().indexOf("notifiche") != -1)
																return;

															if (answer.text.toLowerCase().indexOf("attiva") != -1) {
																if ((place_id == 1) || (place_id == 2)) {
																	connection.query('SELECT active FROM assault_place_team WHERE team_id = ' + team_id + ' AND place_id = ' + place_id, function (err, rows, fields) {
																		if (err) throw err;

																		if (Object.keys(rows).length == 0) {
																			bot.sendMessage(message.chat.id, "Postazione non valida!", kbBack);
																			return;
																		}

																		if (rows[0].active == 0) {
																			connection.query('UPDATE assault_place_team SET active = 1 WHERE team_id = ' + team_id + ' AND place_id = ' + place_id, function (err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "La postazione √® stata attivata!", kbBack);
																			});
																		} else {
																			connection.query('UPDATE assault_place_team SET active = 0 WHERE team_id = ' + team_id + ' AND place_id = ' + place_id, function (err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "La postazione √® stata disattivata!", kbBack);
																			});
																		}
																	});
																} else
																	bot.sendMessage(message.chat.id, "Questo tipo di postazione non pu√≤ essere disattivata!", kbBack);
																return;
															}

															if (answer.text.toLowerCase().indexOf("incita") != -1) {
																if (player_life <= 0) {
																	bot.sendMessage(message.chat.id, "Non puoi incitare senza salute!", kbBack);
																	return;
																}
																if (elected == 0) {
																	connection.query('SELECT lock_time_end FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
																		if (err) throw err;
																		if (rows[0].lock_time_end != null) {
																			var d = new Date(rows[0].lock_time_end);
																			bot.sendMessage(message.chat.id, "L'eletto √® stato incitato da poco! Riprova alle " + addZero(d.getHours()) + ":" + addZero(d.getMinutes()) + "!", kbBack);
																			return;
																		}
																		connection.query('SELECT P.chat_id FROM player P, assault_place_player_id AP WHERE AP.team_id = ' + team_id + ' AND AP.role = 1 AND P.id = AP.player_id', function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(rows[0].chat_id, message.from.username + " ti incita a proseguire l'assalto!");
																			bot.sendMessage(message.chat.id, "Hai incitato l'eletto a proseguire lo scontro!", kbBack);
																			connection.query('UPDATE assault SET lock_time_end = DATE_ADD(NOW(), INTERVAL 10 MINUTE) WHERE team_id = ' + team_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		});
																	});
																} else {
																	connection.query('SELECT elected_lock_time_end FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
																		if (err) throw err;
																		if (rows[0].elected_lock_time_end != null) {
																			var d = new Date(rows[0].elected_lock_time_end);
																			bot.sendMessage(message.chat.id, "I membri mancanti sono stati incitati da poco! Riprova alle " + addZero(d.getHours()) + ":" + addZero(d.getMinutes()) + "!", kbBack);
																			return;
																		}
																		connection.query('SELECT P.nickname, P.chat_id FROM player P, assault_place_miniboost APM RIGHT JOIN assault_place_player_id APP ON APM.player_id = APP.player_id AND APM.team_id = APP.team_id WHERE APM.player_id IS NULL AND P.id = APP.player_id AND APP.player_id != ' + player_id + ' AND APP.team_id = ' + team_id, function (err, rows, fields) {
																			if (err) throw err;

																			var text = "";
																			if (Object.keys(rows).length == 0) {
																				bot.sendMessage(message.chat.id, "Tutti i partecipanti abilitati hanno gi√† attivato l'incremento!", kbBack);
																			} else {
																				for(i = 0; i < Object.keys(rows).length; i++) {
																					bot.sendMessage(rows[i].chat_id, "L'eletto ti incita ad attivare l'incremento per l'assalto!");
																					text += "<b>" + rows[i].nickname + "</b>, ";
																				}
																				text = text.slice(0, -2);
																				bot.sendMessage(message.chat.id, "Hai incitato " + text + " ad attivare gli incrementi!", kbBack);

																				connection.query('UPDATE assault SET elected_lock_time_end = DATE_ADD(NOW(), INTERVAL 10 MINUTE) WHERE team_id = ' + team_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			}
																		});
																	});
																}
																return;
															}

															if (answer.text.toLowerCase().indexOf("incremento") != -1)	// attiva la funzione fuori
																return;

															if (answer.text.toLowerCase().indexOf("partecipanti") != -1) {
																connection.query('SELECT P.id As player_id, P.nickname, P.life, P.total_life, A.name, AP.place_id, AP.role, APT.level, AP.killed, APT.active, IF(APM.id IS NULL, 0, 1) As miniboost, C.name As class_name FROM class C, player P, assault_place_player_id AP LEFT JOIN assault_place_miniboost APM ON (AP.player_id = APM.player_id), assault_place A, assault_place_team APT WHERE C.id = P.class AND APT.place_id = A.id AND APT.team_id = AP.team_id AND AP.team_id = ' + team_id + ' AND P.id = AP.player_id AND A.id = AP.place_id ORDER BY AP.place_id', function (err, rows, fields) {
																	if (err) throw err;

																	var text = "Lista dei partecipanti a questo assalto:\n";
																	var place_id_break = 0;
																	var role_text = "";
																	var killed_text = "";
																	var active = "";
																	var miniboost = "";
																	for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																		if (place_id_break != rows[i].place_id) {
																			active = "";
																			if ((rows[i].place_id == 1) || (rows[i].place_id == 2)) {
																				if (rows[i].active == 1)
																					active = " - <i>Attivata</i>";
																				else
																					active = " - <i>Disattivata</i>";
																			}
																			text += "\n<b>" + rows[i].name + "</b> (Lv " + rows[i].level + active + "):\n";
																			place_id_break = rows[i].place_id;
																		}
																		miniboost = "";
																		if (rows[i].miniboost == 1)
																			miniboost = " üí¢";
																		role_text = "";
																		if (rows[i].role == 1)
																			role_text = " üó°";
																		killed_text = "";
																		if (rows[i].killed == 1)
																			killed_text = " " + assaultEmojiList[11];

																		text += "> " + rows[i].nickname + " " + classSym(rows[i].class_name) + " - " + formatNumber(rows[i].life) + "/" + formatNumber(rows[i].total_life) + role_text + killed_text + miniboost + "\n";
																	}

																	text += "\nState affrontando tutti insieme il boss n. " + boss_num + "!";

																	bot.sendMessage(message.chat.id, text, kbBack);
																});
																return;
															}

															if (answer.text.toLowerCase().indexOf("cambia") != -1) {
																connection.query('SELECT P.nickname FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND AP.role = 0 ORDER BY AP.id', function (err, rows, fields) {
																	if (err) throw err;

																	if (Object.keys(rows).length == 0) {
																		bot.sendMessage(message.chat.id, "Nessun membro √® disponibile per essere impostato come eletto", kbBack);
																		return;
																	}

																	var iKeys = [];
																	for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																		iKeys.push([rows[i].nickname]);

																	iKeys.push(["Riprendi battaglia"]);

																	var kb = {
																		parse_mode: "Markdown",
																		reply_markup: {
																			resize_keyboard: true,
																			keyboard: iKeys
																		}
																	};

																	bot.sendMessage(message.chat.id, "Seleziona il nuovo eletto che avr√† il potere di avviare gli scontri nell'assalto", kb).then(function () {
																		answerCallbacks[message.chat.id] = function (answer) {
																			if (answer.text != "Riprendi battaglia") {
																				var nickname = answer.text;

																				connection.query('SELECT P.chat_id FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND AP.role = 1', function (err, rows, fields) {
																					if (err) throw err;

																					var old_chat_id = rows[0].chat_id;

																					connection.query('SELECT P.id, P.chat_id, P.nickname FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND P.nickname = "' + nickname + '"', function (err, rows, fields) {
																						if (err) throw err;

																						if (Object.keys(rows).length == 0) {
																							bot.sendMessage(message.chat.id, "Giocatore non valido", kbBack);
																							return;
																						}

																						var new_player_id = rows[0].id;
																						var chat_id = rows[0].chat_id;
																						var new_nickname = rows[0].nickname;

																						if ((player_id == new_player_id) && (elected == 1)) {
																							bot.sendMessage(message.chat.id, "Sei gi√† l'eletto", kbBack);
																							return;
																						}

																						if (player_id == new_player_id) {	// per admin che si auto assegna
																							connection.query('UPDATE assault_place_player_id SET role = 1 WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							connection.query('UPDATE assault_place_player_id SET role = 0 WHERE team_id = ' + team_id + ' AND player_id != ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																						} else {
																							connection.query('UPDATE assault_place_player_id SET role = 1 WHERE team_id = ' + team_id + ' AND player_id = ' + new_player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							connection.query('UPDATE assault_place_player_id SET role = 0 WHERE team_id = ' + team_id + ' AND player_id != ' + new_player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});
																						}

																						if (isAdmin == 0) {		
																							bot.sendMessage(message.chat.id, new_nickname + " √® il nuovo eletto!", kbBack);
																							bot.sendMessage(chat_id, "Sei il nuovo eletto, ora guida il team nello scontro!");
																						} else {
																							if (player_id == new_player_id) {
																								bot.sendMessage(message.chat.id, "Hai rimosso l'eletto precedente e ti sei auto-proclamato come nuovo eletto", kbBack);
																							} else {
																								bot.sendMessage(message.chat.id, "Hai proclamato " + new_nickname + " come nuovo eletto!", kbBack);
																								bot.sendMessage(chat_id, "Sei il nuovo eletto, ora guida il team nello scontro!");
																							}
																							bot.sendMessage(old_chat_id, "L'amministratore ti ha rimosso la carica di eletto!");
																						}
																					});
																				});
																			}
																		}
																	});
																});
																return;
															}

															if (answer.text.toLowerCase().indexOf("arrenditi") != -1) {
																var kb = {
																	parse_mode: "HTML",
																	reply_markup: {
																		resize_keyboard: true,
																		keyboard: [["Si"],["Riprendi battaglia"],["Torna al menu"]]
																	}
																};

																bot.sendMessage(message.chat.id, "Sei sicuro di volerti arrendere?\nTutte le strutture verranno distrutte insieme agli eventuali oggetti al loro interno e l'assalto verr√† contrassegnato come fallito", kb).then(function () {
																	answerCallbacks[message.chat.id] = function (answer) {
																		if (answer.text.toLowerCase() == "si") {
																			connection.query('SELECT chat_id FROM assault_place_player_id APP, player WHERE APP.player_id = player.id AND APP.team_id = ' + team_id + ' ORDER BY APP.id', function (err, rows, fields) {
																				if (err) throw err;
																				for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																					bot.sendMessage(rows[i].chat_id, "L'eletto ha deciso di <b>arrendersi</b>, magari andr√† meglio la prossima volta", back_html);
																				assaultEnd(team_id);
																			});
																		}
																	}
																});
																return;
															}

															if (answer.text.toLowerCase().indexOf("scatena") == -1)
																return;

															var miniboost_text = "";
															var miniboost_arr = []; // dove l'indice √® la postazione, partendo da 0
															var place_cnt = connection_sync.query("SELECT 1 FROM assault_place");
															for (var i = 0, len = Object.keys(place_cnt).length; i < len; i++)
																miniboost_arr[i] = 0;

															var miniboost = connection_sync.query("SELECT APM.place_id, AP.name, COUNT(APM.place_id) As cnt FROM assault_place_miniboost APM, assault_place AP WHERE APM.place_id = AP.id AND APM.team_id = " + team_id + " GROUP BY APM.place_id ORDER BY APM.place_id");
															if ((Object.keys(miniboost).length > 0) && (miniboost[0].place_id != null)) {
																miniboost_text = "üí¢ Incrementi attivati:";
																var minitext = "";
																var minival = 0;
																var miniunit = "";
																var minivalTot = 0;
																for (var i = 0, len = Object.keys(miniboost).length; i < len; i++) {
																	miniboost_arr[miniboost[i].place_id-1] = miniboost[i].cnt;
																	if (miniboost[i].place_id == 1) {
																		minival = 0.5;
																		minitext = "riduzione probabilit√† lancio incantesimi dei nemici";
																		miniunit = "%";
																	} else if (miniboost[i].place_id == 2) {
																		minival = 0.5;
																		minitext = "riduzione probabilit√† colpo critico dei nemici";
																		miniunit = "%";
																	} else if ((miniboost[i].place_id == 3) || (miniboost[i].place_id == 4)) {
																		minival = 0.5;
																		minitext = "probabilit√† colpo critico";
																		miniunit = "%";
																	} else if (miniboost[i].place_id == 7) {
																		minival = 2;
																		minitext = "danno";
																		miniunit = "%";
																	} else if (miniboost[i].place_id == 6) {
																		minival = 1;
																		minitext = "probabilit√† colpo";
																		miniunit = "%";
																	} else if (miniboost[i].place_id == 5) {
																		minival = 1;
																		minitext = "salute mura";
																		miniunit = "%";
																	} else if (miniboost[i].place_id == 8) {
																		minival = 3;
																		minitext = "della cura attuale ai giocatori";
																		miniunit = "%";
																	}
																	minivalTot = minival*miniboost[i].cnt;
																	miniboost_text += "\n> " + miniboost[i].name + " (+<b>" + minivalTot.toString().replace(".",",") + "</b>" + miniunit + " " + minitext + ")";
																}
																miniboost_text += "\n\n";
															}

															// Inizio battaglia

															var mob_type = "Mob " + (mob_count+1);
															if (is_boss)
																mob_type = "Boss";

															var final_report = "üìú Report battaglia del turno <i>" + (mob_turn+1) + "</i> contro <b>" + mob_name + "</b> (" + mob_type + "):\n\n";
															var mob_killed = 0;
															var damage = 0;
															var tot_damage = 0;

															final_report += miniboost_text;

															var players_num = connection_sync.query("SELECT COUNT(id) As cnt FROM assault_place_player_id WHERE team_id = " + team_id);
															players_num = players_num[0].cnt;

															// console.log("Fase 0: " + tot_damage);

															// Fase 1, piattaforma di lancio

															var place2 = connection_sync.query("SELECT level, active FROM assault_place_team WHERE place_id = 2 AND team_id = " + team_id);

															if ((Object.keys(place2).length > 0) && (place2[0].level > 0)) {
																var place2_level = place2[0].level;
																var place2_active = place2[0].active;
																epic_var++;

																if (place2_active == 1) {
																	var place2_class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND APP.team_id = " + team_id + " AND AP.class_bonus = P.class AND AP.id = 2");

																	var cons_text = "";
																	var calc_damage = 0;
																	var cnt = 0;
																	var lap_qnt = 5;
																	var cons = connection_sync.query("SELECT AP.item_id, I.cons_val, I.name, AP.id, AP.player_id, P.chat_id FROM assault_place_cons AP, item I, player P WHERE AP.player_id = P.id AND AP.item_id = I.id AND AP.team_id = " + team_id + " ORDER BY AP.id");
																	var cons2 = connection_sync.query("SELECT S.item_id, I.cons_val, I.name, S.id, S.player_id, P.chat_id, S.quantity FROM team_store S, item I, player P WHERE S.player_id = P.id AND S.item_id = I.id AND I.cons_val > 0 AND S.quantity >= " + lap_qnt + " AND S.team_id = " + team_id + " ORDER BY S.id");
																	if (Object.keys(cons).length+Object.keys(cons2).length > 0) {
																		if (Object.keys(cons).length > 0) {
																			for (var i = 0; i < Object.keys(cons).length; i++) {
																				if (cnt >= lap_qnt)
																					break;
																				calc_damage = Math.round(mob_total_life*(cons[i].cons_val/150));
																				calc_damage += calc_damage*(0.02*place2_class_bonus[0].cnt);
																				damage += calc_damage;
																				connection.query("DELETE FROM assault_place_cons WHERE id = " + cons[i].id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																				cons_text += "\n> " + cons[i].name;
																				cnt++;
																				epic_var++;
																			}
																		} else if (Object.keys(cons2).length > 0) {
																			for (var i = 0; i < Object.keys(cons2).length; i++) {
																				if (cnt >= lap_qnt)
																					break;
																				calc_damage = Math.round(mob_total_life*(cons2[i].cons_val/150));
																				calc_damage += calc_damage*(0.02*place2_class_bonus[0].cnt);
																				damage += calc_damage;
																				connection.query("UPDATE team_store SET quantity = quantity-" + lap_qnt + " WHERE id = " + cons2[i].id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																				cons_text += "\n> " + cons2[i].name + " üì¶";
																				cnt++;
																				epic_var++;
																			}
																		} else {
																			console.log("Ramo piattaforma di lancio non valido");
																			return;
																		}

																		var weak = "";
																		if (mob_place_weak == 2) {
																			damage += damage*0.25;
																			weak = " üî∫";
																		}

																		if ((is_boss) && (boss_num == 31)) {
																			damage = 0;
																			weak = " üö´";
																		}

																		damage = Math.round(damage);

																		mob_life -= damage;
																		if (mob_life <= 0)
																			mob_killed = 1;

																		if (damage > 0) {
																			final_report += assaultEmojiList[1] + " La Piattaforma di Lancio ha inflitto <b>" + formatNumber(damage) + "</b> danni" + weak + " consumando:" + cons_text + "\n\n";
																		} else
																			final_report += assaultEmojiList[1] + " La Piattaforma di Lancio non ha inflitto alcun danno al nemico!\n\n";
																	} else
																		final_report += assaultEmojiList[1] + " La Piattaforma di Lancio non contiene lanciabili, nessun danno al nemico!\n\n";
																} else
																	final_report += assaultEmojiList[1] + " La Piattaforma di Lancio √® stata disattivata!\n\n";
															} else
																final_report += assaultEmojiList[1] + " La Piattaforma di Lancio non √® stata costruita, nessun danno al nemico!\n\n";

															tot_damage += damage;
															damage = 0;

															if (mob_killed == 1) {
																saveEpic(team_id, epic_var);
																mobKilled(team_id, team_name, final_report, is_boss, mob_count, boss_num, mob_name, mob_turn, kill_num, team_level, epic_var, epic_var_record);
																return;
															}

															// console.log("Fase 1: " + tot_damage);

															// Fase 2, torre dello stregone

															var place1 = connection_sync.query("SELECT level, active FROM assault_place_team WHERE place_id = 1 AND team_id = " + team_id);

															if ((Object.keys(place1).length > 0) && (place1[0].level > 0)) {
																var place1_level = place1[0].level;
																var place1_active = place1[0].active;
																epic_var++;

																if (place1_active == 1) {
																	var player = connection_sync.query('SELECT COUNT(AP.id) As cnt FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 1');

																	var place1_class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 1");

																	var avg_dmg = 0;
																	var avg_players = connection_sync.query("SELECT P.exp, P.weapon, P.weapon_enchant, P.charm_id, P.power_dmg, P.class, P.reborn FROM assault_place_magic AP, player P WHERE AP.player_id = P.id AND AP.team_id = " + team_id);
																	if (Object.keys(avg_players).length > 0) {
																		var avg_tot = 0;
																		for (var i = 0, len = Object.keys(avg_players).length; i < len; i++) {
																			avg_tot += getPlayerDamage(avg_players[0].exp, avg_players[0].weapon, avg_players[0].weapon_enchant, avg_players[0].charm_id, avg_players[0].power_dmg, avg_players[0].class, avg_players[0].reborn);
																		}
																		avg_dmg = avg_tot/Object.keys(avg_players).length;
																	}

																	var magic = connection_sync.query("SELECT P.chat_id, P.class, P.reborn, AP.player_id, AP.id, AP.type, AP.power FROM assault_place_magic AP, player P WHERE AP.player_id = P.id AND AP.team_id = " + team_id + " ORDER BY AP.id");
																	if (Object.keys(magic).length > 0) {
																		var magic_player_id = magic[0].player_id;
																		var magic_class_id = magic[0].class;
																		var magic_reborn = magic[0].reborn;
																		var magic_power = magic[0].power;
																		var magic_type = magic[0].type;
																		var magic_power_base = magic_power;
																		var magic_name = "";
																		var magic_effect = "";
																		var magic_turn = 0;

																		var ability = connection_sync.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + magic_player_id + ' AND ability_id = 10');

																		var abBonus = 0;
																		var magicDouble = 0;
																		var rand = Math.random() * 100;
																		if (Object.keys(ability).length > 0)
																			abBonus = parseInt(ability[0].ability_level) * ability[0].val;
																		if ((magic_class_id == 4)  && (magic_reborn == 5) && ((magic_type == 3) || (magic_type == 4)))
																			abBonus += 25;
																		abBonus = abBonus+(player[0].cnt*5);
																		if (abBonus > rand) {
																			magic_power*2;
																			magicDouble = 1;
																			epic_var++;
																		}

																		var check = 0;
																		if (magicDouble == 1) {
																			if ((magic_class_id == 2) && (magic_reborn == 3)) {
																				magic_power += magic_power * 0.1;
																				magic_power += magic_power_base;
																				check = 1;
																			}
																			if ((magic_class_id == 2) && (magic_reborn == 4)) {
																				magic_power += magic_power * 0.25;
																				magic_power += magic_power_base;
																				check = 1;
																			}
																			if ((magic_class_id == 2) && (magic_reborn == 5)) {
																				magic_power += magic_power * 0.75;
																				magic_power += magic_power_base;
																				check = 1;
																			}
																			if ((magic_class_id == 3) && (magic_reborn == 5)) {
																				magic_power += magic_power * 0.3;
																				magic_power += magic_power_base;
																				check = 1;
																			}
																			if (check == 0)
																				magic_power += magic_power_base;
																		} else {
																			if ((magic_class_id == 2) && (magic_reborn == 3))
																				magic_power += magic_power * 0.1;
																			if ((magic_class_id == 2) && (magic_reborn == 4))
																				magic_power += magic_power * 0.25;
																			if ((magic_class_id == 2) && (magic_reborn == 5))
																				magic_power += magic_power * 0.75;
																			if ((magic_class_id == 3) && (magic_reborn == 5))
																				magic_power += magic_power * 0.3;
																		}

																		if ((magic_class_id == 8) && (magic_reborn > 1))
																			magic_power -= magic_power * 0.1;
																		if ((magic_class_id == 5) && (magic_reborn == 3) && (magic_type == 1))
																			magic_power += magic_power * 0.5;
																		if ((magic_class_id == 5) && (magic_reborn >= 4) && (magic_type == 1))
																			magic_power += magic_power * 1;

																		magic_power += magic_power*(0.02*place1_class_bonus[0].cnt);

																		var weak = "";
																		if (mob_place_weak == 1) {
																			magic_power += magic_power*0.10;
																			weak = " üî∫";
																		}

																		magic_power = Math.round(magic_power);
																		var range = Math.round(getRandomArbitrary(0, 8));
																		var damage_red = place1_level*magic_power*(5+(avg_dmg/100)+range);
																		damage_red = Math.round(damage_red);
																		//console.log("damage_red: " + damage_red);
																		var apply = applyMagic(team_id, magic_type, magic_power, damage_red);

																		var magic_name = apply[0];
																		var magic_effect = apply[1];
																		var damage = apply[2];
																		damage = incremDamage(damage, players_num, mob_turn);

																		if (magic_type != 3)
																			damage = 0;

																		connection.query("DELETE FROM assault_place_magic WHERE id = " + magic[0].id, function (err, rows, fields) {
																			if (err) throw err;
																		});

																		var magic_double = "";
																		if (magicDouble == 1)
																			magic_double = " (raddoppiata)";

																		setAchievement(magic_player_id, 6, 1);

																		if (damage > 0) {
																			mob_life -= damage;
																			if (mob_life <= 0)
																				mob_killed = 1;
																		}

																		final_report += assaultEmojiList[0] + " La Torre dello Stregone ha lanciato <b>" + magic_name + " " + magic_power + "</b>" + magic_effect + magic_double + weak + "\n\n";
																		epic_var++;
																	} else
																		final_report += assaultEmojiList[0] + " La Torre dello Stregone non contiene alcun incantesimo, nessun danno al nemico!\n\n";
																} else
																	final_report += assaultEmojiList[0] + " La Torre dello Stregone √® stata disattivata!\n\n";
															} else
																final_report += assaultEmojiList[0] + " La Torre dello Stregone non √® stata costruita, nessun danno al nemico!\n\n";

															tot_damage += damage;
															damage = 0;

															if (mob_killed == 1) {
																saveEpic(team_id, epic_var);
																mobKilled(team_id, team_name, final_report, is_boss, mob_count, boss_num, mob_name, mob_turn, kill_num, team_level, epic_var, epic_var_record);
																return;
															}

															// console.log("Fase 2: " + tot_damage);

															// Fase 2.5, campo militare

															var place7 = connection_sync.query("SELECT level FROM assault_place_team WHERE place_id = 7 AND team_id = " + team_id);

															var military_bonus = 0;
															if ((Object.keys(place7).length > 0) && (place7[0].level > 0)) {
																epic_var++;
																var place7_level = place7[0].level;

																var place7_class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 7");

																var player = connection_sync.query('SELECT COUNT(AP.id) As cnt FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 7');

																military_bonus = place7_level+(player[0].cnt*5);
																military_bonus += military_bonus*(0.02*place7_class_bonus[0].cnt);

																final_report += assaultEmojiList[6] + " Il Campo Militare fornisce <b>" + military_bonus.toString().replace(".",",") + "</b>% bonus al danno delle artiglierie!\n\n";
															} else
																final_report += assaultEmojiList[6] + " Il Campo Militare non √® stato costruito, nessun bonus al danno!\n\n";

															// console.log("Fase 2.5: " + tot_damage);

															// Fase 3, artiglieria leggera

															var mob = connection_sync.query("SELECT team_paralyzed, team_critic FROM assault WHERE team_id = " + team_id);
															var team_paralyzed = mob[0].team_paralyzed;
															var team_critic = mob[0].team_critic;

															var place4 = connection_sync.query("SELECT level FROM assault_place_team WHERE place_id = 4 AND team_id = " + team_id);

															var full_damage = 0;

															if ((Object.keys(place4).length > 0) && (place4[0].level > 0)) {
																epic_var++;
																var place4_level = place4[0].level;

																var place4_class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 4");

																var player = connection_sync.query('SELECT P.* FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 4 ORDER BY AP.id');

																if (Object.keys(player).length > 0) {
																	var playerid = 0;
																	var class_id = 0;
																	var reborn = 0;
																	var exp = 0;
																	var weapon = 0;
																	var weapon_id = 0;
																	var weapon_enchant = 0;
																	var weapon_crit = 0;
																	var weapon2_crit = 0;
																	var weapon3_crit = 0;
																	var charm_id = 0;
																	var power_dmg = 0;
																	var power_weapon = 0;
																	var power_armor = 0;
																	var power_shield = 0;
																	var boost_mission = 0;
																	var boost_id = 0;

																	var damage = 0;
																	var critical = 0;
																	var crit = [];
																	var dragon = [];

																	var player_text = "";

																	var magic1 = 0;
																	var magic2 = 0;
																	var magic3 = 0;
																	var magic4 = 0;

																	var magic_effect = "";
																	var finalM;

																	for (var i = 0, len = Object.keys(player).length; i < len; i++) {

																		var status = [];

																		playerid = player[i].id;
																		class_id = player[i].class;
																		reborn = player[i].reborn;
																		exp = player[i].exp;
																		weapon = player[i].weapon;
																		weapon_id = player[i].weapon_id;
																		weapon_crit = player[i].weapon_crit;
																		weapon2_crit = player[i].weapon2_crit;
																		weapon3_crit = player[i].weapon3_crit;
																		weapon_enchant = player[i].weapon_enchant;
																		charm_id = player[i].charm_id;
																		power_dmg = player[i].power_dmg;
																		power_weapon = player[i].power_weapon;
																		power_armor = player[i].power_armor;
																		power_shield = player[i].power_shield;
																		boost_mission = player[i].boost_mission;
																		boost_id = player[i].boost_id;

																		magic1 = 0;
																		magic2 = 0;
																		magic3 = 0;
																		magic4 = 0;

																		damage = getPlayerDamage(exp, weapon, weapon_enchant, charm_id, power_dmg, class_id, reborn);
																		crit = getPlayerCritics(playerid, weapon_crit, weapon2_crit, weapon3_crit, charm_id, power_weapon, power_armor, power_shield, class_id, reborn);
																		dragon = getPlayerDragon(playerid, class_id, reborn, charm_id);

																		damage += dragon[0];
																		critical = crit[0]+dragon[2];

																		var magic_rand = Math.random() * 100;
																		var magic_type = 0;
																		var magic_power = 0;
																		var magic_enchant = 0;
																		if (magic_rand < 5) {
																			if (weapon_id == 630) {
																				magic_type = 2;
																				magic_power = 50;
																				magic_enchant = 1;
																				epic_var++;
																			} else if (weapon_id == 631) {
																				magic_type = 3;
																				magic_power = 50;
																				magic_enchant = 1;
																				epic_var++;
																			} else if (weapon_id == 632) {
																				magic_type = 1;
																				magic_power = 50;
																				magic_enchant = 1;
																				epic_var++;
																			}
																		}
																		if (magic_rand < 10) {
																			if (weapon_id == 638) {
																				magic_type = 2;
																				magic_power = 200;
																				magic_enchant = 1;
																				epic_var++;
																			} else if (weapon_id == 639) {
																				magic_type = 3;
																				magic_power = 150;
																				magic_enchant = 1;
																				epic_var++;
																			} else if (weapon_id == 640) {
																				magic_type = 1;
																				magic_power = 150;
																				magic_enchant = 1;
																				epic_var++;
																			}
																		}
																		if (magic_rand < 30) {
																			if (weapon_id == 754) {
																				var randMagic = Math.round(getRandomArbitrary(1, 4));
																				magic_type = randMagic;
																				magic_power = 150;
																				magic_enchant = 1;
																				epic_var++;
																			}
																		}

																		// Incantamento
																		if ((magic_rand > 80) && (weapon_enchant > 0) && (magic_enchant == 0)) {
																			if (weapon_enchant == 1) {
																				magic_type = 1;
																				magic_power = 50;
																				epic_var++;
																			} else if (weapon_enchant == 2) {
																				magic_type = 2;
																				magic_power = 150;
																				epic_var++;
																			} else if (weapon_enchant == 3) {
																				magic_type = 3;
																				magic_power = 50;
																				epic_var++;
																			}
																		}

																		if ((class_id == 8) && (reborn > 1))
																			magic_power -= magic_power * 0.1;
																		if ((class_id == 5) && (reborn == 3) && (magic_type == 1))
																			magic_power += magic_power * 0.5;
																		if ((class_id == 5) && (reborn >= 4) && (magic_type == 1))
																			magic_power += magic_power * 1;

																		if (magic_type == 1)
																			magic1 += magic_power;
																		else if (magic_type == 2)
																			magic2 += magic_power;
																		else if (magic_type == 3)
																			magic3 += magic_power;
																		else if (magic_type == 4)
																			magic4 += magic_power;

																		if (magic_type > 0)
																			setAchievement(playerid, 6, 1);

																		if (miniboost_arr[3] > 0)
																			critical += critical*(0.005*miniboost_arr[3]);

																		var rand = Math.random()*100;
																		if (critical > rand) {
																			damage = damage*2;
																			epic_var++;
																			status.push("critico");
																			setAchievement(playerid, 33, 1);
																		}

																		if (magic3 > 0) {
																			finalM = finalMagic3(team_id, magic3, damage);
																			damage = finalM[2];
																			status.push("danno da incantesimo");
																			epic_var++;
																		}

																		damage = damage*(place4_level/3+1);
																		damage += damage*(military_bonus/100);
																		damage += damage*(0.05*place4_class_bonus[0].cnt);
																		if ((boost_mission > 0) && (boost_id == 6) && (team_paralyzed == 0)) {
																			setBoost(playerid, boost_mission, boost_id);
																			damage = damage*2;
																		}

																		if (miniboost_arr[6] > 0)
																			damage += damage*(0.02*miniboost_arr[6]);

																		if (team_boost_id == 1)
																			damage += damage * 0.5;

																		damage += damage*team_boost_damage

																		var weak = "";
																		if (mob_place_weak == 4) {
																			damage += damage*0.25;
																			weak = " üî∫";
																		}

																		if (team_paralyzed > 0) {
																			damage = 0;
																			magic1 = 0;
																			magic2 = 0;
																			magic3 = 0;
																			magic4 = 0;
																			team_paralyzed--;
																			status.push("paralizzato");
																		}

																		var status_text = "";
																		if (status.length > 0)
																			status_text = " (" + status.join(", ") + ")";

																		damage = incremDamage(damage, players_num, mob_turn);

																		if (is_boss) {
																			if (boss_num == 28) {		// Hoenir
																				if (weapon_id == 638) {
																					damage = 0;
																					weak = " üö´";
																				}
																			} else if (boss_num == 29) {	// Hydros
																				if (weapon_id == 640) {
																					damage = 0;
																					weak = " üö´";
																				}
																			} else if (boss_num == 30) {	// Xocotl
																				if (weapon_id == 639) {
																					damage = 0;
																					weak = " üö´";
																				}
																			} else if (boss_num == 31) {	// Phonenix
																				if (weapon_id == 754) {
																					damage = 0;
																					weak = " üö´";
																				}
																			}
																		}

																		damage = Math.round(damage);

																		full_damage += damage;
																		mob_life -= damage;

																		if (damage > 0)
																			setAchievement(player[i].id, 2, damage);

																		player_text += "\n> " + player[i].nickname + " infligge <b>" + formatNumber(damage) + "</b> danni" + status_text + weak;

																		damage = 0;
																		epic_var++;

																		if (mob_life <= 0) {
																			mob_killed = 1;
																			break;
																		}
																	}

																	var magic_effect = "";
																	var finalM;
																	if (magic1 > 0) {
																		finalM = finalMagic1(team_id, magic1);
																		magic_effect += finalM[1];
																		epic_var++;
																	}
																	if (magic2 > 0) {
																		finalM = finalMagic2(team_id, magic2);
																		magic_effect += finalM[1];
																		epic_var++;
																	}
																	// il 3 (rosso) √® sopra perch√® incrementa il danno
																	if (magic4 > 0) {
																		finalM = finalMagic4(team_id, magic4);
																		magic_effect += finalM[1];
																		epic_var++;
																	}

																	if (magic_effect != "")
																		magic_effect = "\nInoltre vengono scagliati incantesimi dalla postazione" + magic_effect;

																	connection_sync.query("UPDATE assault SET team_paralyzed = " + team_paralyzed + ", team_critic = " + team_critic + " WHERE team_id = " + team_id);

																	full_damage = Math.round(full_damage);

																	final_report += assaultEmojiList[3] + " L'Artiglieria Leggera colpisce infliggendo in totale <b>" + formatNumber(full_damage) + "</b> danni: " + player_text + magic_effect + "\n\n";
																} else
																	final_report += assaultEmojiList[3] + " L'Artiglieria Leggera non ha nessuno al suo interno, nessun danno al nemico!\n\n";
															} else
																final_report += assaultEmojiList[3] + " L'Artiglieria Leggera non √® stata costruita, nessun danno al nemico!\n\n";

															tot_damage += full_damage;
															full_damage = 0;

															if (mob_killed == 1) {
																saveEpic(team_id, epic_var);
																mobKilled(team_id, team_name, final_report, is_boss, mob_count, boss_num, mob_name, mob_turn, kill_num, team_level, epic_var, epic_var_record);
																return;
															}

															// console.log("Fase 3: " + tot_damage);

															// Fase 4, attacco del mob

															var debug = 0;	// per debuggare danni

															var mob = connection_sync.query("SELECT mob_paralyzed, mob_critic, team_reduce FROM assault WHERE team_id = " + team_id);
															var mob_paralyzed = mob[0].mob_paralyzed;
															var mob_critic = mob[0].mob_critic;
															var team_reduce = mob[0].team_reduce;

															var mob_damage = mobDamage(boss_count, players_num, boss_num, mob_count, mob_turn, assault_lost, 0);

															if (debug)
																console.log("danni totali: " + mob_damage);

															var place5_damage = 0;
															var place5 = connection_sync.query("SELECT level, life, total_life FROM assault_place_team WHERE place_id = 5 AND team_id = " + team_id);

															var place5_text = "";
															var isWall = 0;

															var place5_total_damage = Math.round(mob_damage*0.5);

															if ((Object.keys(place5).length > 0) && (place5[0].level > 0)) {	
																epic_var++;
																var place5_class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 5");

																if (place5_total_damage > 0) {
																	epic_var++;
																	var life = place5[0].life+(place5[0].life*(0.02*place5_class_bonus[0].cnt));
																	var total_life = place5[0].total_life;
																	if (miniboost_arr[4] > 0)
																		life += life*(0.01*miniboost_arr[4]);

																	if (life > total_life)
																		life = total_life;

																	if (life < place5_total_damage) {
																		place5_damage = life;
																		life = 0;
																		place5_total_damage -= life;
																	} else if (life >= place5_total_damage) {
																		place5_damage = place5_total_damage;		
																		life -= place5_total_damage;
																		place5_total_damage = 0;
																	}

																	isWall = 1;
																	life = Math.round(life);
																	place5_damage = Math.round(place5_damage);
																	var resist = "(resistenza residua: " + formatNumber(life) + ")";
																	if (life <= 0)
																		resist = "(resistenza terminata)";
																	if (place5_damage > 0)
																		place5_text = ", le mura attutiscono <b>" + formatNumber(place5_damage) + "</b> danni " + resist;
																	else
																		place5_text = ", le mura non attutiscono danni " + resist;
																	connection_sync.query("UPDATE assault_place_team SET life = " + life + " WHERE place_id = 5 AND team_id = " + team_id);
																}
															} else
																final_report += assaultEmojiList[4] + " Le mura non sono state costruite, nessuna protezione aggiuntiva!\n\n";

															var other_damage = mob_damage-place5_total_damage;

															if (debug)
																console.log("residui dopo mura: " + other_damage);

															if (other_damage > 0) {
																epic_var++;

																var total_perc = 100;
																var player_place5_perc = 0;
																var player_place3_perc = 0;
																var player_place4_perc = 0;
																var player_place1_perc = 0;
																var player_place6_perc = 0;

																var wall_players = connection_sync.query('SELECT COUNT(id) As cnt FROM assault_place_player_id WHERE killed = 0 AND place_id = 5 AND team_id = ' + team_id);
																if ((Object.keys(place5).length > 0) && (place5[0].level > 0) && (wall_players[0].cnt > 0)) {
																	player_place5_perc = 50;
																	total_perc -= player_place5_perc;
																}

																var perc_players = connection_sync.query('SELECT place_id, COUNT(id) As cnt FROM assault_place_player_id WHERE killed = 0 AND place_id IN (5,3,4,1,6) AND team_id = ' + team_id + ' GROUP BY place_id HAVING cnt > 0');

																var perc_place_cnt = Object.keys(perc_players).length;
																var perc = Math.round(total_perc/perc_place_cnt);
																for (var i = 0; i < perc_place_cnt; i++) {
																	eval("player_place" + perc_players[i].place_id + "_perc = " + perc);
																	if (debug)
																		console.log(perc_players[i].place_id, perc);
																}

																var player = connection_sync.query('SELECT P.*, place_id, (SELECT COUNT(id) FROM assault_place_player_id WHERE place_id = AP.place_id AND team_id = AP.team_id) As cnt FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND place_id IN (5,3,4,1,6) AND killed = 0 ORDER BY FIELD(place_id,5,3,4,1,6), RAND()');

																if (Object.keys(player).length > 0) {
																	var playerid = 0;
																	var class_id = 0;
																	var reborn = 0;
																	var exp = 0;
																	var weapon = 0;
																	var weapon_crit = 0;
																	var weapon2_id = 0;
																	var weapon2_crit = 0;
																	var weapon2 = 0;
																	var weapon3 = 0;
																	var weapon3_id = 0;
																	var weapon3_crit = 0;
																	var weapon_enchant = 0;
																	var charm_id = 0;
																	var power_dmg = 0;
																	var power_weapon = 0;
																	var power_armor = 0;
																	var power_shield = 0;

																	var defence = 0;
																	var player_critical_armor = 0;
																	var player_critical_shield = 0;
																	var crit = [];
																	var dragon = [];

																	var player_life = 0;
																	var player_text = "";
																	var divided_damage = 0;
																	var divided_damage_att = 0;
																	var place_id_break = 0;

																	var diff_damage = 0;
																	var this_perc = 0;
																	var tot_perc = 0;
																	var place_cnt = connection_sync.query('SELECT place_id FROM assault_place_team WHERE place_id IN (5,3,4,1,6) AND team_id = ' + team_id);
																	for (var i = 0, len = Object.keys(place_cnt).length; i < len; i++)
																		tot_perc += eval("player_place" + place_cnt[i].place_id + "_perc");

																	for (var i = 0, len = Object.keys(player).length; i < len; i++) {
																		var status = [];
																		this_perc = eval("player_place" + player[i].place_id + "_perc");
																		divided_damage_att = other_damage * this_perc / (tot_perc*player[i].cnt);

																		if (divided_damage_att == NaN) {
																			console.log("divided_damage_att a NaN:");
																			console.log(divided_damage_att);
																			console.log(other_damage, this_perc, tot_perc, player[i].cnt);
																		}

																		if (debug)
																			console.log(player[i].nickname, Math.round(divided_damage_att));

																		if (mob_place_strong == player[i].place_id) {
																			divided_damage_att += divided_damage_att*0.25;
																			status.push("üîª");
																		}

																		playerid = player[i].id;
																		player_life = player[i].life;
																		class_id = player[i].class;
																		reborn = player[i].reborn;
																		exp = player[i].reborn;
																		weapon = player[i].weapon;
																		weapon_crit = player[i].weapon_crit;
																		weapon2 = player[i].weapon2;
																		weapon3 = player[i].weapon3;
																		weapon2_id = player[i].weapon2_id;
																		weapon2_crit = player[i].weapon2_crit;
																		weapon3_id = player[i].weapon3_id;
																		weapon3_crit = player[i].weapon3_crit;
																		weapon_enchant = player[i].weapon_enchant;
																		weapon2_enchant = player[i].weapon2_enchant;
																		weapon3_enchant = player[i].weapon3_enchant;
																		charm_id = player[i].charm_id;
																		power_dmg = player[i].power_dmg;
																		power_def = player[i].power_def;
																		power_weapon = player[i].power_weapon;
																		power_armor = player[i].power_armor;
																		power_shield = player[i].power_shield;

																		defence = getPlayerDefence(weapon2, weapon3, weapon_enchant, weapon2_enchant, weapon3_enchant, exp, power_def);
																		crit = getPlayerCritics(playerid, weapon_crit, weapon2_crit, weapon3_crit, charm_id, power_weapon, power_armor, power_shield, class_id, reborn);
																		dragon = getPlayerDragon(playerid, class_id, reborn, charm_id);

																		defence += dragon[1];
																		player_critical_armor = crit[1];
																		player_critical_shield = crit[2];

																		divided_damage_att -= defence;

																		if (charm_id == 63)
																			divided_damage_att -= 5;
																		else if (charm_id == 186)
																			divided_damage_att -= 15;
																		else if (charm_id == 189)
																			divided_damage_att -= 20;

																		if ((class_id == 2) && (reborn > 1))
																			divided_damage_att += divided_damage_att * 0.05;
																		if ((class_id == 6) && (reborn > 1))
																			divided_damage_att -= divided_damage_att * 0.15;
																		if ((class_id == 8) && (reborn > 1))
																			divided_damage_att += divided_damage_att * 0.1;
																		if ((class_id == 9) && (reborn > 1))
																			divided_damage_att += divided_damage_att * 0.1;

																		divided_damage_att -= divided_damage_att*team_boost_defense;

																		if (mob_paralyzed > 0) {
																			divided_damage_att = 0;
																			mob_paralyzed--;
																			status.push("paralizzato");
																		}

																		if (team_reduce > 0) {
																			divided_damage_att -= divided_damage_att*0.6;
																			team_reduce--;
																			status.push("ridotto");
																		}

																		if ((mob_critic > 0) && (mob_paralyzed == 0)) {
																			divided_damage_att = divided_damage_att*2;
																			mob_critic--;
																			status.push("colpo critico");
																		} else {
																			var critRand = Math.random()*100;
																			var prob = 10;

																			if (miniboost_arr[1] > 0)
																				prob -= prob*(0.005*miniboost_arr[1]);

																			if (prob > critRand) {
																				divided_damage_att = divided_damage_att*2;
																				status.push("colpo critico");
																			}
																		}

																		var rand = Math.random()*100;
																		var prob = 5;
																		if (is_boss == 1)
																			prob = 10;

																		if (miniboost_arr[0] > 0)
																			prob -= prob*(0.005*miniboost_arr[0]);

																		if (prob > rand) {
																			rand = Math.random()*100;
																			if (rand < 25)
																				magic_type = 1;
																			else if (rand < 50)
																				magic_type = 2;
																			else if (rand < 75)
																				magic_type = 3;
																			else
																				magic_type = 4;

																			if (magic_type == 1) {	// blu
																				var magic_rand = Math.random()*100;
																				var rand = Math.random()*100;
																				if ((weapon3_id == 673) || (weapon3_enchant == 1))
																					magic_rand -= 50;
																				else if (weapon3_id == 791)
																					magic_rand -= 25;
																				if (magic_rand > rand) {
																					epic_var++;
																					var heal = Math.round(mob_total_life*(players_num/400));
																					mob_life += heal;
																					if (mob_life > mob_total_life)
																						mob_life = mob_total_life;
																					player_text += "\nIl nemico lancia <b>" + magicToName(1) + "</b> e recupera " + formatNumber(heal) + " hp";
																					setAchievement(playerid, 66, 1);
																					if (((weapon2_id == 689) || (weapon2_enchant == 1)) || (weapon2_id == 790)) {
																						var rand = Math.random()*100;
																						var prob = 50;
																						if (weapon2_id == 790)
																							prob = 25;
																						if (rand < prob) {
																							var restore = Math.round(getRandomArbitrary(50, 150));
																							player_text += " (+" + restore + " üåä Mana Blu)";
																							connection.query('UPDATE event_mana_status SET mana_1 = mana_1 + ' + restore + ' WHERE player_id = ' + playerid, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							setAchievement(playerid, 29, restore);
																							setAchievement(playerid, 81, restore);
																						}
																					}
																				}
																			} else if (magic_type == 2) {	// giallo
																				var magic_rand = Math.random()*100;
																				var rand = Math.random()*100;
																				if ((weapon3_id == 671) || (weapon3_enchant == 2))
																					magic_rand -= 50;
																				else if (weapon3_id == 791)
																					magic_rand -= 25;
																				if (magic_rand > rand) {
																					epic_var++;
																					var turn = Math.round(getRandomArbitrary(3, 6));
																					connection_sync.query("UPDATE assault SET team_paralyzed = " + turn + " WHERE team_id = " + team_id);
																					var ally = "alleati";
																					if (turn == 1)
																						ally = "alleato";
																					player_text += "\nIl nemico lancia <b>" + magicToName(2) + "</b> e paralizza per " + turn + " " + ally;
																					setAchievement(playerid, 66, 1);
																					if (((weapon2_id == 690) || (weapon2_enchant == 2)) || (weapon2_id == 790)) {
																						var rand = Math.random()*100;
																						var prob = 50;
																						if (weapon2_id == 790)
																							prob = 25;
																						if (rand < prob) {
																							var restore = Math.round(getRandomArbitrary(50, 150));
																							player_text += " (+" + restore + " Mana Giallo ‚ö°Ô∏è)";
																							connection.query('UPDATE event_mana_status SET mana_2 = mana_2 + ' + restore + ' WHERE player_id = ' + playerid, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							setAchievement(playerid, 29, restore);
																							setAchievement(playerid, 81, restore);
																						}
																					}
																				}
																			} else if (magic_type == 3) {	// rosso
																				var magic_rand = Math.random()*100;
																				var rand = Math.random()*100;
																				if ((weapon3_id == 672) || (weapon3_enchant == 3))
																					magic_rand -= 50;
																				else if (weapon3_id == 791)
																					magic_rand -= 25;
																				if (magic_rand > rand) {
																					epic_var++;
																					divided_damage_att = divided_damage_att*3;
																					player_text += "\nIl nemico lancia <b>" + magicToName(3) + "</b> ed incrementa il suo danno";
																					setAchievement(playerid, 66, 1);
																					if (((weapon2_id == 688) || (weapon2_enchant == 3)) || (weapon2_id == 790)) {
																						var rand = Math.random()*100;
																						var prob = 50;
																						if (weapon2_id == 790)
																							prob = 25;
																						if (rand < prob) {
																							var restore = Math.round(getRandomArbitrary(50, 150));
																							player_text += " (+" + restore + " Mana Rosso üî•)";
																							connection.query('UPDATE event_mana_status SET mana_3 = mana_3 + ' + restore + ' WHERE player_id = ' + playerid, function (err, rows, fields) {
																								if (err) throw err;
																							});
																							setAchievement(playerid, 29, restore);
																							setAchievement(playerid, 81, restore);
																						}
																					}
																				}
																			} else if (magic_type == 4) {	// bianco
																				var magic_rand = Math.random()*100;
																				var rand = Math.random()*100;
																				if (weapon3_id == 791)
																					magic_rand -= 25;
																				if (magic_rand > rand) {
																					epic_var++;
																					var turn = Math.round(getRandomArbitrary(3, 6));
																					connection_sync.query("UPDATE assault SET mob_critic = " + turn + " WHERE team_id = " + team_id);
																					var ally = "alleati";
																					if (turn == 1)
																						ally = "alleato";
																					player_text += "\nIl nemico lancia " + magicToName(4) + " e aumenta la probabilit√† di critico contro " + turn + " " + ally;
																					setAchievement(playerid, 66, 1);
																				}
																			}
																		}

																		if (divided_damage_att > 0) {
																			var rand1 = Math.random()*100;
																			var rand2 = Math.random()*100;
																			if (player_critical_shield > rand2) {
																				divided_damage_att = 0;
																				status.push("üõ°");
																				setAchievement(playerid, 32, 1);
																			} else if (player_critical_armor > rand1) {
																				divided_damage_att = divided_damage_att/1.5;
																				status.push("ü•ã");
																				setAchievement(playerid, 31, 1);
																			}
																		}

																		divided_damage_att = Math.round(divided_damage_att);

																		var status_text = "";
																		if (status.length > 0)
																			status_text = " (" + status.join(", ") + ")";

																		if (debug)
																			console.log(player[i].nickname, divided_damage_att);

																		if (divided_damage_att < 0)
																			divided_damage_att = 0;

																		diff_damage = divided_damage_att-player_life;
																		player_life -= divided_damage_att;

																		if (player_life <= 0) {
																			player_life = 0;
																			var placeDestroyed = playerKilled(team_id, playerid, player[i].place_id, is_boss);
																			epic_var++;
																			status_text = ", viene ferito gravemente e accompagnato in infermeria üíâ";
																			status_text += placeDestroyed;

																			// riverso
																			if (diff_damage > 0)
																				other_damage += diff_damage;
																		}

																		defence = 0;

																		if (divided_damage_att == 0) {
																			if (status_text != "")
																				player_text += "\n> " + player[i].nickname + " non subisce danni" + status_text;
																		} else {
																			player_text += "\n> " + player[i].nickname + " subisce <b>" + formatNumber(divided_damage_att) + "</b> danni" + status_text;
																			setAchievement(playerid, 30, divided_damage_att);
																		}

																		connection_sync.query("UPDATE player SET life = " + player_life + " WHERE id = " + playerid);
																		epic_var++;
																	}

																	connection_sync.query("UPDATE assault SET mob_paralyzed = " + mob_paralyzed + ", mob_critic = " + mob_critic + ", team_reduce = " + team_reduce + " WHERE team_id = " + team_id);

																	if (player_text == "")
																		player_text = "\n> Ma nessuno viene colpito";

																	final_report += assaultEmojiList[8] + " Il nemico attacca" + place5_text + ":" + player_text + "\n\n";
																};
															} else {
																var extra = "";
																if (isWall == 1)
																	extra = " " + resist;
																final_report += assaultEmojiList[8] + " Il nemico attacca con un colpo da <b>" + formatNumber(place5_damage) + "</b> danni, ma le mura lo attutiscono completamente" + extra + "!\n\n";
															}

															if (checkAllKilled(team_id) == 1) {
																saveEpic(team_id, epic_var);
																console.log("Tutto il team sconfitto " + team_id);
																final_report += assaultEmojiList[10] + " I compagni non sono pi√π in grado di combattere, assalto fallito";

																connection.query('SELECT chat_id FROM assault_place_player_id APP, player WHERE APP.player_id = player.id AND APP.team_id = ' + team_id + ' ORDER BY APP.id', function (err, rows, fields) {
																	if (err) throw err;
																	for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																		bot.sendMessage(rows[i].chat_id, final_report, back_html);
																	assaultEnd(team_id);
																});
																return;
															}

															// console.log("Fase 4: " + tot_damage);

															// Fase 5, artiglieria pesante

															var mob = connection_sync.query("SELECT team_paralyzed, team_critic FROM assault WHERE team_id = " + team_id);
															var team_paralyzed = mob[0].team_paralyzed;
															var team_critic = mob[0].team_critic;

															var place3 = connection_sync.query("SELECT level FROM assault_place_team WHERE place_id = 3 AND team_id = " + team_id);

															if ((Object.keys(place3).length > 0) && (place3[0].level > 0)) {
																epic_var++;
																var place3_level = place3[0].level;

																var place3_class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 3");

																var player = connection_sync.query('SELECT P.* FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 3 ORDER BY AP.id');

																if (Object.keys(player).length > 0) {
																	var playerid = 0;
																	var class_id = 0;
																	var reborn = 0;
																	var exp = 0;
																	var weapon = 0;
																	var weapon_id = 0;
																	var weapon_crit = 0;
																	var weapon2 = 0;
																	var weapon3 = 0;
																	var weapon2_crit = 0;
																	var weapon3_crit = 0;
																	var weapon_enchant = 0;
																	var charm_id = 0;
																	var power_dmg = 0;
																	var power_weapon = 0;
																	var power_armor = 0;
																	var power_shield = 0;
																	var boost_mission = 0;
																	var boost_id = 0;

																	var magic1 = 0;
																	var	magic2 = 0;
																	var	magic3 = 0;
																	var	magic4 = 0;

																	var full_damage = 0;
																	var damage = 0;
																	var critical = 0;
																	var crit = [];
																	var dragon = [];

																	var player_text = "";

																	for (var i = 0, len = Object.keys(player).length; i < len; i++) {
																		var status = [];
																		playerid = player[i].id;
																		class_id = player[i].class;
																		reborn = player[i].reborn;
																		exp = player[i].exp;
																		weapon = player[i].weapon;
																		weapon_id = player[i].weapon_id;
																		weapon_crit = player[i].weapon_crit;
																		weapon2 = player[i].weapon2;
																		weapon3 = player[i].weapon3;
																		weapon2_crit = player[i].weapon2_crit;
																		weapon3_crit = player[i].weapon3_crit;
																		weapon_enchant = player[i].weapon_enchant;
																		charm_id = player[i].charm_id;
																		power_dmg = player[i].power_dmg;
																		power_weapon = player[i].power_weapon;
																		power_armor = player[i].power_armor;
																		power_shield = player[i].power_shield;
																		boost_mission = player[i].boost_mission;
																		boost_id = player[i].boost_id;

																		magic1 = 0;
																		magic2 = 0;
																		magic3 = 0;
																		magic4 = 0;

																		damage = getPlayerDamage(exp, weapon, weapon_enchant, charm_id, power_dmg, class_id, reborn);
																		crit = getPlayerCritics(playerid, weapon_crit, weapon2_crit, weapon3_crit, charm_id, power_weapon, power_armor, power_shield, class_id, reborn);
																		dragon = getPlayerDragon(playerid, class_id, reborn, charm_id);

																		damage += dragon[0];
																		critical = crit[0]+dragon[2];

																		var magic_rand = Math.random() * 100;
																		var magic_type = 0;
																		var magic_power = 0;
																		var magic_enchant = 0;
																		if (magic_rand < 5) {
																			if (weapon_id == 630) {
																				magic_type = 2;
																				magic_power = 50;
																				magic_enchant = 1;
																				epic_var++;
																			} else if (weapon_id == 631) {
																				magic_type = 3;
																				magic_power = 50;
																				magic_enchant = 1;
																				epic_var++;
																			} else if (weapon_id == 632) {
																				magic_type = 1;
																				magic_power = 50;
																				magic_enchant = 1;
																				epic_var++;
																			}
																		}
																		if (magic_rand < 10) {
																			if (weapon_id == 638) {
																				magic_type = 2;
																				magic_power = 200;
																				magic_enchant = 1;
																				epic_var++;
																			} else if (weapon_id == 639) {
																				magic_type = 3;
																				magic_power = 150;
																				magic_enchant = 1;
																				epic_var++;
																			} else if (weapon_id == 640) {
																				magic_type = 1;
																				magic_power = 150;
																				magic_enchant = 1;
																				epic_var++;
																			}
																		}
																		if (magic_rand < 30) {
																			if (weapon_id == 754) {
																				var randMagic = Math.round(getRandomArbitrary(1, 4));
																				magic_type = randMagic;
																				magic_power = 150;
																				magic_enchant = 1;
																				epic_var++;
																			}
																		}

																		// Incantamento
																		if ((magic_rand > 80) && (weapon_enchant > 0) && (magic_enchant == 0)) {
																			if (weapon_enchant == 1) {
																				magic_type = 1;
																				magic_power = 50;
																				epic_var++;
																			} else if (weapon_enchant == 2) {
																				magic_type = 2;
																				magic_power = 150;
																				epic_var++;
																			} else if (weapon_enchant == 3) {
																				magic_type = 3;
																				magic_power = 50;
																				epic_var++;
																			}
																		}

																		if ((class_id == 8) && (reborn > 1))
																			magic_power -= magic_power * 0.1;
																		if ((class_id == 5) && (reborn == 3) && (magic_type == 1))
																			magic_power += magic_power * 0.5;
																		if ((class_id == 5) && (reborn >= 4) && (magic_type == 1))
																			magic_power += magic_power * 1;

																		if (magic_type == 1)
																			magic1 += magic_power;
																		else if (magic_type == 2)
																			magic2 += magic_power;
																		else if (magic_type == 3)
																			magic3 += magic_power;
																		else if (magic_type == 4)
																			magic4 += magic_power;

																		if (magic_type > 0)
																			setAchievement(playerid, 6, 1);

																		if (miniboost_arr[2] > 0)
																			critical += critical*(0.005*miniboost_arr[2]);

																		var rand = Math.random()*100;
																		if ((critical+5) > rand) {				//per pesante
																			damage = damage*2;
																			epic_var++;
																			status.push("critico");
																			setAchievement(playerid, 33, 1);
																		}

																		if (magic3 > 0) {
																			finalM = finalMagic3(team_id, magic3, damage);
																			damage = finalM[2];
																			status.push("danno da incantesimo");
																			epic_var++;
																		}

																		damage = damage*(place3_level/2+3);		//per pesante
																		damage += damage*(military_bonus/100);
																		damage += damage*(0.05*place3_class_bonus[0].cnt);
																		if ((boost_mission > 0) && (boost_id == 6) && (team_paralyzed == 0)) {
																			setBoost(playerid, boost_mission, boost_id);
																			damage = damage*2;
																		}

																		if (miniboost_arr[6] > 0)
																			damage += damage*(0.02*miniboost_arr[6]);

																		if (team_boost_id == 1)
																			damage += damage * 0.5;

																		damage += damage*team_boost_damage

																		var weak = "";
																		if (mob_place_weak == 3) {
																			damage += damage*0.25;
																			weak = " üî∫";
																		}

																		if (team_paralyzed > 0) {
																			damage = 0;
																			magic1 = 0;
																			magic2 = 0;
																			magic3 = 0;
																			magic4 = 0;
																			team_paralyzed--;
																			status.push("paralizzato");
																		}

																		damage = incremDamage(damage, players_num, mob_turn);

																		if (is_boss) {
																			if (boss_num == 28) {		// Hoenir
																				if (weapon_id == 638) {
																					damage = 0;
																					weak = " üö´";
																				}
																			} else if (boss_num == 29) {	// Hydros
																				if (weapon_id == 640) {
																					damage = 0;
																					weak = " üö´";
																				}
																			} else if (boss_num == 30) {	// Xocotl
																				if (weapon_id == 639) {
																					damage = 0;
																					weak = " üö´";
																				}
																			} else if (boss_num == 31) {	// Phonenix
																				if (weapon_id == 754) {
																					damage = 0;
																					weak = " üö´";
																				}
																			}
																		}

																		damage = Math.round(damage);

																		full_damage += damage;
																		mob_life -= damage;

																		var status_text = "";
																		if (status.length > 0)
																			status_text = " (" + status.join(", ") + ")";

																		if (damage > 0)
																			setAchievement(player[i].id, 2, damage);

																		player_text += "\n> " + player[i].nickname + " infligge <b>" + formatNumber(damage) + "</b> danni" + status_text + weak;

																		damage = 0;
																		epic_var++;

																		if (mob_life <= 0) {
																			mob_killed = 1;
																			break;
																		}
																	}

																	var magic_effect = "";
																	var finalM;
																	if (magic1 > 0) {
																		finalM = finalMagic1(team_id, magic1);
																		magic_effect += finalM[1];
																		epic_var++;
																	}
																	if (magic2 > 0) {
																		finalM = finalMagic2(team_id, magic2);
																		magic_effect += finalM[1];
																		epic_var++;
																	}
																	// il 3 (rosso) √® sopra perch√® incrementa il danno
																	if (magic4 > 0) {
																		finalM = finalMagic4(team_id, magic4);
																		magic_effect += finalM[1];
																		epic_var++;
																	}

																	if (magic_effect != "")
																		magic_effect = "\nInoltre vengono scagliati incantesimi dalla postazione" + magic_effect;

																	connection_sync.query("UPDATE assault SET team_paralyzed = " + team_paralyzed + ", team_critic = " + team_critic + " WHERE team_id = " + team_id);

																	full_damage = Math.round(full_damage);

																	final_report += assaultEmojiList[2] + " L'Artiglieria Pesante colpisce infliggendo in totale <b>" + formatNumber(full_damage) + "</b> danni: " + player_text + magic_effect + "\n\n";
																} else
																	final_report += assaultEmojiList[2] + " L'Artiglieria Pesante non ha nessuno al suo interno, nessun danno al nemico!\n\n";
															} else
																final_report += assaultEmojiList[2] + " L'Artiglieria Pesante non √® stata costruita, nessun danno al nemico!\n\n";

															tot_damage += full_damage;
															full_damage = 0;

															if (mob_killed == 1) {
																saveEpic(team_id, epic_var);
																mobKilled(team_id, team_name, final_report, is_boss, mob_count, boss_num, mob_name, mob_turn, kill_num, team_level, epic_var, epic_var_record);
																return;
															}

															// console.log("Fase 5: " + tot_damage);

															// Fase 6, nido del drago

															var place6 = connection_sync.query("SELECT level FROM assault_place_team WHERE place_id = 6 AND team_id = " + team_id);

															if ((Object.keys(place6).length > 0) && (place6[0].level > 0)) {
																epic_var++;
																var place6_level = place6[0].level;

																var place6_class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 6");

																var player = connection_sync.query('SELECT P.* FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 6 ORDER BY AP.id');

																var prob = place6_level;
																var rand = Math.random()*100;
																var damage = 0;

																for (var i = 0, len = Object.keys(player).length; i < len; i++) {
																	var dragon = connection_sync.query('SELECT level FROM dragon WHERE player_id = ' + player[i].id);
																	if (Object.keys(dragon).length > 0)
																		damage += Math.floor(dragon[0].level/50);
																	prob += 5;
																	epic_var++;
																}

																if (miniboost_arr[5] > 0)
																	prob += prob*(0.01*miniboost_arr[5]);

																prob += place6_class_bonus[0].cnt*2;

																if (prob > rand) {
																	if (damage > 15)
																		damage = 15;
																	damage = mob_total_life*(damage/100);

																	var weak = "";
																	if (mob_place_weak == 6) {
																		damage += damage*0.25;
																		weak = " üî∫";
																	}
																	damage = Math.round(damage);
																	mob_life -= damage;

																	if (mob_life <= 0)
																		mob_killed = 1;

																	epic_var++;
																	final_report += assaultEmojiList[5] + " I draghi del nido si alzano in volo e attaccano il nemico infliggendo complessivamente <b>" + formatNumber(damage) + "</b> danni" + weak + "\n\n";
																}
															} else
																final_report += assaultEmojiList[5] + " Il Nido del Drago non √® stato costruito, nessun danno al nemico!\n\n";

															tot_damage += damage;
															damage = 0;

															if (mob_killed == 1) {
																saveEpic(team_id, epic_var);
																mobKilled(team_id, team_name, final_report, is_boss, mob_count, boss_num, mob_name, mob_turn, kill_num, team_level, epic_var, epic_var_record);
																return;
															}

															// console.log("Fase 6: " + tot_damage);

															// Fase 7, fabbrica di energia

															var place8 = connection_sync.query("SELECT level FROM assault_place_team WHERE place_id = 8 AND team_id = " + team_id);

															var place8_level = 0;	// importante per fase dopo

															if ((Object.keys(place8).length > 0) && (place8[0].level > 0)) {
																epic_var++;
																place8_level = place8[0].level;

																var place8_class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 8");

																var player = connection_sync.query('SELECT COUNT(AP.id) As cnt FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND place_id = 8');

																var perc = place8_level+(player[0].cnt*5);
																perc += perc*(0.2*place8_class_bonus[0].cnt);

																if (miniboost_arr[7] > 0)
																	perc += perc*(0.03*miniboost_arr[7]);

																perc = Math.round(perc*10)/10;

																player = connection_sync.query('SELECT P.id, P.life, P.total_life FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 0 AND life > 0 ORDER BY AP.id');

																var life = 0;
																for (var i = 0, len = Object.keys(player).length; i < len; i++) {
																	life = player[i].life+(player[i].total_life*(perc/100));
																	if (life > player[i].total_life)
																		life = player[i].total_life;
																	connection_sync.query('UPDATE player SET life = ' + life + ' WHERE id = ' + player[i].id);
																	epic_var++;
																}

																final_report += assaultEmojiList[7] + " La Fabbrica di Energia consente di recuperare il <b>" + perc.toString().replace(".",",") + "%</b> di hp a tutti\n\n";
															} else
																final_report += assaultEmojiList[7] + " La Fabbrica di Energia non √® stata costruita, nessun recupero di salute!\n\n";

															// console.log("Fase 7: " + tot_damage);

															// Fase 8, intrugli e pozioni

															var player = connection_sync.query('SELECT P.chat_id, P.id, P.life, P.total_life, P.nickname, P.reborn, P.class, P.refilled, AP.killed FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' ORDER BY AP.id');

															if (Object.keys(player).length > 0) {
																epic_var++;
																var player_text = "";
																var reviveUsed = 0;
																for (var i = 0, len = Object.keys(player).length; i < len; i++) {
																	if ((player[i].killed == 1) || (player[i].life == 0)) {

																		reviveUsed = 0;

																		var revive = connection_sync.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player[i].id + ' AND ability_id = 6');

																		if ((Object.keys(revive).length > 0) && (revive[0].ability_level > 0)) {
																			var att = Math.ceil(revive[0].ability_level / 2);
																			if ((player[i].class == 5) && (player[i].reborn == 5))
																				att += 5;
																			if (player[i].refilled < att) {
																				var refill = Math.floor(player[i].total_life * (revive[0].ability_level / 10));

																				connection_sync.query('UPDATE player SET refilled = refilled+1, life = ' + refill + ' WHERE id = ' + player[i].id);
																				connection_sync.query('UPDATE assault_place_player_id SET killed = 0 WHERE player_id = ' + player[i].id);

																				var extra = " (" + (att-(player[i].refilled+1)) + " residui)";

																				if (player[i].life == 0)
																					player_text += "\n> " + player[i].nickname + " torna in salute con l'Intervento Divino" + extra;
																				else if (player[i].killed == 1)
																					player_text += "\n> " + player[i].nickname + " esce dall'infermeria grazie all'Intervento Divino" + extra;

																				reviveUsed = 1;
																				epic_var++;
																			}
																		}

																		if ((getItemCnt(player[i].id, 759) > 0) && (reviveUsed == 0)) {
																			connection_sync.query('UPDATE player SET life = total_life WHERE id = ' + player[i].id);
																			connection_sync.query('UPDATE assault_place_player_id SET killed = 0 WHERE player_id = ' + player[i].id);
																			delItem(player[i].id, 759, 1);
																			if (player[i].life == 0)
																				player_text += "\n> " + player[i].nickname + " torna in salute con l'intruglio revitalizzante";
																			else if (player[i].killed == 1)
																				player_text += "\n> " + player[i].nickname + " esce dall'infermeria grazie all'intruglio revitalizzante";
																			epic_var++;
																		}
																	} else if ((player[i].life < player[i].total_life) && (player[i].killed == 0)) {
																		var potion = connection_sync.query('SELECT cons_val FROM item WHERE id IN (92,93,94) ORDER BY id');
																		var perc1 = potion[0].cons_val/100;
																		var perc2 = potion[1].cons_val/100;
																		var perc3 = potion[2].cons_val/100;

																		var player_life = player[i].life;
																		var player_total_life = player[i].total_life;

																		if (player_life <= player_total_life*0.2)
																			setAchievement(player[i].id, 20, 1);

																		if (player_life < player_total_life) {
																			var pot1 = 0;
																			var pot2 = 0;
																			var pot3 = 0;
																			while (player_life < player_total_life) {
																				if (pot1+pot2+pot3 == Math.round(place8_level/2))
																					break;
																				if ((player_life+Math.round(player_total_life*perc3) <= player_total_life) && (getItemCnt(player[i].id, 94)-pot3 > 0)) {
																					//console.log("pozione grande");
																					player_life += Math.round(player_total_life*perc3);
																					pot3++;
																					epic_var++;
																				} else if ((player_life+Math.round(player_total_life*perc2) <= player_total_life) && (getItemCnt(player[i].id, 93)-pot2 > 0)) {
																					//console.log("pozione media");
																					player_life += Math.round(player_total_life*perc2);
																					pot2++;
																					epic_var++;
																				} else if (getItemCnt(player[i].id, 92)-pot1 > 0) {
																					//console.log("pozione piccola");
																					player_life += Math.round(player_total_life*perc1);
																					pot1++;
																					epic_var++;
																				} else
																					break;
																			}

																			delItem(player[i].id, 92, pot1);
																			delItem(player[i].id, 93, pot2);
																			delItem(player[i].id, 94, pot3);

																			if (player_life > player_total_life)
																				player_life = player_total_life;

																			connection_sync.query('UPDATE player SET life = ' + player_life + ' WHERE id = ' + player[i].id);

																			var potSum = pot1+pot2+pot3;
																			if (potSum == 0)
																				player_text += "\n> " + player[i].nickname + " non recupera salute";
																			else {
																				setAchievement(player[i].id, 35, potSum);

																				var plur = "i";
																				if (potSum == 1)
																					plur = "e";
																				player_text += "\n> " + player[i].nickname + " raggiunge i <b>" + formatNumber(player_life) + "</b> hp utilizzando " + potSum + " pozion" + plur;
																			}
																		}
																	}
																}

																if (player_text == "")
																	player_text = "\n> Nessuno necessita di cure";

																final_report += assaultEmojiList[9] + " I compagni recuperano salute:" + player_text + "\n\n";
															}

															// console.log("Fase 8: " + tot_damage);

															// Fase 9, stampa infermeria

															var player = connection_sync.query('SELECT P.nickname FROM assault_place_player_id AP, player P WHERE AP.player_id = P.id AND AP.team_id = ' + team_id + ' AND killed = 1 ORDER BY AP.id');

															if (Object.keys(player).length > 0) {
																epic_var++;
																var player_text = "";
																for (var i = 0, len = Object.keys(player).length; i < len; i++) {
																	player_text += "\n> " + player[i].nickname;
																	epic_var++;
																}

																if (player_text != "")
																	final_report += assaultEmojiList[11] + " Compagni in infermeria:" + player_text + "\n\n";
															}

															// Fase conclusiva

															mob_life = Math.round(mob_life);
															tot_damage = Math.round(tot_damage);

															final_report += "Il nemico ha subito in totale <b>" + formatNumber(tot_damage) + "</b> danni\nSalute: " + progressBar(mob_life, mob_total_life) + " " + formatNumber(mob_life) + "/" + formatNumber(mob_total_life) + "\n\n";

															// Riduco quelle che non possono essere colpite dal mostro (tranne 8, fabbrica di energia)

															var rand = Math.random()*100;
															var prob = (mob_turn/10);
															if ((mob_turn % 3 == 0) && (mob_turn > 10)) {
																if (is_boss == 1)
																	prob++;
																if (rand <= prob) {
																	rand = Math.random()*100;

																	if (rand < 50) {
																		var place2 = connection_sync.query("SELECT level FROM assault_place_team WHERE place_id = 2 AND team_id = " + team_id + " AND active = 1");
																		if ((Object.keys(place2).length > 0) && (place2[0].level > 1)) {
																			connection.query("UPDATE assault_place_team SET level = level-1 WHERE place_id = 2 AND team_id = " + team_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			final_report += "La <b>Piattaforma di Lancio</b> √® stata indebolita dallo scontro appena svolto, ha perso 1 livello";
																		}
																	} else {
																		var place7 = connection_sync.query("SELECT level FROM assault_place_team WHERE place_id = 7 AND team_id = " + team_id + " AND active = 1");
																		if ((Object.keys(place7).length > 0) && (place7[0].level > 1)) {
																			connection.query("UPDATE assault_place_team SET level = level-1 WHERE place_id = 7 AND team_id = " + team_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			final_report += "Il <b>Campo Militare</b> √® stato indebolito dallo scontro appena svolto, ha perso 1 livello";
																		}
																	}
																}
															}

															// Fine turno

															var player = connection_sync.query('SELECT P.chat_id, APP.role FROM assault_place_player_id APP, player P, team_player TP WHERE TP.player_id = P.id AND APP.player_id = P.id AND (TP.notification = 1 OR APP.role = 1) AND APP.team_id = ' + team_id + ' ORDER BY APP.id');
															for (var i = 0, len = Object.keys(player).length; i < len; i++)
																bot.sendMessage(player[i].chat_id, final_report, html);

															setTimeout(function () {
																bot.sendMessage(message.chat.id, "Turno concluso!", kbBack);
															}, 500);

															// Salvo epicit√†

															saveEpic(team_id, epic_var);

															// Ripulisco mini boost

															connection.query('DELETE FROM assault_place_miniboost WHERE team_id = ' + team_id, function (err, rows, fields) {
																if (err) throw err;
																// Incremento automatico eletto
																assaultIncrement(undefined, player_id, team_id);
															});

															// Salvo salute, incremento turno e resetto incita

															/*
															connection.query("UPDATE assault SET mob_life = " + mob_life + ", mob_turn = mob_turn+1, lock_time_end = NULL, elected_lock_time_end = NULL WHERE team_id = " + team_id, function (err, rows, fields) {
																if (err) throw err;
															});
															*/
															connection.query("UPDATE assault SET mob_life = " + mob_life + ", mob_turn = mob_turn+1 WHERE team_id = " + team_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/^incrementi effettuati/i, function (message) {

	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna all'assalto"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday, account_id, life FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}

			var team_id = rows[0].team_id;

			connection.query('SELECT nickname, increment_count FROM assault_increment_history A, player P WHERE A.player_id = P.id AND team_id = ' + team_id + ' ORDER BY increment_count DESC', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Nessun membro del team ha incrementato durante questo combattimento", kbBack);
					return;
				}

				var c = 1;
				var text = "Incrementi effettuati dal team durante l'ultimo combattimento:\n\n";
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					text += c + "¬∞ " + rows[i].nickname + " (" + rows[i].increment_count + ")\n";
					c++;
				}

				bot.sendMessage(message.chat.id, text, kbBack);
			});
		});
	});
});

bot.onText(/cura completa|cura parziale|^cura$|^‚ù£Ô∏è$|^‚ù§Ô∏è$|^cc$|^cp$/i, function (message) {

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al dungeon"],["Torna al menu"]]
		}
	};

	var kbYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Si"],["Torna al menu"]]
		}
	};

	var mode = 0;
	if ((message.text.toLowerCase().indexOf("parziale") != -1) || (message.text == "‚ù£Ô∏è") || (message.text.toLowerCase() == "cp"))
		mode = 1;

	connection.query('SELECT id, holiday, account_id, life, total_life FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;
		var player_life = rows[0].life;
		var player_total_life = rows[0].total_life;

		if (player_life >= player_total_life) {
			bot.sendMessage(message.chat.id, "Non necessiti di cure", kbBack);
			return;
		}

		if (player_life <= 0) {
			bot.sendMessage(message.chat.id, "Torna in vita prima di recuperare salute", revive);
			return;
		}

		connection.query('SELECT cons_val FROM item WHERE id IN (92,93,94) ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			var perc1 = rows[0].cons_val/100;
			var perc2 = rows[1].cons_val/100;
			var perc3 = rows[2].cons_val/100;

			var achievement = 0;
			if (player_life <= player_total_life*0.2)
				achievement = 1;

			var pot1bag = getItemCnt(player_id, 92);
			var pot2bag = getItemCnt(player_id, 93);
			var pot3bag = getItemCnt(player_id, 94);

			if (pot1bag+pot2bag+pot3bag == 0) {
				bot.sendMessage(message.chat.id, "Non disponi di pozioni per recuperare salute", kbBack);
				return;
			}

			var pot1 = 0;
			var pot2 = 0;
			var pot3 = 0;
			while (player_life < player_total_life) {
				if ((player_life+Math.round(player_total_life*perc3) <= player_total_life) && (pot3bag-pot3 > 0)) {
					player_life += Math.round(player_total_life*perc3);
					pot3++;
				} else if ((player_life+Math.round(player_total_life*perc2) <= player_total_life) && (pot2bag-pot2 > 0)) {
					player_life += Math.round(player_total_life*perc2);
					pot2++;
				} else if (pot1bag-pot1 > 0) {
					if ((player_life+Math.round(player_total_life*perc1) > player_total_life) && (mode == 1))
						break;
					player_life += Math.round(player_total_life*perc1);
					pot1++;
				} else
					break;
			}

			if (achievement == 1)
				setAchievement(player_id, 20, 1);

			if (pot1+pot2+pot3 == 0) {
				bot.sendMessage(message.chat.id, "Non hai recuperato salute", kbBack);
				return;
			} else
				setAchievement(player_id, 35, pot1+pot2+pot3);

			var text = "";
			if (pot1 > 0)
				text += "\n> *" + pot1 + "*x Pozione Piccola";
			if (pot2 > 0)
				text += "\n> *" + pot2 + "*x Pozione Media";
			if (pot3 > 0)
				text += "\n> *" + pot3 + "*x Pozione Grande";

			delItem(player_id, 92, pot1);
			delItem(player_id, 93, pot2);
			delItem(player_id, 94, pot3);

			if (player_life > player_total_life)
				player_life = player_total_life;

			connection.query('UPDATE player SET life = ' + player_life + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				bot.sendMessage(message.chat.id, "Hai recuperato la salute (" + formatNumber(player_life) + " hp) utilizzando:" + text, kbBack);
			});
		});
	});
});

bot.onText(/incremento|^inc$/i, function (message) {
	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Riprendi battaglia"],["Torna al menu"]]
		}
	};

	var kbBack2 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna all'assalto"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday, account_id, life FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}
		if (rows[0].life <= 0) {
			bot.sendMessage(message.chat.id, "Non puoi incrementare senza salute!", back);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}

			var team_id = rows[0].team_id;

			connection.query('SELECT name, kill_num, boss_count, level, boost_id FROM team WHERE id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;

				connection.query('SELECT MAX(time_end) As mx FROM assault_place_team WHERE time_end IS NOT NULL AND team_id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;

					if (rows[0].cnt > 0) {
						var d = new Date(rows[0].mx);
						var time = addZero(d.getHours()) + ":" + addZero(d.getMinutes());
						bot.sendMessage(message.chat.id, "Non puoi procedere finch√® tutte le strutture non hanno terminato la costruzione in corso!\nL'ultima terminer√† alle " + time, kbBack);
						return;
					}

					connection.query('SELECT place_id, role FROM assault_place_player_id WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0) {
							bot.sendMessage(message.chat.id, "Non puoi partecipare al Giorno dell'Assalto senza aver partecipato al Giorno della Preparazione", kbBack2);
							return;
						}

						var elected = 0;
						if (rows[0].role == 1)
							elected = 1;

						var place_id = rows[0].place_id;

						connection.query('SELECT * FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Il team deve essere iscritto agli assalti!", kbBack2);
								return;
							}

							var phase = rows[0].phase;
							var mob_name = rows[0].mob_name;
							if (mob_name == null) {
								bot.sendMessage(message.chat.id, "Il mob non ha ancora raggiunto la magione!", kbBack2);
								return;
							}

							if (phase != 2) {
								bot.sendMessage(message.chat.id, "Non sei ancora nel Giorno dell'Assalto!", kbBack2);
								return;
							}

							assaultIncrement(message, player_id, team_id);
						});
					});
				});
			});
		});
	});
});

bot.onText(/potenziamenti anima/i, function (message) {
	connection.query('SELECT id, holiday, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var money = rows[0].money;
		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}

			var team_id = rows[0].team_id;
			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				if (rows[0].role > 0)
					isAdmin = 1;

				connection.query('SELECT boost_id, level FROM team_boost WHERE team_id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var boost_list = "";
					var maxlevel = 11;
					if (Object.keys(rows).length > 0) {
						boost_list += "Potenziamenti permanenti:\n";
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if ((rows[i].boost_id == 1) && (rows[i].level > 0)) {
								if (rows[i].level >= maxlevel)
									boost_list += "> *Unione Fatale*";
								else
									boost_list += "> Unione Fatale";
								boost_list += " (Livello " + rows[i].level + ", +" + (3 * rows[i].level) + "%)\n";
							}
							if ((rows[i].boost_id == 2) && (rows[i].level > 0)) {
								if (rows[i].level >= maxlevel)
									boost_list += "> *Bottino Ricco*";
								else
									boost_list += "> Bottino Ricco";
								boost_list += " (Livello " + rows[i].level + ", +" + (3 * rows[i].level) + "%)\n";
							}
							if ((rows[i].boost_id == 3) && (rows[i].level > 0)) {
								if (rows[i].level >= maxlevel)
									boost_list += "> *Formazione Impenetrabile*";
								else
									boost_list += "> Formazione Impenetrabile";
								boost_list += " (Livello " + rows[i].level + ", +" + (3 * rows[i].level) + "%)\n";
							}
							if ((rows[i].boost_id == 4) && (rows[i].level > 0)) {
								if (rows[i].level >= maxlevel)
									boost_list += "> *Scrigni Redditizi*";
								else
									boost_list += "> Scrigni Redditizi";
								boost_list += " (Livello " + rows[i].level + ", +" + (3 * rows[i].level) + "%)\n";
							}
						}
					}

					connection.query('SELECT level, closed, details, point, boost_id FROM team WHERE id = ' + team_id, function (err, rows, fields) {
						if (err) throw err;
						var level = rows[0].level;
						var closed = rows[0].closed;
						var details = rows[0].details;
						var point = rows[0].point;
						var boost_id = rows[0].boost_id;

						if (isAdmin == 0) {
							bot.sendMessage(message.chat.id, "Il team possiede *" + point + "* ü¶ã. Puoi ottenerne altri uccidendo i boss oppure partecipando agli eventi di team. Solo l'amministratore pu√≤ procedere con i potenziamenti.\n\n" + boost_list, team)
							return;
						}

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Unione Fatale (200/1000 ü¶ã)"],
										   ["Bottino Ricco (300/1500 ü¶ã)"],
										   ["Formazione Impenetrabile (250/1250 ü¶ã)"],
										   ["Scrigni Redditizi (500/2500 ü¶ã)"],
										   ["Torna al team"],
										   ["Torna al menu"]]
							}
						};

						var kbSel = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Temporaneo"], ["Permanente"], ["Torna ai potenziamenti anima"]]
							}
						};

						var kbYesNo = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Si"], ["Torna ai potenziamenti anima"]]
							}
						};

						var kbBack = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Torna ai potenziamenti anima"]]
							}
						};

						var kbBackHtml = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Torna ai potenziamenti anima"]]
							}
						};

						bot.sendMessage(message.chat.id, "Il tuo team possiede *" + point + "* ü¶ã. Puoi ottenerne altri uccidendo i boss oppure partecipando agli eventi di team. Seleziona un potenziamento da attivare.\n\n" + boost_list, kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if ((answer.text == "Torna al team") || (answer.text == "Torna al menu"))
									return;

								var p = 0;
								var p2 = 0;
								var id = 0;
								var desc = "";
								var name = "";

								if (answer.text.indexOf("Unione Fatale") != -1) {
									p = 200;
									p2 = 1000;
									id = 1;
									name = "Unione Fatale";
									desc = "Questa opzione permette di scegliere tra un potenziamento temporaneo per il team, che dar√† la possibilit√† di infliggere +50% di danno al boss e coster√† " + p + " ü¶ã oppure un potenziamento permanente di +3% per livello al danno inflitto, che coster√† " + p2 + " ü¶ã, continuare?";
								} else if (answer.text.indexOf("Bottino Ricco") != -1) {
									p = 300;
									p2 = 1500;
									id = 2;
									name = "Bottino Ricco";
									desc = "Questa opzione permette di scegliere tra un potenziamento temporaneo del team, che dar√† la possibilit√† di guadagnare +50% ¬ß dalla sconfitta del boss durante l'assalto e coster√† " + p + " ü¶ã oppure un potenziamento permanente di +3% per livello dei ¬ß guadagnati, che coster√† " + p2 + " ü¶ã, continuare?"
								} else if (answer.text.indexOf("Formazione Impenetrabile") != -1) {
									p = 250;
									p2 = 1250;
									id = 3;
									name = "Formazione Impenetrabile";
									desc = "Questa opzione permette di scegliere tra un potenziamento temporaneo per il team, che dar√† la possibilit√† di subire -50% di danno dal boss e coster√† " + p + " ü¶ã oppure un potenziamento permanente di -3% per livello al danno subito, che coster√† " + p2 + " ü¶ã, continuare?";
								} else if (answer.text.indexOf("Scrigni Redditizi") != -1) {
									p = 500;
									p2 = 2500;
									id = 4;
									name = "Scrigni Redditizi";
									desc = "Questa opzione permette di scegliere tra un potenziamento temporaneo per il team, che dar√† la possibilit√† di ottenere +10% scrigni dalla sconfitta del boss e coster√† " + p + " ü¶ã oppure un potenziamento permanente di +3% per livello degli scrigni guadagnati, che coster√† " + p2 + " ü¶ã, continuare?";
								}
								if (id == 0) {
									bot.sendMessage(message.chat.id, "Potenziamento non valido", team);
									return;
								}
								bot.sendMessage(message.chat.id, desc, kbSel).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "temporaneo") {

											if (boost_id != 0) {
												bot.sendMessage(message.chat.id, "Puoi attivare solo un potenziamento temporaneo alla volta, attendi il respawn", team);
												return;
											}

											bot.sendMessage(message.chat.id, "Spenderai " + p + " ü¶ã, continuare?", kbYesNo).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text.toLowerCase() == "si") {
														connection.query('SELECT point FROM team WHERE id = ' + team_id, function (err, rows, fields) {
															if (err) throw err;
															var point = rows[0].point;

															if (point < p) {
																bot.sendMessage(message.chat.id, "Il tuo team non ha abbastanza ü¶ã!", kbBack);
																return;
															}

															connection.query('UPDATE team SET boost_id = ' + id + ', point = point-' + p + ', point_spent = point_spent+' + p + ' WHERE id = ' + team_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Potenziamento attivato! Terminer√† all'uccisione del boss!", kbBack);

																connection.query('SELECT P.chat_id FROM team_player TP, player P WHERE TP.player_id = P.id AND P.id != ' + player_id + ' AND TP.team_id = ' + team_id, function (err, rows, fields) {
																	if (err) throw err;
																	for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																		bot.sendMessage(rows[i].chat_id, message.from.username + " ha attivato il potenziamento temporaneo <b>" + name + "</b>!", html);
																});
															});
														});
													}
												}
											});
										} else if (answer.text.toLowerCase() == "permanente") {
											bot.sendMessage(message.chat.id, "Spenderai " + p2 + " ü¶ã, continuare?", kbYesNo).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text.toLowerCase() == "si") {
														connection.query('SELECT point FROM team WHERE id = ' + team_id, function (err, rows, fields) {
															if (err) throw err;
															var point = rows[0].point;

															if (point < p2) {
																bot.sendMessage(message.chat.id, "Il tuo team non ha abbastanza ü¶ã!", kbBack);
																return;
															}

															connection.query('SELECT level FROM team_boost WHERE boost_id = ' + id + ' AND team_id = ' + team_id, function (err, rows, fields) {
																if (Object.keys(rows).length > 0) {
																	var level = rows[0].level;

																	if (level > 10) {
																		bot.sendMessage(message.chat.id, "Questo potenziamento ha raggiunto il livello massimo!", kbBack);
																		return;
																	}

																	connection.query('UPDATE team_boost SET level=level+1 WHERE boost_id = ' + id + ' AND team_id = ' + team_id, function (err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE team SET point = point-' + p2 + ', point_spent = point_spent+' + p2 + ' WHERE id = ' + team_id, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Potenziamento migliorato al livello " + (level + 1) + "!", kbBack);
																		});
																	});
																} else {
																	connection.query('INSERT INTO team_boost (team_id, boost_id, level) VALUES (' + team_id + ',' + id + ',1)', function (err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE team SET point = point-' + p2 + ', point_spent = point_spent+' + p2 + ' WHERE id = ' + team_id, function (err, rows, fields) {
																			bot.sendMessage(message.chat.id, "Potenziamento attivato!", kbBack);
																		});
																	});
																}
															});
														});
													}
												}
											});
										}
									};
								});
								//Fine
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/liste membri/i, function (message) {
	var keynull = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Membri Team Accademia"], ["Membri Team Madre"], ["Nessuno"]]
		}
	};

	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna alle Liste Membri"], ["Torna al team"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT account_id, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;

		bot.sendMessage(message.chat.id, "Inserisci il nome del team da cercare, anche parziale. Per una ricerca precisa aggiungi l'asterisco al fondo.", keynull).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text == "Membri Team Accademia") {
					connection.query('SELECT T.child_team FROM team T, team_player TP WHERE T.id = TP.team_id AND TP.player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						if ((Object.keys(rows).length == 0) || (rows[0].child_team == null)) {
							bot.sendMessage(message.chat.id, "Il tuo team non possiede un'accademia!", kbBack)
							return;
						}
						connection.query('SELECT name FROM team WHERE id = ' + rows[0].child_team, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, getTeamMembers(rows[0].name), kbBack);
						});
					});
				} else if (answer.text == "Membri Team Madre") {
					connection.query('SELECT T.id FROM team T, team_player TP WHERE T.child_team = TP.team_id AND TP.player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						if ((Object.keys(rows).length == 0) || (rows[0].id == null)) {
							bot.sendMessage(message.chat.id, "Il tuo team non possiede un team madre!", kbBack)
							return;
						}
						connection.query('SELECT name FROM team WHERE id = ' + rows[0].id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, getTeamMembers(rows[0].name), kbBack);
						});
					});
				} else if ((answer.text != "Torna al menu") && (answer.text != "Nessuno"))
					bot.sendMessage(message.chat.id, getTeamMembers(answer.text), kbBack);
			}
		});
	});
});

bot.onText(/Fonda nuovo/i, function (message) {
	connection.query('SELECT account_id, holiday, id, money, team_time FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		var new_price = 1000000;
		var price_drop = 0;
		var price_drop_msg = "";
		var n = new Date().getDay()
		var n2 = new Date().getDate();

		if (rows[0].team_time != null) {
			var d = new Date(rows[0].team_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();

			bot.sendMessage(message.chat.id, "Non puoi ancora entrare in un team, ne hai appena lasciato uno. Attendi fino alle " + long_date, back);
			return;
		}

		if (n == 0) {
			price_drop = 1;
			new_price = 750000;
			price_drop_msg = "*SOLO OGGI* ";
		}

		connection.query('SELECT 1 FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				bot.sendMessage(message.chat.id, "Sei gi√† in un team!", team);
				return;
			}

			if (money < new_price) {
				bot.sendMessage(message.chat.id, "Non hai abbastanza soldi.", back);
				return;
			}

			bot.sendMessage(message.chat.id, "Scegli un nome per il tuo Team, ma fai attenzione non potrai cambiarlo. Inoltre non usare simboli ne la parola 'Team'.", mark).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					var name = answer.text.trim();

					if ((name.indexOf("Team") != -1) || (name.indexOf("team") != -1) || (name == "") || (name.indexOf("_") != -1) || (name.indexOf("*") != -1) || (name.toLowerCase() == "torna al menu") || (name.toLowerCase() == "entra in uno esistente") || (name.toLowerCase() == "fonda nuovo") || (name == "Torna al menu") || (name == "Rinomina") || (name.toLowerCase().indexOf("madre") != -1) || (name.toLowerCase().indexOf("accademia") != -1)) {
						bot.sendMessage(message.chat.id, "Nome non valido.", back);
						return;
					}

					if (re4.test(name) == false) {
						bot.sendMessage(message.chat.id, "I simboli non sono consentiti o il nome √® troppo lungo (max 40 caratteri).", back);
						return;
					}

					connection.query('SELECT id FROM team WHERE name = "' + name + '"', function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length == 0) {
							var max_players = 7;
							connection.query('INSERT INTO team (id, name, players, max_players) VALUES (DEFAULT, "' + name + '", 1, ' + max_players + ')', function (err, rows, fields) {
								if (err) throw err;
								connection.query('UPDATE player SET money = money - ' + new_price + ' WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Team " + name + " creato!\nPuoi ospitare " + max_players + " membri totali compreso il creatore, torna su questa pagina per gestire il team e potenziarlo.", team);
								});
								connection.query('SELECT id FROM team WHERE name = "' + name + '"', function (err, rows, fields) {
									if (err) throw err;
									connection.query('INSERT INTO team_player (id, player_id, team_id) VALUES (DEFAULT,' + player_id + ',' + rows[0].id + ')', function (err, rows, fields) {
										if (err) throw err;
									});
								});
							});
						} else
							bot.sendMessage(message.chat.id, "Il nome che hai inserito esiste gi√†, riprova.", team);
					});
				};
			});
		});
	});
});

bot.onText(/Entra in uno esistente|^Pagina (.+)/i, function (message, match) {
	connection.query('SELECT account_id, holiday, team_time, id, money, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (rows[0].team_time != null) {
			var d = new Date(rows[0].team_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();

			bot.sendMessage(message.chat.id, "Non puoi ancora entrare in un team, ne hai appena lasciato uno. Attendi fino alle " + long_date, back);
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		var lev = Math.floor(rows[0].exp / 10);
		var reborn = rows[0].reborn;

		connection.query('SELECT 1 FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				bot.sendMessage(message.chat.id, "Sei gi√† in un team!", team);
				return;
			}
			var iKeys = [];

			var thisPage = 1;
			var limMin = 0;
			var limMax = 50;
			if (match[1] != undefined) {
				thisPage = parseInt(match[1]);
				limMin = 50 * (thisPage - 1);
				limMax = 50 * thisPage;
			}

			connection.query('SELECT name, players, max_players FROM team WHERE closed = 0 AND players < max_players AND ' + getRealLevel(reborn, lev) + ' >= min_lev ORDER BY name LIMIT ' + limMin + ', ' + limMax, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Non ci sono pi√π team disponibili o hanno raggiunto il limite di membri.", back);
					return;
				}

				var closed_text = "";

				for (var i = 0, len = Object.keys(rows).length; i < len; i++)
					iKeys.push(["Entra in " + rows[i].name + " (" + rows[i].players + "/" + rows[i].max_players + ")"]);

				if (Object.keys(rows).length >= 50)
					iKeys.push(["Pagina " + (thisPage + 1)]);
				if (thisPage > 1)
					iKeys.push(["Pagina " + (thisPage - 1)]);
				iKeys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: iKeys
					}
				};

				bot.sendMessage(message.chat.id, "Seleziona il team al quale desideri unirti.", kb);
			});
		});
	});
});

bot.onText(/Hall of Fame/i, function (message) {
	connection.query('SELECT team.name FROM team, team_player WHERE team.id = team_player.team_id AND team_player.player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function (err, rows, fields) {
		if (err) throw err;

		var myTeam = "";
		if (Object.keys(rows).length > 0)
			myTeam = rows[0].name;

		connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
			if (err) throw err;
			var desc = "\n\nIl calcolo tiene conto del tempo trascorso negli Incarichi, dei punti creazione del team e degli Assalti completati con successo.";
			var query = "SELECT name As name, ((500*mission_time_count)+(craft_count)+(3000*boss_count)+(125000*(A.completed+kill_num))) As pnt FROM team T LEFT JOIN assault A ON T.id = A.team_id GROUP BY T.id ORDER BY pnt DESC";
			if (rows[0].top_min == 1) {
				connection.query(query, function (err, rows, fields) {
					if (err) throw err;
					var text = "Classifica Team:\n";
					var c = 1;
					var mypos = "";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (c <= 15)
							text += c + "¬∞ " + rows[i].name + " (" + formatNumber(Math.floor(rows[i].pnt)) + " pnt)\n";
						if (myTeam != "") {
							if (rows[i].name == myTeam) {
								mypos = "\nIl tuo team:\n";
								mypos += c + "¬∞ " + rows[i].name + " (" + formatNumber(Math.floor(rows[i].pnt)) + " pnt)";
							}
						}
						c++;
					}

					bot.sendMessage(message.chat.id, text + mypos + desc, team);
				});
			} else {
				connection.query(query, function (err, rows, fields) {
					if (err) throw err;
					var text = "Classifica Team:\n";
					var range = 5;

					var name = [];
					var points = [];
					var mypos = 0;

					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						name.push(rows[i].name);
						points.push(rows[i].pnt);
						if (myTeam == rows[i].name)
							mypos = i;
					}

					for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
						if (name[i] != undefined) {
							if (i == mypos)
								text += (i + 1) + "¬∞ <b>" + name[i] + "</b> (" + formatNumber(Math.floor(points[i])) + ")\n";
							else
								text += (i + 1) + "¬∞ " + name[i] + " (" + formatNumber(Math.floor(points[i])) + ")\n";
						}
					}

					bot.sendMessage(message.chat.id, text + desc, team_html);
				});
			}
		});
	});
});

bot.onText(/Dettagli: |Dettagli: /i, function (message) {
	connection.query('SELECT id, holiday, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var money = rows[0].money;
		connection.query('SELECT team_id FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role > 0) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT level, closed, details FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					var closed = rows[0].closed;
					var details = rows[0].details;

					if (isAdmin == 0) {
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore ed al vice!", team);
						return;
					}
					if (details == 1) {
						connection.query('UPDATE team SET details = 0 WHERE id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Ora i membri non visualizzano pi√π la lista dei membri.", team);
						});
					} else {
						connection.query('UPDATE team SET details = 1 WHERE id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Ora i membri possono visualizzare la lista dei membri.", team);
						});
					}
				});
			});
		});
	});
});

bot.onText(/Tipo: Aperto|Tipo: Chiuso/i, function (message) {
	connection.query('SELECT id, holiday, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var money = rows[0].money;
		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role > 0) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT level, closed, details FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					var closed = rows[0].closed;
					var details = rows[0].details;

					if (isAdmin == 0) {
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore ed al vice!", team);
						return;
					}

					if (closed == 1) {
						connection.query('UPDATE team SET closed = 0 WHERE id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Il team √® stato impostato su Aperto, gli utenti possono accedere liberamente.", team);
						});
					} else {
						connection.query('UPDATE team SET closed = 1 WHERE id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Il team √® stato impostato su Chiuso, nessun utente pu√≤ accedere.", team);
						});
					}
				});
			});
		});
	});
});

bot.onText(/Gestisci Membri/i, function (message) {
	var player = message.text.substring(message.text.indexOf(" ") + 1);
	connection.query('SELECT account_id, holiday, id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT team_player.*, player.nickname FROM team_player, player WHERE player.id = team_player.player_id AND player.id != ' + player_id + ' AND team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}

			var iKeys = [];
			for (var i = 0, len = Object.keys(rows).length; i < len; i++)
				iKeys.push([rows[i].nickname]);
			iKeys.push(["Torna al menu"]);

			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT level FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					if (isAdmin == 0) {
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore!", team);
						return;
					}

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					var kb2 = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Espelli", "Sospendi"], ["Sposta in Madre"], ["Sposta in Accademia"], ["Torna al menu"]]
						}
					};

					var kbBack = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Gestisci membri"], ["Torna al team"], ["Torna al menu"]]
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona il membro del team da gestire", kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text != "Torna al menu") {

								var player = answer.text;

								bot.sendMessage(message.chat.id, "Cosa vuoi fare?\nSe sospendi il giocatore non ricever√† ricompense per i boss o per gli incarichi completati!", kb2).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text == "Espelli") {

											connection.query('SELECT chat_id, player.id FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function (err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Non ho trovato il giocatore selezionato.", kbBack);
													return;
												}

												var chat_id = rows[0].chat_id;
												var playerId = rows[0].id;

												if (player_id == playerId) {
													bot.sendMessage(message.chat.id, "Non puoi espellere te stesso", kbBack);
													return;
												}

												connection.query('SELECT 1 FROM assault_place_player_id WHERE role = 1 AND player_id = ' + playerId, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														bot.sendMessage(message.chat.id, "Non puoi cacciare l'eletto, prima passa il potere ad un altro membro del team!");
														return;
													}

													connection.query('SELECT 1 FROM mission_team_party_player WHERE player_id = ' + playerId, function (err, rows, fields) {
														if (err) throw err;

														if (Object.keys(rows).length > 0) {
															bot.sendMessage(message.chat.id, "Non puoi cacciare un membro inserito in un party!");
															return;
														}

														connection.query('DELETE FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + playerId + ' LIMIT 1', function (err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE team SET players = players-1 WHERE id = ' + team_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, player + " √® stato cacciato dal team!", kbBack);
																bot.sendMessage(chat_id, "Sei stato cacciato dal team!");
															});

															var d2 = new Date();
															d2.setHours(d2.getHours() + 48);
															var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

															connection.query('UPDATE player SET team_time = "' + long_date + '" WHERE id = ' + playerId, function (err, rows, fields) {
																if (err) throw err;
															});

															removeFromAssault(playerId);
														});
													});
												});
											});
										} else if (answer.text == "Sospendi") {
											connection.query('SELECT chat_id, player.id, team_player.suspended FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function (err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Non ho trovato il giocatore selezionato.", kbBack);
													return;
												}
												var chat_id = rows[0].chat_id;
												var playerId = rows[0].id;

												if (player_id == playerId) {
													bot.sendMessage(message.chat.id, "Non puoi sospendere te stesso", kbBack);
													return;
												}

												var s = 0;
												if (rows[0].suspended == 0)
													s = 1;

												connection.query('UPDATE team_player SET suspended = ' + s + ' WHERE player_id = ' + playerId, function (err, rows, fields) {
													if (err) throw err;
													if (s == 1) {
														bot.sendMessage(message.chat.id, player + " √® stato sospeso dal team!", kbBack);
														bot.sendMessage(chat_id, "Sei stato sospeso dal team!");
													} else {
														bot.sendMessage(message.chat.id, player + " non √® pi√π sospeso dal team!", kbBack);
														bot.sendMessage(chat_id, "Non sei pi√π sospeso dal team!");
													}
												});
											});
										} else if (answer.text == "Sposta in Madre") {
											connection.query('SELECT chat_id, player.id, player.nickname, team_player.role FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function (err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Non ho trovato il giocatore selezionato.", kbBack);
													return;
												}
												var chat_id = rows[0].chat_id;
												var playerId = rows[0].id;
												var nick = rows[0].nickname;

												if (rows[0].role > 0) {
													bot.sendMessage(message.chat.id, "Devi togliere i poteri a questo membro prima di spostarlo in un altro team", kbBack);
													return;
												}

												connection.query('SELECT 1 FROM assault_place_player_id WHERE role = 1 AND player_id = ' + playerId, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														bot.sendMessage(message.chat.id, "Non puoi spostare l'eletto, prima passa il potere ad un altro membro del team!");
														return;
													}

													connection.query('SELECT id, name FROM team WHERE child_team = ' + team_id, function (err, rows, fields) {
														if (err) throw err;

														if (Object.keys(rows).length == 0) {
															bot.sendMessage(message.chat.id, "Questo team non possiede un team madre", kbBack);
															return;
														}

														var motherId = rows[0].id;
														var teamName = rows[0].name;

														if (crazyMode == 1) {
															bot.sendMessage(message.chat.id, "Durante l'evento folle non puoi trasferire", kbBack);
															return;
														}

														if (player_id == playerId) {
															bot.sendMessage(message.chat.id, "Non puoi trasferire te stesso", kbBack);
															return;
														}

														connection.query('SELECT 1 FROM mission_team_party_player WHERE player_id = ' + playerId, function (err, rows, fields) {
															if (err) throw err;

															if (Object.keys(rows).length > 0) {
																bot.sendMessage(message.chat.id, "Non puoi spostare un membro inserito in un party!");
																return;
															}

															connection.query('SELECT phase FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
																if (err) throw err;

																if (Object.keys(rows).length > 0) {
																	if (rows[0].phase >= 2) {
																		bot.sendMessage(message.chat.id, "Puoi spostare membri solamente durante il Giorno della Preparazione!");
																		return;
																	}
																}

																connection.query('SELECT players, max_players FROM team WHERE id = ' + motherId, function (err, rows, fields) {
																	if (err) throw err;

																	if (rows[0].players >= rows[0].max_players) {
																		bot.sendMessage(message.chat.id, "Il team √® pieno!", kbBack);
																		return;
																	}

																	var d2 = new Date();
																	d2.setHours(d2.getHours() + 48);
																	var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

																	connection.query('UPDATE player SET boss_time = "' + long_date + '", team_mission_time = "' + long_date + '" WHERE id = ' + playerId, function (err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE team_player SET kill_streak = 0, team_id = ' + motherId + ' WHERE player_id = ' + playerId, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai trasferito il membro nel Team Madre!", kbBack);
																			bot.sendMessage(chat_id, "Sei stato trasferito nel Team Madre dall'amministratore");

																			connection.query('UPDATE team SET players = players-1 WHERE id = ' + team_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE team SET players = players+1 WHERE id = ' + motherId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('SELECT player_id FROM team_player WHERE team_id = ' + motherId + ' AND role = 1', function (err, rows, fields) {
																				if (err) throw err;
																				connection.query('SELECT chat_id FROM player WHERE id = ' + rows[0].player_id, function (err, rows, fields) {
																					if (err) throw err;
																					bot.sendMessage(rows[0].chat_id, "<b>" + nick + "</b> √® stato trasferito nel tuo team", html);
																				});
																			});
																			connection.query('DELETE FROM assault_place_player_id WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM assault_place_miniboost WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM assault_place_magic WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM assault_place_cons WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM assault_increment_history WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		});
																	});
																});
															});
														});
													});
												});
											});
										} else if (answer.text == "Sposta in Accademia") {
											connection.query('SELECT player.chat_id, player.id, player.nickname, team_player.role FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function (err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Non ho trovato il giocatore selezionato.", kbBack);
													return;
												}
												var chat_id = rows[0].chat_id;
												var playerId = rows[0].id;
												var nick = rows[0].nickname;

												if (rows[0].role > 0) {
													bot.sendMessage(message.chat.id, "Devi togliere i poteri a questo membro prima di spostarlo in un altro team", kbBack);
													return;
												}

												connection.query('SELECT 1 FROM assault_place_player_id WHERE role = 1 AND player_id = ' + playerId, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														bot.sendMessage(message.chat.id, "Non puoi spostare l'eletto, prima passa il potere ad un altro membro del team!");
														return;
													}

													connection.query('SELECT name, child_team FROM team WHERE id = ' + team_id, function (err, rows, fields) {
														if (err) throw err;

														var childId = rows[0].child_team;
														if (childId == null) {
															bot.sendMessage(message.chat.id, "Questo team non possiede un'accademia", kbBack);
															return;
														}

														var teamName = rows[0].name;

														if (crazyMode == 1) {
															bot.sendMessage(message.chat.id, "Durante l'evento folle non puoi trasferire", kbBack);
															return;
														}

														if (player_id == playerId) {
															bot.sendMessage(message.chat.id, "Non puoi trasferire te stesso", kbBack);
															return;
														}

														connection.query('SELECT 1 FROM mission_team_party_player WHERE player_id = ' + playerId, function (err, rows, fields) {
															if (err) throw err;

															if (Object.keys(rows).length > 0) {
																bot.sendMessage(message.chat.id, "Non puoi spostare un membro inserito in un party!");
																return;
															}

															connection.query('SELECT phase FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
																if (err) throw err;

																if (Object.keys(rows).length > 0) {
																	if (rows[0].phase >= 2) {
																		bot.sendMessage(message.chat.id, "Puoi spostare membri solamente durante il Giorno della Preparazione!");
																		return;
																	}
																}

																connection.query('SELECT players, max_players FROM team WHERE id = ' + childId, function (err, rows, fields) {
																	if (err) throw err;

																	if (rows[0].players >= rows[0].max_players) {
																		bot.sendMessage(message.chat.id, "Il team √® pieno!", kbBack);
																		return;
																	}

																	var d2 = new Date();
																	d2.setHours(d2.getHours() + 48);
																	var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

																	connection.query('UPDATE player SET boss_time = "' + long_date + '", team_mission_time = "' + long_date + '" WHERE id = ' + playerId, function (err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE team_player SET kill_streak = 0, team_id = ' + childId + ' WHERE player_id = ' + playerId, function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai trasferito il membro in Accademia!", kbBack);
																			bot.sendMessage(chat_id, "Sei stato trasferito in Accademia dall'amministratore");

																			connection.query('UPDATE team SET players = players-1 WHERE id = ' + team_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE team SET players = players+1 WHERE id = ' + childId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('SELECT player_id FROM team_player WHERE team_id = ' + childId + ' AND role = 1', function (err, rows, fields) {
																				if (err) throw err;
																				connection.query('SELECT chat_id FROM player WHERE id = ' + rows[0].player_id, function (err, rows, fields) {
																					if (err) throw err;
																					bot.sendMessage(rows[0].chat_id, "<b>" + nick + "</b> √® stato trasferito nel tuo team", html);
																				});
																			});
																			connection.query('DELETE FROM assault_place_player_id WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM assault_place_miniboost WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM assault_place_magic WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM assault_place_cons WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM assault_increment_history WHERE player_id = ' + playerId, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		});
																	});
																});
															});
														});
													});
												});
											});
										}
									};
								});
							}
						}
					});
				});
			});
		});
	});
});

bot.onText(/^limite/i, function (message) {
	connection.query('SELECT account_id, holiday, id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT level, closed, details FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					var closed = rows[0].closed;
					var details = rows[0].details;

					if (isAdmin == 0) {
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore!", team);
						return;
					}

					bot.sendMessage(message.chat.id, "Inserisci il livello minimo di accesso al tuo team, sommando i livelli per rinascita corrispondente (livello assoluto). Inserisci 0 per eliminare il controllo.", team).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							var num = parseInt(answer.text);

							if ((num > 3750) || (num < 0)) {
								bot.sendMessage(message.chat.id, "Livello non valido: minimo 0, massimo 3.750", team);
								return;
							}

							if (isNaN(num)) {
								bot.sendMessage(message.chat.id, "Livello non valido, riprova", team);
								return;
							}

							connection.query('UPDATE team SET min_lev = ' + num + ' WHERE id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Livello minimo (" + getLevel(num) + ") impostato correttamente", team);
							});
						};
					});
				});
			});
		});
	});
});

bot.onText(/^accademia/i, function (message) {
	connection.query('SELECT account_id, holiday, id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		connection.query('SELECT team_player.*, player.nickname FROM `team_player`, player WHERE player.id = team_player.player_id AND team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}

			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT id FROM team WHERE child_team = ' + team_id, function (err, rows, fields) {
					if (err) throw err;

					var motherId = 0;
					if (Object.keys(rows).length > 0) {
						motherId = rows[0].id;
						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Scollegati dal Madre"], ["Annulla"]]
							}
						};
					} else {
						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Annulla"]]
							}
						};
					}

					connection.query('SELECT name, child_time, child_team FROM team WHERE id = ' + team_id, function (err, rows, fields) {
						if (err) throw err;

						var now = new Date();
						var child_time = rows[0].child_time;
						var teamName = rows[0].name;
						var child_team = rows[0].child_team;

						connection.query('SELECT name FROM team WHERE id = ' + child_team, function (err, rows, fields) {
							if (err) throw err;

							var child_text = "";
							if (Object.keys(rows).length > 0) {
								if (child_team != null)
									child_text = "\n\nQuesto team √® gi√† collegato all'accademia " + rows[0].name + ', scrivendo un nuovo nome andrai a rimpiazzarla.';
							}

							if (isAdmin == 0) {
								bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore!", team);
								return;
							}

							bot.sendMessage(message.chat.id, "Collegare un accademia a questo team aumenter√† il premio per uccisione boss. Inserisci il nome completo del team da rendere accademia di questo.\nNota: Inizierai a ottenere bonus solo se l'accademia √® almeno al livello 5 e vice versa.\nNon potrai cambiare accademia per una settimana" + child_text, kb).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Scollegati dal Madre") {
										connection.query('UPDATE team SET child_team = NULL WHERE child_team = ' + team_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Il tuo team non √® pi√π un'accademia", team);
										});
										return;
									}
									if ((answer.text != "Annulla") && (answer.text != "Torna al menu")) {
										if (child_time != null) {
											var d = new Date(child_time);
											if (d > now) {
												var long_date = addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear() + " alle " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

												bot.sendMessage(message.chat.id, "Prima di cambiare accademia devi aspettare fino al " + long_date, team);
												return;
											}
										}

										connection.query('SELECT name, id, closed FROM team WHERE name = "' + answer.text + '"', function (err, rows, fields) {
											if (err) throw err;
											if (Object.keys(rows).length == 0) {
												bot.sendMessage(message.chat.id, "Questo team non esiste", team);
												return;
											}

											var teamName2 = rows[0].name;
											var team_id2 = rows[0].id;

											if (team_id == team_id2) {
												bot.sendMessage(message.chat.id, "Lo stesso team non pu√≤ essere sia madre che accademia di se stesso", team);
												return;
											}

											if ((motherId != 0) && (motherId == team_id2)) {
												bot.sendMessage(message.chat.id, "Non puoi definire accademia il tuo team madre", team);
												return;
											}

											if (rows[0].closed == 1) {
												bot.sendMessage(message.chat.id, "Non puoi impostare come accademia un team chiuso", team);
												return;
											}

											connection.query('SELECT 1 FROM team WHERE child_team = ' + team_id2, function (err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length > 0) {
													bot.sendMessage(message.chat.id, "Questo team √® gi√† un accademia di un altro team", team);
													return;
												}

												var d = new Date();
												d.setDate(d.getDate() + 7);
												var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

												connection.query('UPDATE team SET child_team = ' + team_id2 + ', child_time = "' + long_date + '" WHERE id = ' + team_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, teamName2 + " √® ora accademia di " + teamName + "!", team);
												});
											});
										});
									};
								};
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/^Lascia$|Lascia ‚ùå/i, function (message) {
	connection.query('SELECT account_id, holiday, id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT team_id, role FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ' LIMIT 1) AND player_id = ' + player_id + ' ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			if (rows[0].role == 1) {
				bot.sendMessage(message.chat.id, "Passa il potere ad un altro membro prima di lasciare il team", team);
				return;
			}

			connection.query('SELECT level FROM team WHERE id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
				var level = rows[0].level;

				connection.query('SELECT 1 FROM mission_team_party_player WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length > 0) {
						bot.sendMessage(message.chat.id, "Non puoi uscire dal team finch√® sei in un party!");
						return;
					}

					connection.query('SELECT 1 FROM assault_place_player_id WHERE role = 1 AND player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length > 0) {
							bot.sendMessage(message.chat.id, "Non puoi uscire dal team se sei l'eletto, prima passa il potere ad un altro membro del team!");
							return;
						}

						bot.sendMessage(message.chat.id, "Sei sicuro di voler uscire dal team? Dovrai attendere 48 ore prima di entrare in un altro!", conf).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								var action = answer.text;
								if (action == "Torna al Team")
									return;
								else if (action == "Conferma") {
									connection.query('SELECT player.chat_id FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND role = 1', function (err, rows, fields) {
										if (err) throw err;
										var chat_id = rows[0].chat_id;
										connection.query('DELETE FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id + ' LIMIT 1', function (err, rows, fields) {
											if (err) throw err;
											connection.query('UPDATE team SET players = players-1 WHERE id = ' + team_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Sei uscito dal team!", back);
												bot.sendMessage(chat_id, message.from.username + " √® uscito dal team!");
											});

											var d2 = new Date();
											d2.setHours(d2.getHours() + 48);
											var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

											connection.query('UPDATE player SET team_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});

											removeFromAssault(player_id);
										});
									});
								};
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/^Notifiche/i, function (message) {
	connection.query('SELECT account_id, holiday, id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ' LIMIT 1) ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT notification FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				var notify = rows[0].notification;

				connection.query('SELECT level FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;

					bot.sendMessage(message.chat.id, "Cambiare l'impostazione notifiche da parte del team?", conf).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							var action = answer.text;
							if (action == "Torna al Team")
								return;
							else if (action == "Conferma") {
								if (notify == 1)
									notify = 0;
								else
									notify = 1;
								connection.query('UPDATE team_player SET notification = ' + notify + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									if (notify == 0)
										bot.sendMessage(message.chat.id, "Hai disattivato le notifiche team!", back);
									else
										bot.sendMessage(message.chat.id, "Hai attivato le notifiche team!", back);
								});
							}
						};
					});
				});
			});
		});
	});
});

bot.onText(/^Sciogli/i, function (message) {
	connection.query('SELECT account_id, id, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT level FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					if (isAdmin == 0) {
						bot.sendMessage(message.chat.id, "Questa operazione √® consentita solo all'amministratore.", back);
						return;
					}

					bot.sendMessage(message.chat.id, "Sei sicuro di voler eliminare il team?", conf).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							var action = answer.text;
							if (action == "Conferma") {
								connection.query('SELECT 1 FROM team_player WHERE team_id = ' + team_id, function (err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length > 1) {
										bot.sendMessage(message.chat.id, "Devi prima espellere tutti i membri del team!", team);
										return;	
									}
									connection.query('DELETE FROM team_player WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
										connection.query('DELETE FROM team WHERE id = ' + team_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Team eliminato! Non puoi crearlo o accedere ad un altro team prima che siano passate 48 ore!", back);
											return;
										});
									});
									var d2 = new Date();
									d2.setHours(d2.getHours() + 48);
									var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth() + 1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

									connection.query('UPDATE player SET team_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM mission_team_party_player WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM mission_team_party WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});

									connection.query('DELETE FROM assault WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM assault_place_team WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM assault_place_player_id WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM assault_place_magic WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM assault_place_item WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM assault_place_cons WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM assault_mob_weak WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM assault_place_miniboost WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('DELETE FROM assault_increment_history WHERE team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
								});
							}
						};
					});
				});
			});
		});
	});
});

bot.onText(/cambia admin/i, function (message) {
	connection.query('SELECT account_id, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT level, child_team FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					var child_team = rows[0].child_team;

					if (isAdmin == 1) {
						if (child_team != null) {
							var iKeysChild = [];
							var childAdmin = "";
							var child_members = connection_sync.query('SELECT player.nickname, role FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + child_team);
							for (var i = 0, len = Object.keys(child_members).length; i < len; i++) {
								if (child_members[i].role == 0)
									iKeysChild.push([child_members[i].nickname]);
								else if (child_members[i].role == 1)
									childAdmin = child_members[i].nickname;
							}

							iKeysChild.push(["Torna al team"]);

							var kbChild = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: iKeysChild
								}
							};
						}

						var iKeys = [];
						connection.query('SELECT player.nickname, role FROM team_player, player WHERE team_player.player_id = player.id AND player_id != ' + player_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if ((rows[i].nickname != message.from.username) && (rows[i].role == 0))
									iKeys.push([rows[i].nickname]);
							}

							iKeys.push(["Torna al team"]);

							var kb = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: iKeys
								}
							};

							if (child_team == null) {
								var kb2 = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["Amministratore"], ["Vice-Amministratore"], ["Torna al team"]]
									}
								};
							} else {
								var kb2 = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["Amministratore"], ["Amministratore Accademia"], ["Vice-Amministratore"], ["Torna al team"]]
									}
								};
							}

							var kbYesNo = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Si"], ["Torna al cambia admin"]]
								}
							};

							bot.sendMessage(message.chat.id, "Quale autorit√† vuoi gestire?", kb2).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al team")
										return;

									if (answer.text == "Amministratore") {
										bot.sendMessage(message.chat.id, "Chi vuoi eleggere Amministratore al posto tuo?\nOtterr√† tutti i poteri di gestione del team", kb).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text == "Torna al team")
													return;

												var player = answer.text;
												connection.query('SELECT player.nickname FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function (err, rows, fields) {
													if (err) throw err;
													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Questo giocatore non esiste o non si trova in questo team.", back);
														return;
													}

													bot.sendMessage(message.chat.id, "Procedere al cambio admin?", kbYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() != "si")
																return;

															connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + player + '"', function (err, rows, fields) {
																if (err) throw err;
																var newAdmin = rows[0].id;
																if (adminId == newAdmin) {
																	bot.sendMessage(message.chat.id, "Sei gi√† amministratore!", back);
																	return;
																}
																connection.query('UPDATE team_player SET role = 0 WHERE role = 1 AND team_id = ' + team_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE team_player SET role = 1 WHERE player_id = ' + newAdmin, function (err, rows, fields) {
																	if (err) throw err;
																});
																bot.sendMessage(message.chat.id, "Cambio admin completato!", back);
																bot.sendMessage(rows[0].chat_id, "Sei stato nominato Amministratore del Team!", back);
															});
														}
													});
												});
											}
										});
									} else if (answer.text == "Amministratore Accademia") {
										if (child_team == null) {
											bot.sendMessage(message.chat.id, "Non hai ancora collegato un'accademia a questo team.", back);
											return;
										}

										bot.sendMessage(message.chat.id, "Chi vuoi eleggere Amministratore dell'Accademia al posto di " + childAdmin + "?\nOtterr√† tutti i poteri di gestione dell'accademia", kbChild).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text == "Torna al team")
													return;

												var player = answer.text;
												connection.query('SELECT player.nickname FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + child_team + ' AND nickname = "' + player + '"', function (err, rows, fields) {
													if (err) throw err;
													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Questo giocatore non esiste o non si trova nell'accademia.", back);
														return;
													}

													bot.sendMessage(message.chat.id, "Procedere al cambio admin dell'accademia?", kbYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() != "si")
																return;

															connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + player + '"', function (err, rows, fields) {
																if (err) throw err;
																var newAdmin = rows[0].id;
																connection.query('UPDATE team_player SET role = 0 WHERE role = 1 AND team_id = ' + child_team, function (err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE team_player SET role = 1 WHERE player_id = ' + newAdmin, function (err, rows, fields) {
																	if (err) throw err;
																});
																bot.sendMessage(message.chat.id, "Cambio admin accademia completato!", back);
																bot.sendMessage(rows[0].chat_id, "Sei stato nominato Amministratore del Team dal Capo del team Madre!", back);
															});
														}
													});
												});
											}
										});
									} else if (answer.text == "Vice-Amministratore") {
										var max_vice = 2;
										bot.sendMessage(message.chat.id, "Chi vuoi eleggere Vice-Amministratore?\nIl team pu√≤ possedere al massimo " + max_vice + " vice, otterranno i poteri per gestire gli incarichi, i party e potranno inviare messaggi al team", kb).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text == "Torna al team")
													return;

												var player = answer.text;
												connection.query('SELECT player.nickname FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function (err, rows, fields) {
													if (err) throw err;
													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Questo giocatore non esiste o non si trova in questo team.", back);
														return;
													}

													bot.sendMessage(message.chat.id, "Procedere al cambio vice-admin?", kbYesNo).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text.toLowerCase() != "si")
																return;

															connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + player + '"', function (err, rows, fields) {
																if (err) throw err;
																var newAdmin = rows[0].id;
																var newChatId = rows[0].chat_id;
																connection.query('SELECT COUNT(id) As cnt FROM team_player WHERE team_id = ' + team_id + ' AND role = 2', function (err, rows, fields) {
																	if (err) throw err;
																	var vice_num = rows[0].cnt;
																	if (vice_num >= max_vice) {
																		connection.query('UPDATE team_player SET role = 0 WHERE role = 2 AND team_id = ' + team_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE team_player SET role = 2 WHERE player_id = ' + newAdmin, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		bot.sendMessage(message.chat.id, "Cambio Vice-Amministratore completato!", back);
																		bot.sendMessage(newChatId, "Sei stato nominato Vice-Amministratore del Team!", back);
																	} else {
																		connection.query('UPDATE team_player SET role = 2 WHERE player_id = ' + newAdmin, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		bot.sendMessage(message.chat.id, "Nuovo Vice-Amministratore impostato!", back);
																		bot.sendMessage(newChatId, "Sei stato nominato Vice-Amministratore del Team!", back);
																	}
																});
															});
														}
													});
												});
											}
										});
									}
								}
							});
						});
					} else {
						bot.sendMessage(message.chat.id, "Questa operazione √® consentita solo all'amministratore.", back);
						return;
					}
				});
			});
		});
	});
});

bot.onText(/^aumenta posti/i, function (message) {
	connection.query('SELECT id, holiday, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var money = rows[0].money;
		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT level, point FROM team WHERE id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					var point = rows[0].point;

					if (isAdmin == 1) {
						if (level >= 7) {
							bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del Team.", team);
							return;
						}

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [['Conferma'], ['Torna al Team']]
							}
						};

						var price = 100000;
						var price_p = 350;

						price = price * level;
						price_p = price_p + (160 * (level));

						bot.sendMessage(message.chat.id, "Il potenziamento al livello " + (level + 1) + " ti coster√† " + formatNumber(price) + " ¬ß e " + price_p + " ü¶ã. Aumenter√† lo spazio per i membri del team e ti consentir√† di affrontare pi√π boss", kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								var action = answer.text;
								if (action == "Conferma") {
									if (money < price) {
										bot.sendMessage(message.chat.id, "Non hai abbastanza monete", team);
										return;
									}
									if (point < price_p) {
										bot.sendMessage(message.chat.id, "Non hai abbastanza ü¶ã", team);
										return;
									}
									var upd = 2;
									if (level == 6)
										upd = 3;
									connection.query('UPDATE team SET point = point-' + price_p + ', point_spent = point_spent+' + price_p + ', level = level+1, max_players = max_players+' + upd + ' WHERE id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
										connection.query('UPDATE player SET money=money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											connection.query('SELECT level, max_players FROM team WHERE id = ' + team_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Potenziamento al livello " + rows[0].level + " completato, ora pu√≤ ospitare un massimo di " + rows[0].max_players + " membri", team);
											});
										});
									});
								}
							};
						});
					} else {
						bot.sendMessage(message.chat.id, "Questa operazione √® consentita solo all'amministratore.", back);
						return;
					}
				});
			});
		});
	});
});

bot.onText(/Entra in(?! uno esistente)/i, function (message) {
	var name = message.text.substring(message.text.indexOf("in") + 3, message.text.lenght);

	if (name == "Torna al menu") {
		return;
	}

	var pos = name.indexOf("(");
	if (pos != -1) {
		name = name.substr(0, pos - 1);
	}

	if ((name.toLowerCase() == "uno esistente") || (name.toLowerCase() == "combattimento")) {
		return;
	}

	connection.query('SELECT id, team_time, holiday, account_id, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (rows[0].team_time != null) {
			var d = new Date(rows[0].team_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();

			bot.sendMessage(message.chat.id, "Non puoi ancora entrare in un team, ne hai appena lasciato uno. Attendi fino alle " + long_date, back);
			return;
		}

		var player_id = rows[0].id;
		var lev = Math.floor(rows[0].exp / 10);
		var reborn = rows[0].reborn;

		connection.query('SELECT 1 FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				bot.sendMessage(message.chat.id, "Sei gi√† in un team.", back);
				return;
			}

			connection.query('SELECT players, max_players, id, name, min_lev, slogan, closed FROM team WHERE name = "' + name + '"', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					if (rows[0].players < rows[0].max_players) {
						var team_id = rows[0].id;
						var team_name = rows[0].name;
						var min_lev = rows[0].min_lev;
						var slogan = rows[0].slogan;
						if (rows[0].closed == 1) {
							bot.sendMessage(message.chat.id, "Non puoi entrare in un team che non accetta altri membri.", back);
							return;
						}

						var extra = "";
						if (min_lev > 0) {
							extra = "\nPer l'accesso √® richiesto almeno il livello " + getLevel(min_lev);
						}
						var slogantxt = "";
						if (slogan != null)
							slogantxt = "\nSlogan: " + slogan;

						bot.sendMessage(message.chat.id, "Team: *" + team_name + "* (" + rows[0].players + "/" + rows[0].max_players + ")" + slogantxt + extra, yesno).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase() == "si") {
									if (getRealLevel(reborn, lev) < min_lev) {
										bot.sendMessage(message.chat.id, "Il tuo livello non √® ancora sufficiente per entrare in questo team, torna al " + getLevel(min_lev), back);
										return;
									}
									connection.query('INSERT INTO `team_player`(`id`, `player_id`, `team_id`) VALUES (DEFAULT,' + player_id + ',' + team_id + ')', function (err, rows, fields) {
										if (err) throw err;
										connection.query('SELECT player_id FROM team_player WHERE team_id = ' + team_id + ' AND role = 1', function (err, rows, fields) {
											if (err) throw err;
											connection.query('SELECT chat_id FROM player WHERE id = ' + rows[0].player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(rows[0].chat_id, message.from.username + " √® entrato nel tuo team!");
											});
										});
										bot.sendMessage(message.chat.id, "Sei entrato nel team " + name + "!", team);
										return;
									});
									connection.query('UPDATE team SET players = players+1 WHERE id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
								};
							};
						});
					} else {
						bot.sendMessage(message.chat.id, "Il team specificato √® pieno, chiedi al fondatore di potenziarlo per aumentare gli slot.", back);
						return;
					}
				} else {
					bot.sendMessage(message.chat.id, "Il team che hai richiesto non esiste.", back);
					return;
				}
			});
		});
	});
});

bot.onText(/^Villa|Villa di Last|Torna alla Villa|Entra nella Villa/i, function (message) {

	var today = new Date();
	if ((today.getDay() > 2) && (today.getDay() < 6))
		villa = 0;

	if (villa == 0) {
		connection.query("SELECT nickname, COUNT(item_id) As cnt FROM event_villa_gift, player WHERE event_villa_gift.from_id = player.id GROUP BY from_id ORDER BY COUNT(item_id) DESC LIMIT 50", function (err, rows, fields) {
			if (err) throw err;

			var text = "";
			var c = 1;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				text += c + "¬∞ " + rows[i].nickname + " (" + rows[i].cnt + ")\n";
				c++;
			}

			connection.query("SELECT nickname, COUNT(item_id) As cnt FROM event_villa_gift, player WHERE event_villa_gift.to_id = player.id GROUP BY to_id ORDER BY COUNT(item_id) DESC LIMIT 50", function (err, rows, fields) {
				if (err) throw err;

				text += "\n\nE quella di chi ne ha ricevute di pi√π:\n";
				c = 1;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					text += c + "¬∞ " + rows[i].nickname + " (" + rows[i].cnt + ")\n";
					c++;
				}

				bot.sendMessage(message.chat.id, "L'evento √® terminato! Grazie per aver partecipato, ecco la classifica di chi ha donato pi√π casse:\n" + text, back_html);
			});
		});
		return;
	}

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Invia una Cassa üì¶"], ["Torna al menu"]]
		}
	};

	var kb1 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Entra nella Villa üè∞"], ["Torna al menu"]]
		}
	};

	var kb2 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna alla Villa"], ["Torna al menu"]]
		}
	};

	var kb3 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna alla Villa"], ["Torna al menu"]]
		}
	};

	var kb4 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Annulla"], ["Torna alla villa"]]
		}
	};

	connection.query('SELECT id, account_id, reborn, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		connection.query('SELECT COUNT(*) As cnt, (SELECT COUNT(*) FROM event_villa_gift WHERE from_id = ' + player_id + ') As mycnt FROM event_villa_gift', function (err, rows, fields) {
			if (err) throw err;

			var count = rows[0].cnt;
			var mycount = rows[0].mycnt;

			connection.query('SELECT player_id, points FROM event_villa_status WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					connection.query('INSERT INTO event_villa_status (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella *Villa di LastSoldier95* üè∞!\nDurante questa settimana, questo facoltoso cavaliere ti premier√† per il completamento di *pi√π missioni o incarichi possibili*, pi√π ne verranno completati, pi√π il padrone di casa sar√† soddisfatto.\nTi suggerisce anche un modo per coinvolgere pi√π avventurieri possibili regalando loro *Casse Misteriose*!\nEgli ti assegna una Bevanda Energetica Plus per partire con pi√π carica, puoi accettarla ma solo entrando immediatamente nella Villa la otterrai, buona fortuna!", kb1).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase().indexOf("villa") != -1) {
									connection.query('UPDATE player SET boost_id = 1, boost_mission = 6 WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai ottenuto ed attivato la Bevanda Energetica Plus del soldato!");
									});
								}
							};
						});
					});
					return;
				}

				var gift = Math.floor(rows[0].points / 5);
				var bonusText = "";

				var text = "Benvenut" + gender_text + " nella *Villa di LastSoldier95* üè∞!\nSvolgi missioni e incarichi da questo momento ed ogni 5 punti otterrai la possibilit√† di inviare una *Cassa Misteriosa* üì¶ ad un altro avventuriero (compresi gli oggetti U)!\n\nHai a disposizione *" + gift + "* Casse da inviare (" + rows[0].points + " punti)\nFin ora sono state inviate *" + count + "* Casse, *" + mycount + "* da parte tua\n\nNota: Se non invierai tutte le casse entro la fine dell'evento, il padrone di casa se le riprender√† scontento del tuo operato" + bonusText;
				bot.sendMessage(message.chat.id, text, kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text.indexOf("Cassa") != -1) {

							if (gift <= 0) {
								bot.sendMessage(message.chat.id, "Non hai Casse a disposizione! Svolgi missioni per ottenere punti!", kb2);
								return;
							}

							bot.sendMessage(message.chat.id, "A chi vuoi inviare la Cassa? Puoi inviarne solamente 5 per persona! Scrivi il suo nome utente. Se vuoi aggiungere un messaggio personalizzato aggiungi la virgola (esempio: fenix45, Auguri!)", kb4).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {

									if (answer.text == "Annulla")
										return;

									var nick = answer.text.replace("@", "");
									var custom_msg = "";
									if (nick.indexOf(",") != -1) {
										var split = nick.split(",");
										nick = split[0].trim();
										custom_msg = split[1].trim();
									}
									connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + nick + '"', function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Il nome utente inserito non esiste!", kb2);
											return;
										}
										var player_id2 = rows[0].id;
										var chat_id = rows[0].chat_id;

										if (player_id != 1) {
											if (player_id2 == player_id) {
												bot.sendMessage(message.chat.id, "Quanto √® orribile inviare un dono a se stessi?! Daiii!", kb2);
												return;
											}

											if (player_id2 == 1) {
												bot.sendMessage(message.chat.id, "Grazie per il pensiero ma il sommo ha gi√† tutto ci√≤ che gli serve ‚ù§Ô∏è ", kb2);
												return;
											}
										}

										connection.query('SELECT 1 FROM event_villa_gift WHERE from_id = ' + player_id + ' AND to_id = ' + player_id2, function (err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length > 4) {
												bot.sendMessage(message.chat.id, "Non puoi inviare pi√π di 5 regali alla stessa persona!", kb2);
												return;
											}

											connection.query('UPDATE event_villa_status SET points = points-5 WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												connection.query('SELECT id, name FROM item WHERE rarity NOT IN ("C","U","UE","A","X","NC","S","D","H","IN") AND craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
													if (err) throw err;

													var item_id = rows[0].id;
													var item_name = rows[0].name;

													var uArray = [200, 201, 532, 598];
													var nArray = ["Necronucleo", "Respiro di Morte", "Urlo di Morte", "Soffio di Morte"];
													var rand = Math.random() * 1000;
													if (rand < 5) {
														var i = Math.floor(Math.random() * uArray.length);
														item_id = uArray[i];
														item_name = nArray[i];
													}
													if (rand < 1) {
														item_id = 777;
														item_name = "Testa del Dragone";
													}

													connection.query('INSERT INTO event_villa_gift (from_id, to_id, item_id) VALUES (' + player_id + ',' + player_id2 + ',' + item_id + ')', function (err, rows, fields) {
														if (err) throw err;
														addItem(player_id2, item_id);
														var extra = "";
														if (custom_msg != "")
															extra = " con un messaggio personalizzato";
														bot.sendMessage(message.chat.id, "Hai inviato una Cassa Misteriosa a <b>" + nick + "</b>" + extra + "!", kb2);
														if (custom_msg != "")
															extra = "\nSopra la cassa leggi: <i>" + custom_msg + "</i>";
														bot.sendMessage(chat_id, "Hai ricevuto una Cassa Misteriosa contenente <b>" + item_name + "</b> da <b>" + message.from.username + "</b>!" + extra, html);
													});
												});
											});
										});
									});
								};
							});
						}
					};
				});
			});
		});
	});
});

bot.onText(/gnomorra/i, function (message) {
	if (message.text == "/gnomorra")
		return;

	if (gnomorra == 0) {
		bot.sendMessage(message.chat.id, "L'evento non √® disponibile", back);
		return;
	}

	var today = new Date();
	if ((today.getDay() != 6) && (today.getDay() != 0)) {
		bot.sendMessage(message.chat.id, "L'evento non √® pi√π disponibile!", back);
		return;
	}

	connection.query('SELECT id, account_id, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla Gnomorra"], ["Torna al menu"]]
			}
		};

		var kb = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Sfida qualcuno üëÄ"], ["Sfida precisa üí¨"], ["Classifica üîù", "Sospendi ‚úã"], ["Torna al menu"]]
			}
		};

		var kb2 = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Vai alla Gnomorra Lootiana"], ["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si", "Torna alla Gnomorra"], ["Torna al menu"]]
			}
		};

		var kbInvite = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Accetta invito", "Rifiuta invito"], ["Torna alla Gnomorra"]]
			}
		};

		connection.query('SELECT win, lose, win_streak, invite_id, enemy_id, battle_limit, practice_limit, streak_record, suspend FROM event_gnomorra WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO event_gnomorra (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " alla <b>Gnomorra Lootiana</b>! Sfida gli altri giocatori in particolari partite di questo gioco tipico di Lootia e scala la classifica!\nOgni vittoria otterrai un premio ed il premio migliorer√† pi√π alta sar√† la tua sequenza di vittorie consecutive. Puoi giocare 50 sfide normali e 50 allenamenti ogni giorno, cerca di sfruttarle al meglio ;)", kb2);
				});
				return;
			}

			var win = rows[0].win;
			var lose = rows[0].lose;
			var win_streak = rows[0].win_streak;
			var invite_id = rows[0].invite_id;
			var enemy_id = rows[0].enemy_id;
			var battle_limit = rows[0].battle_limit;
			var practice_limit = rows[0].practice_limit;
			var streak_record = rows[0].streak_record;
			var suspend = rows[0].suspend;

			connection.query('SELECT SUM(battle_limit+practice_limit) As cnt FROM event_gnomorra', function (err, rows, fields) {
				if (err) throw err;

				var total_plays = rows[0].cnt;

				bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " alla <b>Gnomorra Lootiana</b>!\nPuoi sfidare un giocatore casuale oppure uno in particolare inserendo il suo nickname, il giocatore bersaglio deve accettare l'invito, la partita √® divisa in 3 round.\n\n<b>Vittorie:</b> " + win + "\n<b>Sconfitte:</b> " + lose + "\n<b>Vittorie consecutive:</b> " + win_streak + " (Record: " + streak_record + ")\n\nPuoi ancora giocare " + (50-battle_limit) + " partite normali e " + (50-practice_limit) + " allenamenti, sono state giocate in totale " + formatNumber(total_plays) + " partite!", kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text.indexOf("qualcuno") != -1) {
							bot.sendMessage(message.chat.id, "Cercherai un giocatore con abilit√† simili alle tue, procedi?", kbYesNo).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {

									if (answer.text.toLowerCase() != "si")
										return;

									var d = new Date();
									if ((d.getHours() < 9) || (d.getHours() > 22)) { //9-23
										bot.sendMessage(message.chat.id, "Non √® possibile avviare partite di notte!", kbBack);
										return;
									}

									if (suspend == 1) {
										bot.sendMessage(message.chat.id, "Rimuovi la sospensione per avviare una sfida!", kbBack);
										return;
									}

									if (invite_id != null) {
										bot.sendMessage(message.chat.id, "Hai gi√† un invito in attesa, attendi che scada prima di inviarne un altro", kbBack);
										return;
									}

									if (enemy_id != null) {
										bot.sendMessage(message.chat.id, "Hai gi√† una partita in corso, usa /gnomorra per riprenderla", kbBack);
										return;
									}

									if ((50-battle_limit) <= 0) {
										bot.sendMessage(message.chat.id, "Per oggi non puoi pi√π avviare partite di questo tipo", kbBack);
										return;
									}

									connection.query('SELECT 1 FROM event_gnomorra WHERE enemy_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length > 0) {
											bot.sendMessage(message.chat.id, "Hai gi√† una partita in corso, usa /gnomorra per riprenderla", kbBack);
											return;
										}

										connection.query('SELECT 1 FROM event_gnomorra WHERE invite_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length > 0) {
												bot.sendMessage(message.chat.id, "Hai un invito in corso, accettalo prima di cercare sfidanti", kbInvite);
												return;
											}

											connection.query('SELECT COUNT(player_id) As cnt FROM event_gnomorra', function (err, rows, fields) {
												if (err) throw err;
												if (rows[0].cnt < 10) {
													bot.sendMessage(message.chat.id, "La ricerca automatica sar√† disponibile con pi√π giocatori iscritti!", kbBack);
													return;
												}
												connection.query('SELECT event_gnomorra.player_id, TIMESTAMPDIFF(SECOND, time, NOW()) As diff FROM event_gnomorra, last_command, player  WHERE event_gnomorra.player_id = player.id AND player.account_id = last_command.account_id AND event_gnomorra.player_id != ' + player_id + ' AND enemy_id IS NULL AND invite_id IS NULL AND event_gnomorra.player_id NOT IN (SELECT invite_id FROM event_gnomorra WHERE invite_id IS NOT NULL) AND event_gnomorra.player_id NOT IN (SELECT enemy_id FROM event_gnomorra WHERE enemy_id IS NOT NULL) AND suspend = 0 AND battle_limit < 50 ORDER BY diff ASC LIMIT 5', function (err, rows, fields) {
													if (err) throw err;
													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Nessun giocatore disponibile, riprova", kbBack);
														return;
													}
													var rand = Math.round(getRandomArbitrary(0, Object.keys(rows).length-1));
													var enemy_player_id = rows[rand].player_id;

													gnomorraStart(player_id, enemy_player_id, 0);
												});
											});
										});
									});
								}
							});
						} else if (answer.text.indexOf("precisa") != -1) {

							var d = new Date();
							if ((d.getHours() < 9) || (d.getHours() > 22)) { //9-23
								bot.sendMessage(message.chat.id, "Non √® possibile avviare partite di notte!", kbBack);
								return;
							}

							if (suspend == 1) {
								bot.sendMessage(message.chat.id, "Rimuovi la sospensione per avviare una sfida!", kbBack);
								return;
							}

							if (invite_id != null) {
								bot.sendMessage(message.chat.id, "Hai gi√† un invito in attesa, attendi che scada prima di inviarne un altro", kbBack);
								return;
							}

							if (enemy_id != null) {
								bot.sendMessage(message.chat.id, "Hai gi√† una partita in corso, usa /gnomorra per riprenderla", kbBack);
								return;
							}

							if ((50-practice_limit) <= 0) {
								bot.sendMessage(message.chat.id, "Per oggi non puoi pi√π avviare partite di questo tipo", kbBack);
								return;
							}

							connection.query('SELECT 1 FROM event_gnomorra WHERE enemy_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length > 0) {
									bot.sendMessage(message.chat.id, "Hai gi√† una partita in corso, usa /gnomorra per riprenderla", kbBack);
									return;
								}

								connection.query('SELECT 1 FROM event_gnomorra WHERE invite_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length > 0) {
										bot.sendMessage(message.chat.id, "Hai un invito in corso, accettalo prima di cercare sfidanti", kbInvite);
										return;
									}

									bot.sendMessage(message.chat.id, "Le partite mirate non vengono considerate nei punteggi e non forniscono premi\nInserisci il nickname del giocatore che vuoi sfidare", kb2).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if ((answer.text == "Vai alla Gnomorra Lootiana") || (answer.text == "Torna al menu"))
												return;
											var player = answer.text.replace("@", "").trim();
											connection.query('SELECT id, nickname FROM player WHERE nickname = "' + player + '"', function (err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova", kbBack);
													return;
												}

												if (rows[0].id == player_id) {
													bot.sendMessage(message.chat.id, "Non puoi sfidare te stesso, riprova", kbBack);
													return;
												}

												var enemy_player_id = rows[0].id;

												connection.query('SELECT enemy_id, invite_id, suspend, practice_limit FROM event_gnomorra WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
													if (err) throw err;
													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Il giocatore non √® iscritto all'evento, riprova", kbBack);
														return;
													}
													if (rows[0].enemy_id != null) {
														bot.sendMessage(message.chat.id, "Il giocatore √® gi√† impegnato in una partita, riprova", kbBack);
														return;
													}
													if (rows[0].invite_id != null) {
														bot.sendMessage(message.chat.id, "Il giocatore √® gi√† in attesa della conferma di un invito, riprova", kbBack);
														return;
													}
													if (rows[0].suspend == 1) {
														bot.sendMessage(message.chat.id, "Il giocatore bersaglio √® sospeso!", kbBack);
														return;
													}
													if (rows[0].practice_limit >= 50) {
														bot.sendMessage(message.chat.id, "Il giocatore bersaglio ha raggiunto il limite di sfide mirate!", kbBack);
														return;
													}

													connection.query('SELECT 1 FROM event_gnomorra WHERE enemy_id = ' + enemy_player_id, function (err, rows, fields) {
														if (err) throw err;

														if (Object.keys(rows).length > 0) {
															bot.sendMessage(message.chat.id, "Il giocatore √® gi√† impegnato in una partita, riprova", kbBack);
															return;
														}

														connection.query('SELECT 1 FROM event_gnomorra WHERE invite_id = ' + enemy_player_id, function (err, rows, fields) {
															if (err) throw err;

															if (Object.keys(rows).length > 0) {
																bot.sendMessage(message.chat.id, "Il giocatore ha gi√† un invito in attesa", kbBack);
																return;
															}

															gnomorraStart(player_id, enemy_player_id, 1);
														});
													});
												});
											});
										};
									});
								});
							});
						} else if (answer.text.indexOf("Classifica") != -1) {
							var text = "<b>Classifica vittorie:</b>\n";

							connection.query('SELECT P.nickname, E.win FROM event_gnomorra E, player P WHERE P.id = E.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) AND P.id NOT IN (1,3) AND win > 0 GROUP BY E.player_id ORDER BY win DESC', function (err, rows, fields) {
								if (err) throw err;

								var range = 10;
								var nickname = [];
								var points = [];
								var mypos = 0;

								if (Object.keys(rows).length < 20) {
									bot.sendMessage(message.chat.id, "<i>La classifica sar√† disponibile con pi√π giocatori registrati all'evento!</i>", kbBack);
									return;
								}

								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									nickname.push(rows[i].nickname);
									points.push(rows[i].win);
									if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase()) {
										mypos = i;
									}
								}

								for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
									if (nickname[i] != undefined) {
										if (i == mypos) {
											text += (i + 1) + "¬∞ <b>" + nickname[i] + "</b> (" + points[i] + ")\n";
										} else {
											text += (i + 1) + "¬∞ " + nickname[i] + " (" + points[i] + ")\n";
										}
									}
								}

								text += "\n<b>Classifica record vittorie consecutive:</b>\n";

								connection.query('SELECT P.nickname, E.streak_record FROM event_gnomorra E, player P WHERE P.id = E.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) AND P.id NOT IN (1,3) AND streak_record > 0 GROUP BY E.player_id ORDER BY streak_record DESC', function (err, rows, fields) {
									if (err) throw err;

									var range = 10;
									var nickname = [];
									var points = [];
									var mypos = 0;

									if (Object.keys(rows).length < 20) {
										text += "<i>Questa classifica sar√† disponibile con pi√π giocatori registrati all'evento</i>";
									} else {
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											nickname.push(rows[i].nickname);
											points.push(rows[i].streak_record);
											if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase()) {
												mypos = i;
											}
										}

										for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
											if (nickname[i] != undefined) {
												if (i == mypos) {
													text += (i + 1) + "¬∞ <b>" + nickname[i] + "</b> (" + points[i] + ")\n";
												} else {
													text += (i + 1) + "¬∞ " + nickname[i] + " (" + points[i] + ")\n";
												}
											}
										}
									}

									bot.sendMessage(message.chat.id, text, kbBack);
								});
							});
						} else if (answer.text.indexOf("Sospendi") != -1) {

							if (enemy_id != null) {
								bot.sendMessage(message.chat.id, "Puoi sospenderti solo quando non sei in partita", kbBack);
								return;
							}

							if (invite_id != null) {
								bot.sendMessage(message.chat.id, "Puoi sospenderti solo quando non hai inviti in sospeso", kbBack);
								return;
							}

							connection.query('SELECT 1 FROM event_gnomorra WHERE enemy_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length > 0) {
									bot.sendMessage(message.chat.id, "Puoi sospenderti solo quando non sei in partita", kbBack);
									return;
								}

								var text = "Sei sicuro di volerti sospendere? Non potrai essere sfidato n√® sfidare, ma le tue vittorie consecutive ed il relativo record saranno resettate";
								if (suspend == 1)
									text = "Rimuovere la sospensione? Potrai essere sfidato o sfidare in qualsiasi momento";

								bot.sendMessage(message.chat.id, text, kbYesNo).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {
											if (suspend == 0) {
												connection.query('UPDATE event_gnomorra SET suspend = 1, win_streak = 0, streak_record = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Ti sei sospeso dal Gnomorra!", kbBack);
												});
											} else {
												connection.query('UPDATE event_gnomorra SET suspend = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Non sei pi√π sospeso da Gnomorra!", kbBack);
												});
											}
										}
									}
								});
							});
						}
					};
				});
			});
		});
	});
});

bot.onText(/accetta invito|rifiuta invito/i, function (message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		connection.query('SELECT enemy_id FROM event_gnomorra WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Iscriviti all'evento prima di accettare un invito", back);
				return;
			}
			if (rows[0].enemy_id != null) {
				bot.sendMessage(message.chat.id, "Sei gi√† in partita", back);
				return;
			}

			connection.query('SELECT 1 FROM event_gnomorra WHERE enemy_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0) {
					bot.sendMessage(message.chat.id, "Sei gi√† in partita", back);
					return;
				}

				connection.query('SELECT player_id FROM event_gnomorra WHERE invite_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Nessun invito in attesa", back);
						return;
					}

					var enemy_player_id = rows[0].player_id;

					connection.query('SELECT chat_id FROM player WHERE id = ' + enemy_player_id, function (err, rows, fields) {
						if (err) throw err;

						if (message.text.toLowerCase().indexOf("accetta") != -1) {
							bot.sendMessage(message.chat.id, "Hai accettato l'invito! Tocca al tuo avversario!", back);
							bot.sendMessage(rows[0].chat_id, message.from.username + " ha accettato il tuo invito!");

							connection.query('SELECT type FROM event_gnomorra WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
								if (err) throw err;
								var type = rows[0].type;
								connection.query('UPDATE event_gnomorra SET invite_id = NULL, invite_time = NULL, enemy_id = ' + player_id + ', game_time = DATE_ADD(NOW(), INTERVAL 10 MINUTE) WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
									if (err) throw err;
									gnomorraGame(enemy_player_id, player_id, type);
								});
							});
						} else {
							bot.sendMessage(message.chat.id, "Hai rifiutato l'invito!", back);
							bot.sendMessage(rows[0].chat_id, message.from.username + " ha rifiutato il tuo invito!");

							connection.query('UPDATE event_gnomorra SET invite_id = NULL, invite_time = NULL, type = 0 WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
								if (err) throw err;
							});
						}
					});
				});
			});
		});
	});
});

bot.onText(/^\/gnomorra/i, function (message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		connection.query('SELECT round_sel, enemy_id, type FROM event_gnomorra WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non sei registrato all'evento", back);
				return;
			}

			if (rows[0].enemy_id == null) {
				connection.query('SELECT round_sel, player_id, type FROM event_gnomorra WHERE enemy_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Non sei in partita", back);
						return;
					}

					var enemy_player_id = rows[0].player_id;
					var round_sel = rows[0].round_sel;
					var type = rows[0].type;

					if (round_sel == 0) {
						bot.sendMessage(message.chat.id, "Non √® il tuo turno!", back);
					} else if (round_sel != 0) {
						gnomorraGame(player_id, enemy_player_id, type);
					}
				});
				return;
			} else {
				var enemy_player_id = rows[0].enemy_id;
				var type = rows[0].type;
				if (rows[0].round_sel == 0) {
					gnomorraGame(player_id, enemy_player_id, type);
				} else if (rows[0].round_sel != 0) {
					bot.sendMessage(message.chat.id, "Non √® il tuo turno!", back);
				}
			}
		});
	});
});

bot.onText(/^\/endVillaggio/i, function (message) {
	connection.query('SELECT player.id, nickname, chat_id, COUNT(L.id) As cnt FROM event_snowball_list L, player WHERE player.id = L.player_id GROUP BY L.player_id ORDER BY cnt DESC', function (err, rows, fields) {
		if (err) throw err;
		var text = "";
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			text = "Al termine dell'*Evento Natalizio* ti sono rimasti *" + rows[i].cnt + "* Pupazzi di Neve e hai ottenuto ";

			var qnt = rows[i].cnt*3;	// scrigni
			var key = qnt*10;			// chiavi

			text += qnt + "x *Scrigni Mistici* (con " + key + " üóù per aprirli)";
			connection.query('UPDATE player SET mkeys = mkeys+' + key + ' WHERE id = ' + rows[i].id, function (err, rows, fields) {
				if (err) throw err;
			});
			for (var j = 0; j < qnt; j++)
				addChest(rows[i].id, 8);
			if (rows[i].cnt >= 2) {
				addItem(rows[i].id, 773);
				text += " ed un *Alberello di Natale 2018* (IN)";
			}
			console.log(rows[i].nickname, text);
			bot.sendMessage(rows[i].chat_id, text + "!", mark);
		}		
	});
});

bot.onText(/Casa nella Neve|Torna alla Casa$|Entra nella Casa$|villaggio innevato/i, function (message) {
	if (snowHouseEnd == 1) {
		bot.sendMessage(message.chat.id, "L'evento √® terminato! A breve verranno distribuiti i premi, grazie per aver partecipato.", back);
		return;
	}

	if ((snowHouse == 0) && (message.from.id != 20471035)) {
		//bot.sendMessage(message.chat.id, "I giocatori si stanno lentamente riunendo nel villaggio innevato... Pazienta!", back);
		bot.sendMessage(message.chat.id, "La neve lentamente si scioglie...", back);
		return;
	}

	connection.query('SELECT id, account_id, life, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].life <= 0) {
			bot.sendMessage(message.chat.id, "Recupera salute prima di partecipare!", revive);
			return;
		}

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla Casa"], ["Torna al menu"]]
			}
		};

		var kb = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Lancia Palla di Neve ‚ùÑÔ∏è"], ["Costruisci un Pupazzo ‚õÑÔ∏è"], ["Classifica üîù", "Torna al menu"]]
			}
		};

		var kb2 = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Casuale"], ["Torna alla Casa"]]
			}
		};

		var kb3 = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Entra nella Casa"], ["Torna alla Casa"]]
			}
		};

		var kbYesNo = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna alla Casa"]]
			}
		};

		connection.query('SELECT snowball FROM event_snowball_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO event_snowball_status (player_id, snowball) VALUES (' + player_id + ', 5)', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella <b>Casa nella Neve</b> üå®, l'evento Natalizio! üéÑ\nSi tratta in tutto per tutto di una competizione per chi riuscir√† a costruire pi√π <b>Pupazzi di Neve</b> in tutto il regno di Lootia. Con le <b>Palle di Neve</b> puoi costruirne sempre di pi√π, oppure danneggiare quelli avversari per far perdere loro punti. Puoi accumulare la Neve attraverso Missioni, Ispezioni o nei Dungeon.\nBuona fortuna!\nHai ricevuto <b>5 Palle di Neve</b> per l'iscrizione.", kb3);
				});
				return;
			}

			var snowball = rows[0].snowball;

			connection.query('SELECT SUM(snowball) As cnt FROM event_snowball_status', function (err, rows, fields) {
				if (err) throw err;

				var snowball_tot = rows[0].cnt;

				connection.query('SELECT COUNT(id) As cnt FROM event_snowball_list', function (err, rows, fields) {
					if (err) throw err;

					var snowman_cnt_tot = parseInt(rows[0].cnt);

					connection.query('SELECT COUNT(id) As cnt FROM event_snowball_list WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var snowman_cnt = parseInt(rows[0].cnt);

						bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella tua <b>Casa nella Neve</b> üå®!\nDurante questa settimana si svolge una gara che premier√† chi riuscir√† a costruire pi√π Pupazzi di Neve degli altri partecipanti!\nPer costruirne un altro ti servono <b>" + (10+(snowman_cnt*10)) + " Palle di Neve</b>, puoi lanciarne una per danneggiare gli avversari oppure i loro pupazzi.\n\nPossiedi <b>" + snowball + "</b> Palle di Neve ‚ùÑÔ∏è e <b>" + snowman_cnt + "</b> Pupazzi di Neve ‚õÑÔ∏è!\nIn totale sono stati creati <b>" + snowman_cnt_tot + "</b> Pupazzi e ci sono " + snowball_tot + " Palle di Neve!\n\nC'√® una probabilit√† di ottenerne altre tramite missioni, ispezioni o sconfiggendo mostri nel dungeon, ogni Pupazzo ti fornir√† 1 Palla di Neve per ogni azione\n\nL'evento termina il 31 alle 12:00!", kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text == "Lancia Palla di Neve ‚ùÑÔ∏è") {
									bot.sendMessage(message.chat.id, "Puoi lanciare una Palla di Neve ad un giocatore in particolare (scrivendo il nickname) oppure ad uno casuale, nel primo caso consumerai 2 Palle di Neve.\nNel caso in cui il bersaglio avesse un Pupazzo di Neve, quest'ultimo verr√† colpito al posto del giocatore e danneggiato o distrutto. Pu√≤ capitare inoltre che il giocatore avversario recuperi la tua Palla di Neve!", kb2).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text == "Torna alla Casa")
												return;						
											var enemy_player_id = 0;
											var enemy_chat_id = 0;
											var enemy_life = 0;
											var enemy_nickname = "";
											var enemy_snowman_id = 0;

											var isSnowMan = 0;

											if (answer.text == "Casuale") {
												var rows = connection_sync.query('SELECT event_snowball_status.player_id, player.chat_id, player.life, player.nickname FROM event_snowball_status, player WHERE event_snowball_status.player_id = player.id AND event_snowball_status.player_id != ' + player_id + ' AND player.life > 0 ORDER BY RAND()');

												if (Object.keys(rows).length > 0) {
													enemy_player_id = rows[0].player_id;
													enemy_chat_id = rows[0].chat_id;
													enemy_life = rows[0].life;
													enemy_nickname = rows[0].nickname;
												}

												rows = connection_sync.query('SELECT event_snowball_list.id, event_snowball_list.player_id, player.chat_id, event_snowball_list.life, player.nickname FROM event_snowball_list, player WHERE event_snowball_list.player_id = player.id AND player_id = ' + enemy_player_id + ' AND event_snowball_list.life > 0 ORDER BY RAND()');

												if (Object.keys(rows).length > 0) {
													enemy_player_id = rows[0].player_id;
													enemy_chat_id = rows[0].chat_id;
													enemy_life = rows[0].life;
													enemy_nickname = rows[0].nickname;
													enemy_snowman_id = rows[0].id;
													isSnowMan = 1;
												}

												if ((Object.keys(rows).length == 0) && (enemy_player_id == 0)) {
													bot.sendMessage(message.chat.id, "Non √® disponibile alcun bersaglio in salute!", kbBack);
													return;
												}

												if (snowball < 1) {
													bot.sendMessage(message.chat.id, "Non hai abbastanza Palle di Neve!", kbBack);
													return;
												}

												connection.query('UPDATE event_snowball_status SET snowball = snowball-1 WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											} else {
												answer.text = answer.text.replace("@","");

												if (answer.text.toLowerCase() == message.from.username) {
													bot.sendMessage(message.chat.id, "Non lanciare le Palle di Neve a te stesso!", kbBack);
													return;
												}

												var rows = connection_sync.query('SELECT event_snowball_list.id, event_snowball_list.player_id, player.chat_id, event_snowball_list.life, player.nickname FROM event_snowball_list, player WHERE event_snowball_list.player_id = player.id AND nickname = "' + answer.text + '" AND event_snowball_list.life > 0');

												if (Object.keys(rows).length > 0) {
													enemy_player_id = rows[0].player_id;
													enemy_chat_id = rows[0].chat_id;
													enemy_life = rows[0].life;
													enemy_nickname = rows[0].nickname;
													enemy_snowman_id = rows[0].id;
													isSnowMan = 1;
												}

												rows = connection_sync.query('SELECT event_snowball_status.player_id, player.chat_id, player.life, player.nickname FROM event_snowball_status, player WHERE event_snowball_status.player_id = player.id AND player.nickname = "' + answer.text + '"');

												if (isSnowMan == 0) {
													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "Il giocatore non esiste o non √® registrato all'evento", kbBack);
														return;
													}

													if (rows[0].life <= 0) {
														bot.sendMessage(message.chat.id, "Il giocatore √® troppo stanco per essere colpito", kbBack);
														return;
													}
													enemy_player_id = rows[0].player_id;
													enemy_chat_id = rows[0].chat_id;
													enemy_life = rows[0].life;
													enemy_nickname = rows[0].nickname;
												}

												if (snowball < 2) {
													bot.sendMessage(message.chat.id, "Non hai abbastanza Palle di Neve! Ne servono due per mirare con pi√π accuretezza un giocatore", kbBack);
													return;
												}

												connection.query('UPDATE event_snowball_status SET snowball = snowball-2 WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											}

											var text = "";
											var text2 = "";
											var rand = Math.random()*100;
											if (rand < 30) {
												if (isSnowMan == 0) {
													text = " Ma ha recuperato la tua Palla di Neve!";
													text2 = " Ma hai recuperato la sua Palla di Neve!";
												} else {
													text = " Il giocatore ha recuperato la tua Palla di Neve!";
													text2 = " Hai recuperato la sua Palla di Neve!";
												}

												connection.query('UPDATE event_snowball_status SET snowball = snowball+1 WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											}

											if (isSnowMan == 0) {
												var damage = Math.round(getRandomArbitrary(enemy_life*0.05, enemy_life*0.1));

												bot.sendMessage(message.chat.id, "Hai lanciato una Palla di Neve e hai colpito <b>" + enemy_nickname + "</b> che ha perso " + formatNumber(damage) + " hp!" + text, kbBack);
												bot.sendMessage(enemy_chat_id, "Sei stato colpito dalla Palla di Neve di <b>" + message.from.username + "</b> e hai perso " + formatNumber(damage) + " hp!" + text2, html);

												connection.query('UPDATE player SET life = life-' + damage + ' WHERE id = ' + enemy_player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											} else {
												var destroy = 0;
												if (enemy_life <= 2) {
													connection.query('DELETE FROM event_snowball_list WHERE id = ' + enemy_snowman_id, function (err, rows, fields) {
														if (err) throw err;
													});
													bot.sendMessage(message.chat.id, "Hai lanciato una Palla di Neve e hai colpito il Pupazzo di Neve di <b>" + enemy_nickname + "</b> distruggendolo!" + text, kbBack);
													bot.sendMessage(enemy_chat_id, "Il tuo Pupazzo di Neve √® stato distrutto dalla Palla di Neve di <b>" + message.from.username + "</b>!" + text2, html);
												} else {
													connection.query('UPDATE event_snowball_list SET life = life-2 WHERE id = ' + enemy_snowman_id, function (err, rows, fields) {
														if (err) throw err;
													});
													bot.sendMessage(message.chat.id, "Hai lanciato una Palla di Neve e hai colpito il Pupazzo di Neve di <b>" + enemy_nickname + "</b> che ha perso 2 porzione di neve!" + text, kbBack);
													bot.sendMessage(enemy_chat_id, "Il tuo Pupazzo di Neve √® stato colpito dalla Palla di Neve di <b>" + message.from.username + "</b> e ha perso 2 porzione di neve!" + text2, html);
												}
											}
										};
									});
								} else if (answer.text == "Costruisci un Pupazzo ‚õÑÔ∏è") {
									var cost = (10+(snowman_cnt*10));
									bot.sendMessage(message.chat.id, "Costruire un Pupazzo di Neve ‚õÑÔ∏è ti coster√† " + cost + " Palle di Neve, in pi√π ti protegger√† dalle Palle di Neve avversarie, procedi?", kbYesNo).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text == "Si") {
												if (snowball < cost) {
													bot.sendMessage(message.chat.id, "Non hai abbastanza Palle di Neve!", kbBack);
													return;
												}
												connection.query('UPDATE event_snowball_status SET snowball = snowball-' + cost + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													connection.query('INSERT INTO event_snowball_list (player_id, life) VALUES (' + player_id + ', 10)', function (err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Consumando " + cost + " Palle di Neve hai costruito un <b>Pupazzo di Neve</b>!", kbBack);
													});
												});
											}
										};
									});
								} else if (answer.text == "Classifica üîù") {
									var text = "Classifica per Pupazzi di Neve in vita:\n";

									connection.query('SELECT P.nickname, COUNT(E.id) As points FROM event_snowball_list E, player P WHERE P.id = E.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) AND P.id NOT IN (1,3) GROUP BY E.player_id ORDER BY points DESC', function (err, rows, fields) {
										if (err) throw err;

										var range = 10;
										var nickname = [];
										var points = [];
										var mypos = 0;

										if (Object.keys(rows).length < 100) {
											bot.sendMessage(message.chat.id, "La classifica sar√† disponibile con pi√π giocatori iscritti!", kbBack);
											return;
										}

										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											nickname.push(rows[i].nickname);
											points.push(rows[i].points);
											if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase())
												mypos = i;
										}

										for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
											if (nickname[i] != undefined) {
												if (i == mypos)
													text += (i + 1) + "¬∞ <b>" + nickname[i] + "</b> (" + points[i] + ")\n";
												else
													text += (i + 1) + "¬∞ " + nickname[i] + " (" + points[i] + ")\n";
											}
										}

										bot.sendMessage(message.chat.id, text, kbBack);
									});
								}
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/eventi/i, function (message) {

	var text = "*Eventi Weekend Casuali:\n\n*" +
		//"> *Storia Interattiva* - 1 Settimana\n" +
		"> *Arena dei Draghi* - Weekend\n" +
		"> *Lootteria* - Weekend\n" +
		"> *Weekend della Follia* - Weekend\n" +
		"> *Evento della Luna* - Weekend\n" +
		"> *Il Ricercato* - Weekend\n" +
		"> *Crafting Festival* - Weekend\n" +
		"> *Itinerario Propizio* - Weekend\n" +
		"> *Villa di LastSoldier95* - 4 Giorni\n" +
		"> *Il Canto del Bardo* - Weekend\n" +
		"> *Gnomorra Lootiana* - Weekend\n" +
		"\n*Eventi Settimanali Ricorrenti:\n\n*" +
		"> *Miniere di Mana* - Gioved√¨/Venerd√¨ \n" +
		"> *Generatore di Polvere* - Luned√¨/Marted√¨\n" +
		"> *Casa dei Giochi* - Mercoled√¨\n" +
		"\nGli eventi vengono modificati di volta in volta per essere migliorati, e non avvengono per forza in questo ordine!\n" +
		"Per partecipare compariranno gli appositi pulsanti nel men√π.";

	bot.sendMessage(message.chat.id, text, back);
});

bot.onText(/festival/i, function (message) {

	if (eventFestival == 0) {
		bot.sendMessage(message.chat.id, "Evento non disponibile!", back);
		return;
	}

	var today = new Date();
	if ((today.getDay() != 6) && (today.getDay() != 0)) {
		bot.sendMessage(message.chat.id, "L'evento non √® pi√π disponibile!", back);
		return;
	}

	connection.query('SELECT id, holiday, account_id, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		connection.query('SELECT 1 FROM event_crafting_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var eventKb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Entra nel festival"], ["Torna al menu"]]
				}
			};

			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO event_crafting_status (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "*Benvenut" + gender_text + " nel Crafting Festival!*\nIn questo evento ogni 2 ore viene selezionato un oggetto da creare, e chi lo crea, allo scadere del tempo, o al raggiungimento di un valore massimo, ricever√† un premio in base alla quantit√† delle sue creazioni!\nInoltre pi√π volte l'oggetto viene creato, pi√π salir√† il suo valore. Preparati a consumare fino all'ultimo pezzettino di legno del tuo zaino, buon crafting!", eventKb);
					return;
				});
			} else {
				connection.query('SELECT event_crafting_item.completed, event_crafting_item.cnt, event_crafting_item.increm, event_crafting_item.start_price, event_crafting_item.incremDelta, event_crafting_item.total_price, event_crafting_item.time, event_crafting_item.wait_time, event_crafting_item.full_price, item.name, item.rarity, event_crafting_item.increm, rarity.id As rarity_id FROM event_crafting_item, item, rarity WHERE item.id = event_crafting_item.item_id AND rarity.shortname = item.rarity ORDER BY event_crafting_item.id DESC LIMIT 1', function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0)
						bot.sendMessage(message.chat.id, "Non √® disponibile ancora nessun oggetto da creare", rKb);
					else {
						if (rows[0].wait_time != null) {
							var rKb = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Aggiorna festival"], ["Cerca *" + rows[0].name], ["Torna al menu"]]
								}
							};

							var d = new Date(rows[0].wait_time);
							var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
							bot.sendMessage(message.chat.id, "In attesa per l'oggetto *" + rows[0].name + " (" + rows[0].rarity + ")*.\nSar√† disponibile alle " + short_date + " con un prezzo di partenza di *" + formatNumber(rows[0].start_price) + " ¬ß*.", rKb);
						} else {
							var plur = "e";
							if (rows[0].cnt == 1)
								plur = "a";

							var rKb = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Aggiorna festival"], ["Cerca *" + rows[0].name], ["Crea " + rows[0].name], ["Torna al menu"]]
								}
							};

							var incremDelta = rows[0].incremDelta;
							var cap = rows[0].start_price * 5 * (7 - rows[0].rarity_id);
							cap += cap * (rows[0].increm / 100);
							incremDelta = Math.round(incremDelta);
							cap = Math.round(cap);

							var extra = "";
							if (player_id == 1)
								extra = "\nCap: " + formatNumber(incremDelta) + "/" + formatNumber(cap);

							if (rows[0].completed == 1) {
								bot.sendMessage(message.chat.id, "L'oggetto da creare √® terminato! Attendi per ricevere la ricompensa.", rKb);
								return;
							}

							var d = new Date(rows[0].time);
							var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
							bot.sendMessage(message.chat.id, "L'oggetto da creare √®:\n\n*" + rows[0].name + " (" + rows[0].rarity + ")*, il gruzzolone ha raggiunto la quota di *" + formatNumber(rows[0].total_price) + " ¬ß*\n\nCreato *" + formatNumber(rows[0].cnt) + "* volt" + plur + ", verr√† aggiornato alle *" + short_date + "* o al raggiungimento di un valore massimo (bonus cap: *" + rows[0].increm + "%*)!\n\nCompletamento: " + calcBar(incremDelta, cap) + "\n\nCompleta l'oggetto per incrementare il bonus cap! In caso contrario verr√† resettato." + extra, rKb);
						}
					}
				});
			}
		});
	});
});

bot.onText(/^scava!|^scava$/i, function (message) {

	if (message.from.id != 20471035) {
		if (eventMana == 0) {
			bot.sendMessage(message.chat.id, "L'evento non √® disponibile oggi!", back);
			return;
		}
	}

	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		if (rows[0].cave_id != 0) {
			bot.sendMessage(message.chat.id, "Non puoi raccogliere mana mentre sei in cava", back);
			return;
		}
		if (rows[0].travel_id != 0) {
			bot.sendMessage(message.chat.id, "Non puoi raccogliere mana mentre sei in viaggio", back);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT zone_id, boost_time FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Accedi all'evento per utilizzare questa funzione!", back);
				return;
			}

			if (rows[0].zone_id == 0) {
				bot.sendMessage(message.chat.id, "Non stai estraendo mana!", back);
				return;
			}

			if (rows[0].boost_time == null) {
				bot.sendMessage(message.chat.id, "Non √® disponibile nessun bonus di estrazione!", back);
				return;
			}

			var now = new Date();
			var end = new Date(rows[0].boost_time);

			if (now.getTime() > end.getTime()) {
				connection.query('UPDATE event_mana_status SET boost_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
					bot.sendMessage(message.chat.id, "Il bonus non √® pi√π disponibile, sei arrivato tardi!", back);
				});
				return;
			}

			var zone_id = rows[0].zone_id;
			var qnt = Math.round(getRandomArbitrary(20, 50));

			bot.sendMessage(message.chat.id, "Raccogliere il bonus delle Miniere di Mana?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('UPDATE event_mana_status SET boost_time = NULL, mana_' + zone_id + ' = mana_' + zone_id + '+' + qnt + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							var color = "";
							if (zone_id == 1)
								color = "Blu";
							else if (zone_id == 2)
								color = "Giallo";
							else if (zone_id == 3)
								color = "Rosso";

							bot.sendMessage(message.chat.id, "Hai sfruttato il bonus della vena ricca ed ottenuto *" + qnt + "* Mana " + color + "!", back);
						});
					}
				}
			});
		});
	});
});

bot.onText(/^spolvera!/i, function (message) {

	if (message.from.id != 20471035) {
		if (eventDust == 0) {
			bot.sendMessage(message.chat.id, "L'evento non √® disponibile oggi!", back);
			return;
		}
	}

	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT extracting, boost_time, `generated` FROM event_dust_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Accedi all'evento per utilizzare questa funzione!", back);
				return;
			}

			if (rows[0].extracting == 0) {
				bot.sendMessage(message.chat.id, "Il generatore non √® in funzione!", back);
				return;
			}

			if (rows[0].boost_time == null) {
				bot.sendMessage(message.chat.id, "Non √® disponibile nessun bonus di estrazione!", back);
				return;
			}

			var now = new Date();
			var end = new Date(rows[0].boost_time);

			if (now.getTime() > end.getTime()) {
				connection.query('UPDATE event_dust_status SET boost_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
					bot.sendMessage(message.chat.id, "Il bonus non √® pi√π disponibile, sei arrivato tardi!", back);
				});
				return;
			}

			var qnt = Math.round(getRandomArbitrary(5, 11));

			bot.sendMessage(message.chat.id, "Raccogliere il bonus del Generatore di Polvere?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('UPDATE event_dust_status SET boost_time = NULL, `generated` = `generated`+' + qnt + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							bot.sendMessage(message.chat.id, "Hai sfruttato il bonus della spolverata ed ottenuto *" + qnt + "* Polvere!", back);
						})
					}
				}
			});
		});
	});
});

bot.onText(/Miniere di Mana|Raccolta/i, function (message) {

	if (message.from.id != 20471035) {
		if (eventMana == 0) {
			bot.sendMessage(message.chat.id, "L'evento non √® disponibile oggi!", back);
			return;
		}
	}

	var back2 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Sintesi"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id, global_end FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		if (rows[0].cave_id != 0) {
			bot.sendMessage(message.chat.id, "Non puoi raccogliere mana mentre sei in cava", back2);
			return;
		}
		if (rows[0].travel_id != 0) {
			bot.sendMessage(message.chat.id, "Non puoi raccogliere mana mentre sei in viaggio", back2);
			return;
		}

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;
		var global_end = rows[0].global_end;

		var mBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla Raccolta"], ["Torna al menu"]]
			}
		};

		var mYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna alla Raccolta"], ["Torna al menu"]]
			}
		};
		var mYesNo2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Sintesi"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT zone_id, time_start, mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var eventKb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Inizia Raccolta"], ["Torna al menu"]]
				}
			};

			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO event_mana_status (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Ti sei iscritto alla comunit√† di *Estrattori di Mana*!\nQuesto evento √® l'unica possibilit√† di recuperare mana allo scopo di sintetizzare incantesimi e creare oggetti particolarmente utili, inizia ad estrarre mana da una miniera e poi raccogli quando sei soddisfatto, si riempir√† col trascorrere del tempo.", eventKb);
					return;
				});
			} else {
				setAchievement(player_id, 70, 1);
				if (rows[0].zone_id != 0) {
					var time_start = new Date(rows[0].time_start);
					var time_creation = time_start.setHours(time_start.getHours());
					var now = new Date();
					var diff = Math.round(((now - time_creation) / 1000) / 60);	// minuti
					diff = Math.abs(diff);

					connection.query('SELECT rate, mana_name, type FROM event_mana_zone WHERE id = ' + rows[0].zone_id, function (err, rows, fields) {
						if (err) throw err;

						var rate = rows[0].rate;
						var name = rows[0].mana_name;
						var type = rows[0].type;
						var hours = diff / 60;
						var quantity = Math.floor(hours * rate);

						if ((class_id == 2) && (reborn > 1))
							quantity += quantity * 0.3;
						if ((class_id == 3) && (type == 2) && (reborn > 1))
							quantity += quantity * 0.5;
						if ((class_id == 3) && (type != 2) && (reborn > 1))
							quantity -= quantity * 0.2;
						if ((class_id == 4) && (type == 3) && (reborn > 1))
							quantity += quantity * 0.5;
						if ((class_id == 4) && (type != 3) && (reborn > 1))
							quantity -= quantity * 0.2;
						if ((class_id == 5) && (type == 1) && (reborn > 1))
							quantity += quantity * 1;
						if ((class_id == 5) && (type != 1) && (reborn > 1))
							quantity -= quantity * 0.1;
						if ((class_id == 6) && (reborn > 1))
							quantity -= quantity * 0.1;

						var extra_mana = "";
						/*
						if (global_end == 1) {
							quantity = quantity*2;
							extra_mana = " (aumentata grazie al bonus globale)";
						}
						*/

						quantity = Math.floor(quantity);

						connection.query('SELECT mana.name, chat_id, nickname, player_id, rate, type, ROUND(TIMESTAMPDIFF(MINUTE,time_start,NOW())/60*rate,0) As quantity FROM event_mana_status, event_mana_zone, player, mana WHERE mana.id = event_mana_zone.type AND player.id = player_id AND event_mana_status.time_start IS NOT NULL AND event_mana_status.zone_id = event_mana_zone.id AND player.id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							hours = Math.round(hours);
							var plur = "a";
							if (hours >= 1)
								plur = "e";
							if (hours == 0)
								hours = "meno di 1";

							bot.sendMessage(message.chat.id, "Stai estraendo Mana " + name + " da " + hours + " or" + plur + ", vuoi interrompere ottenendo " + quantity + " unit√† di mana grezzo?" + extra_mana, mYesNo2).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text.toLowerCase() == "si") {
										connection.query('SELECT zone_id FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											if (rows[0].zone_id == 0) {
												bot.sendMessage(message.chat.id, "Attualmente non stai estraendo", mBack);
												return;
											}

											var mana_type = 'mana_' + type;
											connection.query('UPDATE event_mana_status SET ' + mana_type + ' = ' + mana_type + ' + ' + quantity + ', zone_id = 0, time_start = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												if (quantity > 0)
													bot.sendMessage(message.chat.id, "Hai ricevuto " + quantity + " Mana " + name + "!", mBack);
												else
													bot.sendMessage(message.chat.id, "Non hai raccolto mana!", mBack);
											});
										});
									}
								};
							});
						});
					});

					return;
				}

				var text = "üåä Blu: " + formatNumber(rows[0].mana_1) + "\n" +
					"‚ö°Ô∏è Giallo: " + formatNumber(rows[0].mana_2) + "\n" +
					"üî• Rosso: " + formatNumber(rows[0].mana_3);

				connection.query('SELECT name, type, mana_name, rate FROM event_mana_zone', function (err, rows, fields) {
					if (err) throw err;

					var iKeys = [];
					var quantity = 0;
					var sym = "";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {

						quantity = rows[i].rate;

						if ((class_id == 2) && (reborn > 1))
							quantity += quantity * 0.3;
						if ((class_id == 3) && (rows[i].type == 2) && (reborn > 1))
							quantity += quantity * 0.5;
						if ((class_id == 3) && (rows[i].type != 2) && (reborn > 1))
							quantity -= quantity * 0.2;
						if ((class_id == 4) && (rows[i].type == 3) && (reborn > 1))
							quantity += quantity * 0.5;
						if ((class_id == 4) && (rows[i].type != 3) && (reborn > 1))
							quantity -= quantity * 0.2;
						if ((class_id == 5) && (rows[i].type == 1) && (reborn > 1))
							quantity += quantity * 1;
						if ((class_id == 5) && (rows[i].type != 1) && (reborn > 1))
							quantity -= quantity * 0.1;
						if ((class_id == 6) && (reborn > 1))
							quantity -= quantity * 0.1;

						quantity = Math.floor(quantity);
						if (rows[i].mana_name == "Blu")
							sym = "üåä "
						else if (rows[i].mana_name == "Giallo")
							sym = "‚ö°Ô∏è "
						else if (rows[i].mana_name == "Rosso")
							sym = "üî• "

						iKeys.push([rows[i].name + " (" + sym + rows[i].mana_name + " " + quantity + "/ora)"]);
					}

					iKeys.push(["Sintesi"]);
					iKeys.push(["Torna al menu"]);

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona la miniera dalla quale iniziare a estrarre mana.\n\nAl momento possiedi:\n" + text + "\nAvrai possibilit√† di estrarre ogni gioved√¨ e venerd√¨ della settimana", kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if ((answer.text == "Torna al menu") || (answer.text == "Sintesi"))
								return;

							var zone = answer.text.substring(0, answer.text.indexOf("(") - 1);

							connection.query('SELECT id FROM event_mana_zone WHERE name = "' + zone + '"', function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "Miniera non valida", mBack);
									return;
								}

								var zone_id = rows[0].id;

								bot.sendMessage(message.chat.id, "Iniziare l'estrazione nella " + zone + "?", mYesNo).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {

											var d = new Date();
											if (message.from.id != 20471035) {
												if ((d.getDay() != 4) && (d.getDay() != 5)) {
													bot.sendMessage(message.chat.id, "Non puoi estrarre oggi", back);
													return;
												}
											}

											var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

											connection.query('UPDATE event_mana_status SET time_start = "' + long_date + '", zone_id = ' + zone_id + ', boost_cnt = 0, boost_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Estrazione iniziata, torna qui tra qualche ora per concluderla ed ottenere ci√≤ che hai estratto!", mBack);
											});
										}
									};
								});
							});
						};
					});
				});
			}
		});
	});
});

bot.onText(/generatore di polvere|torna al generatore/i, function (message) {
	if (message.from.id != 20471035) {
		if (eventDust == 0) {
			bot.sendMessage(message.chat.id, "L'evento non √® disponibile oggi!", back);
			return;
		}
	}

	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			bot.sendMessage(message.chat.id, "Account non trovato", back);
			return;
		}

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		/*
		if (rows[0].cave_id != 0) {
			bot.sendMessage(message.chat.id, "Non puoi raccogliere polvere mentre sei in cava", back);
			return;
		}
		if (rows[0].travel_id != 0) {
			bot.sendMessage(message.chat.id, "Non puoi raccogliere polvere mentre sei in viaggio", back);
			return;
		}
		*/

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		var gBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna al Generatore di Polvere"], ["Torna al menu"]]
			}
		};

		var gYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna al Generatore di Polvere"]]
			}
		};

		var eventKb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Vai al Generatore di Polvere"], ["Torna al menu"]]
			}
		};

		var eventKb2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Aziona Generatore"], ["Aumenta Deposito", "Utilizza Polvere"], ["Genera Scaglia Evolutiva"], ["Torna al menu"]]
			}
		};

		var eventKb3 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Ritira", "Spegni"], ["Torna al menu"]]
			}
		};

		connection.query('UPDATE event_dust_status SET `generated` = max_qnt WHERE `generated` > max_qnt AND player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			connection.query('SELECT max_qnt, qnt, extracting, generated, last_update FROM event_dust_status WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					connection.query('INSERT INTO event_dust_status (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Hai ricevuto il tuo *Generatore di Polvere*!\nPotrai utilizzare la polvere prodotta per generare un oggetto a tua scelta, il cui costo aumenter√† in base al valore dello stesso, √® disponibile ogni luned√¨ e marted√¨!", eventKb);
						return;
					});
				} else {
					setAchievement(player_id, 70, 1);
					var max_qnt = parseInt(rows[0].max_qnt);
					var qnt = parseInt(rows[0].qnt);

					if (rows[0].extracting == 1) {
						var generated = rows[0].generated;
						var updateTime = rows[0].last_update;
						bot.sendMessage(message.chat.id, "Hai generato fin ora " + generated + "/" + max_qnt + " unit√† di polvere, vuoi spegnere il generatore o ritirarla?\n\nUltima attivit√†: " + toDate("it", updateTime), eventKb3).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text == "Torna al menu")
									return;
								if (answer.text == "Ritira") {
									connection.query('SELECT `generated` FROM event_dust_status WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (rows[0].generated == 0) {
											bot.sendMessage(message.chat.id, "Non c'√® ancora abbastanza Polvere per poterla ritirare!", gBack);
											return;
										}

										var dustCnt = getItemCnt(player_id, 646);
										addItem(player_id, 646, rows[0].generated);
										var d = new Date();
										var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
										connection.query('UPDATE event_dust_status SET `generated` = 0, notified = 0, last_update = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
										bot.sendMessage(message.chat.id, "Hai ottenuto " + rows[0].generated + "x Polvere!\nOra ne possiedi " + formatNumber(dustCnt+rows[0].generated) + " unit√† nello zaino", gBack);
									});
								} else if (answer.text == "Spegni") {
									connection.query('UPDATE event_dust_status SET extracting = 0, last_update = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai spento il generatore", gBack);
									});
								}
							};
						});
					} else {
						connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 14', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length > 0)
								qnt += parseInt(rows[0].ability_level);

							var unit = getItemCnt(player_id, 646);

							bot.sendMessage(message.chat.id, "*Gestione Generatore*\n\nProdurrai " + qnt + "x Polvere/ora e il deposito ti consente massimo *" + max_qnt + " unit√†*\nPossiedi *" + formatNumber(unit) + " unit√†* nello zaino", eventKb2).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al menu")
										return;
									if (answer.text == "Aziona Generatore") {
										var d = new Date();
										var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
										connection.query('UPDATE event_dust_status SET extracting = 1, last_update = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Generatore *azionato*! Torna tra un po' di tempo per ritirare la polvere prodotta!", gBack);
										});
									} else if (answer.text == "Aumenta Deposito") {
										if (max_qnt >= 77) {
											bot.sendMessage(message.chat.id, "Il deposito del generatore √® gi√† potenziato al massimo!", gBack);
											return;
										}

										var price = max_qnt*50000;

										bot.sendMessage(message.chat.id, "Aggiungere *2 unit√†* al tuo deposito ti coster√† *" + formatNumber(price) + "* ¬ß, procedi?", gYesNo).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.toLowerCase() == "si") {
													connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														if (rows[0].money < price) {
															bot.sendMessage(message.chat.id, "Non hai abbastanza monete, ne possiedi " + formatNumber(rows[0].money) + " su " + formatNumber(price), gBack);
															return;
														}
														connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE event_dust_status SET max_qnt = max_qnt + 2 WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai potenziato il deposito e hai raggiunto *" + (max_qnt + 2) + " unit√†* di spazio disponibile!", gBack);
															});
														});
													});
												}
											}
										});
									}
								};
							});
						});
					}
				}
			});
		});
	});
});

bot.onText(/^\/sintesi (.+),(.+),(.+)|^\/sintesi/i, function (message, match) {
	connection.query('SELECT id, holiday, account_id, global_end FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var global_end = rows[0].global_end;

		if ((match[1] == undefined) || (match[2] == undefined) || (match[3] == undefined)) {
			bot.sendMessage(message.chat.id, "Utilizza la sintassi '/sintesi 100,200,300' (blu, giallo, rosso) per sintetizzare un incantesimo", back);
			return;
		}

		connection.query('DELETE FROM magic WHERE quantity <= 0 AND player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 13', function (err, rows, fields) {
				if (err) throw err;

				var abBonus = 0;
				if (Object.keys(rows).length > 0)
					abBonus = rows[0].ability_level * rows[0].val;
				var maxUnit = 200;
				maxUnit += abBonus;

				connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Non possiedi alcuna riserva di mana", back)
						return;
					}

					var mana_1 = rows[0].mana_1;
					var mana_2 = rows[0].mana_2;
					var mana_3 = rows[0].mana_3;

					connection.query('SELECT COUNT(*) As cnt FROM magic WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var max_magic = 5;
						/*
						if (global_end == 1)
							max_magic = 10;
						*/

						if (rows[0].cnt >= max_magic) {
							bot.sendMessage(message.chat.id, "Non puoi sintetizzare altri incantesimi prima di averli consumati", back);
							return;
						}

						var m1 = parseInt(match[1]); //BLU
						if ((isNaN(m1)) || (m1 < 0) || (re.test(m1) == false)) {
							bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
							return;
						}

						if (m1 > mana_1) {
							bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", back);
							return;
						}

						var m2 = parseInt(match[2]); //GIALLO
						if (isNaN(m2) || (m2 < 0) || (re.test(m2) == false)) {
							bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
							return;
						}

						if (m2 > mana_2) {
							bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", back);
							return;
						}

						var m3 = parseInt(match[3]); //ROSSO
						if (isNaN(m3) || (m3 < 0) || (re.test(m3) == false)) {
							bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
							return;
						}

						if (m3 > mana_3) {
							bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", back);
							return;
						}

						bot.sendMessage(message.chat.id, "Iniziare la sintesi utilizzando le unit√† selezionate?", yesno).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase() == "si") {
									connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (m1 > rows[0].mana_1) {
											bot.sendMessage(message.chat.id, "Non hai abbastanza üåä Mana Blu", back);
											return;
										}
										if (m2 > rows[0].mana_2) {
											bot.sendMessage(message.chat.id, "Non hai abbastanza ‚ö°Ô∏è Mana Giallo", back);
											return;
										}
										if (m3 > rows[0].mana_3) {
											bot.sendMessage(message.chat.id, "Non hai abbastanza üî• Mana Rosso", back);
											return;
										}

										m1 = parseInt(m1);
										m2 = parseInt(m2);
										m3 = parseInt(m3);
										var power = m1 + m2 + m3;

										if (power > maxUnit) {
											bot.sendMessage(message.chat.id, "Il valore complessivo di Mana non pu√≤ superare i " + maxUnit + " punti, ora √® pari a " + power);
											return;
										}
										if (power < 50) {
											bot.sendMessage(message.chat.id, "Minimo 50 di potenza, ora " + power, back);
											return;
										}

										var extra = "";
										/*
										if (global_end == 1) {
											extra += " (potenza aumentata per bonus globale)";
											power += power*0.1;
											power = Math.round(power);
										}
										*/

										var type = 0;
										var quantity = 3;
										var magic_name = "";
										var magic_sym = "";

										if ((m1 == m2) && (m2 == m3) && (m1 == m3)) {
											type = 4;
											magic_name = magicToName(4);
											magic_sym = "‚ú®";
										} else if ((m1 >= m2) && (m1 >= m3)) {
											type = 1;
											magic_name = magicToName(1);
											magic_sym = "üåä";
										} else if ((m2 >= m1) && (m2 >= m3)) {
											type = 2;
											magic_name = magicToName(2);
											magic_sym = "‚ö°Ô∏è";
										} else if ((m3 >= m1) && (m3 >= m2)) {
											type = 3;
											magic_name = magicToName(3);
											magic_sym = "üî•";
										} else {
											bot.sendMessage(message.chat.id, "Configurazione non valida, riprova", back);
											return;
										}

										connection.query('UPDATE event_mana_status SET mana_1 = mana_1 - ' + m1 + ', mana_2 = mana_2 - ' + m2 + ', mana_3 = mana_3 - ' + m3 + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											connection.query('INSERT INTO magic (player_id, type, power, quantity) VALUES (' + player_id + ',' + type + ',' + power + ',' + quantity + ')', function (err, rows, fields) {
												if (err) throw err;

												var kb = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["/sintesi " + m1 + "," + m2 + "," + m3], ["Torna all'alchimia"], ["Torna all'Assalto"], ["Torna al dungeon"], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Hai sintetizzato " + magic_sym + " *" + magic_name + " " + power + "* " + "!" + extra, kb);
												setAchievement(player_id, 28, 1);
											});
										});
									});
								};
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/^sintesi|Torna alla Sintesi/i, function (message) {
	connection.query('SELECT id, holiday, account_id, global_end FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var global_end = rows[0].global_end;

		connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non possiedi alcuna riserva di mana", back)
				return;
			}

			var mana_1 = rows[0].mana_1;
			var mana_2 = rows[0].mana_2;
			var mana_3 = rows[0].mana_3;

			var text = "Blu: " + formatNumber(mana_1) + "\n" +
				"Giallo: " + formatNumber(mana_2) + "\n" +
				"Rosso: " + formatNumber(mana_3);

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Inizia Sintesi"], ["Sintetizza Materiali Finali"], ["Torna al menu"]]
				}
			};

			var kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna alla Sintesi"], ["Torna al menu"]]
				}
			};

			var kbYesNo = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Si"], ["Torna alla Sintesi"]]
				}
			};

			var kb2 = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["0", "20", "50"], ["100", "200", "300"], ["Annulla", "Torna all'Alchimia"]]
				}
			};

			connection.query('DELETE FROM magic WHERE quantity <= 0 AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				connection.query('SELECT type, power, quantity FROM magic WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length > 0) {
						text = text + "\n\n*Incantesimi posseduti:*\n\n";
						for (var i = 0, len = Object.keys(rows).length; i < len; i++)
							text += "> " + magicToName(rows[i].type) + " " + rows[i].power + " (" + rows[i].quantity + ")\n";
						text += "\n";
					} else
						text += "\n\nNessun incantesimo posseduto\n";

					connection.query('SELECT name, quantity FROM inventory, item WHERE item.id IN (623, 624, 625, 635, 636, 637) AND item.id = inventory.item_id AND quantity > 0 AND player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length > 0) {
							text += "\n*Materiali finali posseduti:*\n\n";
							for (var i = 0, len = Object.keys(rows).length; i < len; i++)
								text += "> " + rows[i].name + " (" + rows[i].quantity + ")\n";
							text += "\n";
						} else
							text += "\nNessun materiale finale posseduto\n";

						connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 13', function (err, rows, fields) {
							if (err) throw err;

							var abBonus = 0;
							if (Object.keys(rows).length > 0)
								abBonus = rows[0].ability_level * rows[0].val;
							var maxUnit = 200;
							maxUnit += abBonus;

							bot.sendMessage(message.chat.id, "*Le tue riserve di mana:*\n\n" + text, kb).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al menu")
										return;

									if (answer.text == "Sintetizza Materiali Finali") {
										connection.query('SELECT name FROM item WHERE id IN (623, 624, 625, 635, 636, 637)', function (err, rows, fields) {
											if (err) throw err;

											var iKeys = [];

											for (var i = 0, len = Object.keys(rows).length; i < len; i++)
												iKeys.push([rows[i].name]);

											iKeys.push(["Torna alla Sintesi"]);
											var kb_f = {
												parse_mode: "Markdown",
												reply_markup: {
													resize_keyboard: true,
													keyboard: iKeys
												}
											};
											bot.sendMessage(message.chat.id, "Questa sezione √® riservata alla sintesi dei componenti finali per le armi, seleziona il componente da sintetizzare", kb_f).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text == "Torna alla Sintesi")
														return;
													connection.query('SELECT name, id, value FROM item WHERE id IN (623, 624, 625, 635, 636, 637) AND name = "' + answer.text + '"', function (err, rows, fields) {
														if (err) throw err;
														if (Object.keys(rows).length > 0) {
															var qnt = 0;
															var type = 0;
															var itemId = rows[0].id;
															var itemName = rows[0].name;
															var name = "";
															if (rows[0].value == 25000)
																qnt = 2500;
															else if (rows[0].value == 100000)
																qnt = 5000;
															if ((rows[0].id == 623) || (rows[0].id == 635)) {
																type = 2;
																name = "Giallo";
															} else if ((rows[0].id == 624) || (rows[0].id == 636)) {
																type = 3;
																name = "Rosso";
															} else if ((rows[0].id == 625) || (rows[0].id == 637)) {
																type = 1;
																name = "Blu";
															} else {
																bot.sendMessage(message.chat.id, "Errore", kbBack);
																return;
															}
															bot.sendMessage(message.chat.id, "Sintetizzare questo oggetto richieder√† " + qnt + " Mana " + name + ", continuare?", kbYesNo).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text.toLowerCase() == "si") {
																		if (type == 1) {
																			if (mana_1 < qnt) {
																				bot.sendMessage(message.chat.id, "Non hai abbastanza üåä Mana Blu", kbBack);
																				return;
																			}
																		} else if (type == 2) {
																			if (mana_2 < qnt) {
																				bot.sendMessage(message.chat.id, "Non hai abbastanza ‚ö°Ô∏è Mana Giallo", kbBack);
																				return;
																			}
																		} else if (type == 3) {
																			if (mana_3 < qnt) {
																				bot.sendMessage(message.chat.id, "Non hai abbastanza üî• Mana Rosso", kbBack);
																				return;
																			}
																		}

																		connection.query('UPDATE event_mana_status SET mana_' + type + ' = mana_' + type + ' - ' + qnt + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																			addItem(player_id, itemId);
																			setAchievement(player_id, 60, 1);
																			bot.sendMessage(message.chat.id, "Hai sintetizzato " + itemName + "!", kbBack);
																		});
																	}
																}
															});
														} else {
															bot.sendMessage(message.chat.id, "Oggetto non valido", kbBack);
														}
													});
												}
											});
										});
										return;
									} else if (answer.text == "Inizia Sintesi") {
										bot.sendMessage(message.chat.id, "Puoi sintetizzare un incantesimo utilizzando qualsiasi quantit√† di mana per tipo, per un massimo di " + maxUnit + " unit√† complessive, pi√π √® alto il valore, pi√π sar√† efficace l'incantesimo\nOgni incantesimo ha una durata pari a 3 utilizzi, indipendentemente dalla sua potenza, puoi possedere solamente 5 incantesimi contemporaneamente\nQuanto üåä Mana Blu vuoi utilizzare? Ne possiedi *" + mana_1 + "* unit√†, puoi anche scrivere il numero manualmente", kb2).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if ((answer.text == "Annulla") || (answer.text == "Torna all'Alchimia"))
													return;

												connection.query('SELECT COUNT(*) As cnt FROM magic WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													var max_magic = 5;
													/*
													if (global_end == 1)
														max_magic = 10;	
													*/

													if (rows[0].cnt >= max_magic) {
														bot.sendMessage(message.chat.id, "Non puoi sintetizzare altri incantesimi prima di averli consumati", kbBack);
														return;
													}

													var m1 = parseInt(answer.text);
													if ((isNaN(m1)) || (m1 < 0) || (re.test(m1) == false)) {
														bot.sendMessage(message.chat.id, "Quantit√† non valida", kbBack);
														return;
													}

													if (m1 > mana_1) {
														bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", kbBack);
														return;
													}

													bot.sendMessage(message.chat.id, "Quanto ‚ö°Ô∏è Mana Giallo vuoi utilizzare? Ne possiedi *" + mana_2 + "* unit√†, puoi anche scrivere il numero manualmente", kb2).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text == "Annulla") {
																return;
															}
															var m2 = parseInt(answer.text);
															if (isNaN(m2) || (m2 < 0) || (re.test(m2) == false)) {
																bot.sendMessage(message.chat.id, "Quantit√† non valida", kbBack);
																return;
															}

															if (m2 > mana_2) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", kbBack);
																return;
															}

															bot.sendMessage(message.chat.id, "Quanto üî• Mana Rosso vuoi utilizzare? Ne possiedi *" + mana_3 + "* unit√†, puoi anche scrivere il numero manualmente", kb2).then(function () {
																answerCallbacks[message.chat.id] = function (answer) {
																	if (answer.text == "Annulla") {
																		return;
																	}
																	var m3 = parseInt(answer.text);
																	if (isNaN(m3) || (m3 < 0) || (re.test(m3) == false)) {
																		bot.sendMessage(message.chat.id, "Quantit√† non valida", kbBack);
																		return;
																	}

																	if (m3 > mana_3) {
																		bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", kbBack);
																		return;
																	}

																	bot.sendMessage(message.chat.id, "Iniziare la sintesi utilizzando le unit√† selezionate?", yesno).then(function () {
																		answerCallbacks[message.chat.id] = function (answer) {

																			if (answer.text.toLowerCase() == "si") {
																				connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;

																					if (m1 > rows[0].mana_1) {
																						bot.sendMessage(message.chat.id, "Non hai abbastanza üåä Mana Blu", kbBack);
																						return;
																					}
																					if (m2 > rows[0].mana_2) {
																						bot.sendMessage(message.chat.id, "Non hai abbastanza ‚ö°Ô∏è Mana Giallo", kbBack);
																						return;
																					}
																					if (m3 > rows[0].mana_3) {
																						bot.sendMessage(message.chat.id, "Non hai abbastanza üî• Mana Rosso", kbBack);
																						return;
																					}

																					m1 = parseInt(m1);
																					m2 = parseInt(m2);
																					m3 = parseInt(m3);
																					var power = m1 + m2 + m3;

																					if (power > maxUnit) {
																						bot.sendMessage(message.chat.id, "Il valore complessivo di Mana non pu√≤ superare i " + maxUnit + " punti, ora √® pari a " + power, kbBack);
																						return;
																					}
																					if (power < 50) {
																						bot.sendMessage(message.chat.id, "Minimo 50 di potenza, ora " + power, kbBack);
																						return;
																					}

																					var extra = "";
																					/*
																					if (global_end == 1) {
																						extra += " (potenza aumentata per bonus globale)";
																						power += power*0.1;
																						power = Math.round(power);
																					}
																					*/

																					var type = 0;
																					var quantity = 3;
																					var magic_name = "";				
																					var magic_sym = "";

																					if ((m1 == m2) && (m2 == m3) && (m1 == m3)) {
																						type = 4;
																						magic_name = magicToName(4);
																						magic_sym = "‚ú®";
																					} else if ((m1 >= m2) && (m1 >= m3)) {
																						type = 1;
																						magic_name = magicToName(1);
																						magic_sym = "üåä";
																					} else if ((m2 >= m1) && (m2 >= m3)) {
																						type = 2;
																						magic_name = magicToName(2);
																						magic_sym = "‚ö°Ô∏è";
																					} else if ((m3 >= m1) && (m3 >= m2)) {
																						type = 3;
																						magic_name = magicToName(3);
																						magic_sym = "üî•";
																					} else {
																						bot.sendMessage(message.chat.id, "Configurazione non valida, riprova", mBack);
																						return;
																					}

																					connection.query('UPDATE event_mana_status SET mana_1 = mana_1 - ' + m1 + ', mana_2 = mana_2 - ' + m2 + ', mana_3 = mana_3 - ' + m3 + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;

																						connection.query('INSERT INTO magic (player_id, type, power, quantity) VALUES (' + player_id + ',' + type + ',' + power + ',' + quantity + ')', function (err, rows, fields) {
																							if (err) throw err;
																							bot.sendMessage(message.chat.id, "Hai sintetizzato " + magic_sym + " *" + magic_name + " " + power + "*!" + extra, kbBack);
																							setAchievement(player_id, 28, 1);
																						});
																					});
																				});
																			};
																		};
																	});
																};
															});
														};
													});
												});
											};
										});
									};
								};
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/Il Canto del Bardo|Iscrizione dal Bardo|Torna dal Bardo/i, function (message) {

	if (eventTeamStory == 0)
		return;

	connection.query('SELECT id, holiday, account_id, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		connection.query('SELECT team_id FROM team_player WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Per partecipare a questo evento devi essere in un team", back);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1) {
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT point_1, point_2, story_1, story_2 FROM event_team_story WHERE team_id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					var eventKb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Iscrizione dal Bardo"], ["Torna al menu"]]
						}
					};

					if (isAdmin == 0) {
						var kb = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Torna al menu"]]
							}
						};
					} else {
						var kb2 = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Invia Scrittura"], ["Torna al menu"]]
							}
						};
					}

					var kb2 = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Invia Scrittura"], ["Torna al menu"]]
						}
					};

					var rBack = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Torna dal Bardo"], ["Torna al menu"]]
						}
					};

					var rSend = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Torna dal Bardo"]]
						}
					};

					if (Object.keys(rows).length == 0) {
						connection.query('INSERT INTO event_team_story (team_id) VALUES (' + team_id + ')', function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella gara che tutti i team attendono, il *Canto del Bardo*!\nIn questa battaglia di scrittura tu ed il tuo team dovrete utilizzare le vostre migliori doti letterarie per stupire il Bardo, e non sar√† un'impresa semplice. In base alla vostra abilit√† riceverete dei ü¶ã, anche solo partecipando! Le istruzioni saranno disponibili accedendo all'evento.", eventKb);
						});
					} else {

						var win = "";
						if (rows[0].point_1 > 0)
							win = "\n\nPremio primo giorno: " + rows[0].point_1 + " ü¶ã";
						else {
							if (rows[0].story_1 != null)
								win = "\n\nTesto del primo giorno inviato con successo";
							else
								win = "\n\nTesto del primo giorno in attesa...";
						}
						if (rows[0].point_2 > 0)
							win += "\nPremio secondo giorno: " + rows[0].point_2 + " ü¶ã";
						else {
							if (rows[0].story_2 != null)
								win += "\nTesto del secondo giorno inviato con successo";
							else
								win += "\nTesto del secondo giorno in attesa...";
						}

						var text = "";
						var n = new Date().getDay();
						if (n == 6) {
							text = "<b>Bentornat" + gender_text + "!</b>\nIl Bardo ti suggerisce le istruzioni per la scrittura di oggi, puoi scegliere una delle tre tracce:\n" +
								"> <b>Traccia 1</b>: Ti trovi insieme al tuo team in un'isola apparentemente deserta, tuttavia non siete uomini, ma granchi adulti, cosa fate per trascorrere il tempo tutto il giorno?\n" +
								"> <b>Traccia 2</b>: Sei il re di un regno che porta il tuo nome, vuoi conquistare i regni adiacenti, a sud si trovano i Branchini Grigi, a nord le Sardine Ine ed a est i Goralla Rampicanti, come pianificate di sconfiggere queste truppe in battaglia?\n" +
								"> <b>Traccia 3</b>: Il tuo smartphone diventa improvvisamente in grado di creare cloni solo scattando una foto alla persona da clonare, come useresti questa unica peculiarit√†, considerando che sei l'unico a possederla?\n" +
								"- Massimo 4.000 caratteri -\n\n" +
								"Ricorda di inviare la storia prima di mezzanotte, domani cambieranno i temi!";
						} else if (n == 0) {
							text = "<b>Bentornat" + gender_text  + "!</b>\nIl Bardo ti suggerisce le istruzioni per la scrittura di oggi, puoi scegliere una delle tre tracce:\n" +
								"> <b>Traccia 1</b>: Sei inviato in una missione di esplorazione verso le terre di Barmbla, famose per i loro violentissimi e velocissimi struzzi con 3 gambe, la direttiva del tuo superiore ti impone di catturarne uno vivo, come organizzi la tua squadra per portare a termine l'incarico?\n" +
								"> <b>Traccia 2</b>: Una strega vuole leggerti le carte, compaiono queste tre situazioni: un giullare con una spada in bocca, un elefante di marmo ed una bistecca grossa come un paese. Come interpreti queste informazioni? E come agisci di conseguenza?\n" +
								"> <b>Traccia 3</b>: Incontri un elfo delle colline, inizia il discorso raccontandoti la sua ultima avventura alle prese con i Goralla delle terre dell'est, per√≤ la storia inizia dalla fine: l'elfo racconta di essere finito in una ciotola di miele con 3 Goralla che lo osservano famelici, come si √® arrivati fino a quel punto?\n" +
								"- Massimo 4.000 caratteri -\n\n" +
								"Ricorda di inviare la storia di prima di mezzanotte! Le valutazioni arriveranno il prima possibile";
						} else {
							bot.sendMessage(message.chat.id, "Oggi non √® disponibile il Bardo, torna quando l'evento √® attivo", back);
							return;
						}

						bot.sendMessage(message.chat.id, text + win, kb2).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text == "Invia Scrittura") {

									if (isAdmin == 0) {
										bot.sendMessage(message.chat.id, "Solo l'amministratore o il vice possono inviare la scrittura, contattali tramite il gruppo del team per continuare!", back);
										return;
									}

									bot.sendMessage(message.chat.id, "Incolla qua il testo completo e attendi la fine della giornata! Ricordati di non utilizzare bestemmie, insulti, argomenti spiacevoli, ecc. (le solite cose), pena il ban di tutto il team dal bot. Forza!", rSend).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text == "Torna dal Bardo") {
												return;
											}

											var text = answer.text;
											/*
											var reg = new RegExp("^[a-zA-Z0-9 \-\;\,\.√†√π√®√¨√©√≤√≥_\¬ß\!\\\n?]{1,4000}$");

											if (!reg.test(text)) {
												bot.sendMessage(message.chat.id, "Il testo contiene caratteri non ammessi, riprova", rBack);
												return;
											}
											*/

											var n = new Date().getDay();
											if (n == 6) { //Sabato

												if (rows[0].point_1 > 0) {
													bot.sendMessage(message.chat.id, "Il primo giorno dell'evento √® terminato", rBack);
													return;
												}

												connection.query('UPDATE event_team_story SET story_1 = "' + connection.escape(text) + '" WHERE team_id = ' + team_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "La scrittura √® stata inviata, attendi la fine della giornata per ricevere una valutazione", rSend);
												});
											} else if (n == 0) { //Domenica

												if (rows[0].point_2 > 0) {
													bot.sendMessage(message.chat.id, "Il secondo giorno dell'evento √® terminato", rBack);
													return;
												}

												connection.query('UPDATE event_team_story SET story_2 = "' + connection.escape(text) + '" WHERE team_id = ' + team_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "La scrittura √® stata inviata, attendi la fine della giornata per ricevere una valutazione", rSend);
												});
											}
										};
									});
								}
							};
						});
					}
				});
			});
		});
	});
});

bot.onText(/dai_punti/i, function (message) {
	if (message.from.id != 20471035)
		return;

	bot.sendMessage(message.chat.id, "Sei sicuro?", yesno).then(function () {
		answerCallbacks[message.chat.id] = function (answer) {
			if (answer.text.toLowerCase() == "si") {
				connection.query('SELECT team_id, point_1, point_2 FROM event_team_story WHERE point_1 > 0 OR point_2 > 0', function (err, rows, fields) {
					if (err) throw err;
					var point = 0;
					var n = new Date().getDay();
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						point = 0;
						point = parseInt(rows[i].point_1 + rows[i].point_2);
						console.log(rows[i].team_id + " -> " + point);
						connection.query('UPDATE team SET point = point+' + point + ' WHERE id = ' + rows[i].team_id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
					bot.sendMessage(message.chat.id, "Consegnati punti anima a " + Object.keys(rows).length + " team", back);
				});
			};
		};
	});
});

bot.onText(/ricercato/i, function (message) {

	if ((wanted == 0) && (message.from.id != 20471035))
		return;

	connection.query('SELECT id, holiday, account_id, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		connection.query('SELECT 1 FROM event_wanted_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var eventKb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Vai al Ricercato"], ["Torna al menu"]]
				}
			};

			var kb = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna al menu"]]
				}
			};

			var rBack = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna al Ricercato"], ["Torna al menu"]]
				}
			};

			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO event_wanted_status (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nell'*Evento Ricercato*!\nA breve ti verr√† assegnato un fuorilegge che dovrai stanare irrompendo nel suo rifugio, potrai ottenere grosse taglie in caso di successo, forza!\nAlla fine visualizzerai una classifica quindi cerca di vincerne il pi√π possibile!\nLe ispezioni al ricercato sono molto veloci, in pi√π solo in questo weekend i tempi generali di ispezione sono ridotti!", eventKb);
				});
			} else {
				connection.query('SELECT E.wanted_id, E.heist_win, E.heist_lost, E.heist_win_2, E.heist_lost_2, player.nickname, player.id, player.ability, player.house_id FROM event_wanted_status E, player WHERE E.wanted_id = player.id AND E.player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						connection.query('SELECT nickname, from_id, COUNT(from_id) FROM heist_history, player, event_wanted_status WHERE account_id NOT IN (SELECT account_id FROM banlist) AND fail = 0 AND event_wanted_status.player_id = player.id AND player.id = heist_history.from_id AND player.id != ' + player_id + ' AND time BETWEEN DATE_SUB(now(),INTERVAL 2 MONTH) AND NOW() GROUP BY from_id ORDER BY COUNT(from_id) DESC LIMIT 200', function (err, rows, fields) {
							if (err) throw err;

							var len = Object.keys(rows).length;
							var rand = Math.round(Math.random() * len - 1);

							if (len < 5) {
								bot.sendMessage(message.chat.id, "Non ci sono abbastanza cacciatori di taglie, torna tra qualche minuto!!", back);
								return;
							}

							var sel = rows[rand].from_id;
							connection.query('UPDATE event_wanted_status SET wanted_id = ' + sel + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Il ricercato non √® ancora stato reso pubblico, torna tra qualche secondo!", back);
							});
						});
						return;
					}

					var win = rows[0].heist_win;
					var lost = rows[0].heist_lost;
					var win2 = rows[0].heist_win_2;
					var lost2 = rows[0].heist_lost_2;

					var nick = rows[0].nickname;
					var ab = rows[0].ability;
					var house = rows[0].house_id;

					connection.query('SELECT heist_win_2 FROM event_wanted_status WHERE player_id = ' + rows[0].wanted_id, function (err, rows, fields) {
						if (err) throw err;

						var value1 = ((parseInt(win2) * 100) + 10000);
						var value2 = ((parseInt(rows[0].heist_win_2) * 100) + 10000)
						if (value1 > 150000)
							value1 = 150000;
						if (value2 > 150000)
							value2 = 150000;

						var text = "<b>Il tuo status da ricercato</b>:\nVittorie/Sconfitte: " + win + " / " + lost + "\nSubite/Respinte: " + lost2 + " / " + win2 + "\nLa tua taglia: " +
							value1 + " ¬ß\n\n" +
							"üë∫ Il ricercato √® <b>" + nick + "</b> con abilit√† " + ab + " ed un rifugio al livello " + house + "!\n" +
							"Ispeziona il suo rifugio per catturarlo e ottenere la taglia!\nTaglia attuale: " + value2 + " ¬ß";
						var kb2 = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Ispeziona: " + nick], ["I pi√π pericolosi"], ["Torna al menu"]]
							}
						};
						bot.sendMessage(message.chat.id, text, kb2).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase().indexOf("pericolosi") != -1) {
									connection.query('SELECT nickname, event_wanted_status.heist_win FROM event_wanted_status, player WHERE event_wanted_status.player_id = player.id ORDER BY event_wanted_status.heist_win DESC LIMIT 5', function (err, rows, fields) {
										if (err) throw err;
										var text = "Utenti che hanno catturato pi√π ricercati:\n";
										for (var i = 0, len = Object.keys(rows).length; i < len; i++)
											text += "> " + rows[i].nickname + " (" + rows[i].heist_win + ")	\n";
										connection.query('SELECT nickname, event_wanted_status.heist_lost FROM event_wanted_status, player WHERE event_wanted_status.player_id = player.id ORDER BY event_wanted_status.heist_lost DESC LIMIT 5', function (err, rows, fields) {
											if (err) throw err;
											text += "\nUtenti che hanno fallito pi√π volte:\n";
											for (var i = 0, len = Object.keys(rows).length; i < len; i++)
												text += "> " + rows[i].nickname + " (" + rows[i].heist_lost + ") \n";
											connection.query('SELECT nickname, event_wanted_status.heist_win_2 FROM event_wanted_status, player WHERE event_wanted_status.player_id = player.id ORDER BY event_wanted_status.heist_win_2 DESC LIMIT 5', function (err, rows, fields) {
												if (err) throw err;
												text += "\nUtenti che hanno subito e vinto pi√π tentativi:\n";
												for (var i = 0, len = Object.keys(rows).length; i < len; i++)
													text += "> " + rows[i].nickname + " (" + rows[i].heist_win_2 + ") \n";
												connection.query('SELECT nickname, event_wanted_status.heist_lost_2 FROM event_wanted_status, player WHERE event_wanted_status.player_id = player.id ORDER BY event_wanted_status.heist_lost_2 DESC LIMIT 5', function (err, rows, fields) {
													if (err) throw err;
													text += "\nUtenti che hanno subito e perso pi√π tentativi:\n";
													for (var i = 0, len = Object.keys(rows).length; i < len; i++)
														text += "> " + rows[i].nickname + " (" + rows[i].heist_lost_2 + ") \n";
													bot.sendMessage(message.chat.id, text, rBack);
												});
											});
										});
									});
								}
							};
						});
					});
				});
			}
		});
	});
});

bot.onText(/Il Tesoro di Arthur|Evento/i, function (message) {

	return;

	if (eventStory == 0) {
		bot.sendMessage(message.chat.id, "L'evento sar√† disponibile a breve!", back);
		return;
	}

	connection.query('SELECT id, holiday, account_id, mission_id, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		connection.query('SELECT * FROM mission_event_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var eventKb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Vai all'Evento"], ["Torna al menu"]]
				}
			};

			if (Object.keys(rows).length == 0) {
				// Prima volta

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Iscriviti al Registro"], ["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella Storia Interattiva!\nQuesto evento √® composto da missioni che sono collegate fra di loro con scelte che dovrai intraprendere, a seconda del percorso comporrai una storia diversa e arriverai ad un finale diverso, con un premio diverso.\n\nTuttavia √® possibile completare il percorso solamente una volta, e l'evento ha una durata limitata. Quando vuoi iniziare clicca sul pulsante Iscriviti al Registro. Buon divertimento!\n\n_Questo evento √® il primo di due parti_", kb);
			} else {
				if (rows[0].mission_end != null) {
					var d = new Date(rows[0].mission_end);
					var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
					bot.sendMessage(message.chat.id, "Stai svolgendo una missione dell'evento fino alle " + short_date, back);
					return;
				}

				var choice_id = rows[0].choice_id;
				var mission_time = rows[0].mission_time;
				var mission_id = rows[0].mission_id;
				var flag = rows[0].flag;

				var pos = rows[0].pos;
				var neg = rows[0].neg;

				var event_end = rows[0].event_end;
				var var_end = rows[0].var_end;

				if (event_end == 0) {
					if (choice_id >= 200) {
						bot.sendMessage(message.chat.id, "Riscattare la ricompensa?", yesno).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase() == "si") {

									var text = "";
									var chest = 0;
									var num = 0;
									var end_exp = 0;

									if ((pos != 0) && (neg != 0)) {
										if (pos > neg) {
											if (pos < 5) {
												num = 5;
												end_exp = 10;
											} else if (pos <= 10) {
												num = 7;
												end_exp = 10;
											} else if (pos > 10) {
												epic = 10;
												end_exp = 10;
											}
										} else {
											if (neg < 5) {
												num = 3;
												end_exp = 15;
											} else if (pos <= 10) {
												num = 5;
												end_exp = 25;
											} else if (pos > 10) {
												num = 7;
												end_exp = 40;
											}
										}
										chest = 6;
										text = "Hai ricevuto *" + num + " Scrigni Epici* e *" + end_exp + " exp*!";
									} else {
										if (var_end != 1) {
											if (var_end == 6) {
												text = "Purtroppo ti hanno distrutto il solo modo per trovare il tesoro e non hai ottenuto ricompense.";
											}
											if (var_end == 8) {
												chest = 4;
												num = 3;
												text = "Ricevi 3 Scrigni di Diamante!";
											}
											if ((var_end == 11) || (var_end == 13) || (var_end == 14)) {
												chest = 5;
												num = 3;
												text = "Ti restano soltanto gli scrigni che hai in soffitta, ottieni quindi 3 Scrigni Leggendari!";
											}
											if (var_end == 25) {
												chest = 6;
												num = 3;
												text = "All'interno della stanza trovi 3 Scrigni Epici!";
											}
											if (var_end == 26) {
												connection.query('UPDATE player SET life = total_life*0.1 WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
												text = "Fortunatamente non sei esausto, ma torni al tuo rifugio con il 10% dei tuoi hp.";
											}
										}
									}

									addChest(player_id, chest, num);
									connection.query('UPDATE mission_event_status SET event_end = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
									});
									setExp(player_id, end_exp);
									connection.query('SELECT COUNT(*) As num FROM `mission_event_status` WHERE event_end = 1', function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Evento completato!\n*" + text + "*\nUn enorme grazie per aver partecipato!\nSei l'utente numero " + rows[0].num + " ad aver completato l'evento.\nSi ringrazia @AlexCortinovis per aver ideato la storia e mi raccomando, se avete idee proponetele e magari la prossima storia sar√† ideata da voi!\nCi vediamo al prossimo!", back);
									});
								}
							}
						});
						return;
					}
				} else if (event_end == 1) {
					bot.sendMessage(message.chat.id, "Hai gi√† riscattato le ricompense dell'evento!", back);
					return;
				}

				connection.query('SELECT * FROM mission_event_choice WHERE id = ' + choice_id, function (err, rows, fields) {
					if (err) throw err;
					console.log("Scelta: " + choice_id);

					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Si √® verificato un errore, contatta l'admin indicando questo codice: " + choice_id + "!", back);
						return;
					}

					var text = rows[0].text;
					text = text.replace(new RegExp("%player%", "g"), message.from.username);

					var var1 = "";
					var var2 = "";
					var var3 = "";

					if ((rows[0].text1 == undefined) || (rows[0].text1 == "")) {
						rows[0].text1 = "1. Favoloso!";
						rows[0].text2 = "2. Cos√¨ cos√¨";
						rows[0].text3 = "3. Non mi √® piaciuto";

						connection.query('UPDATE mission_event_status SET choice_id = 200, var_end = ' + choice_id + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});

						text += "\n\nLascia un voto, e procedi per ottenere la tua ricompensa!";
					}

					var c1 = rows[0].text1;
					var c2 = rows[0].text2;
					var c3 = rows[0].text3;

					var eventChoice = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [[c1], [c2], [c3], ["Torna al menu"]]
						}
					};

					// RIMUOVERE NEI PROSSIMI EVENTI!

					if ((choice_id == 9) && (flag == 0)) {
						connection.query('UPDATE player SET money = money-10000 WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						connection.query('UPDATE mission_event_status SET flag = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					}

					bot.sendMessage(message.chat.id, text, eventChoice);
				});
			}
		});
	});
});

bot.onText(/^Iscriviti al Registro$/i, function (message) {

	if (eventStory == 0) {
		return;
	}

	var eventKb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Vai all'evento"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT mission_id, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		connection.query('SELECT 1 FROM mission_event_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO mission_event_status (player_id,choice_id,mission_end) VALUES (' + player_id + ',1,NULL)', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Sei stato aggiunto al registro eventi!", eventKb);
					return;
				});
			} else {
				bot.sendMessage(message.chat.id, "Sei gi√† stato aggiunto al registro eventi!", eventKb);
			}
		});
	});
});

bot.onText(/[1-9][.] [a-z1-9\s]+/i, function (message) {

	return;

	if (eventStory == 0) {
		return;
	}

	var num = parseInt(message.text.charAt(0));
	var choice = message.text.substring(message.text.indexOf(" ") + 1, message.text.lenght);

	connection.query('SELECT id, mission_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		connection.query('SELECT choice_id, event_end FROM mission_event_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non ti sei ancora iscritto al registro eventi!", back);
				return;
			}
			var choice_id = rows[0].choice_id;
			var epic = 0;
			var event_end = rows[0].event_end;

			if (event_end == 0) {
				if (choice_id >= 200) {
					var eventKb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Riscatta ricompensa evento"], ["Torna al menu"]]
						}
					};

					connection.query('UPDATE mission_event_status SET vote = "' + choice + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});

					bot.sendMessage(message.chat.id, "Evento completato! Torna all'evento per ricevere la ricompensa!", eventKb);
					return;
				}
			} else if (event_end == 1) {
				bot.sendMessage(message.chat.id, "Hai gi√† riscattato le ricompense dell'evento!", back);
				return;
			}

			connection.query('SELECT to_mission1, to_mission2, to_mission3 FROM mission_event_choice WHERE id = ' + choice_id + ' AND (text1 LIKE "%' + choice + '" OR text2 LIKE "%' + choice + '" OR text3 LIKE "%' + choice + '")', function (err, rows, fields) {
				if (err) throw err;

				var nextMission = 0;
				if (Object.keys(rows).length > 0) {
					if (num == 1) {
						nextMission = rows[0].to_mission1;
					} else if (num == 2) {
						nextMission = rows[0].to_mission2;
					} else if (num == 3) {
						nextMission = rows[0].to_mission3;
					} else {
						bot.sendMessage(message.chat.id, "Errore, la corrispondenza della scelta non √® stata trovata", back);
						return;
					}

					connection.query('SELECT title, text, duration, pos, neg, id FROM mission_event_text WHERE id = ' + nextMission, function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0) {
							var text = "*" + rows[0].title + "*\n";
							text += rows[0].text + "\n";
							text += "Questa parte di storia durer√† *" + toTime(rows[0].duration) + "*";

							var d = new Date();
							d.setSeconds(d.getSeconds() + rows[0].duration);
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

							var pos = rows[0].pos;
							var neg = rows[0].neg;

							connection.query('UPDATE mission_event_status SET pos = pos + ' + pos + ', neg = neg + ' + neg + ', mission_id = ' + rows[0].id + ', mission_end = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, text, back);
							});
						}
					});
				} else {
					bot.sendMessage(message.chat.id, "Scelta non valida", back);
					return;
				}
			});
		});
	});
});

bot.onText(/piazza di lootia|piazza/i, function (message) {

	if (message.text == "Piazza degli Affilamenti")
		return;

	connection.query('SELECT account_id, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		var iKeys = [];
		iKeys.push(["Emporio üí∏","Mercante Pazzo üëù"]);
		iKeys.push(["Contrabbandiere dell'Est üë£"]);
		iKeys.push(["Affari Passati üí¨", "Poste üéÅ"]);
		iKeys.push(['Biblioteca üèõ']);
		iKeys.push(["Torna al menu"]);

		var kb = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: iKeys
			}
		};

		bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella <b>Piazza di Lootia</b>, cosa vorresti fare?", kb);
	});
});

bot.onText(/contrabbandiere|vedi offerte/i, function (message) {

	if (message.text == "Classifica Contrabbandiere")
		return;

	connection.query('SELECT account_id, market_ban, holiday, id, gender, gems, global_end, money FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var gems = rows[0].gems;
		var global_end = rows[0].global_end;
		var my_money = rows[0].money;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla piazza"], ["Torna al menu"]]
			}
		};

		var d = new Date();
		if ((d.getHours() < 9) || (d.getHours() > 22)) { //9-23
			bot.sendMessage(message.chat.id, "Il Contrabbandiere non √® in piazza a quest'ora...", kbBack);
			return;
		}

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		connection.query('SELECT id, item_id, price, total_cnt, day_cnt, time_end FROM merchant_offer WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Vedi Offerte"], ["Torna al menu"]]
					}
				};

				connection.query('INSERT INTO merchant_offer (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Sei stato aggiunto alla *Lista Iscrizioni* del Contrabbandiere, accetta i suoi incarichi per ottenere dei pagamenti in cambio delle tue dimostrazioni di creazione!", kb);
					refreshMerchant(player_id);
				});
			} else {

				var price = rows[0].price;
				var total_cnt = rows[0].total_cnt;
				var day_cnt = rows[0].day_cnt;
				var item_id = rows[0].item_id;

				var offers = merchant_limit - day_cnt;
				if (offers < 0)
					offers = 0;

				if (rows[0].time_end != null) {
					var time_end = new Date(rows[0].time_end);
					var short_date = addZero(time_end.getHours()) + ":" + addZero(time_end.getMinutes());

					if ((time_end.getHours() > 22) || (day_cnt >= merchant_limit))
						bot.sendMessage(message.chat.id, "Al momento il Contrabbandiere non ha offerte per te, torna domani", back);
					else
						bot.sendMessage(message.chat.id, "Al momento il Contrabbandiere non ha offerte per te, torna alle *" + short_date + "*, puoi ancora accettare *" + offers + "* offerte", back);
					return;
				}

				var poss = "";
				var qnt = getItemCnt(player_id, item_id);
				if (qnt > 0)
					poss = " ‚úÖ";

				connection.query('SELECT name, rarity FROM item WHERE id = ' + item_id, function (err, rows, fields) {
					if (err) throw err;

					var name = rows[0].name;
					var rarity = rows[0].rarity;

					var kb = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Accetta Vendita di " + name + " (" + qnt + ")"], ["Cerca *" + name], ["Cambia offerta"], ["Torna alla piazza", "Torna al menu"]]
						}
					};

					var kbYesNo = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Si"], ["Torna dal contrabbandiere"], ["Torna al menu"]]
						}
					};

					var kbBack = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Torna dal contrabbandiere"], ["Torna al menu"]]
						}
					};

					var kbBack2 = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Torna dal contrabbandiere"], ["Torna al menu"]]
						}
					};

					var kbSel = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Istantaneo", "Aspetta 4 ore"], ["Torna al menu"]]
						}
					};

					if (day_cnt == merchant_limit) {
						bot.sendMessage(message.chat.id, "Il Contrabbandiere non ha pi√π bisogno di nulla per oggi", back);
						return;
					}

					var activeCoupon = "";
					if (getItemCnt(player_id, 677) > 0)
						activeCoupon = "\n<b>Il coupon √® attivo!</b>";

					var extra = "";
					/*
					if (global_end == 1) {
						extra = " (dimezzato per malus globale)";
						price = Math.round(price/2);
					}
					*/

					bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " <b>" + message.from.username + "</b>!\nPuoi creare oggetti per il <b>Contrabbandiere</b> ed egli provveder√† a valutarli e ricompensarti adeguatamente, purtroppo per√≤ √® disponibile solamente di giorno. Quando lascia la piazza, aggiorna la sua fornitura e quando torna ti propone affari diversi.\n\n<b>" + name + " (" + rarity + ")</b> al prezzo di <i>" + formatNumber(price) + "</i> ¬ß" + extra + poss + "\n\nAccetti l'incarico di questo oggetto? Se l'offerta che ti propone non ti sembra valida, puoi cambiarla.\nHai ancora a disposizione <b>" + offers + " offerte</b> per oggi." + activeCoupon, kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if ((answer.text == "Torna al menu") || (answer.text == "Torna alla piazza"))
								return;
							else if (answer.text == "Cambia offerta") {
								bot.sendMessage(message.chat.id, "Per chiedere un nuovo oggetto istantaneamente ti servir√† una üíé, oppure puoi attendere 4 ore per dare il tempo al contrabbandiere di rifornirsi, cosa vuoi fare?\nAl momento possiedi " + formatNumber(gems) + " üíé", kbSel).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text == "Istantaneo") {

											var d = new Date();
											if ((d.getHours() < 9) || (d.getHours() > 22)) { //9-23
												bot.sendMessage(message.chat.id, "Il Contrabbandiere non √® in piazza a quest'ora...", back);
												return;
											}

											bot.sendMessage(message.chat.id, "Sei sicuro?", kbYesNo).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text.toLowerCase() == "si") {
														connection.query('SELECT gems FROM player WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															if (rows[0].gems < 1) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza üíé", back);
																return;
															}
															connection.query('UPDATE player SET gems = gems-1 WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																refreshMerchant(player_id);
																bot.sendMessage(message.chat.id, "E' arrivata la nuova offerta!", kbBack);
															});
														});
													};
												};
											});
										} else if (answer.text == "Aspetta 4 ore") {
											bot.sendMessage(message.chat.id, "Sicuro?", kbYesNo).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text.toLowerCase() == "si") {
														var d = new Date();
														if ((d.getHours() < 9) || (d.getHours() > 22)) { //9-23
															bot.sendMessage(message.chat.id, "Il Contrabbandiere non √® in piazza a quest'ora...", back);
															return;
														}

														var now = new Date();
														now.setMinutes(now.getMinutes() + 240);
														var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
														var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());

														if ((now.getHours() > 22) || (now.getHours() < 5)) {
															bot.sendMessage(message.chat.id, "A quell'ora il viandante sar√† gi√† andato via, non puoi aspettare cos√¨ tanto", kbBack);
															return;
														}

														connection.query('UPDATE merchant_offer SET time_end = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															refreshMerchant(player_id);
															bot.sendMessage(message.chat.id, "Hai chiesto una nuova offerta, dovrai attendere fino alle " + short_date + "!", back);
														});
													}
												}
											});
										}
									};
								});
							} else if (answer.text.toLowerCase().indexOf("accetta") != -1) {

								var limit = "";
								if (my_money+price >= 1000000000)
									limit = "\nCon questa vendita il tuo gruzzolo superer√† il cap!";

								bot.sendMessage(message.chat.id, "Sei sicuro di voler vendere " + name + " per " + formatNumber(price) + " ¬ß?" + limit, kbYesNo).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {

											var d = new Date();
											if ((d.getHours() < 9) || (d.getHours() > 22)) { //9-23
												bot.sendMessage(message.chat.id, "Il Contrabbandiere non √® in piazza a quest'ora...", back);
												return;
											}

											if (getItemCnt(player_id, item_id) == 0) {
												bot.sendMessage(message.chat.id, "Non possiedi l'oggetto richiesto!", kbBack);
												return;
											}

											var noUse = 0;
											if ((total_cnt % 40 == 0) && (total_cnt > 0)) {
												if (getItemCnt(player_id, 677) == 0)
													noUse = 1;
												addItem(player_id, 677);
												bot.sendMessage(message.chat.id, "Per la tua costanza il contrabbandiere ti regala un *Coupon*, valido dalla prossima offerta!", mark);
											}

											var bonus = ""
											if ((getItemCnt(player_id, 677) > 0) && (noUse == 0)) {
												price += Math.round(price / 3);
												bonus = ", aumentati grazie al Coupon";
												var rand = Math.random() * 100;
												if (rand < 20) {
													var coupon = connection_sync.query("SELECT coupon_count FROM player WHERE id = " + player_id);
													var coupon_txt = (coupon[0].coupon_count+1) + " utilizzi";
													if (coupon[0].coupon_count+1 == 1)
														coupon_txt = "appena un utilizzo";
													bonus += " (Scaduto dopo " + coupon_txt + ")";
													delItem(player_id, 677, 1);
													connection.query('UPDATE player SET coupon_count = coupon_count+1 WHERE id = ' + player_id, function (err, rows, fields) {
														connection.query('UPDATE player SET coupon_record = coupon_count WHERE coupon_count > coupon_record AND id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE player SET coupon_count = 0 WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														});
													});
												} else {
													connection.query('UPDATE player SET coupon_count = coupon_count+1 WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
													});
												}
											}

											if (luckyMode == 1) {
												var d = new Date();
												var rand = Math.random() * 100;
												if (d.getDay() == 6) {
													if (rand < 10)
														price = price * 2;
												} else if (d.getDay() == 0) {
													if (rand < 20)
														price = price * 2;
													else if ((rand > 20) && (rand < 30))
														price = Math.round(price / 2);
												}
											}

											connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 18', function (err, rows, fields) {
												if (err) throw err;

												var abBonus = 0;
												if (Object.keys(rows).length > 0)
													abBonus = parseInt(rows[0].ability_level) * rows[0].val;

												var now = new Date();
												now.setMinutes(now.getMinutes() + 30);
												var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
												var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());

												var extra = "\nTorna tra 30 minuti per provare a commerciare di nuovo!";
												if ((day_cnt + 1) >= merchant_limit)
													extra = "\nPer oggi il contrabbandiere ha terminato le sue offerte per te!";

												if (now.getHours() > 22)
													extra = "\nPer oggi il contrabbandiere ha terminato le sue offerte!";

												var bonus_text = "";
												if (abBonus > 0) {
													var priceBonus = Math.round(price/100*abBonus);
													price += priceBonus;
													bonus_text = " (" + formatNumber(priceBonus) + " ¬ß grazie al talento)";
												}

												delItem(player_id, item_id, 1);

												connection.query('UPDATE player SET money = money + ' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													connection.query('UPDATE merchant_offer SET time_end = "' + long_date + '", total_cnt = total_cnt+1, day_cnt = day_cnt+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														bot.sendMessage(message.chat.id, "Vendita completata! Hai venduto *" + name + "* per *" + formatNumber(price) + "* ¬ß" + bonus + bonus_text + extra, back);
														refreshMerchant(player_id);
														setAchievement(player_id, 49, 1);
													});
												});
											});
										};
									};
								});
							};
						};
					});
				});
			}
		});
	});
});

/*
bot.onText(/ricalcolaValore/i, function (message, match) {
	var calcVal = 0;

	connection.query('UPDATE item SET value = 0 WHERE craftable = 1', function (err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT id, name, value FROM item WHERE craftable = 1', function (err, rows, fields) {
			if (err) throw err;
			var len = Object.keys(rows).length
			for (var i = 0; i < len; i++) {
				connection.query('SELECT material_result, i1.value As v1, i2.value As v2, i3.value As v3 FROM craft c INNER JOIN item i1 ON c.material_1 = i1.id INNER JOIN item i2 ON c.material_2 = i2.id INNER JOIN item i3 ON c.material_3 = i3.id', function (err, rows, fields) {
					if (err) throw err;
					var val = rows[0].v1+rows[0].v2+rows[0].v3;
					var tot = val*0.7;

					console.log("Valore per " + this.name + ": " + tot);

					//connection.query('UPDATE item SET value = ' + tot + ' WHERE id = ' + rows[0].material_result, function (err, rows, fields) {
					//	if (err) throw err;
					//});
				}.bind({
					name: name
				}));
			}
		});
	});
});
*/

bot.onText(/refreshBase (.+)|refreshBase/i, function (message, match) {
	if (match[1] == undefined) {
		bot.sendMessage(message.chat.id, "0 = value, 1 = estimate")
		return;
	} else
		estimate = match[1];

	calcBaseFunc(estimate);
});

bot.onText(/^\/refreshPrice/i, function (message, match) {
	connection.query('UPDATE item SET pnt_sum = 0, price_sum = 0', function (err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT id, name, rarity FROM item WHERE rarity IN ("R", "UR", "L", "E", "UE", "X", "U", "S") AND craftable = 1', function (err, rows, fields) {
			if (err) throw err;
			var len = Object.keys(rows).length;
			var calcVal = 0;
			var calcVal2 = 0;
			for (var i = 0; i < len; i++) {
				console.log(i + "/" + len + " Somma punti craft e costi per " + rows[i].name);
				calcPnt(rows[i].id, rows[i].id);

				calcVal = 0;
				calcVal2 = 0;

				if (rows[i].rarity == "C")
					calcVal2 = 1000;
				else if (rows[i].rarity == "NC")
					calcVal2 = 2000;
				else if (rows[i].rarity == "R") {
					calcVal2 = 3000;
					calcVal = 1;
				} else if (rows[i].rarity == "UR") {
					calcVal2 = 5000;
					calcVal = 2;
				} else if (rows[i].rarity == "L") {
					calcVal2 = 7500;
					calcVal = 3;
				} else if (rows[i].rarity == "E") {
					calcVal2 = 10000;
					calcVal = 5;
				} else if (rows[i].rarity == "UE") {
					calcVal2 = 100000;
					calcVal = 25;
				} else if (rows[i].rarity == "U") {
					calcVal2 = 250000;
					calcVal = 35;
				} else if (rows[i].rarity == "X") {
					calcVal2 = 1000000;
					calcVal = 50;
				} else if (rows[i].rarity == "S") {
					calcVal2 = 50000;
					calcVal = 15;
				}

				connection.query('UPDATE item SET pnt_sum = pnt_sum+' + calcVal + ', price_sum = price_sum+' + calcVal2 + ' WHERE id = ' + rows[i].id, function (err, rows, fields) {
					if (err) throw err;
				});
			}
		});
	});
});

bot.onText(/offerte giornaliere|mercante pazzo/i, function (message) {

	if (message.text.indexOf("Cerca") != -1)
		return;

	if (message.text.toLowerCase().indexOf("statuetta") != -1)
		return;

	/*
	if (message.from.id != 20471035) {
		bot.sendMessage(message.chat.id, "Manutenzione in corso", back);
		return;
	}
	*/

	var price_drop = 0;
	var price_drop_msg = "";
	var n = new Date().getDay()
	var n2 = new Date().getDate();

	if (n == 0) {
		if (n2 <= 7)
			sconto = 20;
		price_drop = 1;
		price_drop_msg = "*Oggi il prezzo √® ridotto del " + sconto + "% per tutti i pacchetti!*\n";
	}

	if (sconto_evento > 0) {
		sconto = sconto_evento;
		price_drop = 1;
		price_drop_msg = "*Oggi il prezzo √® ridotto del " + sconto + "% per tutti i pacchetti!*\n";
	}

	connection.query('SELECT account_id, holiday, market_ban, id, market_pack, market_pack_perc FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}
		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		var player_id = rows[0].id;
		var market_pack_perc = rows[0].market_pack_perc;

		var allowBuy = 1;
		var allowBuyText = ""
		if (crazyMode == 0) {
			if (rows[0].market_pack > 0) {
				allowBuy = 0;
				allowBuyText = "\n\n_Oggi hai gi√† acquistato un pacchetto, torna domani!_";
			}
		} else {
			if (rows[0].market_pack > 2) {
				allowBuy = 0;
				allowBuyText = "\n\n_Oggi hai gi√† acquistato tre pacchetti grazie al folle, torna domani!_";
			}
		}

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 7', function (err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0) {
				abBonus = rows[0].ability_level * rows[0].val;

				var rand = Math.random() * 100;
				if (rand < abBonus)
					abBonus = 1;
			}

			var query = " AND rarity.id != 9";
			if (market_pack_perc >= 100)
				query = "";

			var trust = progressBar(market_pack_perc, 100);
			var trust_discount = Math.floor(market_pack_perc/5);

			connection.query('SELECT rarity.name, rarity.id As rarity_id, SUM(price) As tot FROM market_pack, rarity WHERE market_pack.pack_id = rarity.id' + query + ' GROUP BY pack_id ORDER BY pack_id DESC', function (err, rows, fields) {
				if (err) throw err;

				var iKeys = [];
				var price = 0;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					price = rows[i].tot*(11-rows[i].rarity_id);
					price -= (price / 100 * trust_discount);
					if (price_drop == 1)
						price -= (price / 100 * sconto);
					iKeys.push(["Pacchetto " + rows[i].name + " (" + formatNumber(Math.round(price)) + " ¬ß)"]);
				}
				iKeys.push(["Torna alla piazza"]);
				iKeys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: iKeys
					}
				};

				bot.sendMessage(message.chat.id, price_drop_msg + "Il *Mercante Pazzo* oggi offre alcuni pacchetti dall'aspetto interessante, selezionali per vedere il loro contenuto, ma attenzione, puoi acquistare solamente un pacchetto al giorno!\nFiducia del Mercante: " + trust + " " + market_pack_perc + "%\nAumentando la fiducia riduci il costo dei pacchetti (-" + trust_discount + "% attuale) ed avrai accesso ad un pacchetto speciale quando raggiunger√† il 100%!" + allowBuyText, kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Torna al menu")
							return;

						if (allowBuy == 0) {
							bot.sendMessage(message.chat.id, "Non puoi acquistare altri pacchetti oggi!", back);
							return;
						}

						var reg3 = /Pacchetto (.+) \(/i;
						var rarity = answer.text.match(reg3);

						if (rarity == null)
							return;
						if (rarity[1] == undefined)
							return;

						connection.query('SELECT pack_id, SUM(price) As tot, rarity.id As rarity_id FROM market_pack, rarity WHERE market_pack.pack_id = rarity.id AND rarity.name = "' + rarity[1] + '"', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Pacchetto non valido", back);
								return;
							}
							if (rows[0].tot == null) {
								bot.sendMessage(message.chat.id, "Pacchetto non valido", back);
								return;
							}

							var pack_id = rows[0].pack_id;
							var rarity_id = rows[0].rarity_id;
							var qnt = 11-rows[0].rarity_id;
							var price = rows[0].tot*qnt;

							if ((rarity_id == 9) && (market_pack_perc < 100)) {
								bot.sendMessage(message.chat.id, "Il mercante non ha abbastanza fiducia in te per venderti questo pacchetto!", back);
								return;
							}

							connection.query('SELECT pack_id, item.name, item.id, price FROM market_pack, item WHERE market_pack.item_id = item.id AND pack_id = ' + pack_id + ' ORDER BY item.name', function (err, rows, fields) {
								if (err) throw err;
								var text = "Oggetti contenuti nel pacchetto:\n";
								var items = [];
								var prices = [];
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									rows[i].price = rows[i].price*qnt;
									text += "> " + qnt + "x " + rows[i].name + "\n";
									items.push(rows[i].id);

									rows[i].price -= (rows[i].price / 100 * trust_discount);
									if (price_drop == 1)
										rows[i].price -= (rows[i].price / 100 * sconto);
									prices.push(Math.round(rows[i].price));
								}
								price -= (price / 100 * trust_discount);
								if (price_drop == 1)
									price -= (price / 100 * sconto);
								price = Math.round(price);
								text += "\nAl prezzo di: *" + formatNumber(price) + "* ¬ß";

								var kb2 = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["Accetta"], ["Torna dal Mercante Pazzo"], ["Torna al menu"]]
									}
								};

								var kbBack = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["Torna dal Mercante Pazzo"], ["Torna alla piazza"], ["Torna al menu"]]
									}
								};

								bot.sendMessage(message.chat.id, text + "\n\nAcquisti il pacchetto?", kb2).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text == "Accetta") {
											connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												if (rows[0].money < price) {
													bot.sendMessage(message.chat.id, "Non hai abbastanza monete!", back);
													return;
												}
												var bonus_text = "";
												if (abBonus == 1) {
													price = Math.round(price / 2);
													bonus_text = " dimezzati grazie al tuo talento";
												}
												var query = ', market_pack_perc = market_pack_perc+' + (rarity_id/10);
												if (market_pack_perc+(rarity_id/10) > 100)
													query = ", market_pack_perc = 100";
												connection.query('UPDATE player SET market_pack = market_pack+1, money = money - ' + price + query + ' WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													var d = new Date();
													var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
													for (var i = 0, len = Object.keys(items).length; i < len; i++) {
														addItem(player_id, items[i], qnt);
														connection.query('INSERT INTO market_direct_history (item_id, price, time, from_id, to_id, type, quantity) VALUES (' + items[i] + ', ' + prices[i] + ', "' + long_date + '", ' + player_id + ', NULL, 4, ' + qnt + ')', function (err, rows, fields) {
															if (err) throw err;
														});
													}
													bot.sendMessage(message.chat.id, "Acquisto pacchetto *" + rarity[1] + "* completato!\nHai speso *" + formatNumber(price) + "* ¬ß" + bonus_text + "!", kbBack);
													setAchievement(player_id, 45, 1);

													if (rarity_id == 9) {
														connection.query('UPDATE player SET market_pack_perc = 0 WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}
												});
											});
										}
									}
								});
							});
						});
					};
				});
			});
		});
	});
});

bot.onText(/^Poste/, function (message) {
	connection.query('SELECT account_id, holiday, market_ban, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}
		if (rows[0].market_ban == 1) {
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla piazza"], ["Torna al menu"]]
			}
		};

		var player_id = rows[0].id;

		connection.query('SELECT time FROM market_gift WHERE player_id = ' + player_id + ' ORDER BY time DESC', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length > 0) {
				var d = new Date(rows[0].time);
				var now = new Date();
				var diff = Math.round(((now - d) / 1000) / 60 / 60); //in ore
				diff = Math.abs(diff);

				if (diff < 24 * 2) {
					d.setDate(d.getDate() + 2);
					var long_date = addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear() + " alle " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

					bot.sendMessage(message.chat.id, "Prima di spedire ancora devi aspettare fino al " + long_date, back);
					return;
				}
			}

			bot.sendMessage(message.chat.id, "Inserisci il nickname del giocatore al quale spedire l'oggetto, puoi farlo solamente una volta ogni 2 giorni", kb).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if ((answer.text == "Torna al menu") || (answer.text == "Torna alla piazza"))
						return;

					var user = answer.text.replace("@", "").trim();

					connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + user + '"', function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length == 0) {
							bot.sendMessage(message.chat.id, "Il giocatore specificato non esiste", kb);
							return;
						}
						var player_id2 = rows[0].id;
						var chat_id2 = rows[0].chat_id;

						if (player_id == player_id2) {
							bot.sendMessage(message.chat.id, "Non puoi inviare oggetti a te stesso", kb);
							return;
						}

						bot.sendMessage(message.chat.id, "Inserisci il nome dell'oggetto da spedire", kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if ((answer.text == "Torna al menu") || (answer.text == "Torna alla piazza"))
									return;
								var itemName = answer.text;
								connection.query('SELECT id, name, allow_sell FROM item WHERE name = "' + itemName + '"', function (err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0) {
										bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste", kb);
										return;
									}
									if (rows[0].allow_sell == 0) {
										bot.sendMessage(message.chat.id, "L'oggetto specificato non pu√≤ essere spedito", kb);
										return;
									}

									var itemId = rows[0].id;
									itemName = rows[0].name;
									if (getItemCnt(player_id, itemId) == 0) {
										bot.sendMessage(message.chat.id, "L'oggetto specificato non √® presente nel tuo inventario", kb);
										return;
									}

									bot.sendMessage(message.chat.id, "Inserisci il messaggio da inviare (senza andare a capo e senza usare simboli)", back).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text == "Torna al menu")
												return;
											var msg = answer.text;

											var reg = new RegExp("[<>]+");
											if (reg.test(msg) == true) {
												bot.sendMessage(message.chat.id, "Non utilizzare caratteri come <, o >", kb);
												return;
											}

											bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text.toLowerCase() == "si") {
														if (getItemCnt(player_id, itemId) == 0) {
															bot.sendMessage(message.chat.id, "L'oggetto specificato non √® presente nel tuo inventario", back);
															return;
														}

														setAchievement(player_id, 36, 1);

														var d = new Date();
														var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

														connection.query('INSERT INTO market_gift (player_id, to_id, item_id, time) VALUES (' + player_id + ',' + player_id2 + ',' + itemId + ',"' + long_date + '")', function (err, rows, fields) {
															if (err) throw err;
														});

														addItem(player_id2, itemId);
														delItem(player_id, itemId, 1);

														bot.sendMessage(message.chat.id, "Spedizione inviata!", kb);
														bot.sendMessage(chat_id2, "Hai ricevuto <b>" + itemName + "</b> da <b>" + message.from.username + "</b>, e ti scrive:\n<i>" + msg + "</i>", html);
													}
												}
											});
										};
									});
								});
							}
						});
					});
				}
			});
		});
	});
});

bot.onText(/cron (.+)/i, function (message, match) {

	if (message.from.id != 20471035)
		return;

	connection.query('SELECT id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		connection.query('SELECT item.name, M.price, M.type, time, from_id, to_id, P1.nickname As from_nick, P2.nickname As to_nick, quantity FROM market_direct_history M INNER JOIN player P1 ON P1.id = M.from_id INNER JOIN player P2 ON P2.id = M.to_id, item WHERE item.id = M.item_id AND (from_id = ' + player_id + ' OR to_id = ' + player_id + ') ORDER BY M.id DESC LIMIT 50', function (err, rows, fields) {
			if (err) throw err;

			var text = "<b>Cronologia vendite utente</b>\n\n";
			var long_date;
			var d;

			var tipo = "";

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				d = new Date(rows[i].time);
				long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1);

				if (rows[i].type == 1)
					tipo = "Mercato";
				else if (rows[i].type == 2)
					tipo = "Negozi";
				else
					tipo = "?";

				if (rows[i].from_id == player_id) {
					text += "‚è© " + rows[i].quantity + "x <b>" + rows[i].name + "</b> a " + rows[i].price + " ¬ß a " + rows[i].to_nick + " " + long_date + " (" + tipo + ")\n";
				} else if (rows[i].to_id == player_id) {
					text += "‚è™ " + rows[i].quantity + "x <b>" + rows[i].name + "</b> a " + rows[i].price + " ¬ß da " + rows[i].from_nick + " " + long_date + " (" + tipo + ")\n";
				}
			}
			bot.sendMessage(message.chat.id, text, html);
		});
	});
});

bot.onText(/Affari Passati/i, function (message) {

	var kb = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna alla piazza"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		connection.query('SELECT item.name, M.price, M.type, time, from_id, to_id, P1.nickname As from_nick, P2.nickname As to_nick, quantity FROM market_direct_history M INNER JOIN player P1 ON P1.id = M.from_id INNER JOIN player P2 ON P2.id = M.to_id, item WHERE item.id = M.item_id AND (from_id = ' + player_id + ' OR to_id = ' + player_id + ') ORDER BY M.id DESC LIMIT 25', function (err, rows, fields) {
			if (err) throw err;

			var text = "<b>Vendite/acquisti personali</b>:\n\n";
			var long_date;
			var d;
			var tipo = "";

			if (Object.keys(rows).length == 0)
				text += "Nessun acquisto/vendita\n";

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				d = new Date(rows[i].time);
				long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1);

				if (rows[i].type == 1)
					tipo = "Mercato";
				else if (rows[i].type == 2)
					tipo = "Negozi";
				else
					tipo = "?";

				if (rows[i].from_id == player_id) {
					text += "‚è© " + rows[i].quantity + "x <b>" + rows[i].name + "</b> a " + formatNumber(rows[i].price) + " ¬ß a " + rows[i].to_nick + " - " + long_date + " (" + tipo + ")\n";
				} else if (rows[i].to_id == player_id) {
					text += "‚è™ " + rows[i].quantity + "x <b>" + rows[i].name + "</b> a " + formatNumber(rows[i].price) + " ¬ß da " + rows[i].from_nick + " - " + long_date + " (" + tipo + ")\n";
				}
			}

			connection.query('SELECT P1.nickname As from_nick, P2.nickname As to_nick, price, hist_time, from_id, to_id FROM pay_history H INNER JOIN player P1 ON H.from_id = P1.id INNER JOIN player P2 ON H.to_id = P2.id WHERE (from_id = ' + player_id + ' OR to_id = ' + player_id + ') ORDER BY H.id DESC LIMIT 25', function (err, rows, fields) {
				if (err) throw err;

				text += "\n<b>Monete pagate/ricevute</b>:\n\n";

				if (Object.keys(rows).length == 0)
					text += "Nessuna monete pagata/ricevuta\n";

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					d = new Date(rows[i].hist_time);
					long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1);

					if (rows[i].from_id == player_id)
						text += "‚è© <b>" + formatNumber(rows[i].price) + " ¬ß</b> a " + rows[i].to_nick + " - " + long_date + "\n";
					else if (rows[i].to_id == player_id)
						text += "‚è™ <b>" + formatNumber(rows[i].price) + " ¬ß</b> da " + rows[i].from_nick + " - " + long_date + "\n";
				}

				connection.query('SELECT P1.nickname As creator, P2.nickname As winner, price, I.name, time FROM auction_history A INNER JOIN player P1 ON P1.id = A.creator_id INNER JOIN player P2 ON P2.id = A.player_id INNER JOIN item I ON A.item_id = I.id WHERE A.player_id = ' + player_id + ' ORDER BY A.id DESC LIMIT 25', function (err, rows, fields) {
					if (err) throw err;

					text += "\n<b>Aste vinte</b>:\n\n";

					if (Object.keys(rows).length == 0)
						text += "Nessuna asta vinta\n";

					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						d = new Date(rows[i].time);
						long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1);

						text += "<b>" + rows[i].name + "</b> per " + formatNumber(rows[i].price) + " ¬ß - " + long_date + "\n";
					}

					connection.query('SELECT P1.nickname As creator, P2.nickname As winner, I.name, time FROM public_lottery_history A INNER JOIN player P1 ON P1.id = A.creator_id INNER JOIN player P2 ON P2.id = A.player_id INNER JOIN item I ON A.item_id = I.id WHERE A.player_id = ' + player_id + ' ORDER BY A.id DESC LIMIT 25', function (err, rows, fields) {
						if (err) throw err;

						text += "\n<b>Lotterie vinte</b>:\n\n";

						if (Object.keys(rows).length == 0)
							text += "Nessuna lotteria vinta\n";

						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							d = new Date(rows[i].time);
							long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1);

							text += "<b>" + rows[i].name + "</b> - " + long_date + "\n";
						}

						bot.sendMessage(message.chat.id, text, kb);
					});
				});
			});
		});
	});
});

bot.onText(/^cerca/i, function (message) {

	if (message.text.toLowerCase().indexOf("ricercato") != -1)
		return;

	if (!checkSpam(message))
		return;

	if (message.text.indexOf(" ") != -1) {
		var oggetto = message.text.substring(message.text.indexOf(" ") + 1);
		if ((oggetto == "Ancora") || (oggetto == "üîé")) {
			cerca(message);
			return;
		}

		connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0)
				return;

			var player_id = rows[0].id;

			helpMsg(message.chat.id, player_id, 10);

			cercaTermine(message, oggetto, player_id);
		});
	} else
		cerca(message);
});

bot.onText(/Torna a /i, function (message) {
	var oggetto = message.text.substring(getPosition(message.text, " ", 2) + 1);

	if (oggetto == "Crea")
		return;

	if (!checkSpam(message))
		return;

	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var player_id = rows[0].id;

		cercaTermine(message, oggetto, player_id);
	});
});



bot.onText(/lista ricerche/i, function (message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		connection.query('SELECT term FROM search_history WHERE player_id = ' + player_id + ' ORDER BY id DESC LIMIT 100', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length > 0) {
				var iKeys = [];
				for (var i = 0, len = Object.keys(rows).length - 1; i < len; i++) {
					iKeys.push(["Cerca " + rows[i].term]);
				}
				iKeys.push(["Torna al menu"]);

				var kb = {
					reply_markup: {
						resize_keyboard: true,
						keyboard: iKeys
					}
				};

				bot.sendMessage(message.chat.id, "Seleziona la ricerca precedente", kb);
			} else {
				bot.sendMessage(message.chat.id, "Nessuna cronologia presente", back);
			}
		});
	});
});

bot.onText(/alchimia/i, function (message) {

	var alchemy = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [['Sintesi ‚ú®'], ['Incanta üíé ', 'Scomponi üíé '], ['Utilizza Polvere üå™', 'Trasmogrificazione üåÄ'], ["Rimodulatore di Flaridion üîó"], ['Torna al menu']]
		}
	}

	bot.sendMessage(message.chat.id, "Quale operazione vuoi effettuare?", alchemy);
});

bot.onText(/genera scaglia evolutiva/i, function (message) {
	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		if (reborn < 4) {
			bot.sendMessage(message.chat.id, "Devi essere almeno Rinascita 3 per creare questo oggetto", alchemy);
			return;
		}

		var gYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna all'alchimia"], ['Torna al menu']]
			}
		}

		var alchemy = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna all'alchimia"], ['Torna al generatore'], ['Torna al menu']]
			}
		}

		var dust = 1000;
		var mana = 7500;
		var itemid = 649;
		var name = "";
		if (message.text.toLowerCase().indexOf("plus") != -1) {
			dust = 10000;
			mana = 75000;
			itemid = 772;
			name = " Plus";
		}

		bot.sendMessage(message.chat.id, "Per creare questo particolare oggetto, *estremamente raro*, ti servir√†:\n> " + formatNumber(dust) + " Polvere\n> " + formatNumber(mana) + " Mana per tipo\nProcedi?", gYesNo).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "si") {

					if (getItemCnt(player_id, 646) < dust) {
						bot.sendMessage(message.chat.id, "Non hai abbastanza Polvere", alchemy);
						return;
					}

					connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						if ((rows[0].mana_1 < mana) || (rows[0].mana_2 < mana) || (rows[0].mana_3 < mana)) {
							bot.sendMessage(message.chat.id, "Non hai abbastanza Mana", alchemy);
							return;
						}

						delItem(player_id, 646, dust);
						connection.query('UPDATE event_mana_status SET mana_1 = mana_1 - ' + mana + ', mana_2 = mana_2 - ' + mana + ', mana_3 = mana_3 - ' + mana + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							addItem(player_id, itemid);
							bot.sendMessage(message.chat.id, "Dalle Polveri e dal potere Magico, si innalza un oggetto curioso: √® una *Scaglia Evolutiva" + name + "*!", alchemy);
						});
					});
				}
			}
		});
	});
});

bot.onText(/utilizza polvere/i, function (message) {
	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		var alchemy = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna all'alchimia"], ['Torna al generatore'], ['Torna al contrabbandiere'], ['Torna al menu']]
			}
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Genera Oggetto"], ["Genera Scaglia Evolutiva"], ["Genera Scaglia Evolutiva Plus"], ["Torna all'alchimia"], ['Torna al menu']]
			}
		}

		var gYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna al Generatore di Polvere"]]
			}
		};

		var kbNum = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["1", "10", "100"],["Torna al Generatore di Polvere"]]
			}
		};

		var dust = getItemCnt(player_id, 646);

		bot.sendMessage(message.chat.id, "Cosa vuoi fare con la polvere? Ne possiedi *" + formatNumber(dust) + "* unit√†", kb).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {

				if (answer.text == "Genera Oggetto") {
					if (getItemCnt(player_id, 646) == 0) {
						bot.sendMessage(message.chat.id, "Non hai Polvere da utilizzare", alchemy);
						return;
					}

					var rar1 = 40;
					var rar2 = 60;
					var rar3 = 80;
					var rar4 = 100;

					bot.sendMessage(message.chat.id, "Puoi creare un oggetto utilizzando la Polvere (ad esclusione degli equipaggiamenti):\n" +
									"Raro -> " + rar1 + "\n" +
									"Ultra Raro -> " + rar2 + "\n" +
									"Leggendario -> " + rar3 + "\n" +
									"Epico -> " + rar4 + "\n" +
									"Se l'oggetto √® craftato, richieder√† il *doppio* della polvere + una quantit√† dipendente dal valore\n\n" +
									"Inserisci il nome dell'oggetto, al momento c'√® una piccolissima probabilit√† di fallimento nella creazione.", alchemy).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text.indexOf("Torna al") != -1)
								return;

							var item_sel = answer.text;

							connection.query('SELECT id, estimate, craftable, rarity, name FROM item WHERE rarity IN ("R","UR","L","E") AND power = 0 AND power_shield = 0 AND power_armor = 0 AND dragon_power = 0 AND name = "' + item_sel + '"', function (err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "L'oggetto non esiste o la rarit√† non √® consentita", alchemy);
									return;
								}

								var itemId = rows[0].id;
								var itemName = rows[0].name;
								var rarity = rows[0].rarity;
								var craft = rows[0].craftable;
								var estimate = rows[0].estimate;

								var nec = 0;

								if (rarity == "R")
									nec = rar1;
								else if (rarity == "UR")
									nec = rar2;
								else if (rarity == "L")
									nec = rar3;
								else if (rarity == "E")
									nec = rar4;
								if (craft == 1) {
									nec = nec * 2;
									nec += Math.round(estimate / 10000);
								}

								bot.sendMessage(message.chat.id, "Quante copie dell'oggetto vuoi creare? Una copia di questo oggetto ti coster√† " + nec + " unit√† di Polvere", kbNum).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {

										var qnt = parseInt(answer.text);
										if (isNaN(qnt)) {
											bot.sendMessage(message.chat.id, "Quantit√† non valida", alchemy);
											return;
										}

										if ((qnt < 1) || (qnt > 100)) {
											bot.sendMessage(message.chat.id, "Quantit√† non valida", alchemy);
											return;
										}

										nec = nec*qnt;

										bot.sendMessage(message.chat.id, "Sicuro di voler generare " + formatNumber(qnt) + "x  *" + itemName + "* (" + rarity + ")?\nTi coster√† *" + formatNumber(nec) + "* unit√† di Polvere", gYesNo).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.toLowerCase() == "si") {

													var dustcnt = getItemCnt(player_id, 646);
													if (dustcnt < nec) {
														bot.sendMessage(message.chat.id, "Non hai abbastanza Polvere per generare questi oggetti, " + dustcnt + "/" + nec, alchemy);
														return;
													}

													var rand = Math.random() * 100;
													if (rand > 5) {
														delItem(player_id, 646, nec);
														addItem(player_id, itemId, qnt);
														bot.sendMessage(message.chat.id, "Hai generato " + qnt + "x " + itemName + " (" + rarity + ") con successo!", alchemy);
														setAchievement(player_id, 48, qnt);
													} else {
														delItem(player_id, 646, nec);
														bot.sendMessage(message.chat.id, "Dannazione! La generazione √® fallita e hai perso la polvere necessaria, che sfortuna!", alchemy);
													}
												};
											};
										});
									}
								});
							});
						}
					});
				}
			}
		});
	});
});

bot.onText(/filtro/i, function (message) {
	var backpackFilter = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [['Solo Base', 'Solo Creati'], ['Solo C', 'Solo NC', 'Solo R'], ['Solo UR', 'Solo L', 'Solo E'], ['Solo UE', 'Solo U', 'Solo S'], ['Solo I', 'Solo D', 'Solo X'], ['Solo Consumabili', 'Base per Quantit√†'], ['Torna allo zaino']]
		}
	};

	bot.sendMessage(message.chat.id, "Seleziona il filtro per visualizzare solo una parte dello zaino", backpackFilter);
});

bot.onText(/cambia visualizzazione/i, function (message) {

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Zaino Completo üéí"], ["Torna allo Zaino"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, bag_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		if (rows[0].bag_min == 0) {
			connection.query('UPDATE player SET bag_min = 1 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione _riassunta_ dello zaino", kb);
			});
		} else {
			connection.query('UPDATE player SET bag_min = 0 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione _estesa_ dello zaino", kb);
			});
		}
	});
});

bot.onText(/sfoglia pagina (.+)|figurine/i, function (message, match) {

	/*
	if ((message.from.id != 20471035) && (message.from.id != 200492030)){
		bot.sendMessage(message.chat.id, "Manutenzione!", back);
		return;
	}
	*/

	if ((message.text.toLowerCase() == "figurine collezionate") || (message.text.toLowerCase().indexOf("pacchetto") != -1))
		return;

	connection.query('SELECT id, account_id, holiday, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;

		var page = 1;
		if (match[1] != undefined)
			page = parseInt(match[1]);

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alle figurine"]]
			}
		};

		var kbAccept = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Accetta figurina"], ["Rifiuta figurina"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT COUNT(id) As cnt FROM card_list', function (err, rows, fields) {
			if (err) throw err;
			var tot = rows[0].cnt;

			connection.query('SELECT COUNT(id) As cnt FROM card_inventory WHERE quantity > 0 AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				var have = rows[0].cnt;

				var cardLimit = 50;
				var limitTo = (page-1)*cardLimit;

				connection.query('SELECT name, rarity, quantity FROM card_list, card_inventory WHERE card_list.id = card_inventory.card_id AND player_id = ' + player_id + ' AND quantity > 0 ORDER BY card_inventory.id DESC LIMIT 20', function (err, rows, fields) {
					if (err) throw err;

					var iKeys = [];
					for (i = 0, len = Object.keys(rows).length; i < len; i++)
						iKeys.push([rows[i].name + " (" + rows[i].rarity + ")"]);
					iKeys.push(["Torna alle figurine"]);

					var kbCards = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					connection.query('SELECT COUNT(id) As cnt FROM card_inventory WHERE quantity > 0', function (err, rows, fields) {
						if (err) throw err;
						var have_tot = rows[0].cnt;

						connection.query('SELECT name, player_id, rarity, quantity FROM card_list LEFT JOIN card_inventory ON card_list.id = card_inventory.card_id AND player_id = ' + player_id + ' AND quantity > 0 ORDER BY player_id DESC, name LIMIT ' + cardLimit + ' OFFSET ' + limitTo, function (err, rows, fields) {
							if (err) throw err;

							var text = "Attualmente sono disponibili *" + formatNumber(tot) + "* figurine, ne possiedi *" + have + "* diverse e fin ora ne sono state trovate *" + formatNumber(have_tot) + "*.\nTra parentesi √® mostrata la rarit√†, pi√π il valore √® alto pi√π √® difficile ottenerla negli _Assalti_.\n\n_Pagina " + page + "_\n\n";	

							for (i = 0, len = Object.keys(rows).length; i < len; i++) {
								var poss = "";
								if (rows[i].player_id != null) {
									poss = " ‚úÖ";
									if (rows[i].quantity > 1)
										poss += " " + rows[i].quantity;
								}
								text += "> " + rows[i].name + " (" + rows[i].rarity + ")" + poss + "\n";
							}

							var iKeys = [];
							iKeys.push(["Scambia üîÄ", "Brucia üî•"]);
							iKeys.push(["Compra Pacchetto di Figurine"]);

							if (Object.keys(rows).length == cardLimit)
								iKeys.push(["Sfoglia pagina " + (page+1)]);
							if (page > 1)
								iKeys.push(["Sfoglia pagina " + (page-1)]);

							iKeys.push(["Torna al menu"]);

							var kb = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: iKeys
								}
							};

							bot.sendMessage(message.chat.id, text + "\nPuoi ampliare la tua collezione scambiandole con gli altri giocatori ed ottenerle nell'_Emporio_!", kb).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al menu")
										return;

									if (answer.text.toLowerCase().indexOf("brucia") != -1) {
										/*
										if (player_id != 1) {
											bot.sendMessage(message.chat.id, "Questa funzione sar√† disponibile a breve!", kbBack);
											return;
										}
										*/
										if (have == 0) {
											bot.sendMessage(message.chat.id, "Non possiedi figurine da poter bruciare, partecipa agli Assalti per ottenerne altre!", kbBack);
											return;
										}
										bot.sendMessage(message.chat.id, "Inserisci il nome della figurina che vuoi bruciare, otterrai in cambio un premio in base alla rarit√† utilizzata", kbCards).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text == "Torna alle figurine")
													return;

												var card = answer.text.split("(")[0].trim();

												connection.query('SELECT id, rarity, name FROM card_list WHERE name = "' + card + '"', function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0) {
														bot.sendMessage(message.chat.id, "La figurina inserita non esiste", kbBack);
														return;
													}

													var card_id = rows[0].id;
													var card_name = rows[0].name;
													var rarity = rows[0].rarity;

													connection.query('SELECT quantity FROM card_inventory WHERE card_id = ' + card_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														if (Object.keys(rows).length == 0) {
															bot.sendMessage(message.chat.id, "Non possiedi la figurina inserita", kbBack);
															return;
														}

														if (rows[0].quantity < 1) {
															bot.sendMessage(message.chat.id, "Non hai abbastanza copie della figurina inserita", kbBack);
															return;
														}

														connection.query('UPDATE card_inventory SET quantity = quantity-1 WHERE card_id = ' + card_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															var rand = Math.random()*100;
															var name = "";

															if (player_id == 1)
																rand = 60;

															if (rand < 50) {
																if (rarity < 5) {
																	var money = 50000*rarity;
																	connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	name = formatNumber(money) + "x Monete";
																} else if (rarity < 9){
																	rand = Math.random()*100;
																	if (rand < 80) {
																		addChest(player_id, 5, 10);
																		name = "10x Scrigni Leggendari";
																	} else {
																		addChest(player_id, 6, 5);
																		name = "5x Scrigni Epici";
																	}
																} else {
																	rand = Math.random()*100;
																	if (rand < 60) {
																		connection.query('UPDATE player SET moon_coin = moon_coin+1 WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		name = "1x Moneta Lunare üåï";
																	} else if (rand < 80) {
																		addChest(player_id, 9, 1);
																		name = "1x Scrigno Scaglia";
																	} else {
																		addChest(player_id, 7, 1);
																		name = "1x Scrigno Capsula";
																	}
																}
															} else {
																var new_card = connection_sync.query('SELECT id, name, rarity FROM card_list WHERE rarity BETWEEN ' + (rarity-1) + ' AND ' + (rarity+1) + ' ORDER BY RAND()');

																connection.query('SELECT 1 FROM card_inventory WHERE card_id = ' + new_card[0].id + ' AND player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	if (Object.keys(rows).length == 0) {
																		connection.query('INSERT INTO card_inventory (player_id, card_id) VALUES (' + player_id + ', ' + new_card[0].id + ')', function (err, rows, fields) {
																			if (err) throw err;
																		});
																	} else {
																		connection.query('UPDATE card_inventory SET quantity = quantity + 1 WHERE player_id = ' + player_id + ' AND card_id = ' + new_card[0].id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																});

																name = "1x üÉè " + new_card[0].name + " (" + new_card[0].rarity + ")";
															}

															console.log("Figurina bruciata: " + name);

															bot.sendMessage(message.chat.id, "Getti la figurina nel fuoco... Appare una luce verdognola e dopo poco tempo, ottieni <b>" + name + "</b>!", kbBack);
														});
													});
												});
											}
										});
									} else if (answer.text.toLowerCase().indexOf("scambia") != -1) {
										if (reborn <= 2) {
											bot.sendMessage(message.chat.id, "Puoi scambiare le figurine solamente da R1!", kbBack);
											return;
										}
										if (have == 0) {
											bot.sendMessage(message.chat.id, "Non possiedi figurine da poter scambiare, partecipa agli Assalti per ottenerne altre!", kbBack);
											return;
										}
										connection.query('SELECT 1 FROM card_trade WHERE player_from = ' + player_id + ' OR player_to = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length > 0) {
												bot.sendMessage(message.chat.id, "Hai gi√† uno scambio in corso!", kbBack);
												return;
											}

											bot.sendMessage(message.chat.id, "Inserisci i nomi delle figurine da inviare, massimo 5 separati da virgola", kbBack).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if (answer.text == "Torna alle figurine")
														return;

													var split = [];
													if (answer.text.indexOf(",") != -1)
														split = answer.text.split(",");
													else
														split[0] = answer.text;

													var cards_id = [];
													var cards_name = [];
													var cards_rarity = [];

													if (split.length > 5) {
														bot.sendMessage(message.chat.id, "Massimo 5 figurine!", kbBack);
														return;
													}

													if (split.length < 1) {
														bot.sendMessage(message.chat.id, "Minimo 1 figurina!", kbBack);
														return;
													}

													for (i = 0; i < split.length; i++) {
														split[i] = split[i].trim();
														var card = connection_sync.query('SELECT id, rarity, name FROM card_list WHERE name = "' + split[i] + '"');

														if (Object.keys(card).length == 0) {
															bot.sendMessage(message.chat.id, "La figurina <b>" + split[i] + "</b> non esiste", kbBack);
															return;
														}

														var inv = connection_sync.query('SELECT quantity FROM card_inventory WHERE card_id = ' + card[0].id + ' AND player_id = ' + player_id);

														if (Object.keys(inv).length == 0) {
															bot.sendMessage(message.chat.id, "Non possiedi la figurina <b>" + card[0].name + "</b>", kbBack);
															return;
														}

														if (inv[0].quantity < 1) {
															bot.sendMessage(message.chat.id, "Non possiedi abbastanza copie per la figurina <b>" + card[0].name + "</b>", kbBack);
															return;
														}

														if (cards_id.indexOf(card[0].id) != -1) {
															bot.sendMessage(message.chat.id, "Hai gi√† inserito la figurina <b>" + card[0].name + "</b>", kbBack);
															return;
														}

														cards_id.push(card[0].id);
														cards_name.push(card[0].name);
														cards_rarity.push(card[0].rarity);
													}

													bot.sendMessage(message.chat.id, "Inserisci il nome del giocatore con cui effettuare lo scambio", kbBack).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if (answer.text == "Torna alle figurine")
																return;

															connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + answer.text + '"', function (err, rows, fields) {
																if (err) throw err;

																if (Object.keys(rows).length == 0) {
																	bot.sendMessage(message.chat.id, "Il giocatore inserito non esiste", kbBack);
																	return;
																}

																var player_id2 = rows[0].id;
																var player_chat_id2 = rows[0].chat_id;

																connection.query('SELECT 1 FROM card_trade WHERE player_from = ' + player_id2 + ' OR player_to = ' + player_id2, function (err, rows, fields) {
																	if (err) throw err;

																	if (Object.keys(rows).length > 0) {
																		bot.sendMessage(message.chat.id, "Il giocatore ha gi√† uno scambio in corso!", kbBack);
																		return;
																	}

																	var now = new Date();
																	now.setMinutes(now.getMinutes() + 30);
																	var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
																	var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());

																	connection.query('INSERT INTO card_trade (player_from, player_to, time_end) VALUES (' + player_id + ', ' + player_id2 + ', "' + long_date + '")', function (err, rows, fields) {
																		if (err) throw err;

																		var trade_id = rows.insertId;
																		var text = "";
																		for (i = 0; i < cards_id.length; i++) {
																			connection.query('INSERT INTO card_trade_detail (trade_id, player, card_id) VALUES (' + trade_id + ', 1, ' + cards_id[i] + ')', function (err, rows, fields) {
																				if (err) throw err;
																			});
																			text += "\n> " + cards_name[i] + " (" + cards_rarity[i] + ")";
																		}

																		bot.sendMessage(message.chat.id, "Scambio inserito correttamente! Scadr√† alle " + short_date, kbBack);

																		bot.sendMessage(player_chat_id2, message.from.username + " ti propone uno scambio di figurine:" + text + "\n\nUsa /accettaf per proporre le tue figurine o /rifiutaf per annullare lo scambio, scadr√† alle " + short_date, html);
																	});
																});
															});
														}
													});
												}
											});
										});
									};
								}
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/^\/accettaf/i, function (message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alle figurine"]]
			}
		};

		connection.query('SELECT id, player_from FROM card_trade WHERE player_to = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non hai nessuno scambio in corso!", kbBack);
				return;
			}

			var player_from = rows[0].player_from;
			var trade_id = rows[0].id;

			connection.query('SELECT card_list.id, name, rarity FROM card_list, card_trade_detail WHERE card_list.id = card_trade_detail.card_id AND player = 1 AND trade_id = ' + trade_id, function (err, rows, fields) {
				if (err) throw err;

				var player1RaritySum = 0;
				for (i = 0, len = Object.keys(rows).length; i < len; i++)
					player1RaritySum += parseInt(rows[i].rarity);

				bot.sendMessage(message.chat.id, "Inserisci i nomi delle figurine da inviare, massimo 5 separati da virgola. Per concludere lo scambio devi fornire figurine la cui somma delle rarit√† sia <b>" + player1RaritySum + "</b>", kbBack).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Torna alle figurine")
							return;

						var split = [];
						if (answer.text.indexOf(",") != -1)
							split = answer.text.split(",");
						else
							split[0] = answer.text;

						var cards_id = [];
						var cards_name = [];
						var cards_rarity = [];

						if (split.length > 5) {
							bot.sendMessage(message.chat.id, "Massimo 5 figurine!", kbBack);
							return;
						}

						if (split.length < 1) {
							bot.sendMessage(message.chat.id, "Minimo 1 figurina!", kbBack);
							return;
						}

						var player2RaritySum = 0;
						for (i = 0; i < split.length; i++) {
							split[i] = split[i].trim();
							var card = connection_sync.query('SELECT id, rarity, name FROM card_list WHERE name = "' + split[i] + '"');

							if (Object.keys(card).length == 0) {
								bot.sendMessage(message.chat.id, "La figurina <b>" + split[i] + "</b> non esiste", kbBack);
								return;
							}

							var inv = connection_sync.query('SELECT quantity FROM card_inventory WHERE card_id = ' + card[0].id + ' AND player_id = ' + player_id);

							if (Object.keys(inv).length == 0) {
								bot.sendMessage(message.chat.id, "Non possiedi la figurina <b>" + card[0].name + "</b>", kbBack);
								return;
							}

							if (inv[0].quantity < 1) {
								bot.sendMessage(message.chat.id, "Non possiedi abbastanza copie per la figurina <b>" + card[0].name + "</b>", kbBack);
								return;
							}

							if (cards_id.indexOf(card[0].id) != -1) {
								bot.sendMessage(message.chat.id, "Hai gi√† inserito la figurina <b>" + card[0].name + "</b>", kbBack);
								return;
							}

							cards_id.push(card[0].id);
							cards_name.push(card[0].name);
							cards_rarity.push(card[0].rarity);

							player2RaritySum += parseInt(card[0].rarity);
						}

						if (player1RaritySum != player2RaritySum) {
							bot.sendMessage(message.chat.id, "E' necessario inserire figurine la cui somma delle rarit√† sia uguale alla somma delle rarit√† del destinatario!\nLa tua somma: " + player2RaritySum + ", la necessaria: " + player1RaritySum, kbBack);
							return;
						}

						var text = "";
						for (i = 0; i < cards_id.length; i++) {
							connection.query('INSERT INTO card_trade_detail (trade_id, player, card_id) VALUES (' + trade_id + ', 2, ' + cards_id[i] + ')', function (err, rows, fields) {
								if (err) throw err;
							});
							text += "\n> " + cards_name[i] + " (" + cards_rarity[i] + ")";
						}

						connection.query('SELECT name, rarity FROM card_list, card_trade_detail WHERE card_trade_detail.card_id = card_list.id AND player = 1 AND trade_id = ' + trade_id, function (err, rows, fields) {
							if (err) throw err;

							var text_to = "";
							for (i = 0, len = Object.keys(rows).length; i < len; i++)
								text_to += "\n> " + rows[i].name + " (" + rows[i].rarity + ")";

							connection.query('SELECT nickname, chat_id FROM player WHERE id = ' + player_from, function (err, rows, fields) {
								if (err) throw err;

								bot.sendMessage(message.chat.id, "Lo scambio figurine prosegue, proponi:" + text + "\n\nMentre l'altro giocatore proponeva:" + text_to + "\n\nOra deve solamente accettare!", kbBack);
								bot.sendMessage(rows[0].chat_id, "<b>" + message.from.username + "</b> propone queste figurine:" + text + "\n\nTu avevi proposto:" + text_to + "\n\nPer concludere ed accettare lo scambio usa /concludif o altrimenti /rifiutaf", kbBack);
							});
						});
					}
				});
			});
		});
	});
});

bot.onText(/^\/concludif/i, function (message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alle figurine"]]
			}
		};

		connection.query('SELECT id, player_to FROM card_trade WHERE player_from = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Non hai nessuno scambio da concludere!", kbBack);
				return;
			}

			var player_to = rows[0].player_to;
			var trade_id = rows[0].id;

			connection.query('SELECT 1 FROM card_trade_detail WHERE trade_id = ' + trade_id + ' AND player = 1', function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Non hai ancora proposto alcuna figurina!", kbBack);
					return;
				}

				connection.query('SELECT 1 FROM card_trade_detail WHERE trade_id = ' + trade_id + ' AND player = 2', function (err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "L'altro giocatore non ha ancora proposto alcuna figurina!", kbBack);
						return;
					}

					connection.query('SELECT card_list.id, name, rarity FROM card_list, card_trade_detail WHERE card_list.id = card_trade_detail.card_id AND player = 1 AND trade_id = ' + trade_id, function (err, rows, fields) {
						if (err) throw err;

						for (i = 0, len = Object.keys(rows).length; i < len; i++) {
							var exists = connection_sync.query('SELECT quantity FROM card_inventory WHERE card_id = ' + rows[i].id + ' AND player_id = ' + player_id);

							if (Object.keys(exists).length == 0) {
								bot.sendMessage(message.chat.id, "Non possiedi la figurina " + rows[i].name + "!", kbBack);
								return;
							}

							if (exists[0].quantity < 1) {
								bot.sendMessage(message.chat.id, "Non possiedi abbastanza copie della figurina " + rows[i].name + "!", kbBack);
								return;
							}
						}

						connection.query('SELECT card_list.id, name, rarity FROM card_list, card_trade_detail WHERE card_list.id = card_trade_detail.card_id AND player = 2 AND trade_id = ' + trade_id, function (err, rows, fields) {
							if (err) throw err;

							for (i = 0, len = Object.keys(rows).length; i < len; i++) {
								var exists = connection_sync.query('SELECT quantity FROM card_inventory WHERE card_id = ' + rows[i].id + ' AND player_id = ' + player_to);

								if (Object.keys(exists).length == 0) {
									bot.sendMessage(message.chat.id, "Il destinatario non possiede la figurina " + rows[i].name + "!", kbBack);
									return;
								}

								if (exists[0].quantity < 1) {
									bot.sendMessage(message.chat.id, "Il destinatario non possiede abbastanza copie della figurina " + rows[i].name + "!", kbBack);
									return;
								}
							}

							connection.query('SELECT card_list.id, name, rarity, player FROM card_list, card_trade_detail WHERE card_list.id = card_trade_detail.card_id AND trade_id = ' + trade_id, function (err, rows, fields) {
								if (err) throw err;

								var text_from = "";
								var text_to = "";
								for (i = 0, len = Object.keys(rows).length; i < len; i++) {
									if (rows[i].player == 1) {
										var inv = connection_sync.query('SELECT 1 FROM card_inventory WHERE card_id = ' + rows[i].id + ' AND player_id = ' + player_to);
										if (Object.keys(inv).length == 0) {
											connection.query('INSERT INTO card_inventory (player_id, card_id) VALUES (' + player_to + ', ' + rows[i].id + ')', function (err, rows, fields) {
												if (err) throw err;
											});
										} else {
											connection.query('UPDATE card_inventory SET quantity = quantity + 1 WHERE player_id = ' + player_to + ' AND card_id = ' + rows[i].id, function (err, rows, fields) {
												if (err) throw err;
											});
										}

										connection.query('UPDATE card_inventory SET quantity = quantity - 1 WHERE player_id = ' + player_id + ' AND card_id = ' + rows[i].id, function (err, rows, fields) {
											if (err) throw err;
										});

										text_to += "\n> " + rows[i].name + " (" + rows[i].rarity + ")";
									} else {
										var inv = connection_sync.query('SELECT 1 FROM card_inventory WHERE card_id = ' + rows[i].id + ' AND player_id = ' + player_id);
										if (Object.keys(inv).length == 0) {
											connection.query('INSERT INTO card_inventory (player_id, card_id) VALUES (' + player_id + ', ' + rows[i].id + ')', function (err, rows, fields) {
												if (err) throw err;
											});
										} else {
											connection.query('UPDATE card_inventory SET quantity = quantity + 1 WHERE player_id = ' + player_id + ' AND card_id = ' + rows[i].id, function (err, rows, fields) {
												if (err) throw err;
											});
										}

										connection.query('UPDATE card_inventory SET quantity = quantity - 1 WHERE player_id = ' + player_to + ' AND card_id = ' + rows[i].id, function (err, rows, fields) {
											if (err) throw err;
										});

										text_from += "\n> " + rows[i].name + " (" + rows[i].rarity + ")";
									}
								}

								connection.query('SELECT nickname, chat_id FROM player WHERE id = ' + player_to, function (err, rows, fields) {
									if (err) throw err;

									connection.query('DELETE FROM card_trade WHERE player_from = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
									});

									bot.sendMessage(message.chat.id, "Scambio con <b>" + rows[0].nickname + "</b> completato, hai ottenuto:" + text_from + "\n\nIn cambio di:" + text_to, kbBack);
									bot.sendMessage(rows[0].chat_id, "Scambio con <b>" + message.from.username + "</b> completato, hai ottenuto:" + text_to + "\n\nIn cambio di:" + text_from, kbBack);
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/^\/rifiutaf/i, function (message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alle figurine"]]
			}
		};

		connection.query('SELECT player_from FROM card_trade WHERE player_to = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0)
				return;

			connection.query('DELETE FROM card_trade WHERE player_to = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			connection.query('SELECT chat_id, nickname FROM player WHERE id = ' + rows[0].player_from, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Scambio figurine con " + rows[0].nickname + " rifiutato!", kbBack);
				bot.sendMessage(rows[0].chat_id, "Scambio figurine con " + message.from.username + " rifiutato!", kbBack);
			});
		});

		connection.query('SELECT player_to FROM card_trade WHERE player_from = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0)
				return;

			connection.query('DELETE FROM card_trade WHERE player_from = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			connection.query('SELECT chat_id, nickname FROM player WHERE id = ' + rows[0].player_to, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Scambio figurine con " + rows[0].nickname + " rifiutato!", kbBack);
				bot.sendMessage(rows[0].chat_id, "Scambio figurine con " + message.from.username + " rifiutato!", kbBack);
			});
		});
	});
});

bot.onText(/Bacheca IN/i, function (message) {
	connection.query('SELECT id, global_event FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var pnt = rows[0].global_event;
		var text = "";

		var backPack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna allo Zaino"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, inventory.quantity As num FROM inventory, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND rarity = "IN" AND inventory.quantity > 0 ORDER BY rarity.id DESC, item.name ASC', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				text = "*" + rows[0].rname + "*:\n\n";

				for (i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (rows[i].craftable == 0)
						rows[i].name = "*" + rows[i].name + "*";
					text = text + "> " + rows[i].name + " (" + rows[i].num + ")\n";
				}
			} else
				text += "Nessun oggetto inestimabile disponibile\n";

			text += "\nPunti Imprese Globali con alta partecipazione: " + pnt;

			bot.sendMessage(message.chat.id, text + "\nQuesti oggetti sono unici e vengono ottenuti solamente al termine delle imprese globali!", backPack);
		});
	});
});

bot.onText(/zaino/i, function (message) {

	if (message.text.toLowerCase().indexOf("zeppo") != -1)
		return;

	if (message.text.toLowerCase().indexOf("completo") != -1)
		return;

	var backpack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [['Zaino Completo üéí'], ['Filtro üìÉ', 'Pozioni üç∂', 'Cerca üîé'], ['Equipaggia üó°', 'Set üí£', 'Rimuovi üö´'], ['Scrigni üîë', 'Torna al menu']]
		}
	};

	var backpackB = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna allo Zaino"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday, total_life, life, account_id, bag_min, money, gems, mkeys, moon_coin, necro_pnt, gain_exp FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var bottext = message.from.username + ", apri il tuo zaino ed al suo interno trovi:\n\n";
		var bag_min = rows[0].bag_min;

		bottext += "Monete: " + formatNumber(rows[0].money) + " ¬ß\n";
		if (rows[0].gems > 0)
			bottext += "Gemme: " + formatNumber(rows[0].gems) + " üíé\n";
		if (rows[0].mkeys > 0)
			bottext += "Chiavi Mistiche: " + formatNumber(rows[0].mkeys) + " üóù\n";
		if (rows[0].moon_coin > 0)
			bottext += "Monete Lunari: " + formatNumber(rows[0].moon_coin) + " üåï\n";
		if (rows[0].necro_pnt > 0)
			bottext += "Necrospiriti: " + formatNumber(rows[0].necro_pnt) + " üí†\n";
		if (rows[0].gain_exp > 0)
			bottext += "Esperienza accumulata: " + formatNumber(rows[0].gain_exp) + " ‚ú®\n";
		var dust = connection_sync.query('SELECT IFNULL(SUM(quantity), 0) As quantity FROM inventory WHERE item_id = 646 AND player_id = ' + player_id);
		if (dust[0].quantity > 0)
			bottext += "Polvere: " + formatNumber(dust[0].quantity) + " ‚ô®Ô∏è\n";
		var inventory_val = connection_sync.query('SELECT SUM(I.value*IV.quantity) As val FROM item I, inventory IV WHERE I.id = IV.item_id AND IV.player_id = ' + player_id);
		bottext += "Valore zaino: " + formatNumber(inventory_val[0].val) + " ¬ß\n";
		bottext += "\n";

		connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length > 0)
				bottext += "Mana:\n> " + formatNumber(rows[0].mana_1) + " Blu üåä\n> " + formatNumber(rows[0].mana_2) + " Giallo ‚ö°Ô∏è\n> " + formatNumber(rows[0].mana_3) + " Rosso üî•\n\n";

			connection.query('SELECT chest.name As name, quantity As num FROM inventory_chest, chest WHERE player_id = ' + player_id + ' AND chest.id = inventory_chest.chest_id AND quantity > 0 ORDER BY chest.id', function (err, rows, fields) {
				if (err) throw err;

				bottext = bottext + "<b>Scrigni:</b>\n";

				if ((new Date().getDate() == 1) && (new Date().getMonth() == 3))
					bottext += "Nessuno scrigno disponibile üëÄ\n";
				else {
					if (Object.keys(rows).length > 0) {
						for (var i = 0, len = Object.keys(rows).length; i < len; i++)
							bottext += "> " + rows[i].name + " (" + formatNumber(rows[i].num) + ")\n";
					} else
						bottext += "Nessuno scrigno disponibile\n";
				}

				bottext += "\n";

				connection.query('DELETE FROM magic WHERE quantity <= 0 AND player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					connection.query('SELECT type, power, quantity FROM magic WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						bottext += "<b>Incantesimi:</b>\n";
						if (Object.keys(rows).length > 0) {
							for (var i = 0, len = Object.keys(rows).length; i < len; i++)
								bottext += "> " + magicToName(rows[i].type) + " " + rows[i].power + " (" + rows[i].quantity + ")\n";
							bottext += "\n";
						} else
							bottext += "Nessun incantesimo disponibile\n";
						bot.sendMessage(message.chat.id, bottext, backpack);
					});
				});
			});
		});
	});
});

bot.onText(/zaino completo/i, function (message) {

	var backpackB = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Cambia Visualizzazione üíº"], ["Bacheca IN üåü", "Torna allo Zaino"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday, total_life, life, account_id, bag_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var bottext = message.from.username + ", ecco il contenuto del tuo zaino:\n\n";
		var player_total_life = rows[0].total_life;
		var player_life = rows[0].life;
		var bag_min = rows[0].bag_min;

		connection.query('SELECT inventory.player_id, item.craftable, item.name, rarity.id, rarity.name As rname, inventory.quantity As num FROM inventory, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND rarity.shortname != "IN" AND inventory.quantity > 0 ORDER BY rarity.id DESC, item.name ASC', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {

				var i = 0;
				var raritypre = rows[0].id;

				if (bag_min == 0) {
					bottext = bottext + "<b>" + rows[0].rname + "</b>:\n";
					for (i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].id != raritypre)
							bottext = bottext + "\n<b>" + rows[i].rname + "</b>:\n";
						if (rows[i].craftable == 0)
							rows[i].name = "<b>" + rows[i].name + "</b>";
						bottext = bottext + "> " + rows[i].name + " (" + formatNumber(rows[i].num) + ")\n";
						raritypre = rows[i].id;
					}
				} else {
					var raritycnt = 0;
					bottext = bottext + "<b>" + rows[0].rname + "</b>: ";
					for (i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].id != raritypre) {
							bottext += raritycnt + "\n<b>" + rows[i].rname + "</b>: ";
							raritycnt = 0;
						}
						raritycnt += rows[i].num;
						raritypre = rows[i].id;
					}
					bottext += raritycnt;
				}
			} else
				bottext = bottext + "Lo zaino √® vuoto\n";

			var max = 3000;
			if (Object.keys(bottext).length > max) {
				var arr = bottext.split("\n");
				var text = "";
				for (var i = 0, len = Object.keys(arr).length; i < len; i++) {
					text += arr[i] + "\n";
					if ((Object.keys(text).length + Object.keys(arr[i]).length) >= max) {
						if (text == "")
							console.log("Zaino: 1");
						bot.sendMessage(message.chat.id, text, backpackB);
						text = "";
					}
				}
				if (text != "") {
					setTimeout(function () {
						if (text == "")
							console.log("Zaino: 2");
						bot.sendMessage(message.chat.id, text, backpackB);
					}, 300);
				}
			} else {
				if (text == "")
					console.log("Zaino: 3");
				bot.sendMessage(message.chat.id, bottext, backpackB);
			}
		});
	});
});

bot.onText(/^set$|^set üí£$|torna ai set|^Imposta (.+)/i, function (message) {
	if (message.text == "Nuovo Set")
		return;

	connection.query('SELECT id, holiday, account_id, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var player_level = Math.floor(rows[0].exp / 10);
		var player_reborn = rows[0].reborn;

		var setBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna ai set"], ["Torna al menu"]]
			}
		};

		var setYesno = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Elimina"], ["Torna ai set"], ["Torna al menu"]]
			}
		};

		var setYesNo2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si"], ["Torna ai set"], ["Torna al menu"]]
			}
		};

		if (message.text.toLowerCase().indexOf("imposta") != -1) {
			if (message.text.indexOf("(") != -1)
				message.text = message.text.substring(0, message.text.indexOf("("));

			var reg = /Imposta (.+)/i;
			var found = message.text.match(reg);
			var set = found[1];

			connection.query('SELECT id FROM set_list WHERE name = "' + set + '" AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Set non valido", setBack);
					return;
				}

				var setId = rows[0].id;

				connection.query('SELECT S.id, S.name, I1.name As weapon, I1.id As wId, I1.power As power1, I1.critical As crit1, I1.rarity As rarity1, I1.reborn As reborn1, I2.name As armor, I2.id As aId, I2.power_armor As power2, I2.critical As crit2, I2.rarity As rarity2, I2.reborn As reborn2, I3.name As shield, I3.id As sId, I3.power_shield As power3, I3.critical As crit3, I3.rarity As rarity3, I3.reborn As reborn3, I4.name As charm, I4.id As cId, I4.rarity As rarity4, I4.reborn As reborn4 FROM set_list S LEFT JOIN item I1 ON I1.id = S.item_weapon LEFT JOIN item I2 ON I2.id = S.item_armor LEFT JOIN item I3 ON I3.id = S.item_shield LEFT JOIN item I4 ON I4.id = S.item_charm WHERE S.id = ' + setId, function (err, rows, fields) {
					if (err) throw err;

					var setId = rows[0].id;
					var text = "Set *" + rows[0].name + "* (" + setId + ")\n\n";

					if (rows[0].weapon != null)
						text += "Arma: " + rows[0].weapon + "\n";
					if (rows[0].armor != null)
						text += "Armatura: " + rows[0].armor + "\n";
					if (rows[0].shield != null)
						text += "Scudo: " + rows[0].shield + "\n";
					if (rows[0].charm != null)
						text += "Talismano: " + rows[0].charm + "\n";

					var wName = rows[0].weapon;
					var aName = rows[0].armor;
					var sName = rows[0].shield;
					var cName = rows[0].charm;

					var wId = rows[0].wId;
					var aId = rows[0].aId;
					var sId = rows[0].sId;
					var cId = rows[0].cId;

					var pow1 = rows[0].power1;
					var pow2 = rows[0].power2;
					var pow3 = rows[0].power3;

					var crit1 = rows[0].crit1;
					var crit2 = rows[0].crit2;
					var crit3 = rows[0].crit3;

					var reborn1 = rows[0].reborn1;
					var reborn2 = rows[0].reborn2;
					var reborn3 = rows[0].reborn3;
					var reborn4 = rows[0].reborn4;

					var rarity1 = rows[0].rarity1;
					var rarity2 = rows[0].rarity2;
					var rarity3 = rows[0].rarity3;
					var rarity4 = rows[0].rarity4;

					bot.sendMessage(message.chat.id, text + "\nConfermi il set?", setYesno).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text.toLowerCase() == "si") {

								if ((getItemCnt(player_id, wId) == 0) && (wName != null)) {
									bot.sendMessage(message.chat.id, "Non possiedi " + wName, setBack);
									return;
								}

								var level_nec = 0;
								if (rarity1 == "UR")
									level_nec = 15;
								else if (rarity1 == "L")
									level_nec = 30;
								else if (rarity1 == "E")
									level_nec = 50;
								else if (rarity1 == "UE")
									level_nec = 60;

								if ((player_level < level_nec) && (player_reborn == 1)) {
									bot.sendMessage(message.chat.id, "Non hai il livello necessario per equipaggiare " + wName + ". (" + level_nec + ")", setBack);
									return;
								}

								if (player_reborn < reborn1) {
									bot.sendMessage(message.chat.id, "Non hai il livello rinascita necessario per equipaggiare " + wName + ".", setBack);
									return;
								}

								if ((getItemCnt(player_id, aId) == 0) && (aName != null)) {
									bot.sendMessage(message.chat.id, "Non possiedi " + aName, setBack);
									return;
								}

								var level_nec = 0;
								if (rarity2 == "UR")
									level_nec = 15;
								else if (rarity2 == "L")
									level_nec = 30;
								else if (rarity2 == "E")
									level_nec = 50;
								else if (rarity2 == "UE")
									level_nec = 60;

								if ((player_level < level_nec) && (player_reborn == 1)) {
									bot.sendMessage(message.chat.id, "Non hai il livello necessario per equipaggiare " + aName + ". (" + level_nec + ")", setBack);
									return;
								}

								if (player_reborn < reborn2) {
									bot.sendMessage(message.chat.id, "Non hai il livello rinascita necessario per equipaggiare " + aName + ".", setBack);
									return;
								}

								if ((getItemCnt(player_id, sId) == 0) && (sName != null)) {
									bot.sendMessage(message.chat.id, "Non possiedi " + sName, setBack);
									return;
								}

								var level_nec = 0;
								if (rarity3 == "UR")
									level_nec = 15;
								else if (rarity3 == "L")
									level_nec = 30;
								else if (rarity3 == "E")
									level_nec = 50;
								else if (rarity3 == "UE")
									level_nec = 60;

								if ((player_level < level_nec) && (player_reborn == 1)) {
									bot.sendMessage(message.chat.id, "Non hai il livello necessario per equipaggiare " + sName + ". (" + level_nec + ")", setBack);
									return;
								}

								if (player_reborn < reborn3) {
									bot.sendMessage(message.chat.id, "Non hai il livello rinascita necessario per equipaggiare " + sName + ".", setBack);
									return;
								}

								if ((getItemCnt(player_id, cId) == 0) && (cName != null)) {
									bot.sendMessage(message.chat.id, "Non possiedi " + cName, setBack);
									return;
								}

								var level_nec = 0;
								if (rarity4 == "UR")
									level_nec = 15;
								else if (rarity4 == "L")
									level_nec = 30;
								else if (rarity4 == "E")
									level_nec = 50;
								else if (rarity4 == "UE")
									level_nec = 60;

								if ((player_level < level_nec) && (player_reborn == 1)) {
									bot.sendMessage(message.chat.id, "Non hai il livello necessario per equipaggiare " + cName + ". (" + level_nec + ")", setBack);
									return;
								}

								if (player_reborn < reborn4) {
									bot.sendMessage(message.chat.id, "Non hai il livello rinascita necessario per equipaggiare " + cName + ".", setBack);
									return;
								}

								connection.query('SELECT weapon_id, weapon2_id, weapon3_id, charm_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (wId != null) {
										if (rows[0].weapon_id != 0)
											addItem(player_id, rows[0].weapon_id);
									}
									if (aId != null) {
										if (rows[0].weapon2_id != 0)
											addItem(player_id, rows[0].weapon2_id);
									}
									if (sId != null) {
										if (rows[0].weapon3_id != 0)
											addItem(player_id, rows[0].weapon3_id);
									}
									if (cId != null) {
										if (rows[0].charm_id != 0)
											addItem(player_id, rows[0].charm_id);
									}

									connection.query('SELECT weapon, weapon_id, weapon_crit, weapon2, weapon2_id, weapon2_crit, weapon3, weapon3_id, weapon3_crit, charm_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (wId == null)
											wId = rows[0].weapon_id;
										else
											delItem(player_id, wId, 1);
										if (aId == null)
											aId = rows[0].weapon2_id;
										else
											delItem(player_id, aId, 1);
										if (sId == null)
											sId = rows[0].weapon3_id;
										else
											delItem(player_id, sId, 1);
										if (cId == null)
											cId = rows[0].charm_id;
										else
											delItem(player_id, cId, 1);

										if (pow1 == null)
											pow1 = rows[0].weapon;
										if (pow2 == null)
											pow2 = rows[0].weapon2;
										if (pow3 == null)
											pow3 = rows[0].weapon3;

										if (crit1 == null)
											crit1 = rows[0].weapon_crit;
										if (crit2 == null)
											crit2 = rows[0].weapon2_crit;
										if (crit3 == null)
											crit3 = rows[0].weapon3_crit;

										connection.query('UPDATE player SET weapon_id = ' + wId + ', weapon = ' + pow1 + ', weapon_crit = ' + crit1 + ', ' +
														 'weapon2_id = ' + aId + ', weapon2 = ' + pow2 + ', weapon2_crit = ' + crit2 + ', ' +
														 'weapon3_id = ' + sId + ', weapon3 = ' + pow3 + ', weapon3_crit = ' + crit3 + ', ' +
														 'charm_id = ' + cId + ' WHERE id = ' + player_id,
														 function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Set equipaggiato!", setBack);
										});
									});
								});
							} else if (answer.text == "Elimina") {
								bot.sendMessage(message.chat.id, "Sei sicuro di voler eliminare il set?", setYesNo2).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {
											connection.query('DELETE FROM set_list WHERE id = ' + setId, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Set eliminato!", setBack);
											});
										}
									};
								});
							}
						};
					});
				});
			});
			return;
		};

		connection.query('SELECT name, quantity FROM set_list WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			iKeys = [];
			if (Object.keys(rows).length > 0) {
				for (var i = 0, len = Object.keys(rows).length; i < len; i++)
					iKeys.push(["Imposta " + rows[i].name + " (" + rows[i].quantity + " oggetti)"]);
			}
			iKeys.push(["Nuovo Set", "Carica Set"]);
			iKeys.push(["Torna allo zaino"]);
			iKeys.push(["Torna al menu"]);

			var setList = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: iKeys
				}
			};

			bot.sendMessage(message.chat.id, "Imposta o modifica un set di equipaggiamento", setList).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					var resp = answer.text.toLowerCase();
					if (resp == "nuovo set") {
						bot.sendMessage(message.chat.id, "Aggiungi un nuovo set utilizzando questo formato:\nNOMESET: ARMA,ARMATURA,SCUDO,TALISMANO\n" +
										"_Esempio:_ Guerriero: Spada Antimateria,Armatura Nova,Scudo Statico,Talismano Guerriero\n" +
										"Se salti un campo, verr√† mantenuto l'oggetto attuale equipaggiato\n" +
										"_Esempio:_ Contadino: Coltello a Baionetta,Protezione di Stoffa,,Talismano della Forza\n\nAttenzione: Non usare parole chiave come 'viaggio' o 'missione', o non riuscirai pi√π ad impostarlo!", setBack).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								var resp = answer.text;

								if ((resp == "Torna al menu") || (resp == "Torna ai set"))
									return;

								var reg = new RegExp("([a-zA-Z0-9 ]+): *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*)");
								var reg2 = /([a-zA-Z0-9 ]+): *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*)/i;
								if (reg.test(resp) == false) {
									bot.sendMessage(message.chat.id, "Sintassi non valida, riprova", setBack);
									return;
								}

								var found = resp.match(reg);

								if (found == null) {
									bot.sendMessage(message.chat.id, "Errore di sintassi, riprova", setBack);
									return;
								}

								var title = found[1].trim();
								var weapon1 = found[2].trim();
								var weapon2 = found[3].trim();
								var weapon3 = found[4].trim();
								var weapon4 = found[5].trim();

								var text = "Set *" + title + "*:\n";

								if (weapon1 != "")
									text += weapon1;
								if (weapon2 != "")
									text += weapon2;
								if (weapon3 != "")
									text += weapon3;
								if (weapon4 != "")
									text += weapon4;

								var w1 = null;
								var w2 = null;
								var w3 = null;
								var w4 = null;
								var qnt = 0;

								connection.query('SELECT name FROM set_list WHERE name = "' + title + '" AND player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length > 0) {
										bot.sendMessage(message.chat.id, "Non puoi utilizzare due nomi uguali", setBack);
										return;
									}

									connection.query('SELECT id FROM item WHERE name = "' + weapon1 + '" AND power > 0', function (err, rows, fields) {
										if (err) throw err;
										if ((Object.keys(rows).length == 0) && (weapon1 != "")) {
											bot.sendMessage(message.chat.id, "L'arma non √® valida", setBack);
											return;
										} else if (weapon1 == "")
											w1 = 0;
										else {
											w1 = rows[0].id;
											qnt++;
										}
										connection.query('SELECT id FROM item WHERE name = "' + weapon2 + '" AND power_armor < 0', function (err, rows, fields) {
											if (err) throw err;
											if ((Object.keys(rows).length == 0) && (weapon2 != "")) {
												bot.sendMessage(message.chat.id, "L'armatura non √® valida", setBack);
												return;
											} else if (weapon2 == "")
												w2 = 0;
											else {
												w2 = rows[0].id;
												qnt++;
											}
											connection.query('SELECT id FROM item WHERE name = "' + weapon3 + '" AND power_shield < 0', function (err, rows, fields) {
												if (err) throw err;
												if ((Object.keys(rows).length == 0) && (weapon3 != "")) {
													bot.sendMessage(message.chat.id, "Lo scudo non √® valido", setBack);
													return;
												} else if (weapon3 == "")
													w3 = 0;
												else {
													w3 = rows[0].id;
													qnt++;
												}
												connection.query('SELECT id FROM item WHERE name = "' + weapon4 + '" AND name LIKE "Talismano%"', function (err, rows, fields) {
													if (err) throw err;
													if ((Object.keys(rows).length == 0) && (weapon4 != "")) {
														bot.sendMessage(message.chat.id, "Il talismano non √® valido", setBack);
														return;
													} else if (weapon4 == "")
														w4 = 0;
													else {
														w4 = rows[0].id;
														qnt++;
													}

													connection.query('INSERT INTO set_list (player_id, quantity, name, item_weapon, item_armor, item_shield, item_charm) VALUES (' + player_id + ',' + qnt + ',"' + title + '",' + w1 + ',' + w2 + ',' + w3 + ',' + w4 + ')', function (err, rows, fields) {
														if (err) throw err;
														connection.query('SELECT MAX(id) As maxid FROM set_list WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Set *" + title + "* creato! (Codice importazione: " + rows[0].maxid + ")", setBack);
														});
													});
												});
											});
										});
									});
								});
							}
						});
					} else if (resp == "carica set") {
						bot.sendMessage(message.chat.id, "Inserisci il codice del set da importare", setBack).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text == "Torna al set")
									return;

								var code = parseInt(answer.text);
								if (isNaN(code)) {
									bot.sendMessage(message.chat.id, "Questo codice set non esiste", setBack);
									return;
								}

								connection.query('SELECT * FROM set_list WHERE id = ' + code, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0) {
										bot.sendMessage(message.chat.id, "Questo codice set non esiste", setBack);
										return;
									}

									var title = rows[0].name;

									connection.query('INSERT INTO set_list (player_id, quantity, name, item_weapon, item_armor, item_shield, item_charm) VALUES (' + player_id + ',' + rows[0].quantity + ',"' + rows[0].name + '",' + rows[0].item_weapon + ',' + rows[0].item_armor + ',' + rows[0].item_shield + ',' + rows[0].item_charm + ')',
													 function (err, rows, fields) {
										if (err) throw err;
										connection.query('SELECT MAX(id) As maxid FROM set_list WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Set *" + title + "* importato! (Codice condivisione: " + rows[0].maxid + ")", setBack);
										});
									});
								});
							}
						});
					}
				}
			});
		});
	});
});

bot.onText(/^solo (.){1,15}$|^base per quantit√†$/i, function (message) {

	var backPack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna allo Zaino"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		if (message.text.toLowerCase() == "base per quantit√†") {
			connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.shortname, rarity.name As rname, inventory.quantity As num FROM inventory, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND craftable = 0 AND inventory.quantity > 0 ORDER BY rarity.id ASC, inventory.quantity ASC', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					var raritypre = rows[0].id;
					text = "*Oggetti base ordinati per quantit√†:*\n\n";
					text += "*" + rows[0].rname + "*:\n";
					for (i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].id != raritypre)
							text += "\n*" + rows[i].rname + "*:\n";
						text += "> " + rows[i].name + " (" + rows[i].shortname + ", " + rows[i].num + ")\n";
						raritypre = rows[i].id;
					}
				} else
					text = text + "Nessun oggetto base disponibile\n";
				if (Object.keys(text).length > 8000)
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				else if (Object.keys(text).length > 4000) {
					var arr = text.split("\n");
					text = "";
					for (var i = 0, len = Object.keys(arr).length; i < len; i++) {
						text += arr[i] + "\n";
						if ((Object.keys(text).length + Object.keys(arr[i]).length) >= 4000) {
							bot.sendMessage(message.chat.id, text, backPack);
							text = "";
						}
					}
					if (text != "") {
						setTimeout(function () {
							bot.sendMessage(message.chat.id, text, backPack);
						}, 300);
					}
				} else
					bot.sendMessage(message.chat.id, text, backPack);
			});
			return;
		}

		var soloRarity = message.text.substring(message.text.indexOf(" ") + 1);
		var text = "";

		if (soloRarity.toLowerCase() == "consumabili") {
			connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, inventory.quantity As num FROM inventory, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND cons = 1 AND inventory.quantity > 0 ORDER BY rarity.id DESC, item.name ASC', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					text = "*Oggetti consumabili:*\n\n";
					for (i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].craftable == 0)
							rows[i].name = "*" + rows[i].name + "*";
						text = text + "> " + rows[i].name + " (" + rows[i].num + ")\n";
					}
				} else
					text = text + "Nessun oggetto consumabile disponibile\n";
				if (Object.keys(text).length > 8000)
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				else if (Object.keys(text).length > 4000) {
					var arr = text.split("\n");
					text = "";
					for (var i = 0, len = Object.keys(arr).length; i < len; i++) {
						text += arr[i] + "\n";
						if ((Object.keys(text).length + Object.keys(arr[i]).length) >= 4000) {
							bot.sendMessage(message.chat.id, text, backPack);
							text = "";
						}
					}
					if (text != "") {
						setTimeout(function () {
							bot.sendMessage(message.chat.id, text, backPack);
						}, 300);
					}
				} else
					bot.sendMessage(message.chat.id, text, backPack);
			});
		} else if (soloRarity.toLowerCase() == "i") {
			connection.query('SELECT type, power, quantity FROM magic WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0) {
					text = "*Incantesimi:*\n\n";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++)
						text = text + "> " + magicToName(rows[i].type) + " " + rows[i].power + " (" + rows[i].quantity + ")\n";
				} else
					text = text + "Nessun incantesimo disponibile\n";

				if (Object.keys(text).length > 8000)
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				else if (Object.keys(text).length > 4000) {
					var arr = text.split("\n");
					text = "";
					for (var i = 0, len = Object.keys(arr).length; i < len; i++) {
						text += arr[i] + "\n";
						if ((Object.keys(text).length + Object.keys(arr[i]).length) >= 4000) {
							bot.sendMessage(message.chat.id, text, backPack);
							text = "";
						}
					}
					if (text != "") {
						setTimeout(function () {
							bot.sendMessage(message.chat.id, text, backPack);
						}, 300);
					}
				} else
					bot.sendMessage(message.chat.id, text, backPack);
			});
		} else if (soloRarity.toLowerCase() == "base") {
			connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, inventory.quantity As num FROM inventory, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND craftable = 0 AND inventory.quantity > 0 ORDER BY rarity.id DESC, item.name ASC', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					text = "*Oggetti base:*\n\n";
					for (i = 0, len = Object.keys(rows).length; i < len; i++)
						text = text + "> " + rows[i].name + " (" + rows[i].num + ")\n";
				} else
					text = text + "Nessun oggetto base disponibile\n";
				if (Object.keys(text).length > 8000)
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				else if (Object.keys(text).length > 4000) {
					var arr = text.split("\n");
					text = "";
					for (var i = 0, len = Object.keys(arr).length; i < len; i++) {
						text += arr[i] + "\n";
						if ((Object.keys(text).length + Object.keys(arr[i]).length) >= 4000) {
							bot.sendMessage(message.chat.id, text, backPack);
							text = "";
						}
					}
					if (text != "") {
						setTimeout(function () {
							bot.sendMessage(message.chat.id, text, backPack);
						}, 300);
					}
				} else
					bot.sendMessage(message.chat.id, text, backPack);
			});
		} else if (soloRarity.toLowerCase() == "creati") {
			connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, inventory.quantity As num FROM inventory, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND craftable = 1 AND inventory.quantity > 0 ORDER BY rarity.id DESC, item.name ASC', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					text = "*Oggetti creati:*\n\n";
					for (i = 0, len = Object.keys(rows).length; i < len; i++)
						text = text + "> *" + rows[i].name + "* (" + rows[i].num + ")\n";
				} else
					text = text + "Nessun oggetto creato disponibile\n";
				if (Object.keys(text).length > 8000)
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				else if (Object.keys(text).length > 4000) {
					var arr = text.split("\n");
					text = "";
					for (var i = 0, len = Object.keys(arr).length; i < len; i++) {
						text += arr[i] + "\n";
						if ((Object.keys(text).length + Object.keys(arr[i]).length) >= 4000) {
							bot.sendMessage(message.chat.id, text, backPack);
							text = "";
						}
					}
					if (text != "") {
						setTimeout(function () {
							bot.sendMessage(message.chat.id, text, backPack);
						}, 300);
					}
				} else
					bot.sendMessage(message.chat.id, text, backPack);
			});
		} else {
			connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, inventory.quantity As num FROM inventory, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND rarity = "' + soloRarity + '" AND inventory.quantity > 0 ORDER BY item.name ASC', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					text = "*" + rows[0].rname + "*:\n\n";

					for (i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].craftable == 0)
							rows[i].name = "*" + rows[i].name + "*";
						text = text + "> " + rows[i].name + " (" + rows[i].num + ")\n";
					}
				} else
					text = text + "Nessun oggetto di questa rarit√† disponibile\n";
				if (Object.keys(text).length > 8000)
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				else if (Object.keys(text).length > 4000) {
					var arr = text.split("\n");
					text = "";
					for (var i = 0, len = Object.keys(arr).length; i < len; i++) {
						text += arr[i] + "\n";
						if ((Object.keys(text).length + Object.keys(arr[i]).length) >= 4000) {
							bot.sendMessage(message.chat.id, text, backPack);
							text = "";
						}
					}
					if (text != "") {
						setTimeout(function () {
							bot.sendMessage(message.chat.id, text, backPack);
						}, 300);
					}
				} else
					bot.sendMessage(message.chat.id, text, backPack);
			});
		}
	});
});

bot.onText(/^Top|Torna alle top/i, function (message) {
	var kb = {
		reply_markup: {
			resize_keyboard: true,
			keyboard: [['Le Mie Classifiche'], ['Creazioni', 'Settimanale', 'Giornaliera'], ['Abilit√†', 'Rango'], ['Imprese Completate', 'Missioni'], ['Albo Artefatti', 'Classifica Contrabbandiere'], ['Tempo Incarichi', 'Durata Coupon'], ['Impresa Globale', 'Globali Contribuite'], ['Potenziamenti Flaridion'], ['Triplette Imprese'], ['Figurine Collezionate'], ['Cambia Top', 'Torna al menu']]
		}
	};

	bot.sendMessage(message.chat.id, "Seleziona il tipo di classifica da visualizzare", kb);
});

bot.onText(/^Cambia Top/i, function (message) {
	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna alle Top"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, top_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		if (rows[0].top_min == 0) {
			connection.query('UPDATE player SET top_min = 1 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione delle prime posizioni in classifica", kb);
			});
		} else {
			connection.query('UPDATE player SET top_min = 0 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione della tua posizione in classifica", kb);
			});
		}
	});
});

bot.onText(/^Le Mie Classifiche/i, function (message) {

	var text = "La tua posizione nelle varie classifiche personali:\n";
	var c = 1;
	var mypnt = 0;
	var mypos = 0;

	connection.query('SELECT nickname, craft_count As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, craft_count, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
		if (err) throw err;
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
				mypnt = rows[i].points;
				mypos = c;
			}
			c++;
		}
		text = text + "\n*Punti creazione*: " + mypos + "¬∞ con " + formatNumber(mypnt);
		c = 1;
		mypnt = 0;
		mypos = 0;

		connection.query('SELECT nickname, craft_week As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, craft_week, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
					mypnt = rows[i].points;
					mypos = c;
				}
				c++;
			}
			text = text + "\n*Punti creazione settimanali*: " + mypos + "¬∞ con " + formatNumber(mypnt) + " pnt";
			c = 1;
			mypnt = 0;
			mypos = 0;

			connection.query('SELECT nickname, craft_day As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, craft_day, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
						mypnt = rows[i].points;
						mypos = c;
					}
					c++;
				}
				text = text + "\n*Punti creazione giornalieri*: " + mypos + "¬∞ con " + formatNumber(mypnt) + " pnt";
				c = 1;
				mypnt = 0;
				mypos = 0;

				connection.query('SELECT nickname, rank As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, rank, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
					if (err) throw err;
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
							mypnt = rows[i].points;
							mypos = c;
						}
						c++;
					}
					text = text + "\n*Punti rango*: " + mypos + "¬∞ con " + formatNumber(mypnt);
					c = 1;
					mypnt = 0;
					mypos = 0;

					connection.query('SELECT nickname, achievement_count As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, achievement_count, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
						if (err) throw err;
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
								mypnt = rows[i].points;
								mypos = c;
							}
							c++;
						}
						text = text + "\n*Imprese giornaliere*: " + mypos + "¬∞ con " + formatNumber(mypnt) + " pnt";
						c = 1;
						mypnt = 0;
						mypos = 0;

						connection.query('SELECT nickname, mission_count As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, mission_count, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
									mypnt = rows[i].points;
									mypos = c;
								}
								c++;
							}
							text = text + "\n*Missioni completate*: " + mypos + "¬∞ con " + formatNumber(mypnt);
							c = 1;
							mypnt = 0;
							mypos = 0;

							connection.query('SELECT nickname, ability As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, ability, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
								if (err) throw err;
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
										mypnt = rows[i].points;
										mypos = c;
									}
									c++;
								}
								text = text + "\n*Abilit√†*: " + mypos + "¬∞ con " + formatNumber(mypnt);
								c = 1;
								mypnt = 0;
								mypos = 0;

								connection.query('SELECT nickname, total_cnt FROM merchant_offer, player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND merchant_offer.player_id = player.id AND player.id NOT IN (1,3) ORDER BY total_cnt DESC', function (err, rows, fields) {
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
											mypos = c;
											mypnt = rows[i].total_cnt;
										}
										c++;
									}
									text = text + "\n*Contrabbandiere*: " + mypos + "¬∞ con " + formatNumber(mypnt) + " offerte";
									c = 1;
									mypnt = 0;
									mypos = 0;

									connection.query('SELECT nickname, SUM(value) As cnt FROM achievement_global A, player P WHERE account_id NOT IN (SELECT account_id FROM banlist) AND P.id NOT IN (1,3) AND A.player_id = P.id GROUP BY player_id ORDER BY SUM(value) DESC', function (err, rows, fields) {
										if (err) throw err;
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
												mypos = c;
												mypnt = rows[i].cnt;
											}
											c++;
										}

										connection.query('SELECT global_eventwait FROM config', function (err, rows, fields) {
											if (err) throw err;

											if (rows[0].global_eventwait == 0) {
												if (mypos > 0)
													text = text + "\n*Impresa Globale*: " + mypos + "¬∞ con " + formatNumber(mypnt) + " punti";
											}

											c = 1;
											mypnt = 0;
											mypos = 0;

											connection.query('SELECT nickname, global_event As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, global_event, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
												if (err) throw err;
												for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
													if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
														mypos = c;
														mypnt = rows[i].points;
													}
													c++;
												}
												text = text + "\n*Globali*: " + mypos + "¬∞ con " + mypnt;
												c = 1;
												mypnt = 0;
												mypos = 0;

												connection.query('SELECT nickname, power_used As total_cnt FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) HAVING total_cnt > 0 ORDER BY total_cnt DESC', function (err, rows, fields) {
													if (err) throw err;
													for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
														if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
															mypos = c;
															mypnt = rows[i].total_cnt;
														}
														c++;
													}
													if (mypos != 0)
														text = text + "\n*Potenziamenti Flaridion*: " + mypos + "¬∞ con " + formatNumber(mypnt);
													c = 1;
													mypnt = 0;
													mypos = 0;

													connection.query('SELECT nickname, coupon_record As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, coupon_record, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
														if (err) throw err;
														for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
															if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
																mypos = c;
																mypnt = rows[i].points;
															}
															c++;
														}
														text = text + "\n*Utilizzi Coupon*: " + mypos + "¬∞ con " + mypnt;
														c = 1;
														mypnt = 0;
														mypos = 0;

														connection.query('SELECT nickname, achievement_count_all As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, achievement_count_all, exp, weapon ORDER BY points DESC', function (err, rows, fields) {
															if (err) throw err;
															for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
																	mypos = c;
																	mypnt = rows[i].points;
																}
																c++;
															}
															text = text + "\n*Triplette*: " + mypos + "¬∞ con " + mypnt;
															c = 1;
															mypnt = 0;
															mypos = 0;

															connection.query('SELECT nickname, COUNT(C.id) As points FROM card_inventory C, player P WHERE account_id NOT IN (SELECT account_id FROM banlist) AND C.player_id = P.id AND C.quantity > 0 GROUP BY player_id ORDER BY points  DESC', function (err, rows, fields) {
																if (err) throw err;
																for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																	if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
																		mypos = c;
																		mypnt = rows[i].points;
																	}
																	c++;
																}
																text = text + "\n*Figurine diverse Collezionate*: " + mypos + "¬∞ con " + mypnt;
																c = 1;
																mypnt = 0;
																mypos = 0;

																var keyrank = {
																	parse_mode: "Markdown",
																	reply_markup: {
																		resize_keyboard: true,
																		keyboard: [['Top'], ['Torna al menu']]
																	}
																};

																bot.sendMessage(message.chat.id, text, keyrank);
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/^Creazioni/i, function (message) {
	getRank(message, 20, 0);
});

bot.onText(/^Settimanale/i, function (message) {
	getRank(message, 20, 1);
});

bot.onText(/^Giornaliera/i, function (message) {
	getRank(message, 20, 3);
});

bot.onText(/^Abilit√†$/i, function (message) {
	getRank(message, 20, 6);
});

/*
bot.onText(/^Draghi$/i, function(message) {
	getRankDr(message, 20);
});
*/

bot.onText(/^Rango$/i, function (message) {
	getRank(message, 20, 2);
});

bot.onText(/^Imprese Completate$/i, function (message) {
	getRank(message, 20, 4);
});

bot.onText(/^Missioni$/i, function (message) {
	getRank(message, 20, 5);
});

bot.onText(/^Albo Artefatti$/i, function (message) {
	getRankArt(message, 20);
});

bot.onText(/^Potenziamenti Flaridion$/i, function (message) {
	getRankAt(message, 20);
});

bot.onText(/^Impresa Globale$/i, function (message) {
	getRankAch(message, 20);
});

bot.onText(/^Globali Contribuite/i, function (message) {
	getRank(message, 20, 7);
});

bot.onText(/^Tempo Incarichi/i, function (message) {
	getRankTeam(message, 20);
});

bot.onText(/^Durata Coupon/i, function (message) {
	getRank(message, 20, 8);
});

bot.onText(/^Triplette Imprese/i, function (message) {
	getRank(message, 20, 9);
});

bot.onText(/Classifica Contrabbandiere/i, function (message) {
	var text = "Classifica offerte accettate:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var myinfo = 0;
	var size = 20;

	var query = 'SELECT nickname, total_cnt FROM merchant_offer, player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND merchant_offer.player_id = player.id AND player.id NOT IN (1,3) ORDER BY total_cnt DESC';

	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1) {
			connection.query(query, function (err, rows, fields) {
				if (err) throw err;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < 31) {
						if (c < size + 1)
							text = text + c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].total_cnt) + ")\n";
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
						mypnt = rows[i].total_cnt;
						myinfo = c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].total_cnt) + ")\n";
					}
					c++;
				}
				text = text + "\nTu:\n" + myinfo;

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		} else {
			connection.query(query, function (err, rows, fields) {
				if (err) throw err;

				var range = 5;

				var nickname = [];
				var total_cnt = [];
				var mypos = 0;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					total_cnt.push(rows[i].total_cnt);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase())
						mypos = i;
				}
				for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
					if (nickname[i] != undefined) {
						if (i == mypos)
							text += (i + 1) + "¬∞ <b>" + nickname[i] + "</b> (" + formatNumber(total_cnt[i]) + ")\n";
						else
							text += (i + 1) + "¬∞ " + nickname[i] + " (" + formatNumber(total_cnt[i]) + ")\n";
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}
	});
});

bot.onText(/Figurine Collezionate/i, function (message) {
	var text = "Classifica figurine collezionate diverse:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var myinfo = 0;
	var size = 20;

	var query = 'SELECT nickname, COUNT(C.id) As total_cnt FROM card_inventory C, player P WHERE C.player_id = P.id AND account_id NOT IN (SELECT account_id FROM banlist) AND P.id NOT IN (1,3) AND C.quantity > 0 GROUP BY player_id ORDER BY total_cnt DESC';
	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1) {
			connection.query(query, function (err, rows, fields) {
				if (err) throw err;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < 31) {
						if (c < size + 1)
							text = text + c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].total_cnt) + ")\n";
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
						mypnt = rows[i].total_cnt;
						myinfo = c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].total_cnt) + ")\n";
					}
					c++;
				}
				text = text + "\nTu:\n" + myinfo;

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		} else {
			connection.query(query, function (err, rows, fields) {
				if (err) throw err;

				var range = 5;

				var nickname = [];
				var total_cnt = [];
				var mypos = 0;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					total_cnt.push(rows[i].total_cnt);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase())
						mypos = i;
				}
				for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
					if (nickname[i] != undefined) {
						if (i == mypos)
							text += (i + 1) + "¬∞ <b>" + nickname[i] + "</b> (" + formatNumber(total_cnt[i]) + ")\n";
						else
							text += (i + 1) + "¬∞ " + nickname[i] + " (" + formatNumber(total_cnt[i]) + ")\n";
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}
	});
});

bot.onText(/emporio/i, function (message) {
	var oggetto = "";
	var iKeys = [];

	var price_drop = 0;
	var price_drop_msg = "";
	var n = new Date().getDay()
	var n2 = new Date().getDate();

	if (n == 0) {
		if (n2 <= 7)
			sconto = 20;
		price_drop = 1;
		price_drop_msg = "*Oggi il prezzo √® ridotto del " + sconto + "% per tutti gli scrigni e le pozioni!*\n";
	}

	if (sconto_evento > 0) {
		sconto = sconto_evento;
		price_drop = 1;
		price_drop_msg = "*Oggi il prezzo √® ridotto del " + sconto + "% per tutti gli scrigni e le pozioni!*\n";
	}

	connection.query('SELECT id, holiday, money, account_id, mission_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		helpMsg(message.chat.id, player_id, 6);

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Compra", "Vendi", "Ricicla"], ["Torna alla piazza"], ["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, price_drop_msg + "Hai a disposizione " + formatNumber(money) + " ¬ß, cosa vuoi fare?", kb).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text.toLowerCase() == "compra") {
					connection.query('SELECT value, name FROM chest WHERE id < 7', function (err, rows, fields) {
						if (err) throw err;

						var potionS = 1500;
						var potionM = 2500;
						var potionL = 5000;
						var plume = 10000;
						var dust = 25000;
						var package = 5;

						if (price_drop == 1) {
							iKeys.push(["Compra Pozione Piccola (" + formatNumber(parseInt(potionS - Math.round((potionS / 100) * sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Pozione Media (" + formatNumber(parseInt(potionM - Math.round((potionM / 100) * sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Pozione Grande (" + formatNumber(parseInt(potionL - Math.round((potionL / 100) * sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Piuma di Fenice (" + formatNumber(parseInt(plume - Math.round((plume / 100) * sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Cenere di Fenice (" + formatNumber(parseInt(dust - Math.round((dust / 100) * sconto))) + " ¬ß)"]);
						} else {
							iKeys.push(["Compra Pozione Piccola (" + formatNumber(potionS) + " ¬ß)"]);
							iKeys.push(["Compra Pozione Media (" + formatNumber(potionM) + " ¬ß)"]);
							iKeys.push(["Compra Pozione Grande (" + formatNumber(potionL) + " ¬ß)"]);
							iKeys.push(["Compra Piuma di Fenice (" + formatNumber(plume) + " ¬ß)"]);
							iKeys.push(["Compra Cenere di Fenice (" + formatNumber(dust) + " ¬ß)"]);
						}

						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (price_drop == 1)
								rows[i].value = rows[i].value - Math.round((rows[i].value / 100) * sconto);
							iKeys.push(["Compra " + rows[i].name + " (" + formatNumber(rows[i].value) + " ¬ß)"]);
						}
						if (sconto_evento > 0)
							iKeys.push(["Compra Gemma (" + formatNumber(parseInt(300000 - Math.round((300000 / 100) * sconto))) + " ¬ß)"]);
						else
							iKeys.push(["Compra Gemma (300.000 ¬ß)"]);

						iKeys.push(["Compra Pacchetto di Figurine (" + formatNumber(package) + " üåï)"]);

						iKeys.push(["Torna all'emporio"]);
						iKeys.push(["Torna al menu"]);

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, "Seleziona l'oggetto da acquistare.", kb);
					});
				} else if (answer.text.toLowerCase() == "vendi") {
					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Vendi C", "Vendi NC"], ["Vendi R", "Vendi UR"], ["Vendi L", "Vendi E"], ["Torna all'emporio"], ["Torna al menu"]]
						}
					};

					bot.sendMessage(message.chat.id, "Puoi vendere un oggetto attraverso il Cerca, oppure tutta la rarit√† selezionandola sotto", kb);
				}
			};
		});
	});
});

bot.onText(/ricicla/i, function (message) {
	connection.query('SELECT id, holiday, money, account_id, mission_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		var kbR = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["C", "NC", "R"], ["UR", "L", "E"], ["D"], ["Torna all'emporio"], ["Torna al menu"]]
			}
		};

		var kb2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Ricicla Ancora"], ["Torna al menu"]]
			}
		};

		var kbC = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Stessa Rarit√†"], ["Rarit√† Superiore"], ["Torna al menu"]]
			}
		};

		if (message.text.indexOf("Ricicla:") != -1) {
			bot.sendMessage(message.chat.id, "Usa la sintassi: /ricicla nome,quantit√†", back);
			return;
		}

		if (message.text.indexOf("/") != -1) {
			message.text = message.text.toLowerCase().replace("/ricicla ", "");
			var oggetto = message.text.split(",")[0].trim();
			if (message.text.indexOf(",") == -1) {
				bot.sendMessage(message.chat.id, "Sintassi non valida: /ricicla nome,quantit√†", back);
				return;
			}
			var qnt = parseInt(message.text.split(",")[1].trim());

			if (isNaN(qnt)) {
				bot.sendMessage(message.chat.id, "Quantit√† non valida.", back);
				return;
			}

			if ((qnt < 5) || (qnt > 500)) {
				bot.sendMessage(message.chat.id, "Quantit√† non valida: minimo 5, massimo 500.", back);
				return;
			}

			if (qnt % 5 !== 0) {
				bot.sendMessage(message.chat.id, "Quantit√† non valida: inserisci un multiplo di 5.", back);
				return;
			}

			var calc_qnt = Math.floor(qnt/5);

			bot.sendMessage(message.chat.id, "Con quale modalit√† vuoi riciclare " + qnt + "x " + oggetto + "?", kbC).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if ((answer.text == "Stessa Rarit√†") || (answer.text == "Rarit√† Superiore")) {
						connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							connection.query('SELECT inventory.item_id, item.name, inventory.quantity, item.rarity FROM inventory, item WHERE inventory.item_id = item.id AND player_id = ' + player_id + ' AND item.name = "' + oggetto + '"', function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "L'oggetto non esiste.", back);
									return;
								}

								if (rows[0].quantity < qnt) {
									bot.sendMessage(message.chat.id, "Non possiedi abbastanza oggetti, ne servono " + qnt + ".", back);
									return;
								}

								var rarity = rows[0].rarity;
								var nRarity = rarity;
								var item_id = rows[0].item_id;

								var price = 0;

								if (answer.text == "Rarit√† Superiore") {
									if (nRarity == "C") {
										nRarity = "NC";
										price = 1000;
									} else if (nRarity == "NC") {
										nRarity = "R";
										price = 1500;
									} else if (nRarity == "R") {
										nRarity = "UR";
										price = 2000;
									} else if (nRarity == "UR") {
										nRarity = "L";
										price = 2500;
									} else if (nRarity == "L") {
										nRarity = "E";
										price = 3000;
									} else {
										bot.sendMessage(message.chat.id, "Non puoi riciclare questa rarit√†!", back);
										return;
									}
								} else {
									if ((nRarity != "C") && (nRarity != "NC") && (nRarity != "R") && (nRarity != "UR") && (nRarity != "L") && (nRarity != "E") && (nRarity != "D")) {
										bot.sendMessage(message.chat.id, "Non puoi riciclare questa rarit√†!", back);
										return;
									}
								}

								price = price*calc_qnt;

								if (money < price) {
									bot.sendMessage(message.chat.id, "Non hai abbastanza monete (" + price + " ¬ß)", back);
									return;
								}

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
								});

								delItem(player_id, item_id, qnt);

								setAchievement(player_id, 15, calc_qnt);

								var text = "Hai riciclato " + qnt + "x " + oggetto + " ed hai ottenuto:\n";
								var achQnt = 0;

								var itemsArray = [];
								var broken = 0;

								for (var i = 0; i < calc_qnt; i++) {
									if ((nRarity == "D") && (item_id < 100)) {
										var stone_item_id = item_id-67;	// 1-6
										var prob = 100-(stone_item_id*15);
										var rand = Math.random()*100;

										if (prob >= rand) {
											broken++;
											continue;
										}
									}

									var rows = connection_sync.query('SELECT id, name FROM item WHERE rarity = "' + nRarity + '" AND name != "' + oggetto + '" AND craftable = 0 ORDER BY RAND()');

									addItem(player_id, rows[0].id);

									itemsArray.push(rows[0].name + " (" + nRarity + ")");

									if ((nRarity == "D") && (item_id >= 68) && (item_id <= 73) && 
										((rows[0].id == 705) || (rows[0].id == 703) || (rows[0].id == 704) ||
										 (rows[0].id == 700) || (rows[0].id == 701) || (rows[0].id == 702) ||
										 (rows[0].id == 785) || (rows[0].id == 786)))
										achQnt++;
								};

								itemsArray = itemsArray.sort();

								if (achQnt > 0)
									setAchievement(player_id, 72, achQnt);

								var kb3 = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["/ricicla " + oggetto + "," + qnt], ["Ricicla Ancora"], ["Torna al menu"]]
									}
								};

								var itemsGrouped = compressArray(itemsArray);
								for (i = 0; i < Object.keys(itemsGrouped).length; i++)
									text += "> " + itemsGrouped[i].count + "x " + itemsGrouped[i].value + "\n";

								if (broken > 0)
									text += "\nTuttavia si √® inceppata durante il riciclo di " + broken + " oggetti!";

								bot.sendMessage(message.chat.id, text, kb3);
							});
						});
					};
				};
			});
			return;
		}

		var iKeys = [];

		bot.sendMessage(message.chat.id, "Seleziona la rarit√† dell'oggetto da riciclare, puoi anche usare /ricicla NomeOggetto,quantit√†\nIn caso di rarit√† D, c'√® una possibilit√† che il riciclo fallisca, questa probabilit√† dipende dalla rarit√† della Pietra utilizzata", kbR).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				var r = answer.text;

				if ((r == "Torna al menu") || (r == "Torna all'emporio"))
					return;

				if ((r != "C") && (r != "NC") && (r != "R") && (r != "UR") && (r != "L") && (r != "E") && (r != "D")) {
					bot.sendMessage(message.chat.id, "Rarit√† non valida", back);
					return;
				}

				connection.query('SELECT item.name, inventory.quantity, item.rarity FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity = "' + r + '" AND player_id = ' + player_id + ' AND inventory.quantity >= 5', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Non hai oggetti di rarit√† " + r + " riciclabili.", back);
						return;
					}
					for (var i = 0, len = Object.keys(rows).length; i < len; i++)
						iKeys.push([rows[i].name + " (" + rows[i].rarity + ", " + rows[i].quantity + ")"]);

					iKeys.push(["Torna all'emporio"]);
					iKeys.push(["Torna al menu"]);

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona gli oggetti da riciclare, consumandone 5 riceverai un oggetto della stessa rarit√†, o superiore (in questo caso ti coster√† C -> NC: 1.000 ¬ß, NC -> R: 1.500 ¬ß, R -> UR: 2.000 ¬ß, UR -> L: 2.500 ¬ß, L -> E: 3.000 ¬ß).", kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							var oggetto = answer.text;

							if ((oggetto == "Torna al menu") || (oggetto == "Torna all'emporio"))
								return;

							var pos = oggetto.indexOf("(");
							oggetto = oggetto.substr(0, pos - 1);

							bot.sendMessage(message.chat.id, "Con quale modalit√† vuoi riciclare " + oggetto + "?", kbC).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if ((answer.text == "Stessa Rarit√†") || (answer.text == "Rarit√† Superiore")) {
										connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											connection.query('SELECT item.name, inventory.quantity, item.rarity, item.id FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity = "' + r + '" AND player_id = ' + player_id + ' AND inventory.quantity >= 5 AND item.name = "' + oggetto + '"', function (err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0) {
													bot.sendMessage(message.chat.id, "Non possiedi l'oggetto specificato.", back);
													return;
												}

												var rarity = rows[0].rarity;
												var nRarity = rarity;
												var item_id = rows[0].id;

												var price = 0;

												if (answer.text == "Rarit√† Superiore") {
													if (nRarity == "C") {
														nRarity = "NC";
														price = 1000;
													} else if (nRarity == "NC") {
														nRarity = "R";
														price = 1500;
													} else if (nRarity == "R") {
														nRarity = "UR";
														price = 2000;
													} else if (nRarity == "UR") {
														nRarity = "L";
														price = 2500;
													} else if (nRarity == "L") {
														nRarity = "E";
														price = 3000;
													} else {
														bot.sendMessage(message.chat.id, "Non puoi riciclare questa rarit√†!", back);
														return;
													}
												} else {
													if ((nRarity != "C") && (nRarity != "NC") && (nRarity != "R") && (nRarity != "UR") && (nRarity != "L") && (nRarity != "E") && (nRarity != "D")) {
														bot.sendMessage(message.chat.id, "Non puoi riciclare questa rarit√†!", back);
														return;
													}
												}

												if (money < price) {
													bot.sendMessage(message.chat.id, "Non hai abbastanza monete (" + price + " ¬ß)", back);
													return;
												}

												connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});

												delItem(player_id, item_id, 5);

												if ((nRarity == "D") && (item_id < 100)) {
													var stone_item_id = item_id-67;	// 1-6
													var prob = 100-(stone_item_id*15);
													var rand = Math.random()*100;

													if (prob >= rand) {
														bot.sendMessage(message.chat.id, "La macchina di riciclo si √® inceppata e non √® stato possibile produrre alcun oggetto!", kb2);
														return;
													}
												}

												setAchievement(player_id, 15, 1);

												connection.query('SELECT id, name FROM item WHERE rarity = "' + nRarity + '" AND name != "' + oggetto + '" AND craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
													if (err) throw err;
													var itemName = rows[0].name;
													addItem(player_id, rows[0].id);

													if ((nRarity == "D") && (item_id >= 68) && (item_id <= 73) && 
														((rows[0].id == 705) || (rows[0].id == 703) || (rows[0].id == 704) ||
														 (rows[0].id == 700) || (rows[0].id == 701) || (rows[0].id == 702) ||
														 (rows[0].id == 785) || (rows[0].id == 786)))
														setAchievement(player_id, 72, 1);

													bot.sendMessage(message.chat.id, "Hai riciclato gli oggetti e ricevuto *" + itemName + "* (" + nRarity + ")!", kb2);
												});
											});
										});
									};
								};
							});
						};
					});
				});
			};
		});
	});
});

bot.onText(/^vendi/i, function (message) {
	var oggetto = message.text.substring(message.text.indexOf(" ") + 1);

	if (oggetto.indexOf("(") != -1)
		oggetto = oggetto.substring(0, oggetto.indexOf("(") - 1);

	if (crazyMode == 1) {
		bot.sendMessage(message.chat.id, "Durante il weekend folle non puoi vendere oggetti", back);
		return;
	}

	if (message.text.toLowerCase() == "vendi")
		return;

	if (oggetto.trim() == "")
		return;

	var conf = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Conferma"], ["Torna all'emporio"]]
		}
	};
	var store = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna all'emporio"]]
		}
	};

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["1", "2", "3"], ["4", "5", "10"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, money, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if ((oggetto == "C") || (oggetto == "NC") || (oggetto == "R") || (oggetto == "UR") || (oggetto == "L") || (oggetto == "E")) {
			bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler vendere tutta la rarit√† " + oggetto + " alla met√† del valore?\nIl coupon non funziona in questa modalit√† di vendita", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('SELECT ROUND(SUM(item.value/2*inventory.quantity)) As total FROM inventory, item WHERE inventory.item_id = item.id AND item.rarity = "' + oggetto + '" AND player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Non hai oggetti da vendere!", store);
								return;
							}

							var total = rows[0].total;

							if (crazyMode == 1)
								total = total + (total * 10 / 100);

							if (total == null) {
								bot.sendMessage(message.chat.id, "Non hai oggetti da vendere!", store);
								return;
							}

							bot.sendMessage(message.chat.id, "Prezzo calcolato: " + formatNumber(total) + " ¬ß, continuare?", yesno).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text.toLowerCase() == "si") {
										connection.query('SELECT ROUND(SUM(item.value/2*inventory.quantity)) As total FROM inventory, item WHERE inventory.item_id = item.id AND item.rarity = "' + oggetto + '" AND player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
											if (err) throw err;
											if (Object.keys(rows).length == 0) {
												bot.sendMessage(message.chat.id, "Non hai oggetti di questa rarit√† da vendere!", store);
												return;
											}

											total = parseInt(rows[0].total);

											if (crazyMode == 1) {
												total = total * 3;
											}

											total = Math.round(total);

											if ((total == null) || (total == 0)) {
												bot.sendMessage(message.chat.id, "Non hai oggetti da vendere!", store);
												return;
											}

											connection.query('UPDATE inventory, item SET inventory.quantity = 0 WHERE inventory.item_id = item.id AND rarity = "' + oggetto + '" AND player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												connection.query('UPDATE player SET money = money + ' + total + ' WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai venduto tutta la rarit√† *" + oggetto + "* per *" + formatNumber(total) + "* ¬ß!", store);

													/*
													if (getItemCnt(player_id, 677) < 2) {
														var rand = Math.random()*100;
														if ((total >= 10000000) && (rand <= 25)) {
															addItem(player_id, 677);
															bot.sendMessage(message.chat.id, "Per la tua massiccia vendita il contrabbandiere ti regala un *Coupon*, valido dalla prossima offerta!", mark);
															console.log("Coupon consegnato per vendita rarit√†");
														}
													}
													*/
												});
											});
										});
									}
								}
							});
						});
					}
				}
			});
			return;
		}

		connection.query('SELECT item.id, quantity FROM item, inventory WHERE inventory.item_id = item.id AND item.name = "' + oggetto + '" AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Oggetto non valido.", store);
				return;
			}

			var item_id = rows[0].id;

			bot.sendMessage(message.chat.id, "Seleziona la quantit√† di " + oggetto + " da vendere, ne possiedi " + formatNumber(rows[0].quantity), kb).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					var quantity = parseInt(answer.text);
					if ((quantity <= 0) || (isNaN(quantity)) || (re.test(quantity) == false)) {
						bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
						return;
					}
					connection.query('SELECT id, holiday, money, account_id, mission_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var banReason = isBanned(rows[0].account_id);
						if (banReason != null) {
							var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
							bot.sendMessage(message.chat.id, text, mark);
							return;
						}
						if (rows[0].holiday == 1) {
							bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
							return;
						}

						var player_id = rows[0].id;
						var money = parseInt(rows[0].money);

						connection.query('SELECT item.name, item.value, inventory.quantity FROM item, inventory WHERE inventory.item_id = item.id AND item.id = ' + item_id + ' AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", store);
								return;
							}
							if (rows[0].quantity < quantity) {
								bot.sendMessage(message.chat.id, "Non hai abbastanza oggetti", store);
								return;
							}

							var itemName = rows[0].name;
							var singleValue = Math.round(parseInt(rows[0].value) / 2);
							var value = singleValue * quantity;

							if (crazyMode == 1)
								value = value + (value * 10 / 100);

							var bonus = ""
							/*
							if (getItemCnt(player_id, 677) > 0) {
								value = value + Math.round(value / 3);
								bonus = ", aumentati grazie al Coupon";
								var rand = Math.random() * 100;
								if (rand < 20) {
									bonus += " (Scaduto)";
									delItem(player_id, 677, 1);
								}
							}
							*/

							setAchievement(player_id, 7, value);

							var newmoney = money + value;

							connection.query('UPDATE player SET money = ' + newmoney + ' WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								var d = new Date();
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
								for (var i = 0; i < quantity; i++) {
									connection.query('INSERT INTO market_direct_history(item_id, price, time, from_id, type) VALUES (' + item_id + ',' + singleValue + ',"' + long_date + '",' + player_id + ',3)', function (err, rows, fields) {
										if (err) throw err;
									});
								};

								delItem(player_id, item_id, quantity);
								bot.sendMessage(message.chat.id, "Hai venduto " + quantity + "x " + itemName + " per *" + formatNumber(value) + " ¬ß*" + bonus, store);
							});
						});
					});
				};
			});
		});
	});
});

bot.onText(/compra/i, function (message) {
	connection.query('SELECT holiday, money, id, moon_coin FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var money = rows[0].money;
		var player_id = rows[0].id;
		var moon_coin = rows[0].moon_coin;

		var oggetto = message.text.substring(message.text.indexOf(" ") + 1);
		var price_drop = 0;
		var n = new Date().getDay()
		var n2 = new Date().getDate();

		if (n == 0) {
			if (n2 <= 7)
				sconto = 20;
			price_drop = 1;
		}

		if (sconto_evento > 0) {
			sconto = sconto_evento;
			price_drop = 1;
		}

		if ((oggetto == "") || (oggetto == " "))
			return;

		var store = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna all'emporio"], ["Torna al menu"]]
			}
		};

		var storeYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Si", "Torna all'emporio"], ["Torna al menu"]]
			}
		};

		var chest = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Vai agli scrigni", "Torna all'emporio"], ["Torna al menu"]]
			}
		};

		var pos = oggetto.indexOf("(");
		if (pos != -1)
			oggetto = oggetto.substr(0, pos - 1);

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 7', function (err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0) {
				abBonus = rows[0].ability_level * rows[0].val;

				var rand = Math.random() * 100;
				if (rand < abBonus)
					abBonus = 1;
			}

			if (oggetto.indexOf("Pacchetto") != -1) {
				var package = 5;

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["1"], ["2"], ["5"], ["10"], ["20"], ["50"], ["Torna all'emporio"], ["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Seleziona la quantit√† di pacchetti da acquistare (contengono 5 figurine), ogni pacchetto costa " + package + " üåï", kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						var quantity = answer.text;
						if ((quantity == "Torna al menu") || (quantity == "Torna all'emporio"))
							return;
						if ((quantity < 1) || (re.test(quantity) == false)) {
							bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
							return;
						}

						var price = package*quantity;

						connection.query('SELECT moon_coin FROM player WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							if (rows[0].moon_coin < price) {
								bot.sendMessage(message.chat.id, "Non hai abbastanza üåï, ne servono " + price, store);
								return;
							}

							var card_text = "";
							connection.query('SELECT id, name, rarity FROM card_list ORDER BY RAND()', function (err, rows, fields) {
								if (err) throw err;

								var card_quantity = quantity*5;

								for (i = 0; i < card_quantity; i++) {
									var inv = connection_sync.query('SELECT 1 FROM card_inventory WHERE card_id = ' + rows[i].id + ' AND player_id = ' + player_id);
									if (Object.keys(inv).length == 0) {
										connection.query('INSERT INTO card_inventory (player_id, card_id) VALUES (' + player_id + ', ' + rows[i].id + ')', function (err, rows, fields) {
											if (err) throw err;
										});
									} else {
										connection.query('UPDATE card_inventory SET quantity = quantity + 1 WHERE player_id = ' + player_id + ' AND card_id = ' + rows[i].id, function (err, rows, fields) {
											if (err) throw err;
										});
									}

									card_text += "> " + rows[i].name + " (" + rows[i].rarity + ")\n";
								}

								connection.query('UPDATE player SET moon_coin = moon_coin-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									bot.sendMessage(message.chat.id, "Acquisto completato con successo! Hai speso " + formatNumber(price) + " üåï ed hai ottenuto:\n" + card_text, chest);
								});
							});
						});
					}
				});
			} else if (oggetto.indexOf("Scrigno") != -1) {
				connection.query('SELECT value, id FROM chest WHERE name = "' + oggetto + '" AND id < 7', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Scrigno non valido.", store);
						return;
					}
					var chest_id = rows[0].id;

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["1"], ["10"], ["100"], ["200"], ["500"], ["1000"], ["Torna all'emporio"], ["Torna al menu"]]
						}
					};

					var price_view = rows[0].value;
					if (price_drop == 1)
						price_view -= Math.round((rows[0].value / 100) * sconto);

					bot.sendMessage(message.chat.id, "Seleziona la quantit√† di scrigni da acquistare, ogni scrigno costa " + formatNumber(price_view) + " ¬ß", kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							var quantity = answer.text;
							if ((quantity == "Torna al menu") || (quantity == "Torna all'emporio"))
								return;
							if ((quantity < 1) || (re.test(quantity) == false)) {
								bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
								return;
							}

							var price = rows[0].value;

							if (price_drop == 1)
								price -= Math.round((rows[0].value / 100) * sconto);

							quantity = Math.floor(quantity);
							price = price * parseInt(quantity);

							connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (rows[0].money - price < 0) {
									bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione (" + formatNumber(rows[0].money) + "/" + formatNumber(price) + ")", store);
									return;
								}

								var bonus_text = "";
								if (abBonus == 1) {
									price = Math.round(price / 2);
									bonus_text = " dimezzati grazie al tuo talento!";
								}

								setAchievement(player_id, 14, quantity, chest_id);

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									addChest(player_id, chest_id, quantity);
									bot.sendMessage(message.chat.id, "Acquisto completato con successo! Hai speso " + formatNumber(price) + " ¬ß" + bonus_text, chest);
								});
							});
						};
					});
				});
			} else if (oggetto.indexOf("Pozione") != -1) {
				if (crazyMode == 1) {
					bot.sendMessage(message.chat.id, "Non puoi acquistare pozioni durante il weekend folle", store);
					return;
				}
				connection.query('SELECT id FROM item WHERE name = "' + oggetto + '"', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Pozione non valida.", store);
						return;
					}
					var potion_id = rows[0].id;

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["1"], ["2"], ["3"], ["4"], ["5"], ["10"], ["Torna all'emporio"], ["Torna al menu"]]
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona la quantit√† di pozioni da acquistare", kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							var quantity = answer.text;
							if ((quantity == "Torna al menu") || (quantity == "Torna all'emporio"))
								return;
							if ((quantity < 1) || (re.test(quantity) == false)) {
								bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
								return;
							}

							quantity = parseInt(quantity);
							quantity = Math.floor(quantity);

							var value = 0;
							if (potion_id == "92")
								value = 1500;
							else if (potion_id == "93")
								value = 2500;
							else if (potion_id == "94")
								value = 5000;
							else {
								bot.sendMessage(message.chat.id, "Errore sconosciuto", store);
								return;
							}

							var price = parseInt(value);

							if (price_drop == 1)
								price -= Math.round(value / 100) * sconto;

							price = price * quantity;
							connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (rows[0].money - price < 0) {
									bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione (" + formatNumber(rows[0].money) + "/" + formatNumber(price) + ")", store);
									return;
								}

								var bonus_text = "";
								if (abBonus == 1) {
									price = Math.round(price / 2);
									bonus_text = " dimezzati grazie al tuo talento!";
								}

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									addItem(player_id, potion_id, quantity);
									bot.sendMessage(message.chat.id, "Acquisto completato con successo! Hai speso " + formatNumber(price) + " ¬ß" + bonus_text, store);
								});
							});
						};
					});
				});
			} else if ((oggetto.toLowerCase().indexOf("piuma di fenice") != -1) || (oggetto.toLowerCase().indexOf("cenere di fenice") != -1)) {
				if (crazyMode == 1) {
					bot.sendMessage(message.chat.id, "Non puoi acquistare piume o ceneri durante il weekend folle", store);
					return;
				}
				connection.query('SELECT id, name FROM item WHERE name = "' + oggetto + '"', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(message.chat.id, "Oggetto non valido.", store);
						return;
					}
					var item_id = rows[0].id;

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["1"], ["2"], ["3"], ["4"], ["5"], ["10"], ["Torna all'emporio"], ["Torna al menu"]]
						}
					};

					var name = rows[0].name;
					bot.sendMessage(message.chat.id, "Seleziona la quantit√† di " + name + " da acquistare", kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							var quantity = answer.text;
							if ((quantity == "Torna al menu") || (quantity == "Torna all'emporio"))
								return;
							if ((quantity < 1) || (re.test(quantity) == false)) {
								bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
								return;
							}

							quantity = parseInt(quantity);
							quantity = Math.floor(quantity);

							var value = 0;
							if (name == "Piuma di Fenice")
								value = 10000;
							else if (name == "Cenere di Fenice")
								value = 25000;

							var price = parseInt(value);

							if (price_drop == 1)
								price -= Math.round(value / 100) * sconto;

							price = price * quantity;

							connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (rows[0].money - price < 0) {
									bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione (" + formatNumber(rows[0].money) + "/" + formatNumber(price) + ")", store);
									return;
								}

								var bonus_text = "";
								if (abBonus == 1) {
									price = Math.round(price / 2);
									bonus_text = " dimezzati grazie al tuo talento!";
								}

								setAchievement(player_id, 17, quantity);

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									addItem(player_id, item_id, quantity);
									bot.sendMessage(message.chat.id, "Acquisto di " + quantity + "x " + name + " completato con successo! Hai speso " + formatNumber(price) + " ¬ß" + bonus_text, store);
								});
							});
						};
					});
				});
			} else if (oggetto.indexOf("Gemma") != -1) {
				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["1"], ["2"], ["3"], ["4"], ["5"], ["10"], ["Torna all'emporio"], ["Torna al menu"]]
					}
				};

				if (sconto_evento == 0) {
					var d = new Date();
					if (d.getDay != 3) {
						if ((d.getHours < 9) || (d.getHours > 12)) {
							bot.sendMessage(message.chat.id, "Le üíé possono essere acquistate solamente il mercoled√¨ mattina (9-12)", store);
							return;
						}
					}
				}

				var price_gem = 300000;

				var price_view = price_gem;
				if ((price_drop == 1) && (sconto_evento > 0))
					price_view -= Math.round((rows[0].value / 100) * sconto);

				bot.sendMessage(message.chat.id, "Seleziona la quantit√† di üíé da acquistare, ogni üíé costa " + formatNumber(price_view) + " ¬ß", kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						var quantity = answer.text;
						if ((quantity == "Torna al menu") || (quantity == "Torna all'emporio"))
							return;
						if ((quantity < 1) || (re.test(quantity) == false)) {
							bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
							return;
						}

						quantity = parseInt(quantity);
						quantity = Math.floor(quantity);

						bot.sendMessage(message.chat.id, "Sei sicuro di voler acquistare " + quantity + " üíé?", storeYesNo).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase() == "si") {
									var value = price_gem;
									var price = parseInt(value);

									if ((price_drop == 1) && (sconto_evento > 0))
										price -= Math.round(value / 100) * sconto;

									price = price * quantity;

									connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (rows[0].money - price < 0) {
											bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione (" + formatNumber(rows[0].money) + "/" + formatNumber(price) + ")", store);
											return;
										}

										var bonus_text = "";
										if (abBonus == 1) {
											price = Math.round(price / 2);
											bonus_text = " dimezzati grazie al tuo talento!";
										}

										setAchievement(player_id, 16, quantity);

										connection.query('UPDATE player SET money = money-' + price + ', gems = gems + ' + quantity + ' WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Acquisto completato con successo! Hai speso " + formatNumber(price) + " ¬ß" + bonus_text, store);
											//console.log("Acquisto " + quantity + " gemme per " + price + " per user " + player_id);
										});
									});
								}
							}
						});
					};
				});
			}
		});
	});
});

bot.onText(/^Artefatti|Torna agli artefatti/i, function (message) {

	var artifacts = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Artefatto Fiammeggiante üî•"], ["Artefatto Elettrico ‚ö°Ô∏è"], ["Artefatto Tempesta ‚õà"], ["Artefatto Buio üåë"], ["Artefatto Divinatorio üîÆ"], ["Artefatto Ventoso üå™"], ["Torna al menu"]]
		}
	};

	var get = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Ottieni Artefatto üî±"], ["Torna agli artefatti"], ["Torna al menu"]]
		}
	};

	var rBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna agli artefatti"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT account_id, id, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;

		if (rows[0].reborn < 4) {
			bot.sendMessage(message.chat.id, "Per accedere agli artefatti devi aver raggiunto almeno la Rinascita 3", back);
			return;
		}

		connection.query('SELECT COUNT(id) As cnt FROM artifacts WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (rows[0].cnt == 6) {
				bot.sendMessage(message.chat.id, "Hai ottenuto tutti gli Artefatti!", back);
				return;
			}

			bot.sendMessage(message.chat.id, "Gli Artefatti üî±\nSono strumenti di incredibile *potenza*, premio degli avventurieri piu tenaci.\nPer ambire a questi riconoscimenti sar√† necessario dimostrare le proprie *abilit√†* nel commercio, il proprio coraggio nell'esplorazione delle terre remote, la propria dedizione alle nobili arti del combattimento, della truffa e dell'allevamento di draghi.\n_Pochi sono i guerrieri che possono vantarsi d'una collezione completa, vuoi aspirare ad ottenerne uno?_", artifacts).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.indexOf("Artefatto Fiammeggiante") != -1) {

						var req1 = "";
						var req2 = "";

						connection.query('SELECT money, rank FROM player WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							var money = rows[0].money;
							var rank = rows[0].rank;

							if (money >= 5000000)
								req2 = " ‚úÖ";

							if (rank >= 85)
								req1 = " ‚úÖ";

							bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi:\n" +
											"> Aver raggiunto almeno il rango dungeon 85" + req1 + "\n" +
											"> Possedere almeno 5.000.000 ¬ß (verranno consumati)" + req2, get).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text.indexOf("Ottieni Artefatto") != -1) {
										connection.query('SELECT id FROM artifacts WHERE item_id = 614 AND player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length > 0) {
												bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
												return;
											}

											connection.query('SELECT money, rank FROM player WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;

												var money = rows[0].money;
												var rank = rows[0].rank;

												if (money < 5000000) {
													bot.sendMessage(message.chat.id, "Non hai abbastanza monete (" + formatNumber(money) + "/5.000.000)", back);
													return;
												}

												if (rank < 85) {
													bot.sendMessage(message.chat.id, "Non hai abbastanza punti rango (" + rank + "/85)", back);
													return;
												}

												connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ', 614)', function (err, rows, fields) {
													if (err) throw err;
													connection.query('UPDATE player SET money = money - ' + 5000000 + ' WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														addItem(player_id, 614);
														bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Fiammeggiante*!", back);
													});
												});
											});
										});
									}
								}
							});
						});
					} else if (answer.text.indexOf("Artefatto Elettrico") != -1) {
						connection.query('SELECT id FROM artifacts WHERE item_id = 614 AND player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Fiammeggiante*!", rBack);
								return;
							}

							var req1 = "";
							var req2 = "";
							var req3 = "";

							connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if ((Object.keys(rows).length > 0) && (rows[0].level >= 100))
									req1 = " ‚úÖ";

								connection.query('SELECT money, craft_count FROM player WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									var money = rows[0].money;
									var craft_count = rows[0].craft_count;

									if (money >= 10000000)
										req2 = " ‚úÖ";

									if (craft_count >= 20000)
										req3 = " ‚úÖ";

									bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi:\n" +
													"> Aver ottenuto almeno 20.000 punti creazione" + req3 + "\n" +
													"> Aver portato il drago almeno al livello 100" + req1 + "\n" +
													"> Possedere almeno 10.000.000 ¬ß (verranno consumati)" + req2, get).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.indexOf("Ottieni Artefatto") != -1) {
												connection.query('SELECT id FROM artifacts WHERE item_id = 615 AND player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
														return;
													}

													connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														if ((Object.keys(rows).length > 0) && (rows[0].level < 100)) {
															bot.sendMessage(message.chat.id, "Il tuo drago non √® ad un livello abbastanza alto", back);
															return;
														}

														connection.query('SELECT money, craft_count FROM player WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															var money = rows[0].money;
															var craft_count = rows[0].craft_count;

															if (money < 10000000) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza monete (" + formatNumber(money) + "/10.000.000)", back);
																return;
															}

															if (craft_count < 20000) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza punti creazione (" + craft_count + "/20.000)", back);
																return;
															}

															connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ', 615)', function (err, rows, fields) {
																if (err) throw err;
																connection.query('UPDATE player SET money = money - ' + 10000000 + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	addItem(player_id, 615);
																	bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Elettrico*!", back);
																});
															});
														});
													});
												});
											}
										}
									});
								});
							});
						});
					} else if (answer.text.indexOf("Artefatto Tempesta") != -1) {
						connection.query('SELECT id FROM artifacts WHERE item_id = 615 AND player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Elettrico*!", rBack);
								return;
							}

							var req1 = "";
							var req2 = "";
							var req3 = "";

							connection.query('SELECT COUNT(id) As num FROM ability WHERE player_id = ' + player_id + ' AND ability_level = 10', function (err, rows, fields) {
								if (err) throw err;

								if (rows[0].num >= 14)
									req1 = " ‚úÖ";

								connection.query('SELECT achievement_count, gems FROM player WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (rows[0].gems >= 50)
										req2 = " ‚úÖ";

									if (rows[0].achievement_count >= 200)
										req3 = " ‚úÖ";

									bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi:\n" +
													"> Portare al livello 10 almeno 14 Talenti" + req1 + "\n" +
													"> Possedere almeno 50 üíé (verranno consumate)" + req2 + "\n" +
													"> Aver raggiunto almeno 200 Imprese giornaliere completate" + req3, get).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.indexOf("Ottieni Artefatto") != -1) {
												connection.query('SELECT id FROM artifacts WHERE item_id = 644 AND player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
														return;
													}

													connection.query('SELECT COUNT(id) As num FROM ability WHERE player_id = ' + player_id + ' AND ability_level = 10', function (err, rows, fields) {
														if (err) throw err;

														if (rows[0].num < 14) {
															bot.sendMessage(message.chat.id, "I Talenti non sono ancora ad un livello sufficiente", back);
															return;
														}

														connection.query('SELECT achievement_count, gems FROM player WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															if (rows[0].achievement_count < 200) {
																bot.sendMessage(message.chat.id, "Non hai completato abbastanza imprese giornaliere (" + rows[0].achievement_count + "/200)", back);
																return;
															}

															if (rows[0].gems < 50) {
																bot.sendMessage(message.chat.id, "Non hai abbastanza üíé (" + rows[0].gems + "/50)", back);
																return;
															}

															connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ', 644)', function (err, rows, fields) {
																if (err) throw err;
																connection.query('UPDATE player SET gems = gems - ' + 50 + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	addItem(player_id, 644);
																	bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Tempesta*!", back);
																});
															});
														});
													});
												});
											}
										}
									});
								});
							});
						});
					} else if (answer.text.indexOf("Artefatto Buio") != -1) {
						connection.query('SELECT id FROM artifacts WHERE item_id = 644 AND player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Tempesta*!", rBack);
								return;
							}

							var req1 = "";
							var req2 = "";
							var req3 = "";

							connection.query('SELECT mission_count FROM player WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (rows[0].mission_count >= 2000)
									req1 = " ‚úÖ";

								connection.query('SELECT from_id, COUNT(from_id) As cnt FROM heist_history WHERE from_id = ' + player_id + ' AND fail = 0', function (err, rows, fields) {
									if (err) throw err;

									var cnt = 0;
									cnt = parseInt(rows[0].cnt);

									connection.query('SELECT to_id, COUNT(to_id) As cnt FROM heist_history WHERE to_id = ' + player_id + ' AND fail > 0', function (err, rows, fields) {
										if (err) throw err;

										cnt = cnt + parseInt(rows[0].cnt);
										if (cnt >= 500)
											req2 = " ‚úÖ";

										if (getItemCnt(player_id, 646) >= 2000)
											req3 = " ‚úÖ";

										bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi:\n" +
														"> Aver completato almeno 2.000 missioni" + req1 + "\n" +
														"> Aver vinto almeno 500 ispezioni (effettuate o respinte)" + req2 + "\n" +
														"> Possedere almeno 2.000 Polvere (S) (verr√† consumata)" + req3, get).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.indexOf("Ottieni Artefatto") != -1) {
													connection.query('SELECT id FROM artifacts WHERE item_id = 648 AND player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														if (Object.keys(rows).length > 0) {
															bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
															return;
														}

														connection.query('SELECT mission_count FROM player WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															if (rows[0].mission_count < 2000) {
																bot.sendMessage(message.chat.id, "Non hai completato abbastanza missioni (" + rows[0].mission_count + "/2000)", back);
																return;
															}

															connection.query('SELECT from_id, COUNT(from_id) As cnt FROM heist_history WHERE from_id = ' + player_id + ' AND fail = 0', function (err, rows, fields) {
																if (err) throw err;

																var cnt = 0;
																cnt = parseInt(rows[0].cnt);

																connection.query('SELECT to_id, COUNT(to_id) As cnt FROM heist_history WHERE to_id = ' + player_id + ' AND fail > 0', function (err, rows, fields) {
																	if (err) throw err;

																	cnt = cnt + parseInt(rows[0].cnt);
																	if (cnt < 500) {
																		bot.sendMessage(message.chat.id, "Non hai vinto abbastanza ispezioni (" + cnt + "/500)", back);
																		return;
																	}

																	if (getItemCnt(player_id, 646) < 2000) {
																		bot.sendMessage(message.chat.id, "Non hai raccolto abbastanza polvere (" + rows[0].qnt + "/2000)", back);
																		return;
																	}

																	connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ', 648)', function (err, rows, fields) {
																		if (err) throw err;
																		delItem(player_id, 646, 2000);
																		addItem(player_id, 648);
																		bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Buio*!", back);
																	});
																});
															});
														});
													});
												}
											}
										});
									});
								});
							});
						});
					} else if (answer.text.indexOf("Artefatto Divinatorio") != -1) {
						connection.query('SELECT id FROM artifacts WHERE item_id = 648 AND player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Buio*!", rBack);
								return;
							}

							var req1 = "";
							var req2 = "";
							var req3 = "";
							var req4 = "";
							var req5 = "";
							var req6 = "";

							connection.query('SELECT exp, rank, kill_streak_ok, global_event, mission_team_count FROM player WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (Math.floor(rows[0].exp / 10) >= 1000)
									req1 = " ‚úÖ";

								if (rows[0].rank >= 200)
									req2 = " ‚úÖ";

								if (rows[0].mission_team_count >= 300)
									req3 = " ‚úÖ";

								if (rows[0].kill_streak_ok == 1)
									req4 = " ‚úÖ";

								if (rows[0].global_event >= 5)
									req5 = " ‚úÖ";

								connection.query('SELECT total_cnt FROM merchant_offer WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (rows[0].total_cnt >= 1000)
										req6 = " ‚úÖ";

									bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi:\n" +
													"> Aver raggiunto il livello 1.000" + req1 + "\n" +
													"> Aver raggiunto almeno il rango dungeon 200" + req2 + "\n" +
													"> Aver completato almeno 300 incarichi" + req3 + "\n" +
													"> Aver completato almeno 3 assalti nello stesso team (senza cambiarlo)" + req4 + "\n" +
													"> Aver venduto almeno 1.000 oggetti al Contrabbandiere" + req6 + "\n" +
													"> Aver partecipato attivamente ad almeno 5 imprese globali" + req5 + "\n\n" +
													"L'ottenimento di questo artefatto sbloccher√† nuove funzionalit√†!", get).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.indexOf("Ottieni Artefatto") != -1) {
												connection.query('SELECT id FROM artifacts WHERE item_id = 675 AND player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
														return;
													}

													connection.query('SELECT exp, rank, kill_streak_ok, global_event, mission_team_count FROM player WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														if (Math.floor(rows[0].exp / 10) < 1000) {
															bot.sendMessage(message.chat.id, "Non hai raggiunto il livello necessario (" + Math.floor(rows[0].exp / 10) + "/1000)", back);
															return;
														}

														if (rows[0].rank < 200) {
															bot.sendMessage(message.chat.id, "Non hai raggiunto il rango necessario (" + rows[0].rank + "/200)", back);
															return;
														}

														if (rows[0].mission_team_count < 300) {
															bot.sendMessage(message.chat.id, "Non hai raggiunto gli incarichi necessari (" + rows[0].mission_team_count + "/300)", back);
															return;
														}

														if (rows[0].kill_streak_ok == 0) {
															bot.sendMessage(message.chat.id, "Non hai completato almeno 3 assalti nello stesso team", back);
															return;
														}

														if (rows[0].global_event < 5) {
															bot.sendMessage(message.chat.id, "Non hai aiutato a completare abbastanza imprese globali (" + rows[0].global_event + "/5)", back);
															return;
														}

														connection.query('SELECT total_cnt FROM merchant_offer WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															if (rows[0].total_cnt < 1000) {
																bot.sendMessage(message.chat.id, "Non hai completato raggiunto le offerte contrabbandiere necessarie (" + rows[0].total_cnt + "/1000)", back);
																return;
															}

															connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ', 675)', function (err, rows, fields) {
																if (err) throw err;
																addItem(player_id, 675);
																bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Divinatorio*!\n\nHai sbloccato i Potenziamenti Flaridion!", back);
																console.log(message.from.username + " Artefatto 5")
															});
														});
													});
												});
											}
										}
									});
								});
							});
						});
					} else if (answer.text.indexOf("Artefatto Ventoso") != -1) {
						connection.query('SELECT id FROM artifacts WHERE item_id = 675 AND player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Divinatorio*!", rBack);
								return;
							}

							var req1 = "";
							var req2 = "";
							var req3 = "";
							var req4 = "";
							var req5 = "";
							var req6 = "";

							connection.query('SELECT achievement_count_all, global_event, power_pnt, rank, top_win FROM player WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (rows[0].achievement_count_all >= 300)
									req1 = " ‚úÖ";

								if (rows[0].global_event >= 15)
									req2 = " ‚úÖ";

								if (rows[0].power_pnt >= 300)
									req3 = " ‚úÖ";

								if (rows[0].rank >= 500)
									req4 = " ‚úÖ";

								if (rows[0].top_rank_count >= 500)
									req5 = " ‚úÖ";

								connection.query('SELECT COUNT(id) As cnt FROM card_inventory WHERE quantity > 0 AND player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (rows[0].cnt >= 100)
										req6 = " ‚úÖ";

									bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi:\n" +
													"> Aver completato 300 triplette di imprese giornaliere" + req1 + "\n" +
													"> Aver partecipato attivamente ad almeno 15 imprese globali" + req2 + "\n" +
													"> Possedere almeno 300 Flaridion (verranno consumati)" + req3 + "\n" +
													"> Aver raggiunto almeno il rango dungeon 500" + req4 + "\n" +
													"> Aver raggiunto in totale almeno 500 √ê nelle Vette (vedi sotto)" + req5 + "\n" +
													"> Possedere almeno 100 Figurine diverse (ne verr√† consumata 1 per tipo partendo dalla rarit√† pi√π bassa)" + req6 + "\n" +
													"L'ottenimento di questo artefatto sbloccher√† nuove funzionalit√†!\n\n" +
													"_Verranno conteggiate di volta in volta le √ê che si hanno alla chiusura delle Vette + 10 per ogni Monte raggiunto_", get).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.indexOf("Ottieni Artefatto") != -1) {
												connection.query('SELECT id FROM artifacts WHERE item_id = 788 AND player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
														return;
													}

													connection.query('SELECT achievement_count_all, global_event, power_pnt, rank, top_win, top_rank_count FROM player WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														if (rows[0].achievement_count_all < 300) {
															bot.sendMessage(message.chat.id, "Non hai raggiunto le triplette necessarie (" + rows[0].achievement_count_all + "/300)", back);
															return;
														}

														if (rows[0].global_event < 15) {
															bot.sendMessage(message.chat.id, "Non hai aiutato a completare abbastanza imprese globali (" + rows[0].global_event + "/15)", back);
															return;
														}

														if (rows[0].power_pnt < 300) {
															bot.sendMessage(message.chat.id, "Non possiedi abbastanza Flaridion (" + rows[0].power_pnt + "/300)", back);
															return;
														}

														if (rows[0].rank < 500) {
															bot.sendMessage(message.chat.id, "Non hai raggiunto il rango necessario (" + rows[0].rank + "/500)", back);
															return;
														}

														if (rows[0].top_rank_count < 500) {
															bot.sendMessage(message.chat.id, "Non hai raggiunto le √ê necessarie nelle Vette (" + rows[0].top_rank_count + "/500)", back);
															return;
														}

														connection.query('SELECT COUNT(id) As cnt FROM card_inventory WHERE quantity > 0 AND player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															if (rows[0].cnt < 100) {
																bot.sendMessage(message.chat.id, "Non possiedi abbastanza Figurine diverse (" + rows[0].cnt + "/100)", back);
																return;
															}

															connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ', 788)', function (err, rows, fields) {
																if (err) throw err;
																connection.query('UPDATE player SET power_pnt = power_pnt - ' + 300 + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	connection.query('UPDATE card_inventory SET quantity = quantity-1 WHERE id IN (SELECT * FROM (SELECT I.id FROM card_inventory I, card_list L WHERE I.card_id = L.id AND quantity > 0 AND player_id = ' + player_id + ' ORDER BY rarity LIMIT 100) As t)', function (err, rows, fields) {
																		if (err) throw err;
																		addItem(player_id, 788);
																		bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Ventoso*!\n\nHai sbloccato la Rinascita 5!", back);
																		console.log(message.from.username + " Artefatto 6");
																	});
																});
															});
														});
													});
												});
											}
										}
									});
								});
							});
						});
					}
				}
			});
		});
	});
});

bot.onText(/^Biblioteca|Torna alla biblioteca/i, function (message) {
	connection.query('SELECT id, lore_mission, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var lore_mission = rows[0].lore_mission;
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;

		var textArr = ["Ottobre, quieta folata.", "Novembre, brezza vivace.", "Dicembre, fredda bonaccia.", "Gennaio, vento propizio.", "Nelle sale che vi si formano si intravedono macabri tavoli pieni.", "In Biblioteca, erra per file sempiterne.", "D√©j√† vu.", "Indaga oltre.", "Un folle analfabeta si sente deloooso.", "La Biblioteca √® contraria al 'liud' draconico.", "Un'oculata ricerca sul colore blu presenta una copertina di colore rosso.", "A Un Nuovo Inizio sorge in albore.", "La Sala Holden √® gremita di scrittori.", "Ottobre √® trino."];

		var rand = Math.round(Math.random() * (Object.keys(textArr).length - 1));

		connection.query('SELECT name, type FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var dragon_name = "Furia Infernale";
			if (Object.keys(rows).length > 0)
				dragon_name = rows[0].name + " " + rows[0].type;

			connection.query('SELECT id, title FROM library ORDER BY view_order ASC', function (err, rows, fields) {
				if (err) throw err;

				var iKeys = [];
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if ((lore_mission < 3) && ((rows[i].id == 4) || (rows[i].id == 5) || (rows[i].id == 19)))
						continue;
					if ((lore_mission < 2) && ((rows[i].id == 15) || (rows[i].id == 16) || (rows[i].id == 17)))
						continue;
					if ((lore_mission >= 2) && (rows[i].id == 18))
						continue;
					if (rows[i].id == 7) // enciclopedia delle armi r
						continue;
					iKeys.push([rows[i].title]);
				}

				iKeys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: iKeys
					}
				};

				var kbBack = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Torna alla Biblioteca"], ["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, textArr[rand], kb).then(function () {
					answerCallbacks[message.chat.id] = function (answer) {
						if (answer.text == "Torna al menu")
							return;
						connection.query('SELECT id, title, text, alt_text FROM library WHERE title = "' + answer.text + '"', function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length > 0) {
								var text = "";
								var alt = 0;

								if ((rows[0].id == 18) && (lore_mission < 2))
									alt = 1;
								if ((rows[0].id == 3) && (lore_mission < 3))
									alt = 1;
								if ((rows[0].id == 19) && (lore_mission < 4))
									alt = 1;
								if ((rows[0].id == 12) && ((exp < 100) && (reborn == 1)))
									alt = 1;

								if ((lore_mission < 3) && ((rows[0].id == 4) || (rows[0].id == 5))) {
									bot.sendMessage(message.chat.id, "Non consultabile", kbBack);
									return;
								}
								if ((lore_mission < 2) && ((rows[0].id == 15) || (rows[0].id == 16) || (rows[0].id == 17))) {
									bot.sendMessage(message.chat.id, "Non consultabile", kbBack);
									return;
								}
								if ((lore_mission >= 2) && (rows[0].id == 18)) {
									bot.sendMessage(message.chat.id, "Non consultabile", kbBack);
									return;
								}

								if (rows[0].text == null) {
									alt = 1;
								}
								if (alt == 1) {
									text = rows[0].alt_text;
									title += " (Bloccata)";
								} else
									text = rows[0].text;

								text = text.replace(new RegExp("%player%", "g"), message.from.username);
								text = text.replace(new RegExp("%dragon%", "g"), dragon_name);

								var title = rows[0].title;

								if (Object.keys(text).length > 4000) {
									var text1 = "";
									var text2 = "";
									text1 = text.substr(0, 4000);
									text2 = text.substr(4000, 8000);

									bot.sendMessage(message.chat.id, "<b>" + title + "</b>\n\n" + text1, html);
									setTimeout(function () {
										bot.sendMessage(message.chat.id, text2, kbBack);
									}, 500);
								} else
									bot.sendMessage(message.chat.id, "<b>" + title + "</b>\n\n" + text, kbBack);
							}
						});
					};
				});
			});
		});
	});
});

bot.onText(/^Edificio/i, function (message) {
	connection.query('SELECT id, lore_page FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var next = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Indaga oltre"], ["Torna al menu"]]
			}
		};

		var prev = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["D√©j√† vu"], ["Torna al menu"]]
			}
		};

		var house = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Edificio"], ["Torna al menu"]]
			}
		};

		var page = rows[0].lore_page;
		var player_id = rows[0].id;

		if (page == 0) {
			bot.sendMessage(message.chat.id, "Vi √®, in lontananza, un edificio che non avevi mai scorto prima di adesso; una strana forza magica ti attrae verso quel posto. Ti ci dirigi, per scoprire i segreti celati dietro a tale edificio.\n" +
							"Esso √® fatto da Assi di Legno Lavorato, disposte in modo asimmetrico, e dai buchi che vi si formano si intravedono macabri tavoli vuoti. La porta √® barricata con altre Assi di Legno, e di fronte a essa vi √® affisso un cartello; la scritta, per√≤, √® completamente erosa dal tempo, e vi si legge una sola parola: Lore.\n" +
							"L'insieme di questi aspetti ti fa pienamente comprendere che quest'edificio sia abbandonato da molti anni, e nonostante il tuo istinto d'avventuriero ti dica che il suddetto posto celi dei macabri misteri, decidi di non indagare oltre.", next).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text == "Indaga oltre") {
						connection.query('UPDATE player SET lore_page = 1 WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "...", house);
						});
					}
				}
			});
		} else { //Importante che l'ultima sia else e non abbia update
			bot.sendMessage(message.chat.id, "Un sol monito, pregno di ignoto, ne sovrasta la fragile entrata:\n\n'In missione, erra per effimeri sempiterni'.", prev).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text == "D√©j√† vu") {
						connection.query('UPDATE player SET lore_page = 0 WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "...", house);
						});
					}
				};
			});
		}

	});
});

bot.onText(/^Albero Talenti$|Albero/i, function (message) {

	/*
	if (message.from.id != 20471035) {
		bot.sendMessage(message.chat.id, "Manutenzione in corso, riprova tra poco", back);
		return;
	}
	*/

	var next = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Albero Talenti"], ["Torna al menu"]]
		}
	};

	var prev = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna all'Albero"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT account_id, id, money, gems, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var my_money = rows[0].money;
		var my_gems = rows[0].gems;
		var iKeys = [];

		if ((Math.floor(rows[0].exp / 10) < 50) && (rows[0].reborn == 1)) {
			bot.sendMessage(message.chat.id, "Devi aver raggiunto almeno il livello 50 per accedere a questa funzionalit√†", back);
			return;
		}

		connection.query('SELECT ability.ability_id, ability.ability_level, ability_list.name, ability_list.val, ability_list.det FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' ORDER BY ability_list.name', function (err, rows, fields) {
			if (err) throw err;

			var ablist = "";
			var abarr = [];
			var abname = [];
			var completed = 0;

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if ((rows[i].ability_id == 20) || (rows[i].ability_id == 17)) {
					if (rows[i].ability_level == 10) {
						completed++;
						ablist += "> *" + rows[i].name + "* (Liv " + rows[i].ability_level + ", " + toTime(rows[i].ability_level * rows[i].val * 60, 0) + ")\n";
					} else
						ablist += "> " + rows[i].name + " (Liv " + rows[i].ability_level + ", " + toTime(rows[i].ability_level * rows[i].val * 60, 0) + ")\n";
				} else {
					if (rows[i].ability_level == 10) {
						completed++;
						ablist += "> *" + rows[i].name + "* (Liv " + rows[i].ability_level + ", " + (rows[i].ability_level * rows[i].val) + rows[i].det + ")\n";
					} else
						ablist += "> " + rows[i].name + " (Liv " + rows[i].ability_level + ", " + (rows[i].ability_level * rows[i].val) + rows[i].det + ")\n";
				}

				abarr[rows[i].ability_id] = rows[i].ability_level;
			}

			connection.query('SELECT name, id FROM ability_list ORDER BY name', function (err, rows, fields) {
				if (err) throw err;

				var tot = 0;
				var total = Object.keys(rows).length;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if ((abarr[rows[i].id] < 10) || (abarr[rows[i].id] == undefined))
						iKeys.push([rows[i].name]);
					abname[rows[i].id] = rows[i].name;
					tot++;
				}
				iKeys.push(["Torna al menu"]);

				var ability_list = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: iKeys
					}
				};

				connection.query("SELECT SUM(ability_level) As cnt FROM ability WHERE player_id = " + player_id, function (err, rows, fields) {
					if (err) throw err;

					if (rows[0].cnt == (tot * 10))
						setAchievement(player_id, 18, 999);

					bot.sendMessage(message.chat.id, "Seleziona il *Talento* da apprendere o potenziare (" + completed + " su " + total + " completati):\n" + ablist, ability_list).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text == "Torna al menu")
								return;
							connection.query('SELECT * FROM ability_list WHERE name = "' + answer.text + '"', function (err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "Talento non valido", prev);
									return;
								}

								var ability_id = rows[0].id;
								var ability_desc = rows[0].description;
								var ability_prev = rows[0].prev;
								var ability_name = rows[0].name;
								var val = rows[0].val;
								var sym = rows[0].det;

								if (ability_prev != 0) {
									if (abarr[ability_prev] == undefined) {
										bot.sendMessage(message.chat.id, "Questo Talento richiede prima il potenziamento di: " + abname[ability_prev], prev);
										return;
									} else {
										if (abarr[ability_prev] < 10) {
											bot.sendMessage(message.chat.id, "Questo Talento richiede prima il potenziamento al livello massimo di: " + abname[ability_prev], prev);
											return;
										}
									}
								}

								connection.query('SELECT ability_level FROM ability WHERE player_id = ' + player_id + ' AND ability_id = ' + ability_id, function (err, rows, fields) {
									if (err) throw err;

									var text = "Caratteristiche Talento " + ability_name + ":\n" + ability_desc;
									var text2 = "";
									var text3 = "\n\nFornisce: ";
									var text4 = "\nLivello massimo: 10";
									var money = 0;
									var itemid = 0;
									var itemqnt = 0;
									var gems = 0;
									var learn = "apprendere questo talento";
									var level = 0;
									var maxlev = 10;
									var forlevel = "per livello";

									if (Object.keys(rows).length > 0) {
										level = parseInt(rows[0].ability_level);
										learn = "potenziare questo talento al livello " + (level + 1);
									}

									if (ability_id == 1) { // 1% ogni livello
										text3 += val + sym + " " + forlevel;
										if (level < 1) {
											money = 200000;
											itemqnt = 30;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Frammento di Osmio";
											itemid = 663;
										} else if (level < 2) {
											money = 500000;
											itemqnt = 50;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Frammento di Osmio";
											itemid = 663;
										} else if (level < 3) {
											money = 750000;
											itemqnt = 10;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Kit Fuga";
											itemid = 616;
										} else if (level < 4) {
											money = 1000000;
											itemqnt = 5;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Chiave Tipo A";
											itemid = 604;
										} else if (level < 5) {
											money = 1250000;
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Pass Argento";
											itemid = 609;
										} else if (level < 6) {
											money = 1500000;
											itemqnt = 3;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Capsula Estrazione";
											itemid = 618;
										} else if (level < 7) {
											money = 1750000;
											itemqnt = 10;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Chiave Tipo B";
											itemid = 605;
										} else if (level < 8) {
											money = 2250000;
											itemqnt = 25;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Varco Temporale";
											itemid = 645;
										} else if (level < 9) {
											money = 3000000;
											itemqnt = 150;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Piuma di Fenice";
											itemid = 619;
										} else if (level < 10) {
											money = 5000000;
											itemqnt = 3;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Trasduttore dell'Apocalisse";
											itemid = 626;
										}
									} else if (ability_id == 2) { // 100 monete ogni livello
										text3 += val + sym + " " + forlevel;
										if (level < 10) {
											money = 50000 * (level + 1);
											itemqnt = (level + 1);
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Ala della Fenice";
											itemid = 345;
										}
									} else if (ability_id == 3) { // -30 secondi ogni livello
										text3 += val + sym + " " + forlevel;
										if (level < 1) {
											money = 1000000;
											itemqnt = 4;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Liquido Draconico Intermedio";
											itemid = 704;
										} else if (level < 2) {
											money = 2000000;
											itemqnt = 5;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Potenziatore Anormale";
											itemid = 702;
										} else if (level < 3) {
											money = 3000000;
											itemqnt = 6;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Liquido Draconico Avanzato";
											itemid = 705;
										} else if (level < 4) {
											money = 4000000;
											itemqnt = 7;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Gemma Draconica Instabile";
											itemid = 706;
										} else if (level < 5) {
											money = 5000000;
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Artigli Infernali Divini";
											itemid = 717;
										} else if (level < 6) {
											money = 6000000;
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Sella delle Vette Ancestrale";
											itemid = 748;
										} else if (level < 7) {
											money = 7000000;
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Sella Glaciale Neutrale";
											itemid = 726;
										} else if (level < 8) {
											money = 8000000;
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Artigli Celesti X";
											itemid = 733;
										} else if (level < 9) {
											money = 9000000;
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Artigli Abissali Divini";
											itemid = 741;
										} else if (level < 10) {
											money = 10000000;
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Artigli Oscuri Neutrali";
											itemid = 728;
										}
									} else if (ability_id == 4) { // +2% riuscita ispezione
										text3 += val + sym + " " + forlevel;
										if (level < 1) {
											money = 50000 * (level + 1);
											itemqnt = 3;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Rubino del Dio Vulcano";
											itemid = 451;
										} else if (level < 2) {
											money = 50000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Pendolo";
											itemid = 403;
										} else if (level < 4) {
											money = 50000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Spirito del Fato";
											itemid = 288;
										} else if (level < 5) {
											money = 50000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Struttura della Piramide Meteorite";
											itemid = 427;
										} else if (level < 6) {
											money = 60000 * (level + 1);
											itemqnt = 10;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Frammento di Osmio";
											itemid = 663;
										} else if (level < 7) {
											money = 60000 * (level + 1);
											itemqnt = 10;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Zaffiro del Dio Eolo";
											itemid = 450;
										} else if (level < 8) {
											money = 60000 * (level + 1);
											itemqnt = 20;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Smeraldo della Dea Gea";
											itemid = 452;
										} else if (level < 9) {
											money = 70000 * (level + 1);
											itemqnt = 20;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Mithril";
											itemid = 311;
										} else if (level < 10) {
											money = 90000 * (level + 1);
											itemqnt = 40;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Laccio Antico";
											itemid = 406;
										}
									} else if (ability_id == 5) {
										text3 += val + sym + " " + forlevel;
										if (level < 5) {
											money = 30000 * (level + 1);
											itemqnt = (level + 1);
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Lama Celeste";
											itemid = 102;
										} else if (level < 10) {
											money = 35000 * (level + 1);
											itemqnt = (level + 1);
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Manico Diabolico";
											itemid = 103;
										}
									} else if (ability_id == 6) {
										text3 += "+1 utilizzo ogni 2 livelli, " + val + sym + " salute recuperata quando si torna in vita " + forlevel;
										if (level < 2) {
											money = 50000 * (level + 1);
											itemqnt = 10;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Gesso";
											itemid = 142;
										} else if (level < 6) {
											money = 100000 * (level + 1);
											itemqnt = 5;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Ambra";
											itemid = 223;
										} else if (level < 8) {
											money = 100000 * (level + 1);
											itemqnt = 10;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Mithril";
											itemid = 311;
										} else if (level < 10) {
											money = 150000 * (level + 1);
											itemqnt = 10;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Generatore di Ioni";
											itemid = 165;
										}
									} else if (ability_id == 7) {
										text3 += val + sym + " " + forlevel;
										if (level < 10) {
											gems = 5 * (level+1);
											itemqnt = 1;
											text2 += "\n> " + gems + " üíé";
											text2 += "\n> " + itemqnt + "x Runa Supernova";
											itemid = 343;
										}
									} else if (ability_id == 8) {
										text3 += val + sym + " " + forlevel;
										if (level < 10) {
											money = 50000 * (level + 1);
											itemqnt = (level * 2);
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Lama Maledetta";
											itemid = 104;
										}
									} else if (ability_id == 9) {
										text3 += val + sym + " " + forlevel;
										if (level < 5) {
											money = 15000 * (level + 1);
											itemqnt = (level + 1);
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Propulsore X";
											itemid = 202;
										} else if (level < 10) {
											money = 15000 * (level + 1);
											itemqnt = (level + 1) - 5;
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Generatore del Vuoto";
											itemid = 321;
										}
									} else if (ability_id == 10) {
										text3 += val + sym + " " + forlevel;
										if (level < 2) {
											money = 25000 * (level + 1);
											itemqnt = 300;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Polvere";
											itemid = 646;
										} else if (level < 4) {
											money = 50000 * (level + 1);
											itemqnt = 30;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Oro Bianco";
											itemid = 276;
										} else if (level < 5) {
											money = 50000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Urlo di Morte";
											itemid = 532;
										} else if (level < 6) {
											money = 50000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Respiro di Morte";
											itemid = 201;
										} else if (level < 7) {
											money = 75000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Soffio di Morte";
											itemid = 598;
										} else if (level < 8) {
											money = 90000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Necronucleo";
											itemid = 200;
										} else if (level < 9) {
											money = 100000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Concentrato Ultraterreno Vulcano";
											itemid = 636;
										} else if (level < 10) {
											money = 100000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Concentrato Ultraterreno Tsunami";
											itemid = 637;
										}
									} else if (ability_id == 11) {
										text3 += val + sym + " " + forlevel;
										if (level < 1) {
											money = 50000 * (level + 1);
											itemqnt = 50;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Cuscino";
											itemid = 10;
										} else if (level < 2) {
											money = 50000 * (level + 1);
											itemqnt = 40;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Molla";
											itemid = 11;
										} else if (level < 3) {
											money = 50000 * (level + 1);
											itemqnt = 30;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Metallo";
											itemid = 23;
										} else if (level < 4) {
											money = 50000 * (level + 1);
											itemqnt = 30;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Carta";
											itemid = 1;
										} else if (level < 6) {
											money = 50000 * (level + 1);
											itemqnt = 30;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Cordino Fragile";
											itemid = 5;
										} else if (level < 8) {
											money = 50000 * (level + 1);
											itemqnt = 25;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Diamante";
											itemid = 9;
										} else if (level < 10) {
											money = 50000 * (level + 1);
											itemqnt = 25;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Pietra del Sangue";
											itemid = 20;
										}
									} else if (ability_id == 12) {
										text3 += val + sym + " " + forlevel;
										if (level < 1) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Innesto Ardente";
											itemid = 628;
										} else if (level < 2) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Innesto Celeste";
											itemid = 629;
										} else if (level < 3) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Innesto di Efesto";
											itemid = 666;
										} else if (level < 4) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Catalizzatore Necro";
											itemid = 222;
										} else if (level < 5) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Innesto Folgorante";
											itemid = 627;
										} else if (level < 6) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Innesto di Poseidone";
											itemid = 667;
										} else if (level < 7) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Talismano Magico";
											itemid = 496;
										} else if (level < 8) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Talismano Artiglio";
											itemid = 602;
										} else if (level < 9) {
											money = 500000 * (level + 1);
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Talismano del Pendolo";
											itemid = 404;
										} else if (level < 10) {
											money = 500000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Alabarda Elementale";
											itemid = 634;
										}
									} else if (ability_id == 13) {
										text3 += val + sym + " " + forlevel;
										if (level < 5) {
											money = 20000 * (level + 1);
											itemqnt = level;
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Frammento Divino";
											itemid = 190;
										} else if (level < 10) {
											money = 20000 * (level + 1);
											itemqnt = level;
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Nucleo Supernova";
											itemid = 565;
										}
									} else if (ability_id == 14) {
										text3 += val + sym + " " + forlevel;
										if (level == 0) {
											money = 300000;
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Scheggia di Hatrurite";
											itemid = 91;
										} else if (level == 1) {
											money = 400000;
											itemqnt = 2;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Scheggia di Palladio";
											itemid = 151;
										} else if (level >= 2) {
											money = 500000;
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Componente Ultra Cristallo";
											itemid = 562;
										}
									} else if (ability_id == 15) {
										text3 += val + sym + " " + forlevel;
										if (level < 5) {
											money = 30000 * (level + 1);
											itemqnt = (level + 1);
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Anima delle Ere";
											itemid = 317;
										} else if (level < 10) {
											money = 40000 * (level + 1);
											itemqnt = (level + 1) - 5;
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Batteria Infinita";
											itemid = 479;
										}
									} else if (ability_id == 16) {
										text3 += val + sym + " " + forlevel;
										if (level < 3) {
											money = 100000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Runa Supernova";
											itemid = 343;
										} else if (level < 5) {
											money = 200000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Carica G";
											itemid = 529;
										} else if (level < 8) {
											money = 300000 * (level + 1);
											itemqnt = 3;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Nucleo Celeste";
											itemid = 625;
										} else if (level < 9) {
											money = 400000 * (level + 1);
											itemqnt = 3;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Nucleo Cremisi";
											itemid = 624;
										} else if (level < 10) {
											money = 500000 * (level + 1);
											itemqnt = 3;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Nucleo Elettrico";
											itemid = 623;
										}
									} else if (ability_id == 17) {
										text3 += val + sym + " " + forlevel;
										if (level < 5) {
											money = 50000 * (level + 1);
											itemqnt = (level * 2);
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Sfera Tempesta";
											itemid = 296;
										} else if (level < 10) {
											money = 25000 * (level + 1);
											itemqnt = (level * 2);
											if (itemqnt == 0) {
												itemqnt = 1;
											}
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Spirito di Palladio";
											itemid = 357;
										}
									} else if (ability_id == 18) {
										text3 += val + sym + " " + forlevel;
										if (level < 3) {
											money = 20000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Respiro di Morte";
											itemid = 201;
										} else if (level < 6) {
											money = 20000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Urlo di Morte";
											itemid = 532;
										} else if (level < 8) {
											money = 20000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Soffio di Morte";
											itemid = 598;
										} else if (level < 10) {
											money = 20000 * (level + 1);
											itemqnt = 1;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Necronucleo";
											itemid = 200;
										}
									} else if (ability_id == 19) {
										text3 += val + sym + " " + forlevel;
										if (level < 10) {
											money = 30000 * (level + 1);
											itemqnt = (level + 1);
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Plutonio";
											itemid = 238;
										}
									} else if (ability_id == 20) {
										text3 += val + sym + " " + forlevel;
										if (level < 5) {
											money = 30000 * (level + 1);
											itemqnt = 5;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Anfora di Vento";
											itemid = 428;
										} else if (level < 10) {
											money = 50000 * (level + 1);
											itemqnt = 10;
											text2 += "\n> " + formatNumber(money) + " ¬ß";
											text2 += "\n> " + itemqnt + "x Stemma Ciclonico";
											itemid = 434;
										}
									} else {
										bot.sendMessage(message.chat.id, "Talento non valido", prev);
										return;
									}

									if (level >= maxlev) {
										bot.sendMessage(message.chat.id, text + text3 + "\nLivello massimo raggiunto", prev);
										return;
									}

									var text5 = "";
									var check = 0;
									if (money > 0) {
										if (my_money < money) {
											text5 = "\nüö´ Monete non sufficienti (" + formatNumber(my_money) + " su " + formatNumber(money) + ")";
											check++;
										}
									} else {
										if (my_gems < gems) {
											text5 = "\nüö´ Gemme non sufficienti (" + my_gems + " su " + gems + ")";
											check++;
										}
									}

									connection.query('SELECT name FROM item WHERE id = ' + itemid, function (err, rows, fields) {
										if (err) throw err;

										var item_name = rows[0].name;
										var cnt = getItemCnt(player_id, itemid);
										if (cnt < itemqnt) {
											text5 = "\nüö´ Oggetti non sufficienti (" + cnt + " su " + itemqnt + ")";
											check++;
										}

										if (check == 2) {
											text5 = "\nüö´ Oggetti e monete/üíé non sufficienti";
										}
										if (check == 0) {
											text5 = "\n‚úÖ Possiedi tutto il necessario";
										}

										var ability_pot = {
											parse_mode: "Markdown",
											reply_markup: {
												resize_keyboard: true,
												keyboard: [["Conferma"], ["Cerca " + item_name], ["Torna all'Albero"], ["Torna al menu"]]
											}
										};

										bot.sendMessage(message.chat.id, text + "\n\nPer " + learn + " sono necessari:" + text2 + text5 + text3 + text4, ability_pot).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.toLowerCase() == "conferma") {
													connection.query('SELECT money, gems FROM player WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														if (rows[0].money - money < 0) {
															bot.sendMessage(message.chat.id, "Non hai abbastanza monete", prev);
															return;
														}

														if (rows[0].gems - gems < 0) {
															bot.sendMessage(message.chat.id, "Non hai abbastanza üíé", prev);
															return;
														}

														if (level >= maxlev) {
															bot.sendMessage(message.chat.id, "Questo talento √® stato potenziato al massimo", prev);
															return;
														}

														if (getItemCnt(player_id, itemid) < itemqnt) {
															bot.sendMessage(message.chat.id, "Non hai abbastanza oggetti necessari", prev);
															return;
														}

														setAchievement(player_id, 18, 1);

														connection.query('UPDATE player SET money = money-' + money + ', gems = gems-' + gems + ' WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;

															connection.query('SELECT 1 FROM ability WHERE player_id = ' + player_id + ' AND ability_id = ' + ability_id, function (err, rows, fields) {
																if (err) throw err;

																if (Object.keys(rows).length > 0) {
																	connection.query('UPDATE ability SET ability_level = ability_level+1 WHERE player_id = ' + player_id + ' AND ability_id = ' + ability_id, function (err, rows, fields) {
																		if (err) throw err;
																		delItem(player_id, itemid, itemqnt);
																		bot.sendMessage(message.chat.id, "Talento potenziato! Livello: *" + level + " -> " + (level + 1) + "*", prev);
																	});
																} else {
																	connection.query('INSERT INTO ability (player_id, ability_level, ability_id) VALUES (' + player_id + ',1,' + ability_id + ')', function (err, rows, fields) {
																		if (err) throw err;
																		delItem(player_id, itemid, itemqnt);
																		bot.sendMessage(message.chat.id, "Talento appreso!", prev);
																	});
																}
															});
														});
													});
												}
											};
										});
									});
								});
							});
						};
					});
				});
			});
		});
	});
});

bot.onText(/equipaggia|^equip$|^equip ([A-Z]{1,3})$/i, function (message) {

	if (message.text.indexOf("Equipaggia Drago") != -1)
		return;

	var equip = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Equipaggia Ancora"], ["Torna allo zaino"], ["Torna al menu"]]
		}
	};

	// rarit√† in caso
	var oggetto = message.text.substring(message.text.indexOf(" ") + 1, message.text.lenght);

	if ((message.text.indexOf(" ") != -1) && (oggetto != "Ancora") && (oggetto != "üó°") && (oggetto.length > 2)) {
		connection.query('SELECT account_id, id, reborn, exp, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
			if (err) throw err;

			var banReason = isBanned(rows[0].account_id);
			if (banReason != null) {
				var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
				bot.sendMessage(message.chat.id, text, mark);
				return;
			}

			var player_id = rows[0].id;
			var player_reborn = rows[0].reborn;
			var player_level = Math.floor(rows[0].exp / 10);

			if (rows[0].holiday == 1) {
				bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
				return;
			}

			bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					var resp = answer.text;
					if (resp.toLowerCase() != "si")
						return;

					oggetto = oggetto.toLowerCase();

					if (re6.test(oggetto) == false) {
						bot.sendMessage(message.chat.id, "Non puoi equipaggiare l'oggetto specificato.", equip);
						return;
					}

					if (oggetto.indexOf("talismano") != -1) {
						connection.query('SELECT charm_id FROM player WHERE charm_id != 0 AND id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							var charm_id = 0;
							if (Object.keys(rows).length > 0)
								charm_id = rows[0].charm_id;
							connection.query('SELECT reborn, id, rarity FROM item WHERE name = "' + oggetto + '"', function (err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0) {
									bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste.", equip);
									return;
								}
								if (getItemCnt(player_id, rows[0].id) > 0) {
									if (player_reborn < rows[0].reborn) {
										bot.sendMessage(message.chat.id, "Non hai la rinascita necessaria.", equip);
										return;
									}

									var itemId = rows[0].id;
									var itemRarity = rows[0].rarity;

									if (charm_id != 0) {
										addItem(player_id, charm_id);
										bot.sendMessage(message.chat.id, "Il Talismano precedentemente equipaggiato √® tornato nell'inventario", equip);
									}

									connection.query('UPDATE player SET charm_id = ' + itemId + ' WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										delItem(player_id, itemId, 1);

										equip = {
											parse_mode: "Markdown",
											reply_markup: {
												resize_keyboard: true,
												keyboard: [["Equipaggia " + itemRarity], ["Torna allo zaino"], ["Torna al menu"]]
											}
										};

										bot.sendMessage(message.chat.id, "Talismano equipaggiato!", equip);
									});
								} else {
									bot.sendMessage(message.chat.id, "Non puoi equipaggiare questo talismano.", equip);
								}
							});
						});
					} else {
						connection.query('SELECT reborn, critical, power, power_armor, power_shield, id, rarity FROM item WHERE name = "' + oggetto + '" AND (power <> 0 OR power_armor <> 0 OR power_shield <> 0)', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste", equip);
								return;
							}

							if (getItemCnt(player_id, rows[0].id) > 0) {
								var itemid = rows[0].id;
								var power = rows[0].power;
								var power_a = rows[0].power_armor;
								var power_s = rows[0].power_shield;
								var critical = rows[0].critical;
								var reborn = rows[0].reborn;
								var rarity = rows[0].rarity;

								var level_nec = 0;
								if (rarity == "UR")
									level_nec = 15;
								else if (rarity == "L")
									level_nec = 30;
								else if (rarity == "E")
									level_nec = 50;
								else if (rarity == "UE")
									level_nec = 60;

								if ((player_level < level_nec) && (player_reborn == 1)) {
									bot.sendMessage(message.chat.id, "Non hai il livello necessario (" + level_nec + ").", equip);
									return;
								}

								if (player_reborn < reborn) {
									bot.sendMessage(message.chat.id, "Non hai il livello rinascita necessario.", equip);
									return;
								}

								equip = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["Equipaggia " + rarity], ["Torna allo zaino"], ["Torna al menu"]]
									}
								};

								if (power != 0) { //Arma
									connection.query('SELECT weapon_id FROM player WHERE weapon_id != 0 AND id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										var weapon_id = 0;
										if (Object.keys(rows).length > 0)
											weapon_id = rows[0].weapon_id;

										if (itemid == 221)
											power = calcNecro(300, player_level, player_reborn, 1);
										else if ((itemid == 638) || (itemid == 639) || (itemid == 640) || (itemid == 754))
											power = calcNecro(300, player_level, player_reborn, 2);

										if (weapon_id != 0) {
											addItem(player_id, weapon_id);
											bot.sendMessage(message.chat.id, "L'Arma precedentemente equipaggiata √® tornata nell'inventario", equip);
										}

										connection.query('UPDATE player SET weapon = ' + power + ', weapon_id = ' + itemid + ', weapon_crit = ' + critical + ' WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
											if (err) throw err;
											delItem(player_id, itemid, 1);
											bot.sendMessage(message.chat.id, "Arma equipaggiata!", equip);
										});
									});
								} else if (power_a != 0) { //Armatura
									connection.query('SELECT weapon2_id FROM player WHERE weapon2_id != 0 AND id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										var weapon2_id = 0;
										if (Object.keys(rows).length > 0)
											weapon2_id = rows[0].weapon2_id;

										if (itemid == 577)
											power_a = -Math.abs(calcNecro(250, player_level, player_reborn, 1));
										else if ((itemid == 688) || (itemid == 689) || (itemid == 690) || (itemid == 790))
											power_a = -Math.abs(calcNecro(250, player_level, player_reborn, 2));

										if (weapon2_id != 0) {
											addItem(player_id, weapon2_id);
											bot.sendMessage(message.chat.id, "L'Armatura precedentemente equipaggiata √® tornata nell'inventario", equip);
										}

										connection.query('UPDATE player SET weapon2 = ' + power_a + ', weapon2_id = ' + itemid + ', weapon2_crit = ' + critical + ' WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
											if (err) throw err;
											delItem(player_id, itemid, 1);
											bot.sendMessage(message.chat.id, "Armatura equipaggiata!", equip);
										});
									});
								} else if (power_s != 0) { //Scudo
									connection.query('SELECT weapon3_id FROM player WHERE weapon3_id != 0 AND id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										var weapon3_id = 0;
										if (Object.keys(rows).length > 0)
											weapon3_id = rows[0].weapon3_id;

										if (itemid == 600)
											power_s = -Math.abs(calcNecro(250, player_level, player_reborn, 1));
										else if ((itemid == 671) || (itemid == 672) || (itemid == 673) || (itemid == 791))
											power_s = -Math.abs(calcNecro(250, player_level, player_reborn, 2));

										if (weapon3_id != 0) {
											addItem(player_id, weapon3_id);
											bot.sendMessage(message.chat.id, "Lo Scudo precedentemente equipaggiato √® tornato nell'inventario", equip);
										}

										connection.query('UPDATE player SET weapon3 = ' + power_s + ', weapon3_id = ' + itemid + ', weapon3_crit = ' + critical + ' WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
											if (err) throw err;
											delItem(player_id, itemid, 1);
											bot.sendMessage(message.chat.id, "Scudo equipaggiato!", equip);
										});
									});
								} else
									bot.sendMessage(message.chat.id, "Non puoi equipaggiare l'oggetto specificato.", equip);
							} else
								bot.sendMessage(message.chat.id, "Non puoi equipaggiare l'oggetto specificato.", equip);
						});
					}
				};
			});
		});
		return;
	}

	var bottext = "*Oggetti equipaggiabili:*\n";

	connection.query('SELECT id, charm_id, weapon_id, account_id, weapon2_id, exp, reborn, weapon3_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var player_level = Math.floor(rows[0].exp / 10);
		var player_reborn = rows[0].reborn;
		var charm_id = rows[0].charm_id;
		var weapon_id = rows[0].weapon_id;
		var weapon2_id = rows[0].weapon2_id;
		var weapon3_id = rows[0].weapon3_id;
		var noequip = 0;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var filter = "";
		var filterTxt = "";
		if (((oggetto.length == 1) || (oggetto.length == 2)) && (oggetto != "üó°")) {
			filter = "AND item.rarity = '" + oggetto + "' ";
			filterTxt = " " + oggetto;
		}

		connection.query('SELECT item.power, item.power_armor, item.power_shield, item.critical, item.name, item.id FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND (item.power <> 0 OR item.power_armor <> 0 OR item.power_shield <> 0) AND inventory.quantity > 0 ' + filter + 'ORDER BY id DESC', function (err, rows, fields) {
			if (err) throw err;
			var iKeys = [];
			if (Object.keys(rows).length > 0) {
				bottext = bottext + "\n*Armi/Protezioni" + filterTxt + ":*\n";
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (rows[i].id == 221)
						rows[i].power = calcNecro(300, player_level, player_reborn, 1);
					else if ((rows[i].id == 638) || (rows[i].id == 639) || (rows[i].id == 640) || (rows[i].id == 754))
						rows[i].power = calcNecro(300, player_level, player_reborn, 2);

					if (rows[i].id == 577) 
						rows[i].power_armor = -calcNecro(250, player_level, player_reborn, 1);
					else if ((rows[i].id == 688) || (rows[i].id == 689) || (rows[i].id == 690) || (rows[i].id == 790))
						rows[i].power_armor = -calcNecro(250, player_level, player_reborn, 2);

					if (rows[i].id == 600)
						rows[i].power_shield = -calcNecro(250, player_level, player_reborn, 1);
					else if ((rows[i].id == 671) || (rows[i].id == 672) || (rows[i].id == 673) || (rows[i].id == 791))
						rows[i].power_shield = -calcNecro(250, player_level, player_reborn, 2);

					if (rows[i].power != 0) {
						if ((rows[i].id == weapon_id) || (rows[i].id == weapon2_id) || (rows[i].id == weapon3_id))
							bottext = bottext + "> " + rows[i].name + " (+" + rows[i].power + " danno, " + rows[i].critical + ") ‚úÖ\n";
						else
							bottext = bottext + "> " + rows[i].name + " (+" + rows[i].power + " danno, " + rows[i].critical + ")\n";
					} else if (rows[i].power_armor != 0) {
						if ((rows[i].id == weapon_id) || (rows[i].id == weapon2_id) || (rows[i].id == weapon3_id))
							bottext = bottext + "> " + rows[i].name + " (" + rows[i].power_armor + " danno subito, " + rows[i].critical + ") ‚úÖ\n";
						else
							bottext = bottext + "> " + rows[i].name + " (" + rows[i].power_armor + " danno subito, " + rows[i].critical + ")\n";
					} else if (rows[i].power_shield != 0) {
						if ((rows[i].id == weapon_id) || (rows[i].id == weapon2_id) || (rows[i].id == weapon3_id))
							bottext = bottext + "> " + rows[i].name + " (" + rows[i].power_shield + " danno subito, " + rows[i].critical + ") ‚úÖ\n";
						else
							bottext = bottext + "> " + rows[i].name + " (" + rows[i].power_shield + " danno subito, " + rows[i].critical + ")\n";
					}
					iKeys.push(["Equipaggia " + rows[i].name]);
				}
			} else {
				bottext = bottext + "Nessun arma o protezione equipaggiabile.";
				noequip = 1;
			}
			bottext = bottext + "\n";

			connection.query('SELECT item.name, item.id FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND item.name LIKE "Talismano%" AND inventory.quantity > 0 ' + filter, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					bottext = bottext + "*Talismani" + filterTxt + ":*\n";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].id == charm_id)
							bottext = bottext + "> " + rows[i].name + " ‚úÖ\n";
						else
							bottext = bottext + "> " + rows[i].name + "\n";
						iKeys.push(["Equipaggia " + rows[i].name]);
					}
				} else {
					bottext = bottext + "Nessun talismano equipaggiabile.";
					noequip = noequip + 1;
				}

				if (noequip == 2) {
					bot.sendMessage(message.chat.id, bottext, back);
					return;
				}

				iKeys.push(["Niente"]);
				iKeys.push(["Torna allo zaino"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: iKeys
					}
				};

				if (Object.keys(bottext).length > 3800) {
					bot.sendMessage(message.chat.id, "Hai troppi oggetti equipaggiabili, usa Equipaggia NomeOggetto per procedere ugualmente", back);
					return;
				}

				bot.sendMessage(message.chat.id, bottext + "\nCosa vuoi equipaggiare?\nQuando equipaggiato l'oggetto verr√† rimosso dall'inventario, usa Rimuovi per disequipaggiarlo", kb);
			});
		});
	});
});

bot.onText(/^rimuovi$|rimuovi üö´|rimuovi tutto|rimuovi arma|rimuovi armatura|rimuovi scudo|rimuovi talismano/i, function (message) {
	var oggetto = "";

	var kbEquip = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Equipaggia"], ["Rimuovi"], ["Torna allo zaino"], ["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday, account_id, weapon_id, weapon2_id, weapon3_id, charm_id, mission_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var weapon_id = rows[0].weapon_id;
		var weapon2_id = rows[0].weapon2_id;
		var weapon3_id = rows[0].weapon3_id;
		var charm_id = rows[0].charm_id;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		connection.query('SELECT name FROM item WHERE id = ' + weapon_id, function (err, rows, fields) {
			if (err) throw err;

			var weapon_name = "";
			if (Object.keys(rows).length > 0)
				weapon_name = rows[0].name;

			connection.query('SELECT name FROM item WHERE id = ' + weapon2_id, function (err, rows, fields) {
				if (err) throw err;

				var weapon2_name = "";
				if (Object.keys(rows).length > 0)
					weapon2_name = rows[0].name;

				connection.query('SELECT name FROM item WHERE id = ' + weapon3_id, function (err, rows, fields) {
					if (err) throw err;

					var weapon3_name = "";
					if (Object.keys(rows).length > 0)
						weapon3_name = rows[0].name;

					connection.query('SELECT name FROM item WHERE id = ' + charm_id, function (err, rows, fields) {
						if (err) throw err;

						var charm_name = "";
						if (Object.keys(rows).length > 0)
							charm_name = rows[0].name;

						var oggetto = message.text.substring(message.text.indexOf(" ") + 1);

						if ((message.text.indexOf(" ") != -1) && (oggetto != " ") && (oggetto != "") && (oggetto != "üö´")) {

							oggetto = oggetto.toLowerCase().trim();

							var desc = " di tutto l'equip";
							if (oggetto == "arma") {
								if (weapon_name == "") {
									bot.sendMessage(message.chat.id, "Nessun'arma equipaggiata.", kbEquip);
									return;
								}
								desc = " di " + weapon_name;
							} else if (oggetto == "armatura") {
								if (weapon2_name == "") {
									bot.sendMessage(message.chat.id, "Nessun'armatura equipaggiata.", kbEquip);
									return;
								}
								desc = " di " + weapon2_name;
							} else if (oggetto == "scudo") {
								if (weapon3_name == "") {
									bot.sendMessage(message.chat.id, "Nessuno scudo equipaggiato.", kbEquip);
									return;
								}
								desc = " di " + weapon3_name;
							} else if (oggetto == "talismano") {
								if (charm_name == "") {
									bot.sendMessage(message.chat.id, "Nessun talismano equipaggiato.", kbEquip);
									return;
								}
								desc = " di " + charm_name;
							}

							bot.sendMessage(message.chat.id, "Confermi la rimozione" + desc + "?", yesno).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									var resp = answer.text;
									if (resp.toLowerCase() != "si") {
										return;
									}

									if (oggetto == "arma") {
										if (weapon_id != 0) {
											connection.query('UPDATE player SET weapon=0, weapon_id=0 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
												if (err) throw err;
												addItem(player_id, weapon_id);
												bot.sendMessage(message.chat.id, "Arma (" + weapon_name + ") rimossa dall'equipaggiamento.", kbEquip);
											});
										} else {
											bot.sendMessage(message.chat.id, "Non hai nessun arma equipaggiata.", kbEquip);
										}
									} else if (oggetto == "armatura") {
										if (weapon2_id != 0) {
											connection.query('UPDATE player SET weapon2=0, weapon2_id=0 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
												if (err) throw err;
												addItem(player_id, weapon2_id);
												bot.sendMessage(message.chat.id, "Armatura (" + weapon2_name + ") rimossa dall'equipaggiamento.", kbEquip);
											});
										} else {
											bot.sendMessage(message.chat.id, "Non hai nessun armatura equipaggiata.", kbEquip);
										}
									} else if (oggetto == "scudo") {
										if (weapon3_id != 0) {
											connection.query('UPDATE player SET weapon3=0, weapon3_id=0 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
												if (err) throw err;
												addItem(player_id, weapon3_id);
												bot.sendMessage(message.chat.id, "Scudo (" + weapon3_name + ") rimosso dall'equipaggiamento.", kbEquip);
											});
										} else {
											bot.sendMessage(message.chat.id, "Non hai nessuno scudo equipaggiato.", kbEquip);
										}
									} else if (oggetto == "talismano") {
										if (charm_id != 0) {
											connection.query('UPDATE player SET charm_id=0 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
												if (err) throw err;
												addItem(player_id, charm_id);
												bot.sendMessage(message.chat.id, "Talismano (" + charm_name + ") rimosso dall'equipaggiamento.", kbEquip);
											});
										} else {
											bot.sendMessage(message.chat.id, "Non hai nessun talismano equipaggiato", kbEquip);
										}
									} else if (oggetto == "tutto") {
										var text = "";
										if (weapon_id != 0) {
											text += "> Arma (" + weapon_name + ")\n";
											connection.query('UPDATE player SET weapon=0, weapon_id=0 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
												if (err) throw err;
												addItem(player_id, weapon_id);
											});
										}
										if (weapon2_id != 0) {
											text += "> Armatura (" + weapon2_name + ")\n";
											connection.query('UPDATE player SET weapon2 = 0, weapon2_id = 0 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												addItem(player_id, weapon2_id);
											});
										}
										if (weapon3_id != 0) {
											text += "> Scudo (" + weapon3_name + ")\n";
											connection.query('UPDATE player SET weapon3 = 0, weapon3_id = 0 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												addItem(player_id, weapon3_id);
											});
										}
										if (charm_id != 0) {
											text += "> Talismano (" + charm_name + ")\n";
											connection.query('UPDATE player SET charm_id = 0 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												addItem(player_id, charm_id);
											});
										}

										if (text == "")
											bot.sendMessage(message.chat.id, "Non hai alcun oggetto equipaggiato", back);
										else
											bot.sendMessage(message.chat.id, text + "\nRimossi e reinseriti nello zaino", back);
									} else {
										bot.sendMessage(message.chat.id, "Equipaggiamento non valido.", back);
										return;
									}
								};
							});
							return;
						}

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Rimuovi Arma", "Rimuovi Armatura"], ["Rimuovi Scudo", "Rimuovi Talismano"], ["Rimuovi Tutto"], ["Torna allo zaino"], ["Torna al menu"]]
							}
						};

						bot.sendMessage(message.chat.id, "Cosa vuoi rimuovere?", kb);
					});
				});
			});
		});
	});
});

bot.onText(/^crea (.+)/i, function (message, match) {
	connection.query('SELECT id, holiday, money, reborn, account_id, global_end FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		var reborn = rows[0].reborn;
		var global_end = rows[0].global_end;

		var oggetto = match[1];
		if ((oggetto.indexOf("Oggetto") == -1) && (oggetto != "Ancora")) {
			var parts = oggetto.split(",");
			var qnt = 1;
			if (Object.keys(parts).length > 1) {
				oggetto = parts[0];
				qnt = parseInt(parts[1].trim());
			}

			creaOggetto(message, player_id, oggetto, money, reborn, qnt, global_end);
		}
	});
});

bot.onText(/^scrigni|torna agli scrigni|vai agli scrigni/i, function (message) {
	s = message.text;
	if (s.toLowerCase().indexOf("redditizi") != -1)
		return;

	var scrigno = "";
	var iKeys = [];

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT chest.name As name, quantity As num, (SELECT SUM(quantity) FROM inventory_chest WHERE player_id = ' + player_id + ') As tot FROM inventory_chest, chest WHERE inventory_chest.player_id = ' + player_id + ' AND inventory_chest.chest_id = chest.id AND quantity > 0 ORDER BY chest.id', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Vai all'emporio", "Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Non possiedi nessuno scrigno.", kb);
				return;
			}

			if (rows[0].tot > 1)
				iKeys.push(["Apri tutti"]);

			for (var i = 0, len = Object.keys(rows).length; i < len; i++)
				iKeys.push(["Apri " + rows[i].name + " (" + formatNumber(rows[i].num) + ")"]);

			iKeys.push(["Vai all'emporio", "Torna al menu"]);

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: iKeys
				}
			};

			var plur = "i";
			if (rows[0].tot == 1)
				plur = "o";

			if ((new Date().getDate() == 1) && (new Date().getMonth() == 3))
				rows[0].tot = 0;

			bot.sendMessage(message.chat.id, "Possiedi " + formatNumber(rows[0].tot) + " scrign" + plur, kb);
		});
	});
});

bot.onText(/^apri/i, function (message) {
	connection.query('SELECT id, reborn, account_id, holiday, mkeys FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var mkeys = rows[0].mkeys;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var chestMore = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna agli scrigni"], ["Torna al menu"]]
			}
		};

		var scrigno = message.text.substring(message.text.indexOf(" ") + 1);
		if (scrigno.indexOf("(") != -1)
			scrigno = scrigno.substring(0, scrigno.indexOf("(") - 1);
		if ((scrigno == "") || (scrigno == " "))
			return;

		var all = "";
		if (scrigno != "tutti")
			all = ' AND chest.name = "' + scrigno + '"';
		else
			all = ' AND chest.id != 8';

		connection.query('SELECT chest.id, chest.name, quantity FROM chest, inventory_chest WHERE chest.id = inventory_chest.chest_id AND inventory_chest.player_id = ' + player_id + ' AND quantity > 0' + all, function (err, rows, fields) {
			if (err) throw err;

			var qnt = 0;
			for (i = 0; i < Object.keys(rows).length; i++)
				qnt += parseInt(rows[i].quantity);

			if (qnt == 0) {
				if (scrigno != "tutti")
					bot.sendMessage(message.chat.id, "Non possiedi lo scrigno selezionato", chestMore);
				else
					bot.sendMessage(message.chat.id, "Non possiedi nessuno scrigno apribile", chestMore);
				return;
			}

			qnt = qnt.toString();
			var rarity = rows[0].id;

			if (scrigno != "tutti") {
				if (rarity == 8) {
					var chestYesNo = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Si"], ["Torna agli scrigni"], ["Torna al menu"]]
						}
					};

					var keys = 5;

					bot.sendMessage(message.chat.id, "Vuoi aprire lo Scrigno Mistico? Conterr√† una certa quantit√† di copie di un oggetto Base (R-E) di alto valore ed una üíé. Ti coster√† " + keys + " üóù, ne possiedi " + mkeys + ".", chestYesNo).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							var resp = answer.text;
							if ((resp == "Torna al menu") || (resp == "Torna agli scrigni"))
								return;

							if (answer.text.toLowerCase() == "si") {
								connection.query('SELECT mkeys FROM player WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									if (rows[0].mkeys < keys) {
										bot.sendMessage(message.chat.id, "Non hai abbastanza Chiavi Mistiche, te ne servono " + keys, chestMore);
										return;
									}

									delChest(player_id, 8, 1);

									connection.query('UPDATE player SET mkeys = mkeys-' + keys + ' WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										connection.query('SELECT shortname FROM rarity WHERE id > 2 AND id < 7 ORDER BY RAND()', function (err, rows, fields) {
											if (err) throw err;
											var rarity = rows[0].shortname;
											connection.query('SELECT I.name, I.id, I.estimate FROM item I INNER JOIN (SELECT id FROM item WHERE craftable = 0 AND rarity = "' + rarity + '" ORDER BY estimate DESC LIMIT 10) I2 ON I.id = I2.id ORDER BY RAND()', function (err, rows, fields) {
												if (err) throw err;
												var qnt = 0;
												if (rarity == "R")
													qnt = 20;
												else if (rarity == "UR")
													qnt = 15;
												else if (rarity == "L")
													qnt = 10;
												else if (rarity == "E")
													qnt = 5;

												addItem(player_id, rows[0].id, qnt);

												bot.sendMessage(message.chat.id, "Nello Scrigno Mistico hai trovato " + qnt + "x *" + rows[0].name + "* ed una üíé!", chestMore);
												connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});

												setAchievement(player_id, 5, 1);
											});
										});
									});
								});
							};
						};
					});
					return;
				}
			}

			var maxChest = 5000;
			var d = new Date();

			if ((d.getHours() > 1) && (d.getHours() < 7))
				maxChest = 10000;

			if (scrigno == "tutti") {
				var chestNum = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Si"], ["Torna agli scrigni"], ["Torna al menu"]]
					}
				};
			} else if (qnt > maxChest) {
				var chestNum = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["1"], [Math.min(qnt, maxChest).toString()], ["Torna agli scrigni"], ["Torna al menu"]]
					}
				};
			} else if (qnt > 1) {
				var chestNum = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["1"], [qnt], ["Torna agli scrigni"], ["Torna al menu"]]
					}
				};
			} else {
				var chestNum = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["1"], ["Torna agli scrigni"], ["Torna al menu"]]
					}
				};
			}

			var alltxt = "Sicuro di voler aprire tutti gli scrigni?\nNe possiedi " + formatNumber(qnt) + " su un massimo di " + formatNumber(maxChest) + " apribili contemporaneamente, procedendo saranno aperti partendo dalla rarit√† pi√π bassa";
			if (scrigno != "tutti")
				alltxt = "Possiedi " + formatNumber(qnt) + "x *" + scrigno + "*, quanti ne vuoi aprire?";

			bot.sendMessage(message.chat.id, alltxt, chestNum).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					var resp = answer.text;
					if ((resp == "Torna al menu") || (resp == "Torna agli scrigni"))
						return;
					else if ((!isNaN(parseInt(answer.text))) || (answer.text.toLowerCase() == "si")) {
						var quantity = parseInt(resp);

						if ((scrigno != "tutti") && (!isNaN(quantity))) {
							if (quantity < 1) {
								bot.sendMessage(message.chat.id, "Devi aprire almeno uno scrigno", chestMore);
								return;
							}
							if (quantity > qnt) {
								bot.sendMessage(message.chat.id, "Non possiedi cos√¨ tanti scrigni di questo tipo", chestMore);
								return;
							}
						} else if ((scrigno != "tutti") && (isNaN(quantity))) {
							bot.sendMessage(message.chat.id, "Specificare la quantit√† se non li apri tutti", chestMore);
							return;
						} else
							quantity = maxChest;

						var allsql = "";
						if (scrigno != "tutti")
							allsql = 'inventory_chest.chest_id = ' + rarity + ' AND ';
						else
							allsql = 'chest.id != 8 AND ';

						var query = 'SELECT inventory_chest.id, inventory_chest.chest_id, chest.rarity_shortname, inventory_chest.quantity FROM inventory_chest, chest WHERE ' + allsql + 'inventory_chest.chest_id = chest.id AND player_id = "' + player_id + '" AND quantity > 0 ORDER BY chest.id';
						connection.query(query, function (err, rows, fields) {
							if (err) throw err;

							var itemqnt = 0;
							for (i = 0; i < Object.keys(rows).length; i++)
								itemqnt += parseInt(rows[i].quantity);

							if (itemqnt == 0) {
								bot.sendMessage(message.chat.id, "Non possiedi gli scrigni indicati", chestMore);
								return;
							}

							/*
							if (((scrigno == "tutti") && (itemqnt > maxChest)) || ((scrigno != "tutti") && (quantity > maxChest))) {
								bot.sendMessage(message.chat.id, "Purtroppo non puoi aprire cos√¨ tanti scrigni insieme, massimo " + formatNumber(maxChest) + " alla volta!", chestMore);
								return;
							}
							*/

							var chest_rarity = "";
							var chest_id = 0;
							var item_name = "";
							var item_rarity = "";
							var item_id = 0;
							var itemsArray = [];
							var itemsToAdd = [];
							var chestToDel = [];
							var currentRarity = [];
							var special = 0;
							var opened = 0;

							var itemSql = "";

							var quantity_left = maxChest;

							for (j = 0; j < Object.keys(rows).length; j++) {	// per ogni rarit√†
								if (scrigno == "tutti")
									quantity = rows[j].quantity;

								if (quantity > quantity_left)
									quantity = quantity_left;

								if (quantity_left <= 0)
									break;

								quantity_left -= quantity;

								chest_rarity = rows[j].rarity_shortname;
								chest_id = rows[j].chest_id;
								itemSql = connection_sync.query('SELECT id, name, rarity FROM item WHERE rarity = "' + chest_rarity + '" AND id NOT IN (92, 93, 94) AND craftable = 0');

								currentRarity = [];

								for (i = 0; i < quantity; i++) {	// quantity oggetti estratti

									shuffle(itemSql);

									special = 0;
									item_name = itemSql[0].name;
									item_rarity = itemSql[0].rarity;
									item_id = itemSql[0].id;

									if (item_rarity == "U") {
										var randU = Math.random() * 100;
										var perc = 0;
										if (reborn <= 2)
											perc = 5;
										else if (reborn == 3)
											perc = 10;
										else if (reborn == 4)
											perc = 15;
										else if (reborn == 5)
											perc = 20;

										if (perc >= randU) {
											item_name = "Gemma";
											item_rarity = "üíé";
											special = 1;
										}
									}

									currentRarity.push(item_name + " (" + item_rarity + ")");

									if (special == 0)
										itemsToAdd.push(item_id);
									else {
										connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
									}

									chestToDel.push(chest_id);
									opened++;
								}

								currentRarity.sort();
								itemsArray = itemsArray.concat(currentRarity);
							}

							var itemsGrouped = compressArray(itemsToAdd);
							for (i = 0; i < Object.keys(itemsGrouped).length; i++)
								addItem(player_id, itemsGrouped[i].value, itemsGrouped[i].count);
							var chestGrouped = compressArray(chestToDel);
							for (i = 0; i < Object.keys(chestGrouped).length; i++)
								delChest(player_id, chestGrouped[i].value, chestGrouped[i].count);

							var plur = "i";
							if (opened == 1)
								plur = "o";
							var msg = "Hai trovato " + opened + " oggett" + plur + ":";
							var itemsGrouped = compressArray(itemsArray);
							for (i = 0; i < Object.keys(itemsGrouped).length; i++)
								msg += "\n> " + itemsGrouped[i].count + "x " + itemsGrouped[i].value;

							if (msg.length > 4000)
								msg = "Hai trovato " + opened + " oggetti!";
							bot.sendMessage(message.chat.id, msg, chestMore);

							setAchievement(player_id, 5, opened);
						});
					};
				};
			});
		});
	});
});

bot.onText(/weekend della follia/i, function (message) {
	if (crazyMode == 0) {
		bot.sendMessage(message.chat.id, "La modalit√† follia non √® attiva!", back);
		return;
	}

	var bonus = "> Tutte le missioni velocizzate\n" +
		"> Ricompense aumentate di scrigni ed exp nelle missioni\n" +
		"> Danno raddoppiato in assalto e dungeon\n" +
		"> Possibilit√† di ottenere 2 punti rango al completamento del dungeon\n" +
		"> Monete raddoppiate nelle ispezioni\n" +
		"> Possibilit√† maggiore di trovare U Base e missioni U!\n" +
		"> Eventi in missione particolari e curiosi\n" +
		"> Il tempo di attesa tra una stanza e l'altra del dungeon √® ridotto di 2 minuti\n" +
		"> Uccidendo i mob nel dungeon otterrai scrigni pi√π rari!\n" +
		"> Nessun limite all'utilizzo di Varchi nei dungeon\n" +
		"> Ottieni una gemma per ogni missione L/E iniziata nell'evento\n" +
		"> I tempi delle ispezioni sono ridotti (non quelle iniziate dal plus)\n" +
		"> La probabilit√† di trovare bevande e oggetti speciali in missione √® aumentata\n" +
		"> Puoi vendere pi√π oggetti al Contrabbandiere\n" +
		"> Gli incantamenti iniziati nel folle durano 1 settimana\n" +
		"> Possono essere acquistati 3 pacchetti delle Offerte Giornaliere\n" +
		"> Le ricompense degli incarichi sono aumentate del 50%\n" +

		"\nI bonus possono cambiare di volta in volta!";

	bot.sendMessage(message.chat.id, "*Follia!*\nQuesto evento dura tutto il weekend, fornendo questi *bonus*:\n\n" + bonus, back);
});

bot.onText(/evento della luna/i, function (message) {
	if (luckyMode == 0) {
		bot.sendMessage(message.chat.id, "L'evento della luna non √® attivo!", back);
		return;
	}

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Ruota della Luna"], ["Torna al menu"]]
		}
	};

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna all'evento della luna"], ["Torna al menu"]]
		}
	};

	var kbYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Si"], ["Torna all'evento della luna"], ["Torna al menu"]]
		}
	};

	var mode = 0;
	var d = new Date();
	if (d.getDay() == 6)
		mode = 1;
	else if (d.getDay() == 0)
		mode = 2;
	else {
		bot.sendMessage(message.chat.id, "L'evento della luna non √® attivo oggi!", back);
		return;
	}

	if (mode == 1) {
		var bonus = "Durante la giornata _odierna_ la *Luna Dorata* si erge sopra di voi e vi porge il suo lato piuÃÄ luminoso, variando la fortuna attorno a voi, donandovi questi benefici:\n\n" +
			"> Senti che troverai di meglio nelle tue *missioni* con grande probabilitaÃÄ e fortuna\n" +
			"> Avverti i consigli della Luna Dorata e ti sovvengono in sogno mete con *tesori* piu grandi\n" +
			"> L‚Äôinfluenza della Luna Dorata ha aumentato la possibilitaÃÄ di trovare piu *pietre*\n" +
			"> La luce della Luna Dorata dona ai viaggiatori di *Dungeon* la possibilitaÃÄ di raddoppiare il loro Rango\n" +
			"> Il *Contrabbandiere* ama molto la Luce della Luna Dorata e questo evento raro, in vista dell‚Äôaumento degli avventurieri, lo porta a valutare, in alcuni momenti, le sue offerte al doppio del prezzo\n" +
			"> I mandanti degli Incarichi, se si sentono ispirati dalla Luna Dorata, possono raddoppiare la ricompensa di Punti Anima al suo completamento\n" +
			"> Inoltre solo durante il weekend della luna, le Monete Lunari ottenute grazie alle donazioni sono raddoppiate!\n" +
			"> *Ruota* della Luna Dorata\n" +
			"\n*Vuoi accedere alla Ruota?*";
	} else if (mode == 2) {
		var bonus = "La Luna Dorata che illuminava il vostro cammino viene invasa da una luce purpurea e la sua luce ora emette un opaco bagliore violaceo, le leggende narrano che il giorno dopo la Luna Dorata vi sia la nefasta *Luna Nera*:\n\n" +
			"> Il bagliore della Luna Nera puoÃÄ far percorrere strade oscure che miglioreranno le vostre *missioni*, ma potrebbe anche far causare brutti avvenimenti traumatici\n" +
			"> Oscuri sono i percorsi irradiati dalla Luna Nera, possono portare a maggiori *tesori* o a piccoli guadagni\n" +
			"> L‚Äôinfluenza della Luna Nera puoÃÄ portarvi a grandi ritrovamenti o a vicoli ciechi senza ritorno nelle Cave di *Pietre*\n" +
			"> La Luna Nera puoÃÄ dare consigli corretti o sbagliati ai viaggiatori di Dungeon che concludono le loro avventure sotto la sua influenza. Vi eÃÄ possibilitaÃÄ di raddoppiare i loro *Punti Rango* al completamento di essi o di Annullarli\n" +
			"> Il *Contrabbandiere* adora la Luce della Luna Nera e aumenta notevolmente rispetto alla Luna Dorata la probabilitaÃÄ di raddoppiare i soldi dati per un oggetto, ma a volte puoÃÄ essere piuÃÄ guardingo e conclude in fretta le sue transazioni dimezzando il guadagno\n" +
			"> I mandanti degli Incarichi, spaventati dalla luce della Luna Nera, possono triplicare la ricompensa di Punti Anima oppure rifiutarsi di fornirne\n" +
			"> Inoltre solo durante il weekend della luna, le Monete Lunari ottenute grazie alle donazioni sono raddoppiate!\n" +
			"> *Ruota* della Luna Nera\n" +
			"\n*Vuoi accedere alla Ruota?*";
	}

	bot.sendMessage(message.chat.id, bonus, kb);

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT player_id FROM contest WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				connection.query('UPDATE player SET moon_coin = moon_coin+4 WHERE id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					connection.query('INSERT INTO contest (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Hai ricevuto 4 Monete Lunari per girare la ruota della fortuna!", mark);
					});
				});
			}
		});
	});
});

bot.onText(/ruota della luna|ruota/i, function (message) {

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna al menu"]]
		}
	};

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna alla ruota"], ["Torna al menu"]]
		}
	};

	var kbYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Si"], ["Torna al menu"]]
		}
	};

	var d = new Date();
	if (luckyMode == 0) {
		if ((d.getDay() == 0) || (d.getDay() == 6)) {
			bot.sendMessage(message.chat.id, "Puoi tentare la fortuna solamente in settimana!", back);
			return;
		}
	}

	var moon = "Dorata";
	if (d.getDay() == 0)
		moon = "Nera";

	connection.query('SELECT id, holiday, account_id, exp, reborn, weapon_enchant, weapon2_enchant, weapon3_enchant, class FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var lev = Math.floor(rows[0].exp / 10);
		var reborn = rows[0].reborn;
		var weapon_enchant = rows[0].weapon_enchant;
		var weapon2_enchant = rows[0].weapon2_enchant;
		var weapon3_enchant = rows[0].weapon3_enchant;
		var class_id = rows[0].class;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (reborn == 1) {
			bot.sendMessage(message.chat.id, "La ruota √® utilizzabile solo dopo la Rinascita 1 (Livello 100)! Potrai tentare la fortuna vincendo interessanti premi con le üåï trovate in giro per Lootia!", back)
			return;
		}

		connection.query('SELECT evolved, level FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var dragon_lev = 0;
			var evolved = 0;
			if (Object.keys(rows).length > 0) {
				dragon_lev = rows[0].level;
				evolved = rows[0].evolved;
			}

			bot.sendMessage(message.chat.id, "Un raggio della *Luna " + moon + "* colpisce il luogo dove risiedi ed una ruota magica appare dinnanzi a te.\n\nNell'insenatura vi eÃÄ lo spazio per un qualcosa grande come una moneta e le iscrizioni su essa recitano le seguenti parole:\n_'Tu che sei baciato dalla Luna Dorata inserisci 2 üåï; in essa e potrai ricevere Piu Forza (+1 Livello giocatore/drago), La mia Luce (üíé), PiuÃÄ Potere Arcano dalle molteplici sfaccettature (Mana di ogni tipo), Mappe del Tesoro (Molte Monete), Oggetti Unici (Scrigno Capsula), La mia luce nella tua arma, nel tuo scudo o nella tua armatura per una settimana (Incantamento su Arma,Scudo o Armatura per 7 Giorni), una grande quantitaÃÄ di Polvere, il potere dell‚Äôanima per il tuo Team (ü¶ã) od uno spirito utile nel tuo cammino (üí†).'_\n\nSe ti trovi gi√† al livello massimo, quella ricompensa non potr√† essere ottenuta. Procedi?", kbYesNo).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase() == "si") {
						connection.query('SELECT id, moon_coin FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
							if (err) throw err;

							if (rows[0].moon_coin < 2) {
								bot.sendMessage(message.chat.id, "Non hai abbastanza üåï, te ne servono 2 per girare la ruota, al momento ne possiedi " + rows[0].moon_coin + " ma puoi trovarle durante le missioni o ottenerle attraverso le donazioni!", kbBack);
								return;
							}

							var rand = Math.round(Math.random() * 18);
							var player_id = rows[0].id;

							var skip1 = 0;
							var skip2 = 0;
							if ((lev == 100) && (reborn == 1))
								skip1 = 1;
							else if ((lev == 150) && (reborn == 2))
								skip1 = 1;
							else if ((lev == 200) && (reborn == 3))
								skip1 = 1;
							else if ((lev == 300) && (reborn == 4))
								skip1 = 1;
							else if ((lev == 1000) && (reborn == 5))
								skip1 = 1;
							if ((dragon_lev == 300) || ((dragon_lev == 200) && (evolved == 1)) || ((dragon_lev == 100) && (evolved == 0)))
								skip2 = 1;

							var rand2 = Math.random() * 100;
							var magicN = "";
							var magic = 0;
							if (rand2 < 30) {
								magic = 1; //Blu
								magicN = "Blu";
							} else if (rand2 < 60) {
								magic = 2; //Giallo
								magicN = "Giallo";
							} else {
								magic = 3; //Rosso
								magicN = "Rosso";
							}

							connection.query('SELECT COUNT(id) As cnt FROM artifacts WHERE item_id = 675 AND player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								if (rows[0].cnt > 0)
									skip1 == 2;

								connection.query('UPDATE player SET moon_coin = moon_coin-2 WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									if (rand <= 1) {									
										if (skip1 == 1) {
											connection.query('UPDATE player SET moon_coin = moon_coin+2 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											bot.sendMessage(message.chat.id, "Avresti ottenuto 1 livello, ma hai raggiunto il cap, ritira!", kbBack);
											return;
										}
										setExp(player_id, 10);

										if (skip1 == 2)
											bot.sendMessage(message.chat.id, "Hai ricevuto +10 exp!", kbBack);
										else
											bot.sendMessage(message.chat.id, "Hai ricevuto +1 livello!", kbBack);
										setAchievement(player_id, 21, 1);
									} else if ((rand >= 2) && (rand <= 3)) {
										if (skip2 == 1) {
											connection.query('UPDATE player SET moon_coin = moon_coin+2 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											bot.sendMessage(message.chat.id, "Avresti ottenuto 1 livello drago, ma hai raggiunto il cap, ritira!", kbBack);
											return;
										}
										connection.query('UPDATE dragon SET exp = exp+70, level = level+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai ricevuto +1 livello drago!", kbBack);
											checkDragon(player_id);
										});
										setAchievement(player_id, 21, 1);
									} else if ((rand >= 4) && (rand <= 6)) {
										connection.query('UPDATE player SET gems = gems+5 WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai ricevuto 5 üíé!", kbBack);
										});
										setAchievement(player_id, 21, 1);
									} else if ((rand >= 7) && (rand <= 8)) {
										connection.query('UPDATE event_mana_status SET mana_1 = mana_1+1000, mana_2 = mana_2+1000, mana_3 = mana_3+1000 WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai ricevuto +1.000 Mana per tipo!", kbBack);
										});
										setAchievement(player_id, 21, 1);
										setAchievement(player_id, 81, 3000);
									} else if (rand == 10) {
										connection.query('UPDATE event_mana_status SET mana_1 = mana_1+2000, mana_2 = mana_2+2000, mana_3 = mana_3+2000 WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai ricevuto +2.000 Mana per tipo!", kbBack);
										});
										setAchievement(player_id, 21, 1);
										setAchievement(player_id, 81, 6000);
									} else if (rand == 11) {
										var money = 5000000*reborn;
										connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai ricevuto " + formatNumber(money) + " ¬ß!", kbBack);
										});
										setAchievement(player_id, 21, 1);
									} else if (rand == 12) {
										addChest(player_id, 7);
										bot.sendMessage(message.chat.id, "Hai ricevuto uno Scrigno Capsula!", kbBack);
										setAchievement(player_id, 21, 1);
									} else if (rand == 13) {
										if (weapon_enchant != 0) {
											connection.query('UPDATE player SET moon_coin = moon_coin+2 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											bot.sendMessage(message.chat.id, "Avresti ottenuto un incantamento arma, ma l'arma √® gi√† incantata, ritira!", kbBack);
											return;
										}

										setEnchant(message, player_id, "Arma", 50, class_id, reborn, 1, 1);
										setAchievement(player_id, 21, 1);
									} else if (rand == 14) {
										if (weapon2_enchant != 0) {
											connection.query('UPDATE player SET moon_coin = moon_coin+2 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											bot.sendMessage(message.chat.id, "Avresti ottenuto un incantamento armatura, ma l'armatura √® gi√† incantata, ritira!", kbBack);
											return;
										}

										setEnchant(message, player_id, "Armatura", 50, class_id, reborn, 1, 1);
										setAchievement(player_id, 21, 1);
									} else if (rand == 15) {
										if (weapon3_enchant != 0) {
											connection.query('UPDATE player SET moon_coin = moon_coin+2 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											bot.sendMessage(message.chat.id, "Avresti ottenuto un incantamento scudo, ma lo scudo √® gi√† incantato, ritira!", kbBack);
											return;
										}

										setEnchant(message, player_id, "Scudo", 50, class_id, reborn, 1, 1);
										setAchievement(player_id, 21, 1);
									} else if (rand == 16) {
										addItem(player_id, 646, 500);
										bot.sendMessage(message.chat.id, "Hai ricevuto 500x Polvere!", kbBack);
										setAchievement(player_id, 21, 1);
									} else if (rand == 17) {
										connection.query('SELECT team_player.team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											var team_id = 0;
											if (Object.keys(rows).length > 0) {
												team_id = rows[0].team_id;
												connection.query('UPDATE team SET point = point+1000 WHERE id = ' + team_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Il tuo team ha ricevuto 1.000x ü¶ã!", kbBack);
												});
											} else {
												bot.sendMessage(message.chat.id, "Entra in un team per utilizzare questa funzione! Di conseguenza stavolta non ottieni nessun premio...", kbBack);
											}
										});
										setAchievement(player_id, 21, 1);
									} else {
										connection.query('UPDATE player SET necro_pnt = necro_pnt+2 WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai ricevuto 2 üí†!", kbBack);
										});
										setAchievement(player_id, 21, 1);
									}
									setAchievement(player_id, 43, 1);
								});
							});
						});
					};
				};
			});
		});
	});
});

bot.onText(/arena/i, function (message) {
	if (arena == 0) {
		bot.sendMessage(message.chat.id, "L'arena √® chiusa!", back);
		return;
	}

	var today = new Date();
	if ((today.getDay() != 6) && (today.getDay() != 0)) {
		var text = "Classifica vittorie:\n";
		var c = 1;
		var mypnt = 0;
		var totpnt = 0;
		var mypos = 0;
		var size = 20;

		connection.query('SELECT nickname, win As points FROM event_arena_status, player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) AND player.id = event_arena_status.player_id ORDER BY win DESC', function (err, rows, fields) {
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (c < size + 1) {
					rows[i].points = formatNumber(rows[i].points);
					text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].points + ")\n";
				}
				if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
					mypnt = rows[i].points;
					mypos = c;
				}
				c++;
			}
			text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + mypnt + ")";

			c = 1;

			text += "\n\nClassifica sconfitte:\n";

			connection.query('SELECT nickname, lose As points FROM event_arena_status, player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) AND player.id = event_arena_status.player_id ORDER BY lose DESC', function (err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < size + 1) {
						rows[i].points = formatNumber(rows[i].points);
						text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].points + ")\n";
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
						mypnt = rows[i].points;
						mypos = c;
					}
					c++;
				}
				text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + mypnt + ")";

				bot.sendMessage(message.chat.id, text, back_html);
			});
		});
		return;
	}

	connection.query('SELECT id, holiday, account_id, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Continua all'arena"], ["Torna al menu"]]
			}
		};
		var kb2 = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Scegli Drago 1", "Scegli Drago 2"], ["Punta Pietre"], ["Torna al menu"]]
			}
		};
		var kb3 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Entra nell'arena"], ["Torna al menu"]]
			}
		};
		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna all'arena"], ["Torna al menu"]]
			}
		};
		var kbChoice = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["1", "2", "3"], ["4", "5", "6"], ["Torna all'arena", "Torna al menu"]]
			}
		};

		connection.query('SELECT * FROM event_arena_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO event_arena_status (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nell'Arena dei Draghi 2.0!\nIn questa arena i draghi si sfideranno, avrai l'occasione di vincere le Pietre per potenziare il tuo drago scegliendo quale sar√† il probabile vincitore dello scontro, inizia!", kb);
				});
			} else {
				if (rows[0].extracted == 0) {
					connection.query('SELECT id, level FROM dragon WHERE level > 10 ORDER BY RAND()', function (err, rows, fields) {
						if (err) throw err;

						var id1 = parseInt(rows[0].id);
						var level1 = parseInt(rows[0].level);

						connection.query('SELECT dragon.id, dragon.level FROM dragon, player WHERE dragon.player_id = player.id AND dragon.level BETWEEN ' + (level1 - 10) + ' AND ' + (level1 + 10) + ' AND dragon.id != ' + id1 + ' AND player.account_id NOT IN (SELECT account_id FROM banlist) ORDER BY RAND()', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Non sono riuscito a trovare uno sfidante valido, riprova tra poco", kbBack);
								return;
							}

							var id2 = parseInt(rows[0].id);
							var level2 = parseInt(rows[0].level);

							var landType = 0;
							var landRand = Math.random() * 60;
							if (landRand < 10)
								landType = 1;
							else if (landRand < 20)
								landType = 2;
							else if (landRand < 30)
								landType = 3;
							else if (landRand < 40)
								landType = 4;
							else if (landRand < 50)
								landType = 5;
							else
								landType = 6;

							var now = new Date();
							now.setMinutes(now.getMinutes() + Math.round(Math.random() * 15 + 15));
							var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
							var short_time = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());

							connection.query('UPDATE event_arena_status SET extracted = 1, dragon_1 = ' + id1 + ', dragon_2 = ' + id2 + ', land_type = ' + landType + ', fight_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "I draghi sfidanti sono stati estratti!", kb3);
							});
						});
					});
				} else {
					var d1 = rows[0].dragon_1;
					var d2 = rows[0].dragon_2;
					var choice = rows[0].choice;
					var bet_id = rows[0].bet_id;
					var landType = rows[0].land_type;

					var d = new Date(rows[0].fight_time);
					var short_time = addZero(d.getHours()) + ":" + addZero(d.getMinutes()) + ":" + addZero(d.getSeconds());

					connection.query('SELECT id, name, level, type FROM dragon WHERE id = ' + d1, function (err, rows, fields) {
						if (err) throw err;

						var name1 = rows[0].name;
						var type1 = rows[0].type;
						var id = rows[0].id;
						var level1 = rows[0].level;

						connection.query('SELECT name, level, type FROM dragon WHERE id = ' + d2, function (err, rows, fields) {
							if (err) throw err;

							var name2 = rows[0].name;
							var type2 = rows[0].type;
							var level2 = rows[0].level;

							var landDesc = "";
							if (landType == 1)
								landDesc = "Scottatura";
							else if (landType == 2)
								landDesc = "Congelamento;"
							else if (landType == 3)
								landDesc = "Avvelenamento";
							else if (landType == 4)
								landDesc = "Sonno";
							else if (landType == 5)
								landDesc = "Rallentamento";
							else
								landDesc = "Terrore";

							if (choice == 0)
								choice = "-";
							else if (choice == 1)
								choice = "‚ë†";
							else if (choice == 2)
								choice = "‚ë°";

							bot.sendMessage(message.chat.id, "La prossima Sfida si tiene in un'Arena con un terreno che provoca <b>" + landDesc + "</b> " + landSym(landType) + " tra:\n\n" +
											"‚ë† <b>" + name1 + " " + type1 + "</b> (Lv " + level1 + ") " + dragonSym(type1) + "\n\n" +
											"               ‚öîÔ∏è\n\n" +
											"‚ë° <b>" + name2 + " " + type2 + "</b> (Lv " + level2 + ") " + dragonSym(type2) + "\n\n" +
											"Hai puntato su: " + choice + "\n\n" +
											"Lo scontro inizier√† alle " + short_time, kb2).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al menu")
										return;

									connection.query('SELECT extracted FROM event_arena_status WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (rows[0].extracted == 0) {
											bot.sendMessage(message.chat.id, "I draghi non sono ancora stati estratti!", kbBack);
											return;
										}

										if (answer.text == "Scegli Drago 1") {
											connection.query('UPDATE event_arena_status SET choice = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Hai scelto il drago 1!", kbBack);
											});
										} else if (answer.text == "Scegli Drago 2") {
											connection.query('UPDATE event_arena_status SET choice = 2 WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Hai scelto il drago 2!", kbBack);
											});
										} else if (answer.text == "Punta Pietre") {
											if (choice == 0) {
												bot.sendMessage(message.chat.id, "Prima scegli il drago su cui puntare!", kbBack);
												return;
											}
											if (bet_id != 0) {
												bot.sendMessage(message.chat.id, "Hai gi√† puntato su questo scontro!", kbBack);
												return;
											}
											bot.sendMessage(message.chat.id, "Specifica la pietra che vuoi puntare sul drago scrivendo il codice, " +
															"se vinci otterrai 2 pietre del tipo puntato, altrimenti la perderai. A volte puoi vincerne anche 3!\n" +
															"Pietra Anima di Legno -> 1\n" +
															"Pietra Anima di Ferro -> 2\n" +
															"Pietra Anima Preziosa -> 3\n" +
															"Pietra Cuore di Diamante -> 4\n" +
															"Pietra Cuore Leggendario -> 5\n" +
															"Pietra Spirito Epico -> 6\n\n" +
															"Attenzione, puoi puntare solamente una volta", kbChoice).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													if ((answer.text == "Torna all'arena") || (answer.text == "Torna al menu"))
														return;

													var stone = (67 + parseInt(answer.text));
													if ((parseInt(answer.text) < 1) || (parseInt(answer.text) > 6) || (re.test(parseInt(answer.text)) == false)) {
														bot.sendMessage(message.chat.id, "Codice pietra non valido!", kbBack);
														return;
													}

													var qnt = 1;
													if (getItemCnt(player_id, stone) < qnt) {
														bot.sendMessage(message.chat.id, "Non hai abbastanza pietre di quel tipo", kbBack);
														return;
													}

													delItem(player_id, stone, qnt);
													connection.query('UPDATE event_arena_status SET bet_id = ' + stone + ', bet_qnt = ' + qnt + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Puntata completata!", kbBack);
													});
												};
											});
										}
									});
								};
							});
						});
					});
				}
			};
		});
	});
});

bot.onText(/\/checkMember (.+)/i, function (message, match) {
	connection.query('SELECT id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Valido: " + validTeamMember(rows[0].team_id, player_id));
			console.log(validTeamMember(rows[0].team_id, player_id));
		});
	});
});

bot.onText(/^Incantesimi/i, function (message) {
	connection.query('SELECT account_id, holiday, id, magic_active FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var magic = rows[0].magic_active;

		if (magic == 0)
			return;

		var text = "Incantesimi:\n" +
			"*" + magicToName(1) + "*: Ricarica la salute e riflette il colpo in base al danno subito\n" +
			"*" + magicToName(2) + "*: Paralizza il bersaglio per alcuni turni\n" +
			"*" + magicToName(3) + "*: Infligge un notevole danno al bersaglio\n" +
			"*" + magicToName(4) + "*: Aumenta la probabilit√† di critico per alcuni turni (dal turno successivo)\n" +
			"\nSe gli incantesimi vengono applicati al boss, ne beneficiano tutti i giocatori che lo attaccano.";

		connection.query('DELETE FROM magic WHERE quantity <= 0 AND player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			connection.query('SELECT type, power, quantity FROM magic WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0) {
					var iKeys = [];
					for (var i = 0, len = Object.keys(rows).length; i < len; i++)
						iKeys.push(["Lancia " + magicToName(rows[i].type) + " " + rows[i].power + " (" + rows[i].quantity + ")"]);

					iKeys.push(["Torna al Dungeon"]);
					iKeys.push(["Torna al menu"]);

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					bot.sendMessage(message.chat.id, text + "\nSeleziona l'incantesimo da utilizzare contro il mostro!", kb);
				} else {
					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Dungeon"], ["Torna al menu"]]
						}
					};
					bot.sendMessage(message.chat.id, text + "\n\nNon possiedi alcun incantesimo, puoi ottenerli attraverso la Sintesi!", kb);
					return;
				}
			});
		});
	});
});

bot.onText(/^pozioni|^üçµ$/i, function (message) {
	connection.query('SELECT id, life, total_life FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var life = rows[0].life;
		var total_life = rows[0].total_life;

		if (life <= 0) {
			bot.sendMessage(message.chat.id, "Sei esausto, torna in vita per poter proseguire le tue avventure!", revive);
			return;
		}

		if (message.text.toLowerCase().indexOf("pozioni") != -1)
			Consumabili(message, player_id, 2, total_life, life, 0);
		else if (message.text.indexOf("üçµ") != -1)
			Consumabili(message, player_id, 4, total_life, life, 0);
	});
});

bot.onText(/Torna in Vita/i, function (message) {
	connection.query('SELECT id, life, total_life, refilled, gender, class, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var life = rows[0].life;
		var total_life = rows[0].total_life;
		var refilled = rows[0].refilled;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 6', function (err, rows, fields) {
			if (err) throw err;

			var att = 0;
			if (Object.keys(rows).length > 0) {
				if (rows[0].ability_level > 0)
					att = Math.ceil(rows[0].ability_level / 2);
			}

			if ((class_id == 5) && (reborn == 5))
				att += 5;

			var piume = getItemCnt(player_id, 619);
			var ceneri = getItemCnt(player_id, 647);

			var iKeys = [];

			if (piume > 0)
				iKeys.push(["Piuma di Fenice (" + piume + ")"]);

			if (ceneri > 0)
				iKeys.push(["Cenere di Fenice (" + ceneri + ")"]);

			var refill_left = (att - refilled);
			if (refill_left > 0)
				iKeys.push(["Intervento Divino (" + refill_left + ")"]);

			iKeys.push(["Torna al menu"]);

			var kbHeal = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: iKeys
				}
			};

			var kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Dungeon"], ["Torna al menu"]]
				}
			};

			if (life > 0) {
				bot.sendMessage(message.chat.id, "Sei in salute, non √® necessario tornare in vita\nPossiedi ancora " + refill_left + " utilizzi di Intervento Divino", back);
				return;
			}

			bot.sendMessage(message.chat.id, "Vuoi usare una Piuma di Fenice, una Cenere di Fenice o l'Intervento Divino per tornare in vita?", kbHeal).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.indexOf("Piuma di Fenice") != -1) {
						if (life > 0) {
							bot.sendMessage(message.chat.id, "Sei in salute, non √® necessario tornare in vita", back);
							return;
						}
						if (getItemCnt(player_id, 619) == 0)
							bot.sendMessage(message.chat.id, "Non possiedi nessuna Piuma di Fenice", back);
						else {
							delItem(player_id, 619, 1);
							var ten = total_life / 100 * 10;
							var perc = 0;
							var life = ten;
							var abBonus = 0;

							var now = new Date();
							now.setMinutes(now.getMinutes() + 3);
							var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
							var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());

							connection.query('UPDATE player SET life = ' + life + ', res_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Bentornat" + gender_text + "! üåü", kbBack);
							});
						}
					} else if (answer.text.indexOf("Cenere di Fenice") != -1) {
						if (life > 0) {
							bot.sendMessage(message.chat.id, "Sei in salute, non √® necessario tornare in vita", back);
							return;
						}
						if (getItemCnt(player_id, 647) == 0)
							bot.sendMessage(message.chat.id, "Non possiedi nessuna Cenere di Fenice", back);
						else {
							delItem(player_id, 647, 1);
							connection.query('UPDATE player SET life = total_life WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Bentornat" + gender_text + "! üåü", kbBack);
							});
						}
					} else if (answer.text.indexOf("Intervento Divino") != -1) {
						if (life > 0) {
							bot.sendMessage(message.chat.id, "Sei in salute, non √® necessario tornare in vita", back);
							return;
						}
						connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 6', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Devi apprendere questo talento prima di poterlo utilizzare", back);
								return;
							}

							if (rows[0].ability_level == 0) {
								bot.sendMessage(message.chat.id, "Devi apprendere questo talento prima di poterlo utilizzare", back);
								return;
							}

							var att = Math.ceil(rows[0].ability_level / 2);
							if ((class_id == 5) && (reborn == 5))
								att += 5;
							if (refilled >= att) {
								bot.sendMessage(message.chat.id, "Hai gi√† consumato le " + att + " opportunit√† di oggi!", back);
								return;
							}

							var refill = Math.floor(total_life * (rows[0].ability_level / 10)); // Cura = livello*10%
							connection.query('UPDATE player SET refilled = refilled+1, life = ' + refill + ' WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "L'Intervento Divino ti ha concesso di tornare in battaglia con " + formatNumber(refill) + "/" + formatNumber(total_life) + " hp!", kbBack);
							});
						});
					}
				}
			});
		});
	});
});

bot.onText(/spia (.+)|spia:|^\/spia/i, function (message, match) {

	var test = 0;

	var spy_null = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Nessuno"], ["Torna al rifugio"]]
		}
	};

	if (!checkSpam(message))
		return;

	connection.query('SELECT account_id, holiday, spy_count, id, exp, weapon, house_id, money, heist_protection, spy_description FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (rows[0].spy_count >= 30) {
			bot.sendMessage(message.chat.id, "Hai raggiunto il limite giornaliero.");
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp / 10);
		var power = rows[0].weapon;
		var myhouse = rows[0].house_id;

		var spy_description = "";
		if (rows[0].spy_description != null)
			spy_description = "\nPortando con s√® un messaggio su una pergamena: <i>" + rows[0].spy_description + "</i>";

		if (rows[0].money < 500) {
			bot.sendMessage(message.chat.id, "Non hai abbastanza soldi.", back);
			return;
		}

		if (rows[0].heist_protection != null) {
			bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi spiare gli altri utenti", back);
			return;
		}

		if (((message.text.indexOf(":") != -1) || (match[1] != undefined) || (message.reply_to_message != undefined)) && (message.text != "Spia Rifugio üëÄ")) {
			var player;
			if ((match[1] != undefined) && (match[1] != "rifugio"))
				player = match[1].replace("@", "");
			else if (message.reply_to_message != undefined)
				player = message.reply_to_message.text.match(/ci hanno avvisato che ([a-zA-Z0-9_]{5,}) ha spiato/)[1];
			else if (message.text.indexOf(":") != -1)
				player = message.text.substring(message.text.indexOf(":") + 1).replace("@", "").trim();
			else
				return;

			connection.query('SELECT id, heist_protection, chat_id, account_id, house_id FROM player WHERE nickname = "' + player + '"', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0)
					bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova.", back);
				else {
					var chat_id = rows[0].chat_id;
					var house_id = rows[0].house_id;

					if (player_id != 1) {
						var banReason = isBanned(rows[0].account_id);
						if (banReason != null) {
							bot.sendMessage(message.chat.id, "Non puoi spiare un giocatore bannato", back);
							return;
						}

						if (rows[0].heist_protection != null) {
							bot.sendMessage(message.chat.id, "Il bersaglio √® sotto protezione", back);
							return;
						}

						if (test == 1) {
							if ((player.toLowerCase() == "delooo") || (player.toLowerCase() == "raukonar") || (player.toLowerCase() == "gaius87") || (player.toLowerCase() == "inudragoon")) {
								bot.sendMessage(message.chat.id, "Il bersaglio √® sotto protezione", back);
								return;
							}
						}
					}

					if (rows[0].id == 1) {
						bot.sendMessage(message.chat.id, "Guardone :>", back);
						return;
					}

					if (rows[0].id == 3) {
						bot.sendMessage(message.chat.id, "Non si fanno ste cose :c", back);
						return;
					}

					if (player_id == rows[0].id) {
						bot.sendMessage(message.chat.id, "Per visualizzare il tuo equipaggiamento visita la sezione Giocatore", back);
						return;
					}

					setAchievement(player_id, 42, 1);
					getInfo(message, player, myhouse);
					connection.query('UPDATE player SET spy_count = spy_count+1, money = money-500 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
						if (err) throw err;
					});

					if (player_id != 1) {
						if (house_id == 1) {
							bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che qualcuno ha spiato il tuo rifugio!" + spy_description, html);
						} else if (house_id == 2) {
							bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che qualcuno <b>di livello " + level + "</b> ha spiato il tuo rifugio!" + spy_description, html);
						} else if ((house_id == 3) || (house_id == 4)) {
							bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che <b>un livello " + level + ", con +" + power + " di danno</b> ha spiato il tuo rifugio!" + spy_description, html);
						} else if (house_id >= 5) {
							bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che <b>" + message.from.username + "</b> ha spiato il tuo rifugio!" + spy_description, html);
						}
					}
				}
			});
			return;
		}

		bot.sendMessage(message.chat.id, "Puoi spiare un rifugio inserendo il nickname del giocatore, dovrai pagare 500 ¬ß!\nInserisci il nickname del giocatore oppure scrivi *Spia: Nomegiocatore*", spy_null).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				var player = answer.text;
				if ((player == "Nessuno") || (player == "Torna al rifugio"))
					return;

				player = player.replace("@", "").trim();

				connection.query('SELECT id, heist_protection, chat_id, house_id, account_id FROM player WHERE nickname = "' + player + '"', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var chat_id = rows[0].chat_id;
						var house_id = rows[0].house_id;

						if (player_id != 1) {
							var banReason = isBanned(rows[0].account_id);
							if (banReason != null) {
								bot.sendMessage(message.chat.id, "Non puoi spiare un giocatore bannato", back);
								return;
							}

							if (rows[0].heist_protection != null) {
								bot.sendMessage(message.chat.id, "Il bersaglio √® sotto protezione", back);
								return;
							}

							if (test == 1) {
								if ((player.toLowerCase() == "delooo") || (player.toLowerCase() == "raukonar") || (player.toLowerCase() == "gaius87") || (player.toLowerCase() == "inudragoon")) {
									bot.sendMessage(message.chat.id, "Il bersaglio √® sotto protezione", back);
									return;
								}
							}
						}

						if (rows[0].id == 1) {
							bot.sendMessage(message.chat.id, "Guardone :>", back);
							return;
						}

						if (rows[0].id == 3) {
							bot.sendMessage(message.chat.id, "Non si fanno ste cose :c", back);
							return;
						}

						if (player_id == rows[0].id) {
							bot.sendMessage(message.chat.id, "Per visualizzare il tuo equipaggiamento visita la sezione Giocatore", back);
							return;
						}

						setAchievement(player_id, 42, 1);
						getInfo(message, player, myhouse);
						connection.query('UPDATE player SET spy_count = spy_count+1, money = money-500 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
							if (err) throw err;
						});

						if (player_id != 1) {
							if (house_id == 1) {
								bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che qualcuno ha spiato il tuo rifugio!" + spy_description, html);
							} else if (house_id == 2) {
								bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che qualcuno <b>di livello " + level + "</b> ha spiato il tuo rifugio!" + spy_description, html);
							} else if ((house_id == 3) || (house_id == 4)) {
								bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che <b>un livello " + level + ", con +" + power + " di danno</b> ha spiato il tuo rifugio!" + spy_description, html);
							} else if (house_id >= 5) {
								bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che <b>" + message.from.username + "</b> ha spiato il tuo rifugio!" + spy_description, html);
							}
						}
					} else
						bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova.", back);
				});
			};
		});
	});
});

bot.onText(/lootteria/i, function (message) {
	if (lootteria == 0) {
		bot.sendMessage(message.chat.id, "Lo lootteria √® ancora chiusa!", back);
		return;
	}

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["1 Biglietto (10.000 ¬ß)", "5 Biglietti (40.000 ¬ß)"], ["20 Biglietti (160.000 ¬ß)"], ["30 Biglietti (240.000 ¬ß)"], ["Torna al menu"]]
		}
	};

	var today = new Date();
	if ((today.getDay() != 6) && (today.getDay() != 0)) {
		bot.sendMessage(message.chat.id, "Oggi la lootteria √® chiusa! Torna nel weekend!", back);
		return;
	}

	connection.query('SELECT account_id, holiday, exp, reborn, craft_count, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if ((rows[0].exp / 10 < 25) && (rows[0].reborn == 1)) {
			bot.sendMessage(message.chat.id, "Devi essere almeno livello 25 per partecipare alla lootteria", back)
			return;
		}

		if (rows[0].craft_count <= 100) {
			bot.sendMessage(message.chat.id, "Devi possedere almeno 100 punti creazione per partecipare alla lootteria", back)
			return;
		}

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		var date = new Date();
		var text = "";

		connection.query('SELECT extracted FROM `event_lottery_prize` WHERE day = ' + date.getDay(), function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].extracted == 1) {
				bot.sendMessage(message.chat.id, "L'estrazione √® in corso o √® terminata, segui @EstrazioniLootteria!", back)
				return;
			}
			connection.query('SELECT COUNT(*) As num FROM event_lottery_coins WHERE player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function (err, rows, fields) {
				if (err) throw err;
				var ticketNum = rows[0].num;
				bot.sendMessage(message.chat.id, "Benvenut" + gender_text + " nella Lootteria!\nAcquista biglietti per avere pi√π probabilit√† di essere estratt" + gender_text + ", l'estrazione avverr√† ogni sabato e domenica tra le 17 e le 20 e potr√† essere seguita su @EstrazioniLootteria!\nPossiedi " + ticketNum + "/30 biglietti", kb);
			});
		});
	});
});

bot.onText(/bigliett/i, function (message) {
	if (lootteria == 0) {
		bot.sendMessage(message.chat.id, "Lo lootteria √® chiusa!", back);
		return;
	}

	if (lootteria == 1) {
		var today = new Date();
		if ((today.getDay() != 6) && (today.getDay() != 0)) {
			bot.sendMessage(message.chat.id, "Oggi la lootteria √® chiusa! Torna nel weekend!", back);
			return;
		}
	}

	var ticketNum = parseInt(message.text.substring(0, message.text.indexOf(" ")));

	if ((ticketNum != 1) && (ticketNum != 2) && (ticketNum != 3) && (ticketNum != 4) && (ticketNum != 5) && (ticketNum != 20) && (ticketNum != 30)) {
		bot.sendMessage(message.chat.id, "Numero biglietti non valido", back);
		return;
	}

	if (lootteriaBlock == 1) {
		bot.sendMessage(message.chat.id, "Non √® momentaneamente possibile acquistare biglietti", back);
		return;
	}

	bot.sendMessage(message.chat.id, "Confermi l'acquisto di " + ticketNum + " biglietti?", yesno).then(function () {
		answerCallbacks[message.chat.id] = function (answer) {
			if (answer.text.toLowerCase() == "si") {

				var date = new Date();

				connection.query('SELECT extracted FROM `event_lottery_prize`, item WHERE item.id = event_lottery_prize.item_id AND day = ' + date.getDay(), function (err, rows, fields) {
					if (err) throw err;
					if (rows[0].extracted == 1) {
						bot.sendMessage(message.chat.id, "Durante l'estrazione non puoi acquistare biglietti!", back)
						return;
					}

					connection.query('SELECT id, money, craft_count, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
						if (err) throw err;
						var player_id = rows[0].id;
						var money = rows[0].money;

						if (rows[0].craft_count <= 100) {
							bot.sendMessage(message.chat.id, "Non hai abbastanza punti creazione per partecipare alla lootteria", back)
							return;
						}

						if ((rows[0].exp / 10 < 25) && (rows[0].reborn == 1)) {
							bot.sendMessage(message.chat.id, "Devi essere almeno livello 25 per partecipare alla lootteria", back)
							return;
						}

						connection.query('SELECT COUNT(*) As num FROM event_lottery_coins WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							var playerTicket = parseInt(rows[0].num);

							if ((playerTicket > 30) || (playerTicket + ticketNum > 30)) {
								bot.sendMessage(message.chat.id, "Puoi possedere al massimo 30 biglietti per estrazione", back);
								return;
							}

							var tot = ticketNum * 10000;
							if (ticketNum == 5)
								tot = 40000;
							else if (ticketNum == 20)
								tot = 160000;
							else if (ticketNum == 30)
								tot = 240000;

							if (money - tot <= 0) {
								bot.sendMessage(message.chat.id, "Non hai abbastanza soldi", back);
								return;
							}

							for (var i = 0; i < ticketNum; i++) {
								connection.query('INSERT INTO event_lottery_coins (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
									if (err) throw err;
								});
							}
							connection.query('UPDATE player SET money = money - ' + tot + ' WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai acquistato " + ticketNum + " biglietti per " + formatNumber(tot) + " ¬ß!", back);
							});
						});
					});
				});
			};
		};
	});
});

bot.onText(/necro del destino/i, function (message) {
	connection.query('SELECT id, account_id, holiday, necro_pnt, reborn FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;
		var necro_pnt = rows[0].necro_pnt;

		if (rows[0].reborn < 5) {
			bot.sendMessage(message.chat.id, "Per accedere a questa funzione √® necessaria la Rinascita 4!", back);
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Scambia Necrospiriti üí†"], ["Ottieni Ricompense üîÆ"], ["Torna al menu"]]
			}
		};

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna alla Necro del Destino"], ["Torna al menu"]]
			}
		};

		connection.query('SELECT step FROM necro_game WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var step = 0;
			if (Object.keys(rows).length == 0) {
				connection.query('INSERT INTO necro_game (player_id) VALUES (' + player_id + ')', function (err, rows, fields) {
					if (err) throw err;
				});
			} else
				step = rows[0].step;

			bot.sendMessage(message.chat.id, "Benvenuto nella Necro del Destino üîÆ\nPuoi accumulare Necrospiriti üí† scambiandoli per oggetti U, e successivamente richiedere un premio, puoi ottenerli anche dalla Ruota della Luna. Cosa vuoi fare?\n\nAttualmente possiedi *" + necro_pnt + "* üí†", kb).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					if (answer.text.toLowerCase().indexOf("scambia") != -1) {
						connection.query('SELECT item.name, inventory.quantity As cnt FROM inventory, item WHERE inventory.item_id = item.id AND item.rarity = "U" AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "Non hai alcun oggetto U da poter scambiare!", kbBack);
								return;
							}

							var iKeys = [];
							for (var i = 0, len = Object.keys(rows).length; i < len; i++)
								iKeys.push([rows[i].name + " (" + rows[i].cnt + ")"]);

							iKeys.push(["Torna al menu"]);

							var itemList = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: iKeys
								}
							};

							var itemQnt = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["1","5","10"], ["Torna alla Necro del Destino"]]
								}
							};

							bot.sendMessage(message.chat.id, "Seleziona l'oggetto U da scambiare", itemList).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {
									if (answer.text == "Torna al menu")
										return;
									else {
										var itemName = answer.text.substr(0, answer.text.indexOf("(")-1);

										bot.sendMessage(message.chat.id, "Inserisci la quantit√† di copie dell'oggetto da scambiare", itemQnt).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text == "Torna al menu")
													return;
												else {
													var qnt = parseInt(answer.text);
													if (isNaN(qnt)) {
														bot.sendMessage(message.chat.id, "Quantit√† non valida", kbBack);
														return;
													}
													if ((qnt < 1) || (qnt > 10)) {
														bot.sendMessage(message.chat.id, "Quantit√† non valida, minimo 1 e massimo 10 copie", kbBack);
														return;
													}

													connection.query('SELECT item.id, inventory.quantity As cnt FROM inventory, item WHERE inventory.item_id = item.id AND item.rarity = "U" AND inventory.player_id = ' + player_id + ' AND item.name = "' + itemName  + '"', function (err, rows, fields) {
														if (err) throw err;

														if (rows[0].cnt < qnt) {
															bot.sendMessage(message.chat.id, "Non possiedi abbastanza copie dell'oggetto specificato!", kbBack);
															return;
														}

														delItem(player_id, rows[0].id, qnt);
														connection.query('UPDATE player SET necro_pnt = necro_pnt+' + qnt + ' WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Hai consumato gli oggetti e ottenuto " + qnt + " Necrospiriti üí†!", kbBack);
														});
													});
												}
											}
										});
									}
								}
							});
						});
					} else if (answer.text.toLowerCase().indexOf("ottieni") != -1) {
						var prizeList = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Ricompensa 1", "Ricompensa 2"], ["Ricompensa 3", "Ricompensa 4"], ["Ricompensa 5", "Ricompensa 6"], ["Ricompensa 7", "Ricompensa 8"],["Torna alla Necro del Destino"]]
							}
						};

						var dYesNo = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Si"], ["Torna alla Necro del Destino"]]
							}
						};

						bot.sendMessage(message.chat.id, "Con i Necrospiriti üí† puoi acquistare diversi oggetti:" +
										"\n> 2 Oggetti Casuali (fino a UE inclusa Runa Necro) (1)" + (step >= 1 ? " ‚úÖ" : "") +
										"\n> 50 üíé (5)" + (step >= 2 ? " ‚úÖ" : "") +
										"\n> Amuleto del Necrospirito (10)" + (step >= 3 ? " ‚úÖ" : "") +
										"\n> 1 Frutto del Set Frutta (S) (15)" + (step >= 4 ? " ‚úÖ" : "") +
										"\n> Salmone (S) (25)" + (step >= 5 ? " ‚úÖ" : "") +
										"\n> Trasmogrificazione in Necrolama di Phoenix (50)" + (step >= 6 ? " ‚úÖ" : "") +
										"\n> Trasmogrificazione in Corazza Necro di Phoenix (50)" + (step >= 7 ? " ‚úÖ" : "") +
										"\n> Trasmogrificazione in Scudo Necro di Phoenix (50)" + (step >= 8 ? " ‚úÖ" : "") +
										"\n\nOgni ricompensa pu√≤ essere riscattata solo una volta ma devono essere riscattate in ordine. La prima pu√≤ essere riscattata pi√π volte dopo averle ottenute tutte.\n\n" +
										"Attualmente possiedi <b>" + necro_pnt + "</b> üí†", prizeList).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase().indexOf("ricompensa") != -1) {

									var num = parseInt(answer.text.split(" ")[1]);

									if (isNaN(num)) {
										bot.sendMessage(message.chat.id, "Ricompensa non valida", kbBack);
										return;
									}
									if ((num < 1) || (num > 8)) {
										bot.sendMessage(message.chat.id, "Ricompensa non valida, minimo 1 massimo 6", kbBack);
										return;
									}

									if ((num == 6) || (num == 7) || (num == 8)) {
										var necro_lock = connection_sync.query('SELECT 1 FROM necro_change WHERE player_id = ' + player_id);
										if (Object.keys(necro_lock).length == 0) {
											bot.sendMessage(message.chat.id, "Puoi riscattare questa ricompensa solo dopo aver sbloccato la Trasmogrificazione", kbBack);
											return;
										}
									}

									var ok = 0;
									if ((num == 1) && (step == 8))
										ok = 1;

									if (ok == 0) {
										if (step < num-1) {
											bot.sendMessage(message.chat.id, "Devi prima riscattare le ricompense precedenti!", kbBack);
											return;
										}
										if (step >= num) {
											bot.sendMessage(message.chat.id, "Hai gi√† riscattato questa ricompensa!", kbBack);
											return;
										}
									}

									var cost = 0;
									if (num == 1)
										cost = 1;
									else if (num == 2)
										cost = 5;
									else if (num == 3)
										cost = 10;
									else if (num == 4)
										cost = 15;
									else if (num == 5)
										cost = 25;
									else if ((num == 6) || (num == 7) || (num == 8))
										cost = 50;
									else {
										bot.sendMessage(message.chat.id, "Ricompensa non valida", kbBack);
										return;
									}

									bot.sendMessage(message.chat.id, "Sei sicuro di voler spendere " + cost + " üí†?", dYesNo).then(function () {
										answerCallbacks[message.chat.id] = function (answer) {
											if (answer.text.toLowerCase() == "si") {
												connection.query('SELECT necro_pnt FROM player WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (rows[0].necro_pnt < cost) {
														bot.sendMessage(message.chat.id, "Non hai abbastanza üí†", kbBack);
														return;
													}

													connection.query('UPDATE player SET necro_pnt = necro_pnt-' + cost + ' WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														var text = "Hai speso " + cost + " üí† ed ottenuto:\n";
														if (num == 1) {
															var rows = connection_sync.query('SELECT id, name, rarity FROM item WHERE rarity NOT IN ("C","NC","X","S","IN","A","U") OR id = 764 ORDER BY RAND()');
															addItem(player_id, rows[0].id);
															addItem(player_id, rows[1].id);
															text += "> " + rows[0].name + " (" + rows[0].rarity + ")\n";
															text += "> " + rows[1].name + " (" + rows[1].rarity + ")";
														} else if (num == 2) {
															connection.query('UPDATE player SET gems = gems+50 WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
															text += "> 50 üíé";
														} else if (num == 3) {
															addItem(player_id, 753);
															text += "> Amuleto del Necrospirito (IN)";
														} else if (num == 4) {
															var rows = connection_sync.query('SELECT id, name FROM item WHERE id IN (264, 266, 272) ORDER BY RAND()');
															addItem(player_id, rows[0].id);
															text += "> " + rows[0].name + " (S)\n";
														} else if (num == 5) {
															addItem(player_id, 651);
															text += "> Salmone (S)";
														} else if (num == 6)
															text += "> Possibilit√† di Trasmogrificazione in Necrolama di Phoenix (X)";
														else if (num == 7)
															text += "> Possibilit√† di Trasmogrificazione in Corazza Necro di Phoenix (X)";
														else if (num == 8)
															text += "> Possibilit√† di Trasmogrificazione in Scudo Necro di Phoenix (X)";

														if ((step == 8) && (num == 1)) {
															connection.query('UPDATE necro_game SET step = 6 WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														} else {
															connection.query('UPDATE necro_game SET step = ' + num + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}

														bot.sendMessage(message.chat.id, text, kbBack);
													});
												});
											}
										}
									});
								}
							}
						});
					}
				};
			});
		});
	});
});

bot.onText(/^Destino/i, function (message) {
	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Ruota della Luna üåï"], ["Necro del Destino üîÆ"], ["Torna al menu"]]
		}
	};
	bot.sendMessage(message.chat.id, "Seleziona il tipo di prova che vuoi affrontare", kb);
});

bot.onText(/Contatta lo Gnomo|Torna dallo Gnomo|^gnomo/i, function (message) {

	if (message.text.toLowerCase().indexOf("gnomorra") != -1)
		return;

	connection.query('SELECT account_id, holiday, id, exp, house_id, life, reborn, ability, heist_protection, heist_streak, global_end FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var myexp = rows[0].exp;
		var house_id = rows[0].house_id;
		var lev = Math.floor(myexp / 10);
		var life = rows[0].life;
		var reborn = rows[0].reborn;
		var ability = rows[0].ability;
		var heist_protection = rows[0].heist_protection;
		var heist_streak = rows[0].heist_streak;
		var global_end = rows[0].global_end;

		connection.query('SELECT * FROM heist_progress WHERE from_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				var kb = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Cambia Rune", "Tieni Combinazione"], ["Rinuncia", "Regole"], ["Torna al Rifugio"]]
					}
				};

				var kbBack = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Torna al Rifugio"], ["Torna al menu"]]
					}
				};

				var rBack = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Torna dallo Gnomo", "Torna al Rifugio"], ["Torna al menu"]]
					}
				};

				var kbYesNo = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Si"], ["Torna dallo gnomo"]]
					}
				};

				var kbNum = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["1", "2", "3"], ["4", "5"], ["1,2,3,4,5"], ["Torna dallo gnomo"]]
					}
				};

				var my_comb = "";
				var travel = parseInt(rows[0].travel);
				travel++;
				var combi = String(rows[0].combination);
				var isMatch = rows[0].isMatch;
				var toId = rows[0].to_id;
				var time_end = rows[0].time_end;

				var now = new Date(rows[0].time_end);
				var short_date_end = addZero(now.getHours()) + ":" + addZero(now.getMinutes());

				if (rows[0].wait_time != null) {
					var now = new Date(rows[0].wait_time);
					var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());
					bot.sendMessage(message.chat.id, "Il tuo gnomo sta ancora raccogliendo le rune, attendi fino alle " + short_date, back);
					return;
				}

				if (rows[0].my_combination == 0) {
					for (i = 0; i < 5; i++)
						my_comb += String(Math.round(Math.random() * 5 + 1));

					my_comb = String(my_comb);

					var now = new Date();
					now.setMinutes(now.getMinutes() + 5);
					var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
					var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());

					connection.query('UPDATE heist_progress SET my_combination = ' + my_comb + ', wait_time = "' + long_date + '", travel=travel+1 WHERE from_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Il tuo gnomo √® andato a recuperare alcune rune, dovrai attendere il suo ritorno alle " + short_date, back);
					});
					return;
				} else
					my_comb = String(rows[0].my_combination);

				connection.query("SELECT chat_id, nickname FROM player WHERE id = " + toId, function (err, rows, fields) {
					if (err) throw err;

					var nick = rows[0].nickname;
					var toChat = rows[0].chat_id;
					var my_comb_arr = my_comb.split("");

					bot.sendMessage(message.chat.id, "Per entrare nel rifugio di <b>" + nick + "</b> devi possedere delle Rune di un valore pi√π alto rispetto a quelle del guardiano del cancello, come procedi?\n\nLo gnomo torna dal rifugio con 5 Rune, su ogni runa √® scritto un numero:\n\nüí¨ " + my_comb_arr.join(" ") + "\n\nPuoi cambiare le Rune ancora " + (4 - travel) + " volte, lo gnomo si stancher√† di aspettare alle " + short_date_end, kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text == "Cambia Rune") {

								if (travel >= 4) {
									bot.sendMessage(message.chat.id, "Non puoi cambiare Rune pi√π di 2 volte per ispezione!", rBack);
									return;
								}

								bot.sendMessage(message.chat.id, "Inserisci le <b>posizioni</b> delle Rune che vuoi cambiare, separate da una virgola o scritti uno vicino all'altro. Dopo 5 minuti il tuo gnomo torner√† con le nuove rune.", kbNum).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if ((answer.text == "Torna al rifugio") || (answer.text == "Torna dallo gnomo"))
											return;

										var numbers;
										answer.text = answer.text.replace(/ /g,'');
										if (answer.text.indexOf(",") != -1)
											numbers = answer.text.trim().split(",").map(Number);
										else
											numbers = answer.text.trim().split("").map(Number);
										var len = Object.keys(numbers).length;

										if (len < 1) {
											bot.sendMessage(message.chat.id, "Inserisci almeno un numero, riprova", rBack);
											return;
										}

										if (len > 5) {
											bot.sendMessage(message.chat.id, "Troppi numeri, massimo 5, riprova", rBack);
											return;
										}

										var mark_comb = "";
										for (i = 0; i < my_comb_arr.length; i++) {
											if ((my_comb_arr[i] == NaN) || (my_comb_arr[i] > 6) || (my_comb_arr[i] < 1)) {
												bot.sendMessage(message.chat.id, my_comb_arr[i] + " non valido, riprova", rBack);
												return;
											}
											if (numbers.indexOf(i+1) != -1)
												mark_comb += "<b>" + my_comb_arr[i] + "</b> ";
											else
												mark_comb += my_comb_arr[i] + " ";
										}

										bot.sendMessage(message.chat.id, "üóØ " + mark_comb + "\n\nSicuro di voler cambiare le rune evidenziate?", kbYesNo).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.toLowerCase() != "si")
													return;

												var check = 0;
												var checkn = 0;

												for (var i = 0; i < len; i++) {
													numbers[i] = Math.round(numbers[i]);

													if (isNaN(numbers[i])) {
														bot.sendMessage(message.chat.id, "Almeno un numero non √® valido, riprova", rBack);
														return;
													}
													if ((numbers[i] < 1) || (numbers[i] > 5)) {
														bot.sendMessage(message.chat.id, numbers[i] + " non √® valido, deve essere compreso tra 1 e 5", rBack);
														return;
													}
													checkn = 0;
													for (var j = 0; j < len; j++) {
														if (numbers[i] == numbers[j]) {
															checkn++;
														}
														if (checkn >= 2) {
															bot.sendMessage(message.chat.id, numbers[i] + " non √® valido, √® gi√† stato inserito", rBack);
															return;
														}
													}
												}

												var now = new Date();
												now.setMinutes(now.getMinutes() + 5);
												var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
												var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());

												connection.query('UPDATE heist_progress SET changeComb = ' + numbers.join("") + ', wait_time = "' + long_date + '", travel = travel+1 WHERE from_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Lo gnomo √® stato inviato a sostituire le rune richieste, torner√† alle " + short_date, rBack);
												});
											}
										});
									};
								});

							} else if (answer.text == "Tieni Combinazione") {

								var num = [];
								var end = "";
								var end_num = 0;

								var final1 = 0;
								var final2 = 0;
								var final_n1 = "";
								var final_n2 = "";
								var couple1 = 0;
								var couple2 = 0;

								var dcouple1 = 0;
								var dcouple2 = 0;
								var dcouple1b = 0;
								var dcouple2b = 0;
								var dcoupled1 = 0;
								var dcoupled2 = 0;
								var dcoupleSolo1 = 0;
								var dcoupleSolo2 = 0;

								var triple1 = 0;
								var triple2 = 0;
								var triple_a1 = 0;
								var triple_a2 = 0;
								var triple_b1 = 0;
								var triple_b2 = 0;
								var triple_d1 = 0;
								var triple_d2 = 0;

								var full1_d = 0;
								var full1_t = 0;
								var full1 = 0;
								var full2 = 0;
								var quad1 = 0;
								var quad2 = 0;
								var dquad1 = 0;
								var dquad2 = 0;
								var penta1 = 0;
								var penta2 = 0;
								var scalef1 = 0;
								var scalef2 = 0;
								var scales1 = 0;
								var scales2 = 0;

								for (i = 0; i < 2; i++) {
									if (i == 0)
										num = my_comb.split("");
									else
										num = combi.split("");
									num.sort();

									end = "";
									end_num = 0;

									//Cinque di un tipo
									if ((num[0] == num[1]) && (num[1] == num[2]) && (num[2] == num[3]) && (num[3] == num[4])) {
										end = "Cinque di un tipo";
										end_num = 8;
									}

									if ((i == 0) && (end_num == 8))
										penta1 = num[0];
									else
										penta2 = num[0];

									if (end_num == 0) {
										//Quattro di un tipo
										var dquad = 0;
										if ((num[0] == num[1]) && (num[1] == num[2]) && (num[2] == num[3])) {
											end = "Quattro di un tipo";
											end_num = 7;
											dquad = num[4];
										}
										if ((num[1] == num[2]) && (num[2] == num[3]) && (num[3] == num[4])) {
											end = "Quattro di un tipo";
											end_num = 7;
											dquad = [0];
										}

										if ((i == 0) && (end_num == 7)) {
											quad1 = num[1];
											dquad1 = dquad;
										} else {
											quad2 = num[1];
											dquad2 = dquad;
										}
									}

									if (end_num == 0) {
										//Scala di 6
										if ((num[0] == 2) && (num[1] == 3) && (num[2] == 4) && (num[3] == 5) && (num[4] == 6)) {
											end = "Scala di 6";
											end_num = 6;
										}

										if ((i == 0) && (end_num == 6))
											scales1 = num[0];
										else
											scales2 = num[0];
									}

									if (end_num == 0) {
										//Scala di 5
										if ((num[0] == 1) && (num[1] == 2) && (num[2] == 3) && (num[3] == 4) && (num[4] == 5)) {
											end = "Scala di 5";
											end_num = 5;
										}

										if ((i == 0) && (end_num == 5))
											scalef1 = num[0];
										else
											scalef2 = num[0];
									}

									if (end_num == 0) {
										//Full House
										var full = 0;
										var fullDouble = 0;
										var fullTris = 0;
										var array_full = [];

										if ((num[0] == num[1]) && (num[1] == num[2])) {
											full++;
											fullTris = num[0];
											array_full.push(num[3]);
											array_full.push(num[4]);
										} else if ((num[1] == num[2]) && (num[2] == num[3])) {
											full++;
											fullTris = num[1];
											array_full.push(num[0]);
											array_full.push(num[4]);
										} else if ((num[2] == num[3]) && (num[3] == num[4])) {
											full++;
											fullTris = num[2];
											array_full.push(num[0]);
											array_full.push(num[1]);
										}

										if (full == 1) {
											if (array_full[0] == array_full[1]) {
												full++;
												fullDouble = array_full[0];
											}

											if (fullDouble != fullTris) {
												if (full == 2) {
													end = "Full";
													end_num = 4;
												}
												if ((i == 0) && (end_num == 4)) {
													full1_d = fullDouble;
													full1_t = fullTris;
												} else {
													if (fullTris == full1_t) {
														full2 = fullDouble;
														full1 = full1_d;
													} else {
														full2 = fullTris;
														full1 = full1_t;
													}
												}
											}
										}
									}

									if (end_num == 0) {
										//Tre di un tipo
										var triple = 0;
										var triple_d = 0;
										if ((num[0] == num[1]) && (num[1] == num[2])) {
											end = "Tre di un tipo";
											end_num = 3;
											triple = num[0];

											if (i == 0) {
												triple_a1 = num[3];
												triple_a2 = num[4];
											} else {
												triple_b1 = num[3];
												triple_b2 = num[4];
											}
										}
										if ((num[1] == num[2]) && (num[2] == num[3])) {
											end = "Tre di un tipo";
											end_num = 3;
											triple = num[1];

											if (i == 0) {
												triple_a1 = num[0];
												triple_a2 = num[4];
											} else {
												triple_b1 = num[0];
												triple_b2 = num[4];
											}
										}
										if ((num[2] == num[3]) && (num[3] == num[4])) {
											end = "Tre di un tipo";
											end_num = 3;
											triple = num[2];

											if (i == 0) {
												triple_a1 = num[0];
												triple_a2 = num[1];
											} else {
												triple_b1 = num[0];
												triple_b2 = num[1];
											}
										}

										if ((i == 0) && (end_num == 3))
											triple1 = triple;
										else {
											triple2 = triple;

											if (triple_a2 == triple_b2) {
												if (triple_a1 >= triple_b1) {
													triple_d1 = triple_a1;
													triple_d2 = 0;
												} else {
													triple_d1 = 0;
													triple_d2 = triple_b1;
												}
											} else {
												if (triple_a2 >= triple_b2) {
													triple_d1 = triple_a2;
													triple_d2 = 0;
												} else {
													triple_d1 = 0;
													triple_d2 = triple_b2;
												}
											}
										}
									}

									if (end_num == 0) {
										//Doppia Coppia
										var double = 0;
										var doubleN = 0;
										var doubleN2 = 0;
										if (num[0] == num[1]) {
											double++;
											doubleN = num[0];
										}
										if (num[1] == num[2]) {
											double++;
											if (double == 2)
												doubleN2 = doubleN;
											if (num[1] > doubleN)
												doubleN = num[1];
										}
										if (num[2] == num[3]) {
											double++;
											if (double == 2)
												doubleN2 = doubleN;
											if (num[2] > doubleN)
												doubleN = num[2];
										}
										if (num[3] == num[4]) {
											double++;
											if (double == 2)
												doubleN2 = doubleN;
											if (num[3] > doubleN)
												doubleN = num[3];
										}
										if (double == 2) {
											end = "Doppia Coppia";
											end_num = 2;
										}

										var checkN = 0;

										if ((i == 0) && (end_num == 2)) {
											dcouple1 = doubleN;
											dcouple1b = doubleN2;

											for (k = 0; k < 5; k++) {
												checkN = 0;
												for (j = 0; j < 5; j++) {
													if (num[k] == num[j])
														checkN++;
												}
												if (checkN == 1)
													dcoupleSolo1 = num[k];
											}
										} else {
											dcouple2 = doubleN;
											dcouple2b = doubleN2;

											for (k = 0; k < 5; k++) {
												checkN = 0;
												for (j = 0; j < 5; j++) {
													if (num[k] == num[j])
														checkN++;
												}
												if (checkN == 1)
													dcoupleSolo2 = num[k];
											}
										}
									}

									if (end_num == 0) {
										//Coppia
										var coup = 0;
										if (num[0] == num[1]) {
											end = "Coppia";
											end_num = 1;
											coup = num[0];
										}
										if (num[1] == num[2]) {
											end = "Coppia";
											end_num = 1;
											coup = num[1];
										}
										if (num[2] == num[3]) {
											end = "Coppia";
											end_num = 1;
											coup = num[2];
										}
										if (num[3] == num[4]) {
											end = "Coppia";
											end_num = 1;
											coup = num[3];
										}

										if ((i == 0) && (end_num == 1))
											couple1 = coup;
										else
											couple2 = coup;
									}

									if (i == 0) {
										final1 = end_num;
										final_n1 = end;
									} else {
										final2 = end_num;
										final_n2 = end;
									}
								}

								var text = "Punti 1: " + final1 + " (" + final_n1 + ")\nPunti 2: " + final2 + " (" + final_n2 + ")";
								//console.log(text);

								if ((final1 == 1) && (final2 == 1)) { //Coppia
									if (couple1 > couple2)
										final1++;
									else
										final2++;
								}
								if ((final1 == 2) && (final2 == 2)) { //Doppia Coppia
									if (dcouple1 > dcouple2)
										final1++;
									else if (dcouple1 == dcouple2) {
										if (dcouple1b > dcouple2b)
											final1++;
										else if (dcouple1b == dcouple2b) {
											if (dcoupleSolo1 > dcoupleSolo2)
												final1++;
											else
												final2++;
										} else
											final2++;
									} else
										final2++;
								}
								if ((final1 == 3) && (final2 == 3)) { //Tris
									if (triple1 == triple2) {
										if (triple_d1 > triple_d2)
											final1++;
										else
											final2++;
									} else {
										if (triple1 > triple2)
											final1++;
										else
											final2++;
									}
								}
								if ((final1 == 4) && (final2 == 4)) { //Full
									if (full1 > full2)
										final1++;
									else
										final2++;
								}
								if ((final1 == 5) && (final2 == 5)) { //Scala 5
									if (scalef1 > scalef2)
										final1++;
									else
										final2++;
								}
								if ((final1 == 6) && (final2 == 6)) { //Scala 6
									if (scales1 > scales2)
										final1++;
									else
										final2++;
								}
								if ((final1 == 7) && (final2 == 7)) { //Quattro uguali
									if (quad1 > quad2)
										final1++;
									else {
										if (quad1 == quad2) {
											if (dquad1 > dquad2)
												final1++;
											else
												final2++;
										} else
											final2++;
									}
								}
								if ((final1 == 8) && (final2 == 8)) { //Cinque uguali
									if (penta1 > penta2)
										final1++;
									else
										final2++;
								}

								if ((final1 == 0) && (final2 == 0)) {
									var n1 = my_comb.split("").sort().join("");
									var n2 = combi.split("").sort().join("");
									if (n2 > n1)
										final2++;
									else
										final1++;
								}

								if (final1 >= final2) {
									var expText = "";
									if (isMatch == 1) {
										expText = " ed ottenuto 3 exp";
										setAchievement(player_id, 13, 1);
										setExp(player_id, 3);
										connection.query('UPDATE player SET ability = ability+2 WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE player SET ability = ability-1 WHERE ability > 0 AND id = ' + toId, function (err, rows, fields) {
											if (err) throw err;
										});
									}
									connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 5', function (err, rows, fields) {
										if (err) throw err;

										var abBonus = 0;
										if (Object.keys(rows).length > 0)
											abBonus = rows[0].ability_level * (rows[0].val / 10);

										var money = ability * 10;

										money += money * (abBonus / 10);
										if (crazyMode == 1)
											money = money * 2;
										money = Math.round(money);

										connection.query("SELECT money FROM player WHERE id = " + toId, function (err, rows, fields) {
											if (err) throw err;

											var noMoneyItemId = 0;
											var noMoneyItemName = "";
											var moneytxt = "<b>" + formatNumber(money) + " ¬ß</b>";
											if (rows[0].money < money) {
												var noItemQuery = connection_sync.query("SELECT item.id, item.name FROM inventory, item WHERE item.id = inventory.item_id AND quantity > 0 AND rarity IN ('NC','R','UR') AND craftable = 1 AND inventory.player_id = " + toId + " ORDER BY RAND() LIMIT 1");
												if (Object.keys(noItemQuery).length > 0) {
													noMoneyItemId = noItemQuery[0].id;
													noMoneyItemName = noItemQuery[0].name;
													moneytxt = "1x <b>" + noMoneyItemName + "</b>";
												} else {
													money = 0;
													moneytxt = "<b>nulla</b>";
												}
											}

											if (noMoneyItemId == 0) {
												connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + toId, function (err, rows, fields) {
													if (err) throw err;
													connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
													});
												});
											} else {
												addItem(player_id, noMoneyItemId);
												delItem(toId, noMoneyItemId);
											}

											connection.query('DELETE FROM heist_progress WHERE from_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;

												var key = 0;
												var key_lost = 0;
												/*
												if (global_end == 1)
													key += 5;
												*/

												connection.query('SELECT ability FROM player ORDER BY ability DESC LIMIT 1', function (err, rows, fields) {
													if (err) throw err;

													var ability_top = rows[0].ability;

													connection.query('SELECT ability FROM player WHERE id = ' + toId, function (err, rows, fields) {
														if (err) throw err;

														if (isMatch == 1) {
															var enemy_ability = rows[0].ability;
															var prob = (Math.sqrt(ability)/Math.sqrt(ability_top)) - ((ability-enemy_ability)/ability);
															/*
															if (global_end == 1)
																prob += 50;
															*/
															if (prob > Math.random())
																key += 1;

															var keys_query = connection_sync.query('SELECT mkeys FROM player WHERE id = ' + toId);
															var rand = Math.random()*100;
															if ((keys_query[0].mkeys > 0) && (rand < 30))
																key_lost += 1;
														}

														var extra = "";
														var extra2 = "";
														if (key+key_lost > 0) {
															extra = " e " + (key+key_lost) + "x Chiave Mistica üóù";
															if (key_lost > 0) {
																extra += " (1 direttamente sgraffignata all'avversario!)";
																extra2 = " ed 1x Chiave Mistica üóù";
															}
															extra += "!";
															setAchievement(player_id, 65, 1);
														}

														connection.query('UPDATE player SET mkeys = mkeys+' + (key+key_lost) + ' WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});

														if (key_lost > 0) {
															connection.query('UPDATE player SET mkeys = mkeys-' + (key_lost) + ' WHERE id = ' + toId, function (err, rows, fields) {
																if (err) throw err;
															});
															setAchievement(player_id, 87, 1);
														}

														bot.sendMessage(message.chat.id, "La tua combinazione di rune (" + my_comb + ") √® migliore di quella del guardiano (" + combi + ")!\nIn una stanzetta all'interno del rifugio hai trovato un sacchettino contenente " + moneytxt + expText + extra, kbBack);

														bot.sendMessage(toChat, message.from.username + " √® riuscito a sconfiggere il guardiano del tuo rifugio, purtroppo avendo lasciato incustodito un sacchettino, hai perso " + moneytxt + extra2, html);
													});

													if (travel <= 2)
														setAchievement(player_id, 8, 1);

													var heistRand = Math.random() * 100;
													if (heist_streak + 1 >= 10) {
														var chestStreak = 4;
														if (heistRand % 2 == 0)
															chestStreak = 5;
														if (heistRand % 15 == 0)
															chestStreak = 6;
														connection.query('UPDATE player SET heist_streak = 0 WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															addChest(player_id, chestStreak);
															connection.query('SELECT name FROM chest WHERE id = ' + chestStreak, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Per aver sconfitto 10 guardiani hai ricevuto uno <b>" + rows[0].name + "</b>!", html);
															});
														});
													} else {
														connection.query('UPDATE player SET heist_streak = heist_streak+1 WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}
												});
											});
										});
									});

									var d = new Date();
									var history_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

									connection.query('INSERT INTO heist_history (from_id, to_id, rate1, fail, time, matchmaking) VALUES ' +
													 '(' + player_id + ', ' + toId + ', 0, 0, "' + history_date + '", ' + isMatch + ')',
													 function (err, rows, fields) {
										if (err) throw err;
									});

									if ((snowHouse == 1) && (snowHouseEnd == 0)) {
										var rand = Math.random()*100;
										if (rand < 50) {
											connection.query('SELECT COUNT(id) As cnt FROM event_snowball_status WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												if (rows[0].cnt > 0) {
													connection.query('SELECT COUNT(id) As cnt FROM event_snowball_list WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														var snowball = 1+parseInt(rows[0].cnt);
														connection.query('UPDATE event_snowball_status SET snowball = snowball+' + snowball + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															if (snowball > 1)
																bot.sendMessage(message.chat.id, "Hai trovato " + snowball + " Palle di Neve!");
															else
																bot.sendMessage(message.chat.id, "Hai trovato 1 Palla di Neve!");
															console.log(snowball + " palle di neve a " + message.from.username);
														});
													});
												}
											});
										};
									};
								} else {
									var expText = "";
									if (isMatch == 1) {
										expText = " (ottieni 1 exp)";
										setExp(player_id, 1);
										connection.query('UPDATE player SET ability = ability-2 WHERE ability > 0 AND id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE player SET ability = ability+1 WHERE id = ' + toId, function (err, rows, fields) {
											if (err) throw err;
										});
									}

									connection.query('DELETE FROM heist_progress WHERE from_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "La tua combinazione di rune (" + my_comb + ") √® peggiore di quella del guardiano (" + combi + ")! Il portone del rifugio si blocca ed il tuo gnomo √® costretto a tornare indietro" + expText, kbBack);

										bot.sendMessage(toChat, "Lo gnomo di <b>" + message.from.username + "</b> non √® riuscito a sconfiggere il guardiano del tuo portone, cos√¨ √® stato respinto", html);
									});

									var d = new Date();
									var history_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

									connection.query('INSERT INTO heist_history (from_id, to_id, rate1, fail, time, matchmaking) VALUES ' +
													 '(' + player_id + ', ' + toId + ', 0, 1, "' + history_date + '", ' + isMatch + ')',
													 function (err, rows, fields) {
										if (err) throw err;
									});
								}
							} else if (answer.text == "Rinuncia") {
								bot.sendMessage(message.chat.id, "Sicuro di voler rinunciare all'ispezione? Perderai 2 punti abilit√†", kbYesNo).then(function () {
									answerCallbacks[message.chat.id] = function (answer) {
										if (answer.text.toLowerCase() == "si") {
											connection.query('DELETE FROM heist_progress WHERE from_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Hai deciso di rinunciare all'ispezione", back);
												bot.sendMessage(toChat, "<b>" + message.from.username + "</b> ha rinunciato all'ispezione nel tuo rifugio", html);
											});

											connection.query('UPDATE player SET ability = ability-1 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											connection.query('UPDATE player SET ability = ability+1 WHERE id = ' + toId, function (err, rows, fields) {
												if (err) throw err;
											});

											var d = new Date();
											var history_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

											connection.query('INSERT INTO heist_history (from_id, to_id, rate1, fail, time, matchmaking) VALUES (' + player_id + ', ' + toId + ', 0, 1, "' + history_date + '", ' + isMatch + ')', function (err, rows, fields) {
												if (err) throw err;
											});
										}
									};
								});
							} else if (answer.text == "Regole") {
								bot.sendMessage(message.chat.id, "Regole dello Scontro tra Rune:\nPer vincere contro il guardiano dovrai possedere una combinazione di rune con un valore pi√π alto delle sue, in base a questo schema:\n- Coppia (2 uguali)\n- Doppia Coppia (2 coppie)\n- Tris (tre uguali)\n- Full (coppia e tris)\n- Scala (quella da 2 a 6 batte quella da 1 a 5)\n- 4 Uguali\n- 5 Uguali\n\nInoltre in caso di parit√† vincer√† il difensore, non c'√® il concetto di Runa 'alta'\nPuoi cambiarne 1 o pi√π inviando lo gnomo, oppure rinunciare, in questo caso verr√† considerata come un'ispezione persa", rBack);
							}
						};
					});
				});
			} else
				bot.sendMessage(message.chat.id, "Il tuo gnomo non √® appostato a nessun rifugio", back);
		});
	});
});

bot.onText(/^rifugio|Torna al rifugio|^ispezione$/i, function (message) {

	if (message.text.indexOf("Elettricista") != -1)
		return;

	connection.query('SELECT account_id, holiday, id, exp, house_id, life, reborn, ability, heist_protection, heist_streak, custom_name_h, heist_count, spy_count, gender, heist_limit FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var player_id = rows[0].id;
		var myexp = rows[0].exp;
		var house_id = rows[0].house_id;
		var lev = Math.floor(myexp / 10);
		var life = rows[0].life;
		var reborn = rows[0].reborn;
		var ability = rows[0].ability;
		var heist_protection = rows[0].heist_protection;
		var heist_streak = rows[0].heist_streak;
		var custom_name_h = rows[0].custom_name_h;
		var heist_count = rows[0].heist_count;
		var spy_count = rows[0].spy_count;
		var heist_limit = rows[0].heist_limit;
		var heist_limit_val = 3;

		var gender_text = "a";
		if (rows[0].gender == "M")
			gender_text = "o";

		if ((lev < 15) && (reborn == 1)) {
			bot.sendMessage(message.chat.id, "Il tuo livello √® ancora troppo basso, torna quando avrai raggiunto il livello 15.", back);
			return;
		}

		connection.query('SELECT 1 FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length > 0)
				heist_limit_val = 10;

			var iKeys = [];
			connection.query('SELECT 1 FROM heist_progress WHERE from_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0)
					iKeys.push(["Contatta lo Gnomo üí≠"]);
				iKeys.push(["Ispezione üî¶", "Spia Rifugio üëÄ"]);
				iKeys.push(["Prelevazione üåê", "Migliora Rifugio üèï", "Protezione üí´"]);
				iKeys.push(["Ispezioni passate üìÉ"]);
				iKeys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: iKeys
					}
				};

				//var cost = Math.min(2000, ability*10);

				var kb2 = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						keyboard: [["Matchmaking (2.000 ¬ß)"], ["Inserisci il Nickname (3.000 ¬ß)"], ["Torna al Rifugio"]]
					}
				};

				connection.query('SELECT name FROM house WHERE id = ' + house_id, function (err, rows, fields) {
					if (err) throw err;

					if (custom_name_h != null)
						rifugio = "Rifugio " + custom_name_h + " (" + house_id + ")";
					else
						rifugio = rows[0].name + " (" + house_id + ")";

					bot.sendMessage(message.chat.id, "Bentornat" + gender_text + " nel tuo üèï *" + rifugio + "*, possiedi *" + ability + "* punti abilit√†!\nPuoi ancora effettuare " + ((10 - heist_count) < 0 ? 0 : (10 - heist_count)) + " ispezioni, subirne " + ((heist_limit_val - heist_limit) < 0 ? 0 : (heist_limit_val - heist_limit)) + " e spiare " + (30 - spy_count) + " giocatori.", kb).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text.indexOf("Ispezione") != -1) {
								connection.query('SELECT id FROM heist_progress WHERE from_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length > 0) {
										bot.sendMessage(message.chat.id, "Stai svolgendo un ispezione, completala prima di iniziarne un'altra", back);
										return;
									}

									connection.query('SELECT datetime FROM heist WHERE from_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length > 0) {
											var date = new Date(rows[0].datetime);
											var short_date = addZero(date.getHours()) + ":" + addZero(date.getMinutes());
											var text = "Ispezione in corso fino alle " + short_date;
											bot.sendMessage(message.chat.id, text, abort_heist);
											return;
										}

										if (heist_protection != null) {
											bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi ispezionare gli altri utenti", back);
											return;
										}

										bot.sendMessage(message.chat.id, "Invia uno gnomo ad un rifugio di un altro giocatore per cercare di ottenere il suo bottino e una Chiave Mistica, puoi usare il Matchmaking per sceglierlo casualmente (esclusi i compagni di team, di accademia o madre) in base alla tua abilit√† oppure inserire il suo nickname", kb2);
									});
								});
							}
						};
					});
				});
			});
		});
	});
});

bot.onText(/Ispezioni Passate/i, function (message) {
	connection.query('SELECT account_id, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT P1.nickname As from_nick, P2.nickname As to_nick, fail, time, matchmaking FROM heist_history H INNER JOIN player P1 ON H.from_id = P1.id INNER JOIN player P2 ON H.to_id = P2.id WHERE from_id = ' + player_id + ' OR to_id = ' + player_id + ' ORDER BY time DESC', function (err, rows, fields) {
			if (err) throw err;

			var text = "<b>Ispezioni passate</b>:\n\n";
			var d;
			var long_date;
			var fail = "";
			var sent = "<b>Inviate</b>:\n";
			var received = "\n<b>Subite</b>:\n";
			var limit = 25;
			var limitSent = 0;
			var limitReceived = 0;
			var isMatchmaking = "";
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				d = new Date(rows[i].time);
				long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1);

				fail = "";
				isMatchmaking = "";
				if (rows[i].matchmaking != null) {
					if (rows[i].matchmaking == 1)
						isMatchmaking = " (Matchmaking)";
					else
						isMatchmaking = " (Mirata)";
				}

				if (message.from.username == rows[i].from_nick) {
					if (limitSent < limit) {
						if (rows[i].fail == 0)
							fail = "Vinta ‚úÖ";
						else
							fail = "Persa ‚ùå";
						sent += "> " + fail + " contro <i>" + rows[i].to_nick + "</i> alle " + long_date + isMatchmaking + "\n";
						limitSent++;
					}
				} else {
					if (limitReceived < limit) {
						if (rows[i].fail == 0)
							fail = "Persa ‚ùå";
						else
							fail = "Vinta ‚úÖ";
						received += "> " + fail + " contro <i>" + rows[i].from_nick + "</i> alle " + long_date + isMatchmaking + "\n";
						limitReceived++;
					}
				}

				if ((limitSent >= limit) && (limitReceived >= limit))
					break;
			}

			bot.sendMessage(message.chat.id, text + sent + received, back_html);
		});
	});
});

bot.onText(/matchmaking|^mm$/i, function (message) {
	connection.query('SELECT account_id, holiday, heist_protection, exp, reborn, ability, id, weapon, life, house_id, money, heist_count, last_mm, global_end, boost_id, boost_mission, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (rows[0].heist_protection != null) {
			bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi ispezionare gli altri utenti", back);
			return;
		}

		var myexp = rows[0].exp;
		var lev = Math.floor(myexp / 10)
		var reborn = rows[0].reborn;
		var myab = rows[0].ability;
		var from_id = rows[0].id;
		var weapon_bonus = rows[0].weapon;
		var life = rows[0].life;
		var house_id = rows[0].house_id;
		var money = rows[0].money;
		var heist_count = rows[0].heist_count;
		var last_mm = rows[0].last_mm;
		var global_end = rows[0].global_end;
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;

		var travel = rows[0].travel_id;
		var cave = rows[0].cave_id;

		if ((life <= 0) && (myexp > 10)) {
			bot.sendMessage(message.chat.id, "Non puoi iniziare ispezioni da esausto.", revive);
			return;
		}

		if ((lev < 15) && (reborn == 1)) {
			bot.sendMessage(message.chat.id, "Il tuo livello √® ancora troppo basso, torna quando avrai raggiunto il livello 15.", back);
			return;
		}

		connection.query('SELECT id FROM heist_progress WHERE from_id = ' + from_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				bot.sendMessage(message.chat.id, "Stai svolgendo un ispezione, completala prima di iniziarne un'altra", back);
				return;
			}

			connection.query('SELECT datetime FROM heist WHERE from_id = ' + from_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					var date = new Date(rows[0].datetime);
					var short_date = addZero(date.getHours()) + ":" + addZero(date.getMinutes());
					var text = "Ispezione in corso fino alle " + short_date;
					if (wanted == 0)
						bot.sendMessage(message.chat.id, text, abort_heist);
					else
						bot.sendMessage(message.chat.id, text, back);
					return;
				}

				if (heist_count >= 10) {
					bot.sendMessage(message.chat.id, "Puoi ispezionare un rifugio solamente 10 volte al giorno, riprova domani.", back);
					return;
				}

				if (money < 2000) {
					bot.sendMessage(message.chat.id, "Non hai abbastanza monete!", back);
					return;
				}

				connection.query('SELECT team_id FROM team_player WHERE player_id = ' + from_id, function (err, rows, fields) {
					if (err) throw err;

					var team_id = 0;
					var my_team_id = 0;
					var heist_limit = 3;
					if (Object.keys(rows).length > 0) {
						team_id = rows[0].team_id;
						my_team_id = rows[0].team_id;
						heist_limit = 10;
					}

					connection.query('SELECT child_team FROM team WHERE id = ' + my_team_id, function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0) {
							if (rows[0].child_team != null)
								team_id += "," + rows[0].child_team;
						}

						connection.query('SELECT id FROM team WHERE child_team = ' + my_team_id, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length > 0)
								team_id += "," + rows[0].id;

							var offset = Math.round(myab / 2);
							var offset2 = Math.round(myab / 2);
							var limit = 50;
							var count = 100;
							var i = 0;
							var minexp = 150;
							var found = 0;
							var rand;

							for(i = 0; i < 15; i++) {
								var rows = connection_sync.query("SELECT nickname, exp, team_player.team_id FROM player, team_player WHERE player.heist_limit+(SELECT COUNT(id) FROM heist WHERE to_id = player.id) < " + heist_limit + " AND player.account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) AND team_player.player_id = player.id AND team_player.team_id NOT IN (" + team_id + ") AND heist_protection IS NULL AND ability BETWEEN " + (myab - offset) + " AND " + (myab + offset2) + " AND player.id != " + from_id + " AND money > 0 AND exp > " + minexp + " AND holiday = 0 AND player.id != " + last_mm + " ORDER BY ability DESC, heist_limit ASC, RAND() LIMIT " + limit);

								if (Object.keys(rows).length < 10) {
									offset += i*20;
									offset2 += i*20;
								} else {
									rand = Math.floor(Math.random() * Object.keys(rows).length);
									attack(rows[rand].nickname, message, from_id, weapon_bonus, 2000, 1, global_end, boost_id, boost_mission);
									found = 1;
									break;
								}
							}

							if (found == 0)
								bot.sendMessage(message.chat.id, "Nessun giocatore adatto trovato, riprova.", back);
						});
					});
				});
			});
		});
	});
});

bot.onText(/inserisci il nickname|ispeziona: /i, function (message) {
	connection.query('SELECT account_id, holiday, heist_protection, exp, reborn, id, weapon, life, house_id, money, heist_count, global_end, boost_id, boost_mission, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (wanted == 0) {
			if (rows[0].heist_protection != null) {
				bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi ispezionare gli altri utenti", back);
				return;
			}
		}

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna al rifugio"], ["Torna al menu"]]
			}
		};

		var myexp = rows[0].exp;
		var lev = Math.floor(myexp / 10);
		var reborn = rows[0].reborn;
		var from_id = rows[0].id;
		var weapon_bonus = rows[0].weapon;
		var life = rows[0].life;
		var house_id = rows[0].house_id;
		var money = rows[0].money;
		var heist_count = rows[0].heist_count;
		var global_end = rows[0].global_end;
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;

		if ((lev < 15) && (reborn == 1)) {
			bot.sendMessage(message.chat.id, "Il tuo livello √® ancora troppo basso.", back);
			return;
		}

		var travel = rows[0].travel_id;
		var cave = rows[0].cave_id;

		connection.query('SELECT datetime FROM heist WHERE from_id = ' + from_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				var date = new Date(rows[0].datetime);
				var short_date = addZero(date.getHours()) + ":" + addZero(date.getMinutes());
				var text = "Ispezione in corso fino alle " + short_date;
				if (wanted == 0)
					bot.sendMessage(message.chat.id, text, back);
				else
					bot.sendMessage(message.chat.id, text, abort_heist);
				return;
			}
			connection.query('SELECT id FROM heist_progress WHERE from_id = ' + from_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					bot.sendMessage(message.chat.id, "Stai svolgendo un ispezione, completala prima di iniziarne un'altra", back);
					return;
				}

				connection.query('SELECT wanted_id FROM event_wanted_status WHERE player_id = ' + from_id, function (err, rows, fields) {
					if (err) throw err;

					var wanted_id = 0;
					if ((wanted == 1) && (Object.keys(rows).length > 0))
						wanted_id = rows[0].wanted_id;

					if (money < 3000) {
						bot.sendMessage(message.chat.id, "Non hai abbastanza monete!", back);
						return;
					}

					if (message.text.indexOf(":") != -1) {
						var usr = message.text.substring(message.text.indexOf(":") + 2).replace("@", "").trim();
						//console.log(usr);

						if (message.from.username.toLowerCase() == usr.toLowerCase()) {
							bot.sendMessage(message.chat.id, "Non puoi ispezionare te stesso.", back);
							return;
						}

						usr = usr.replace(/[^\w\s]/gi, '');

						connection.query('SELECT id, nickname, account_id, reborn, holiday FROM player WHERE nickname = "' + usr + '"', function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length > 0) {
								var banReason = isBanned(rows[0].account_id);
								if (banReason != null) {
									bot.sendMessage(message.chat.id, "Non puoi ispezionare un giocatore bannato", back);
									return;
								}

								var nickname = rows[0].nickname;
								var d = new Date();
								var time = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate());

								if ((wanted == 0) && (rows[0].id != wanted_id)) {
									if (reborn > rows[0].reborn) {
										bot.sendMessage(message.chat.id, "Puoi ispezionare solamente un giocatore con una rinascita pari o superiore alla tua", back);
										return;
									}
									if (heist_count >= 10) {
										bot.sendMessage(message.chat.id, "Puoi ispezionare un rifugio solamente 10 volte al giorno, riprova domani.", back);
										return;
									}
								}

								if (rows[0].holiday == 1) {
									bot.sendMessage(message.chat.id, "Non puoi ispezionare un giocatore in modalit√† vacanza.", back);
									return;
								}

								var to_id = rows[0].id;

								var rows = connection_sync.query('SELECT id FROM heist_history WHERE from_id = ' + from_id + ' AND to_id = ' + to_id + ' AND time LIKE "' + time + '%"');
								if ((Object.keys(rows).length > 2) && (wanted == 0)) {
									bot.sendMessage(message.chat.id, "Hai ispezionato troppe volte questo giocatore oggi, riprova domani.");
									return;
								}

								var rows = connection_sync.query('SELECT id FROM heist_history WHERE from_id = ' + from_id + ' AND to_id = ' + to_id + ' AND time > DATE_SUB("' + time + '", INTERVAL 7 DAY)');
								if ((Object.keys(rows).length > 10) && (wanted == 0)) {
									bot.sendMessage(message.chat.id, "Hai ispezionato troppe volte questo giocatore durante gli ultimi 7 giorni.");
									return;
								}

								attack(nickname, message, from_id, weapon_bonus, 3000, 0, global_end, boost_id, boost_mission);
							} else
								bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova.", back);
						});
						return;
					}

					bot.sendMessage(message.chat.id, "Inserisci il nickname del giocatore da sfidare.\n*OPPURE* puoi ispezionare un giocatore scrivendo *Ispeziona: Nomeutente*", kbBack).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text.indexOf(":") != -1)
								return;
							if (answer.text == "Torna al menu")
								return;

							answer.text = answer.text.replace("@", "").trim();

							if (message.from.username.toLowerCase() == answer.text.toLowerCase()) {
								bot.sendMessage(message.chat.id, "Non puoi ispezionare te stesso.", back);
								return;
							}

							connection.query('SELECT nickname, reborn, id, account_id, holiday FROM player WHERE nickname = "' + answer.text + '"', function (err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length > 0) {

									var banReason = isBanned(rows[0].account_id);
									if (banReason != null) {
										bot.sendMessage(message.chat.id, "Non puoi ispezionare un giocatore bannato", back);
										return;
									}

									var nickname = rows[0].nickname;
									var d = new Date();
									var time = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate());

									if ((wanted == 0) && (rows[0].id != wanted_id)) {
										if (reborn > rows[0].reborn) {
											bot.sendMessage(message.chat.id, "Puoi ispezionare solamente un giocatore con una rinascita pari o superiore alla tua", back);
											return;
										}
										if (heist_count >= 10) {
											bot.sendMessage(message.chat.id, "Puoi ispezionare un rifugio solamente 10 volte al giorno, riprova domani.", back);
											return;
										}
									}

									if (rows[0].holiday == 1) {
										bot.sendMessage(message.chat.id, "Non puoi ispezionare un giocatore in modalit√† vacanza.", back);
										return;
									}

									var to_id = rows[0].id;

									var rows = connection_sync.query('SELECT id FROM heist_history WHERE from_id = ' + from_id + ' AND to_id = ' + to_id + ' AND time LIKE "' + time + '%"');
									if ((Object.keys(rows).length > 2) && (wanted == 0)) {
										bot.sendMessage(message.chat.id, "Hai ispezionato troppe volte questo giocatore oggi, riprova domani.");
										return;
									}

									var rows = connection_sync.query('SELECT id FROM heist_history WHERE from_id = ' + from_id + ' AND to_id = ' + to_id + ' AND time > DATE_SUB("' + time + '", INTERVAL 7 DAY)');
									if ((Object.keys(rows).length > 10) && (wanted == 0)) {
										bot.sendMessage(message.chat.id, "Hai ispezionato troppe volte questo giocatore durante gli ultimi 7 giorni.");
										return;
									}

									attack(nickname, message, from_id, weapon_bonus, 3000, 0, global_end, boost_id, boost_mission);
								} else
									bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova.", back);
							});
						};
					});
				});
			});
		});
	});
});

bot.onText(/^protezione/i, function (message) {

	if (message.text.toLowerCase().indexOf("protezione di stoffa") != -1)
		return;

	connection.query('SELECT id, heist_protection FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		var deleteProtection = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Annulla protezione"], ["Torna al menu"]]
			}
		};

		if (rows[0].heist_protection != null) {
			bot.sendMessage(message.chat.id, "Il campo di forza √® gi√† attivo.", deleteProtection);
			return;
		}

		if (getItemCnt(player_id, 237) == 0) {
			bot.sendMessage(message.chat.id, "Ti serve il Campo di Forza.", back);
			return;
		}

		bot.sendMessage(message.chat.id, "Il Campo di Forza ti fornir√† protezione dalle Ispezioni per 24 ore, ma intanto non potrai ispezionare, confermi?\nNe possiedi ancora " + getItemCnt(player_id, 237), yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				var conf = answer.text;
				if (conf == "Si") {

					if (getItemCnt(player_id, 237) == 0) {
						bot.sendMessage(message.chat.id, "Ti serve il Campo di Forza.", back);
						return;
					}

					var now = new Date();
					now.setHours(now.getHours() + 24);
					var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
					var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + " del " + addZero(now.getDate()) + "/" + addZero(now.getMonth() + 1);

					connection.query('UPDATE player SET heist_protection = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Sei protetto fino alle " + short_date, back);
					});
					delItem(player_id, 237, 1);
				}
			};
		});
	});
});

bot.onText(/^annulla protezione$/i, function (message) {
	connection.query('SELECT id, heist_protection FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		if (rows[0].heist_protection == null) {
			bot.sendMessage(message.chat.id, "Il campo di forza non √® attivo.", deleteProtection);
			return;
		}

		connection.query('UPDATE player SET heist_protection = NULL WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Hai annullato la protezione!", back);
		});
	});
});

bot.onText(/^prelevazione/i, function (message) {
	connection.query('SELECT house_id, money, id, reborn, total_life, heist_protection FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var house_id = rows[0].house_id;
		var money = rows[0].money;
		var from_id = rows[0].id;
		var reborn = rows[0].reborn;
		var totlife1 = rows[0].total_life;

		var pre = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Preleva", "Estrai"], ["Torna al rifugio"], ["Torna al menu"]]
			}
		};

		var pBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Prelevazione"], ["Torna al menu"]]
			}
		};

		if (lootteria == 1) {
			bot.sendMessage(message.chat.id, "Durante la lootteria non puoi usare la capsula, monello üåù", back);
			return;
		}

		if (rows[0].heist_protection != null) {
			bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi utilizzare le capsule", back);
			return;
		}

		var itemCnt1 = getItemCnt(from_id, 220);
		var itemCnt2 = getItemCnt(from_id, 618);

		bot.sendMessage(message.chat.id, "Seleziona il tipo di capsula da utilizzare.\nPrelevando otterrai un oggetto E o L da un giocatore casuale (ne possiedi " + itemCnt1 + ")\nEstraendo otterrai uno scrigno ed un giocatore casuale dovr√† pagarlo per te (ne possiedi " + itemCnt2 + ")", pre).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {

				if (answer.text == "Torna al menu")
					return;

				if ((answer.text != "Preleva") && (answer.text != "Estrai")) {
					bot.sendMessage(message.chat.id, "Tipo non valido!", back);
					return;
				}

				var cId = 0;
				var t = "";

				if (answer.text == "Preleva")
					cId = 220;
				else if (answer.text == "Estrai")
					cId = 618;

				connection.query('SELECT team_id FROM team_player WHERE player_id = ' + from_id, function (err, rows, fields) {
					if (err) throw err;

					var team_id = 0;
					if (Object.keys(rows).length > 0) {
						team_id = parseInt(rows[0].team_id);
					}

					bot.sendMessage(message.chat.id, "Sicuro di voler continuare? Verr√† selezionato un giocatore casuale come bersaglio", yesno).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text.toLowerCase() == "si") {
								if (getItemCnt(from_id, cId) == 0) {
									bot.sendMessage(message.chat.id, "Ti serve una Capsula del tipo selezionato.", back);
									return;
								}

								if (cId == 220) {
									if (getItemCnt(from_id, cId) == 0) {
										bot.sendMessage(message.chat.id, "Non possiedi la Capsula necessaria", pBack);
										return;
									}

									connection.query("SELECT player.id As player_id, player.nickname, player.house_id, player.chat_id FROM inventory, item, player, team_player WHERE team_player.player_id = player.id AND player.reborn >= " + reborn + " AND player.market_ban = 0 AND player.capsule_limit < 5 AND player.id = inventory.player_id AND inventory.item_id = item.id AND player.id != 3 AND player.heist_protection IS NULL AND item.rarity IN ('E','L') AND player.id != " + from_id + " AND team_player.team_id != " + team_id + " AND inventory.quantity > 0 GROUP BY nickname ORDER BY RAND() LIMIT 1", function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Non ci sono utenti prelevabili con questo tipo di capsula.", pBack);
											return;
										}

										var house_id = rows[0].house_id;
										var chat_id = rows[0].chat_id;
										var to_id = rows[0].player_id;
										var nickname = rows[0].nickname;

										connection.query('SELECT item.name, inventory.item_id FROM item, inventory WHERE inventory.item_id = item.id AND inventory.player_id = ' + to_id + ' AND (item.rarity = "E" OR item.rarity = "L") AND inventory.quantity > 0 ORDER BY RAND()', function (err, rows, fields) {
											if (err) throw err;

											var itemId = rows[0].item_id;

											connection.query('SELECT name FROM item WHERE id = ' + itemId, function (err, rows, fields) {
												if (err) throw err;
												var itemName = rows[0].name;
												addItem(from_id, itemId);
												delItem(to_id, itemId, 1);
												delItem(from_id, 220, 1);

												var randStone = Math.round(Math.random() * 3);
												var stone_id = 70 + randStone;
												connection.query('SELECT name FROM item WHERE id = ' + stone_id, function (err, rows, fields) {
													if (err) throw err;

													var stone_name = rows[0].name;
													addItem(from_id, stone_id, 3);

													bot.sendMessage(message.chat.id, "Sei riuscito a rubare <b>" + itemName + "</b> da <b>" + nickname + "</b> ed il druido delle prelevazioni ti ha premiato con 3x " + stone_name + "!", back_html);
													if (house_id != 6) {
														bot.sendMessage(chat_id, "Un truffatore professionista √® riuscito a rubarti *" + itemName + "* dallo zaino!", mark);
													} else {
														bot.sendMessage(chat_id, "Un truffatore di nome <b>" + message.from.username + "</b> √® riuscito a rubarti <b>" + itemName + "</b> dallo zaino!", html);
													}

													setAchievement(from_id, 47, 1);

													var d = new Date();
													d.setHours(d.getHours() + 48);
													var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

													connection.query('UPDATE player SET capsule_limit = capsule_limit+1 WHERE id = ' + to_id, function (err, rows, fields) {
														if (err) throw err;
													});

													var rand = Math.random() * 200;
													if ((rand < 3) && (reborn >= 3)) {
														addItem(from_id, 532);
														bot.sendMessage(message.chat.id, "Un *Urlo di Morte* rieccheggia in lontananza... Wow!", mark);
													}
												});
											});
										});
									});
								} else if (cId == 618) {
									var chest = "";
									var money = 0;
									if ((reborn == 1) || (reborn == 2)) {
										var rand = Math.round(Math.random());
										if (rand == 1) {
											chest = 1;
											money = 1200;
										} else {
											chest = 2;
											money = 2400;
										}
									} else if (reborn == 3) {
										var rand = Math.round(Math.random());
										if (rand == 1) {
											chest = 3;
											money = 4800;
										} else {
											chest = 4;
											money = 7200;
										}
									} else if ((reborn == 4) || (reborn == 5)) {
										var rand = Math.round(Math.random());
										if (rand == 1) {
											chest = 5;
											money = 14000;
										} else {
											chest = 6;
											money = 30000;
										}
									}

									connection.query("SELECT player.id, nickname, house_id, chat_id FROM player, team_player WHERE team_player.player_id = player.id AND reborn >= " + reborn + " AND market_ban = 0 AND capsule_limit < 5 AND heist_protection IS NULL AND money > " + money + " AND player.id != 3 AND player.id != " + from_id + " AND team_player.team_id != " + team_id + " ORDER BY RAND() LIMIT 1", function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0) {
											bot.sendMessage(message.chat.id, "Non ci sono utenti prelevabili con questo tipo di capsula.", pBack);
											return;
										}

										var house_id = rows[0].house_id;
										var chat_id = rows[0].chat_id;
										var to_id = rows[0].id;
										var nickname = rows[0].nickname;

										if (getItemCnt(from_id, cId) == 0) {
											bot.sendMessage(message.chat.id, "Non possiedi la Capsula necessaria", pBack);
											return;
										}

										connection.query('SELECT name FROM chest WHERE id = ' + chest, function (err, rows, fields) {
											if (err) throw err;
											var chestName = rows[0].name;
											addChest(from_id, chest);

											connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + to_id, function (err, rows, fields) {
												if (err) throw err;
											});

											delItem(from_id, 618, 1);

											var randStone = Math.round(Math.random() * 3);
											var stone_id = 70 + randStone;
											connection.query('SELECT name FROM item WHERE id = ' + stone_id, function (err, rows, fields) {
												if (err) throw err;

												var stone_name = rows[0].name;
												addItem(from_id, stone_id, 3);

												bot.sendMessage(message.chat.id, "Hai ottenuto uno <b>" + chestName + "</b>! Mentre <b>" + nickname + "</b> √® stato costretto a sborsare " + formatNumber(money) + " ¬ß. Intanto il druido delle prelevazioni ti ha premiato con 3x " + stone_name + "!", back_html);
												if (house_id != 6) {
													bot.sendMessage(chat_id, "Uno scassinatore professionista ti ha costretto a sborsare " + formatNumber(money) + " ¬ß per il suo scrigno!");
												} else {
													bot.sendMessage(chat_id, "Un truffatore di nome <b>" + message.from.username + "</b> ti ha costretto a sborsare <b>" + formatNumber(money) + "</b> ¬ß per il suo scrigno!", html);
												}

												setAchievement(from_id, 47, 1);

												var d = new Date();
												d.setHours(d.getHours() + 48);
												var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

												connection.query('UPDATE player SET capsule_limit = capsule_limit+1 WHERE id = ' + to_id, function (err, rows, fields) {
													if (err) throw err;
												});

												var rand = Math.random() * 200;
												if ((rand < 5) && (reborn >= 3)) {
													addItem(from_id, 532);
													bot.sendMessage(message.chat.id, "Un *Urlo di Morte* rieccheggia in lontananza... Wow!", mark);
												}
											});
										});
									});
								}
							};
						};
					});
				});
			};
		});
	});
});

bot.onText(/migliora rifugio/i, function (message) {
	connection.query('SELECT house_id, money, id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var house_id = rows[0].house_id;
		var money = rows[0].money;
		var from_id = rows[0].id;

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if ((house_id + 1) > 6) {
			var kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna al rifugio"], ["Torna al menu"]]
				}
			};

			bot.sendMessage(message.chat.id, "Hai raggiunto il limite massimo di upgrade del rifugio.", kbBack);
			return;
		}

		var level_text = "";
		var level = [];
		var level_money = 0;

		if ((house_id + 1) == 2) {
			level_text = "> Cemento Armato\n> Materiale da Costruzione\n> Marmo";
			level = [144, 145, 148];
			level_money = 1500;
		} else if ((house_id + 1) == 3) {
			level_text = "> Progetto di Costruzione\n> Materiale da Costruzione\n> Marmo";
			level = [147, 145, 148];
			level_money = 3000;
		} else if ((house_id + 1) == 4) {
			level_text = "> Progetto di Costruzione\n> Titanite\n> Marmo";
			level = [147, 149, 148];
			level_money = 4500;
		} else if ((house_id + 1) == 5) {
			level_text = "> Progetto di Costruzione\n> Titanite\n> Oro Nero";
			level = [147, 149, 105];
			level_money = 7000;
		} else if ((house_id + 1) == 6) {
			level_text = "> Progetto Definitivo\n> Congegno Parallelo\n> Cella Blindata";
			level = [359, 367, 370];
			level_money = 10000;
		}

		var check1 = "‚úÖ";
		var check2 = "‚úÖ";
		var check3 = "‚úÖ";

		if (getItemCnt(from_id, level[0]) == 0)
			check1 = "";

		if (getItemCnt(from_id, level[1]) == 0)
			check2 = "";

		if (getItemCnt(from_id, level[2]) == 0)
			check3 = "";

		if ((house_id + 1) == 2)
			level_text = "> Cemento Armato " + check1 + "\n> Materiale da Costruzione " + check2 + "\n> Marmo " + check3;
		else if ((house_id + 1) == 3)
			level_text = "> Progetto di Costruzione " + check1 + "\n> Materiale da Costruzione " + check2 + "\n> Marmo " + check3;
		else if ((house_id + 1) == 4)
			level_text = "> Progetto di Costruzione " + check1 + "\n> Titanite " + check2 + "\n> Marmo " + check3;
		else if ((house_id + 1) == 5)
			level_text = "> Progetto di Costruzione " + check1 + "\n> Titanite " + check2 + "\n> Oro Nero " + check3;
		else if ((house_id + 1) == 6)
			level_text = "> Progetto Definitivo " + check1 + "\n> Congegno Parallelo " + check2 + "\n> Cella Blindata " + check3;

		bot.sendMessage(message.chat.id, "Per passare al livello " + (house_id + 1) + " del rifugio devi possedere i seguenti oggetti:\n" + level_text + "\nOltre a " + level_money + " ¬ß", yesno).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				var action = answer.text;
				if (action == "Torna al menu")
					return;

				if (money < level_money) {
					bot.sendMessage(message.chat.id, "Non hai abbastanza monete!", back);
					return;
				}

				if (getItemCnt(from_id, level[0]) == 0) {
					bot.sendMessage(message.chat.id, "Non possiedi il primo oggetto richiesto.", back);
					return;
				}
				if (getItemCnt(from_id, level[1]) == 0) {
					bot.sendMessage(message.chat.id, "Non possiedi il secondo oggetto richiesto.", back);
					return;
				}
				if (getItemCnt(from_id, level[2]) == 0) {
					bot.sendMessage(message.chat.id, "Non possiedi il terzo oggetto richiesto.", back);
					return;
				}

				connection.query('UPDATE player SET house_id = house_id+1, money = money-' + level_money + ' WHERE id = ' + from_id, function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Potenziamento completato!", back);
				});

				delItem(from_id, level[0], 1);
				delItem(from_id, level[1], 1);
				delItem(from_id, level[2], 1);
			};
		});
	});
});

bot.onText(/itinerario propizio|itinerari|regioni/i, function (message) {

	if (specialMission == 0)
		return;

	var d = new Date();
	if ((d.getDay() != 6) && (d.getDay() != 0)) {
		bot.sendMessage(message.chat.id, "Oggi l'evento non √® disponibile, torna nel weekend.", back);
		return;
	}

	connection.query('SELECT account_id, holiday, mission_special_id, mission_special_time_end, mission_id, mission_party, id, boost_id, boost_mission, charm_id, life, exp, reborn, money, class, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (rows[0].mission_special_id != 0) {
			var time = new Date(rows[0].mission_special_time_end);
			bot.sendMessage(message.chat.id, "Sei in itinerario fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()), back);
			return;
		}

		if (rows[0].mission_id != 0) {
			bot.sendMessage(message.chat.id, "Non puoi iniziare un itinerario finch√® sei in missione", abort_mission);
			return;
		}

		if (rows[0].mission_party > 0) {
			bot.sendMessage(message.chat.id, "Incarico in corso! Attendi il termine prima di avviare un itinerario.", back)
			return;
		}

		var player_id = rows[0].id;
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;
		var charm_id = rows[0].charm_id;
		var life = rows[0].life;
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;
		var money = rows[0].money;
		var class_id = rows[0].class;
		var travel_id = rows[0].travel_id;
		var cave_id = rows[0].cave_id;

		if ((boost_mission <= 0) && (boost_id != 0)) {
			connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
			boost_mission = 0;
			boost_id = 0;
		}

		connection.query('SELECT special_mission, shortname FROM rarity WHERE special_mission IS NOT NULL', function (err, rows, fields) {
			if (err) throw err;

			var iKeys = [];
			for (var i = 0, len = Object.keys(rows).length; i < len; i++)
				iKeys.push([rows[i].special_mission + " (" + rows[i].shortname + ")"]);

			iKeys.push(["Torna al menu"]);

			var kbRar = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: iKeys
				}
			};

			bot.sendMessage(message.chat.id, "*Itinerario Propizio*\nDurante la tua avventura hai trovato una *mappa* che indica con precisione tutti i carichi di merci che viaggiano nel mondo di Lootia  ed il loro contenuto, puoi recarti in quei luoghi e magari potresti trovare un oggetto tra quelli segnati, buona fortuna!\n\nSeleziona la regione e segui un itinerario", kbRar).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {

					if (answer.text == "Torna al menu")
						return;

					var reg4 = /\((.+)\)/i;
					var rar = answer.text.match(reg4);

					if (rar == null) {
						bot.sendMessage(message.chat.id, "Itinerario non valido.", back);
						return;
					}

					connection.query('SELECT name, duration FROM mission_zone WHERE rarity = "' + rar[1] + '"', function (err, rows, fields) {
						if (err) throw err;

						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++)
							iKeys.push([rows[i].name + " (" + Math.round(rows[i].duration / 60) + " minuti)"]);

						iKeys.push(["Torna alle regioni"]);
						iKeys.push(["Torna al menu"]);

						var kbMiss = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						var missConf = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Si"], ["Torna agli itinerari"], ["Torna al menu"]]
							}
						};

						bot.sendMessage(message.chat.id, "Seleziona la zona in cui iniziare un itinerario", kbMiss).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {

								if ((answer.text == "Torna al menu") || (answer.text == "Torna alle regioni"))
									return;

								var zn = answer.text.substring(0, answer.text.indexOf("(") - 1);

								connection.query('SELECT name, id, duration, description, rarity FROM mission_zone WHERE name = "' + zn + '"', function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0) {
										bot.sendMessage(message.chat.id, "Zona non valida", back);
										return;
									}

									var name = rows[0].name;
									var mission_id = rows[0].id;
									var duration = rows[0].duration;
									var mission_description = rows[0].description;
									var rarity = rows[0].rarity;
									var items = "";

									connection.query('SELECT item.name, item.rarity FROM mission_zone_item, item, mission_zone WHERE mission_zone_item.zone_id = mission_zone.id AND mission_zone.id = ' + mission_id + ' AND mission_zone_item.item_id = item.id ORDER BY item.name', function (err, rows, fields) {
										if (err) throw err;

										for (var i = 0, len = Object.keys(rows).length; i < len; i++)
											items += "\n> " + rows[i].name + " (" + rows[i].rarity + ")";

										if ((parseInt(life) <= 0) && (parseInt(exp) > 10)) {
											bot.sendMessage(message.chat.id, "Non puoi affrontare gli itinerari da esausto.", revive);
											return;
										}

										var parsedDate = new Date();
										var extra1 = "‚úÖ";
										var extra2 = "‚úÖ";

										if (charm_id == 60) //Rapidit√†
											duration -= duration * 0.05;
										else if (charm_id == 187)
											duration -= duration * 0.1;
										else if (charm_id == 188)
											duration -= duration * 0.15;
										else if (charm_id == 697)
											duration -= duration * 0.2;
										else
											extra1 = "‚ùå";
										if ((class_id == 3) && (reborn == 3))
											duration -= (duration * 0.05);
										if ((class_id == 3) && (reborn >= 4))
											duration -= (duration * 0.1);

										if (boost_id == 1) {
											duration = duration / 2;
											name = name + " (Velocizzata)";
										} else if ((boost_id == 0) || (boost_id == 3) || (boost_id == 8) || (boost_id == 9))
											extra2 = "‚ùå";

										parsedDate.setSeconds(parsedDate.getSeconds() + duration);

										bot.sendMessage(message.chat.id, "Iniziare l'itinerario nel " + name + "?\n\nTalismano Velocit√†: " + extra1 + "\nBevanda: " + extra2 + "\n\nOggetti trovabili in questo luogo:" + items, missConf).then(function () {
											answerCallbacks[message.chat.id] = function (answer) {
												if (answer.text.toLowerCase() == "si") {
													var mission_date = addZero(parsedDate.getHours()) + ":" + addZero(parsedDate.getMinutes()) + ":" + addZero(parsedDate.getSeconds());

													var description = mission_description.replace(new RegExp("%player%", "g"), message.from.username);

													var long_date = parsedDate.getFullYear() + "-" + addZero(parsedDate.getMonth() + 1) + "-" + addZero(parsedDate.getDate()) + " " + addZero(parsedDate.getHours()) + ':' + addZero(parsedDate.getMinutes()) + ':' + addZero(parsedDate.getSeconds());

													bot.sendMessage(message.chat.id, "<b>" + name + "</b>\n" + message.from.username + ", " + description + " " + mission_date + " <i>(" + toTime(duration) + ")</i>", back_html);

													connection.query('UPDATE player SET event = 0, mission_special_id = ' + mission_id + ', chat_id =' + message.chat.id + ', mission_special_time_end ="' + long_date + '" WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
														if (err) throw err;
													});

													if (boost_id == 1)
														setBoost(player_id, boost_mission, boost_id);
													dailyChest(message, player_id);
												}
											};
										});
									});
								});
							};
						});
					});
				};
			});
		});
	});
});

bot.onText(/missione/i, function (message) {
	connection.query('SELECT account_id, holiday, mission_special_id, mission_party, id, boost_id, boost_mission, charm_id, life, exp, reborn, money, class, global_end, travel_id, cave_id, mission_special_time_end FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		if (rows[0].mission_special_id != 0) {
			var time = new Date(rows[0].mission_special_time_end);
			bot.sendMessage(message.chat.id, "Sei in itinerario fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()), back);
			return;
		}

		if (rows[0].mission_party > 0) {
			bot.sendMessage(message.chat.id, "Incarico in corso! Attendi il termine prima di avviare una missione.", back)
			return;
		}

		if ((rows[0].travel_id != 0) || (rows[0].cave_id != 0)) {
			bot.sendMessage(message.chat.id, "Prima di poter partire in un'avventurosa missione, devi concludere l'esplorazione della cava o di terre lontane.", back);
			return;
		}

		var player_id = rows[0].id;
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;
		var charm_id = rows[0].charm_id;
		var life = rows[0].life;
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;
		var money = rows[0].money;
		var class_id = rows[0].class;
		var global_end = rows[0].global_end;

		if (player_id != 1) {
			if ((class_id == 1) && (reborn >= 3)) {
				bot.sendMessage(message.chat.id, "Raggiunta questa Rinascita la Vocazione √® obbligatoria, la puoi scegliere nella sezione Giocatore > Vocazione", back);
				return;
			}
		}

		helpMsg(message.chat.id, player_id, 2);

		if ((boost_mission <= 0) && (boost_id != 0)) {
			connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
			boost_mission = 0;
			boost_id = 0;
		}

		if (parseInt(life) <= 0) {
			if ((exp > 10) && (reborn == 1)) {
				bot.sendMessage(message.chat.id, "Non puoi affrontare le missioni da esausto.", revive);
				return;
			} else if (reborn > 1) {
				bot.sendMessage(message.chat.id, "Non puoi affrontare le missioni da esausto.", revive);
				return;
			}
		}

		connection.query('SELECT mission_id, lore_page, lore_mission, mission_time_end, mission_auto_id, global_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var id = rows[0].mission_id;
			var time = new Date(rows[0].mission_time_end);
			var mission_auto = rows[0].mission_auto_id;
			var current = 0;
			var lore_page = rows[0].lore_page;
			var lore_mission = rows[0].lore_mission;
			var global_end = rows[0].global_end;

			connection.query('SELECT name, type FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var dragon_name = "";
				if (Object.keys(rows).length > 0)
					dragon_name = rows[0].name + " " + rows[0].type;

				if (id != 0) {
					bot.sendMessage(message.chat.id, "Sei in missione fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth() + 1) + "/" + time.getFullYear(), abort_mission);
					return;
				}

				if ((lore_page == 1) && (lore_mission == 0)) {
					var rand = Math.random() * 500;
					if (rand < 1) {
						var newDate = new Date();
						newDate.setHours(newDate.getHours() + 1);
						var mission_date = addZero(newDate.getHours()) + ":" + addZero(newDate.getMinutes()) + ":" + addZero(newDate.getSeconds());

						var description = "peregrini: furente, incoerente; rimbombo di passi; miraggio - rimbomba -, ora realt√†: e grigia √® la chioma, grigia la polvere d'un lungo itinerare, d'un vecchio, vetusto, che a lungo pot√© errare; e agli occhi l'effimero - strepita -, il sempiterno: o Lootia, te vide, di te volle scrivere, in te fu pregno. Giacque dunque la punta su un foglio, e di essa l'inchiostro grondante. Ma d'una tempesta si ode il crepito; langue, al suon della morte; fredda la quiete, prima del fremito. 'Al Tempio, al Tempio!', rimembri i canti, 'Al Tempo giocoso, a Spazi cangianti'. E rimbomba, o rimbomba, il suon dei suoi passi - quasi in un ballo in fa diesis minore -; urla la fenice, spirando la vita; a Un Nuovo Inizio sorge in albore." +
							"\nE s'aprir√† l'entrata al vecchio inchiostro di un possesso per sempre." +
							"\n\n...\n\nSilenzio.\n\n...\n\n" +
							"Ah, s√¨, ricevi anche un macabro omaggio e torni al Rifugio alle " + mission_date;

						var long_date = newDate.getFullYear() + "-" + addZero(newDate.getMonth() + 1) + "-" + addZero(newDate.getDate()) + " " + addZero(newDate.getHours()) + ':' + addZero(newDate.getMinutes()) + ':' + addZero(newDate.getSeconds());

						connection.query('UPDATE `player` SET lore_mission = 1, event = 1, `mission_id` = 1001, mission_gem = 0, `mission_time_end`="' + long_date + '" WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "<b>Polvere</b>\n" + message.from.username + ", " + description, abort_mission);
						});
						return;
					}
				}

				if ((lore_page == 1) && (lore_mission == 1) && (reborn >= 3)) {
					var rand = Math.random() * 1000;
					if (rand < 1) {
						var newDate = new Date();
						newDate.setHours(newDate.getHours() + 12);
						var mission_date = addZero(newDate.getHours()) + ":" + addZero(newDate.getMinutes()) + ":" + addZero(newDate.getSeconds());

						var description = "albergo fra il Mana ch'√® Xocotl e Loki ch'√® Polvere. Qui regno, tre i Troni; l√¨ volano, tre gli Astri, senza Mana l√¨ brancolano, tre le Ombre. Ricever√† un vecchio, durante una Missione: ora si svegli.\n\nTi svegli alle " + mission_date;

						var long_date = newDate.getFullYear() + "-" + addZero(newDate.getMonth() + 1) + "-" + addZero(newDate.getDate()) + " " + addZero(newDate.getHours()) + ':' + addZero(newDate.getMinutes()) + ':' + addZero(newDate.getSeconds());

						connection.query('UPDATE player SET lore_mission = 2, event = 0, mission_id = 1002, mission_gem = 0, mission_time_end = "' + long_date + '" WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "<b>Efesto</b>\n" + message.from.username + ", " + description, abort_mission);
						});
						return;
					}
				}
				if ((lore_page == 1) && (lore_mission == 2) && (reborn >= 2)) {
					var rand = Math.random() * 1500;
					if (rand < 1) {
						var newDate = new Date();
						newDate.setHours(newDate.getHours() + 3);
						var mission_date = addZero(newDate.getHours()) + ":" + addZero(newDate.getMinutes()) + ":" + addZero(newDate.getSeconds());

						var description = "trovi una lettera speciale sulla soglia del Rifugio.\n\n'Egr. Dott. " + message.from.username + ", Le chiediamo di raggiungere il Centro Esterno di Ricerca Neutrale, al fine di effettuare una breve indagine sulla recente dipartita del Dott. DÕïÃ£.Ã§Ã´3ÕìÕïoÃûÃ†. Comunichi la Sua decisione all‚Äôindirizzo seguente: AdA URP. Nella speranza che Lei collabori, A.d.A.\n\nL'A.d.A. ti √® familiare: l‚ÄôAssociazione degli Avventurieri, cos√¨ come vollero chiamarla. A quanto pare, il nome le √® rimasto. √à ironico: lo stesso DÕïÃ£.Ã§Ã´3ÕìÕïoÃûÃ† vi si era opposto, ritenendolo infantile e quanto mai superbo - ed ora √® morto. Morto, e con lui quel piccolo centro che speranzoso aveva fondato‚Ä¶ forse. Forse, poich√© il tuo ultimo contatto con l‚ÄôA.d.A. e il Dottore √® ormai antico, tanto antico, o addirittura tanto giovane da non ricordarti neppure quanto. Aspetta, sei sicuro d‚Äôesser mai stato nell‚ÄôA.d.A.? Ma certo, sei stato un‚Äôintima conoscenza per DÕïÃ£.Ã§Ã´3ÕìÕïoÃûÃ†. Piangi, e fra le lacrime selli il tuo " + dragon_name + ": la sua ubicazione √® balenata nella tua mente, come un ricordo sfolgorante o un‚Äôabbagliante illuminazione. Quel desolato angolo dell‚ÄôEdoria, ora ospitante il C.E.R.N., √® infatti detto Tecn‚öôÔ∏èria.\nEcco: al palesarsi di un enorme edificio, l√¨, ai lati dell'immane entrata, un solare ragazzo 'Accoglie " + message.from.username + "': un cartello s√¨ spartano, ma fedele alla corrispondenza avvenuta fra te e Jarvas - colui che ora ti ha gentilmente accolto, mentre " + dragon_name + " s'√® cautamente adagiato. Al varcar della soglia s'apre allora una sala, enorme, trafficata, lontano una porta, oltre un corridoio. Jarvas vi si avventura, al che entrambi entrate in un ufficio. In quel momento, lontano da occhi indiscreti, il... robot? Androide? Qualsiasi cosa giustifichi i circuiti? Proprio lui, Jarvas, porge a te una grande scatola, con essa la sua chiave. √à un ordine del Dottore, cos√¨ dice, un dono destinato a un 'vero avventuriero', nonch√© 'suo vero amico'. DÕïÃ£.Ã§Ã´3ÕìÕïoÃûÃ† ha celato una ricerca all‚ÄôAssociazione. √à strano, per√≤: non ricordi quale fosse, n√© lui chi fosse. Un allarme ti distrae: alcuni dirigenti ti aspettano, con la promessa di una breve riunione.\nAssopitosi il sole, saluti Jarvas e sali in groppa a " + dragon_name + ".\n\nVoli.\n\nFra le fresche brezze della sera, ti rendi conto di non ricordare alcunch√©. V'√® una scatola, nello Zaino: che debba essere aperta? Giunto al Rifugio, la apri alle " + mission_date;

						var long_date = newDate.getFullYear() + "-" + addZero(newDate.getMonth() + 1) + "-" + addZero(newDate.getDate()) + " " + addZero(newDate.getHours()) + ':' + addZero(newDate.getMinutes()) + ':' + addZero(newDate.getSeconds());

						connection.query('UPDATE player SET lore_mission = 3, event = 1, mission_id = 1003, mission_gem = 0, mission_time_end = "' + long_date + '" WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "<b>Tecn‚öôria</b>\n" + message.from.username + ", " + description, abort_mission);
						});
						return;
					}
				}
				if ((lore_page == 1) && (lore_mission == 3) && (reborn >= 2)) {
					var rand = Math.random() * 1500;
					if (rand < 1) {
						var newDate = new Date();
						newDate.setHours(newDate.getHours() + 5);
						var mission_date = addZero(newDate.getHours()) + ":" + addZero(newDate.getMinutes()) + ":" + addZero(newDate.getSeconds());

						var description = "dopo ore di attente ricerche, hai finalmente recuperato lo scrigno speciale di Jarvas, dimenticato in soffitta.\n[Rapporto di missione - fascicolo archiviato]\n[Il resto del fascicolo √® stato collocato nella sezione riservata della Biblioteca üèõ] - " + mission_date;

						var long_date = newDate.getFullYear() + "-" + addZero(newDate.getMonth() + 1) + "-" + addZero(newDate.getDate()) + " " + addZero(newDate.getHours()) + ':' + addZero(newDate.getMinutes()) + ':' + addZero(newDate.getSeconds());

						connection.query('UPDATE player SET lore_mission = 4, event = 1, mission_id = 1004, mission_gem = 0, mission_time_end = "' + long_date + '" WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "<b>Ritorno a Tecn‚öôria</b>\n" + message.from.username + ", " + description, abort_mission);
						});
						return;
					}
				}

				if (mission_auto == 0)
					mission_auto += 1;

				connection.query('SELECT chest_id FROM mission_auto WHERE id = ' + mission_auto, function (err, rows, fields) {
					if (err) throw err;

					var chest_id = rows[0].chest_id;
					if (chest_id == 6) {
						var rand = Math.random() * 100;
						if (rand <= 30)
							chest_id = 7;
					}

					var result = 0;
					if (chest_id != 7) {
						var minTime = [0, 600, 1000, 5200, 9500, 36000, 85000];
						var maxTime = [0, 900, 3000, 9400, 23000, 54000, 93000];
						var stdev = [0, 200, 977, 1787, 6635, 10220, 3348];
						var media = [0, 889, 1822, 6297, 17252, 47798, 88004];

						var randx = 0;
						var randy = 1;
						var checkDuration = 0;

						while (randy > checkDuration) {
							randx = getRandomArbitrary(minTime[chest_id], maxTime[chest_id]);
							randy = getRandomArbitrary(0, 1 / Math.sqrt(2 * stdev[chest_id]));
							checkDuration = (1 / Math.sqrt(2 * Math.PI * stdev[chest_id])) * Math.exp(-1 / 2 * Math.pow((randx - media[chest_id]) / stdev[chest_id]), 2);
						}
						result = Math.round(randx);
					} else if (chest_id == 7)
						result = 172800;

					var duration = result;	// in secondi

					connection.query('SELECT name, description, id As mission_id FROM mission WHERE chest_id = ' + chest_id + ' ORDER BY RAND()', function (err, rows, fields) {
						if (err) throw err;
						var name = rows[0].name;
						var mission_id = rows[0].mission_id;
						var mission_description = rows[0].description;

						var extra1 = "‚úÖ";
						var extra2 = "‚úÖ";

						var duration_reduce = 0;
						var duration_extend = 0;
						if (charm_id == 60)
							duration_reduce = 5;
						else if (charm_id == 187)
							duration_reduce = 10;
						else if (charm_id == 188)
							duration_reduce = 15;
						else if (charm_id == 697)
							duration_reduce = 20;
						else
							extra1 = "‚ùå";

						/*
						if (global_end == 1) {
							name += " (Estesa per malus globale)";
							duration_extend += 25;
						}
						*/

						if (global_end == 1) {
							name += " (Ridotta per bonus globale)";
							duration_reduce += 25;
						}

						if (duration_reduce > 0)
							duration -= (duration / 100 * duration_reduce);
						if (duration_extend > 0)
							duration += (duration / 100 * duration_extend);

						if ((class_id == 3) && (reborn == 3))
							duration -= (duration * 0.05);

						if ((class_id == 3) && (reborn >= 4))
							duration -= (duration * 0.1);

						if (boost_id == 1) {
							duration = duration / 2;
							name += " (Velocizzata)";
						} else if ((boost_id == 0) || (boost_id == 3) || (boost_id == 6) || (boost_id == 8) || (boost_id == 9))
							extra2 = "‚ùå";

						if (crazyMode == 1) {
							duration = duration / 2;
							name += " (Folle)";
						}

						if (luckyMode == 1)
							name += " (Fortuna)";

						var kb = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Si"], ["Torna al menu"]]
							}
						};

						var equip = "\n\nüç∂ " + extra2 + " - üìø " + extra1;
						equip = "";		// disattivato

						var txt = missionEquip_text(boost_id, charm_id, message.from.username) + "\n" + missionRarity_text(chest_id) + equip;
						bot.sendMessage(message.chat.id, txt, kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.toLowerCase() != "si")
									return;

								var finishDate = new Date();
								finishDate.setSeconds(finishDate.getSeconds() + duration);

								var d = new Date();
								var today = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate());

								connection.query('SELECT mission_special_id, mission_party, travel_id, cave_id, mission_special_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (rows[0].mission_special_id != 0) {
										var time = new Date(rows[0].mission_special_time_end);
										bot.sendMessage(message.chat.id, "Sei in itinerario fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()), back);
										return;
									}

									if (rows[0].mission_party > 0) {
										bot.sendMessage(message.chat.id, "Incarico in corso! Attendi il termine prima di avviare una missione.", back)
										return;
									}

									if ((rows[0].travel_id != 0) || (rows[0].cave_id != 0)) {
										bot.sendMessage(message.chat.id, "Prima di poter partire in un'avventurosa missione, devi concludere l'esplorazione della cava o di terre lontane.", back);
										return;
									}

									connection.query('SELECT nickname, mission_special_id, mission_special_time_end, mission_party, travel_id, cave_id FROM last_command, player WHERE player.account_id = last_command.account_id AND last_command.time LIKE "' + today + '%" ORDER BY RAND()', function (err, random_player, fields) {
										if (err) throw err;

										var description = mission_description;
										description = description.replace(new RegExp("%player%", "g"), message.from.username);
										description = description.replace(new RegExp("%drago%", "g"), dragon_name);
										var nth = 0;
										description = description.replace(/%casuale%/g, function (match, i, original) {
											nth++;
											return random_player[nth].nickname;
										});

										var short_date = addZero(finishDate.getHours()) + ":" + addZero(finishDate.getMinutes());
										var long_date = finishDate.getFullYear() + "-" + addZero(finishDate.getMonth() + 1) + "-" + addZero(finishDate.getDate()) + " " + addZero(finishDate.getHours()) + ':' + addZero(finishDate.getMinutes()) + ':' + addZero(finishDate.getSeconds());

										bot.sendMessage(message.chat.id, "<b>" + name + "</b>\n" + message.from.username + ", " + description + " " + short_date + " <i>(" + toTime(duration) + ")</i>", abort_mission);

										if ((mission_auto + 1) > max_mission_id)
											mission_auto = 1;
										else
											mission_auto++;

										connection.query('UPDATE player SET event = 0, mission_id = ' + mission_id + ', chat_id = ' + message.chat.id + ', mission_auto_id = ' + mission_auto + ', mission_gem = 0, mission_time_end = "' + long_date + '" WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
											if (err) throw err;
										});

										if (boost_id == 1)
											setBoost(player_id, boost_mission, boost_id);

										if (crazyMode == 1) {
											if ((chest_id == 5) || (chest_id == 6)) {
												connection.query('UPDATE player SET gems = gems+1 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "FOLLE! Hai ricevuto una Gemma üíé!");
												});
											}
										}

										dailyChest(message, player_id);
									});
								});
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/^imprese|Torna alle imprese/i, function (message) {

	if (message.text.toLowerCase().indexOf("completate") != -1)
		return;

	connection.query('SELECT id, account_id, achievement_count, achievement_count_all, dungeon_count, mission_count, craft_count, mission_team_count, exp, reborn, cave_count FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var cnt = rows[0].achievement_count;
		var cnt_all = rows[0].achievement_count_all;
		var lev = Math.floor(rows[0].exp / 10);
		var mission_count = rows[0].mission_count;
		var dungeon_count = rows[0].dungeon_count;
		var craft_count = rows[0].craft_count;
		var mission_team_count = rows[0].mission_team_count;
		var reb = rows[0].reborn;
		var cave_count = rows[0].cave_count;

		helpMsg(message.chat.id, player_id, 1);

		connection.query('SELECT total_cnt FROM merchant_offer WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var offers_count = 0;
			if (Object.keys(rows).length > 0)
				offers_count = rows[0].total_cnt;

			connection.query('SELECT SUM(value) As globalVal FROM achievement_global', function (err, rows, fields) {
				if (err) throw err;

				var globalVal = rows[0].globalVal;
				if (globalVal == null)
					globalVal = 0;

				connection.query('SELECT global_eventon, global_eventwait, global_eventhide, global_cap, global_desc, global_date FROM config', function (err, rows, fields) {
					if (err) throw err;

					var global = rows[0].global_eventon;
					var global_wait = rows[0].global_eventwait;
					var global_hide = rows[0].global_eventhide;
					var global_cap = rows[0].global_cap;
					var global_desc = rows[0].global_desc;
					var global_date = rows[0].global_date;

					connection.query('SELECT L.name, L.det, L.value, L.reward, L.type, S.progress, I.name As itemName, L.multiply, S.completed FROM achievement_daily D INNER JOIN achievement_list L ON D.achievement_id = L.id LEFT JOIN achievement_status S ON S.achievement_id = D.achievement_id AND S.player_id = ' + player_id + ' LEFT JOIN item I ON D.item_id = I.id', function (err, rows, fields) {
						if (err) throw err;
						var text = "<b>Imprese giornaliere</b>\n";
						if (Object.keys(rows).length > 0) {
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].progress == null)
									rows[i].progress = 0;
								if (rows[i].type == 12)
									rows[i].name += " (" + rows[i].itemName + ")";
								if (rows[i].multiply == 1) {
									rows[i].reward = rows[i].reward*reb;
									rows[i].value = rows[i].value*reb;
								}
								if (rows[i].completed == 1)
									text += "> ‚úÖ <b>" + rows[i].name + "</b>: " + formatNumber(rows[i].value) + " " + rows[i].det + " (" + formatNumber(rows[i].reward) + " ¬ß)\n";
								else {
									text += "> <b>" + rows[i].name + "</b>: " + formatNumber(rows[i].progress) + "/" + formatNumber(rows[i].value) + " " + rows[i].det + " (" + formatNumber(rows[i].reward) + " ¬ß)\n";
								}
							}
						} else
							text += "Oggi non sono disponibili imprese giornaliere :(\n";

						text += "\n<b>Imprese complessive</b>\n";

						var end = 0;
						for (var i = 0, len = Object.keys(progLev).length; i < len; i++) {
							if (getRealLevel(reb, lev) >= progLev[i])
								end = (i + 1);
						}
						if (progLev[end] == undefined)
							text += "Imprese per livello completate ‚úÖ\n";
						else
							text += "Livello " + formatNumber(getRealLevel(reb, lev)) + " su " + formatNumber(progLev[end]) + " totali (" + formatNumber(progLevRew[end]) + " ¬ß)\n";

						end = 0;
						for (var i = 0, len = Object.keys(progMis).length; i < len; i++) {
							if (mission_count >= progMis[i])
								end = (i + 1);
						}
						if (progMis[end] == undefined)
							text += "Imprese per missioni completate ‚úÖ\n";
						else
							text += formatNumber(mission_count) + " su " + formatNumber(progMis[end]) + " missioni completate (" + formatNumber(progMisRew[end]) + " ¬ß)\n";

						end = 0;
						for (var i = 0, len = Object.keys(progDung).length; i < len; i++) {
							if (dungeon_count >= progDung[i])
								end = (i + 1);
						}
						if (progDung[end] == undefined)
							text += "Imprese per dungeon completate ‚úÖ\n";
						else
							text += formatNumber(dungeon_count) + " su " + formatNumber(progDung[end]) + " dungeon completati (" + formatNumber(progDungRew[end]) + " ¬ß)\n";

						end = 0;
						for (var i = 0, len = Object.keys(progCraft).length; i < len; i++) {
							if (craft_count >= progCraft[i])
								end = (i + 1);
						}
						if (progCraft[end] == undefined)
							text += "Imprese di creazione completate ‚úÖ\n";
						else
							text += formatNumber(craft_count) + " su " + formatNumber(progCraft[end]) + " punti creazione ottenuti (" + formatNumber(progCraftRew[end]) + " ¬ß)\n";

						end = 0;
						for (var i = 0, len = Object.keys(progMissionTeam).length; i < len; i++) {
							if (mission_team_count >= progMissionTeam[i])
								end = (i + 1);
						}
						if (progMissionTeam[end] == undefined)
							text += "Imprese per incarichi completate ‚úÖ\n";
						else
							text += formatNumber(mission_team_count) + " su " + formatNumber(progMissionTeam[end]) + " incarichi completati (" + formatNumber(progMissionTeamRew[end]) + " ¬ß)\n";

						end = 0;
						for (var i = 0, len = Object.keys(progOffers).length; i < len; i++) {
							if (offers_count >= progOffers[i])
								end = (i + 1);
						}
						if (progOffers[end] == undefined)
							text += "Offerte contrabbandiere accettate completate ‚úÖ\n";
						else
							text += formatNumber(offers_count) + " su " + formatNumber(progOffers[end]) + " offerte contrabbandiere accettate (" + formatNumber(progOffersRew[end]) + " ¬ß)\n";

						end = 0;
						for (var i = 0, len = Object.keys(progCave).length; i < len; i++) {
							if (cave_count >= progCave[i])
								end = (i + 1);
						}
						if (progCave[end] == undefined)
							text += "Cave esplorate completate ‚úÖ\n";
						else
							text += formatNumber(cave_count) + " su " + formatNumber(progCave[end]) + " cave esplorate (" + formatNumber(progCaveRew[end]) + " ¬ß)\n";

						var time_end = new Date(global_date);
						var now = new Date();
						var diffD = Math.floor(((time_end - now) / 1000) / 60 / 60 / 24);
						var diffH = Math.floor(((time_end - now) / 1000) / 60 / 60);
						var diffM = Math.floor(((time_end - now) / 1000) / 60);
						var diff = "";
						if (diffH < 1)
							diff = diffM + " min";
						else if (diffD < 2)
							diff = diffH + " ore";
						else
							diff = diffD + " giorni";

						text += "\n<b>Impresa globale</b>\n";

						var d = new Date();
						if ((d.getMonth()+1 == 8) || ((d.getMonth()+1 == 7) && (d.getDate() == 31)))
							text += "Questo mese nessuna globale! Goditi le vacanze üèñ\n";
						else {
							if ((global == 1) && (diffM < 0) && (globalVal < global_cap))
								text += "Impresa fallita! üö´\nSe non hai partecipato attivamente, riceverai un malus il primo giorno del mese!\n";
							else if (globalVal >= global_cap)
								text += "Impresa completata! ‚úÖ\nSe hai partecipato, riceverai una ricompensa ed il bonus l'ultimo giorno del mese!\n";
							else {
								if (global_wait == 1)
									text += "√à in corso la raccolta dati per la prossima impresa globale, pazienta questi primi giorni del mese!\n";
								else {
									var cap = global_cap;
									if (global_hide == 1)
										cap = "???";
									text += "Progresso: <b>" + formatNumber(globalVal) + "</b> / <b>" + formatNumber(cap) + "</b> " + global_desc + ".\nTempo rimanente: <b>" + diff + "</b>\nAl completamento si otterr√† un bonus, al fallimento un malus, forza!\n";
								}
							}
						}

						var kb = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Informazioni Impresa Globale"], ["Impresa Globale"], ["Torna al menu"]]
							}
						};

						var kb2 = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								keyboard: [["Impresa Globale"], ["Torna alle imprese"], ["Torna al menu"]]
							}
						};

						bot.sendMessage(message.chat.id, text + "\n<b>Imprese giornaliere completate</b>: " + formatNumber(cnt) + " (" + formatNumber(cnt_all) + " triplette)\n\nLe imprese giornaliere con il * in caso di cap raggiunto (livello drago, talenti, ecc.), verranno completate automaticamente accedendo alla relativa sezione\nAlcune imprese giornaliere diventano pi√π complicate ma allo stesso tempo pi√π remunerative procedendo con le rinascite", kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if (answer.text.indexOf("Informazioni") != -1) {
									bot.sendMessage(message.chat.id, "Informazioni sulle Imprese Globali:\n\n" +
													"> Se la globale viene completata prima del termine effettivo, bisogna attendere l'ultimo giorno del mese per ottenere le ricompense\n" +
													"> Il punto di 'partecipazione attiva' viene ottenuto solamente se la globale viene completata ed in classifica viene segnalato il fatto che verr√† effettivamente ricevuto\n" +
													"> Il bonus viene applicato solo se l'impresa √® effettivamente completata\n" +
													"> Il malus viene applicato solo se l'impresa √® fallita oltrepassando il tempo limite\n" +
													"> Il bonus viene ottenuto solo dalle persone che hanno superato una certa soglia (variabile in base al tipo di impresa)\n" +
													"> Il malus viene ottenuto solo dalle persone che non hanno superato una certa soglia (variabile in base al tipo di impresa)\n" +
													"> Il malus viene ottenuto anche da chi non ha effettivamente partecipato ma poteva farlo (attivo nell'ultimo mese e rinato almeno una volta)", kb2);
								}
							}
						});
					});
				});
			});
		});
	});
});

bot.onText(/^vacanza/i, function (message) {
	var iKeys = [];
	connection.query('SELECT account_id, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var holiday = rows[0].holiday;
		var player_id = rows[0].id;
		var btn = "Avvia Modalit√† Vacanza";

		helpMsg(message.chat.id, player_id, 9);

		if (holiday != 0)
			btn = "Disattiva Modalit√† Vacanza";

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [[btn], ["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, "Puoi entrare in modalit√† vacanza quando sai di non riuscire ad accedere al gioco per lungo tempo, non vuoi essere Ispezionato o espulso dal team.\nDurante questo periodo non potrai effettuare alcuna operazione se non di visualizzazione. *La durata minima √® 2 settimane*, quando vuoi disattivarla dopo questo periodo torna su questa pagina e clicca Disattiva Modalit√† Vacanza.", kb).then(function () {
			answerCallbacks[message.chat.id] = function (answer) {
				if (answer.text == "Avvia Modalit√† Vacanza") {
					if (holiday == 1) {
						bot.sendMessage(message.chat.id, "Sei gi√† in vacanza!", back);
						return;
					}

					var now = new Date();
					now.setDate(now.getDate() + 14);
					var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

					var now2 = new Date();
					now2.setDate(now2.getDate() + 365);
					var long_date2 = now2.getFullYear() + "-" + addZero(now2.getMonth() + 1) + "-" + addZero(now2.getDate()) + " " + addZero(now2.getHours()) + ':' + addZero(now2.getMinutes()) + ':' + addZero(now2.getSeconds());

					bot.sendMessage(message.chat.id, "Sei sicuro? Non potrai annullare la modalit√† per due settimane!", yesno).then(function () {
						answerCallbacks[message.chat.id] = function (answer) {
							if (answer.text.toLowerCase() == "si") {
								connection.query('INSERT INTO holiday (player_id, time_end) VALUES (' + player_id + ',"' + long_date + '")', function (err, rows, fields) {
									if (err) throw err;
									connection.query('UPDATE player SET holiday = 1, heist_protection = "' + long_date2 + '" WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai attivato la modalit√† vacanza!", back);
										removeFromAssault(player_id);
									});
								});
							}
						};
					});
				} else if (answer.text == "Disattiva Modalit√† Vacanza") {
					if (holiday == 0) {
						bot.sendMessage(message.chat.id, "Non sei in vacanza!", back);
						return;
					}

					connection.query('SELECT time_end FROM holiday WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var now = new Date();
						var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

						var end = new Date(rows[0].time_end);
						var long_date_end = end.getFullYear() + "-" + addZero(end.getMonth() + 1) + "-" + addZero(end.getDate()) + " " + addZero(end.getHours()) + ':' + addZero(end.getMinutes()) + ':' + addZero(end.getSeconds());

						if (long_date_end > long_date) {
							var long_date = addZero(end.getHours()) + ":" + addZero(end.getMinutes()) + ":" + addZero(end.getSeconds()) + " del " + addZero(end.getDate()) + "/" + addZero(end.getMonth() + 1) + "/" + end.getFullYear();
							bot.sendMessage(message.chat.id, "Non puoi ancora tornare dalla vacanza, devi aspettare fino alle " + long_date + "!", back);
							return;
						}

						connection.query('UPDATE player SET holiday = 0, heist_protection = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							connection.query('DELETE FROM holiday WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai disattivato la modalit√† vacanza!", back);
							});
						});
					});
				}
			};
		});
	});
});

bot.onText(/^orario/i, function (message) {
	var iKeys = [];
	connection.query('SELECT id, show_time FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var show_time = rows[0].show_time;

		if (show_time == 0) {
			connection.query('UPDATE player SET show_time = 1 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione dell'orario nel men√π principale!", back);
			});
		} else {
			connection.query('UPDATE player SET show_time = 0 WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai disattivato la visualizzazione dell'orario nel men√π principale!", back);
			});
		}
	});
});

bot.onText(/esplorazioni|viaggi/i, function (message) {
	var iKeys = [];

	connection.query('SELECT mission_special_id, mission_special_time_end, mission_id, id, reborn, exp, life, account_id, global_end, mission_party, holiday, class, travel_limit, cave_limit FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			return;
		}

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1) {
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!", back)
			return;
		}

		var lev = rows[0].exp / 10;
		var life = rows[0].life;
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;
		var player_id = rows[0].id;
		var global_end = rows[0].global_end;
		var class_id = rows[0].class;
		var travel_limit = rows[0].travel_limit;
		var cave_limit = rows[0].cave_limit;

		helpMsg(message.chat.id, player_id, 11);

		if ((life <= 0) && (exp > 10)) {
			bot.sendMessage(message.chat.id, "Non puoi affrontare le esplorazioni da esausto.", revive);
			return;
		}

		if (rows[0].mission_id != 0) {
			bot.sendMessage(message.chat.id, "Non puoi andare in esplorazione finch√® sei in missione.", back);
			return;
		}

		if (rows[0].mission_party > 0) {
			bot.sendMessage(message.chat.id, "Incarico in corso! Attendi il termine prima di avviare un esplorazione.", back)
			return;
		}

		connection.query('SELECT zone_id FROM event_mana_status WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length > 0) {
				if (rows[0].zone_id != 0) {
					bot.sendMessage(message.chat.id, "Non puoi andare in esplorazione finch√® sei in miniera.", back);
					return;
				}
			}

			connection.query('SELECT travel_id, travel_time_end, cave_id, cave_time_end, id, boost_id, boost_mission, charm_id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
				if (err) throw err;
				var player_id = rows[0].id;
				var boost_id = rows[0].boost_id;
				var boost_mission = rows[0].boost_mission;
				var charm_id = rows[0].charm_id;

				if (rows[0].travel_id != 0) {
					var time = new Date(rows[0].travel_time_end);
					bot.sendMessage(message.chat.id, "Sei in esplorazione in terre lontane, tornerai alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth() + 1) + "/" + time.getFullYear(), abort_travel);
					return;
				} else if (rows[0].cave_id != 0) {
					var time = new Date(rows[0].cave_time_end);
					bot.sendMessage(message.chat.id, "Sei in esplorazione in cava, tornerai alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth() + 1) + "/" + time.getFullYear(), abort_travel_2);
					return;
				} else {
					var extra = "SELECT name, duration FROM cave UNION ALL ";
					if ((lev < 10) && (reborn == 1))
						extra = "";
					connection.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var combat = 0;
						if (Object.keys(rows).length > 0)
							combat = rows[0].combat;

						connection.query('SELECT level, life, sleep_h FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							var dragon_level = 0;
							var text = "";

							if ((Object.keys(rows).length > 0) && (combat == 0)) {
								if ((rows[0].life > 0) || ((rows[0].life == 0) && (rows[0].sleep_h > 0))) {
									dragon_level = rows[0].level;
									if (dragon_level > 200)
										dragon_level = 200;
								}
							}

							connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 15', function (err, rows, fields) {
								if (err) throw err;

								var abBonus = 0;
								var double = 0;
								if (Object.keys(rows).length > 0) {
									var rand = Math.random() * 100;
									abBonus = parseInt(rows[0].ability_level) * rows[0].val;
									if (rand < abBonus)
										double = 1;
								}

								connection.query(extra + 'SELECT name, duration FROM travel', function (err, rows, fields) {
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {

										if (rows[i].name.indexOf("Cava") != -1) {
											if ((class_id == 7) && (reborn > 1))
												rows[i].duration -= rows[i].duration*0.05;
										}

										rows[i].duration -= rows[i].duration*(dragon_level/300);
										iKeys.push(["Viaggia a " + rows[i].name + " (" + toTime(rows[i].duration*60, 0) + ")"]);
									}

									if (Object.keys(iKeys).length > 0) {
										iKeys.push(["Torna al menu"]);
										var viaggio = "";

										var kb = {
											parse_mode: "Markdown",
											reply_markup: {
												resize_keyboard: true,
												keyboard: iKeys
											}
										};

										var kb2 = {
											parse_mode: "Markdown",
											reply_markup: {
												resize_keyboard: true,
												keyboard: [["Si"],["Torna ai viaggi"],["Torna al menu"]]
											}
										};

										if (message.text.indexOf("Viaggia a") != -1) {
											viaggio = message.text.substring(getPosition(message.text, " ", 2) + 1);

											var pos = viaggio.indexOf("(");
											if (pos != -1)
												viaggio = viaggio.substr(0, pos - 1);

											if ((boost_id == 3) && (boost_mission <= 0)) {
												connection.query('UPDATE player SET boost_id = 0 AND boost_mission = 0 WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
												boost_id = 0;
											}

											var boost_text = "";
											if (viaggio.indexOf("Cava") != -1) {
												boost_text = "\nBevanda: ‚ùå";
												if ((boost_id == 3) && (boost_mission > 0))
													boost_text = "\nBevanda: ‚úÖ";
												if ((charm_id == 603) || (charm_id == 695))
													boost_text += "\nTalismano bonus pietre: ‚úÖ";
												else
													boost_text += "\nTalismano bonus pietre: ‚ùå";
											}

											bot.sendMessage(message.chat.id, "Iniziare il viaggio?" + boost_text + "\nPuoi tornare ancora da " + (2-travel_limit) + " viaggi e " + (2-cave_limit) + " cave", kb2).then(function () {
												answerCallbacks[message.chat.id] = function (answer) {
													var resp = answer.text;
													if (resp.toLowerCase() != "si")
														return;
													var cavepos = viaggio.indexOf("Cava");
													if (cavepos != -1) {
														if ((exp < 100) && (reborn == 1)) {
															bot.sendMessage(message.chat.id, "Non puoi viaggiare in cava fino al livello 10.", back);
															return;
														}

														connection.query('SELECT * FROM cave WHERE name = "' + viaggio + '"', function (err, rows, fields) {
															if (err) throw err;
															if (Object.keys(rows).length == 0) {
																bot.sendMessage(message.chat.id, "Cava non valida", back);
																return;
															} else {
																var split = "";
																if (double == 1) {
																	rows[0].duration = rows[0].duration/2;
																	split = " dimezzato!";
																	setAchievement(player_id, 55, 1);
																}
																if ((class_id == 7) && (reborn > 1))
																	rows[0].duration -= rows[0].duration*0.05;

																rows[0].duration -= rows[0].duration*(dragon_level/300);
																var now = new Date();
																now.setMinutes(now.getMinutes() + rows[0].duration);
																var time = " <i>(" + toTime(rows[0].duration*60, 0) + split + ")</i>";

																var short_date = addZero(now.getDate()) + "/" + addZero(now.getMonth() + 1) + "/" + now.getFullYear() + " alle " + addZero(now.getHours()) + ":" + addZero(now.getMinutes());
																var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

																var exp = 1;

																bot.sendMessage(message.chat.id, "<b>" + rows[0].name + "</b>\n" + message.from.username + ", ti aspetta un'esplorazione nella " + viaggio + " che terminer√† il " + short_date + time + " (+" + exp + " exp)", abort_travel_2);

																connection.query('UPDATE player SET exp = exp+' + exp + ', cave_id = ' + rows[0].id + ', chat_id = ' + message.chat.id + ', cave_time_end = "' + long_date + '", cave_gem = 0 WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
																	if (err) throw err;
																});
															}
														});
													} else {
														connection.query('SELECT * FROM travel WHERE name = "' + viaggio + '"', function (err, rows, fields) {
															if (err) throw err;
															if (Object.keys(rows).length == 0) {
																bot.sendMessage(message.chat.id, "Viaggio non valido", back);
																return;
															} else {
																var split = "";
																if (double == 1) {
																	rows[0].duration = rows[0].duration/2;
																	split = " dimezzato!";
																	setAchievement(player_id, 55, 1);
																}

																rows[0].duration -= rows[0].duration*(dragon_level/300);
																var now = new Date();
																now.setMinutes(now.getMinutes() + rows[0].duration);
																var time = " <i>(" + toTime(rows[0].duration*60, 0) + split + ")</i>";

																var short_date = addZero(now.getDate()) + "/" + addZero(now.getMonth() + 1) + "/" + now.getFullYear() + " alle " + addZero(now.getHours()) + ":" + addZero(now.getMinutes());
																var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

																var exp = 1;

																bot.sendMessage(message.chat.id, "<b>" + rows[0].name + "</b>\n" + message.from.username + ", ti aspetta un incredibile viaggio, " + rows[0].description + " " + short_date + time + " (+" + exp + " exp)", abort_travel);

																connection.query('UPDATE player SET exp = exp+' + exp + ', travel_id = ' + rows[0].id + ', chat_id = ' + message.chat.id + ', travel_time_end = "' + long_date + '" WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
																	if (err) throw err;
																});
															}
														});
													}
												};
											});
											return;
										};

										var extra = "\n";
										if (abBonus > 0)
											extra += "Talento: " + Math.round(abBonus) + "% di dimezzare il tempo\n";
										if (dragon_level > 1)
											extra += "Drago: -" + Math.round(dragon_level/3) + "% tempo\n";
										if ((class_id == 7) && (reborn > 1))
											extra += "Vocazione: -5% tempo Cave\n";

										bot.sendMessage(message.chat.id, "Seleziona il viaggio o la cava da esplorare" + extra, kb);
									}
								});
							});
						});
					});
				}
			});
		});
	});
});

// FUNZIONI

function multiDimensionalUnique(arr) {
	var uniques = [];
	var itemsFound = {};
	for(var i = 0, l = arr.length; i < l; i++) {
		var stringified = JSON.stringify(arr[i]);
		if(itemsFound[stringified]) { continue; }
		uniques.push(arr[i]);
		itemsFound[stringified] = true;
	}
	return uniques;
}

function generateCardRarity(){
	var seed = Math.ceil(10 / Math.PI * Math.abs(Math.sqrt(-2.0 * Math.log(Math.random())) * Math.cos(2.0 * Math.PI * Math.random())));
	if (seed > 10) return 10;
	else if (seed < 1) return 1;
	else return seed;
}

function getInfo(message, player, myhouse_id) {
	calcLife(message);

	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0)
			return;

		var my_player_id = rows[0].id;
		helpMsg(message.chat.id, my_player_id, 8);

		connection.query('SELECT * FROM player WHERE nickname = "' + player + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Il giocatore non √® registrato");
				return;
			}

			var gender_text = "Giocatore";
			var gender_sym = "üèÉ‚Äç‚ôÇÔ∏è";
			if (rows[0].gender == "F") {
				gender_text = "Giocatrice";
				gender_sym = "üèÉ‚Äç‚ôÄÔ∏è";
			}

			var player_id = rows[0].id;
			var nickname = rows[0].nickname;
			var exp = rows[0].exp;
			var lev = Math.floor(exp / 10);
			var reborn = rows[0].reborn;
			var money = rows[0].money;
			var rank = rows[0].rank;
			var ability = rows[0].ability;
			var mission_team_count = rows[0].mission_team_count;
			var player_description = rows[0].player_description;
			var player_custom_nickname = rows[0].player_custom_nickname;
			var life = rows[0].life;
			var total_life = rows[0].total_life;
			var gems = rows[0].gems;
			var heist_count = rows[0].heist_count;
			var spy_count = rows[0].spy_count;
			var craft_count = rows[0].craft_count;
			var craft_week = rows[0].craft_week;
			var custom_name = rows[0].custom_name;
			var custom_name2 = rows[0].custom_name2;
			var custom_name3 = rows[0].custom_name3;
			var custom_name_h = rows[0].custom_name_h;
			var weapon_id = rows[0].weapon_id;
			var weapon2_id = rows[0].weapon2_id;
			var weapon3_id = rows[0].weapon3_id;
			var weapon = rows[0].weapon;
			var weapon2 = rows[0].weapon2;
			var weapon3 = rows[0].weapon3;
			var weapon_enchant_bonus = rows[0].weapon_enchant_bonus;
			var weapon2_enchant_bonus = rows[0].weapon2_enchant_bonus;
			var weapon3_enchant_bonus = rows[0].weapon3_enchant_bonus;
			var weapon_enchant = rows[0].weapon_enchant;
			var weapon2_enchant = rows[0].weapon2_enchant;
			var weapon3_enchant = rows[0].weapon3_enchant;
			var power_dmg = rows[0].power_dmg;
			var power_def = rows[0].power_def;
			var power_weapon = rows[0].power_weapon;
			var power_armor = rows[0].power_armor;
			var power_shield = rows[0].power_shield;
			var power_dragon_dmg = rows[0].power_dragon_dmg;
			var power_dragon_def = rows[0].power_dragon_def;
			var power_dragon_crit = rows[0].power_dragon_crit;
			var weapon_crit = rows[0].weapon_crit;
			var weapon2_crit = rows[0].weapon2_crit;
			var weapon3_crit = rows[0].weapon3_crit;
			var charm_id = rows[0].charm_id;
			var house_id = rows[0].house_id;
			var reborn = rows[0].reborn;
			var class_id = rows[0].class;
			var boost_id = rows[0].boost_id;
			var creation_date = rows[0].creation_date;
			var top_win = rows[0].top_win;

			var top_win_text = "";
			if (top_win > 0)
				top_win_text = "Vittorie Vette: " + top_win + "\n";

			if (mission_team_count > 0)
				mission_team_count = "Incarichi: " + formatNumber(mission_team_count) + "\n";
			else 
				mission_team_count = "";

			if (rank > 0)
				rank = "Rango: " + getRankName(rank, 0) + " (" + rank + ")\n";
			else
				rank = "";

			connection.query('SELECT name, id FROM item WHERE id = ' + weapon_id, function (err, rows, fields) {
				if (err) throw err;
				var weapon_name = "-";
				var weapon_id = 0;
				if (Object.keys(rows).length > 0) {
					weapon_id = rows[0].id;
					if ((weapon_id == 638) || (weapon_id == 639) || (weapon_id == 640) || (weapon_id == 754)) {
						if (custom_name != null)
							weapon_name = custom_name + rows[0].name.replace("Necro", "");
						else
							weapon_name = rows[0].name;
						if (weapon_id == 638)
							weapon_name += " ‚ö°Ô∏è";
						else if (weapon_id == 639)
							weapon_name += " üî•";
						else if (weapon_id == 640)
							weapon_name += " üåä";
						else if (weapon_id == 754)
							weapon_name += " ‚ú®";
					} else
						weapon_name = rows[0].name;
				};

				connection.query('SELECT ability_level FROM ability WHERE player_id = ' + player_id + ' AND ability_id = 1', function (err, rows, fields) {
					if (err) throw err;

					var abBonus = 0;
					if (Object.keys(rows).length > 0)
						abBonus = rows[0].ability_level;

					connection.query('SELECT COUNT(item_id) As cnt FROM artifacts WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var artifacts = "";
						if (rows[0].cnt > 0)
							artifacts = "Artefatti: ";
						if (rows[0].cnt >= 1)
							artifacts += "üî•";
						if (rows[0].cnt >= 2)
							artifacts += "‚ö°Ô∏è";
						if (rows[0].cnt >= 3)
							artifacts += "‚õà";
						if (rows[0].cnt >= 4)
							artifacts += "üåë";
						if (rows[0].cnt >= 5)
							artifacts += "üîÆ";
						if (rows[0].cnt >= 6)
							artifacts += "üå™";
						if (rows[0].cnt > 0)
							artifacts += "\n";

						connection.query('SELECT name, description FROM item WHERE id = ' + charm_id, function (err, rows, fields) {
							if (err) throw err;
							var talismano = "-";
							var talismano_desc = "";
							if (Object.keys(rows).length > 0) {
								talismano = rows[0].name;
								talismano_desc = " (" + rows[0].description + ")";
							};

							connection.query('SELECT name FROM house WHERE grade = ' + house_id, function (err, rows, fields) {
								if (err) throw err;
								var rifugio = "-";
								if (Object.keys(rows).length > 0) {
									if (house_id >= 5) {
										if (custom_name_h != null)
											rifugio = "Rifugio " + custom_name_h + " (" + house_id + ")";
										else
											rifugio = rows[0].name + " (" + house_id + ")";
									} else
										rifugio = rows[0].name + " (" + house_id + ")";
								};

								connection.query('SELECT name FROM player, team, team_player WHERE player.id = ' + player_id + ' AND team.id = team_player.team_id AND team_player.player_id = player.id', function (err, rows, fields) {
									if (err) throw err;
									var team_desc = "";
									if (Object.keys(rows).length > 0)
										team_desc = "‚öúÔ∏è " + rows[0].name.trim() + "\n";

									connection.query('SELECT COUNT(id) As cnt, (SELECT COUNT(id) FROM card_list) As tot FROM card_inventory WHERE quantity > 0 AND player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										var cards_txt = "";
										if (rows[0].cnt > 0)
											cards_txt = "Figurine diverse: " + formatNumber(rows[0].cnt) + "/" + formatNumber(rows[0].tot) + "\n";

										connection.query('SELECT name FROM house WHERE id = ' + house_id, function (err, rows, fields) {
											if (err) throw err;
											var house_name = rows[0].name;

											connection.query('SELECT name FROM item WHERE id = ' + weapon2_id, function (err, rows, fields) {
												if (err) throw err;
												var weapon2_name = "-";
												if (Object.keys(rows).length > 0) {
													if ((weapon2_id == 688) || (weapon2_id == 689) || (weapon2_id == 690) || (weapon2_id == 790)) {
														if (custom_name2 != null)
															weapon2_name = rows[0].name.replace("Necro", custom_name2);
														else
															weapon2_name = rows[0].name;
														if (weapon2_id == 688)
															weapon2_name += " üî•";
														else if (weapon2_id == 689)
															weapon2_name += " üåä";
														else if (weapon2_id == 690)
															weapon2_name += " ‚ö°Ô∏è";
														else if (weapon2_id == 790)
															weapon2_name += " ‚ú®";
													} else
														weapon2_name = rows[0].name;
												}

												connection.query('SELECT name FROM item WHERE id = ' + weapon3_id, function (err, rows, fields) {
													if (err) throw err;
													var weapon3_name = "-";
													if (Object.keys(rows).length > 0) {
														if ((weapon3_id == 671) || (weapon3_id == 672) || (weapon3_id == 673) || (weapon3_id == 791)) {
															if (custom_name3 != null)
																weapon3_name = rows[0].name.replace("Necro", custom_name3);
															else
																weapon3_name = rows[0].name;
															if (weapon3_id == 671)
																weapon3_name += " ‚ö°Ô∏è";
															else if (weapon3_id == 672)
																weapon3_name += " üî•";
															else if (weapon3_id == 673)
																weapon3_name += " üåä";
															else if (weapon3_id == 791)
																weapon3_name += " ‚ú®";
														} else
															weapon3_name = rows[0].name;
													}

													connection.query('SELECT dragon.* FROM player, dragon WHERE player.id = dragon.player_id AND player.id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
														var dragon_name = "-";
														var dragon_level = "-";
														var dragon_damage = "-";
														var dragon_defence = "-";
														var dragon_critical = "-";
														var dragon_clawsid = 0;
														var dragon_saddleid = 0;
														var dragon_armsid = 0;
														var dragon_claws = 0;
														var dragon = 0;
														var dragon_status = "In salute";

														if (Object.keys(rows).length > 0) {
															dragon = 1;

															if (charm_id == 602) {
																rows[0].damage += 25;
																rows[0].critical += 10;
															}
															if (charm_id == 695) {
																rows[0].damage += 30;
																rows[0].critical += 15;
															}

															if ((class_id == 7) && (reborn > 1) && (reborn == 5))
																rows[0].claws += rows[0].claws * 1;
															else if ((class_id == 7) && (reborn > 1))
																rows[0].claws += rows[0].claws * 0.5;
															if ((class_id == 7) && (reborn > 1) && (reborn == 5))
																rows[0].saddle += rows[0].saddle * 1;
															else if ((class_id == 7) && (reborn > 1))
																rows[0].saddle += rows[0].saddle * 0.5;
															if ((class_id == 7) && (reborn == 3))
																rows[0].critical += 5;
															if ((class_id == 7) && (reborn >= 4))
																rows[0].critical += 7;

															dragon_name = rows[0].name.trim() + " " + rows[0].type;
															dragon_level = rows[0].level;
															dragon_damage = "+" + Math.round(rows[0].damage + rows[0].claws + power_dragon_dmg);
															dragon_defence = "-" + Math.round(rows[0].defence + rows[0].saddle + power_dragon_def);
															dragon_critical = Math.round(rows[0].critical + power_dragon_crit);

															dragon_claws = parseInt(rows[0].claws);

															dragon_clawsid = rows[0].claws_id;
															dragon_saddleid = rows[0].saddle_id;
															dragon_armsid = rows[0].arms_id;

															if (rows[0].life <= 0)
																dragon_status = "Esausto";
															if (rows[0].sleep_h > 0)
																dragon_status = "Dorme";
														}

														connection.query('SELECT name, COUNT(name) As num FROM item WHERE id = ' + dragon_clawsid, function (err, rows, fields) {
															if (err) throw err;

															var dragon_claws_n = "-";
															if (rows[0].num > 0)
																dragon_claws_n = rows[0].name;

															connection.query('SELECT name, COUNT(name) As num FROM item WHERE id = ' + dragon_saddleid, function (err, rows, fields) {
																if (err) throw err;

																var dragon_saddle_n = "-";
																if (rows[0].num > 0)
																	dragon_saddle_n = rows[0].name;

																connection.query('SELECT name, COUNT(name) As num FROM item WHERE id = ' + dragon_armsid, function (err, rows, fields) {
																	if (err) throw err;

																	var dragon_arms_n = "-";
																	if (rows[0].num > 0)
																		dragon_arms_n = rows[0].name;

																	connection.query('SELECT player_nick As player, new_player_nick As new, time FROM referral_list WHERE new_player = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;

																		var referral = "";
																		if (Object.keys(rows).length > 0) {
																			var d = new Date(rows[0].time);
																			var short_date = addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
																			referral = "Invitato da: " + rows[0].player + " (" + short_date + ")\n";
																		} else if (creation_date != null) {
																			var d = new Date(creation_date);
																			var short_date = addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();
																			referral = "Registrato il " + short_date + "\n";
																		}

																		var relation = "\n<b>Relazioni commerciali</b> üí∞\n";

																		connection.query('SELECT COUNT(id) As cnt FROM market_history WHERE (from_id = ' + my_player_id + ' AND to_id = ' + player_id + ') OR (from_id = ' + player_id + ' AND to_id = ' + my_player_id + ')', function (err, rows, fields) {
																			if (err) throw err;

																			var history_cnt = rows[0].cnt;
																			if (history_cnt > 0)
																				relation += "Scambi: " + formatNumber(history_cnt) + "\n";

																			connection.query('SELECT COUNT(id) As cnt FROM market_direct_history WHERE (from_id = ' + my_player_id + ' AND to_id = ' + player_id + ') OR (from_id = ' + player_id + ' AND to_id = ' + my_player_id + ') AND type = 2', function (err, rows, fields) {
																				if (err) throw err;

																				var history_direct_cnt = rows[0].cnt;
																				if (history_direct_cnt > 0)
																					relation += "Vendite: " + formatNumber(history_direct_cnt) + "\n";

																				connection.query('SELECT SUM(price) As cnt FROM pay_history WHERE (from_id = ' + my_player_id + ' AND to_id = ' + player_id + ') OR (from_id = ' + player_id + ' AND to_id = ' + my_player_id + ')', function (err, rows, fields) {
																					if (err) throw err;

																					var history_pay_cnt = rows[0].cnt;
																					if (history_pay_cnt != null)
																						relation += "Pagamenti: " + formatNumber(history_pay_cnt) + "¬ß\n";

																					if ((history_cnt == 0) && (history_direct_cnt == 0) && (history_pay_cnt == null))
																						relation = "";

																					if (my_player_id == player_id)
																						relation = "";

																					connection.query('SELECT COUNT(inventory.item_id) As cnt FROM inventory, item WHERE inventory.item_id = item.id AND player_id = ' + player_id + ' AND rarity = "IN" AND inventory.quantity > 0', function (err, rows, fields) {
																						if (err) throw err;

																						var inest = rows[0].cnt;

																						connection.query('SELECT name FROM class WHERE id = ' + class_id, function (err, rows, fields) {
																							if (err) throw err;

																							var class_name = "-";
																							if (Object.keys(rows).length > 0)
																								class_name = rows[0].name;
																							var class_sym = classSym(class_name);

																							var stars = rebSym(reborn);
																							if (player_id == 1)
																								stars = "üëë";

																							var enchant1 = "";
																							if (weapon_enchant_bonus == 1)
																								enchant1 = " üåä";
																							else if (weapon_enchant_bonus == 2)
																								enchant1 = " ‚ö°Ô∏è";
																							else if (weapon_enchant_bonus == 3)
																								enchant1 = " üî•";

																							var enchant2 = "";
																							if (weapon2_enchant_bonus == 1)
																								enchant2 = " üåä";
																							else if (weapon2_enchant_bonus == 2)
																								enchant2 = " ‚ö°Ô∏è";
																							else if (weapon2_enchant_bonus == 3)
																								enchant2 = " üî•";

																							var enchant3 = "";
																							if (weapon3_enchant_bonus == 1)
																								enchant3 = " üåä";
																							else if (weapon3_enchant_bonus == 2)
																								enchant3 = " ‚ö°Ô∏è";
																							else if (weapon3_enchant_bonus == 3)
																								enchant3 = " üî•";

																							//Talismani

																							if (charm_id == 62)
																								weapon += 10;
																							if (charm_id == 184)
																								weapon += 25;
																							if (charm_id == 188)
																								weapon += 30;
																							if (charm_id == 404)
																								weapon_crit += 6;
																							if (charm_id == 493)
																								weapon_crit += 2;
																							if (charm_id == 494)
																								weapon_crit += 4;
																							if (charm_id == 495)
																								weapon2_crit += 3;
																							if (charm_id == 496)
																								weapon3_crit += 3;
																							if (charm_id == 696) {
																								weapon_crit += 5;
																								weapon2_crit += 5;
																								weapon3_crit += 3;
																							}
																							if (charm_id == 698)
																								weapon += 50;
																							if (abBonus > 0) {
																								weapon_crit += abBonus;
																								weapon2_crit += abBonus;
																								weapon3_crit += abBonus;
																							}

																							//Vocazioni

																							if ((class_id == 2) && (reborn == 3))
																								weapon2_crit += 5;
																							if ((class_id == 2) && (reborn >= 4)) {
																								weapon2_crit += 7;
																								weapon3_crit += 7;
																							}
																							if ((class_id == 4) && (reborn == 3)) {
																								weapon_crit += 2;
																								weapon2_crit += 2;
																								weapon3_crit += 2;
																							}
																							if ((class_id == 4) && (reborn >= 4)) {
																								weapon_crit += 7;
																								weapon2_crit += 7;
																								weapon3_crit += 7;
																							}
																							if ((class_id == 5) && (reborn == 3))
																								weapon3_crit += 4;
																							if ((class_id == 5) && (reborn >= 4))
																								weapon3_crit += 8;
																							if ((class_id == 6) && (reborn == 3))
																								weapon2_crit += 2;
																							if ((class_id == 6) && (reborn == 3))
																								weapon3_crit += 2;
																							if ((class_id == 6) && (reborn >= 4))
																								weapon2_crit += 7;
																							if ((class_id == 6) && (reborn >= 4))
																								weapon3_crit += 7;
																							if ((class_id == 6) && (reborn == 5))
																								weapon2_crit += 7;
																							if ((class_id == 6) && (reborn == 5))
																								weapon3_crit += 7;
																							if ((class_id == 8) && (reborn == 3))
																								weapon3_crit += 5;
																							if ((class_id == 8) && (reborn >= 4))
																								weapon3_crit += 7;
																							if ((class_id == 8) && (reborn == 5))
																								weapon_crit += 10;
																							if ((class_id == 9) && (reborn == 3)) {
																								weapon_crit += 2;
																								weapon3_crit += 2;
																							}
																							if ((class_id == 9) && (reborn >= 4)) {
																								weapon_crit += 7;
																								weapon3_crit += 7;
																							}

																							if ((class_id == 7) && (reborn == 5))
																								weapon_crit += Math.round(dragon_critical / 2);

																							if ((class_id == 8) && (reborn == 2))
																								weapon += weapon * 0.10;
																							else if ((class_id == 8) && (reborn == 3))
																								weapon += weapon * 0.15;
																							else if ((class_id == 8) && (reborn == 4))
																								weapon += weapon * 0.17;
																							else if ((class_id == 8) && (reborn == 5))
																								weapon += weapon * 0.30;

																							//Descrizioni

																							var weapon_desc = "";
																							if (weapon_name != "-") {
																								weapon += power_dmg;
																								weapon_crit += power_weapon;
																								weapon_desc = " (+" + Math.round(weapon) + ", " + weapon_crit + "%, " + weapon_enchant + enchant1 + ")";
																							}
																							var weapon2_desc = "";
																							if (weapon2_name != "-") {
																								weapon2 -= power_def;
																								weapon2_crit += power_armor;
																								weapon2_desc = " (" + Math.round(weapon2) + ", " + weapon2_crit + "%, " + weapon2_enchant + enchant2 + ")";
																							}
																							var weapon3_desc = "";
																							if (weapon3_name != "-") {
																								weapon3_crit += power_shield;
																								weapon3_desc = " (" + Math.round(weapon3) + ", " + weapon3_crit + "%, " + weapon3_enchant + enchant3 + ")";
																							}

																							var Keys = [];

																							if (player == message.from.username) {
																								if (((exp >= 1000) && (reborn == 1)) || ((exp >= 1500) && (reborn == 2)) || ((exp >= 2000) && (reborn == 3)) || ((exp >= 3000) && (reborn == 4)) || ((exp >= 10000) && (reborn == 5)))
																									Keys.push(['‚≠êÔ∏è Rinasci ‚≠êÔ∏è']);
																								else if (((exp <= 50) && (reborn == 2)) || ((exp <= 50) && (reborn == 3)) || ((exp <= 50) && (reborn == 4)) || ((exp <= 50) && (reborn == 5)))
																									Keys.push(['‚≠êÔ∏è Rinasci ‚≠êÔ∏è']);

																								Keys.push(["Vocazione üèπ", "Albero Talenti üå≥"]);
																								Keys.push(["Link Invito üó£", "Statistiche üìä", "Artefatti üî±"]);
																								if (((weapon_id == 638) || 
																									 (weapon_id == 639) || 
																									 (weapon_id == 640) || 
																									 (weapon_id == 754) ||
																									 (weapon2_id == 688) || 
																									 (weapon2_id == 689) || 
																									 (weapon2_id == 690) ||
																									 (weapon2_id == 790) ||
																									 (weapon3_id == 671) || 
																									 (weapon3_id == 672) || 
																									 (weapon3_id == 673) || 
																									 (weapon3_id == 791)) || 
																									(house_id >= 5)) {
																									Keys.push(["Nomina Equip/Rifugio üè∑"]);
																								}
																								if (boost_id != 0)
																									Keys.push(["Annulla Bevanda Attiva üö´"]);
																								Keys.push(["Descrizioni üí¨", "Figurine üÉè"]);
																								Keys.push(["Vacanza ‚õ±"], ["Sesso ‚ö§", "Nascita ‚ú®"]);
																								Keys.push(["Orario üï∞"]);
																							} else {
																								if (myhouse_id == 1) {
																									life = "?";
																									total_life = "?";
																									heist_count = "?";
																									spy_count = "?";
																									money = "?";
																									exp = "?";
																									lev = "?";
																									weapon_name = "?";
																									weapon_desc = "";
																									weapon2_name = "?";
																									weapon2_desc = "";
																									weapon3_name = "?";
																									weapon3_desc = "";
																									talismano = "?";
																									talismano_desc = "";
																									dragon_name = "?";
																									dragon_level = "?";
																									dragon_claws_n = "?";
																									dragon_damage = "?";
																									dragon_saddle_n = "?";
																									dragon_defence = "?";
																									dragon_critical = "?";
																									dragon_status = "?";
																								} else if (myhouse_id == 2) {
																									heist_count = "?";
																									spy_count = "?";
																									money = "?";
																									weapon_name = "?";
																									weapon_desc = "";
																									weapon2_name = "?";
																									weapon2_desc = "";
																									weapon3_name = "?";
																									weapon3_desc = "";
																									talismano = "?";
																									talismano_desc = "";
																									dragon_name = "?";
																									dragon_level = "?";
																									dragon_claws_n = "?";
																									dragon_damage = "?";
																									dragon_saddle_n = "?";
																									dragon_arms_n = "?";
																									dragon_defence = "?";
																									dragon_critical = "?";
																								} else if (myhouse_id == 3) {
																									heist_count = "?";
																									spy_count = "?";
																									money = "?";
																									talismano = "?";
																									talismano_desc = "";
																									dragon_name = "?";
																									dragon_level = "?";
																									dragon_claws_n = "?";
																									dragon_damage = "?";
																									dragon_saddle_n = "?";
																									dragon_defence = "?";
																									dragon_critical = "?";
																								} else if (myhouse_id == 4) {
																									heist_count = "?";
																									spy_count = "?";
																									money = "?";
																								} else if (myhouse_id == 5)
																									money = "?";
																							}

																							Keys.push(["Torna al menu"]);

																							var kb = {
																								parse_mode: "HTML",
																								reply_markup: {
																									resize_keyboard: true,
																									keyboard: Keys
																								}
																							};

																							bot.sendMessage(message.chat.id, "<b>" + gender_text + "</b> " + class_sym + "\n" +
																											gender_sym + " " + nickname + (player_custom_nickname != null ? " <i>" + player_custom_nickname + "</i>": "") + "\n" +
																											team_desc + 
																											stars + " " + formatNumber(lev) + " (" + formatNumber(exp) + " xp)\n\n" +
																											"üèπ " + class_name + "\n" +
																											"üíé " + gems + " üèÜ " + inest + "\n" +
																											"üí∞ " + formatNumber(money) + " ¬ß\n" +
																											"‚ù§Ô∏è " + formatNumber(life) + " / " + formatNumber(total_life) + " hp\n" +
																											"üì¶ " + formatNumber(craft_count) + " (" + formatNumber(craft_week) + ")\n" +
																											"üèï " + rifugio + "\n" +
																											"\n<b>Equipaggiamento</b> ‚öîÔ∏è\n" +
																											"üó° " + weapon_name + weapon_desc + "\n" +
																											"ü•ã " + weapon2_name + weapon2_desc + "\n" +
																											"üõ° " + weapon3_name + weapon3_desc + "\n" +
																											"üìø " + talismano + "\n" +

																											(dragon ? "\n<b>" + dragon_name + " (L" + dragon_level + ")</b> üêâ\n" : "") +
																											(dragon ? "Stato: " + dragon_status + "\n" : "") +
																											(dragon ? dragon_claws_n + " (" + dragon_damage + ")\n" : "") +
																											(dragon ? dragon_saddle_n + " (" + dragon_defence + ")\n" : "") +
																											(dragon ? dragon_arms_n + "\n" : "") +
																											(dragon ? "Critico (" + dragon_critical + "%)\n" : "") +

																											relation +

																											"\n<b>Altro</b> üí±\n" +
																											"Abilit√†: " + formatNumber(ability) + "\n" +
																											referral +
																											artifacts +
																											cards_txt +
																											rank +
																											mission_team_count +
																											top_win_text +
																											(player_description != null ? "\n<i>" + player_description + "</i>" : ""), kb);
																						});
																					});
																				});
																			});
																		});
																	});
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});

	});
};

function mainMenu(message) {
	calcLife(message);

	var price_drop = 0;
	var price_drop_msg = "";
	var n = new Date().getDay()
	var n2 = new Date().getDate();

	if (sconto_evento > 0) {
		sconto = sconto_evento;
		price_drop = 1;
		price_drop_msg = "\nüí∏ Oggi sconti del <b>" + sconto + "%</b> all'emporio ed al mercante pazzo per il <b>Black Friday</b>!";
	} else {
		if ((n == 0) && (crazyMode == 0)) {
			if (n2 <= 7)
				sconto = 20;
			price_drop = 1;
			price_drop_msg = "\nüí∏ Oggi sconti del <b>" + sconto + "%</b> all'emporio ed al mercato!";
		} else if (n == 2)
			price_drop_msg = "\nüçÄ Oggi giornata <b>fortunata</b>!";
		else {
			var links = ["Entra nella <a href='https://telegram.me/joinchat/AThc-z_EfojvcE8mbGw1Cw'>Taverna</a> üç∫!",
						 "Commercia nel <a href='https://telegram.me/joinchat/AThc-z90Erh4M2O8Mk5QLw'>Mercato</a> üí∞!",
						 "Iscriviti a @LootBotAvvisi per seguire le novit√†!",
						 "<a href='https://www.paypal.me/EdoardoCortese'>Dona</a> e riceverai üåï per la Ruota della Luna!",
						 "Aggiungi @lootplusbot al tuo gruppo!",
						 "Visita @LaBachecaDiLootia per pubblicizzare o trovare un team!",
						 "Suggerisci migliorie in @Suggerimenti_per_LootBot!",
						 ((n != 6) && (n != 0) ? "Ricordati di completare le Imprese Giornaliere!" : "In settimana completa le Imprese Giornaliere!")];
			var rand = Math.round(Math.random() * (Object.keys(links).length - 1));
			price_drop_msg = "\n " + links[rand];
		}
	}

	var time = "üåï Salve";
	var n = new Date().getHours();

	if ((n >= 7) && (n <= 19))
		time = "‚òÄÔ∏è Buongiorno";
	else if ((n > 19) && (n < 23))
		time = "üåô Buonasera";

	connection.query('SELECT id, account_id, mission_id, mission_special_id, travel_id, cave_id, exp, life, total_life, reborn, money, holiday, boost_id, market_pack, heist_protection, mission_time_end, mission_special_time_end, travel_time_end, cave_time_end, dungeon_time, boost_mission, paralyzed, mission_party, gender, show_time FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0)
			return;

		var banReason = isBanned(rows[0].account_id);
		if (banReason != null) {
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banReason + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var gender_text = "a";
		var christmas = "ü§∂üèº";
		var player_text = "Giocatrice";
		if (rows[0].gender == "M") {
			gender_text = "o";
			christmas = "üéÖüèº";
			player_text = "Giocatore";
		}

		var msgtext = "<b>" + time + " " + message.from.username + "!</b>";

		// Festivit√† (mese -1)
		var fest_d = new Date();
		var hour = fest_d.getHours();
		var day = fest_d.getDate();
		var month = fest_d.getMonth();
		var easter = getEaster();
		if ((day == 25) && (month == 11))
			msgtext += " Buon Natale! " + christmas;
		else if ((day == easter[1]) && (month == easter[0]-1))
			msgtext += " Buona Pasqua! üê£";
		else if (((day == 31) && (month == 9) && (hour >= 12)) || ((day == 1) && (month == 10) && (hour <= 12)))
			msgtext += " Buon Halloween! üéÉ";
		else if ((day == 14) && (month == 1))
			msgtext += " Buon San Valentino! üíò";
		else if ((day == 15) && (month == 4))
			msgtext += " Buon Compleanno Loot! ‚öîÔ∏è";

		if (rows[0].show_time == 1) {
			var d = new Date();
			msgtext += "\nüï∞ " + addZero(d.getHours()) + ":" + addZero(d.getMinutes());
		}

		var player_id = rows[0].id;
		var mission_id = rows[0].mission_id;
		var mission_special_id = rows[0].mission_special_id;
		var travel_id = rows[0].travel_id;
		var cave_id = rows[0].cave_id;
		var exp = rows[0].exp;
		var lev = Math.floor(exp / 10);
		var life = rows[0].life;
		var tot_life = rows[0].total_life;
		var reborn = rows[0].reborn;
		var money = rows[0].money;
		var holiday = rows[0].holiday;
		var boost_id = rows[0].boost_id;
		var market_pack = rows[0].market_pack;
		var heist_protection = rows[0].heist_protection;

		var mission_time_end = rows[0].mission_time_end;
		var mission_special_time_end = rows[0].mission_special_time_end;
		var travel_time_end = rows[0].travel_time_end;
		var cave_time_end = rows[0].cave_time_end;
		var dungeon_time = rows[0].dungeon_time;
		var boost_end = rows[0].boost_mission;
		var mission_party = rows[0].mission_party;

		checkAllProgress(player_id);

		if (rows[0].paralyzed > 0) {
			var plur = "i";
			if (rows[0].paralyzed == 1)
				plur = "o";
			msgtext = msgtext + "\n‚ö°Ô∏è Sei paralizzat" + gender_text + " ancora per <b>" + rows[0].paralyzed + " turn" + plur + "</b>";
		}

		var global = connection_sync.query('SELECT global_cap FROM config WHERE global_eventon = 1 AND global_eventhide = 0');
		if (Object.keys(global).length > 0) {
			var rows = connection_sync.query('SELECT SUM(value) As val FROM achievement_global');
			if (Object.keys(global).length > 0)
				msgtext += "\nüåç Impresa globale: " + Math.floor(rows[0].val/global[0].global_cap*100) + "%";
		}

		if (mission_party > 0) {
			var rows = connection_sync.query('SELECT p1.mission_time_end, p1.wait, p1.part_id, p0.parts, p0.duration FROM mission_team_list p0, mission_team_party p1, mission_team_party_player p2 WHERE p0.id = p1.assigned_to AND p1.party_id = p2.party_id AND p1.team_id = p2.team_id AND p2.player_id = ' + player_id);
			if (Object.keys(rows).length > 0) {
				var wait_time = new Date(rows[0].mission_time_end);
				if (rows[0].wait == 1) {
					var now = new Date();
					var diff = Math.round((now - d) / 1000); //in secondi
					diff = Math.abs(diff);
					var alert = "";
					if (diff <= ((rows[0].duration/rows[0].parts)/2))
						alert = " ‚ò†";
					msgtext += "\nüèÜ Incarico in attesa di votazione (" + rows[0].part_id + "/" + rows[0].parts + ")" + alert;
				} else {
					msgtext += "\nüèÜ Incarico in corso fino alle " + addZero(wait_time.getHours()) + ":" + addZero(wait_time.getMinutes()) + " " + rows[0].part_id + "/" + rows[0].parts;
				}
			}
		}

		connection.query('SELECT phase, time_end FROM assault A, team_player T WHERE A.team_id = T.team_id AND T.player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				var dayDesc = "Assalto in attesa";
				var phase = rows[0].phase;
				if (rows[0].time_end != null) {
					var d = new Date(rows[0].time_end);
					var now = new Date();
					var diff = Math.round((now - d) / 1000); //in secondi
					diff = Math.abs(diff);

					if (phase == 1)
						dayDesc = "Giorno della Preparazione (" + toTime(diff) + ")";
					else if (phase == 2)
						dayDesc = "Giorno dell'Assalto (" + toTime(diff) + ")";
					else if (phase == 3)
						dayDesc = "Giorno dell'Assalto Completato (" + toTime(diff) + ")";
				}
				msgtext += "\nüê∫ " + dayDesc;

				var rows = connection_sync.query('SELECT APP.role, APP.team_id, APP.place_id, IFNULL(level,0) As level, time_end FROM assault_place_player_id APP LEFT JOIN assault_place_team APT ON APP.place_id = APT.place_id AND APT.team_id = APP.team_id WHERE APP.player_id = ' + player_id);
				if (Object.keys(rows).length > 0) {
					var working = "";
					var increm = "";
					if (rows[0].time_end != null) {
						var d = new Date(rows[0].time_end);
						working = " üèó " + addZero(d.getHours()) + ":" + addZero(d.getMinutes());
					}
					var role = rows[0].role;
					if ((phase == 2) && (role == 1)) {
						var electedIncrem = connection_sync.query("SELECT COUNT(id) As cnt FROM assault_place_miniboost WHERE team_id = " + rows[0].team_id);
						increm = " - " + electedIncrem[0].cnt + " üí¢";
					}
					msgtext += " - " + assaultEmojiList[rows[0].place_id-1] + " Lv " + rows[0].level + working + increm;
					var rows = connection_sync.query("SELECT 1 FROM assault_place_miniboost WHERE team_id = " + rows[0].team_id + " AND player_id = " + player_id);
					if ((Object.keys(rows).length > 0) && (role == 0))
						msgtext += " üí¢";
				}
			}

			connection.query("SELECT lobby_id, wait_time FROM map_lobby WHERE player_id = " + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					if (rows[0].wait_time != null) {
						var now = new Date();
						var wait_time = new Date(rows[0].wait_time);
						var min = Math.round(((wait_time - now) / 1000) / 60);
						var plur = "i";
						if (min <= 1)
							plur = "o";
						if (min < 1)
							min = "meno di 1";
						msgtext += "\nüó∫ Attesa mappa " + min + " minut" + plur;
					} else if (rows[0].lobby_id != null) {
						var lobby = connection_sync.query('SELECT 1 FROM map_lobby_list WHERE lobby_id = ' + rows[0].lobby_id);
						if (Object.keys(lobby).length == 0) {
							var wait = connection_sync.query('SELECT COUNT(lobby_id) As cnt FROM map_lobby WHERE lobby_id = ' + rows[0].lobby_id);
							msgtext += "\nüó∫ Lobby in attesa... " + wait[0].cnt + "/" + lobby_total_space + " giocatori";
						}
					}
				}

				connection.query('SELECT S.room_time, S.room_id, L.rooms, TIMESTAMPDIFF(HOUR, NOW(), finish_date) As diff, finish_time, unlimited FROM dungeon_status S, dungeon_list L WHERE S.dungeon_id = L.id AND S.player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					var min = 0;
					var room_time = 0;
					var room_num = 0;
					var room_tot_num = 0;
					var dungeon_min = -1;
					var dungeon_diff = "";
					var dungeon_finish_time;
					if (Object.keys(rows).length > 0) {
						room_time = rows[0].room_time;
						var now = new Date();
						if (rows[0].room_time != null)
							dungeon_min = Math.round(((new Date(room_time) - now) / 1000) / 60);
						if (rows[0].diff <= 5)
							dungeon_diff = " üïê";
						room_num = rows[0].room_id;
						room_tot_num = rows[0].rooms;
						dungeon_finish_time = Math.round(((new Date(rows[0].finish_time) - now) / 1000) / 60 / 60);	// dungeon
						if ((rows[0].diff < dungeon_finish_time) || (rows[0].unlimited == 1))
							dungeon_finish_time = rows[0].diff;	// istanza
					}

					if (crazyMode == 0) {
						if (market_pack == 0)
							msgtext += "\nüëù Pacchetto Mercante disponibile";
					} else {
						if ((3-market_pack) > 0)
							msgtext += "\nüëù Pacchetti Mercante disponibili (" + (3-market_pack) + ")";
					}

					connection.query('SELECT wait_time FROM heist_progress WHERE from_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length > 0) {
							if (rows[0].wait_time == null)
								msgtext += "\n‚ùì Gnomo in attesa di istruzioni";
							else {
								var wait_time = new Date(rows[0].wait_time);
								msgtext += "\nüî¶ Gnomo in esplorazione fino alle " + addZero(wait_time.getHours()) + ":" + addZero(wait_time.getMinutes());
							}
						}

						if (heist_protection != null) {
							var prot_time = new Date(heist_protection);
							msgtext += "\nüö∑ Protett" + gender_text + " fino alle " + addZero(prot_time.getHours()) + ":" + addZero(prot_time.getMinutes());
						}

						connection.query('SELECT zone_id FROM event_mana_status WHERE time_start IS NOT NULL AND player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length > 0) {
								var zone = "";
								if (rows[0].zone_id == 1)
									type = "Blu";
								else if (rows[0].zone_id == 2)
									type = "Giallo";
								else if (rows[0].zone_id == 3)
									type = "Rosso";

								msgtext = msgtext + "\n‚õè Estrazione di Mana " + type + " in corso";
							}

							connection.query('SELECT COUNT(*) As cnt FROM heist WHERE to_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length > 0) {
									if (rows[0].cnt > 0) {
										var plur = "o";
										if (rows[0].cnt > 1)
											plur = "i";
										msgtext = msgtext + "\n‚ö†Ô∏è <b>" + rows[0].cnt + "</b> gnom" + plur + " in lontananza";
									}
								}

								connection.query('SELECT COUNT(*) As cnt FROM heist_progress WHERE to_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length > 0) {
										if (rows[0].cnt > 0) {
											var plur = "o";
											if (rows[0].cnt > 1)
												plur = "i";
											msgtext = msgtext + "\n‚ö†Ô∏è <b>" + rows[0].cnt + "</b> gnom" + plur + " davanti al rifugio";
										}
									}

									connection.query('SELECT `extracting`, `generated`, `max_qnt` FROM event_dust_status WHERE player_id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length > 0) {
											if (rows[0].extracting == 1)
												msgtext = msgtext + "\n‚è≤ Generatore acceso (" + rows[0].generated + "/" + rows[0].max_qnt + " unit√†)";
										}

										connection.query('SELECT datetime FROM heist WHERE from_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											if (Object.keys(rows).length > 0) {
												var heist_end = new Date(rows[0].datetime);
												msgtext = msgtext + "\nüî¶ Gnomo in ispezione fino alle " + addZero(heist_end.getHours()) + ":" + addZero(heist_end.getMinutes());
											}

											connection.query('SELECT name, progress, value, ROUND(progress/IF(multiply=0, value, value*' + reborn + ')*100) As perc, multiply FROM achievement_daily, achievement_list, achievement_status WHERE achievement_daily.achievement_id = achievement_list.id AND achievement_status.achievement_id = achievement_list.id AND player_id = ' + player_id + ' AND completed = 0 ORDER BY perc DESC', function (err, rows, fields) {
												if (err) throw err;

												var achievement = "";
												if (Object.keys(rows).length > 0) {
													if (rows[0].multiply == 1)
														rows[0].value = rows[0].value*reborn;
													achievement = "\nüèã Impresa imminente: " + rows[0].name + " (" + formatNumber(rows[0].progress) + "/" + formatNumber(rows[0].value) + ")";
												}

												connection.query('SELECT time_end, day_cnt, item.name FROM merchant_offer, item WHERE merchant_offer.item_id = item.id AND player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length > 0) {
														if (rows[0].day_cnt < merchant_limit) {
															var d = new Date();
															if ((d.getHours() > 8) && (d.getHours() < 23)) {
																if (rows[0].time_end != null) {
																	var time_end = new Date(rows[0].time_end);
																	var short_date = addZero(time_end.getHours()) + ":" + addZero(time_end.getMinutes());
																	if (time_end.getHours() < 23)
																		msgtext = msgtext + "\nüí¨ Contrabbandiere assente fino alle " + short_date;
																} else
																	msgtext = msgtext + "\nüî© Offerta Contrabbandiere disponibile"; //per " + rows[0].name;
															}
														}
													}

													connection.query('SELECT boost_time, sleep_time_end, life FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;

														if (mission_id > 0) {
															var mission_end = new Date(mission_time_end);
															var now = new Date();
															var tomorrow = new Date();
															tomorrow.setDate(now.getDate() + 1);
															var tomorrow2 = new Date();
															tomorrow2.setDate(now.getDate() + 2);
															if (tomorrow.getFullYear() == mission_end.getFullYear() && tomorrow.getMonth() == mission_end.getMonth() && tomorrow.getDate() == mission_end.getDate()) {
																msgtext = msgtext + "\n‚öî Missione fino alle " + addZero(mission_end.getHours()) + ":" + addZero(mission_end.getMinutes()) + " di domani";
															} else if (tomorrow2.getFullYear() == mission_end.getFullYear() && tomorrow2.getMonth() == mission_end.getMonth() && tomorrow2.getDate() == mission_end.getDate()) {
																msgtext = msgtext + "\n‚öî Missione fino alle " + addZero(mission_end.getHours()) + ":" + addZero(mission_end.getMinutes()) + " di dopodomani";
															} else {
																msgtext = msgtext + "\n‚öî Missione fino alle " + addZero(mission_end.getHours()) + ":" + addZero(mission_end.getMinutes());
															}
														}
														if (mission_special_id > 0) {
															var mission_end = new Date(mission_special_time_end);
															msgtext = msgtext + "\nüóæ Itinerario fino alle " + addZero(mission_end.getHours()) + ":" + addZero(mission_end.getMinutes());
														}
														if (travel_id > 0) {
															var travel_end = new Date(travel_time_end);
															msgtext = msgtext + "\nüó∫ Viaggio fino alle " + addZero(travel_end.getHours()) + ":" + addZero(travel_end.getMinutes()) + " del " + addZero(travel_end.getDate()) + "/" + addZero(travel_end.getMonth() + 1) + "/" + travel_end.getFullYear();
														}
														if (cave_id > 0) {
															var cave_end = new Date(cave_time_end);
															msgtext = msgtext + "\nüóª Esplorazione cava fino alle " + addZero(cave_end.getHours()) + ":" + addZero(cave_end.getMinutes()) + " del " + addZero(cave_end.getDate()) + "/" + addZero(cave_end.getMonth() + 1) + "/" + cave_end.getFullYear();
														}
														if (dungeon_time != null) {
															var dungeon = new Date(dungeon_time);
															msgtext = msgtext + "\nüõ° Attesa dungeon fino alle " + addZero(dungeon.getHours()) + ":" + addZero(dungeon.getMinutes());
														}
														if (dungeon_min > -1) {
															var plur = "i";
															if (dungeon_min <= 1)
																plur = "o";
															var room_txt = room_num + "/" + room_tot_num;
															if (room_num > room_tot_num)
																room_txt = "Stanza finale";
															if (dungeon_min == 0)
																dungeon_min = "meno di 1";
															var plurH = "e";
															if (dungeon_finish_time <= 1)
																plurH = "a";
															if (dungeon_finish_time == 0)
																dungeon_finish_time = "meno di 1";
															msgtext = msgtext + "\nüõ° Prossima stanza tra " + dungeon_min + " minut" + plur + " (" + room_txt + ")" + dungeon_diff + " üí• " + dungeon_finish_time + " or" + plurH;
														}
														if ((room_time == null) && (dungeon_time == null)) {
															var room_txt = room_num + "/" + room_tot_num;
															if (room_num > room_tot_num)
																room_txt = "Stanza finale";
															msgtext = msgtext + "\n‚ùóÔ∏è Prosegui il dungeon! (" + room_txt + ")" + dungeon_diff;
														}

														if (Object.keys(rows).length > 0) {

															var boost_time = rows[0].boost_time;
															var sleep_time_end = rows[0].sleep_time_end;
															var dragon_life = rows[0].life;

															if (rows[0].boost_time != null) {
																var dragon = new Date(rows[0].boost_time);
																var now = new Date();
																if (dragon < now)
																	msgtext = msgtext + "\nüç∂ Bevanda pronta al ritiro";
																else
																	msgtext = msgtext + "\nüç∂ Produzione bevanda alle " + addZero(dragon.getHours()) + ":" + addZero(dragon.getMinutes());
															}

															var dragon = connection_sync.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id);

															if (Object.keys(dragon).length > 0) {
																if (dragon[0].combat == 1)
																	msgtext = msgtext + "\nüêâ Drago in combattimento nella Vetta";
																else
																	if (sleep_time_end != null) {
																		var dragon_time = new Date(rows[0].sleep_time_end);
																		msgtext = msgtext + "\nüí§ Il drago riposa fino alle " + addZero(dragon_time.getHours()) + ":" + addZero(dragon_time.getMinutes());
																	} else {
																		var d = new Date();
																		var err = 0;
																		if (d.getHours() == 2) {
																			if (d.getMinutes() > 30)
																				err = 1;
																		}
																		if ((d.getHours() >= 3) && (d.getHours() < 9))
																			err = 1;
																		if ((checkDragonTopOn == 1) && (err == 0)) {
																			if (dragon_life > 0) {
																				var dragon_status = connection_sync.query('SELECT wait_time FROM dragon_top_status WHERE player_id = ' + player_id);
																				if (dragon_status[0].wait_time != null) {
																					var dragon_status_time = new Date(dragon_status[0].wait_time);
																					msgtext = msgtext + "\nüí§ Il drago riposa dopo uno scontro fino alle " + addZero(dragon_status_time.getHours()) + ":" + addZero(dragon_status_time.getMinutes());
																				} else
																					msgtext = msgtext + "\nüêâ Drago in attesa nella Vetta";
																			} else
																				msgtext = msgtext + "\nüêâ Drago esausto, fallo riposare!";
																		}
																	}
															} else {
																if (sleep_time_end != null) {
																	var dragon_time = new Date(rows[0].sleep_time_end);
																	msgtext = msgtext + "\nüí§ Il drago riposa fino alle " + addZero(dragon_time.getHours()) + ":" + addZero(dragon_time.getMinutes());
																}
															}
														}
														if (boost_id == 1) {
															var plur = "i";
															if (boost_end == 1)
																plur = "e";
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Energetica attiva per " + boost_end + " mission" + plur;
														}
														if (boost_id == 2) {
															var plur = "i";
															if (boost_end == 1)
																plur = "e";
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Scrigno attiva per " + boost_end + " mission" + plur;
														}
														if (boost_id == 4) {
															var plur = "i";
															if (boost_end == 1)
																plur = "e";
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Livellante attiva per " + boost_end + " mission" + plur;
														}
														if (boost_id == 3) {
															var plur = "i";
															if (boost_end == 1)
																plur = "io";
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Fiamma di Drago attiva per " + boost_end + " viagg" + plur;
														}
														if (boost_id == 5) {
															var plur = "i";
															if (boost_end == 1)
																plur = "o";
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Quadrifoglio attiva per " + boost_end + " utilizz" + plur;
														}
														if (boost_id == 6) {
															var plur = "hi";
															if (boost_end == 1)
																plur = "o";
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Furia attiva per " + boost_end + " attacc" + plur;
														}
														if (boost_id == 7) {
															var plur = "e";
															var plur2 = "i";
															if (boost_end == 1) {
																plur = "a"
																plur2 = "e";
															}
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Bottino attiva per " + boost_end + " stanz" + plur + " dungeon/mission" + plur2;
														}
														if (boost_id == 8) {
															var plur = "e";
															if (boost_end == 1)
																plur = "a";
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Corsa attiva per " + boost_end + " stanz" + plur;
														}
														if (boost_id == 9) {
															var plur = "i";
															if (boost_end == 1)
																plur = "e";
															if (boost_end > 0)
																msgtext = msgtext + "\nüçπ Bevanda Idromele attiva per " + boost_end + " ispezion" + plur;
														}
														if (holiday > 0)
															msgtext = msgtext + "\n‚õ± Sei in modalit√† vacanza!\nVisita la sezione Giocatore per disattivarla!";

														if (achievement != "")
															msgtext += achievement;

														var heart = "‚ù§Ô∏è";
														if (life/tot_life*100 < 15)
															heart = "üñ§";
														else if (life/tot_life*100 < 60)
															heart = "üß°";
														else if (life == 0)
															heart = "‚ò†Ô∏è";

														msgtext += "\n" + rebSym(reborn) + " <b>" + lev + "</b> " + heart + " " + formatNumber(life) + "/" + formatNumber(tot_life) + "\nüí∞ " + formatNumber(money) + " ¬ß";
														msgtext += price_drop_msg;

														var f = 0;
														for(i = 0; i < Object.keys(mainKeys).length; i++) {
															if (mainKeys[i][0].indexOf("Giocatore") != -1)
																mainKeys[i][0] = mainKeys[i][0].replace("Giocatore", player_text);
															else if (mainKeys[i][0].indexOf("Giocatrice") != -1)
																mainKeys[i][0] = mainKeys[i][0].replace("Giocatrice", player_text);
														}

														main_html = {
															parse_mode: "HTML",
															disable_web_page_preview: true,
															reply_markup: {
																resize_keyboard: true,
																keyboard: mainKeys
															}
														};

														bot.sendMessage(message.chat.id, msgtext, main_html);
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
}

function printStart(message) {
	connection.query('SELECT invite_code, gender FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var code = rows[0].invite_code;
		var gender_text = "a"
		if (rows[0].gender == "M")
			gender_text = "o";

		bot.sendMessage(message.chat.id, '‚ö°Ô∏è Benvenut' + gender_text + ' nel <b>LootBot</b>!‚ö°Ô∏è \n\n' +
						'Benvenut' + gender_text + ' nel bot pi√π divertente di Telegram! Dal 15 Maggio 2016 intrattiene migliaia di giocatori italiani ogni giorno, esplora il mondo di Lootia, intraprendi missioni, sopravvivi nei misteriosi dungeon ed affronta ogni tipo di creatura insieme al tuo team!\n\n' +
						'Il tuo nickname da avventurier' + gender_text + ' √®: <b>' + message.from.username + '</b>.\n' +
						'Se modifichi il nickname perderai i dati di gioco! Usa il comando /migrazione dopo averlo modificato su telegram.\n' +
						'Rispetta la community e sarai rispettato, gioca consapevolmente.\n\n' +
						'<b>Per iniziare</b> üó°\n' +
						'- Leggi i <a href="http://telegra.ph/Introduzione-a-Loot-Bot-12-15">Suggerimenti per i nuovi avventurieri</a>\n' +
						'- Segui il canale @wikilootbot\n' +
						'- Visualizza i /gruppi e le /faq avviando l\'importantissimo bot di supporto @lootplusbot\n' +
						'- Entra nella <a href="https://t.me/joinchat/EXFobEDH8FaawvMWE7p-Jg">Lootbot School</a> per imparare le basi\n' +
						'- Cerca un team per imparare e collaborare, visita la <a href="https://t.me/LaBachecaDiLootia">Bacheca di Lootia</a>\n\n' +
						'<b>Regolamento</b> üö´\n' +
						'- Importante! Leggi il <a href="http://telegra.ph/Regolamento-di-LOOT-01-13">Regolamento Completo di Loot</a>.\n\n' +
						'<b>Inattivit√†</b> üîé\n' +
						'- Dopo 60 giorni di inattivit√† il tuo account sar√† automaticamente inserito in modalit√† vacanza.\n' +
						'- Dopo 6 mesi di inattivit√† il tuo account sar√† eliminato senza possibilit√† di ripristinarlo.\n' +
						'- Come ultima attivit√† si intende un qualsiasi comando inviato tramite il bot principale o il Plus.\n\n' +
						'<b>Link Utili</b> üìÉ\n' +
						'- Per aiutarmi a mantenere il server, <a href="https://www.paypal.me/EdoardoCortese">fai una donazione</a>, riceverai delle Monete Lunari üåï!\n\n' +
						'<b>Crediti</b> üëë\n' +
						'- Edoardo Cortese @fenix45\n' +
						'- Emanuele Finiguerra @LastSoldier95', no_preview_html);

		mainMenu(message);
	});
}

function checkKeyboard() {
	mainKeys = defaultKeys.slice();

	if (eventMana == 1)
		mainKeys.splice(0, 0, ['‚õè Miniere di Mana (Evento) ‚õ∞ ']);
	if (lootteria == 1)
		mainKeys.splice(0, 0, ['üíé Lootteria (Evento) üí∞ ']);
	if (crazyMode == 1)
		mainKeys.splice(0, 0, ['üéâ Weekend della Follia (Evento) üò±']);
	if (luckyMode == 1)
		mainKeys.splice(0, 0, ['üåí Evento della Luna (Evento) üçÄ']);
	if (arena == 1)
		mainKeys.splice(0, 0, ['üê≤ Arena dei Draghi (Evento) üî• ']);
	if (eventFestival == 1)
		mainKeys.splice(0, 0, ['üéâCrafting Festival (Evento) üõ†']);
	if (specialMission == 1)
		mainKeys.splice(0, 0, ['üèπItinerario Propizio (Evento) üéØ']);
	if (wanted == 1)
		mainKeys.splice(0, 0, ['üí∞Il Ricercato (Evento) üë∫']);
	if (eventDust == 1)
		mainKeys.splice(0, 0, ['‚è≤ Generatore di Polvere (Evento) üî•']);
	if (villa == 1)
		mainKeys.splice(0, 0, ['üè∞ Villa di LastSoldier95 (Evento) üì¶']);
	if (eventTeamStory == 1)
		mainKeys.splice(0, 0, ['üí¨ Il Canto del Bardo (Evento) üìö']);
	var d = new Date();
	if ((d.getDay() == 3) && (d.getHours() > 9) && (d.getHours() < 22))
		mainKeys.splice(0, 0, ['üìÉ Casa dei Giochi (Evento) üé≤']);
	if (snowHouse == 1)
		mainKeys.splice(0, 0, ['üéÑ Villaggio Innevato (Evento) üå®']);
	if (gnomorra == 1)
		mainKeys.splice(0, 0, ['üìÑ Gnomorra Lootiana (Evento) üàµ']);

	main_html = {
		parse_mode: "HTML",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			keyboard: mainKeys
		}
	};
};

function activateEvent() {
	connection.query('SELECT next_event_name FROM config', function (err, rows, fields) {
		if (err) throw err;
		if (rows[0].next_event_name == null)
			return;

		var event = rows[0].next_event_name;

		if (event == "luckyMode") {
			connection.query('DELETE FROM contest', function (err, rows, fields) {
				if (err) throw err;
			});
		}
		if (event == "arena") {
			connection.query('DELETE FROM event_arena_status', function (err, rows, fields) {
				if (err) throw err;
				connection.query('DELETE FROM event_arena_dragon', function (err, rows, fields) {
					if (err) throw err;
				});
			});
		}
		if (event == "lootteria") {
			connection.query('DELETE FROM event_lottery_coins', function (err, rows, fields) {
				if (err) throw err;
				connection.query('UPDATE event_lottery_prize SET extracted = 0', function (err, rows, fields) {
					if (err) throw err;
				});
			});
		}
		if (event == "villa") {
			connection.query('DELETE FROM event_villa_gift', function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('UPDATE event_villa_status SET points = 10', function (err, rows, fields) {
				if (err) throw err;
			});
		}
		if (event == "wanted") {
			connection.query('DELETE FROM event_wanted_status', function (err, rows, fields) {
				if (err) throw err;
			});
		}
		if (event == "eventTeamStory") {
			connection.query('DELETE FROM event_team_story', function (err, rows, fields) {
				if (err) throw err;
			});
		}
		if (event == "eventFestival") {
			connection.query('UPDATE event_crafting_status SET total_cnt = 0', function (err, rows, fields) {
				if (err) throw err;
				reloadFestival(1);
			});
		}
		if (event == "checkDragonTopOn") {
			checkDragonTopOn = onoff;
			connection.query('UPDATE config SET global_msg = "Le <b>Vette dei Draghi</b> sono aperte!\nPartecipa agli incontri tra draghi pi√π popolari delle terre di Lootia e vinci sostanziosi <b>premi</b>!\nBuon divertimento!", global_msg_on = 1', function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(20471035, "Lancia /sendmsg per inviare l'avviso di apertura vette");
			});
		}
		if (event == "gnomorra") {
			connection.query('DELETE FROM event_gnomorra', function (err, rows, fields) {
				if (err) throw err;
			});
		}

		updateValue(event, 1);
		reloadEvents();
		checkKeyboard();
		console.log("Evento attivato: " + event);
		bot.sendMessage(20471035, "Evento attivato: " + event);
	});
}

function deactivateEvent() {
	connection.query('SELECT next_event_name FROM config', function (err, rows, fields) {
		if (err) throw err;
		if (rows[0].next_event_name == null)
			return;

		var event = rows[0].next_event_name;

		var d = new Date();
		if ((event == "villa") && (d.getDay() != 3))	// se non √® mercoled√¨
			return;

		if (event == "wanted") {
			connection.query('UPDATE event_wanted_status SET wanted_id = 0', function (err, rows, fields) {
				if (err) throw err;
			});
		}

		if (event == "checkDragonTopOn") {
			connection.query('ALTER TABLE dragon_dummy AUTO_INCREMENT = 100000', function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('DELETE FROM dragon_dummy', function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('DELETE FROM dragon_top_dummy', function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('DELETE FROM dragon_top_rank', function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('DELETE FROM dragon_top_status', function (err, rows, fields) {
				if (err) throw err;
			});
		}

		updateValue(event, 0);
		reloadEvents();
		checkKeyboard();
		console.log("Evento disattivato: " + event);
		bot.sendMessage(20471035, "Evento disattivato: " + event);

		connection.query('UPDATE config SET next_event_name = NULL', function (err, rows, fields) {
			if (err) throw err;
		});
	});
}

function checkSpam(message) {
	var isOk = true;
	var diff = 0;
	if (timevar[message.from.id] != undefined) {
		diff = new Date() / 1000 - timevar[message.from.id];
		if (diff < 0.8) {
			//console.log("SPAM Utente " + message.from.username + ": " + truncate(message.text.replace("\n"," "), 100));
			isOk = false;
		}
	}
	timevar[message.from.id] = new Date() / 1000;

	return isOk;
}

function reloadEvents() {
	crazyMode = getValue("crazyMode");
	luckyMode = getValue("luckyMode");
	arena = getValue("arena");
	lootteria = getValue("lootteria");
	villa = getValue("villa");
	wanted = getValue("wanted");
	eventTeamStory = getValue("eventTeamStory");
	eventFestival = getValue("eventFestival");
	specialMission = getValue("specialMission");
	checkDragonTopOn = getValue("checkDragonTopOn");
	gnomorra = getValue("gnomorra");
}

function updateValue(keyName, valueName) {
	var data = iniBuilder.parse(fs.readFileSync('events.ini'));
	var entry = iniBuilder.find(data, keyName);
	entry.value = valueName;
	fs.writeFileSync('events.ini', iniBuilder.serialize(data));
}

function getValue(keyName) {
	var data = iniBuilder.parse(fs.readFileSync('events.ini'));
	var entry = iniBuilder.find(data, keyName);
	return entry.value;
}

function cercaTermine(message, param, player_id) {
	var search = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Cerca Ancora"], ["Torna al menu"]]
		}
	};

	if (re6.test(param) == false) {
		bot.sendMessage(message.chat.id, "Criteri di ricerca non validi.", back);
		return;
	}

	connection.query('INSERT INTO search_history (player_id, term) VALUES (' + player_id + ',"' + param + '")', function (err, rows, fields) {
		if (err) throw err;
	});

	connection.query('SELECT id, term FROM search_history WHERE player_id = ' + player_id + ' ORDER BY id DESC LIMIT 2', function (err, rows, fields) {
		if (err) throw err;

		var prev = 0;
		var prevtxt = "";
		if (Object.keys(rows).length == 2) {
			prevtxt = "Torna a " + rows[1].term;
			prev = 1;
		}

		connection.query('SELECT exp, reborn, weapon_id, weapon2_id, weapon3_id, charm_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var lev = Math.floor(rows[0].exp / 10);
			var reb = rows[0].reborn;

			var weapon1 = rows[0].weapon_id;
			var weapon2 = rows[0].weapon2_id;
			var weapon3 = rows[0].weapon3_id;
			var weapon4 = rows[0].charm_id;

			param = param.trim();

			var rarity = ["C", "NC", "R", "UR", "L", "E", "S", "D", "UE", "U", "X", "IN"];
			var check = rarity.indexOf(param.split(" ")[0]);

			if ((Object.keys(param).length <= 4) && (check != -1)) {
				if (param.startsWith(rarity[check])) {
					var craftable = -1;
					var extra = "";
					var extra_txt = "";
					if (param.indexOf(" ") != -1) {
						craftable = param.substring(Object.keys(param).length - 1, Object.keys(param).length);
						extra = " AND craftable = " + craftable;
						if (craftable == 1)
							extra_txt = " creabili";
						else
							extra_txt = " base";
						param = param.slice(0, -2);
					}

					connection.query('SELECT name, rarity, craftable FROM item WHERE rarity = "' + param + '"' + extra + ' ORDER BY name', function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0) {
							var bottext = "Risultati per rarit√† '" + param + "'" + extra_txt + ":\n";
							var iKeys = [];
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].craftable == 0)
									bottext += "*" + rows[i].name + "* (" + rows[0].rarity + ")\n";
								else
									bottext += rows[i].name + " (" + rows[0].rarity + ")\n";
								iKeys.push(["Cerca " + rows[i].name]);
							}

							iKeys.push(["Cerca Ancora"]);
							if (prev == 1)
								iKeys.push([prevtxt]);
							iKeys.push(["Torna al menu"]);

							var kb2 = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									keyboard: iKeys
								}
							};

							bot.sendMessage(message.chat.id, bottext, kb2);
						} else {
							bot.sendMessage(message.chat.id, "Non ci sono oggetti" + extra_txt + " con quel livello di rarit√†.", search);
						}
					});
					return;
				}
			}

			if (param.toLowerCase() == "armi") {
				connection.query('SELECT id, name, rarity, power FROM item WHERE power > 0 ORDER BY name', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].id == 221)
								rows[i].power = calcNecro(300, lev, reb, 1);
							else if ((rows[i].id == 638) || (rows[i].id == 639) || (rows[i].id == 640) || (rows[i].id == 754))
								rows[i].power = calcNecro(300, lev, reb, 2);

							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")   +" + rows[i].power + "\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Cerca Ancora"]);
						if (prev == 1)
							iKeys.push([prevtxt]);
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}
			if (param.toLowerCase() == "armature") {
				connection.query('SELECT id, name, rarity, power_armor FROM item WHERE power_armor < 0 ORDER BY name', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].id == 577)
								rows[i].power_armor = -Math.abs(calcNecro(250, lev, reb, 1));
							else if ((rows[i].id == 688) || (rows[i].id == 689) || (rows[i].id == 690) || (rows[i].id == 790))
								rows[i].power_armor = -Math.abs(calcNecro(250, lev, reb, 2));

							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")   " + rows[i].power_armor + "\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Cerca Ancora"]);
						if (prev == 1)
							iKeys.push([prevtxt]);
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}
			if (param.toLowerCase() == "scudi") {
				connection.query('SELECT id, name, rarity, power_shield FROM item WHERE power_shield < 0 ORDER BY name', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].id == 600)
								rows[i].power_shield = -Math.abs(calcNecro(250, lev, reb, 1));
							else if ((rows[i].id == 671) || (rows[i].id == 672) || (rows[i].id == 673) || (rows[i].id == 791))
								rows[i].power_shield = -Math.abs(calcNecro(250, lev, reb, 2));

							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")   " + rows[i].power_shield + "\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Cerca Ancora"]);
						if (prev == 1)
							iKeys.push([prevtxt]);
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}
			if (param.toLowerCase() == "drago") {
				connection.query('SELECT name, rarity, craftable FROM item WHERE dragon_power <> 0 OR item.rarity = "D" OR (rarity = "UE" AND name LIKE "Stemma%") OR name LIKE "Scaglia Evolutiva%" ORDER BY name', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].craftable == 0)
								bottext += "*" + rows[i].name + "* (" + rows[i].rarity + ")\n";
							else
								bottext += rows[i].name + " (" + rows[i].rarity + ")\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Cerca Ancora"]);
						if (prev == 1)
							iKeys.push([prevtxt]);
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}

			if (param.toLowerCase() == "talismani") {
				connection.query('SELECT name, rarity FROM item WHERE name LIKE "Talismano%" ORDER BY name', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Cerca Ancora"]);
						if (prev == 1)
							iKeys.push([prevtxt]);
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}

			if (param.toLowerCase() == "consumabili") {
				connection.query('SELECT name, rarity, craftable FROM item WHERE category IN (1,4) ORDER BY name', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].craftable == 0)
								bottext += "*" + rows[i].name + "* (" + rows[i].rarity + ")\n";
							else
								bottext += rows[i].name + " (" + rows[i].rarity + ")\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Cerca Ancora"]);
						if (prev == 1)
							iKeys.push([prevtxt]);
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}

			if (param.toLowerCase() == "rifugio") {
				connection.query('SELECT name, rarity FROM item WHERE category IN (5) ORDER BY name', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Cerca Ancora"]);
						if (prev == 1)
							iKeys.push([prevtxt]);
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}

			var query = 'LIKE "%' + param + '%"';
			if (param.indexOf("*") != -1) {
				param = param.replace("*", "");
				query = ' = "' + param + '"';
			}

			connection.query('SELECT * FROM item WHERE name ' + query + ' ORDER BY name', function (err, rows, fields) {
				if (err) throw err;
				var result = 0;

				var bottext = "Risultati per '" + param + "':\n";
				if (Object.keys(rows).length > 0) {
					var iKeys = [];

					var key = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					var itemsArr = [];
					var j = 0;
					var found = 0;
					var name = "";

					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						name = rows[i].name;
						if (name != "") {
							if (len == 1)
								bottext = bottext + "\n_" + name + "_\n";
							else
								bottext = bottext + name + " (" + rows[i].rarity + ")\n";

							j = 0;
							found = 0;

							itemsArr.push([name.toLowerCase()]);

							while (j < Object.keys(itemsArr).length) {
								if (found == 0) {
									if (itemsArr[j].indexOf(param.toLowerCase()) > -1)
										found = 1;
									else
										found = 0;
								}
								j++;
							}

							if (found == 0)
								iKeys.push(["Cerca " + name]);
							else if (found == 1)
								iKeys.push(["Cerca *" + name]);
						}
					}

					iKeys.push(["Cerca Ancora"]);
					if (prev == 1)
						iKeys.push([prevtxt]);
					iKeys.push(["Torna al menu"]);

					if (Object.keys(rows).length == 1) {
						if (rows[0].searchable == 0) {
							bot.sendMessage(message.chat.id, "Le informazioni su questo oggetto sono nascoste üëÄ", search);
							return;
						}

						var name = rows[0].name;
						var power = 0;
						var crit = rows[0].critical;
						var rarity = rows[0].rarity;
						var level_nec = 0;
						var item_id = rows[0].id;
						var type = "";
						var type_desc = "";

						if (rows[0].power != 0) {
							type = "Arma";
							if (crit > 0)
								type_desc = " (" + crit + "% raddoppio)";	
							power = rows[0].power;
						} else if (rows[0].power_armor != 0) {
							type = "Armatura";
							if (crit > 0)
								type_desc = " (" + crit + "% dimezzamento)";
							power = rows[0].power_armor;
						} else if (rows[0].power_sheld != 0) {
							type = "Scudo";
							if (crit > 0)
								type_desc = " (" + crit + "% annullamento)";
							power = rows[0].power_shield;
						}
						if (rarity == "UR")
							level_nec = "15";
						else if (rarity == "L")
							level_nec = "30";
						else if (rarity == "E")
							level_nec = "50";
						else if (rarity == "UE")
							level_nec = "60";

						var price = rows[0].value;
						var dragon_power = rows[0].dragon_power;
						var reborn = rows[0].reborn;
						var category = rows[0].category;
						var est = rows[0].estimate;
						var consumable = rows[0].cons;
						var sellable = rows[0].allow_sell;
						var craft_pnt = rows[0].pnt_sum;
						var reload_est = rows[0].reload_est;
						var est = rows[0].estimate;
						var cons_val = rows[0].cons_val;
						var spread = rows[0].spread;
						var spread_tot = rows[0].spread_tot;

						var cons = "No";
						var cons_pnt = "";
						if (consumable == 1) {
							cons = "Si";
							if (category == 1)
								cons_pnt = " - " + Math.round(cons_val) + "% salute";
							else if (category == 4)
								cons_pnt = " - " + Math.round(cons_val*10) + " gigatoni";
						}

						if (category == 2)
							tal = "*Caratteristica*: " + rows[0].description;

						var desc = "";
						if (rows[0].description != null) {
							if ((category == 3) || (category == 2))
								desc = "*Potere*: " + rows[0].description;
							else
								desc = "*Descrizione*: " + rows[0].description;
						}

						stars = rebSym(reborn);

						var extra = "";
						if ((rows[0].power != 0) || (rows[0].power_armor != 0) || (rows[0].power_shield)) {
							if (name.indexOf("Necrolama") != -1) {
								if (rows[0].id == 221)
									power = calcNecro(300, lev, reb, 1);
								else if ((rows[0].id == 638) || (rows[0].id == 639) || (rows[0].id == 640) || (rows[0].id == 754))
									power = calcNecro(300, lev, reb, 2);
							} else if (name.indexOf("Corazza Necro") != -1) {
								if (rows[0].id == 577)
									power = -Math.abs(calcNecro(250, lev, reb, 1));
								else if ((rows[0].id == 688) || (rows[0].id == 689) || (rows[0].id == 690) || (rows[0].id == 790))
									power = -Math.abs(calcNecro(250, lev, reb, 2));
							} else if (name.indexOf("Scudo Necro") != -1) {
								if (rows[0].id == 600)
									power = -Math.abs(calcNecro(250, lev, reb, 1));
								else if ((rows[0].id == 671) || (rows[0].id == 672) || (rows[0].id == 673) || (rows[0].id == 791))
									power = -Math.abs(calcNecro(250, lev, reb, 2));
							}
							bottext += "\n*Potenza*: " + power;
							bottext += "\n*Tipologia*: " + type + type_desc;
							if ((level_nec != 0) && (reborn == 1))
								bottext += "\n*Livello richiesto*: " + level_nec;
						}
						bottext += "\n*Rinascita richiesta*: " + stars;
						if (dragon_power != 0)
							bottext += "\n*Drago*: " + dragon_power;
						bottext += "\n*Rarit√†*: " + rarity + " (" + formatNumber(price) + " ¬ß, all'emporio: " + formatNumber(Math.round(price / 2)) + " ¬ß)";
						bottext += "\n*Consumabile*: " + cons + cons_pnt;
						bottext += "\n*Punti creazione*: " + craft_pnt;

						if (reload_est >= 50) {
							connection.query('SELECT DISTINCT(from_id), price FROM market_direct_history WHERE time BETWEEN date_sub(NOW(),INTERVAL 1 WEEK) AND NOW() AND price != (SELECT value FROM item WHERE id = ' + item_id + ') AND item_id = ' + item_id + ' AND type = 2', function (err, rows, fields) {
								if (err) throw err;
								var price = 0;
								var arr = [];
								var arrCnt = 0;
								if (Object.keys(rows).length > 1) {
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										if ((rows[i].price < (est) * 3) && (rows[i].price > (est) / 3)) {
											arr.push(rows[i].price);
											arrCnt++;
										}
									}
									if (arrCnt > 1) {
										price = estimate(arr);
										if (!isNaN(price)) {
											connection.query('UPDATE item SET estimate = ' + price + ' WHERE id = ' + item_id, function (err, rows, fields) {
												if (err) throw err;
											});
										}
									}
								}
							});
							connection.query('UPDATE item SET reload_est = 0 WHERE id = ' + item_id, function (err, rows, fields) {
								if (err) throw err;
							});
						} else {
							connection.query('UPDATE item SET reload_est = reload_est+1 WHERE id = ' + item_id, function (err, rows, fields) {
								if (err) throw err;
							});
						}

						connection.query('SELECT (SELECT COUNT(id) FROM player) As player, COUNT(id) As cnt FROM inventory WHERE item_id = ' + item_id, function (err, rows, fields) {
							if (err) throw err;
							var calc_spread = Math.round((rows[0].cnt / rows[0].player) * 100);
							connection.query('UPDATE item SET spread = ' + calc_spread + ' WHERE id = ' + item_id, function (err, rows, fields) {
								if (err) throw err;
							});
						});

						connection.query('SELECT SUM(quantity) As num, (SELECT SUM(quantity) FROM inventory) As tot FROM inventory WHERE item_id = ' + item_id, function (err, rows, fields) {
							if (err) throw err;

							var calc_spread_tot = Math.round((rows[0].num / rows[0].tot) * 100 * 1000) / 1000;
							connection.query('UPDATE item SET spread_tot = ' + calc_spread_tot + ' WHERE id = ' + item_id, function (err, rows, fields) {
								if (err) throw err;
							});
						});

						var poss = getItemCnt(player_id, item_id);

						bottext += "\n*Posseduti*: " + poss + " (" + spread + "%, " + spread_tot + "%)";
						if ((desc != "") && (desc != null))
							bottext += "\n" + desc;
						if (sellable == 0)
							bottext += "\n_Non vendibile/scambiabile_";

						connection.query('SELECT material_result FROM craft, item WHERE craft.material_result = item.id AND item.name = "' + name + '"', function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								connection.query('SELECT id FROM item WHERE name = "' + name + '"', function (err, rows, fields) {
									if (err) throw err;
									result = rows[0].id;
									connection.query('SELECT craft.*, item.name, item.rarity FROM `craft`, item where material_result = item.id AND ((material_1 = ' + result + ' AND material_2 = ' + result + ' AND material_3 = ' + result + ') OR (material_1 = ' + result + ' AND material_2 = ' + result + ') OR (material_1 = ' + result + ' AND material_3 = ' + result + ') OR (material_2 = ' + result + ' AND material_3 = ' + result + ') OR material_1 = ' + result + ' OR material_2 = ' + result + ' OR material_3 = ' + result + ')', function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length > 0) {
											bottext = bottext + "\n\nCon questo oggetto puoi creare:\n";

											var iKeys2 = [];

											var kb2 = {
												parse_mode: "Markdown",
												reply_markup: {
													resize_keyboard: true,
													keyboard: iKeys2
												}
											};

											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												if (rows[i].name != "") {
													bottext = bottext + "> " + rows[i].name + " (" + rows[i].rarity + ")\n";
													iKeys2.push(["Cerca *" + rows[i].name]);
												}
											}

											if (poss > 0)
												iKeys2.push(["Vendi " + name, "Cerca Ancora"]);
											if (prev == 1)
												iKeys2.push([prevtxt]);
											iKeys2.push(["Torna al menu"]);

											bot.sendMessage(message.chat.id, bottext, kb2);
										} else {
											if (poss > 0) {
												search = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Vendi " + name, "Cerca Ancora"], ["Torna al menu"]]
													}
												};
											}

											bot.sendMessage(message.chat.id, bottext, search);
										}
									});
								});
								return;
							}
							result = rows[0].material_result;

							connection.query('SELECT claws_id, saddle_id FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;

								var claws_id = 999;
								var saddle_id = 999;

								if (Object.keys(rows).length > 0) {
									claws_id = rows[0].claws_id;
									saddle_id = rows[0].saddle_id;
								}

								var mat1 = "";
								var mat1id = "";
								var mat1p = "";
								var mat1r = "";
								var mat1q = "";
								var mat1ex = "";

								var mat2 = "";
								var mat2id = "";
								var mat2p = "";
								var mat2r = "";
								var mat2q = "";
								var mat2ex = "";

								var mat3 = "";
								var mat3id = "";
								var mat3p = "";
								var mat3r = "";
								var mat3q = "";
								var mat3ex = "";

								var mat4 = "";
								var mat4id = "";
								var mat4p = "";
								var mat4r = "";
								var mat4q = "";
								var mat4ex = "";

								connection.query('SELECT item.id, item.name, item.craftable, item.rarity FROM craft, item WHERE craft.material_1 = item.id AND craft.material_result = ' + result, function (err, rows, fields) {
									if (err) throw err;
									mat1 = rows[0].name;
									if (rows[0].craftable == 1)
										mat1p = rows[0].name;
									else
										mat1p = "*" + rows[0].name + "*";
									mat1id = rows[0].id;
									mat1r = rows[0].rarity;
									connection.query('SELECT item.id, item.name, item.craftable, item.rarity FROM craft, item WHERE craft.material_2 = item.id AND craft.material_result = ' + result, function (err, rows, fields) {
										if (err) throw err;
										mat2 = rows[0].name;
										if (rows[0].craftable == 1)
											mat2p = rows[0].name;
										else
											mat2p = "*" + rows[0].name + "*";
										mat2id = rows[0].id;
										mat2r = rows[0].rarity;
										connection.query('SELECT item.id, item.name, item.craftable, item.rarity FROM craft, item WHERE craft.material_3 = item.id AND craft.material_result = ' + result, function (err, rows, fields) {
											if (err) throw err;
											mat3 = rows[0].name;
											if (rows[0].craftable == 1)
												mat3p = rows[0].name;
											else
												mat3p = "*" + rows[0].name + "*";
											mat3id = rows[0].id;
											mat3r = rows[0].rarity;

											mat1q = getItemCnt(player_id, mat1id);
											if (mat1q > 0)
												mat1ex = "‚úÖ";
											else if ((mat1id == weapon1) || (mat1id == weapon2) || (mat1id == weapon3) || (mat1id == weapon4))
												mat1ex = "üó°";
											else if ((mat1id == claws_id) || (mat1id == saddle_id))
												mat1ex = "üêâ";

											mat2q = getItemCnt(player_id, mat2id);
											if (mat2q > 0)
												mat2ex = "‚úÖ";
											else if ((mat2id == weapon1) || (mat2id == weapon2) || (mat2id == weapon3) || (mat2id == weapon4))
												mat2ex = "üó°";
											else if ((mat2id == claws_id) || (mat2id == saddle_id))
												mat2ex = "üêâ";

											mat3q = getItemCnt(player_id, mat3id);
											if (mat3q > 0)
												mat3ex = "‚úÖ";
											else if ((mat3id == weapon1) || (mat3id == weapon2) || (mat3id == weapon3) || (mat3id == weapon4))
												mat3ex = "üó°";
											else if ((mat3id == claws_id) || (mat3id == saddle_id))
												mat3ex = "üêâ";

											bottext = bottext + "\n\nMateriali necessari:\n> " + mat1p + " (" + mat1r + ", " + formatNumber(mat1q) + ") " + mat1ex + "\n> " + mat2p + " (" + mat2r + ", " + formatNumber(mat2q) + ") " + mat2ex + "\n> " + mat3p + " (" + mat3r + ", " + formatNumber(mat3q) + ") " + mat3ex;

											connection.query('SELECT craft.*, item.name, item.rarity FROM craft, item where material_result = item.id AND ((material_1 = ' + result + ' AND material_2 = ' + result + ' AND material_3 = ' + result + ') OR (material_1 = ' + result + ' AND material_2 = ' + result + ') OR (material_1 = ' + result + ' AND material_3 = ' + result + ') OR (material_2 = ' + result + ' AND material_3 = ' + result + ') OR material_1 = ' + result + ' OR material_2 = ' + result + ' OR material_3 = ' + result + ')', function (err, rows, fields) {
												if (err) throw err;

												var iKeys3 = [];

												iKeys3.push(["Crea " + name]);
												iKeys3.push(["Crea " + name + ",2"]);
												iKeys3.push(["Crea " + name + ",3"]);

												iKeys3.push(["Cerca *" + mat1]);
												iKeys3.push(["Cerca *" + mat2]);
												iKeys3.push(["Cerca *" + mat3]);

												var kb = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: iKeys3
													}
												};

												if (Object.keys(rows).length > 0) {
													bottext = bottext + "\n\nCon questo oggetto puoi creare:\n";
													for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
														bottext = bottext + "> " + rows[i].name + " (" + rows[i].rarity + ")\n";
														iKeys3.push(["Cerca *" + rows[i].name]);
													}

													if (poss > 0)
														iKeys3.push(["Vendi " + name, "Cerca Ancora"]);
													if (prev == 1)
														iKeys3.push([prevtxt]);
													iKeys3.push(["Torna al menu"]);
													bot.sendMessage(message.chat.id, bottext, kb);
												} else {
													if (poss > 0)
														iKeys3.push(["Vendi " + name, "Cerca Ancora"]);
													if (prev == 1)
														iKeys3.push([prevtxt]);
													iKeys3.push(["Torna al menu"]);
													bot.sendMessage(message.chat.id, bottext, kb);
												}
											});
										});
									});
								});
							});
						});
					} else {
						if (Object.keys(bottext).length > 4000)
							bot.sendMessage(message.chat.id, "La ricerca ha prodotto troppi risultati, prova a restringere il campo", search);
						else
							bot.sendMessage(message.chat.id, bottext, key);
					}
				} else
					bot.sendMessage(message.chat.id, "Nessun risultato, riprova con una parola chiave diversa. Se cerchi il nome preciso dell\'oggetto visualizzerai anche gli oggetti necessari per crearlo.", search);
			});
		});
	});
}

function getRealLevel(reb, lev) {
	if (reb == 2)
		lev += 100;
	if (reb == 3) {
		lev += 100;
		lev += 150;
	}
	if (reb == 4) {
		lev += 100;
		lev += 150;
		lev += 200;
	}
	if (reb == 5) {
		lev += 100;
		lev += 150;
		lev += 200;
		lev += 300;
	}
	return lev;
}

function getLevel(lev) {
	var reb = 0;
	if (lev >= 750) {
		lev -= 100;
		lev -= 150;
		lev -= 200;
		lev -= 300;
		reb = 5;
	} else if (lev >= 450) {
		lev -= 100;
		lev -= 150;
		lev -= 200;
		reb = 4;
	} else if (lev >= 250) {
		lev -= 100;
		lev -= 150;
		reb = 3;
	} else if (lev >= 100) {
		lev -= 100;
		reb = 2;
	}
	return lev + " R" + (reb - 1);
}

function missionEquip_text(boost_id, charm_id, nickname) {
	var equip_text = "";
	if (charm_id == 0)
		equip_text += "Fai un lungo sospiro, " + nickname + ", e chiudi gli occhi pensando al triste modo in cui sei vestito...\n";
	else if(charm_id == 60 || charm_id == 187)
		equip_text += nickname + ", chini il capo e stringi tra due dita il talismano che hai appeso al collo.\nIl cuore ti batte forte...\n";
	else if(charm_id == 61 || charm_id == 185)
		equip_text += nickname + ", socchiudi gli occhi e stringi tra le mani il tuo amuleto.\nIn un sorriso timido si concretizza la tua preghiera...\n";
	else if (charm_id == 697)
		equip_text += "Tocchi istintivamente il talismano che porti al petto...\n";
	else
		equip_text += "Ti metti una mano al petto e la stringi lentamente...\n";

	if (boost_id != 0) {
		if(boost_id == 1)
			equip_text += "In bocca senti il <i>fresco</i> sapore dell'intruglio energizzante che hai bevuto ‚è≥\n";
		else if(boost_id == 2)
			equip_text += "In bocca il sapore <i>amaro</i> dello strano succo che hai bevuto... Ti senti avido di ricchezze üîë\n";
		else if(boost_id == 4)
			equip_text += "In bocca il <i>dolce</i> nettare che hai bevuto √® ancora intenso, fremi nel provare le tue abilit√† ‚öîÔ∏è\n";
		else if(boost_id == 5)
			equip_text += "Nei polmoni √® ancora piacevole l'aroma <i>dell'infuso</i> che hai bevuto e con esso la fiducia che Fortuna sar√† al tuo fianco üóÉ\n";
		else if(boost_id == 7)
			equip_text += "Hai la bocca asciutta per la bevanda <i>salata</i> che hai ingurgitato... √à ora di saziare questa sete! üí∞\n"; 
	}

	return equip_text;
}

function missionRarity_text(rarity) {
	var start_mission_txt = "";

	switch(rarity) {
		case 1:
			start_mission_txt += 	"√à un umile missione quella che t'√® stata assegnata (<b>C</b>).\n" +
				"Afflitto pensi che <i>qualcuno</i> dovr√† pur fare il lavoro sporco\n" +
				"Sarai ancora tu?";
			break;
		case 2:
			start_mission_txt += 	"√à una missione banale, quella che ti √® stata affidata (<b>NC</b>)\n"+
				"Sar√† un <i>lavoro breve</i> e perch√© no, forse anche redditizio!\nLo accetti?";
			break;
		case 3:
			start_mission_txt += 	"√à un antica mappa quella che t'√® capitata tra le mani... (<b>R</b>)\nVarr√† la pena seguirla?"
			break;
		case 4:
			start_mission_txt += 	"√à una mappa di straordinario valore quella che t'√® capitata tra le mani... (<b>UR</b>)\nLa seguirai?"
			break;
		case 5:
			start_mission_txt += 	"Finalmente le tue gesta sono state riconosciute! Ti √® stata assegnata una missione direttamente dalla <i>Fenice</i> (<b>L</b>)\nHai intenzione di obbedire?";
			break;
		case 6:
		case 7:
			start_mission_txt += 	"Avventurieri come te vivono per giorni come questo!\nUn Epica avventura ti aspetta, finalmente... (<b>E</b>)\nPronto a partire?";
			break;
	}

	return start_mission_txt;
}

function helpMsg(chat_id, player_id, type) {
	connection.query('SELECT * FROM help_message WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			connection.query('INSERT INTO help_message (player_id, type_' + type + ') VALUES (' + player_id + ',1)', function (err, rows, fields) {
				if (err) throw err;
			});
		} else {
			var name = 'rows[0].type_' + type;
			if (eval(name) == 1) {
				return;
			}
			connection.query('UPDATE help_message SET type_' + type + ' = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		}

		var text = "";
		switch (type) {
			case 1:
				text = "*LE IMPRESE*\n\n" +
					"Le imprese sono degli obbiettivi giornalieri di tipi molto differenti, che vanno dalle missioni da completare, a viaggi, a oggetti da creare. Ogni impresa completata fornisce ¬ß e viene contata per un premio finale dopo un certo numero di completamenti. Le imprese vengono resettate ogni giorno a mezzanotte e non sono disponibili durante il weekend, a differenza degli eventi. Nella schermata principale inoltre viene visualizzata l'impresa che si √® prossimi a completare, cos√¨ da agevolarne l'ottenimento del premio. Infine per quanto riguarda i casi in cui un'impresa fosse riferita ad un oggetto, quest'ultimo verr√† visualizzato in questa sezione del men√π.";
				break;
			case 2:
				text = "*LE MISSIONI*\n\n" +
					"Le missioni sono uno dei tanti modi per ottenere oggetti nel bot, una volta iniziate √® sufficiente attendere il tempo specificato per ricevere automaticamente uno scrigno corrispondente alla rarit√† della stessa. Dopo aver ottenuto lo scrigno, recarsi nella sezione Scrigni del menu principale per aprirlo. Nelle missioni √® possibile ottenere bevande che offrono vari effetti come raddoppio delle monete o diminuzione del tempo di attesa. I Talismani e altri oggetti equipaggiabili possono influire nella missione. Si tratta di una delle funzioni fondamentali del gioco, svolgine il pi√π possibile!";
				break;
			case 3:
				text = "*L'ASSALTO*\n\n" +
					"L'assalto √® una funzionalit√† giocabile esclusivamente in team, non ci sono altri limiti di rinascita o livello, n√® di coesistenza con altre funzioni. Affonta tutti e 31 i boss per ottenere fama e ricompense.\nE' possibile leggere la guida base qui: https://telegra.ph/Introduzione-agli-Assalti-09-24";
				break;
			case 4:
				text = "*IL TEAM*\n\n" +
					"I team sono dei gruppi di giocatori utili a ottenere pi√π monete e affrontare i boss per ottenere exp, √® possibile anche creare dei sotto team, dette accademie. La partecipazione e la collaborazione √® importante per abbattere tutti i boss e scalare la classifica.\nPuoi anche formare dei party e partecipare alle Imprese, molto utili per ottenere importanti oggetti o bonus.";
				break;
			case 5:
				text = "*IL DRAGO*\n\n" +
					"Il drago √® il tuo fedele compagno di avventure, pu√≤ nascere con 6 pietre di diverso tipo ottenute dalle cave dal livello 10, una volta nato √® necessario dargli da mangiare per farlo crescere e ottenere pi√π bonus in battaglia e nei viaggi, come l'aumento del danno e la riduzione dei tempi di attesa, come la produzione continua di bevande grazie ai suoi poteri. Inoltre √® utile negli eventi e nella difesa del rifugio.";
				break;
			case 6:
				text = "*L'EMPORIO*\n\n" +
					"All'emporio √® possibile acquistare Pozioni, Scrigni o Piume di Fenice, oppure vendere qualsiasi oggetto a prezzo base, tramite la funzione Ricicla invece √® possibile convertire 5 oggetti uguali in un altro oggetto della stessa rarit√† oppure della rarit√† successiva.";
				break;
			case 7:
				text = "*IL MERCATO*\n\n" +
					"Il mercato √® il luogo in cui si possono incontrare mercanti che vendono oggetti a buon prezzo, oppure regalarne. Da qui puoi seguire il link per entrare nel gruppo apposito e commerciare in gran quantit√†. Il Mercante Pazzo mette a disposizione dei pacchetti di oggetti a buon prezzo ogni giorno, ricorda di darci un'occhiata!";
				break;
			case 8:
				text = "*IL GIOCATORE*\n\n" +
					"In questa sezione trovi tutte le informazioni sul tuo giocatore, oppure su quelle del giocatore che stai spiando, in base al livello del tuo rifugio ti vengono rivelate pi√π informazioni sul bersaglio. Attraverso i pulsanti di Statistiche puoi visualizzare altre informazioni sulla tua avventura, se non visualizzi ancora il drago, visita l'apposita sezione dal men√π principale per ottenere altre informazioni. Ecco una descrizione per ogni voce:\n\nGiocatore üë§\nOgni simbolo sta ad indicare la tua esperienza e la tua RINASCITA\n‚ú® Rinascita 0 \nüîÜ Rinascita 1\nüí´ Rinascita 2\n‚≠êÔ∏è Rinascita 3\nüåü Rinascita 4\nüí• Rinascita 5\nüèπ La tua vocazione, una volta scelta non sar√† possibile cambiarla!\nüíé Le Gemme in tuo possesso\nüí∞ I soldi in tuo possesso\n‚ù§Ô∏è La tua vita, attuale e totale\nüì¶ I punti creazione che hai realizzato fin'ora, tra parentesi quelli settimanali\n\nEquipaggiamento ‚öîÔ∏è\nüó° La tua fedelissima arma\nü•ã La tua armatura\nüõ° Il tuo scudo\nüìø Il talismano che indossi\n\nüêâ Il migliore amico del giocatore, il tuo draghetto!\nüí± Informazioni sulla tua abilit√† nelle ispezioni, il tuo rango e una piccola descrizione personale";
				break;
			case 9:
				text = "*LA MODALITA' VACANZA*\n\n" +
					"Puoi attivare la modalit√† vacanza per essere protetto dalle ispezioni durante un periodo in cui non giochi, essa si attiva automaticamente se non giochi per un lungo periodo di tempo cos√¨ da non diventare preda facile. La durata minima √® 2 settimane durante le quali non potrai effettuare alcuna azione nel bot. Procedi con cautela.";
				break;
			case 10:
				text = "*IL CERCA*\n\n" +
					"Puoi utilizzare il comando Cerca per trovare informazioni su tutti gli oggetti disponibili nel bot. Puoi cercare anche un testo parziale, se invece vuoi cercare in modo 'preciso', inserisci l'asterisco al fondo per isolare l'oggetto interessato. Ogni ricerca mostrer√† anche gli oggetti necessari alla creazione dell'oggetto, ed a sua volta per quali oggetti pu√≤ essere utile.\nAttraverso questa funzione puoi creare l'oggetto con il pulsante Crea NomeOggetto, puoi anche scriverlo a mano. Infine puoi cercare per categoria o per rarit√† utilizzando Cerca Armi oppure Cerca C 1 o Cerca C 0 (solo craftati o solo base).";
				break;
			case 11:
				text = "*I VIAGGI E LE CAVE*\n\n" +
					"I viaggi sono delle lunghe missioni dove al termine riceverai discrete somme di denaro o scrigni, pensate soprattutto nei periodi in cui il giocatore √® assente sul bot, magari in vacanza, in ogni caso si consiglia di utilizzarli solamente in questi casi.\nDopo pochi livelli sbloccherai le Cave, attraverso le quali sar√† possibile ottenere le Pietre del Drago, per nutrirlo e farlo combattere al tuo fianco.";
				break;
		}
		bot.sendMessage(chat_id, text, mark);
	});
}

function attack(nickname, message, from_id, weapon_bonus, cost, source, global_end, boost_id, boost_mission) {
	connection.query('SELECT exp, ability, chat_id, heist_count, heist_limit, heist_protection, house_id, custom_name_h, id, money, global_end, player_custom_nickname, class FROM player WHERE nickname = "' + nickname + '"', function (err, rows, fields) {
		if (err) throw err;
		var chat_id_nickname = rows[0].chat_id;
		var isMatch = source;

		if (Object.keys(rows).length == 0) {
			bot.sendMessage(message.chat.id, "Questo nickname non esiste, riprova.", back);
			return;
		}

		var to_id = rows[0].id;

		if ((to_id == 1) || (to_id == 3)) {
			bot.sendMessage(message.chat.id, "Dice il saggio: 'Campa cavallo sulla panca insieme alla capra facendo i cavolacci propri... In poche parole, fatti gli affari tuoi :>'", back);
			return;
		}

		var house_id = rows[0].house_id;
		var heist_count = parseInt(rows[0].heist_count);
		var heist_limit = parseInt(rows[0].heist_limit);
		var ability = parseInt(rows[0].ability);
		var custom_name_h = rows[0].custom_name_h;
		var player_custom_nickname = (rows[0].player_custom_nickname != null ? " " + rows[0].player_custom_nickname : "");
		var player_class = rows[0].class;

		// per contare anche quelli in viaggio nelle subite
		var limitProgress = connection_sync.query("SELECT COUNT(id) As cnt FROM heist WHERE to_id = " + to_id);
		heist_limit += limitProgress[0].cnt;

		var match = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Matchmaking"], ["Torna al menu"]]
			}
		};

		if (wanted == 0) {
			if (rows[0].heist_protection != null) {
				bot.sendMessage(message.chat.id, "Il bersaglio √® sotto protezione", match);
				return;
			}
			if (rows[0].money <= 0) {
				bot.sendMessage(message.chat.id, "Il bersaglio ha poche monete, riprova cambiando giocatore.", match);
				return;
			}

			if ((rows[0].exp <= 150) && (isMatch == 0)) {
				bot.sendMessage(message.chat.id, "Il bersaglio ha poca esperienza, riprova cambiando giocatore.", match);
				return;
			}
		}

		connection.query('SELECT level, name, type FROM dragon WHERE player_id = ' + to_id, function (err, rows, fields) {
			if (err) throw err;

			var dragon_lev = 0;
			var dragon_name = "";

			if (Object.keys(rows).length > 0) {
				dragon_lev = rows[0].level;
				dragon_name = rows[0].name + " " + rows[0].type;
			}

			connection.query('SELECT team.name FROM team_player, team WHERE team.id = team_player.team_id AND player_id = ' + to_id, function (err, rows, fields) {
				if (err) throw err;

				var team_name = "-";

				if (wanted == 0) {
					if (Object.keys(rows).length == 0) {
						if (heist_limit >= 3) {
							bot.sendMessage(message.chat.id, "Il bersaglio non possiede un team e ha raggiunto il limite di ispezioni subite. Riprova domani.", match);
							return;
						}
					} else {
						if (heist_limit >= 10) {
							bot.sendMessage(message.chat.id, "Il bersaglio ha raggiunto il limite di ispezioni subite. Riprova domani.", match);
							return;
						}
						team_name = rows[0].name;
					}
				} else {
					if (Object.keys(rows).length > 0)
						team_name = rows[0].name;
				}

				if (isMatch == 1) {
					connection.query('UPDATE player SET last_mm = ' + to_id + ' WHERE id = ' + from_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}

				connection.query('SELECT name, rooms, grade FROM house WHERE id=' + house_id, function (err, rows, fields) {
					if (err) throw err;

					var house_name = rows[0].name;
					var grade = rows[0].grade;
					var rooms = rows[0].rooms;
					var iKeys = [];

					iKeys.push(["Invia Piedelesto"]);
					iKeys.push(["Invia Occhiofurbo"]);
					iKeys.push(["Invia Testacalda"]);
					iKeys.push(["Matchmaking (¬ß)"]);
					iKeys.push(["Torna al menu"]);

					var option = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: iKeys
						}
					};

					connection.query('SELECT wanted_id FROM event_wanted_status WHERE player_id = ' + from_id, function (err, rows, fields) {
						if (err) throw err;

						var isWanted = 0;
						if ((wanted == 1) && (Object.keys(rows).length > 0)) {
							if (rows[0].wanted_id == to_id)
								isWanted = 1;
						}

						var dragon_text = "";
						if (dragon_lev > 0)
							dragon_text = " ed il drago üêâ <b>" + dragon_name + "</b> (" + dragon_lev + ") sorveglia la sua entrata";

						if (custom_name_h != null)
							house_name = "Rifugio " + custom_name_h;

						var text = "Stai per inviare uno gnomo servitore al rifugio di " + classSym(player_class) + " <b>" + nickname + player_custom_nickname + "</b> (" + team_name + ") con abilit√† " + ability + ".\nAlloggia in un üèï <b>" + house_name + "</b> (" + house_id + ")" + dragon_text + ". Seleziona quale gnomo servitore vuoi inviare.";

						if (isWanted == 0) {
							connection.query('UPDATE player SET money = money-' + cost + ' WHERE id = ' + from_id, function (err, rows, fields) {
								if (err) throw err;
							});
						} else
							text = "Stai per inviare uno gnomo servitore alla cattura di <b>" + nickname + "</b>, seleziona quale gnomo esploratore vuoi inviare";

						bot.sendMessage(message.chat.id, text, option).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {
								if ((answer.text == "Torna al menu") || (answer.text == "Matchmaking"))
									return;

								connection.query('SELECT id FROM heist_progress WHERE from_id = ' + from_id, function (err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length > 0) {
										bot.sendMessage(message.chat.id, "Stai svolgendo un ispezione, completala prima di iniziarne un'altra", back);
										return;
									}

									connection.query('SELECT datetime FROM heist WHERE from_id = ' + from_id, function (err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length > 0) {
											var date = new Date(rows[0].datetime);
											var short_date = addZero(date.getHours()) + ":" + addZero(date.getMinutes());
											var text = "Ispezione in corso fino alle " + short_date;
											if (wanted == 0)
												bot.sendMessage(message.chat.id, text, back);
											else
												bot.sendMessage(message.chat.id, text, abort_heist);
											return;
										}

										var query = "";
										var method = 0;
										if (answer.text == "Invia Piedelesto") {
											method = 1;
											setAchievement(from_id, 58, 1);
										} else if (answer.text == "Invia Occhiofurbo") {
											method = 3;
											setAchievement(from_id, 85, 1);
										} else if (answer.text == "Invia Testacalda") {
											method = 2;
											setAchievement(from_id, 86, 1);
										} else
											return;

										//Secondi (massimo 6*600 + 100)
										var totTime = (grade * 900);
										var rate = 50;

										if (method == 1) {
											totTime = Math.round(totTime * 0.6);
											rate = 40;
										} else if (method == 3) {
											totTime = Math.round(totTime * 1.2);
											rate = 60;
										}

										if (wanted == 1)
											totTime = Math.round(totTime / 1.5);

										if (crazyMode == 1)
											totTime = Math.round(totTime / 2);

										/*
										if (global_end == 1) {
											totTime = Math.round(totTime / 2);
										}
										*/

										if (boost_id == 9) {
											setBoost(from_id, boost_mission, boost_id);
											totTime = Math.round(totTime / 2);
										}

										if (isWanted == 1)
											totTime = (Math.round(Math.random() * 10 + 5) * method) * 60;

										var now = new Date();
										now.setSeconds(now.getSeconds() + totTime);
										var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());
										var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

										connection.query('INSERT INTO heist (from_id, to_id, datetime, rate1, grade, matchmaking) ' +
														 'VALUES (' + from_id + ',' + to_id + ',"' + long_date + '",' + rate + ',' + grade + ',' + isMatch + ')',
														 function (err, rows, fields) {
											if (err) throw err;
											if (isWanted == 0)
												bot.sendMessage(message.chat.id, "Hai inviato il tuo gnomo esploratore all'ispezione del rifugio selezionato, torna alle " + short_date + " per risolvere il dilemma del rifugio e cercare di ottenere una üóù", abort_heist);
											else
												bot.sendMessage(message.chat.id, "Hai inviato il tuo gnomo esploratore alla cattura del ricercato, torna alle " + short_date + " per scoprirne l'esito", back);
										});
										if (isWanted == 0) {
											connection.query('UPDATE player SET heist_count = heist_count+1 WHERE id = ' + from_id, function (err, rows, fields) {
												if (err) throw err;
											});
										}
									});
								});
							};
						});
					});
				});
			});
		});
	});
}

function getRandomArbitrary(min, max) {
	return Math.random() * (max - min) + min;
}

function calcConsumabili(boss_total_life, damage) {
	return Math.round((boss_total_life/100 + 1000)*damage*(0.8+Math.random()*0.4));
}

function Consumabili(message, player_id, from, player_total_life, player_life) {
	connection.query('SELECT item.name, item.id, inventory.quantity As num, item.category, item.cons_val FROM inventory, item WHERE inventory.item_id = item.id AND category = 1 AND player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
		if (err) throw err;
		var itemKeys = [];

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: itemKeys
			}
		};

		var kbAgain = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Usa Ancora"], ["Torna all'emporio"], ["Torna al dungeon"], ["Torna al menu"]]
			}
		};

		if (Object.keys(rows).length > 0) {
			var desc = "";
			var perc = 0;

			itemKeys.push(["‚ù£Ô∏è", "‚ù§Ô∏è"]);
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (rows[i].category == 1) {
					perc = Math.round((player_total_life / 100) * rows[i].cons_val);
					desc = "Recupera " + perc + " hp";
				} else if (rows[i].category == 4) {
					perc = calcConsumabili(boss_total_life, rows[i].cons_val);
					desc = (rows[i].cons_val*10) + " gigatoni";
				}

				itemKeys.push([rows[i].name + " (" + rows[i].num + ") - " + desc]);
			}
			if (from == 2)
				itemKeys.push(["Torna allo Zaino"]);
			if (from == 4)
				itemKeys.push(["Torna al dungeon"]);
			itemKeys.push(["Torna al menu"]);

			bot.sendMessage(message.chat.id, "Quale oggetto vuoi usare?\nPossiedi " + formatNumber(player_life) + "/" + formatNumber(player_total_life) + " hp", kb).then(function () {
				answerCallbacks[message.chat.id] = function (answer) {
					var oggetto = answer.text;
					if ((oggetto == "Torna al menu") || (oggetto == "Torna allo Zaino") || (oggetto == "Torna al dungeon") || (oggetto == "‚ù£Ô∏è") || (oggetto == "‚ù§Ô∏è"))
						return;

					var pos = oggetto.indexOf(" (");
					if (pos != -1)
						oggetto = oggetto.substring(0, pos);
					connection.query('SELECT id, category, cons_val FROM item WHERE name = "' + oggetto + '"', function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length <= 0) {
							if ((from == 2) || (from == 3))
								bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste!", back);
							else
								bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste!", kb);
							return;
						}

						var item_id = rows[0].id;
						var category = rows[0].category;
						var gigatoni = 0;

						if (category == 1)
							perc = Math.round((player_total_life / 100) * rows[0].cons_val);
						else if (category == 4) {
							perc = calcConsumabili(boss_total_life, rows[0].cons_val);
							gigatoni = rows[0].cons_val*10;
						} else {
							bot.sendMessage(message.chat.id, "Oggetto non valido", kbAgain);
							return;
						}

						if (category == 1) {
							if (item_id == 92) {
								var kbNum = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["1", "2", "10"], ["19", "20"], ["Torna al menu"]]
									}
								};
							} else if (item_id == 93) {
								var kbNum = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["1", "2", "3"], ["5", "9"], ["Torna al menu"]]
									}
								};
							} else {
								var kbNum = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										keyboard: [["1", "2", "3"], ["4", "5"], ["Torna al menu"]]
									}
								};
							}

							if (player_life <= 0) {
								bot.sendMessage(message.chat.id, "Sei esausto, per tornare in vita ti serve una Piuma di Fenice o la Cenere di Fenice!", revive);
								return;
							}

							if (player_life >= player_total_life) {
								bot.sendMessage(message.chat.id, "Sei in piena salute, non √® necessario utilizzare Pozioni!", back);
								return;
							}

							bot.sendMessage(message.chat.id, "Quante pozioni vuoi usare?", kbNum).then(function () {
								answerCallbacks[message.chat.id] = function (answer) {

									var qnt = parseInt(answer.text);
									if (answer.text == "Torna al menu")
										return;
									if ((qnt < 1) || (qnt > 20) || (re.test(qnt) == false)) {
										bot.sendMessage(message.chat.id, "Quantit√† non valida", kbAgain);
										return;
									}

									connection.query('SELECT name FROM item WHERE id = ' + item_id, function (err, rows, fields) {
										if (err) throw err;

										if (getItemCnt(player_id, item_id) < qnt) {
											bot.sendMessage(message.chat.id, "Non hai abbastanza pozioni", kbAgain);
											return;
										}

										var itemName = rows[0].name;

										var max_pot = Math.ceil((player_total_life-player_life)/perc);
										if (qnt > max_pot)
											qnt = max_pot;

										perc = perc * qnt;
										var all = 0;
										if ((player_life + perc) >= player_total_life) {
											perc = player_total_life - player_life;
											all = 1;
										}

										delItem(player_id, item_id, qnt);
										setAchievement(player_id, 35, qnt);

										if (player_life <= player_total_life*0.2)
											setAchievement(player_id, 20, 1);

										connection.query('UPDATE player SET life = life+' + perc + ' WHERE id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
											if (all == 1) {
												if ((from == 2) || (from == 3)) {
													bot.sendMessage(message.chat.id, "Hai recuperato tutti gli hp!", kbAgain).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if ((answer.text != "Torna al menu") && (answer.text != "Torna al dungeon")) {
																player_life = player_total_life;
																Consumabili(message, player_id, from, player_total_life, player_life);
																return;
															}
														};
													});
												} else {
													bot.sendMessage(message.chat.id, "Hai recuperato tutti gli hp!", kbAgain).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if ((answer.text != "Torna al menu") && (answer.text != "Torna al dungeon")) {
																player_life = player_total_life;
																Consumabili(message, player_id, from, player_total_life, player_life);
																return;
															}
														};
													});
												}
											} else {
												if ((from == 2) || (from == 3)) {
													bot.sendMessage(message.chat.id, "Hai usato " + qnt + "x " + itemName + ", hai recuperato " + perc + " hp, ora hai " + (player_life + perc) + "/" + player_total_life + " hp!", kbAgain).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if ((answer.text != "Torna al menu") && (answer.text != "Torna al dungeon")) {
																player_life = player_life + perc;
																Consumabili(message, player_id, from, player_total_life, player_life);
																return;
															}
														};
													});
												} else {
													bot.sendMessage(message.chat.id, "Hai usato " + qnt + "x " + itemName + ", hai recuperato " + perc + " hp, ora hai " + (player_life + perc) + "/" + player_total_life + " hp!", kbAgain).then(function () {
														answerCallbacks[message.chat.id] = function (answer) {
															if ((answer.text != "Torna al menu") && (answer.text != "Torna al dungeon")) {
																player_life = player_life + perc;
																Consumabili(message, player_id, from, player_total_life, player_life);
																return;
															}
														};
													});
												}
											}
										});
									});
								};
							});
						}
					});
				};
			});
		} else {
			var Keys = [];
			Keys.push(["Torna al menu"]);

			var kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: Keys
				}
			};

			bot.sendMessage(message.chat.id, "Non possiedi nessun consumabile, creali o cercali nelle missioni.", kbBack);
		}
	});
}

function validTeamMember(team_id, player_id) {
	const rows = connection_sync.query('SELECT player.id As player_id, team.kill_num, team.name, player.reborn, player.nickname, FLOOR(player.exp/10) As level FROM team, team_player, player WHERE team.id = team_player.team_id AND team_player.player_id = player.id AND team.id = ' + team_id + ' ORDER BY player.reborn, player.exp DESC');

	var mediaTeam = 0;
	for (var i = 0, len = Object.keys(rows).length; i < len; i++)
		mediaTeam += parseInt(getRealLevel(rows[i].reborn, rows[i].level));
	mediaTeam = mediaTeam / Object.keys(rows).length;

	var sum = 0;
	var lev = 0;
	var dev = 0;
	var calc = 0;
	for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
		lev = getRealLevel(rows[i].reborn, rows[i].level);
		sum += Math.pow(Math.abs(mediaTeam - lev), 2);
	}
	dev = Math.sqrt(sum / Object.keys(rows).length);

	var soglia = 2.9;
	if (rows[0].kill_num >= 1)
		soglia = 3.5;

	for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
		if (player_id == rows[i].player_id) {
			lev = getRealLevel(rows[i].reborn, rows[i].level);
			calc = Math.round((lev - mediaTeam) / dev * 100) / 100;
			if (isNaN(calc) || (calc < 0))
				calc = 0;
			if (calc > soglia)
				return 0;
			else
				return 1;
		}
	}
};

function dragonSym(type) {
	if (type == "delle Montagne")
		return "üèî";
	else if (type == "dei Cieli")
		return "‚òÅÔ∏è";
	else if (type == "Infernale")
		return "üî•";
	else if (type == "dell'Oscurit√†")
		return "üîÆ";
	else if (type == "dei Mari")
		return "üåä";
	else if (type == "dei Ghiacci")
		return "‚ùÑÔ∏è";
}

function dragonSymId(type) {
	if (type == 2)
		return "üèî";
	else if (type == 5)
		return "‚òÅÔ∏è";
	else if (type == 3)
		return "üî•";
	else if (type == 4)
		return "üîÆ";
	else if (type == 1)
		return "üåä";
	else if (type == 6)
		return "‚ùÑÔ∏è";
}

function landSym(type) {
	if (type == 1)
		return "üí•";
	else if (type == 2)
		return "‚õÑÔ∏è";
	else if (type == 3)
		return "üíÄ";
	else if (type == 4)
		return "üí§";
	else if (type == 5)
		return "üö∂";
	else if (type == 6)
		return "üë∫";
}

function setFinishedArena(element, index, array) {
	var watcher_id = element.player_id;
	var chat_id = element.chat_id;
	connection.query('SELECT player_id, win, lose, land_type, dragon_1, dragon_2, choice, bet_id, bet_qnt FROM event_arena_status WHERE player_id = ' + watcher_id, function (err, rows, fields) {
		if (err) throw err;

		var dragon1 = rows[0].dragon_1;
		var dragon2 = rows[0].dragon_2;
		var choice = rows[0].choice;
		var landType = rows[0].land_type;
		var bet_id = rows[0].bet_id;
		var bet_qnt = rows[0].bet_qnt;
		var win = rows[0].win;
		var lose = rows[0].lose;
		var reborn = element.reborn;

		if (choice == 0) {
			connection.query('UPDATE event_arena_status SET extracted = 0, dragon_1 = 0, dragon_2 = 0, land_type = 0, choice = 0, bet_id = 0, bet_qnt = 0, fight_time = NULL WHERE player_id = ' + watcher_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(chat_id, "Tempo scaduto per la selezione del drago preferito, torna all'arena per assistere ad un altro scontro");
			});
			return;
		}

		connection.query('SELECT * FROM dragon WHERE id = ' + dragon1, function (err, rows, fields) {
			if (err) throw err;

			var myId = rows[0].id;
			var name1 = rows[0].name;
			if (name1.lenght > 30)
				name1 = name1.substring(0, 30) + "...";
			var myLife = Math.round(parseInt(rows[0].exp * 10));
			var totMyLife = myLife;
			var myDmg = parseInt(rows[0].damage) + parseInt(rows[0].claws);
			var myCrit = parseInt(rows[0].critical);
			var myType = rows[0].type;
			var myLevel = rows[0].level;
			var player_id1 = rows[0].player_id;

			connection.query('SELECT class, chat_id, charm_id, reborn, power_dragon_dmg, power_dragon_crit, holiday FROM player WHERE id = ' + player_id1, function (err, rows, fields) {
				if (err) throw err;

				var reborn = rows[0].reborn;
				var class_id = rows[0].class;
				var charm_id = rows[0].charm_id;
				var chat_id1 = rows[0].chat_id;
				var holiday1 = rows[0].holiday;

				myDmg += rows[0].power_dragon_dmg;
				myCrit += rows[0].power_dragon_crit;

				if (charm_id == 602) {
					myDmg += 25;
					myCrit += 10;
				}
				if (charm_id == 695) {
					myDmg += 30;
					myCrit += 15;
				}

				if ((class_id == 7) && (reborn == 3))
					myCrit += 5;
				if ((class_id == 7) && (reborn >= 4))
					myCrit += 7;

				connection.query('SELECT * FROM dragon WHERE id = ' + dragon2, function (err, rows, fields) {
					if (err) throw err;

					var enemyId = rows[0].player_id;
					var name2 = rows[0].name;
					if (name2.lenght > 30)
						name2 = name2.substring(0, 30) + "...";
					var enemyLife = Math.round(parseInt(rows[0].exp * 10));
					var enemyDmg = parseInt(rows[0].damage) + parseInt(rows[0].claws);
					var enemyCrit = parseInt(rows[0].critical);
					var enemyType = rows[0].type;
					var enemyLevel = rows[0].level;
					var player_id2 = rows[0].player_id;

					connection.query('SELECT class, chat_id, charm_id, reborn, power_dragon_dmg, power_dragon_crit, holiday FROM player WHERE id = ' + player_id2, function (err, rows, fields) {
						if (err) throw err;

						var reborn2 = rows[0].reborn;
						var class_id2 = rows[0].class;
						var enemyCharm_id = rows[0].charm_id;
						var chat_id2 = rows[0].chat_id;
						var holiday2 = rows[0].holiday;

						enemyDmg += rows[0].power_dragon_dmg;
						enemyCrit += rows[0].power_dragon_crit;

						if (enemyCharm_id == 602) {
							enemyDmg += 25;
							enemyCrit += 10;
						}
						if (enemyCharm_id == 695) {
							enemyDmg += 30;
							enemyDmg += 15;
						}
						if ((class_id2 == 7) && (reborn2 == 3))
							enemyCrit += 5;
						if ((class_id2 == 7) && (reborn2 >= 4))
							enemyCrit += 7;

						var totEnemyLife = enemyLife;

						var rDmg = 0;
						var rDmg2 = 0;
						var killed = 0;
						var code = 0;
						var rand = 0;

						var landRand = 0;
						var landDesc = "";

						var critTxt1 = "";
						var critTxt2 = "";

						if (landType == 1)
							landDesc = "Scottatura";
						else if (landType == 2)
							landDesc = "Congelamento;"
						else if (landType == 3)
							landDesc = "Avvelenamento";
						else if (landType == 4)
							landDesc = "Sonno";
						else if (landType == 5)
							landDesc = "Rallentamento";
						else
							landDesc = "Terrore";

						var weak = 0;

						if ((myType == "dell'Oscurit√†") && (enemyType == "dei Ghiacci"))
							myDmg = myDmg * 1.5;
						if ((myType == "dell'Oscurit√†") && (enemyType == "dei Cieli")) {
							enemyDmg = enemyDmg * 1.5;
							weak = 1;
						}

						if ((myType == "dei Ghiacci") && (enemyType == "dei Cieli"))
							myDmg = myDmg * 1.5;
						if ((myType == "dei Ghiacci") && (enemyType == "Infernale")) {
							enemyDmg = enemyDmg * 1.5;
							weak = 1;
						}

						if ((myType == "dei Mari") && (enemyType == "Infernale"))
							myDmg = myDmg * 1.5;
						if ((myType == "dei Mari") && (enemyType == "delle Montagne")) {
							enemyDmg = enemyDmg * 1.5;
							weak = 1;
						}

						if ((myType == "dei Cieli") && (enemyType == "dell'Oscurit√†"))
							myDmg = myDmg * 1.5;
						if ((myType == "dei Cieli") && (enemyType == "dei Ghiacci")) {
							enemyDmg = enemyDmg * 1.5;
							weak = 1;
						}

						if ((myType == "delle Montagne") && (enemyType == "dei Mari"))
							myDmg = myDmg * 1.5;
						if ((myType == "delle Montagne") && (enemyType == "dell'Oscurit√†")) {
							enemyDmg = enemyDmg * 1.5;
							weak = 1;
						}

						if ((myType == "Infernale") && (enemyType == "delle Montagne"))
							myDmg = myDmg * 1.5;
						if ((myType == "delle Montagne") && (enemyType == "dei Mari")) {
							enemyDmg = enemyDmg * 1.5;
							weak = 1;
						}

						var actions = [];

						actions.push("La salute di " + name2 + " " + dragonSym(enemyType) + " √® *" + totEnemyLife + "* hp, quella di " + name1 + " " + dragonSym(myType) + " √® *" + totMyLife + "* hp");
						actions.push("Lo scontro avviene su un terreno che provoca *" + landDesc + "* " + landSym(landType));
						actions.push("<=>");

						var nextNull = 0;
						var nextMid = 0;
						var nextCrit = 0;
						var nextWeak = 0;

						var nextNull2 = 0;
						var nextMid2 = 0;
						var nextCrit2 = 0;
						var nextWeak2 = 0;

						var landRandB = 0;
						var landRandB2 = 0;
						var landDmg = 0;
						var landDmg2 = 0;

						var hits = 0;
						var hits2 = 0;

						var hit_arr = ["ferisce", "sfregia", "squarta", "urta", "infilza"];

						while (killed == 0) {
							landRandB = Math.random() * 100;
							landRandB2 = Math.random() * 100;

							if (nextNull == 1) {
								actions.push(name1 + " non √® riuscito a colpire l'avversario!");
								nextNull = 0;
							} else {
								hits2++;

								rDmg = Math.round(Math.random() * (myDmg * 2) + myDmg);
								if (nextWeak == 1) {
									landDmg = (rDmg / 100) * 10;
									rDmg -= landDmg;
									nextWeak = 0;
								}

								if (nextMid2 == 1) {
									rDmg = rDmg / 2;
									nextMid = 0;
								}

								rDmg = Math.round(rDmg);
								enemyLife = Math.round(enemyLife - rDmg);

								// drago 2 >> drago 1

								landDmg2 = (rDmg / 100) * 10;
								landDmg2 = Math.round(landDmg2);

								if ((landType == 1) && (enemyType != "Infernale")) {
									if (landRandB2 < 50) {
										actions.push("Per *Scottatura*, " + name2 + " subisce ulteriori " + landDmg2 + " danni");
										rDmg += landDmg;
									}
								}
								if ((landType == 2) && (enemyType != "dei Ghiacci")) {
									if (landRandB2 < 40) {
										actions.push("Per *Congelamento*, " + name2 + " viene paralizzato dal freddo");
										nextNull = 1;
									}
								}
								if ((landType == 3) && (enemyType != "delle Montagne")) {
									if (landRandB2 < 50) {
										actions.push("Per *Avvelenamento*, " + name2 + " ha il danno dimezzato");
										nextMid = 1;
									}
								}
								if ((landType == 4) && (enemyType != "dei Cieli")) {
									if (landRandB2 < 40) {
										actions.push("Per *Sonno*, " + name2 + " subisce un danno critico");
										nextCrit = 1;
									}
								}
								if ((landType == 5) && (enemyType != "dei Mari")) {
									if (landRandB2 < 50) {
										actions.push("Per *Rallentamento*, il danno di " + name2 + " sar√† pi√π debole");
										nextWeak = 1;
									}
								}
								if ((landType == 6) && (enemyType != "dell'Oscurit√†")) {
									if (landRandB2 < 40) {
										actions.push("Per *Terrore*, " + name2 + " rimane paralizzato");
										nextNull = 1;
									}
								}

								rand = Math.random() * 100;
								if (rand <= myCrit) {
									rDmg = rDmg * 2;
									critTxt1 = "Danno Critico!";
								} else
									critTxt1 = "";

								hit_arr = shuffle(hit_arr);
								actions.push(name1 + " " + hit_arr[0] + " il drago avversario -" + rDmg + " (" + enemyLife + " hp) " + critTxt1);
							}

							if (enemyLife <= 0) {
								killed = 1;
								code = 1;
								actions.push("*" + name1 + " √® il vincitore*! (" + hits + " turni)");
							} else {
								if (nextNull2 == 1) {
									actions.push(name2 + " non √® riuscito a colpire l'avversario!");
									nextNull2 = 0;
								} else {
									hits++;

									rDmg2 = Math.round(Math.random() * (enemyDmg * 2) + enemyDmg);
									if (nextWeak2 == 1) {
										landDmg = (rDmg / 100) * 10;
										rDmg2 -= landDmg;
										nextWeak2 = 0;
									}

									if (nextMid2 == 1) {
										rDmg2 = rDmg2 / 2;
										nextMid2 = 0;
									}

									// drago 1 >> drago 2

									landDmg = (rDmg2 / 100) * 10;
									landDmg = Math.round(landDmg);

									if ((landType == 1) && (myType != "Infernale")) {
										if (landRandB < 50) {
											actions.push("Per *Scottatura*, " + name1 + " subisce ulteriori " + landDmg + " danni");
											rDmg2 += landDmg;
										}
									}
									if ((landType == 2) && (myType != "dei Ghiacci")) {
										if (landRandB < 40) {
											actions.push("Per *Congelamento*, " + name1 + " 1 viene paralizzato dal freddo");
											nextNull2 = 1;
										}
									}
									if ((landType == 3) && (myType != "delle Montagne")) {
										if (landRandB < 50) {
											actions.push("Per *Avvelenamento*, " + name1 + " ha il danno dimezzato");
											nextMid2 = 1;
										}
									}
									if ((landType == 4) && (myType != "dei Cieli")) {
										if (landRandB < 40) {
											actions.push("Per *Sonno*, " + name1 + " subisce un danno critico");
											nextCrit2 = 1;
										}
									}
									if ((landType == 5) && (myType != "dei Mari")) {
										if (landRandB < 50) {
											actions.push("Per *Rallentamento*, il danno di " + name1 + " sar√† pi√π debole");
											nextWeak2 = 1;
										}
									}
									if ((landType == 6) && (myType != "dell'Oscurit√†")) {
										if (landRandB < 40) {
											actions.push("Per *Terrore*, " + name1 + " rimane paralizzato");
											nextNull2 = 1;
										}
									}

									rand = Math.random() * 100;
									if ((rand <= enemyCrit) || (nextCrit2 == 1)) {
										rDmg2 = rDmg2 * 2;
										critTxt2 = "Danno Critico!";
										nextCrit2 = 0;
									} else
										critTxt2 = "";

									myLife = Math.round(myLife - rDmg2);
									rDmg2 = Math.round(rDmg2);

									hit_arr = shuffle(hit_arr);
									actions.push(name2 + " " + hit_arr[0] + " il drago avversario -" + rDmg2 + " (" + myLife + " hp) " + critTxt2);
								}
							};

							if (myLife <= 0) {
								killed = 1;
								code = 2;
								actions.push("*" + name2 + " √® il vincitore*! (" + hits2 + " turni)");
							}
						}

						var len = parseInt(Object.keys(actions).length);
						var battle = "";

						if (len > 60) {
							actions.splice(20, (len - 40));
							actions.splice(21, 0, "(...)");
							len = Object.keys(actions).length;
						}

						for (var i = 0; i < len; i++)
							battle += actions[i] + "\n";

						bot.sendMessage(chat_id, battle, mark);

						if (code == choice) {
							connection.query('UPDATE event_arena_status SET extracted = 0, win = win+1, dragon_1 = 0, dragon_2 = 0, land_type = 0, choice = 0, bet_id = 0, bet_qnt = 0, fight_time = NULL WHERE player_id = ' + watcher_id, function (err, rows, fields) {
								if (err) throw err;

								connection.query('SELECT name FROM item WHERE id = ' + bet_id, function (err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0) {
										var stone = (67 + Math.round(Math.random() * 5 + 1));

										addItem(watcher_id, stone);
										connection.query('SELECT name FROM item WHERE id = ' + stone, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(chat_id, "Hai vinto e ottenuto " + rows[0].name + "!\nTorna all'arena per fare la prossima scelta!");
										});
									} else {
										var qnt = bet_qnt * 2;
										var rand_bonus = Math.random() * 100;
										var extra = "";
										if (rand_bonus < 5) {
											qnt++;
											extra = " BONUS";
										}

										addItem(watcher_id, bet_id, qnt);
										bot.sendMessage(chat_id, "*Hai vinto* e ottenuto " + qnt + "x *" + rows[0].name + "*" + extra + "!\nTorna all'arena per fare la prossima scelta!", mark);
									}

									if ((parseInt(win) + 1) % 10 == 0) {
										var chest = Math.round(Math.random() * 2 + 3);

										addChest(watcher_id, chest);
										connection.query('SELECT name FROM chest WHERE id = ' + chest, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(chat_id, "Come bonus per le vittorie ottenute hai vinto anche uno " + rows[0].name + "!");
										});
									}
								});
							});
						} else {
							connection.query('UPDATE event_arena_status SET extracted = 0, lose = lose+1, dragon_1 = 0, dragon_2 = 0, land_type = 0, choice = 0, bet_id = 0, bet_qnt = 0, fight_time = NULL WHERE player_id = ' + watcher_id, function (err, rows, fields) {
								if (err) throw err;
								connection.query('SELECT name FROM item WHERE id = ' + bet_id, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0)
										bot.sendMessage(chat_id, "*Hai perso!*\nTorna all'arena per fare la prossima scelta!", mark);
									else
										bot.sendMessage(chat_id, "*Hai perso* e hai lasciato " + bet_qnt + "x " + rows[0].name + " alla segreteria dell'arena!\nTorna all'arena per fare la prossima scelta!", mark);
								});
							});
						}

						//1 per drago 1, 2 per drago 2

						var dragon_win = 0;
						var dragon_lose = 0;
						var win_money = Math.min(myLevel, enemyLevel)*150;

						if (choice == 1) {
							dragon_win = dragon1;
							dragon_lose = dragon2;

							if (holiday1 == 0) {
								connection.query('UPDATE player SET money = money+' + win_money + ' WHERE id = ' + player_id1, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id1, "Il tuo drago ha ottenuto una vittoria nell'arena! Hai vinto " + formatNumber(win_money) + " ¬ß!");
								});
							}
						} else {
							dragon_win = dragon2;
							dragon_lose = dragon1;

							if (holiday2 == 0) {
								connection.query('UPDATE player SET money = money+' + win_money + ' WHERE id = ' + player_id2, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id2, "Il tuo drago ha ottenuto una vittoria nell'arena! Hai vinto " + formatNumber(win_money) + " ¬ß!");
								});
							}
						}

						connection.query('SELECT dragon_id FROM event_arena_dragon WHERE dragon_id = ' + dragon_win, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								connection.query('INSERT INTO event_arena_dragon (dragon_id, win, lose) VALUES (' + dragon_win + ', 1, 0)', function (err, rows, fields) {
									if (err) throw err;
								});
							} else {
								connection.query('UPDATE event_arena_dragon SET win = win+1 WHERE dragon_id = ' + dragon_win, function (err, rows, fields) {
									if (err) throw err;
								});
							}
						});

						connection.query('SELECT dragon_id FROM event_arena_dragon WHERE dragon_id = ' + dragon_lose, function (err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0) {
								connection.query('INSERT INTO event_arena_dragon (dragon_id, win, lose) VALUES (' + dragon_lose + ', 0, 1)', function (err, rows, fields) {
									if (err) throw err;
								});
							} else {
								connection.query('UPDATE event_arena_dragon SET lose = lose+1 WHERE dragon_id = ' + dragon_lose, function (err, rows, fields) {
									if (err) throw err;
								});
							}
						});
					});
				});
			});
		});
	});
};

function compressArray(original) {
	var compressed = [];
	var copy = original.slice(0);

	for (var i = 0; i < original.length; i++) {
		var myCount = 0;
		for (var w = 0; w < copy.length; w++) {
			if (original[i] == copy[w]) {
				myCount++;
				delete copy[w];
			}
		}

		if (myCount > 0) {
			var a = new Object();
			a.value = original[i];
			a.count = myCount;
			compressed.push(a);
		}
	}

	return compressed;
};

function creaOggetto(message, player_id, oggetto, money, reborn, quantity = 1, global_end) {
	var inventario = "";

	if (!checkSpam(message))
		return;

	if (isNaN(quantity)) {
		bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
		return;
	}

	quantity = parseInt(quantity);

	if (player_id != 1) {
		if ((quantity < 1) || (quantity > 3)) {
			bot.sendMessage(message.chat.id, "Puoi creare al massimo 3 copie dello stesso oggetto contemporaneamente", back);
			return;
		}
	}

	connection.query('SELECT id, term FROM search_history WHERE player_id = ' + player_id + ' ORDER BY id DESC LIMIT 2', function (err, rows, fields) {
		if (err) throw err;

		var iKeys = [];

		iKeys.push(["Crea " + oggetto, "Crea " + oggetto + ",3"]);

		if (Object.keys(rows).length == 2)
			iKeys.push(["Torna a " + rows[1].term]);

		iKeys.push(["Torna a *" + oggetto]);

		var craft_fail = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Cerca " + oggetto], ["Torna al menu"]]
			}
		};

		connection.query('SELECT craft.material_1, craft.material_2, craft.material_3, craft.material_result, item.name FROM craft, item WHERE craft.material_result = item.id AND item.name = "' + oggetto + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste", craft_fail);
				return;
			} else {
				var mat = [];
				var matR = rows[0].material_result;
				mat[0] = rows[0].material_1;
				mat[1] = rows[0].material_2;
				mat[2] = rows[0].material_3;

				var today = new Date();
				if ((eventFestival == 1) && (quantity > 1)) {
					if ((today.getDay() == 6) || (today.getDay() == 0)) {
						var item = connection_sync.query('SELECT item_id, wait_time, completed FROM event_crafting_item ORDER BY id DESC LIMIT 1');
						if ((Object.keys(item).length > 0) && (item[0].item_id == matR) && (item[0].wait_time == null) && (item[0].completed == 0)) {
							bot.sendMessage(message.chat.id, "Non puoi creare pi√π copie dell'oggetto richiesto per il festival!", back);
							return;
						}
					}
				}

				oggetto = rows[0].name;

				connection.query('SELECT I.name, I.rarity, I.reborn, I.power, I.cons, R.id As rarity_id FROM item I, rarity R WHERE I.rarity = R.shortname AND I.id = ' + matR, function (err, rows, fields) {
					if (err) throw err;

					var result_name = rows[0].name;
					var result_rarity = rows[0].rarity;
					var result_reborn = rows[0].reborn;
					var result_power = rows[0].power;
					var result_cons = rows[0].cons;
					var result_rarity_id = rows[0].rarity_id;

					if (reborn < result_reborn) {
						bot.sendMessage(message.chat.id, "La tua rinascita non √® sufficente per creare questo oggetto.", back);
						return;
					}

					connection.query('SELECT I.name, I.rarity, I.reborn, I.craftable, IFNULL(IV.quantity, 0) As quantity FROM item I LEFT JOIN inventory IV ON (I.id = IV.item_id AND IV.player_id = ' + player_id + ') WHERE I.id IN (' + mat[0] + ',' + mat[1] + ',' + mat[2] + ')', function (err, rows, fields) {
						if (err) throw err;

						var cost = 0;
						var Rmoney = "";
						var craftexp = 0;

						if (result_rarity == "C")
							cost = 1000;
						else if (result_rarity == "NC")
							cost = 2000;
						else if (result_rarity == "R") {
							cost = 3000;
							craftexp = 1;
						} else if (result_rarity == "UR") {
							cost = 5000;
							craftexp = 2;
						} else if (result_rarity == "L") {
							cost = 7500;
							craftexp = 3;
						} else if (result_rarity == "E") {
							cost = 10000;
							craftexp = 5;
						} else if (result_rarity == "UE") {
							cost = 100000;
							craftexp = 25;
						} else if (result_rarity == "U") {
							cost = 250000;
							craftexp = 35;
						} else if (result_rarity == "X") {
							cost = 1000000;
							craftexp = 50;
						} else if (result_rarity == "S") {
							cost = 50000;
							craftexp = 15;
						}

						cost = cost * quantity;
						var cost_text = "";
						/*
						if (global_end == 1) {
							cost += cost*0.5;
							cost = Math.round(cost);
							cost_text = " (aumentati per malus globale)";
						}
						*/

						craftexp = craftexp * quantity;

						/*
						if (global_end == 1)
							cost = Math.round(cost/2);
						*/

						var n1 = (rows[0].craftable == 0 ? "*" + rows[0].name + "*" : rows[0].name);
						var r1 = rows[0].rarity;
						var q1 = rows[0].quantity;
						var n2 = (rows[1].craftable == 0 ? "*" + rows[1].name + "*" : rows[1].name);
						var r2 = rows[1].rarity;
						var q2 = rows[1].quantity;
						var n3 = (rows[2].craftable == 0 ? "*" + rows[2].name + "*" : rows[2].name);
						var r3 = rows[2].rarity;
						var q3 = rows[2].quantity;

						var s1 = " ‚úÖ";
						var s2 = " ‚úÖ";
						var s3 = " ‚úÖ";

						var iKeys2 = [];

						if (q1 < quantity) {
							iKeys2.push(["Cerca *" + rows[0].name]);
							s1 = " üö´";
						}
						if (q2 < quantity) {
							iKeys2.push(["Cerca *" + rows[1].name]);
							s2 = " üö´";
						}
						if (q3 < quantity) {
							iKeys2.push(["Cerca *" + rows[2].name]);
							s3 = " üö´";
						}

						if ((q1 > 0) && (q2 > 0) && (q3 > 0)) {
							iKeys2.push(["Procedi"]);
							iKeys2.push(["Torna a *" + result_name]);
							iKeys2.push(["Torna al menu"]);
						} else
							iKeys2.push(["Torna al menu"]);

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								keyboard: iKeys2
							}
						};

						var copy = "copie";
						if (quantity == 1)
							copy = "copia";

						var matRcnt = getItemCnt(player_id, matR);
						var matRcnt_txt = "";
						if (matRcnt == 1)
							matRcnt_txt = "\nPossiedi 1 copia di questo oggetto";
						else if (matRcnt > 1)
							matRcnt_txt = "\nPossiedi " + matRcnt + " copie di questo oggetto";
						else
							matRcnt_txt = "\nNon possiedi questo oggetto";

						bot.sendMessage(message.chat.id, "Spenderai *" + formatNumber(cost) + "* ¬ß" + cost_text + " e consumerai *" + quantity + "* " + copy + " dei seguenti oggetti:\n> " + n1 + " (" + r1 + ", " + q1 + ")" + s1 + "\n> " + n2 + " (" + r2 + ", " + q2 + ")" + s2 + "\n> " + n3 + " (" + r3 + ", " + q3 + ")" + s3 + matRcnt_txt, kb).then(function () {
							answerCallbacks[message.chat.id] = function (answer) {

								var res = answer.text.toLowerCase();

								if (answer.text == "Torna al menu")
									return;

								if ((res == "si") || (res == "procedi")) {
									connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;

										money = rows[0].money;

										connection.query('SELECT name FROM item WHERE id = ' + mat[0], function (err, rows, fields) {
											if (err) throw err;

											var cnt = getItemCnt(player_id, mat[0]);
											if (cnt < quantity) {
												craft_fail = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														keyboard: [["Cerca *" + rows[0].name], ["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Non possiedi abbastanza " + rows[0].name + " (" + cnt + " su " + quantity + ")", craft_fail);
												return;
											}
											connection.query('SELECT name FROM item WHERE id = ' + mat[1], function (err, rows, fields) {
												if (err) throw err;

												var cnt2 = getItemCnt(player_id, mat[1]);
												if (cnt2 < quantity) {
													craft_fail = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															keyboard: [["Cerca *" + rows[0].name], ["Torna al menu"]]
														}
													};

													bot.sendMessage(message.chat.id, "Non possiedi abbastanza " + rows[0].name + " (" + cnt2 + " su " + quantity + ")", craft_fail);
													return;
												}
												connection.query('SELECT name FROM item WHERE id = ' + mat[2], function (err, rows, fields) {
													if (err) throw err;

													var cnt3 = getItemCnt(player_id, mat[2]);
													if (cnt3 < quantity) {
														craft_fail = {
															parse_mode: "Markdown",
															reply_markup: {
																resize_keyboard: true,
																keyboard: [["Cerca *" + rows[0].name], ["Torna al menu"]]
															}
														};

														bot.sendMessage(message.chat.id, "Non possiedi abbastanza " + rows[0].name + " (" + cnt3 + " su " + quantity + ")", craft_fail);
														return;
													}

													if (cost > 0) {
														if (money < cost) {
															bot.sendMessage(message.chat.id, "Ti servono " + formatNumber(cost) + " ¬ß per creare questo oggetto.", craft_fail);
															return;
														} else {
															connection.query('UPDATE player SET money = money-' + cost + ' WHERE `nickname` = "' + message.from.username + '"', function (err, rows, fields) {
																if (err) throw err;
															});
														}
													};

													delItem(player_id, mat[0], quantity);
													delItem(player_id, mat[1], quantity);
													delItem(player_id, mat[2], quantity);

													addItem(player_id, matR, quantity);

													if (result_power > 0)
														setAchievement(player_id, 34, quantity);

													connection.query('SELECT item.name FROM craft, item WHERE item.id = craft.material_result AND (material_1 = ' + matR + ' OR material_2 = ' + matR + ' OR material_3 = ' + matR + ') LIMIT 20', function (err, rows, fields) {
														if (err) throw err;

														if (Object.keys(rows).length > 0) {
															for (var i = 0, len = Object.keys(rows).length; i < len; i++)
																iKeys.push(["Crea " + rows[i].name]);
														}

														iKeys.push(["Contrabbandiere", "Torna a *" + oggetto]);
														iKeys.push(["Torna al dungeon", "Torna all'Assalto"]);
														iKeys.push(["Torna al menu"]);

														var craft = {
															parse_mode: "Markdown",
															reply_markup: {
																resize_keyboard: true,
																keyboard: iKeys
															}
														};

														var extra_craft = "";
														if (craftexp > 0)
															extra_craft = " ed ottenuto *" + craftexp + "* PC";

														var resQuantity = getItemCnt(player_id, matR);
														if (quantity == 1)
															bot.sendMessage(message.chat.id, "Hai creato *" + oggetto + "* (ne possiedi " + resQuantity + ")" + extra_craft + "!", craft);
														else
															bot.sendMessage(message.chat.id, "Hai creato " + quantity + "x *" + oggetto + "* (ne possiedi " + resQuantity + ")" + extra_craft + "!", craft);

														connection.query('UPDATE player SET craft_week = craft_week + ' + craftexp + ', craft_count = craft_count + ' + craftexp + ', craft_day = craft_day + ' + craftexp + ' WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
															if (err) throw err;
														});

														connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
															if (Object.keys(rows).length > 0) {
																connection.query('UPDATE team SET craft_count = craft_count+' + craftexp + ', craft_week_count = craft_week_count+' + craftexp + ' WHERE id = ' + rows[0].team_id, function (err, rows, fields) {
																	if (err) throw err;
																});
															}
														});

														setAchievement(player_id, 10, craftexp);
														setAchievement(player_id, 12, quantity, matR);	// id oggetto
														if (result_cons == 1)
															setAchievement(player_id, 68, quantity, result_rarity_id);	// rarit√†
														var today = new Date();
														if (((today.getDay() == 6) || (today.getDay() == 0)) && (eventFestival == 1))
															checkFestival(message.chat.id, player_id, matR);
													});
												});
											});
										});
									});
								};
							};
						});
					});
				});
			}
		});
	});
}

function checkFestival(chat_id, player_id, item_id) {
	connection.query('SELECT event_crafting_item.completed, event_crafting_item.cnt, event_crafting_item.total_price, event_crafting_item.full_price, event_crafting_item.wait_time, event_crafting_item.start_price, event_crafting_item.increm, event_crafting_item.id As eventId, event_crafting_item.cnt, item.id, rarity.id As rarity_id, event_crafting_item.incremDelta FROM event_crafting_item, item, rarity WHERE item.rarity = rarity.shortname AND item.id = event_crafting_item.item_id ORDER BY event_crafting_item.id DESC LIMIT 1', function (err, rows, fields) {
		if (err) throw err;

		if ((Object.keys(rows).length > 0) && (rows[0].id == item_id) && (rows[0].wait_time == null) && (rows[0].completed == 0)) {
			var start_price = rows[0].start_price;
			var full_price = rows[0].full_price;
			var delta = start_price/100;
			var incremDelta = rows[0].incremDelta;
			var cnt = rows[0].cnt;
			var ricompensa = start_price+delta*cnt;
			var total_price = Math.round(rows[0].total_price + ricompensa);

			var eventId = rows[0].eventId;
			var rarityId = rows[0].rarity_id;
			var incremPrice = rows[0].increm;

			connection.query('UPDATE event_crafting_item SET total_price = total_price+' + ricompensa + ', cnt = cnt+1, incremDelta = ' + ricompensa + ' WHERE id = ' + eventId, function (err, rows, fields) {
				if (err) throw err;
				connection.query('UPDATE event_crafting_status SET cnt = cnt+1, total_cnt = total_cnt+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					var plur = "e";
					if ((parseInt(cnt) + 1) == 1)
						plur = "a";
					bot.sendMessage(chat_id, "Hai creato l'oggetto per il festival! Il gruzzolone ha raggiunto un totale di *" + formatNumber(total_price) + " ¬ß*, √® stato creato " + formatNumber(parseInt(cnt) + 1) + " volt" + plur + "!", mark);

					var cap = start_price * 5 * (7 - rarityId);
					cap += cap * (incremPrice / 100);

					if (ricompensa >= cap) {
						connection.query('UPDATE event_crafting_item SET completed = 1 WHERE id = ' + eventId, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				});
			});
		}
	});
}

function checkAllProgress(player_id) {
	setAchievementProgress(player_id, 1);
	setAchievementProgress(player_id, 2);
	setAchievementProgress(player_id, 3);
	setAchievementProgress(player_id, 4);
	setAchievementProgress(player_id, 5);
	setAchievementProgress(player_id, 6);
	setAchievementProgress(player_id, 7);
}

function setAchievementProgress(player_id, type) {
	connection.query('SELECT id, chat_id, exp, reborn, mission_count, dungeon_count, craft_count, mission_team_count, cave_count FROM player WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var chat_id = rows[0].chat_id;
		var lev = Math.floor(rows[0].exp / 10);
		var reb = rows[0].reborn;
		var miss = rows[0].mission_count;
		var dung = rows[0].dungeon_count;
		var craft = rows[0].craft_count;
		var mission_team_count = rows[0].mission_team_count;
		var cave_count = rows[0].cave_count;

		connection.query('SELECT total_cnt FROM merchant_offer WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var offers_count = 0;
			if (Object.keys(rows).length > 0)
				offers_count = rows[0].total_cnt;

			if (type == 1) {
				for (var i = 0, len = Object.keys(progLev).length; i < len; i++) {
					if (getRealLevel(reb, lev) >= progLev[i])
						achievementDetail(player_id, chat_id, type, i, progLevRew[i], "Hai raggiunto il livello " + formatNumber(progLev[i]));
				}
			} else if (type == 2) {
				for (var i = 0, len = Object.keys(progMis).length; i < len; i++) {
					if (miss >= progMis[i])
						achievementDetail(player_id, chat_id, type, i, progMisRew[i], "Hai completato " + formatNumber(progMis[i]) + " missioni");
				}
			} else if (type == 3) {
				for (var i = 0, len = Object.keys(progDung).length; i < len; i++) {
					if (dung >= progDung[i])
						achievementDetail(player_id, chat_id, type, i, progDungRew[i], "Hai completato " + formatNumber(progDung[i]) + " dungeon");
				}
			} else if (type == 4) {
				for (var i = 0, len = Object.keys(progCraft).length; i < len; i++) {
					if (craft >= progCraft[i])
						achievementDetail(player_id, chat_id, type, i, progCraftRew[i], "Hai raggiunto " + formatNumber(progCraft[i]) + " punti creazione");
				}
			} else if (type == 5) {
				for (var i = 0, len = Object.keys(progMissionTeam).length; i < len; i++) {
					if (mission_team_count >= progMissionTeam[i])
						achievementDetail(player_id, chat_id, type, i, progMissionTeamRew[i], "Hai raggiunto " + formatNumber(progMissionTeam[i]) + " incarichi");
				}
			} else if (type == 6) {
				for (var i = 0, len = Object.keys(progOffers).length; i < len; i++) {
					if (offers_count >= progOffers[i])
						achievementDetail(player_id, chat_id, type, i, progOffersRew[i], "Hai raggiunto " + formatNumber(progOffers[i]) + " offerte del contrabbandiere");
				}
			} else if (type == 7) {
				for (var i = 0, len = Object.keys(progCave).length; i < len; i++) {
					if (cave_count >= progCave[i])
						achievementDetail(player_id, chat_id, type, i, progCaveRew[i], "Hai esplorato " + formatNumber(progCave[i]) + " cave");
				}
			}
		});
	});
};

function achievementDetail(player_id, chat_id, type, subtype, reward, msg) {
	var rows = connection_sync.query('SELECT COUNT(id) As cnt FROM achievement_progressive_status WHERE subtype = ' + subtype + ' AND type = ' + type + ' AND player_id = ' + player_id);
	if (Object.keys(rows).length > 0) {
		if (rows[0].cnt == 0) {
			bot.sendMessage(chat_id, msg + " e ottenuto <i>" + formatNumber(reward) + "</i> ¬ß!", html);
			connection.query('UPDATE player SET money = money + ' + reward + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
			connection_sync.query('INSERT INTO achievement_progressive_status (player_id, type, subtype) VALUES (' + player_id + ',' + type + ',' + subtype + ')');
		}
	}
};

function setAchievement(player_id, type, increment, itemId = 0) {
	connection.query('SELECT achievement_count, reborn, chat_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;

		var achievement_count = parseInt(rows[0].achievement_count) + 1;
		var reborn = rows[0].reborn;
		var chat_id = rows[0].chat_id;

		connection.query('SELECT name, value, type, achievement_id, item_id, reward, multiply FROM achievement_daily, achievement_list WHERE achievement_daily.achievement_id = achievement_list.id AND achievement_list.type = ' + type, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				var count_ach = rows[0].value;
				var reward = rows[0].reward;
				if (rows[0].multiply == 1) {
					count_ach = count_ach*reborn;
					reward = reward*reborn;
				}
				var ach_id = rows[0].achievement_id;
				var item_id = rows[0].item_id;
				var name = rows[0].name;

				if (item_id != 0) {
					if ((item_id == 0) || (item_id != itemId))
						return;
				}

				connection.query('SELECT progress, completed FROM achievement_status WHERE achievement_id = ' + ach_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;

					var completed = 0;
					var progress = 0;
					if (Object.keys(rows).length == 0) {
						connection.query('INSERT INTO achievement_status (player_id, achievement_id, progress) VALUES (' + player_id + ',' + ach_id + ',0)', function (err, rows, fields) {
							if (err) throw err;

							if ((progress + increment >= count_ach) && (completed == 0)) {
								connection.query('UPDATE player SET achievement_count = achievement_count+1, money = money+' + reward + ' WHERE id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
								});
								connection.query('UPDATE achievement_status SET completed = 1 WHERE player_id = ' + player_id + ' AND achievement_id = ' + ach_id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai completato l'impresa giornaliera *" + name + "* e hai ricevuto *" + formatNumber(reward) + "  ¬ß*!", mark);
									setAchievement(player_id, 40, 1);

									connection.query("SELECT COUNT(*) As cnt, IFNULL(SUM(completed), 0) As compl FROM achievement_status WHERE player_id = " + player_id, function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length > 0) {
											if ((rows[0].cnt == 3) && (rows[0].compl == 3)) {
												connection.query('UPDATE player SET achievement_count_all = achievement_count_all+1 WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(chat_id, "Hai completato una tripletta di imprese giornaliere!", mark);
												});
											}
										}
									});
								});
								if ((achievement_count % 10) == 0) {
									var randChest = Math.random() * 100;
									var chest_id = 0;
									var chest_name = "";
									if (randChest <= 60) {
										chest_id = 4;
										chest_name = "Scrigno di Diamante";
									} else if (randChest <= 90) {
										chest_id = 5;
										chest_name = "Scrigno Leggendario";
									} else {
										chest_id = 6;
										chest_name = "Scrigno Epico";
									}
									addChest(player_id, chest_id);
									bot.sendMessage(chat_id, "Hai completato *10 imprese* e hai ricevuto uno *" + chest_name + "*!", mark);
								}
								if ((achievement_count % 50) == 0) {
									var randChest = Math.random() * 100;
									var chest_id = 0;
									var chest_name = "";
									if (randChest <= 60) {
										chest_id = 9;
										chest_name = "Scrigno Scaglia";
									} else if (randChest <= 90) {
										chest_id = 8;
										chest_name = "Scrigno Mistico";
									} else {
										chest_id = 7;
										chest_name = "Scrigno Capsula";
									}
									addChest(player_id, chest_id);
									bot.sendMessage(chat_id, "Hai completato *50 imprese* e hai ricevuto uno *" + chest_name + "*!", mark);
								}
							}
							connection.query('UPDATE achievement_status SET progress = progress+' + increment + ' WHERE player_id = ' + player_id + ' AND achievement_id = ' + ach_id, function (err, rows, fields) {
								if (err) throw err;
							});
						});
					} else {
						completed = rows[0].completed;
						progress = rows[0].progress;

						if ((progress + increment >= count_ach) && (completed == 0)) {
							connection.query('UPDATE player SET achievement_count = achievement_count+1, money = money+' + reward + ' WHERE id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
							});
							connection.query('UPDATE achievement_status SET completed = 1 WHERE player_id = ' + player_id + ' AND achievement_id = ' + ach_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai completato l'impresa giornaliera *" + name + "* e hai ricevuto *" + formatNumber(reward) + " ¬ß*!", mark);
								setAchievement(player_id, 40, 1);

								connection.query("SELECT COUNT(*) As cnt, IFNULL(SUM(completed), 0) As compl FROM achievement_status WHERE player_id = " + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length > 0) {
										if ((rows[0].cnt == 3) && (rows[0].compl == 3)) {
											connection.query('UPDATE player SET achievement_count_all = achievement_count_all+1 WHERE id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(chat_id, "Hai completato una tripletta di imprese giornaliere!", mark);
											});
										}
									}
								});
							});

							if ((achievement_count % 10) == 0) {
								var randChest = Math.random() * 100;
								var chest_id = 0;
								var chest_name = "";
								if (randChest <= 60) {
									chest_id = 4;
									chest_name = "Scrigno di Diamante";
								} else if (randChest <= 90) {
									chest_id = 5;
									chest_name = "Scrigno Leggendario";
								} else {
									chest_id = 6;
									chest_name = "Scrigno Epico";
								}
								addChest(player_id, chest_id);
								bot.sendMessage(chat_id, "Hai completato *10 imprese* e hai ricevuto uno *" + chest_name + "*!", mark);
							}
							if ((achievement_count % 50) == 0) {
								var randChest = Math.random() * 100;
								var chest_id = 0;
								var chest_name = "";
								if (randChest <= 60) {
									chest_id = 9;
									chest_name = "Scrigno Scaglia";
								} else if (randChest <= 90) {
									chest_id = 8;
									chest_name = "Scrigno Mistico";
								} else {
									chest_id = 7;
									chest_name = "Scrigno Capsula";
								}
								addChest(player_id, chest_id);
								bot.sendMessage(chat_id, "Hai completato *50 imprese* e hai ricevuto uno *" + chest_name + "*!", mark);
							}
						}
						if (completed == 0) {
							connection.query('UPDATE achievement_status SET progress = progress+' + increment + ' WHERE player_id = ' + player_id + ' AND achievement_id = ' + ach_id, function (err, rows, fields) {
								if (err) throw err;
							});
						}
					}
				});
			};
		});
	});
}

function getRank(message, size, type) {
	var t = "craft_count";
	var tx = "sui punti creazione";
	var tval = "pnt";
	if (type == 1) {
		t = "craft_week";
		tx = "sui punti creazione settimanali";
	} else if (type == 2) {
		t = "rank";
		tx = "sui punti rango dungeon";
	} else if (type == 3) {
		t = "craft_day";
		tx = "sui punti creazione giornalieri";
	} else if (type == 4) {
		t = "achievement_count";
		tx = "sulle imprese giornaliere completate";
	} else if (type == 5) {
		t = "mission_count";
		tx = "sulle missioni completate";
	} else if (type == 6) {
		t = "ability";
		tx = "sull'abilit√†";
	} else if (type == 7) {
		t = "global_event";
		tx = "sul contributo alle imprese globali";
	} else if (type == 8) {
		t = "coupon_record";
		tx = "sul record di durata del coupon";
	} else if (type == 9) {
		t = "achievement_count_all";
		tx = "sulle triplette completate per le imprese";
	}

	var text = "Classifica basata " + tx + ":\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var mypos = 0;

	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1) {
			connection.query('SELECT nickname, IF(' + t + ' < 0, 0, ' + t + ') As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, ' + t + ', exp, weapon ORDER BY points DESC', function (err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < size + 1)
						text = text + c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].points) + " " + tval + ")\n";
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
						mypnt = rows[i].points;
						mypos = c;
					}
					c++;
				}
				text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + formatNumber(mypnt) + " " + tval + ")";

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		} else {
			connection.query('SELECT nickname, IF(' + t + ' < 0, 0, ' + t + ') As points FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) GROUP BY nickname, ' + t + ', exp, weapon ORDER BY points DESC', function (err, rows, fields) {
				if (err) throw err;

				var range = 5;

				var nickname = [];
				var points = [];
				var mypos = 0;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					points.push(rows[i].points);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase())
						mypos = i;
				}

				for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
					if (nickname[i] != undefined) {
						if (i == mypos)
							text += (i + 1) + "¬∞ <b>" + nickname[i] + "</b> (" + formatNumber(points[i]) + " " + tval + ")\n";
						else
							text += (i + 1) + "¬∞ " + nickname[i] + " (" + formatNumber(points[i]) + " " + tval + ")\n";
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		};
	});
};

function getRankTeam(message, size) {
	var text = "Classifica team basata sul tempo trascorso negli incarichi:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var mypos = 0;

	connection.query('SELECT player_id, team_id, name FROM team_player, team WHERE team_player.team_id = team.id AND player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			bot.sendMessage(message.chat.id, "Entra in un team per visualizzare questa classifica", keyrank);
			return;
		}

		var player_id = rows[0].player_id;
		var my_team_id = rows[0].team_id;
		var my_team_name = rows[0].name;

		connection.query('SELECT top_min FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			if (rows[0].top_min == 1) {
				connection.query('SELECT id, name, mission_time_count FROM team ORDER BY mission_time_count DESC', function (err, rows, fields) {
					if (err) throw err;
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (c < size + 1)
							text = text + c + "¬∞ " + rows[i].name + " (" + formatNumber(rows[i].mission_time_count) + " ore)\n";
						if (rows[i].id == my_team_id) {
							mypnt = rows[i].mission_time_count;
							mypos = c;
						}
						c++;
					}
					text = text + "\nTuo team:\n" + mypos + "¬∞ " + my_team_name + " (" + formatNumber(mypnt) + " ore)";

					bot.sendMessage(message.chat.id, text, keyrank);
				});
			} else {
				connection.query('SELECT id, name, mission_time_count FROM team ORDER BY mission_time_count DESC', function (err, rows, fields) {
					if (err) throw err;

					var range = 5;

					var name = [];
					var points = [];
					var mypos = 0;

					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						name.push(rows[i].name);
						points.push(rows[i].mission_time_count);
						if (my_team_id == rows[i].id)
							mypos = i;
					}

					for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
						if (name[i] != undefined) {
							if (i == mypos)
								text += (i + 1) + "¬∞ <b>" + name[i] + "</b> (" + formatNumber(points[i]) + " ore)\n";
							else
								text += (i + 1) + "¬∞ " + name[i] + " (" + formatNumber(points[i]) + " ore)\n";
						}
					}

					bot.sendMessage(message.chat.id, text, keyrank);
				});
			};
		});
	});
};

function getRankAt(message, size) {
	var text = "Classifica potenziamenti Flaridion:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var myinfo = 0;
	var size = 20;

	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1) {
			connection.query('SELECT nickname, power_used As total_cnt FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) HAVING total_cnt > 0 ORDER BY total_cnt DESC', function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Ancora nessuno ha utilizzato un potenziamento Flaridion", keyrank);
					return;
				}

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < 31) {
						if (c < size + 1)
							text = text + c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].total_cnt) + ")\n";
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()) {
						mypnt = rows[i].total_cnt;
						myinfo = c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].total_cnt) + ")\n";
					}
					c++;
				}
				if (mypnt == 0)
					myinfo = "Nessun Potenziamento acquistato";
				text = text + "\nTu:\n" + myinfo;

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		} else {
			connection.query('SELECT nickname, power_used As total_cnt FROM player WHERE account_id NOT IN (SELECT account_id FROM banlist) AND player.id NOT IN (1,3) HAVING total_cnt > 0 ORDER BY total_cnt DESC', function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					bot.sendMessage(message.chat.id, "Ancora nessuno ha utilizzato un potenziamento Flaridion", keyrank);
					return;
				}

				var range = 5;

				var nickname = [];
				var total_cnt = [];
				var mypos = -1;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					total_cnt.push(rows[i].total_cnt);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase())
						mypos = i;
				}
				if (mypos == -1) {
					bot.sendMessage(message.chat.id, "Non hai ancora utilizzato alcun Potenziamento Flaridion, per visualizzare la classifica completa cambia visualizzazione", keyrank);
					return;
				}
				for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
					if (nickname[i] != undefined) {
						if (i == mypos)
							text += (i + 1) + "¬∞ <b>" + nickname[i] + "</b> (" + formatNumber(total_cnt[i]) + ")\n";
						else
							text += (i + 1) + "¬∞ " + nickname[i] + " (" + formatNumber(total_cnt[i]) + ")\n";
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}
	});
}

function getRankArt(message, size) {
	connection.query('SELECT P.nickname, A.get_date FROM artifacts A, player P WHERE P.account_id NOT IN (SELECT account_id FROM banlist) AND P.id NOT IN (1,3) AND A.player_id = P.id AND item_id = 675 ORDER BY get_date DESC', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			bot.sendMessage(message.chat.id, "Ancora nessun giocatore ha ottenuto tutti gli artefatti", back);
			return;
		}

		var text = "Cronologia albo artefatti (" + Object.keys(rows).length + " giocatori totali):\n";

		var get_time = new Date();
		var short_date = "";
		var c = 0;
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			if (c >= size)
				break;
			get_time = new Date(rows[i].get_date);
			short_date = addZero(get_time.getHours()) + ':' + addZero(get_time.getMinutes()) + " del " + addZero(get_time.getDate()) + "/" + addZero(get_time.getMonth() + 1) + "/" + get_time.getFullYear();
			text += "> " + rows[i].nickname + " (" + short_date + ")\n";
			c++;
		}

		bot.sendMessage(message.chat.id, text, keyrank);
	});
};

function getRankAch(message, size) {
	var text = "Classifica Impresa Globale:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var mypos = 0;
	var size = 20;

	connection.query('SELECT global_eventwait FROM config', function (err, rows, fields) {
		if (err) throw err;

		if (rows[0].global_eventwait == 1) {
			bot.sendMessage(message.chat.id, "La classifica sar√† disponibile a breve", keyrank);
			return;
		}

		connection.query('SELECT top_min, global_event, id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
			if (err) throw err;

			var global_event = rows[0].global_event;
			var top_min = rows[0].top_min;
			var player_id = rows[0].id;

			var kb = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [['Top'], ['Imprese'], ['Torna al menu']]
				}
			};

			connection.query('SELECT 1 FROM achievement_global WHERE player_id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;

				if ((Object.keys(rows).length == 0) && (player_id != 1)) {
					bot.sendMessage(message.chat.id, "Contribuisci all'obbiettivo dell'impresa globale per visualizzarne la classifica", keyrank);
					return;
				}

				connection.query('(SELECT P.id FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) ORDER BY A.value DESC LIMIT 100) UNION (SELECT P.id FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) AND P.global_event < 5 ORDER BY A.value DESC LIMIT 100)', function (err, rows, fields) {
					if (err) throw err;

					var global_limit = Object.keys(rows).length;

					connection.query('UPDATE config SET global_limitcnt = ' + global_limit, function (err, rows, fields) {
						if (err) throw err;
					});

					if (top_min == 1) {
						connection.query('SELECT P.id, nickname, value As cnt FROM achievement_global A, player P WHERE account_id NOT IN (SELECT account_id FROM banlist) AND P.id NOT IN (1,3) AND A.player_id = P.id GROUP BY player_id ORDER BY SUM(value) DESC', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "La classifica √® ancora vuota", keyrank);
								return;
							}

							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (c < size + 1)
									text += c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].cnt) + ")\n";
								if (rows[i].id == player_id) {
									mypnt = rows[i].cnt;
									mypos = c;
								}
								c++;
							}
							text += "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + formatNumber(mypnt) + ")";

							connection.query('(SELECT P.id FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) ORDER BY A.value DESC LIMIT 100) UNION (SELECT P.id FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) AND P.global_event < 5 ORDER BY A.value DESC LIMIT 100)', function (err, rows, fields) {
								if (err) throw err;

								var found = 0;
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									if (rows[i].id == player_id) {
										found = 1;
										break;
									}
								}

								if (found == 1)
									text += "\nA questo punteggio la partecipazione all'impresa <b>verr√† considerata</b> nelle tue statistiche, insieme agli altri " + formatNumber(global_limit-1) + " avventurieri!";
								else
									text += "\nA questo punteggio la partecipazione all'impresa <b>NON verr√†</b> considerata nelle tue statistiche, impegnati di pi√π per aumentare i tuoi punti, raggiungi gli altri " + formatNumber(global_limit) + " avventurieri!";

								bot.sendMessage(message.chat.id, text, kb);
							});
						});
					} else {
						connection.query('SELECT P.id, nickname, value As cnt FROM achievement_global A, player P WHERE account_id NOT IN (SELECT account_id FROM banlist) AND P.id NOT IN (1,3) AND A.player_id = P.id GROUP BY player_id ORDER BY SUM(value) DESC', function (err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0) {
								bot.sendMessage(message.chat.id, "La classifica √® ancora vuota", keyrank);
								return;
							}

							var range = 5;

							var nickname = [];
							var point = [];
							var mypos = 0;

							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								nickname.push(rows[i].nickname);
								point.push(rows[i].cnt);
								if (player_id == rows[i].id)
									mypos = i;
							}

							for (var i = (mypos - range); i < (mypos + (range + 1)); i++) {
								if (nickname[i] != undefined) {
									if (i == mypos)
										text += (i + 1) + "¬∞ <b>" + nickname[i] + "</b> (" + formatNumber(point[i]) + ")\n";
									else
										text += (i + 1) + "¬∞ " + nickname[i] + " (" + formatNumber(point[i]) + ")\n";
								}
							}

							connection.query('(SELECT P.id FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) ORDER BY A.value DESC LIMIT 100) UNION (SELECT P.id FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (SELECT account_id FROM banlist) AND P.global_event < 5 ORDER BY A.value DESC LIMIT 100)', function (err, rows, fields) {
								if (err) throw err;

								var found = 0;
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									if (rows[i].id == player_id) {
										found = 1;
										break;
									}
								}

								if (found == 1)
									text += "\nA questo punteggio la partecipazione all'impresa <b>verr√† considerata</b> nelle tue statistiche, insieme agli altri " + formatNumber(global_limit-1) + " avventurieri!";
								else
									text += "\nA questo punteggio la partecipazione all'impresa <b>NON verr√†</b> considerata nelle tue statistiche, impegnati di pi√π per aumentare i tuoi punti, raggiungi gli altri " + formatNumber(global_limit) + " avventurieri!";

								bot.sendMessage(message.chat.id, text, kb);
							});
						});
					}
				});
			});
		});
	});
}

function cerca(message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var iKeys = [["Cerca Armi"], ["Cerca Armature", "Cerca Scudi"], ["Cerca Talismani", "Cerca Drago"], ["Cerca Consumabili", "Cerca Rifugio"], ["Cerca C", "Cerca NC"], ["Cerca R", "Cerca UR"], ["Cerca L", "Cerca E"], ["Cerca UE", "Cerca S"], ["Cerca U", "Cerca X"], ["Cerca D", "Cerca IN"], ["Lista Ricerche"], ["Torna al menu"]];

		var kb = {
			reply_markup: {
				resize_keyboard: true,
				keyboard: iKeys
			}
		};

		bot.sendMessage(message.chat.id, "Cosa vuoi cercare?\nPuoi cercare per rarit√† o categoria o scrivere Cerca NomeOggetto da qualsiasi schermata del bot. Per forzare la ricerca di un oggetto preciso scrivi Cerca *NomeOggetto", kb);
	});
};

function calcPnt(base_id, item_id) {
	connection.query('SELECT I1.id As i1, I1.name As n1, I1.rarity As r1, I1.craftable As c1, I2.id As i2, I2.name As n2, I2.craftable As c2, I2.rarity As r2, I3.id As i3, I3.name As n3, I3.rarity As r3, I3.craftable As c3 FROM craft C INNER JOIN item I1 ON C.material_1 = I1.id INNER JOIN item I2 ON C.material_2 = I2.id INNER JOIN item I3 ON C.material_3 = I3.id WHERE C.material_result = ' + item_id, function (err, rows, fields) {
		if (err) throw err;

		var calcVal = 0;
		var calcVal2 = 0;

		if (rows[0].c1 == 1) {
			calcPnt(base_id, rows[0].i1);

			if (rows[0].r1 == "C")
				calcVal2 = 1000;
			else if (rows[0].r1 == "NC")
				calcVal2 = 2000;
			else if (rows[0].r1 == "R") {
				calcVal2 = 3000;
				calcVal = 1;
			} else if (rows[0].r1 == "UR") {
				calcVal2 = 5000;
				calcVal = 2;
			} else if (rows[0].r1 == "L") {
				calcVal2 = 7500;
				calcVal = 3;
			} else if (rows[0].r1 == "E") {
				calcVal2 = 10000;
				calcVal = 5;
			} else if (rows[0].r1 == "UE") {
				calcVal2 = 100000;
				calcVal = 25;
			} else if (rows[0].r1 == "U") {
				calcVal2 = 250000;
				calcVal = 35;
			} else if (rows[0].r1 == "X") {
				calcVal2 = 1000000;
				calcVal = 50;
			} else if (rows[0].r1 == "S") {
				calcVal2 = 50000;
				calcVal = 15;
			}

			connection.query('UPDATE item SET pnt_sum = pnt_sum+' + calcVal + ', price_sum = price_sum+' + calcVal2 + ' WHERE id = ' + base_id, function (err, rows, fields) {
				if (err) throw err;
			});

			console.log(rows[0].n1 + " " + calcVal);
		}

		calcVal = 0;
		calcVal2 = 0;

		if (rows[0].c2 == 1) {
			calcPnt(base_id, rows[0].i2);

			if (rows[0].r2 == "C")
				calcVal2 = 1000;
			else if (rows[0].r2 == "NC")
				calcVal2 = 2000;
			else if (rows[0].r2 == "R") {
				calcVal2 = 3000;
				calcVal = 1;
			} else if (rows[0].r2 == "UR") {
				calcVal2 = 5000;
				calcVal = 2;
			} else if (rows[0].r2 == "L") {
				calcVal2 = 7500;
				calcVal = 3;
			} else if (rows[0].r2 == "E") {
				calcVal2 = 10000;
				calcVal = 5;
			} else if (rows[0].r2 == "UE") {
				calcVal2 = 100000;
				calcVal = 25;
			} else if (rows[0].r2 == "U") {
				calcVal2 = 250000;
				calcVal = 35;
			} else if (rows[0].r2 == "X") {
				calcVal2 = 1000000;
				calcVal = 50;
			} else if (rows[0].r2 == "S") {
				calcVal2 = 50000;
				calcVal = 15;
			}

			connection.query('UPDATE item SET pnt_sum = pnt_sum+' + calcVal + ', price_sum = price_sum+' + calcVal2 + ' WHERE id = ' + base_id, function (err, rows, fields) {
				if (err) throw err;
			});

			console.log(rows[0].n2 + " " + calcVal);
		}

		calcVal = 0;
		calcVal2 = 0;

		if (rows[0].c3 == 1) {
			calcPnt(base_id, rows[0].i3);

			if (rows[0].r3 == "C")
				calcVal2 = 1000;
			else if (rows[0].r3 == "NC")
				calcVal2 = 2000;
			else if (rows[0].r3 == "R") {
				calcVal2 = 3000;
				calcVal = 1;
			} else if (rows[0].r3 == "UR") {
				calcVal2 = 5000;
				calcVal = 2;
			} else if (rows[0].r3 == "L") {
				calcVal2 = 7500;
				calcVal = 3;
			} else if (rows[0].r3 == "E") {
				calcVal2 = 10000;
				calcVal = 5;
			} else if (rows[0].r3 == "UE") {
				calcVal2 = 100000;
				calcVal = 25;
			} else if (rows[0].r3 == "U") {
				calcVal2 = 250000;
				calcVal = 35;
			} else if (rows[0].r3 == "X") {
				calcVal2 = 1000000;
				calcVal = 50;
			} else if (rows[0].r3 == "S") {
				calcVal2 = 50000;
				calcVal = 15;
			}

			connection.query('UPDATE item SET pnt_sum = pnt_sum+' + calcVal + ', price_sum = price_sum+' + calcVal2 + ' WHERE id = ' + base_id, function (err, rows, fields) {
				if (err) throw err;
			});

			console.log(rows[0].n3 + " " + calcVal);
		}
	});
}

bot.onText(/refreshMerchant/i, function (message, match) {
	refreshMerchant(0);
	bot.sendMessage(message.chat.id, "Fatto!");
	return;
});

function merchantPrice(item_id) {
	const rows = connection_sync.query('SELECT id, base_sum, price_sum, name, value FROM item WHERE id = ' + item_id);

	var val = parseInt(rows[0].base_sum);
	var price_sum = parseInt(rows[0].price_sum);

	var price = val + price_sum + rows[0].value;
	var mid = price;
	price = price * (1.3 + (Math.random() * 0.6));

	return Math.round(price);
}

function refreshMerchant(player_id) {
	if (player_id == 0) {
		connection.query('SELECT id FROM merchant_offer', function (err, rows, fields) {
			if (err) throw err;

			var id = 0;
			var val = 0;
			var perc = 0;
			var price = 0;
			var name = "";
			var price_sum = 0;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				id = rows[i].id;
				connection.query('SELECT item_id FROM merchant_offer WHERE id = ' + id, function (err, rows, fields) {
					if (err) throw err;
					connection.query('SELECT id, base_sum, price_sum, name, value FROM item WHERE estimate > 0 AND id != ' + rows[0].item_id + ' AND rarity IN ("C","NC","R","UR","L","E") AND craftable = 1 AND base_sum > 0 AND price_sum > 0 ORDER BY RAND()', function (err, rows, fields) {
						if (err) throw err;
						val = parseInt(rows[0].base_sum);
						price_sum = parseInt(rows[0].price_sum);

						price = val + price_sum;// + rows[0].value;
						price = price * (1.5 + (Math.random() * 0.5));

						name = rows[0].name;
						connection.query('UPDATE merchant_offer SET item_id = ' + rows[0].id + ', price = ' + price + ' WHERE id = ' + this.id, function (err, rows, fields) {
							if (err) throw err;
						});
					}.bind({
						id: this.id
					}));
				}.bind({
					id: id
				}));
			}
			//console.log("Contrabbandiere auto per " + Object.keys(rows).length + " player");
		});
	} else {
		connection.query('SELECT item_id FROM merchant_offer WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			connection.query('SELECT id, base_sum, price_sum, name, value FROM item WHERE estimate > 0 AND id != ' + rows[0].item_id + ' AND rarity IN ("C","NC","R","UR","L","E") AND craftable = 1 AND base_sum > 0 AND price_sum > 0 ORDER BY RAND()', function (err, rows, fields) {
				if (err) throw err;
				var val = parseInt(rows[0].base_sum);
				var price_sum = parseInt(rows[0].price_sum);

				var price = val + price_sum;// + rows[0].value;
				price = price * (1.5 + (Math.random() * 0.5));

				var name = rows[0].name;
				connection.query('UPDATE merchant_offer SET item_id = ' + rows[0].id + ', price = ' + price + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
				});
			});
		});
	}
}

function calcBaseFunc(estimate) {
	var calcVal = 0;

	connection.query('UPDATE item SET base_sum = 0', function (err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT id, name, estimate, value FROM item WHERE estimate > 0 AND rarity IN ("C","NC","R","UR","L","E","U") AND craftable = 1', function (err, rows, fields) {
			if (err) throw err;
			var len = Object.keys(rows).length
			//console.log("Somma base per " + len  + " oggetti");
			for (var i = 0; i < len; i++) {
				calcBase(rows[i].id, rows[i].id, estimate);

				/*	ESCLUDE SE STESSO DAL CALCOLO, TOGLI IL COMMENTO PER INCLUDERE
				if (estimate == 0) {
					calcVal = rows[i].value;
				} else {
					calcVal = rows[i].estimate;
				}

				connection.query('UPDATE item SET base_sum = base_sum+' + calcVal + ' WHERE id = ' + rows[i].id, function(err, rows, fields) {
					if (err) throw err;
				});
				*/
			}
		});
	});
}

function calcBase(base_id, item_id, estimate = 0) {
	connection.query('SELECT I1.id As i1, I1.name As n1, I1.value As v1, I1.estimate As e1, I1.craftable As c1, I2.id As i2, I2.name As n2, I2.craftable As c2, I2.value As v2, I2.estimate As e2, I3.id As i3, I3.name As n3, I3.value As v3, I3.estimate As e3, I3.craftable As c3 FROM craft C INNER JOIN item I1 ON C.material_1 = I1.id INNER JOIN item I2 ON C.material_2 = I2.id INNER JOIN item I3 ON C.material_3 = I3.id WHERE C.material_result = ' + item_id, function (err, rows, fields) {
		if (err) throw err;

		var calcVal = 0;

		if (rows[0].c1 == 1)
			calcBase(base_id, rows[0].i1);
		else {
			if (estimate == 0)
				calcVal = rows[0].v1;
			else
				calcVal = rows[0].e1;
			connection.query('UPDATE item SET base_sum = base_sum+' + calcVal + ' WHERE id = ' + base_id, function (err, rows, fields) {
				if (err) throw err;
			});
		}
		if (rows[0].c2 == 1)
			calcBase(base_id, rows[0].i2);
		else {
			if (estimate == 0)
				calcVal = rows[0].v2;
			else
				calcVal = rows[0].e2;
			connection.query('UPDATE item SET base_sum = base_sum+' + calcVal + ' WHERE id = ' + base_id, function (err, rows, fields) {
				if (err) throw err;
			});
		}
		if (rows[0].c3 == 1)
			calcBase(base_id, rows[0].i3);
		else {
			if (estimate == 0)
				calcVal = rows[0].v3;
			else
				calcVal = rows[0].e3;
			connection.query('UPDATE item SET base_sum = base_sum+' + calcVal + ' WHERE id = ' + base_id, function (err, rows, fields) {
				if (err) throw err;
			});
		}
	});
}

function randomChest() {
	var rand = Math.round((Math.random() * 100) + 1);

	var chest1 = 100;
	var chest2 = 70;
	var chest3 = 50;
	var chest4 = 20;
	var chest5 = 10;
	var chest6 = 3;

	if (rand <= chest6)
		var rarity = 6;
	else if (rand <= chest5)
		var rarity = 5;
	else if (rand <= chest4)
		var rarity = 4;
	else if (rand <= chest3)
		var rarity = 3;
	else if (rand <= chest2)
		var rarity = 2;
	else if (rand <= chest1)
		var rarity = 1;

	return rarity;
}

function calcBar(parz, tot) {
	var perc_life = "";
	var perc = Math.round((100 / tot * parz) / 10);
	for (i = 0; i < perc; i++)
		perc_life += "‚ñ†";
	var perc2 = 10 - perc;
	for (i = 0; i < perc2; i++)
		perc_life += "‚ñ°";
	return perc_life;
}

function gnomorraGame(player_id, enemy_player_id, type) {
	connection.query('SELECT nickname, chat_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		var chat_id = rows[0].chat_id;
		var nickname = rows[0].nickname;
		connection.query('SELECT round_win, round_sel, win_streak, streak_record, game_time FROM event_gnomorra WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				bot.sendMessage(chat_id, "Non sei registrato all'evento", back);
				return;
			}
			var round_win = rows[0].round_win;
			var round_sel = rows[0].round_sel;
			var win_streak = rows[0].win_streak;
			var streak_record = rows[0].streak_record;
			var game_time = rows[0].game_time;
			if (round_sel != 0) {
				bot.sendMessage(chat_id, "Tocca al tuo avversario!", back);
				return;
			}
			connection.query('SELECT nickname, chat_id FROM player WHERE id = ' + enemy_player_id, function (err, rows, fields) {
				if (err) throw err;
				var enemy_chat_id = rows[0].chat_id;
				var enemy_nickname = rows[0].nickname;
				connection.query('SELECT round_win, round_sel, win_streak, streak_record, game_time FROM event_gnomorra WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0) {
						bot.sendMessage(chat_id, "L'avversario non √® registrato all'evento", back);
						return;
					}
					var enemy_round_win = rows[0].round_win;
					var enemy_round_sel = rows[0].round_sel;
					var enemy_win_streak = rows[0].win_streak;
					var enemy_streak_record = rows[0].streak_record;
					var enemy_game_time = rows[0].game_time;

					var kb = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Carta Stropicciata üìÑ", "Katana Affilata ‚úÇÔ∏è"], ["Pietra Piccola üîò"], ["Torna al menu"]]
						}
					};

					var kb2 = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							keyboard: [["Torna alla Gnomorra Lootiana"], ["Torna al menu"]]
						}
					};

					bot.sendMessage(chat_id, "Punteggio: " + round_win + " - " + enemy_round_win + "\nCosa vuoi giocare?", kb).then(function () {
						answerCallbacks[chat_id] = function (answer) {
							var sel = 0;
							var selS = "";
							if (answer.text.toLowerCase().indexOf("carta") != -1) {
								sel = 1;
								selS = "üìÑ";
							} else if (answer.text.toLowerCase().indexOf("katana") != -1) {
								sel = 2;
								selS = "‚úÇÔ∏è";
							} else if (answer.text.toLowerCase().indexOf("pietra") != -1) {
								sel = 3;
								selS = "üîò";
							} else {
								bot.sendMessage(chat_id, "Scelta non valida, riprova", kb2);
								return;
							}

							if (sel != 0) {
								connection.query('UPDATE event_gnomorra SET round_sel = ' + sel + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;

									if (enemy_round_sel != 0) {
										var enemy_selS = "";
										if (enemy_round_sel == 1) {
											enemy_selS = "üìÑ";
										} else if (enemy_round_sel == 2) {
											enemy_selS = "‚úÇÔ∏è";
										} else if (enemy_round_sel == 3) {
											enemy_selS = "üîò";
										}

										var win = 0;	// 0 = pari, 1 = io, 2 = avversario
										if ((sel == 1) && (enemy_round_sel == 1)) {
											win = 0;
										} else if ((sel == 1) && (enemy_round_sel == 2)) {
											win = 2;
										} else if ((sel == 1) && (enemy_round_sel == 3)) {
											win = 1;
										} else if ((sel == 2) && (enemy_round_sel == 1)) {
											win = 1;
										} else if ((sel == 2) && (enemy_round_sel == 2)) {
											win = 0;
										} else if ((sel == 2) && (enemy_round_sel == 3)) {
											win = 2;
										} else if ((sel == 3) && (enemy_round_sel == 1)) {
											win = 2;
										} else if ((sel == 3) && (enemy_round_sel == 2)) {
											win = 1;
										} else if ((sel == 3) && (enemy_round_sel == 3)) {
											win = 0;
										}

										if (win == 1) {
											round_win++;
											bot.sendMessage(chat_id, "Hai scelto " + selS + ", il tuo avversario ha scelto " + enemy_selS + ".\nHai *vinto* il round!", back);
											bot.sendMessage(enemy_chat_id, "Il tuo avversario ha giocato " + selS + ", tu hai scelto " + enemy_selS + ".\nHai *perso* il round!", mark);
										} else if (win == 2) {
											enemy_round_win++;
											bot.sendMessage(chat_id, "Hai scelto " + selS + ", il tuo avversario ha scelto " + enemy_selS + ".\nHai *perso* il round!", back);
											bot.sendMessage(enemy_chat_id, "Il tuo avversario ha giocato " + selS + ", tu hai scelto " + enemy_selS + ".\nHai *vinto* il round!", mark);
										} else {
											bot.sendMessage(chat_id, "Hai scelto " + selS + ", il tuo avversario ha scelto " + enemy_selS + ".\n*Parit√†*, si rigioca!", back);
											bot.sendMessage(enemy_chat_id, "Il tuo avversario ha giocato " + selS + ", tu hai scelto " + enemy_selS + ".\n*Parit√†*, si rigioca!", mark);
											// nulla in caso di parit√†
										}

										setTimeout(function () {
											var winner = 0;
											if ((win == 1) && (round_win == 2)) {
												winner = 1;
											} else if ((win == 2) && (enemy_round_win == 2)) {
												winner = 2;
											} else if (round_win+enemy_round_win == 3) {
												if (win == 1) {
													winner = 1;
												} else if (win == 2) {
													winner = 2;
												}
											} else {
												// nulla perch√® la partita non √® terminata

												if (win == 1) {
													connection_sync.query('UPDATE event_gnomorra SET round_sel = 0, round_win = round_win+1 WHERE player_id = ' + player_id);
													connection_sync.query('UPDATE event_gnomorra SET round_sel = 0 WHERE player_id = ' + enemy_player_id);
												} else if (win == 2) {
													connection_sync.query('UPDATE event_gnomorra SET round_sel = 0 WHERE player_id = ' + player_id);
													connection_sync.query('UPDATE event_gnomorra SET round_sel = 0, round_win = round_win+1 WHERE player_id = ' + enemy_player_id);
												} else {
													connection_sync.query('UPDATE event_gnomorra SET round_sel = 0 WHERE player_id = ' + player_id);
													connection_sync.query('UPDATE event_gnomorra SET round_sel = 0 WHERE player_id = ' + enemy_player_id);
												}

												gnomorraGame(player_id, enemy_player_id, type);
											}

											// incrementa tempo ogni turno per evitare exploit
											if (game_time != null) {
												connection.query('UPDATE event_gnomorra SET game_time = DATE_ADD(NOW(), INTERVAL 10 MINUTE) WHERE player_id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											} else if (enemy_game_time != null) {
												connection.query('UPDATE event_gnomorra SET game_time = DATE_ADD(NOW(), INTERVAL 10 MINUTE) WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											}

											if (type == 1) {
												if (winner == 1) {
													bot.sendMessage(chat_id, "Hai vinto due round su tre, hai vinto la partita di allenamento!", kb2);
													bot.sendMessage(enemy_chat_id, "Il tuo avversario ha vinto due round su tre, hai perso la partita di allenamento!", kb2);
													connection.query('UPDATE event_gnomorra SET enemy_id = NULL, round_win = 0, round_sel = 0, game_time = NULL, type = 0, practice_limit = practice_limit+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
													});
													connection.query('UPDATE event_gnomorra SET enemy_id = NULL, round_win = 0, round_sel = 0, game_time = NULL, type = 0, practice_limit = practice_limit+1 WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
														if (err) throw err;
													});
												} else if (winner == 2) {
													bot.sendMessage(chat_id, "Hai perso due round su tre, hai perso la partita di allenamento!", kb2);
													bot.sendMessage(enemy_chat_id, "Il tuo avversario ha perso due round su tre, hai vinto la partita di allenamento!", kb2);
													connection.query('UPDATE event_gnomorra SET enemy_id = NULL, round_win = 0, round_sel = 0, game_time = NULL, type = 0, practice_limit = practice_limit+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
													});
													connection.query('UPDATE event_gnomorra SET enemy_id = NULL, round_win = 0, round_sel = 0, game_time = NULL, type = 0, practice_limit = practice_limit+1 WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
														if (err) throw err;
													});
												}
											} else {
												if (winner == 1) {
													bot.sendMessage(chat_id, "Hai vinto due round su tre, hai vinto la partita!", kb2);
													bot.sendMessage(enemy_chat_id, "Il tuo avversario ha vinto due round su tre, hai perso la partita!", kb2);
													connection.query('UPDATE event_gnomorra SET win = win+1, win_streak = win_streak+1, enemy_id = NULL, round_win = 0, round_sel = 0, game_time = NULL, battle_limit = battle_limit+1, type = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
													});
													connection.query('UPDATE event_gnomorra SET lose = lose+1, win_streak = 0, enemy_id = NULL, round_win = 0, round_sel = 0, game_time = NULL, battle_limit = battle_limit+1, type = 0 WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
														if (err) throw err;
													});
												} else if (winner == 2) {
													bot.sendMessage(chat_id, "Hai perso due round su tre, hai perso la partita!", kb2);
													bot.sendMessage(enemy_chat_id, "Il tuo avversario ha perso due round su tre, hai vinto la partita!", kb2);
													connection.query('UPDATE event_gnomorra SET lose = lose+1, win_streak = 0, enemy_id = NULL, round_win = 0, round_sel = 0, game_time = NULL, battle_limit = battle_limit+1, type = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
														if (err) throw err;
													});
													connection.query('UPDATE event_gnomorra SET win = win+1, win_streak = win_streak+1, enemy_id = NULL, round_win = 0, round_sel = 0, game_time = NULL, battle_limit = battle_limit+1, type = 0 WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
														if (err) throw err;
													});
												}

												if (winner > 0) {
													var chest = 0;
													if (winner == 1) {
														chest = gnomorraReward(win_streak, 6);
														if (win_streak+1 > streak_record) {
															connection.query('UPDATE event_gnomorra SET streak_record = ' + (win_streak+1) + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													} else {
														chest = gnomorraReward(enemy_win_streak, 6);
														if (enemy_win_streak+1 > enemy_streak_record) {
															connection.query('UPDATE event_gnomorra SET streak_record = ' + (enemy_win_streak+1) + ' WHERE player_id = ' + enemy_player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													}

													chest += 2;

													if (chest == 7)
														chest = 9;

													connection.query('SELECT name FROM chest WHERE id = ' + chest, function (err, rows, fields) {
														if (err) throw err;
														if (winner == 1) {
															bot.sendMessage(chat_id, "Per la tua vittoria hai ottenuto uno <b>" + rows[0].name + "</b>!", kb2);
															addChest(player_id, chest);
															console.log("Gnomorra reward: " + rows[0].name + " a " + win_streak + " per " + nickname);
														} else {
															bot.sendMessage(enemy_chat_id, "Per la tua vittoria hai ottenuto uno <b>" + rows[0].name + "</b>!", kb2);
															addChest(enemy_player_id, chest);
															console.log("Gnomorra reward: " + rows[0].name + " a " + enemy_win_streak + " per " + enemy_nickname);
														}
													});
												}
											}
										}, 300);
									} else {
										bot.sendMessage(chat_id, "Hai scelto " + selS + "! Ora √® il turno di <b>" + enemy_nickname + "</b>!", back_html);
										//bot.sendMessage(enemy_chat_id, "Il tuo avversario ha giocato, tocca a te!");
										gnomorraGame(enemy_player_id, player_id, type);
									}
								});
							}
						}
					});
				});
			});
		});
	});
}

function gnomorraReward(streak, max) {
	var z = max * (2 * ((Math.atan(streak / 4.0)) / Math.PI));
	var tot = 0;
	for (var i = 0; i < max; i++) {
		tot += Math.pow(Math.E, -((Math.pow(i - z, 2))/2));
	}
	var y = Math.random() * tot;
	tot = 0;
	for ( i = 0; i < max; i++) {
		tot += Math.pow(Math.E, -((Math.pow(i - z, 2))/2));
		if (tot >= y) {
			return i;
		}
	}
	return max-1;
}

function gnomorraStart(player_id, enemy_player_id, practice) {
	connection.query('SELECT nickname, chat_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		var chat_id = rows[0].chat_id;
		var nickname = rows[0].nickname;
		connection.query('SELECT nickname, chat_id FROM player WHERE id = ' + enemy_player_id, function (err, rows, fields) {
			if (err) throw err;
			var enemy_chat_id = rows[0].chat_id;
			var enemy_nickname = rows[0].nickname;

			var kb = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Accetta invito", "Rifiuta invito"], ["Torna al menu"]]
				}
			};

			var kb2 = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna alla Gnomorra Lootiana"], ["Torna al menu"]]
				}
			};

			connection.query('UPDATE event_gnomorra SET invite_id = ' + enemy_player_id + ', invite_time = DATE_ADD(NOW(), INTERVAL 5 MINUTE), type = ' + practice + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				if (practice == 1) {
					bot.sendMessage(chat_id, "Hai spedito un invito per una partita di allenamento a <b>" + enemy_nickname + "</b> attendi che l'accetti per iniziare la sfida (entro 5 min)", kb2);
					bot.sendMessage(enemy_chat_id, "Hai ricevuto un invito per Allenamento Gnomorra Lootiana da <b>" + nickname + "</b>, accetti?\nScade tra 5 minuti, puoi anche scrivere Accetta invito o Rifiuta invito in altre schermate.", kb);
				} else {
					bot.sendMessage(chat_id, "Hai spedito un invito per una partita a <b>" + enemy_nickname + "</b> attendi che l'accetti per iniziare la sfida (entro 5 min)", kb2);
					bot.sendMessage(enemy_chat_id, "Hai ricevuto un invito per Gnomorra Lootiana da <b>" + nickname + "</b>, accetti?\nScade tra 5 minuti, puoi anche scrivere Accetta invito o Rifiuta invito in altre schermate.", kb);
				}
			});
		});
	});
}

function getTeamMembers(answerText) {
	var query = 'LIKE "%' + answerText + '%"';
	if (answerText.indexOf("*") != -1) {
		answerText = answerText.replace("*", "");
		query = '= "' + answerText + '"';
	}

	var rows = connection_sync.query('SELECT id, name, players, max_players, slogan, boss_count, kill_num FROM team WHERE name ' + query);
	var search1 = Object.keys(rows).length;
	var res1 = rows;

	var terms = "";
	if (search1 > 1) {
		terms += "\n\n";
		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
			terms += rows[i].name + "\n";
	}

	var rows = connection_sync.query('SELECT id, name, players, max_players, slogan, boss_count, kill_num, story FROM team WHERE name LIKE "' + answerText + '"');

	var search2 = Object.keys(rows).length;
	var res2 = rows;

	if ((search1 == 0) && (search2 == 0))
		return "Il team che hai richiesto non esiste";
	if ((search1 > 1) && (search2 == 0))
		return "Troppi risultati, riprova con termini di ricerca pi√π precisi" + terms;

	if (search1 == 1)
		rows = res1;
	else
		rows = res2;

	if (rows[0].id == 1113)
		return "Non √® possibile visualizzare la lista membri di questo team";

	var slogan = "";
	if (rows[0].slogan != null)
		slogan = "Slogan: <i>" + rows[0].slogan + "</i>\n";

	var story = "";
	if (rows[0].story != null)
		story = "\n\nPergamena: <i>" + rows[0].story + "</i>\n";

	var text = "Il team <b>" + rows[0].name + "</b>:\n" + slogan + "Boss uccisi: " + formatNumber(rows[0].boss_count) + "\nAssalti: " + rows[0].kill_num + "\nMembri: " + rows[0].players + "/" + rows[0].max_players + "\n\n";

	var rows = connection_sync.query('SELECT player.nickname, player.reborn, player.exp, team_player.role FROM team_player, player WHERE player.id = team_player.player_id AND team_id = ' + rows[0].id + ' ORDER BY team_player.role = 0, team_player.role, player.reborn DESC, player.exp DESC');
	var stars = "";
	var admin = "";
	for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
		admin = "";
		if (rows[i].role == 1)
			admin = " üëë";
		else if (rows[i].role == 2)
			admin = " üî∞";
		else
			admin = " üë§";
		text += rows[i].nickname + " " + rebSym(rows[i].reborn) + " (" + Math.floor(rows[i].exp / 10) + ")" + admin + "\n";
	}
	return text + story;
}

function assaultIncrement(message, player_id, team_id) {

	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Riprendi battaglia"],["Torna al menu"]]
		}
	};

	var silent = 0;
	if (message == undefined)
		silent = 1;

	connection.query('SELECT 1 FROM assault_place_miniboost WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (silent == 0)
				bot.sendMessage(message.chat.id, "Per questo turno il tuo incremento √® gi√† attivo!", kbBack);
			return;
		}

		connection.query('SELECT place_id, role FROM assault_place_player_id WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var my_place_id = rows[0].place_id;
			if (rows[0].role == 1) {
				if (silent == 0) {	// importante che includa anche il return nel caso dell'incremento dell'eletto
					bot.sendMessage(message.chat.id, "L'incremento per l'eletto √® automatico al termine di ogni turno!", kbBack);
					return;
				}
			}

			connection.query('INSERT INTO assault_place_miniboost (team_id, place_id, player_id) VALUES (' + team_id + ',' + my_place_id + ',' + player_id + ')', function (err, rows, fields) {
				if (err) throw err;

				if (silent == 0)
					bot.sendMessage(message.chat.id, "Hai attivato l'incremento per questo turno!", kbBack);
				setAchievement(player_id, 44, 1);
				globalAchievement(player_id, 1);

				connection.query('SELECT 1 FROM assault_increment_history WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						connection.query('UPDATE assault_increment_history SET increment_count = increment_count+1 WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					} else {
						connection.query('INSERT INTO assault_increment_history (team_id, player_id, increment_count) VALUES (' + team_id + ', ' + player_id + ', 1)', function (err, rows, fields) {
							if (err) throw err;
						});
					}
				});

				connection.query('SELECT level, max_level FROM assault_place_team, assault_place WHERE assault_place.id = assault_place_team.place_id AND team_id = ' + team_id + ' AND place_id = ' + my_place_id, function (err, rows, fields) {
					if (err) throw err;

					var val = Math.round(rows[0].level*10/rows[0].max_level);
				});
			});
		});
	});
}

function mobDamage(boss_count, players_num, boss_num, mob_count, mob_turn, assault_lost, customRange) {
	var range = getRandomArbitrary(250, 1000);
	if (customRange == 1)
		range = 600;
	var mob_damage = (Math.sqrt(boss_count)+1) * (Math.sqrt(players_num)) * (boss_num/(2+Math.sqrt(assault_lost))) * range;
	mob_damage = mob_damage / (4 - mob_count);
	mob_damage = incremDamage(mob_damage, players_num, mob_turn/2);
	mob_damage = Math.round(mob_damage);
	return mob_damage;
}

function incremDamage(damage, players_num, mob_turn) {
	// Moltiplicatore danno per turni
	var mul = Math.floor(mob_turn/10);
	damage = damage*(mul*mul > 0 ? mul*mul : 1);
	return damage;
}

function saveEpic(team_id, epic_var) {
	connection.query("UPDATE assault SET epic_var = " + epic_var + " WHERE team_id = " + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
}

function generateMobWeakness(team_id, mob_cnt) {
	var place_arr = [1,2,3,4,6];
	var weak_to = 0;
	var strong_to = 0;
	var is_boss = 0;
	connection.query("SELECT boss_num FROM assault WHERE team_id = " + team_id, function (err, rows, fields) {
		if (err) throw err;
		var boss_num = rows[0].boss_num;
		connection.query("DELETE FROM assault_mob_weak WHERE team_id = " + team_id, function (err, rows, fields) {
			if (err) throw err;
			for (var i = 0; i < mob_cnt; i++) {
				if (i == mob_cnt-1)
					is_boss = 1;
				if ((boss_num == 31) && (is_boss))
					place_arr.splice(1, 1);	// rimuove la piattaforma di lancio per la fenice
				place_arr = shuffle(place_arr);
				weak_to = place_arr[0];
				strong_to = place_arr[1];
				connection.query("INSERT INTO assault_mob_weak (team_id, mob_num, place_weak, place_strong, is_boss) VALUES (" + team_id + "," + i + "," + weak_to + "," + strong_to + "," + is_boss + ")", function (err, rows, fields) {
					if (err) throw err;
				});
			}
		});
	});
}

function applyMagic(team_id, magic_type, magic_power, damage) {
	var magic_name = "";
	var magic_effect = "";
	var magic_turn = Math.round(magic_power/100);

	if (magic_type == 1) {
		magic_name = magicToName(1);
		magic_effect = magicDesc(1, magic_turn);
		connection_sync.query("UPDATE assault SET team_reduce = " + (magic_turn*2) + " WHERE team_id = " + team_id);
	} else if (magic_type == 2) {
		magic_name = magicToName(2);
		magic_effect = magicDesc(2, magic_turn);
		connection_sync.query("UPDATE assault SET mob_paralyzed = " + magic_turn + " WHERE team_id = " + team_id);
	} else if (magic_type == 3) {
		magic_name = magicToName(3);
		magic_effect = magicDesc(3, damage);
		// il calcolo lo fa fuori dalla funzione, qua stampa solo la descrizione
	} else if (magic_type == 4) {
		magic_name = magicToName(4);
		magic_effect = magicDesc(4, magic_turn, 1);
		connection_sync.query("UPDATE assault SET team_critic = " + magic_turn + " WHERE team_id = " + team_id);
	}

	return [magic_name, magic_effect, damage];
}

function finalMagic1(team_id, magic_power) {
	var magic_turn = Math.round(magic_power/100)+2;
	var magic_name = magicToName(1);
	var magic_effect = magicDesc(1, magic_turn);
	connection_sync.query("UPDATE assault SET team_reduce = " + magic_turn + " WHERE team_id = " + team_id);

	return [magic_name, magic_effect];
}

function finalMagic2(team_id, magic_power) {
	var magic_turn = Math.round(magic_power/100);
	var magic_name = magicToName(2);
	var magic_effect = magicDesc(2, magic_turn);
	connection_sync.query("UPDATE assault SET mob_paralyzed = " + magic_turn + " WHERE team_id = " + team_id);

	return [magic_name, magic_effect];
}

function finalMagic3(team_id, magic_power, damage) {
	damage = damage*(1+magic_power/200);

	var magic_name = magicToName(3);
	var magic_effect = magicDesc(3, damage);

	return [magic_name, magic_effect, damage];
}

function finalMagic4(team_id, magic_power) {
	var magic_turn = Math.round(magic_power/100);
	var magic_name = magicToName(4);
	var magic_effect = magicDesc(4, magic_turn, 2);
	connection_sync.query("UPDATE assault SET team_critic = " + magic_turn + " WHERE team_id = " + team_id);

	return [magic_name, magic_effect];
}

function magicDesc(magic_type, value, variant = 1) {
	var magic_effect = "";
	var ally = "alleati";
	if (value == 1)
		ally = "alleato";
	if (magic_type == 1)
		magic_effect = ", preparando una difesa rigenerante per <b>" + value + "</b> " + ally;
	else if (magic_type == 2)
		magic_effect = ", paralizzando il nemico per <b>" + value + "</b> " + ally;
	else if (magic_type == 3)
		magic_effect = ", incrementando il danno e infliggendo <b>" + formatNumber(value) + "</b> danni al nemico";
	else if (magic_type == 4) {
		var txt = "contro";
		if (variant == 1)
			txt = "per";
		magic_effect = ", aumentando la probabilit√† di critico " + txt + " <b>" + value + "</b> " + ally;
	}
	return magic_effect;
}

function mobKilled(team_id, team_name, final_report, is_boss, mob_count, boss_num, mob_name, mob_turn, kill_num, team_level, epic_var, epic_var_record) {	
	var kbBack2 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Torna all'assalto"],["Torna al menu"]]
		}
	};

	var lockNextBoss = 0;
	if ((is_boss) && ((boss_num+1) > (team_level*4)))
		lockNextBoss = 1;

	if ((team_level) == 7)
		lockNextBoss = 0;

	var extra = "mob";
	if (is_boss == 1)
		extra = "boss";

	final_report += "üéâ Il " + extra + " √® stato sconfitto üéâ!\n\n<b>Assegnazione delle ricompense:</b>\n";

	connection.query('SELECT level FROM team_boost WHERE team_id = ' + team_id + ' AND boost_id = 2', function (err, rows, fields) {
		if (err) throw err;

		var team_boost_money = 0;
		if (Object.keys(rows).length > 0)
			team_boost_money = (0.03 * rows[0].level);

		connection.query('SELECT level FROM team_boost WHERE team_id = ' + team_id + ' AND boost_id = 4', function (err, rows, fields) {
			if (err) throw err;

			var team_boost_chest = 0;
			if (Object.keys(rows).length > 0)
				team_boost_chest = (0.03 * rows[0].level);

			var bonus_act = 0;
			var acc_bonus = 0;

			connection.query('SELECT T2.players, T2.level FROM team T1 JOIN team T2 ON T1.child_team = T2.id WHERE T1.id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;

				//Se questa √® la madre
				if (Object.keys(rows).length > 0) {
					if (rows[0].level >= 5) {
						bonus_act = 1;
						acc_bonus = 5;
					}
				}

				connection.query('SELECT T2.players, T2.level FROM team T1 JOIN team T2 ON T1.id = T2.id WHERE T1.child_team = ' + team_id, function (err, rows, fields) {
					if (err) throw err;

					//Se questa √® la accademia
					if (Object.keys(rows).length > 0) {
						if ((rows[0].level >= 5) && (bonus_act == 0))
							acc_bonus = 5;
					}

					connection.query("SELECT level FROM assault_place_team WHERE team_id = " + team_id + " ORDER BY place_id", function (err, rows, fields) {
						if (err) throw err;

						var paPlace = 0;
						var placeAvg = 0;
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							paPlace += rows[i].level*5;
							placeAvg += rows[i].level;
						}
						placeAvg = Math.round(placeAvg/Object.keys(rows).length);

						connection.query('SELECT P.id, P.chat_id, P.reborn, APT.level, TP.suspended, P.boost_id, P.boost_mission, P.global_end, T.boost_id As team_boost_id, kill_streak FROM team_player TP, assault_place_player_id APP, player P, assault_place_team APT, team T WHERE TP.team_id = T.id AND TP.player_id = P.id AND APT.place_id = APP.place_id AND APP.player_id = P.id AND APT.team_id = APP.team_id AND APP.team_id = ' + team_id + ' ORDER BY APP.id', function (err, rows, fields) {
							if (err) throw err;

							var place_text = "";
							var money = 0;
							var paPnt = 0;
							var exp = 0;
							var chest1 = 0;
							var chest2 = 0;
							var chest3 = 0;
							var chest4 = 0;
							var chest5 = 0;
							var chest6 = 0;
							var chest7 = 0;
							var chest8 = 0;
							var chest9 = 0;
							var capsule = 0;

							if (is_boss == 1)
								paPnt = 50;
							else
								paPnt = 10;
							if (((lockNextBoss == 1) || (boss_num == 31)) && (is_boss == 1)) {
								paPnt += paPlace;
								place_text = " (" + paPlace + " per le postazioni rimaste)";
							}
							paPnt += acc_bonus;

							var paUpd = paPnt;
							var paView = paPnt;

							var reward = "";
							var boss_molt = (1+boss_num/10);
							var randProb = 0;

							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].suspended == 1) {
									bot.sendMessage(rows[i].chat_id, final_report + "Nessuna ricompensa a causa della sospensione", kbBack2);
									continue;
								}

								// reset
								reward = "";
								money = 0;
								exp = 0;
								chest1 = 0;
								chest2 = 0;
								chest3 = 0;
								chest4 = 0;
								chest5 = 0;
								chest6 = 0;
								chest7 = 0;
								chest8 = 0;
								chest9 = 0;
								capsule = 0;
								paView = paPnt;

								var ability = connection_sync.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + rows[i].id + ' AND ability_id = 12');

								// calcoli ricompense
								money = 100000*(1+boss_num)
								if (!is_boss)
									money = money/(4-mob_count);
								if (rows[i].team_boost_id == 2)	// boost temporaneo monete
									money += money*0.5;
								money += money*team_boost_money;
								if (Object.keys(ability).length > 0)
									money += money*((ability[0].ability_level*ability[0].val)/100);
								money = Math.round(money);

								exp = 10;
								if (is_boss == 1)
									exp = 20;

								chest1 = 1.1*placeAvg*boss_molt;
								chest2 = 0.9*placeAvg*boss_molt;
								chest3 = 0.7*placeAvg*boss_molt;
								chest4 = 0.5*placeAvg*boss_molt;
								chest5 = 0.3*placeAvg*boss_molt;
								chest6 = 0.1*placeAvg*boss_molt;

								chest1 += chest1*team_boost_chest;
								chest2 += chest2*team_boost_chest;
								chest3 += chest3*team_boost_chest;
								chest4 += chest4*team_boost_chest;
								chest5 += chest5*team_boost_chest;
								chest6 += chest6*team_boost_chest;

								chest1 = Math.round(chest1);
								chest2 = Math.round(chest2);
								chest3 = Math.round(chest3);
								chest4 = Math.round(chest4);
								chest5 = Math.round(chest5);
								chest6 = Math.round(chest6);

								/*
								if (rows[i].global_end == 1) {
									paUpd += 7;
									paView += 7;
								}
								*/

								if (is_boss == 1) {
									randProb = Math.random()*100;
									if (rows[i].boost_id == 5) {
										randProb -= 5;	// ridurre perch√® cos√¨ aumenta probabilit√†
										setBoost(rows[i].id, rows[i].boost_mission, rows[i].boost_id);
									}
									if (randProb <= 1)
										capsule = 1;
									randProb = Math.random()*100;
									if (boss_num > randProb)
										chest7 = Math.round(Math.random()+1);
									if (boss_num == 31)
										chest7 += 3;
								}

								/*
								if (rows[i].global_end == 1) {
									chest1 = chest1*2;
									chest2 = chest2*2;
									chest3 = chest3*2;
									chest4 = chest4*2;
									chest5 = chest5*2;
									chest6 = chest6*2;
									chest7 = chest7*2;
									chest8 = chest8*2;
									chest9 = chest9*2;
								}
								*/

								/*
								if (rows[i].global_end == 1)
									chest7 = 0;
								*/

								// costruzione testo e consegna
								// console.log("paView " + paView);
								reward += "> <b>" + paView + "</b> ü¶ã" + place_text + "\n\n";
								if (exp > 0) {
									reward += "> <b>" + exp + "</b> exp\n";
									setExp(rows[i].id, exp);
								}
								if (chest1 > 0) {
									addChest(rows[i].id, 1, chest1);
									reward += "> <b>" + chest1 + "</b> Scrigni di Legno\n";
								}
								if (chest2 > 0) {
									addChest(rows[i].id, 2, chest2);
									reward += "> <b>" + chest2 + "</b> Scrigni di Ferro\n";
								}
								if (chest3 > 0) {
									addChest(rows[i].id, 3, chest3);
									reward += "> <b>" + chest3 + "</b> Scrigni Preziosi\n";
								}
								if (chest4 > 0) {
									addChest(rows[i].id, 4, chest4);
									reward += "> <b>" + chest4 + "</b> Scrigni di Diamante\n";
								}
								if (chest5 > 0) {
									addChest(rows[i].id, 5, chest5);
									reward += "> <b>" + chest5 + "</b> Scrigni Leggendari\n";
								}
								if (chest6 > 0) {
									addChest(rows[i].id, 6, chest6);
									reward += "> <b>" + chest6 + "</b> Scrigni Epici\n";
								}
								if (chest7 > 0) {
									addChest(rows[i].id, 7, chest7);
									reward += "> <b>" + chest7 + "</b> Scrigni Capsula\n";
								}
								if (chest8 > 0) {
									addChest(rows[i].id, 8, chest8);
									reward += "> <b>" + chest8 + "</b> Scrigni Mistici\n";
								}
								if (chest9 > 0) {
									addChest(rows[i].id, 9, chest9);
									reward += "> <b>" + chest9 + "</b> Scrigni Scaglia\n";
								}

								if (money > 0) {
									connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + rows[i].id, function (err, rows, fields) {
										if (err) throw err;
									});
									reward += "> <b>" + formatNumber(money) + "</b> ¬ß\n";
								}

								if (capsule > 0) {
									addItem(rows[i].id, 169);
									reward += "> <b>" + capsule + "</b> Capsula di Antimateria\n";
								}

								/*
								if (team_id == 1113)
									reward += "\nEpicit√†: " + epic_var + "\n";
								*/

								bot.sendMessage(rows[i].chat_id, final_report + reward, kbBack2);
								setAchievement(rows[i].id, 19, 1);

								if ((boss_num == 31) && (is_boss == 1) && (lockNextBoss == 0)) {
									if (rows[i].kill_streak+1 >= 3) {
										connection.query('UPDATE player SET kill_streak_ok = 1 WHERE id = ' + rows[i].id, function (err, rows, fields) {
											if (err) throw err;
										});
									}
									connection.query('UPDATE team_player SET kill_streak = kill_streak+1 WHERE player_id = ' + rows[i].id, function (err, rows, fields) {
										if (err) throw err;
									});
								}

								if ((is_boss == 0) && (rows[i].reborn > 2)){
									var card = connection_sync.query('SELECT id, rarity FROM card_list WHERE name = "' + mob_name + '"');
									if (Object.keys(card).length == 0) {
										var randVal = Math.random()*100;
										if (randVal < 50) {
											var card_rarity = generateCardRarity();
											var max = connection_sync.query('SELECT MAX(id) As mx FROM card_list');
											var new_id = (max[0].mx+1);
											if (max == 4500)
												console.log("Limite 4500 figurine raggiunto, salto la creazione di nuove");
											else {
												connection_sync.query('INSERT INTO card_list (id, name, rarity) VALUES (' + new_id + ', "' + mob_name + '", ' + card_rarity + ')');
												console.log("Figurina creata: " + mob_name + " (" + card_rarity + ") [" + new_id + "] da utente " + rows[i].id);

												connection_sync.query('INSERT INTO card_inventory (player_id, card_id) VALUES (' + rows[i].id + ', ' + new_id + ')');

												bot.sendMessage(rows[i].chat_id, "Hai creato ed ottenuto la figurina üÉè *" + mob_name + " (" + card_rarity + ")*! Creane altre per ampliare la collezione!", mark);
											}
										}
									} else {
										var tot = connection_sync.query('SELECT COUNT(id) As cnt FROM card_list');
										var have_tot = connection_sync.query('SELECT COUNT(id) As cnt FROM card_inventory WHERE quantity > 0 AND player_id = ' + rows[i].id);

										var randVal = Math.random()*100;
										var prob = (100-card[0].rarity*10)*0.5;	// 1 => 45, 9 => 5
										if (prob == 0)
											prob = 1;
										if (randVal < prob) {
											var have = connection_sync.query('SELECT COUNT(id) As cnt FROM card_inventory WHERE player_id = ' + rows[i].id + ' AND card_id = ' + card[0].id);
											if (have[0].cnt == 0)
												connection_sync.query('INSERT INTO card_inventory (player_id, card_id, quantity) VALUES (' + rows[i].id + ', ' + card[0].id + ', 1)');
											else
												connection_sync.query('UPDATE card_inventory SET quantity = quantity+1 WHERE player_id = ' + rows[i].id + ' AND card_id = ' + card[0].id);
											// console.log("Figurina ottenuta: " + mob_name);

											bot.sendMessage(rows[i].chat_id, "Hai trovato la figurina üÉè *" + mob_name + " (" + card[0].rarity + ")*! Ne possiedi " + (have_tot[0].cnt+1) + "/" + tot[0].cnt, mark);
										}
									}
								}
							}

							//console.log("paUpd " + paUpd);
							connection.query('UPDATE team SET point = point+' + paUpd + ' WHERE id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;
							});
							if (is_boss == 1) {
								connection.query('UPDATE team SET boss_count = boss_count+1 WHERE id = ' + team_id, function (err, rows, fields) {
									if (err) throw err;
								});
							}
						});

						if (is_boss) {
							if (lockNextBoss == 1) {
								connection.query('SELECT chat_id FROM assault_place_player_id APP, player WHERE APP.player_id = player.id AND APP.team_id = ' + team_id + ' ORDER BY APP.id', function (err, rows, fields) {
									if (err) throw err;

									for (var i = 0, len = Object.keys(rows).length; i < len; i++)
										bot.sendMessage(rows[i].chat_id, "üéâüéâ Il team ha completato con successo l'Assalto Parziale! üéâüéâ\n\nL'assalto non √® stato contrassegnato come completato nel conteggio, espandi prima il team per proseguire!", kbBack2);

									assaultEnd(team_id, 1);
								});
							} else if (boss_num == 31) {
								if (epic_var > epic_var_record)
									epic_var_record = epic_var;

								connection.query('SELECT epic_var_record, DATEDIFF(CURDATE(), CAST(epic_var_record_time As date)) As diff FROM config', function (err, rows, fields) {
									if (err) throw err;
									if (epic_var > rows[0].epic_var_record * (1-0.03*rows[0].diff)) {
										var turns = "un'intensa";
										if (mob_turn > 5)
											turns = "una lunga";
										bot.sendMessage("@LootEpic", "<b>Un nuovo epico scontro ha diffuso un eco nelle terre di Lootia...</b>\nIl team <b>" + team_name + "</b> ha sconfitto clamorosamente <b>" + mob_name + "</b> dopo " + turns + " battaglia!\n\n<i>Le prodi gesta rimarranno scritte nella storia</i>", html);
										connection.query('UPDATE config SET epic_var_record_time = NOW(), epic_var_record = ' + epic_var, function (err, rows, fields) {
											if (err) throw err;
										});
									}
								});

								connection.query('UPDATE assault SET completed = completed+1, phase = 0, time_end = DATE_ADD(NOW(), INTERVAL 1 DAY), mob_name = NULL, mob_life = 0, mob_total_life = 0, mob_paralyzed = 0, mob_critic = 0, mob_count = 0, mob_turn = 0, team_paralyzed = 0, team_critic = 0, team_reduce = 0, refresh_mob = 0, is_boss = 0, boss_num = 1, epic_var = 0, epic_var_record = ' + epic_var_record + ', lock_time_end = NULL, elected_lock_time_end = NULL, weak_unlocked = 0, weak_time_end = NULL, expire_notify = 0 WHERE team_id = ' + team_id, function (err, rows, fields) {
									if (err) throw err;

									connection.query('SELECT P.id, P.chat_id FROM assault_place_player_id APP, player P WHERE APP.player_id = P.id AND APP.team_id = ' + team_id + ' ORDER BY APP.id', function (err, rows, fields) {
										if (err) throw err;

										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											bot.sendMessage(rows[i].chat_id, "üéâüéâ Il team ha completato con successo l'Assalto n. " + (kill_num+1) + "! üéâüéâ", kbBack2);
										}

										connection.query('UPDATE team SET kill_num = kill_num+1 WHERE id = ' + team_id, function (err, rows, fields) {
											if (err) throw err;
										});

										assaultEnd(team_id, 1, 1);
									});
								});
							} else {
								connection.query('UPDATE assault SET phase = 3, mob_name = NULL, mob_life = 0, mob_total_life = 0, mob_paralyzed = 0, mob_critic = 0, mob_count = 0, mob_turn = 0, team_paralyzed = 0, team_critic = 0, team_reduce = 0, refresh_mob = 0, is_boss = 0, boss_num = boss_num+1, epic_var = 0, lock_time_end = NULL, elected_lock_time_end = NULL, weak_unlocked = 0, weak_time_end = NULL WHERE team_id = ' + team_id, function (err, rows, fields) {
									if (err) throw err;

									generateMobWeakness(team_id, 4);
								});
							}

							connection.query('UPDATE team SET boost_id = 0 WHERE id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;
							});
						} else {
							connection.query('UPDATE assault SET refresh_mob = 1, mob_count = mob_count+1, mob_name = NULL, mob_life = 0, mob_total_life = 0, mob_paralyzed = 0, mob_critic = 0, mob_turn = 0, team_paralyzed = 0, team_critic = 0, team_reduce = 0, epic_var = ' + epic_var + ', lock_time_end = NULL, elected_lock_time_end = NULL WHERE team_id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;
							});
						}

						repairWall(team_id);

						connection.query('DELETE FROM assault_place_miniboost WHERE team_id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
						});
					});
				});
			});
		});
	});
}

function playerKilled(team_id, player_id, place_id, is_boss) {
	connection_sync.query("UPDATE assault_place_player_id SET killed = 1 WHERE player_id = " + player_id);
	var rand = Math.random()*100;
	var prob = 20;
	if (((is_boss == 0) && (rand <= prob)) || ((is_boss == 1) && (rand <= (prob+30)))) {
		var rows = connection_sync.query("SELECT level, active FROM assault_place_team WHERE place_id = " + place_id + " AND team_id = " + team_id);
		if ((rows[0].level > 1) && (rows[0].active == 1)) {
			connection_sync.query("UPDATE assault_place_team SET level = level-1 WHERE level > 1 AND place_id = " + place_id + " AND team_id = " + team_id);
			var rows = connection_sync.query("SELECT id, name FROM assault_place WHERE id = " + place_id);
			return "\nLa postazione " + assaultEmojiList[rows[0].id-1] + " <b>" + rows[0].name + "</b> √® retrocessa di un livello!";
		}
	}
	return "";
}

function checkAllKilled(team_id) {
	var players = connection_sync.query("SELECT 1 FROM assault_place_player_id WHERE killed = 0 AND place_id IN (5,3,4,1,6) AND team_id = " + team_id);
	if (Object.keys(players).length == 0)
		return 1;
	else
		return 0;
}

function removeFromAssault(player_id) {
	connection.query('DELETE FROM assault_place_player_id WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_place_magic WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_place_cons WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_place_miniboost WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_increment_history WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
	});
}

function assaultEnd(team_id, nolost = 0, clearVars = 1) {

	// aggiorna anche in sciogli team

	connection.query('DELETE FROM assault_place_team WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_place_player_id WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_place_magic WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_place_item WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_place_cons WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_mob_weak WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_place_miniboost WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM assault_increment_history WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});

	var text = "lost = lost+1, ";
	if (nolost == 1)
		text = "";

	if (clearVars == 1) {
		connection.query('UPDATE assault SET phase = 0, time_end = NULL, time_wait_end = NULL, ' + text + 'mob_name = NULL, mob_life = 0, mob_total_life = 0, mob_paralyzed = 0, mob_critic = 0, mob_count = 0, mob_turn = 0, team_paralyzed = 0, team_critic = 0, team_reduce = 0, refresh_mob = 0, is_boss = 0, boss_num = 1, epic_var = 0, lock_time_end = NULL, elected_lock_time_end = NULL, weak_time_end = NULL, weak_unlocked = 0 WHERE team_id = ' + team_id, function (err, rows, fields) {
			if (err) throw err;
		});
	}
}

function repairWall(team_id) {
	connection.query('SELECT life, total_life FROM assault_place_team WHERE place_id = 5 AND team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;

		if ((Object.keys(rows).length > 0) && (rows[0].life < rows[0].total_life)) {
			var refill = rows[0].total_life*0.5;
			if (rows[0].life < refill) {
				rows[0].life = refill;
				connection.query('UPDATE assault_place_team SET life = ' + rows[0].life + ' WHERE place_id = 5 AND team_id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
}

function getPlayerDamage(exp, weapon, weapon_enchant, charm_id, power_dmg, class_id, reborn) {
	var danno = Math.round(Math.random() * (exp / 15 + weapon) + weapon) + weapon_enchant + power_dmg;

	if (charm_id == 62)
		danno += 10;
	else if (charm_id == 184)
		danno += 25;
	else if (charm_id == 188)
		danno += 30;
	else if (charm_id == 698)
		danno += 50;

	if ((class_id == 8) && (reborn == 2))
		danno += danno * 0.10;
	else if ((class_id == 8) && (reborn == 3))
		danno += danno * 0.15;
	else if ((class_id == 8) && (reborn == 4))
		danno += danno * 0.17;
	else if ((class_id == 8) && (reborn == 5))
		danno += danno * 0.30;

	if (crazyMode == 1)
		danno = danno * 2;

	danno = parseInt(danno);

	return danno;
}

function getPlayerDefence(weapon2, weapon3, weapon_enchant, weapon2_enchant, weapon3_enchant, exp, power_def) {
	var defence = 0;
	if (weapon2 < 0) {
		var defence = Math.abs(weapon2) + Math.abs(weapon3) + weapon2_enchant + weapon3_enchant;
		defence += Math.round(Math.random() * ((exp / 10 + defence) / 2));
	}
	defence = parseInt(defence+power_def);

	return defence;
}

function getPlayerCritics(player_id, weapon_crit, weapon2_crit, weapon3_crit, charm_id, power_weapon, power_armor, power_shield, class_id, reborn) {
	var critical = parseInt(weapon_crit);
	var critical_armor = parseInt(weapon2_crit);
	var critical_shield = parseInt(weapon3_crit);

	critical += power_weapon;
	critical_armor += power_armor;
	critical_shield += power_shield;

	if (charm_id == 404)
		critical += 6;
	if (charm_id == 493)
		critical += 2;
	if (charm_id == 494)
		critical += 4;
	if (charm_id == 495)
		critical_armor += 3;
	if (charm_id == 496)
		critical_shield += 3;
	if (charm_id == 696) {
		critical += 5;
		critical_armor += 5;
		critical_shield += 3;
	}
	if ((class_id == 2) && (reborn == 3))
		critical_armor += 5;
	if ((class_id == 2) && (reborn >= 4)) {
		critical_armor += 7;
		critical_shield += 7;
	}
	if ((class_id == 4) && (reborn == 3)) {
		critical += 2;
		critical_armor += 2;
		critical_shield += 2;
	}
	if ((class_id == 4) && (reborn >= 4)) {
		critical += 7;
		critical_armor += 7;
		critical_shield += 7;
	}
	if ((class_id == 5) && (reborn == 3))
		critical_shield += 4;
	if ((class_id == 5) && (reborn >= 4))
		critical_shield += 8;
	if ((class_id == 6) && (reborn == 3))
		critical_armor += 2;
	if ((class_id == 6) && (reborn == 3))
		critical_shield += 2;
	if ((class_id == 6) && (reborn >= 4))
		critical_armor += 7;
	if ((class_id == 6) && (reborn >= 4))
		critical_shield += 7;
	if ((class_id == 6) && (reborn == 5))
		critical_armor += 7;
	if ((class_id == 6) && (reborn == 5))
		critical_shield += 7;
	if ((class_id == 8) && (reborn == 3))
		critical_shield += 5;
	if ((class_id == 8) && (reborn >= 4))
		critical_shield += 7;
	if ((class_id == 8) && (reborn == 5))
		critical += 10;
	if ((class_id == 9) && (reborn == 3)) {
		critical += 2;
		critical_shield += 2;
	}
	if ((class_id == 9) && (reborn >= 4)) {
		critical += 7;
		critical_shield += 7;
	}

	var rows = connection_sync.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 1');

	if (Object.keys(rows).length > 0) {
		abBonus = rows[0].ability_level * rows[0].val;
		critical += abBonus;
		critical_armor += abBonus;
		critical_shield += abBonus;
	}

	return [critical, critical_armor, critical_shield];
}

function getPlayerDragon(player_id, class_id, reborn, charm_id) {
	var danno = 0;
	var defence = 0;
	var dragon_crit = 0;
	var critical = 0;
	var combat = 0;

	var combat_query = connection_sync.query('SELECT combat FROM dragon_top_rank WHERE player_id = ' + player_id);
	if (Object.keys(combat_query).length > 0)
		combat = combat_query[0].combat;

	var power_dragon = connection_sync.query('SELECT power_dragon_dmg, power_dragon_def, power_dragon_crit FROM player WHERE id = ' + player_id);
	var power_dragon_dmg = power_dragon[0].power_dragon_dmg;
	var power_dragon_def = power_dragon[0].power_dragon_def;
	var power_dragon_crit = power_dragon[0].power_dragon_crit;

	var rows = connection_sync.query('SELECT damage, critical, defence, claws, saddle, life, sleep_h FROM dragon WHERE player_id = ' + player_id);
	if ((Object.keys(rows).length > 0) && (combat == 0)) {
		if ((rows[0].life > 0) || ((rows[0].life == 0) && (rows[0].sleep_h > 0))) {
			if ((class_id == 7) && (reborn > 1) && (reborn == 5))
				rows[0].claws += rows[0].claws * 1;
			else if ((class_id == 7) && (reborn > 1))
				rows[0].claws += rows[0].claws * 0.5;
			if ((class_id == 7) && (reborn > 1) && (reborn == 5))
				rows[0].saddle += rows[0].saddle * 1;
			else if ((class_id == 7) && (reborn > 1))
				rows[0].saddle += rows[0].saddle * 0.5;

			rows[0].damage += power_dragon_dmg;
			rows[0].defence += power_dragon_def;
			rows[0].critical += power_dragon_crit;

			danno += parseInt(rows[0].damage);
			danno += parseInt(rows[0].claws);
			defence += parseInt(rows[0].defence);
			defence += parseInt(rows[0].saddle);
			var dragon_crit = rows[0].critical;
			if (charm_id == 602) {
				danno += 25;
				dragon_crit += 10;
			}
			if (charm_id == 695) {
				danno += 30;
				dragon_crit += 15;
			}

			if ((class_id == 7) && (reborn == 3))
				dragon_crit += 5;
			if ((class_id == 7) && (reborn >= 4))
				dragon_crit += 7;
			if ((class_id == 7) && (reborn == 5))
				critical += dragon_crit / 2;
		}
	}

	return [danno, defence, critical];
}

function hasDuplicates(array) {
	var valuesSoFar = Object.create(null);
	for (var i = 0; i < array.length; ++i) {
		var value = array[i];
		if (value in valuesSoFar)
			return true;
		valuesSoFar[value] = true;
	}
	return false;
}

function truncate(text, maxlen) {
	var len = Object.keys(text).length;
	if (len > maxlen)
		text = text.substr(0, maxlen) + "...";
	return text;
}

function idToClass(classId) {
	const rows = connection_sync.query("SELECT name FROM class WHERE id = " + classId);
	return rows[0].name;
}

function esitoScontro(message, dragon_level, enemy_dragon_level, dragon_arms_id, player_id, enemy_dragon_name, rank, chat_id2) {
	var money = 0;
	var chest = 1;
	var randM = Math.random() * 100;
	var bonus_money = "";
	if (randM < 30) {
		money = dragon_level * getRandomArbitrary(15, 30);
		money = Math.round(money);
		bonus_money = " (Bonus: " + formatNumber(money) + " ¬ß)";
	}

	if (dragon_level > (enemy_dragon_level + 50))
		chest = 0;

	if (dragon_arms_id == 714) {
		var randS = Math.random() * 100;
		if (randS < 50)
			chest++;
	}

	var extra = "";
	if (chest == 1) {
		extra = " ed uno Scrigno Scaglia!";
		addChest(player_id, 9);
	} else if (chest > 1) {
		extra = " e " + chest + " Scrigni Scaglia!";
		addChest(player_id, 9, chest);
	}

	connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
	});

	bot.sendMessage(message.chat.id, "Hai sconfitto <b>" + enemy_dragon_name + "</b>, hai ottenuto " + rank + " √ê" + extra + bonus_money, kbBack);
	bot.sendMessage(chat_id2, "Il tuo drago √® stato sconfitto nella vetta da " + dragon_name + "! Fallo riposare per tornare a combattere!");
}

function progressBar(dragon_life, dragon_total_life) {
	var perc_life = "";
	var perc = Math.round((100 / dragon_total_life * dragon_life) / 10);
	for (i = 0; i < perc; i++)
		perc_life += "‚ñ†";
	var perc2 = 10 - perc;
	for (i = 0; i < perc2; i++)
		perc_life += "‚ñ°";
	return perc_life;
}

function dragonToId(type) {
	if (type == "dei Mari")
		return 1;
	else if (type == "delle Montagne")
		return 2;
	else if (type == "Infernale")
		return 3;
	else if (type == "dell'Oscurit√†")
		return 4;
	else if (type == "dei Cieli")
		return 5;
	else if (type == "dei Ghiacci")
		return 6;
}

function magicToName(type) {
	if (type == 1)
		return "Furia dei Mari";
	else if (type == 2)
		return "Tempesta Folgorante";
	else if (type == 3)
		return "Impeto di Fiamme";
	else if (type == 4)
		return "Ira Astrale";
}

function typeWeak(type1, type2, isMove = 0, enemy = 0) {
	var weak = [];

	weak["myDmg"] = 0;
	weak["enemyDmg"] = 0;

	if ((type1 == 1) && (type2 == 3)) { // Abissale > Infernale
		if (enemy == 0)
			weak["myDmg"] = 0.1;
		else
			weak["enemyDmg"] = 0.1;
	}
	if ((type1 == 3) && (type2 == 6)) { // Infernale > Glaciale
		if (enemy == 0)
			weak["myDmg"] = 0.1;
		else
			weak["enemyDmg"] = 0.1;
	}
	if ((type1 == 6) && (type2 == 5)) { // Glaciale > Celeste
		if (enemy == 0)
			weak["myDmg"] = 0.1;
		else
			weak["enemyDmg"] = 0.1;
	}
	if ((type1 == 5) && (type2 == 4)) { // Celeste > Oscurit√†
		if (enemy == 0)
			weak["myDmg"] = 0.1;
		else
			weak["enemyDmg"] = 0.1;
	}
	if ((type1 == 4) && (type2 == 2)) { // Oscurit√† > Vette
		if (enemy == 0)
			weak["myDmg"] = 0.1;
		else
			weak["enemyDmg"] = 0.1;
	}
	if ((type1 == 2) && (type2 == 1)) { // Vette > Abissale
		if (enemy == 0)
			weak["myDmg"] = 0.1;
		else
			weak["enemyDmg"] = 0.1;
	}

	if (enemy == 0) {
		if (weak["myDmg"] > 0) {
			if (isMove == 1)
				weak["myDmg"] = 0.3;
		}
	} else {
		if (weak["enemyDmg"] > 0) {
			if (isMove == 1)
				weak["enemyDmg"] = 0.3;
		}
	}

	return weak;
}

function checkDragon(player_id, is_dummy = 0) {
	var target_table = "dragon";
	var where = "player_id";
	if (is_dummy == 1) {
		target_table = "dragon_dummy";
		where = "id";	// se dummy il player_id diventa il dragon id
	}

	connection.query('SELECT level, exp, evolved, saddle_id, claws_id FROM ' + target_table + ' WHERE ' + where + ' = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0)
			return;
		var dragon_evolved = rows[0].evolved;
		var dragon_level = rows[0].level;
		var dragon_exp = rows[0].exp;

		var dragon_claws_id = rows[0].claws_id;
		var dragon_saddle_id = rows[0].saddle_id;

		dragon_level = Math.floor(dragon_exp / 70);

		var sInfernale = 0;
		var sGlaciale = 0;
		var sOscuro = 0;
		var sCeleste = 0;
		var sAbissale = 0;
		var sVette = 0;

		if ((dragon_saddle_id == 213) || (dragon_saddle_id == 718) || (dragon_saddle_id == 719) || (dragon_saddle_id == 720)) //Infernale
			sInfernale++;
		else if ((dragon_saddle_id == 214) || (dragon_saddle_id == 724) || (dragon_saddle_id == 725) || (dragon_saddle_id == 726)) //Glaciale
			sGlaciale++;
		else if ((dragon_saddle_id == 215) || (dragon_saddle_id == 730) || (dragon_saddle_id == 731) || (dragon_saddle_id == 732)) //Oscuro
			sOscuro++;
		else if ((dragon_saddle_id == 216) || (dragon_saddle_id == 736) || (dragon_saddle_id == 737) || (dragon_saddle_id == 738)) //Celeste
			sCeleste++;
		else if ((dragon_saddle_id == 217) || (dragon_saddle_id == 742) || (dragon_saddle_id == 743) || (dragon_saddle_id == 744)) //Abissale
			sAbissale++;
		else if ((dragon_saddle_id == 218) || (dragon_saddle_id == 748) || (dragon_saddle_id == 749) || (dragon_saddle_id == 750)) //Vette
			sVette++;

		if ((dragon_claws_id == 207) || (dragon_claws_id == 715) || (dragon_claws_id == 716) || (dragon_claws_id == 717)) //Infernale
			sInfernale++;
		else if ((dragon_claws_id == 208) || (dragon_claws_id == 721) || (dragon_claws_id == 722) || (dragon_claws_id == 723)) //Glaciale
			sGlaciale++;
		else if ((dragon_claws_id == 209) || (dragon_claws_id == 727) || (dragon_claws_id == 728) || (dragon_claws_id == 729)) //Oscuro
			sOscuro++;
		else if ((dragon_claws_id == 210) || (dragon_claws_id == 733) || (dragon_claws_id == 734) || (dragon_claws_id == 735)) //Celeste
			sCeleste++;
		else if ((dragon_claws_id == 211) || (dragon_claws_id == 739) || (dragon_claws_id == 740) || (dragon_claws_id == 741)) //Abissale
			sAbissale++;
		else if ((dragon_claws_id == 212) || (dragon_claws_id == 745) || (dragon_claws_id == 746) || (dragon_claws_id == 747)) //Vette
			sVette++;

		var damage = 0;
		var defence = 0;
		var critical = 0;
		if (sInfernale == 2)
			damage = 25;
		else if (sGlaciale == 2)
			defence = 25;
		else if (sOscuro == 2) {
			damage = 15;
			defence = 10;
			critical = 5;
		} else if (sCeleste == 2) {
			defence = 15;
			damage = 10;
			critical = 5;
		} else if (sAbissale == 2) {
			damage = 10;
			defence = 5;
			critical = 10;
		} else if (sVette == 2) {
			damage = 5;
			defence = 10;
			critical = 10;
		}

		if (dragon_evolved == 0) {
			if (dragon_level >= 100) {
				dragon_level = 100;
				dragon_exp = 7000;
			}
		} else if (dragon_evolved == 1) {
			if (dragon_level >= 200) {
				dragon_level = 200;
				dragon_exp = 14000;
			}
		} else {
			if (dragon_level >= 300) {
				dragon_level = 300;
				dragon_exp = 21000;
			}
		}

		connection.query('UPDATE ' + target_table + ' SET level = ' + dragon_level + ', exp = ' + dragon_exp + ' WHERE ' + where + ' = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var max_life = (dragon_exp * 20) + 100000;

			connection.query('UPDATE ' + target_table + ' SET total_life = ' + max_life + ', critical = ' + critical + ', damage = ' + (dragon_level + damage) + ', defence = ' + (Math.floor(dragon_level / 2) + defence) + ' WHERE ' + where + ' = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if ((dragon_level < 15) || (is_dummy == 1)) {
					connection.query('UPDATE ' + target_table + ' SET life = total_life WHERE ' + where + ' = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
			});
		});
	});
};

function numToMana(num) {
	if (num == 1)
		return "Blu";
	else if (num == 2)
		return "Giallo";
	else
		return "Rosso";
}

function setEnchant(message, player_id, type, rand, class_id, reborn, week = 0, moon = 0) {
	setAchievement(player_id, 23, 1);

	connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 20', function (err, rows, fields) {
		if (err) throw err;

		var abBonus = 0;
		if (Object.keys(rows).length > 0)
			abBonus = parseInt(rows[0].ability_level) * rows[0].val;

		var d = new Date();
		if ((crazyMode == 1) || (week == 1))
			d.setMinutes(d.getMinutes() + (10080+abBonus));
		else
			d.setMinutes(d.getMinutes() + (2880+abBonus));
		var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
		var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear();

		var rand2 = Math.random() * 100;
		var magicN = "";
		var magic = 0;
		if (rand2 < 30) {
			magic = 1; //Blu
			magicN = "Blu";
		} else if (rand2 < 60) {
			magic = 2; //Giallo
			magicN = "Giallo";
		} else {
			magic = 3; //Rosso
			magicN = "Rosso";
		}

		var extra = "";
		extra = ", inoltre ora pu√≤ utilizzare il potere del mana *" + magicN + "*!";
		extra += "\nL'effetto terminer√† alle " + short_date;

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Torna all'incantamento"], ["Torna al menu"]]
			}
		};

		if (moon == 1) {
			kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Torna all'incantamento"], ["Torna alla ruota"], ["Torna al menu"]]
				}
			};
		}

		if (type == "Arma") {
			if ((class_id == 4) && (reborn == 5))
				rand = rand*2;
			connection.query('UPDATE player SET weapon_enchant_bonus = ' + magic + ', weapon_enchant_end = "' + long_date + '", weapon_enchant = weapon_enchant + ' + rand + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Il valore incantamento arma √® aumentato di *" + rand + "*" + extra, kbBack);
			});
		} else if (type == "Armatura") {
			if ((class_id == 5) && (reborn == 5))
				rand = rand*2;
			connection.query('UPDATE player SET weapon2_enchant_bonus = ' + magic + ', weapon2_enchant_end = "' + long_date + '", weapon2_enchant = weapon2_enchant + ' + rand + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Il valore incantamento armatura √® aumentato di *" + rand + "*" + extra, kbBack);
			});
		} else if (type == "Scudo") {
			if ((class_id == 5) && (reborn == 5))
				rand = rand*2;
			connection.query('UPDATE player SET weapon3_enchant_bonus = ' + magic + ', weapon3_enchant_end = "' + long_date + '", weapon3_enchant = weapon3_enchant + ' + rand + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Il valore incantamento scudo √® aumentato di *" + rand + "*" + extra, kbBack);
			});
		}
	});
};

function dungeonToDesc(d) {
	if (d > 10)
		return "Mostro";
	else if (d == 1)
		return "Scrigno";
	else if (d == 2)
		return "Monete";
	else if (d == 3)
		return "Trappola";
	else if (d == 4)
		return "Viandante";
	else if (d == 5)
		return "Leve";
	else if (d == 6)
		return "Persona in Pericolo";
	else if (d == 7)
		return "Vecchina";
	else if (d == 8)
		return "Pulsantiera";
	else if (d == 9)
		return "Stanza Divisa in Due";
	else if (d == 10)
		return "Spada o Bottino";
	else if (d == 0)
		return "Fontana di Mana";
	else if (d == -1)
		return "Fessura del Muro";
	else if (d == -2)
		return "Ascia Gigante";
	else if (d == -3)
		return "Tre Incisioni";
	else if (d == -4)
		return "Predone";
	else if (d == -5)
		return "Meditazione";
	else if (d == -6)
		return "Desideri";
	else if (d == -7)
		return "Dragone del Soldato";
	else if (d == -8)
		return "Stanza Vuota";
	else if (d == -9)
		return "Marinaio e Dado";
	else if (d == -10)
		return "Due Porte";
	else if (d == -11)
		return "Pozzo Ricco";
	else if (d == -12)
		return "Anziano Saggio";
	else if (d == -13)
		return "Mappatore Distratto";
	else if (d == -14)
		return "Specchio Magico";
	else if (d == -15)
		return "Alchimista dell'Ovest";
	else if (d == -16)
		return "Bombarolo";
	else if (d == -17)
		return "Stanza Esplosiva";
	else if (d == -18)
		return "Gioielliere Pazzo";
	else if (d == -19)
		return "Stanza dell'Energia";
	else if (d == -20)
		return "Mercante Draconico";
	else if (d == -21)
		return "Stanza del Cuore e dello Spirito";
	else if (d == -22)
		return "Maledizione Unna";
	else if (d == -23)
		return "Crepaccio";
	else if (d == -24)
		return "Stanza impolverata";
	else if (d == -25)
		return "Vicolo cieco";
}

function findMissing(numArray) {
	var miss = -1;
	numArray = numArray.map(Number);
	numArray = numArray.sort();
	var len = Object.keys(numArray).length;
	if (len == 0)
		return 1;
	for(var i=1;i<=len;i++) {
		if(numArray.indexOf(i) == -1) {
			miss = i;
			break;
		}
	}
	if (miss == -1)
		miss = numArray[len-1]+1;
	return miss;
};

function mapPlayerKilled(lobby_id, player_id, cause) {	
	connection.query('SELECT chat_id FROM map_lobby M, player P WHERE M.player_id = P.id AND player_id != ' + player_id + ' AND killed = 0 AND lobby_id = ' + lobby_id, function (err, rows, fields) {
		if (err) throw err;

		var text = "";
		if (cause == 1)
			text = "Un giocatore √® stato ucciso da una trappola!";
		else if (cause == 2)
			text = "Un giocatore √® stato ucciso da un altro giocatore!";
		else if (cause == 3)
			text = "Un giocatore √® stato ucciso a causa del restringimento della mappa!";

		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
			bot.sendMessage(rows[i].chat_id, text);

		// sgancio dai combattimenti me stesso ed il nemico in entrambi i sensi
		connection.query('SELECT enemy_id, match_kills FROM map_lobby WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var match_kills = rows[0].match_kills;
			if (rows[0].enemy_id != null) {
				connection.query('UPDATE map_lobby SET enemy_id = NULL, my_turn = 0, battle_timeout = NULL, battle_timeout_limit = NULL, battle_shield = 0, battle_heavy = 0 WHERE player_id = ' + rows[0].enemy_id, function (err, rows, fields) {
					if (err) throw err;
				});
			} else {
				connection.query('SELECT player_id FROM map_lobby WHERE enemy_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						connection.query('UPDATE map_lobby SET enemy_id = NULL, my_turn = 0, battle_timeout = NULL, battle_timeout_limit = NULL, battle_shield = 0, battle_heavy = 0 WHERE player_id = ' + rows[0].player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				});
			}

			// salva in history
			connection.query('SELECT id FROM map_lobby_list WHERE lobby_id = ' + lobby_id,  function (err, rows, fields) {
				if (err) throw err;

				var map_lobby_id = rows[0].id;

				connection.query('SELECT COUNT(id) As cnt FROM map_history WHERE map_lobby_id = ' + map_lobby_id,  function (err, rows, fields) {
					if (err) throw err;

					var pos = lobby_total_space-rows[0].cnt;

					connection.query('INSERT INTO map_history (map_lobby_id, player_id, position, kills) VALUES (' + map_lobby_id + ', ' + player_id + ', ' + pos + ', ' + match_kills + ')', function (err, rows, fields) {
						// if (err) throw err; // per errore duplicazione righe

						// concludi
						connection.query('UPDATE map_lobby SET killed = 1, my_turn = 0, enemy_id = NULL, battle_shield = 0, battle_heavy = 0, battle_timeout = NULL, battle_timeout_limit = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							
						});
						
					});
					
				});
				
			});
		});
	});
}

function generateMap(width, height, players) {
	var buildQnt = 3;
	var build = [4, 5, 6];
	var chestRate = 15;
	var chestEpicRate = 5;
	var trapRate = 15;
	var pulseRate = 10;
	var scrapRate = 10;

	console.log("Generazione mappa da " + width + "x" + height + " ticks");

	/* LEGENDA

	0 = vuoto
	1 = scrigno
	2 = scrigno epico
	3 = trappola
	4 = farmacia
	5 = scambio
	6 = vendita
	7 = impulso
	8 = giocatore
	9 = rottame
	10 = mappa bruciata

	*/

	// genera reticolo vuoto

	var matrix = [];
	for(i = 0; i < height; i++) {
		matrix[i] = [];
		for(j = 0; j < width; j++)
			matrix[i][j] = 0;
	}

	// genera costruzioni

	console.log("Generazione " + buildQnt + " costruzioni...");
	var index = 0;
	for(i = 0; i < buildQnt; i++) {
		index = i;
		if (build[index] == undefined)
			index -= build.length*Math.floor(i/build.length);	// serve per ricominciare i loop
		matrix = insertRandomPos(matrix, build[index], 2);
	}

	var totTicks = height*width;

	// genera scrigni

	var chestTicks = Math.round(totTicks*(chestRate/100));
	console.log("Generazione " + chestTicks + " scrigni...");
	for(i = 0; i < chestTicks; i++)
		matrix = insertRandomPos(matrix, 1, 0);

	// genera scrigni epici

	var chestEpicTicks = Math.round(totTicks*(chestEpicRate/100));
	console.log("Generazione " + chestEpicTicks + " scrigni epici...");
	for(i = 0; i < chestEpicTicks; i++)
		matrix = insertRandomPos(matrix, 2, 0);

	// genera trappole

	var trapTicks = Math.round(totTicks*(trapRate/100));
	console.log("Generazione " + trapTicks + " trappole...");
	for(i = 0; i < trapTicks; i++)
		matrix = insertRandomPos(matrix, 3, 0);

	// genera impulsi

	var pulseTicks = Math.round(totTicks*(pulseRate/100));
	console.log("Generazione " + pulseTicks + " impulsi...");
	for(i = 0; i < pulseTicks; i++)
		matrix = insertRandomPos(matrix, 7, 0);

	// genera giocatori

	console.log("Generazione " + players + " giocatori...");
	for(i = 0; i < players; i++)
		matrix = insertRandomPos(matrix, 8, 2);

	// genera rottami

	var scrapTicks = Math.round(totTicks*(scrapRate/100));
	console.log("Generazione " + scrapTicks + " rottami...");
	for(i = 0; i < scrapTicks; i++)
		matrix = insertRandomPos(matrix, 9, 0);

	console.log("Generazione completata");

	return matrix;
}

function updateMap(matrix, posY, posX, value) {
	var mapMatrix = JSON.parse(matrix);
	var widthLen = matrix[0].length;
	var heightLen = matrix.length;
	if ((posX >= 0) && (posY >= 0) && (posY <= heightLen) && (posX <= widthLen))	// se sono negativi √® per il finalPoint
		mapMatrix[posX][posY] = value;
	return JSON.stringify(mapMatrix);
}

function insertRandomPos(matrix, objId, distanceValue) {
	var randX = 0;
	var randY = 0;
	var isValid = 0;
	var exitWhile = 0;
	var widthLen = matrix[0].length-1;
	var heightLen = matrix.length-1;
	var distance = 0;
	var timeout = 0;

	while ((isValid == 0) && (exitWhile == 0)) {
		randY = Math.round(getRandomArbitrary(0, heightLen));
		randX = Math.round(getRandomArbitrary(0, widthLen));

		distance = checkDistance(matrix, objId, randX, randY, distanceValue);
		if ((matrix[randY][randX] == 0) && (distance == 1))
			isValid = 1;
		else
			isValid = 0;

		timeout++;
		if (timeout >= (widthLen*heightLen)*10)
			exitWhile = 1;
	}

	if (isValid)
		matrix[randY][randX] = objId;
	else
		console.log("Salto per mancanza di ticks dopo " + timeout + " tentativi")

	return matrix;
}

function checkDistance(matrix, objId, posY, posX, distance) {
	if (distance == 1) {
		if (isUndefined(matrix, posX-1, posY-1) == false)
			if (matrix[posX-1][posY-1] == objId)
				return 0;
		if (isUndefined(matrix, posX, posY-1) == false)
			if (matrix[posX][posY-1] == objId)
				return 0;
		if (isUndefined(matrix, posX+1, posY-1) == false)
			if (matrix[posX+1][posY-1] == objId)
				return 0;

		if (isUndefined(matrix, posX-1, posY) == false)
			if (matrix[posX-1][posY] == objId)
				return 0;
		if (isUndefined(matrix, posX+1, posY) == false)
			if (matrix[posX+1][posY] == objId)
				return 0;

		if (isUndefined(matrix, posX-1, posY+1) == false)
			if (matrix[posX-1][posY+1] == objId)
				return 0;
		if (isUndefined(matrix, posX, posY+1) == false)
			if (matrix[posX][posY+1] == objId)
				return 0;
		if (isUndefined(matrix, posX+1, posY+1) == false)
			if (matrix[posX+1][posY+1] == objId)
				return 0;
	}
	if (distance == 2) {
		if (isUndefined(matrix, posX-2, posY-2) == false)
			if (matrix[posX-2][posY-2] == objId)
				return 0;
		if (isUndefined(matrix, posX-1, posY-2) == false)
			if (matrix[posX-1][posY-2] == objId)
				return 0;
		if (isUndefined(matrix, posX, posY-2) == false)
			if (matrix[posX][posY-2] == objId)
				return 0;
		if (isUndefined(matrix, posX+1, posY-2) == false)
			if (matrix[posX+1][posY-2] == objId)
				return 0;
		if (isUndefined(matrix, posX+2, posY-2) == false)
			if (matrix[posX+2][posY-2] == objId)
				return 0;

		if (isUndefined(matrix, posX-2, posY-1) == false)
			if (matrix[posX-2][posY-1] == objId)
				return 0;
		if (isUndefined(matrix, posX-2, posY) == false)
			if (matrix[posX-2][posY] == objId)
				return 0;
		if (isUndefined(matrix, posX-2, posY+1) == false)
			if (matrix[posX-2][posY+1] == objId)
				return 0;
		if (isUndefined(matrix, posX-2, posY+2) == false)
			if (matrix[posX-2][posY+2] == objId)
				return 0;

		if (isUndefined(matrix, posX-1, posY+2) == false)
			if (matrix[posX-1][posY+2] == objId)
				return 0;
		if (isUndefined(matrix, posX, posY+2) == false)
			if (matrix[posX][posY+2] == objId)
				return 0;
		if (isUndefined(matrix, posX+1, posY+2) == false)
			if (matrix[posX+1][posY+2] == objId)
				return 0;
		if (isUndefined(matrix, posX+2, posY+2) == false)
			if (matrix[posX+2][posY+2] == objId)
				return 0;

		if (isUndefined(matrix, posX+2, posY-1) == false)
			if (matrix[posX+2][posY-1] == objId)
				return 0;
		if (isUndefined(matrix, posX+2, posY) == false)
			if (matrix[posX+2][posY] == objId)
				return 0;
		if (isUndefined(matrix, posX+2, posY+1) == false)
			if (matrix[posX+2][posY+1] == objId)
				return 0;
	}
	return 1;
}

function printMap(mapMatrix, posY, posX, pulsePosY, pulsePosX, killed, checkEnemy) {
	var text = "";
	var isEnemy = 0;
	for(i = 0; i < mapMatrix.length; i++) {
		text += "\n";
		for(j = 0; j < mapMatrix[i].length; j++) {
			isEnemy = 0;
			if ((i == posX) && (j == posY)) {
				if (killed == 0)
					text += "üìç ";
				else
					text += "üíÄ ";
			} else {
				if (mapMatrix[i][j] == 10)	// mappa bruciata
					text += mapIdToSym(mapMatrix[i][j]) + " ";
				else if ((pulsePosX != null && pulsePosY != null) && (
					((i == pulsePosX-1) && (j == pulsePosY-1)) ||
					((i == pulsePosX) && (j == pulsePosY-1)) ||
					((i == pulsePosX+1) && (j == pulsePosY-1)) ||
					((i == pulsePosX-1) && (j == pulsePosY)) ||
					((i == pulsePosX+1) && (j == pulsePosY)) ||
					((i == pulsePosX-1) && (j == pulsePosY+1)) ||
					((i == pulsePosX) && (j == pulsePosY+1)) ||
					((i == pulsePosX+1) && (j == pulsePosY+1)))) {

					for (var k = 0, len = Object.keys(checkEnemy).length; k < len; k++) {
						if ((checkEnemy[k]["posY"] == posX) && (checkEnemy[k]["posX"] == posY)) {
							text += mapIdToSym[8] + " ";
							isEnemy = 1;
						}
					}

					if (isEnemy == 0) {
						if (mapMatrix[i][j] == 8)	// posizione di partenza
							text += "‚óºÔ∏è ";
						else
							text += mapIdToSym(mapMatrix[i][j]) + " ";
					}
				} else
					text += "‚óºÔ∏è ";
			}
		}
	}

	return text;
}

function generateFinalPoints(mapMatrix) {
	var widthLen = mapMatrix[0].length;
	var heightLen = mapMatrix.length;
	var pointX = Math.round(getRandomArbitrary(widthLen/2-widthLen/4, widthLen/2+widthLen/4));
	var pointY = Math.round(getRandomArbitrary(heightLen/2-heightLen/4, heightLen/2+heightLen/4));
	console.log("finalPoints: " + pointX + " " + pointY);
	return [pointX, pointY];
}

function restrictMap(lobby_id, mapMatrix, finalPointX, finalPointY, turnNumber) {
	mapMatrix = JSON.parse(mapMatrix);
	mapArray = JSON.stringify(mapMatrix);

	var widthLen = mapMatrix[0].length;
	var heightLen = mapMatrix.length;
	var posToBurn = [];

	/*
	console.log("widthLen " + widthLen);
	console.log("heightLen " + heightLen);
	*/
	console.log("turnNumber " + turnNumber);
	console.log("finalPointX " + finalPointX);
	console.log("finalPointY " + finalPointY);

	if (turnNumber >= widthLen) {
		console.log("Salto restringimento lobby per turni massimi raggiunti");
		return;
	}
	
	// devono uscire interi per forza
	var middleX = widthLen/2;
	var middleY = heightLen/2;
	
	// quanto spostare la griglia in funzione dei finalPoint
	var factorVertical = 0;
	var factorHorizontal = 0;
	
	if ((finalPointX == middleX) && (finalPointY == middleY)) {
		// centro
		factorVertical = 0;
		factorHorizontal = 0;
	} else if ((finalPointX <= middleX) && (finalPointY >= middleY)) {
		// quadrante alto sinistra
		factorVertical = +finalPointY;
		factorHorizontal = -finalPointX;
	} else if ((finalPointX >= middleX) && (finalPointY >= middleY)) {
		// quadrante alto destra
		factorVertical = +finalPointY;
		factorHorizontal = +finalPointX;
	} else if ((finalPointX >= middleX) && (finalPointY <= middleY)) {
		// quadrante basso sinistra
		factorVertical = -finalPointY;
		factorHorizontal = +finalPointX;
	} else if ((finalPointX <= middleX) && (finalPointY <= middleY)) {
		// quadrante basso destra
		factorVertical = -finalPointY;
		factorHorizontal = -finalPointX;
	} else
		console.log("Errore, restrimento nessuna condizione");
	
	console.log("factorVertical " + factorVertical);
	console.log("factorHorizontal " + factorHorizontal);

	/*
	// orizzontali
	for(i = 0; i < widthLen; i++) {
		posToBurn.push([i+factorHorizontal, turnNumber+factorVertical]);
		posToBurn.push([i+factorHorizontal, ((heightLen-1)-turnNumber)+factorVertical]);
	}
	// verticali
	for(i = 0; i < heightLen; i++) {
		posToBurn.push([turnNumber+factorHorizontal, i+factorVertical]);
		posToBurn.push([((widthLen-1)-turnNumber)+factorHorizontal, i+factorVertical]);
	}
	*/
	
	// orizzontali
	for(i = 0; i < widthLen; i++) {
		posToBurn.push([i, turnNumber]);
		posToBurn.push([i, ((heightLen-1)-turnNumber)]);
	}
	// verticali
	for(i = 0; i < heightLen; i++) {
		posToBurn.push([turnNumber, i]);
		posToBurn.push([((widthLen-1)-turnNumber), i]);
	}

	posToBurn = multiDimensionalUnique(posToBurn);	// rimuove duplicati per evitare sdoppiamento uccisioni
	console.log(posToBurn);
	
	// applico le modifiche e incremento turno
	var tmp;
	for(i = 0; i < posToBurn.length; i++) {
		tmp = updateMap(mapArray, posToBurn[i][1], posToBurn[i][0], 10);
		mapArray = tmp;
		mapMatrix = JSON.parse(tmp);
	}

	connection.query('UPDATE map_lobby_list SET map_json = "' + mapArray + '", turn_number = turn_number+1 WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
		if (err) throw err;
	});

	// elimino tutti i giocatori vivi nelle zone bruciate
	connection.query('SELECT P.id, P.chat_id, M.posX, M.posY FROM map_lobby M, player P WHERE M.player_id = P.id AND M.killed = 0 AND lobby_id = ' + lobby_id, function (err, rows, fields) {
		if (err) throw err;
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			for(k = 0; k < posToBurn.length; k++) {
				if (rows[i].posX == posToBurn[k][1] && rows[i].posY == posToBurn[k][0]) {
					console.log("killed", rows[i].posX, rows[i].posY, posToBurn[k][1], posToBurn[k][0]);
					mapPlayerKilled(lobby_id, rows[i].id, 3);
					bot.sendMessage(rows[i].chat_id, "Sei stato ucciso a causa del restringimento della mappa!");
				}
			}
		}
	});
}

function mapIdToSym(objId) {
	var symArr = ["‚óªÔ∏è", "üí∞", "üí∞", "‚ö°Ô∏è", "üíä", "üîÅ", "üí∏", "‚ú®", "üë£", "üî©", "‚ò†Ô∏è"];
	if (symArr[objId] == undefined)
		console.log("mapIdToSym undefined: " + objId);
	return symArr[objId];
}

function isUndefined(_arr, _index1, _index2) {
	try {
		return _arr[_index1][_index2] == undefined;
	} catch(e) {
		return true;
	}
}

function getRankFileId(rank) {
	var fileid = "";
	if (rank < rankList[0])
		fileid = "CAADAgADGgADotsCAQ5SJkme2h2bAg";
	else if (rank < rankList[1])
		fileid = "CAADAgADJAADotsCAT4JAAGfG9ECkAI";
	else if (rank < rankList[2])
		fileid = "CAADAgADJQADotsCAapCRcaM7LsgAg";
	else if (rank < rankList[3])
		fileid = "CAADAgADHQADotsCAdM1n5lYdhnhAg";
	else if (rank < rankList[4])
		fileid = "CAADAgADHgADotsCARhzy43RSldJAg";
	else if (rank < rankList[5])
		fileid = "CAADAgADHwADotsCAdlRncszacM4Ag";
	else if (rank < rankList[6])
		fileid = "CAADAgADIAADotsCAUnlb5EAAUm7iwI";
	else if (rank < rankList[7])
		fileid = "CAADAgADIQADotsCAfwVvhD-OyLdAg";
	else if (rank < rankList[8])
		fileid = "CAADAgADIgADotsCAc_f5ai7tAS6Ag";
	else
		fileid = "CAADAgADIwADotsCAbPikwR4V2YHAg";

	return fileid;
}

function getRankName(rank, opt) {
	if (opt == 0) {
		var text = "";

		if (rank < rankList[0])
			text = "Esploratore Novizio";
		else if (rank < rankList[1])
			text = "Esploratore Modesto";
		else if (rank < rankList[2])
			text = "Esploratore Professionista";
		else if (rank < rankList[3])
			text = "Avventuriero Giovane";
		else if (rank < rankList[4])
			text = "Avventuriero Forestiero";
		else if (rank < rankList[5])
			text = "Avventuriero della Notte";
		else if (rank < rankList[6]) //500
			text = "Avventuriero Impavido";
		else if (rank < rankList[7]) //750
			text = "Avventuriero Eroico";
		else if (rank < rankList[8]) //1000
			text = "Eroe delle Esplorazioni";
		else
			text = "Mappatore Avanzato";

		return text;
	} else if (opt == 1) {
		var next = 0;
		for (var i = 0, len = Object.keys(rankList).length; i < len; i++) {
			if (rank < rankList[i]) {
				next = rankList[i];
				break;
			}
		}
		return next;
	}
}

function globalAchievement(player_id, value = 1) {
	connection.query('SELECT global_eventon, global_cap, global_eventwait FROM config', function (err, rows, fields) {
		if (err) throw err;
		if (rows[0].global_eventon == 1) {
			var cap = rows[0].global_cap;
			connection.query('SELECT SUM(value) As cnt FROM achievement_global', function (err, rows, fields) {
				if (err) throw err;
				if (rows[0].cnt >= cap) {
					connection.query('UPDATE config SET global_eventon = 0', function (err, rows, fields) {
						if (err) throw err;
						console.log("Fine impresa!");
					});
				} else {
					connection.query('SELECT 1 FROM achievement_global WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0) {
							connection.query('UPDATE achievement_global SET value = value+' + value + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
							});
						} else {
							connection.query('INSERT INTO achievement_global (player_id, value) VALUES (' + player_id + ', ' + value + ')', function (err, rows, fields) {
								if (err) throw err;
							});
						}
					});
				}
			});
		} else {
			if (rows[0].global_eventwait == 1) {
				//console.log("Pre-impresa +" + value);
				connection.query('SELECT 1 FROM achievement_global WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						connection.query('UPDATE achievement_global SET value = value+' + value + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					} else {
						connection.query('INSERT INTO achievement_global (player_id, value) VALUES (' + player_id + ', ' + value + ')', function (err, rows, fields) {
							if (err) throw err;
						});
					}
				});
			}
		}
	});
}

function setBoost(player_id, boost_mission, boost_id) {
	if (boost_mission - 1 == 0) {
		connection.query('UPDATE player SET boost_mission = 0, boost_id = 0 WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});
	} else {
		connection.query('UPDATE player SET boost_mission = boost_mission-1 WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});
	}
}

function getEaster() {
	var d = new Date();
	var year = d.getFullYear();
	var f = Math.floor,
		G = year % 19,
		C = f(year / 100),
		H = (C‚Äâ-‚Äâf(C / 4) - f((8 * C + 13)/25) + 19 * G + 15) % 30,
		I = H - f(H/28) * (1 - f(29/(H + 1)) * f((21-G)/11)),
		J = (year + f(year / 4) + I + 2 - C + f(C / 4)) % 7,
		L = I - J,
		month = 3 + f((L + 40)/44),
		day = L + 28 - 31 * f(month / 4);

	return [month, day];
}

function classSym(className) {
	var classSym = "üêì";
	if ((className == "Sciamano Elementalista") || (className == 2))
		classSym = "ü¶â";
	else if ((className == "Esploratore Druido") || (className == 3))
		classSym = "üêÖ";
	else if ((className == "Incantaspade") || (className == 4))
		classSym = "ü¶Ö";
	else if ((className == "Consacratore Divino") || (className == 5))
		classSym = "üïä";
	else if ((className == "Spaccateste") || (className == 6))
		classSym = "ü¶ç";
	else if ((className == "Discepolo dei Draghi") || (className == 7))
		classSym = "üê≤";
	else if ((className == "Barbaro") || (className == 8))
		classSym = "ü¶è";
	else if ((className == "Predone") || (className == 9))
		classSym = "ü¶ä";
	return classSym;
}

function rebSym(reborn) {
	var rebSym = "";
	if (reborn == 1)
		rebSym = "‚ú®";
	else if (reborn == 2)
		rebSym = "üîÜ";
	else if (reborn == 3)
		rebSym = "üí´";
	else if (reborn == 4)
		rebSym = "‚≠êÔ∏è";
	else if (reborn == 5)
		rebSym = "üåü";
	else if (reborn == 6)
		rebSym = "üí•";
	return rebSym;
}

function autoMana() {
	connection.query('SELECT mana.name, class, reborn, chat_id, nickname, player_id, rate, type, ROUND(TIMESTAMPDIFF(MINUTE,time_start,NOW())/60*rate,0) As quantity, global_end FROM event_mana_status, event_mana_zone, player, mana WHERE mana.id = event_mana_zone.type AND player.id = player_id AND event_mana_status.time_start IS NOT NULL AND event_mana_status.zone_id = event_mana_zone.id', function (err, rows, fields) {
		if (err) throw err;

		var mana_type = "";
		if (Object.keys(rows).length > 0) {
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				mana_type = 'mana_' + rows[i].type;
				if ((rows[i].class == 2) && (rows[i].reborn > 1))
					rows[i].quantity += rows[i].quantity * 0.3;
				if ((rows[i].class == 3) && (rows[i].type == 2) && (rows[i].reborn > 1))
					rows[i].quantity += rows[i].quantity * 0.5;
				if ((rows[i].class == 3) && (rows[i].type != 2) && (rows[i].reborn > 1))
					rows[i].quantity -= rows[i].quantity * 0.2;
				if ((rows[i].class == 4) && (rows[i].type == 3) && (rows[i].reborn > 1))
					rows[i].quantity += rows[i].quantity * 0.5;
				if ((rows[i].class == 4) && (rows[i].type != 3) && (rows[i].reborn > 1))
					rows[i].quantity -= rows[i].quantity * 0.2;
				if ((rows[i].class == 5) && (rows[i].type == 1) && (rows[i].reborn > 1))
					rows[i].quantity += rows[i].quantity * 1;
				if ((rows[i].class == 5) && (rows[i].type != 1) && (rows[i].reborn > 1))
					rows[i].quantity -= rows[i].quantity * 0.1;
				if ((rows[i].class == 6) && (rows[i].reborn > 1))
					rows[i].quantity -= rows[i].quantity * 0.1;

				var extra_mana = "";
				/*
				if (rows[i].global_end == 1) {
					rows[i].quantity = rows[i].quantity*2;
					extra_mana = " (aumentato grazie al bonus globale)";
				}
				*/

				rows[i].quantity = Math.floor(rows[i].quantity);

				connection.query('UPDATE event_mana_status SET ' + mana_type + ' = ' + mana_type + ' + ' + rows[i].quantity + ', zone_id = 0, time_start = NULL WHERE player_id = ' + rows[i].player_id, function (err, rows, fields) {
					if (err) throw err;
				});
				bot.sendMessage(rows[i].chat_id, "Le miniere sono state chiuse, hai ricevuto " + formatNumber(rows[i].quantity) + " Mana " + rows[i].name + "!" + extra_mana);
			}
		} else
			console.log("Nessuna miniera da terminare");
	});
};

function autoDust() {
	connection.query('SELECT chat_id, nickname, player_id, extracting FROM event_dust_status, player WHERE player.id = player_id AND extracting = 1', function (err, rows, fields) {
		if (err) throw err;

		var text = "";
		if (Object.keys(rows).length > 0) {
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				connection.query('UPDATE event_dust_status SET extracting = 0, last_update = NULL WHERE player_id = ' + rows[i].player_id, function (err, rows, fields) {
					if (err) throw err;
				});
				bot.sendMessage(rows[i].chat_id, "I Generatori di Polvere sono stati spenti!");
			}
		} else {
			console.log("Nessuna polvere da terminare");
		}
	});
};

function makeid() {
	var text = "";
	var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

	for (var i = 0; i < 10; i++)
		text += possible.charAt(Math.floor(Math.random() * possible.length));

	return text;
}

function resetAchievement() {
	connection.query('DELETE FROM achievement_daily', function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM achievement_status', function (err, rows, fields) {
		if (err) throw err;
	});
	console.log("Imprese azzerate");
};

function resetTeamMission() {
	connection.query('UPDATE team SET mission_day_count = 0', function (err, rows, fields) {
		if (err) throw err;
	});
}

function resetTeamWeekly() {
	connection.query('UPDATE team SET mission_week_count = 0, craft_week_count = 0', function (err, rows, fields) {
		if (err) throw err;
	});
}

function resetGnomorra() {
	connection.query('UPDATE event_gnomorra SET battle_limit = 0, practice_limit = 0', function (err, rows, fields) {
		if (err) throw err;
	});
}

function reloadAchievement() {
	connection.query('SELECT id, name, item_rarity, type FROM (SELECT * FROM achievement_list ORDER BY RAND()) as t WHERE id NOT IN (SELECT achievement_id FROM achievement_daily) GROUP BY type ORDER BY RAND() LIMIT 3', function (err, rows, fields) {
		if (err) throw err;

		connection.query('DELETE FROM achievement_daily', function (err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM achievement_status', function (err, rows, fields) {
			if (err) throw err;
		});

		var rarity = 0;
		var id = 0;
		var type = 0;

		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			rarity = rows[i].item_rarity;
			id = rows[i].id;
			type = rows[i].type;

			if ((rarity != 0) && (type == 12)) {
				connection.query('SELECT item.id FROM item, rarity WHERE rarity.shortname = item.rarity AND rarity.id = ' + rarity + ' AND craftable = 1 ORDER BY RAND()', function (err, rows, fields) {
					if (err) throw err;
					connection.query('INSERT INTO achievement_daily (id, achievement_id, item_id) VALUES (' + (this.i + 1) + ',' + this.id + ',' + rows[0].id + ')', function (err, rows, fields) {
						if (err) throw err;
					});
				}.bind({
					i: i,
					id: id
				}));
			} else {
				connection.query('INSERT INTO achievement_daily (id, achievement_id, item_id) VALUES (' + (i + 1) + ',' + id + ',' + rarity + ')', function (err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
};

function craftWeek() {
	connection.query('UPDATE player SET craft_week = 0', function (err, rows, fields) {
		if (err) throw err;
	});
}

function craftDay() {
	connection.query('UPDATE player SET craft_day = 0', function (err, rows, fields) {
		if (err) throw err;
	});
}

function lacrima(player_id, chat_id) {
	connection.query('SELECT id FROM artifacts WHERE player_id = ' + player_id + ' AND item_id = 614', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			connection.query('SELECT player_id FROM tear WHERE type = 1 AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					addItem(player_id, 641);
					connection.query('INSERT INTO tear (player_id, type) VALUES (' + player_id + ',1)', function (err, rows, fields) {
						if (err) throw err;
					});
					bot.sendMessage(chat_id, "Hai ottenuto una *Lacrima dell'Immortale* come ricompensa per il tuo impegno!", mark);
					console.log("Lacrima 1 consegnata a " + player_id);
				}
			});
		};
	});
}

function lacrima2(player_id, chat_id) {
	connection.query('SELECT id FROM artifacts WHERE player_id = ' + player_id + ' AND item_id = 644', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			connection.query('SELECT player_id FROM tear WHERE type = 2 AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					addItem(player_id, 674);
					connection.query('INSERT INTO tear (player_id, type) VALUES (' + player_id + ',2)', function (err, rows, fields) {
						if (err) throw err;
					});
					bot.sendMessage(chat_id, "Hai ottenuto una *Lacrima del Rinnegato* come ricompensa per il tuo impegno!", mark);
					console.log("Lacrima 2 consegnata a " + player_id);
				};
			});
		};
	});
}

function lacrima3(player_id, chat_id) {
	connection.query('SELECT id FROM artifacts WHERE player_id = ' + player_id + ' AND item_id = 644', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			connection.query('SELECT player_id FROM tear WHERE type = 3 AND player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					addItem(player_id, 691);
					connection.query('INSERT INTO tear (player_id, type) VALUES (' + player_id + ',3)', function (err, rows, fields) {
						if (err) throw err;
					});
					bot.sendMessage(chat_id, "Hai ottenuto una *Lacrima dell'Impavido* come ricompensa per il tuo impegno!", mark);
					console.log("Lacrima 3 consegnata a " + player_id);
				};
			})
		};
	});
}

function estrazione() {
	var date = new Date();

	connection.query('SELECT E.id, item_id, I.name As item_name, money, chest_id, exp, C.name As chest_name, gems, mana, extracted, quantity FROM event_lottery_prize As E LEFT JOIN item As I ON E.item_id = I.id LEFT JOIN chest As C ON E.chest_id = C.id WHERE E.extracted = 0 AND E.day >= ' + date.getDay(), function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			console.log("Non ci sono pi√π premi");
			autoEstrazione = 0;

			bot.sendMessage("@EstrazioniLootteria", "Estrazioni terminate!");
			return;
		}

		var ext_id = rows[0].id;

		var name = "";
		var type = "";
		var item_id = 0;
		var chest_id = 0;
		var money = 0;
		var exp = 0;
		var mana = 0;
		var quantity = 1;
		var gems = 0;

		if ((rows[0].item_id != 0) && (rows[0].item_id != null)) {
			type = "item";
			name = rows[0].item_name;
			item_id = rows[0].item_id;
			quantity = rows[0].quantity;
		} else if (rows[0].money != 0) {
			type = "money";
			name = rows[0].money + " ¬ß";
			money = rows[0].money;
		} else if ((rows[0].chest_id != 0) && (rows[0].item_id != null)) {
			type = "chest";
			name = rows[0].chest_name;
			chest_id = rows[0].chest_id;
			quantity = rows[0].quantity;
		} else if (rows[0].gems != 0) {
			gems = rows[0].gems;
			type = "gems";
			name = rows[0].gems + " üíé";
		} else if (rows[0].exp != 0) {
			type = "exp";
			name = rows[0].exp + " exp";
			exp = rows[0].exp;
		} else if (rows[0].mana != 0) {
			type = "mana";
			name = rows[0].mana + " Mana tutti i tipi";
			mana = rows[0].mana;
		} else {
			console.log("Errore estrazione");
			return;
		}

		connection.query('SELECT COUNT(*) As num FROM event_lottery_coins', function (err, rows, fields) {
			if (err) throw err;

			var num = parseInt(rows[0].num) - 1;
			var rand = Math.round(Math.random() * num);

			connection.query('SELECT player_id, nickname, chat_id FROM event_lottery_coins, player WHERE player.id = event_lottery_coins.player_id AND player_id != 1 AND player_id != 3 ORDER BY RAND() LIMIT ' + rand + ',' + quantity, function (err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0) {
					console.log("Errore estrazione vincitore " + rand + "-" + quantity);
					return;
				}

				if (Object.keys(rows).length > 15) {
					console.log("Quantit√† elevata " + Object.keys(rows).length + " - " + rand + " - " + quantity);
					return;
				}

				connection.query('UPDATE event_lottery_prize SET extracted = 1 WHERE id = ' + ext_id, function (err, rows, fields) {
					if (err) throw err;
				});

				var text = "<i>Lootteria</i> - Estrazione per <b>" + name + "</b>!\n\n";

				var playerId = 0;
				var nickname = "";
				var nick_extracted = [];
				var chat_ids = [];

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					playerId = rows[i].player_id;
					nickname = rows[i].nickname;
					nick_extracted.push(playerId);
					chat_ids.push(rows[i].chat_id);
					console.log("Estratto " + nickname);

					if (quantity > 1)
						text += "> " + nickname + "\n";
					else
						text += "Il vincitore √® <b>" + nickname + "</b>\n";

					if (type == "item")
						addItem(playerId, item_id);
					if (type == "chest")
						addChest(playerId, chest_id);
					if (type == "money") {
						connection.query('UPDATE player SET money = money + ' + money + ' WHERE id = ' + playerId, function (err, rows, fields) {
							if (err) throw err;
						});
					}
					if (type == "gems") {
						connection.query('UPDATE player SET gems = gems+' + gems + ' WHERE id = ' + playerId, function (err, rows, fields) {
							if (err) throw err;
						});
					}
					if (type == "exp")
						setExp(playerId, exp);
					if (type == "mana") {
						connection.query('UPDATE event_mana_status SET mana_1 = mana_1 + ' + mana + ', mana_2 = mana_2 + ' + mana + ', mana_3 = mana_3 + ' + mana + ' WHERE player_id = ' + playerId, function (err, rows, fields) {
							if (err) throw err;
						});
						setAchievement(playerId, 81, mana);
					}
				};

				connection.query('SELECT MAX(id) As tot FROM event_lottery_prize WHERE day >= ' + date.getDay(), function (err, rows, fields) {
					if (err) throw err;

					var tot = rows[0].tot;
					text += "\n" + ext_id + " / " + tot;
					bot.sendMessage("@EstrazioniLootteria", text, html);
					console.log("Estrazione " + ext_id + " terminata");

					for (var i = 0, len = Object.keys(nick_extracted).length; i < len; i++) {
						playerId = nick_extracted[i];
						connection.query('DELETE FROM event_lottery_coins WHERE player_id = ' + playerId, function (err, rows, fields) {
							if (err) throw err;
						});
						bot.sendMessage(chat_ids[i], "Sei stato estratto nell'evento Lootteria ed hai vinto: <b>" + name + "</b>!", html);
					}
				});
			});
		});
	});
}

function dailyChest(message, player_id) {
	var rand = Math.round((Math.random() * 99) + 1);
	var chest_id = 0;
	if ((rand <= 100) && (rand >= 50)) //50%
		chest_id = 1;
	else if ((rand < 50) && (rand >= 20)) //30%   
		chest_id = 2;
	else if ((rand < 20) && (rand >= 10)) //10%
		chest_id = 3;
	else if ((rand < 10) && (rand >= 5)) //5%
		chest_id = 4;
	else if ((rand < 5) && (rand >= 0)) //5%
		chest_id = 5;

	connection.query('SELECT COUNT(*) As num FROM daily_chest WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		if (rows[0].num == 0) {
			connection.query('SELECT name, rarity_shortname FROM chest WHERE id = ' + chest_id, function (err, rows, fields) {
				if (err) throw err;
				addChest(player_id, chest_id);
				connection.query('INSERT INTO daily_chest (player_id, chest_id) VALUES (' + player_id + ',' + chest_id + ')', function (err, rows, fields) {
					if (err) throw err;
				});
				bot.sendMessage(message.chat.id, "Iniziando la prima missione della giornata, hai ricevuto lo scrigno giornaliero: *" + rows[0].name + "* (" + rows[0].rarity_shortname + ")!", mark);
				setAchievement(player_id, 39, 1);
			});
		}
	});
};

function saveActive() {
	var d = new Date();
	var today = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate());
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

	connection.query('SELECT COUNT(*) As active FROM last_command WHERE time LIKE "' + today + '%"', function (err, rows, fields) {
		if (err) throw err;
		var act = rows[0].active;

		connection.query('INSERT INTO active_history (count, time) VALUES (' + act + ',"' + long_date + '")', function (err, rows, fields) {
			if (err) throw err;
			console.log("Attivit√† giocatori salvatata! --> " + act + " <--");
		});
	});
}

function saveActiveMonthly() {
	var d = new Date();
	var today = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate());
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

	connection.query('SELECT COUNT(*) As active FROM last_command WHERE DATEDIFF(NOW(), time) < 30', function (err, rows, fields) {
		if (err) throw err;
		var act = rows[0].active;

		connection.query('INSERT INTO active_monthly_history (count, time) VALUES (' + act + ',"' + long_date + '")', function (err, rows, fields) {
			if (err) throw err;
			console.log("Attivit√† giocatori mensile salvatata! --> " + act + " <--");
		});
	});
}

function shareMoon() {
	var rate = 102400;
	var value = 1800;
	var players = [];
	var chats = [];

	connection.query('SELECT player_id, hash, chat_id FROM miner, player WHERE player.id = miner.player_id AND hash > 0 ORDER BY miner.id', function (err, rows, fields) {
		if (err) throw err;

		var total = 0;
		var last = 0;
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			total += rows[i].hash;
			players.push(rows[i].player_id);
			chats.push(rows[i].chat_id);
			console.log("Utente:", rows[i].hash, rows[i].player_id);
			if (total >= (rate*value)) {
				if (total > (rate*value))
					last = total-(rate*value);
				console.log("Scarto:", last);
				break;
			}
		}

		for (var i = 0; i < players.length; i++) {
			connection.query('UPDATE miner SET hash = 0 WHERE player_id = ' + players[i], function (err, rows, fields) {
				if (err) throw err;
			});
			if (i == players.length-1) {
				connection.query('UPDATE miner SET hash = ' + last + ' WHERE player_id = ' + players[i], function (err, rows, fields) {
					if (err) throw err;
				});
			}
			/*
			bot.sendMessage(chats[i], "Grazie al tuo contributo per il Loot Miner hai ottenuto 1 üåï!");
			connection.query('UPDATE player SET moon_coin = moon_coin+1 WHERE id = ' + players[i], function (err, rows, fields) {
				if (err) throw err;
			});
			*/
		}
	});
}

function marketGeneration() {
	var items = [];
	var rarity = [];
	var est = [];

	connection.query('DELETE FROM market_pack', function (err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT id, estimate FROM item WHERE craftable = 0 AND rarity = "C" AND id NOT IN (92, 93, 94) ORDER BY RAND() LIMIT 10', function (err, rows, fields) {
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				items.push(rows[i].id);
				rarity.push(1);
				est.push(rows[i].estimate);
			}
			connection.query('SELECT id, estimate FROM item WHERE craftable = 0 AND rarity = "NC" AND id NOT IN (92, 93, 94) ORDER BY RAND() LIMIT 9', function (err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					items.push(rows[i].id);
					rarity.push(2);
					est.push(rows[i].estimate);
				}
				connection.query('SELECT id, estimate FROM item WHERE craftable = 0 AND rarity = "R" AND id NOT IN (92, 93, 94) ORDER BY RAND() LIMIT 8', function (err, rows, fields) {
					if (err) throw err;
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						items.push(rows[i].id);
						rarity.push(3);
						est.push(rows[i].estimate);
					}
					connection.query('SELECT id, estimate FROM item WHERE craftable = 0 AND rarity = "UR" AND id NOT IN (92, 93, 94) ORDER BY RAND() LIMIT 7', function (err, rows, fields) {
						if (err) throw err;
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							items.push(rows[i].id);
							rarity.push(4);
							est.push(rows[i].estimate);
						}
						connection.query('SELECT id, estimate FROM item WHERE craftable = 0 AND rarity = "L" AND id NOT IN (92, 93, 94) ORDER BY RAND() LIMIT 6', function (err, rows, fields) {
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								items.push(rows[i].id);
								rarity.push(5);
								est.push(rows[i].estimate);
							}
							connection.query('SELECT id, estimate FROM item WHERE craftable = 0 AND rarity = "E" AND id NOT IN (92, 93, 94) ORDER BY RAND() LIMIT 5', function (err, rows, fields) {
								if (err) throw err;
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									items.push(rows[i].id);
									rarity.push(6);
									est.push(rows[i].estimate);
								}
								connection.query('SELECT id, estimate FROM item WHERE craftable = 0 AND rarity = "U" AND id NOT IN (92, 93, 94) ORDER BY RAND() LIMIT 1', function (err, rows, fields) {
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										items.push(rows[i].id);
										rarity.push(9);
										est.push(rows[i].estimate);
									}

									for (var i = 0, len = items.length; i < len; i++) {
										est[i] = Math.round(getRandomArbitrary(est[i] - (est[i] * 0.4), est[i] + (est[i] * 0.2)));
										connection.query('INSERT INTO market_pack (pack_id, item_id, price) VALUES (' + rarity[i] + ',' + items[i] + ',' + est[i] + ')', function (err, rows, fields) {
											if (err) throw err;
										});
									}
									console.log("Mercato a rotazione aggiornato");

									connection.query('UPDATE player SET market_pack = 0', function (err, rows, fields) {
										if (err) throw err;
									});
								});
							});
						});
					});
				});
			});
		});
	});
}

function flariCap(molt, global_event) {
	return Math.round((70/molt)*(global_event-3));
}

function rimodPrice(actualLevel, nextLevel, unitPrice) {
	var spent = 0, ret = 0, x = 0, xr = 0, y = 0;
	for (i = 0; i < nextLevel; i++) {
		if (i == actualLevel)
			spent = xr;
		y = x;
		ret = funz(x) * unitPrice;
		x += ret;
		xr += Math.round(ret);
	}

	return xr - spent;
}

function funz(x) {
	return 1 + (Math.pow(x, 1.8)) / 100000;
}

function refreshLife() {
	var query = "";
	if (checkDragonTopOn == 0)
		query = ", status = NULL, status_cnt = 0";
	connection.query('UPDATE player SET life = total_life, paralyzed = 0' + query, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM daily_chest', function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('UPDATE merchant_offer SET day_cnt = 0', function (err, rows, fields) {
		if (err) throw err;
	});
}

function refreshManaBoost() {
	connection.query('UPDATE event_mana_status SET boost_cnt = 0, boost_time = NULL', function (err, rows, fields) {
		if (err) throw err;
	});
}

function refreshDustBoost() {
	connection.query('UPDATE event_dust_status SET boost_cnt = 0, boost_time = NULL', function (err, rows, fields) {
		if (err) throw err;
	});
}

function refreshDragonLife() {
	connection.query('UPDATE dragon SET life = total_life', function (err, rows, fields) {
		if (err) throw err;
	});
}

function cleanDragon() {
	connection.query('DELETE FROM dragon_dummy', function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM dragon_top_dummy', function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('UPDATE dragon_top_status SET is_dummy = 0, enemy_dragon_id = NULL', function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('UPDATE dragon_top_rank SET combat = 0', function (err, rows, fields) {
		if (err) throw err;
	});
	console.log(getNow("it") + " cleanDragon ok.");
}

function cleanLottery() {
	connection.query('DELETE FROM event_lottery_coins', function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('UPDATE event_lottery_prize SET extracted = 0', function (err, rows, fields) {
		if (err) throw err;
	});
	console.log(getNow("it") + " cleanLottery ok.");
}

function checkDragonSleep() {
	connection.query('SELECT player.chat_id, dragon.id, dragon.name, dragon.sleep_h, dragon.total_life, dragon.life FROM dragon, player WHERE dragon.player_id = player.id AND sleep_time_end < NOW() AND sleep_time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 drago svegliato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " draghi svegliati\x1b[0m");
			rows.forEach(setDragonSleep);
		}
	});
};

function checkDragonNoMatch() {
	connection.query('UPDATE dragon_top_status SET no_match_time = NULL WHERE no_match_time < NOW() AND no_match_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
	});
};

function setDragonSleep(element, index, array) {
	var sleep_h = element.sleep_h;
	var life = element.life + Math.round(element.total_life / 100 * sleep_h);
	var chat_id = element.chat_id;
	var total_life = element.total_life;

	if (life > total_life)
		life = total_life;

	var d = new Date();
	d.setMinutes(d.getMinutes() + 15);
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

	connection.query('UPDATE dragon_top_status SET poison = 0, dmg_boost = 0, confusion = 0, wait_dmg = 0, ice = 0, no_match_time = "' + long_date + '" WHERE dragon_id = ' + element.id, function (err, rows, fields) {
		if (err) throw err;
		connection.query('UPDATE dragon SET sleep_time_end = NULL, sleep_h = 0, life = ' + life + ' WHERE id = ' + element.id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Il tuo drago si √® risvegliato dopo aver recuperato il " + sleep_h + "% della salute!");
		});
	});
};

function checkDragonSearchCd() {
	connection.query('SELECT id, chat_id FROM player WHERE status IS NOT NULL AND status_cnt >= ' + dragon_limit_search, function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 ricerca scaduta\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " ricerche scadute\x1b[0m");
			rows.forEach(setDragonSearchCd);
		}
	});
};

function setDragonSearchCd(element, index, array) {
	var player_id = element.id;

	// Questa funzione serve sempre per far scadere i draghi in coda che non vengono selezionati per matchare

	//console.log("Ricerca scaduta, avvio scontro dummy");
	connection.query('SELECT player.chat_id, player.id As player_id, dragon_top_rank.top_id, dragon_top_rank.dragon_id, dragon.name, dragon.type, dragon.arms_id, player.status_cnt, dragon.level, dragon_top_rank.rank, dragon.exp FROM dragon_top_rank, player, dragon WHERE dragon_top_rank.dragon_id = dragon.id AND dragon_top_rank.player_id = player.id AND player.id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		dragonDummyStart(rows[0].top_id, rows[0].chat_id, rows[0].rank, rows[0].dragon_id, rows[0].player_id, rows[0].exp, rows[0].arms_id, rows[0].level);
	});
};

function checkDragonSearch() {
	connection.query('SELECT player.chat_id, MIN(player.status) As status, player.id As player_id, dragon_top_rank.top_id, dragon_top_rank.dragon_id, dragon.name, dragon.type, dragon.arms_id, player.status_cnt, dragon.level, dragon_top_rank.rank, dragon.exp, dragon.life FROM dragon_top_rank, player, dragon WHERE dragon_top_rank.dragon_id = dragon.id AND dragon_top_rank.player_id = player.id AND player.status IS NOT NULL GROUP BY top_id ORDER BY top_id DESC, status ASC', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 ricerca drago avversario in corso\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " ricerche draghi in corso\x1b[0m");
			rows.forEach(setDragonSearch);
		}
	});
};

function littleVar(num, variation) {
	var number = 0;
	number = num;
	return Math.round(getRandomArbitrary(number-variation, number+variation));
}

function setDragonSearch(element, index, array) {
	var kbCombat = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [['Entra in combattimento'], ['Torna al menu']]
		}
	};

	var dragon_id = element.dragon_id;
	var player_id = element.player_id;
	var top_id = element.top_id;
	var dragon_name = element.name;
	var my_dragon_type = element.type;
	var dragon_arms_id = element.arms_id;
	var dragon_lev = element.level;
	var chat_id = element.chat_id;
	var status_cnt = element.status_cnt;
	var my_rank = element.rank;
	var my_exp = element.exp;
	var dragon_life = element.life;

	if (dragon_life <= 0) {
		connection.query('UPDATE player SET status = NULL, status_cnt = 0 WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Il drago non ha salute, √® stato escluso dalla ricerca");
			console.log("ERRORE VITA DRAGO player_id " + player_id);
		});
		return;
	}

	// incrementa ogni ricerca
	connection.query('UPDATE player p INNER JOIN dragon_top_rank d ON p.id = d.player_id SET p.status_cnt = p.status_cnt+1 WHERE p.status IS NOT NULL AND d.top_id = ' + top_id, function (err, rows, fields) {
		if (err) throw err;
	});

	var d = new Date();
	d.setMinutes(d.getMinutes() + 20);
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

	/*
	var status_cnt_limit = 25;

	if (player_id == 1)
		status_cnt_limit = 3;
	*/

	if (status_cnt >= dragon_limit_search) {	// 30 per 10 min
		// per non matchare quando dovrebbe scadere (?)
		// console.log("Salto match per status_cnt a " + status_cnt);
		return;
	}

	var diff = ((status_cnt * 2) + 20);
	var searchOpt = "D.level";
	var searchVal = dragon_lev;

	var rand = Math.random()*100;
	if (rand < 50) {
		searchOpt = "D.level BETWEEN " + (dragon_lev-50) + " AND " + (dragon_lev+50) + " AND R.rank";
		searchVal = my_rank;
		diff = Math.round(diff/5);
	}

	var query = 'SELECT P.chat_id, R.dragon_id, R.rank, D.name, D.type, D.level, D.arms_id FROM dragon_top_rank R, dragon D, player P, dragon_top_status D2 WHERE D2.dragon_id = D.id AND P.id = D.player_id AND ' + searchOpt + ' BETWEEN ' + (searchVal - diff) + ' AND ' + (searchVal + diff) + ' AND R.dragon_id = D.id AND R.top_id = ' + top_id + ' AND R.dragon_id != ' + dragon_id + ' AND R.combat = 0 AND D.sleep_h = 0 AND D.life > 0 AND D2.no_match_time IS NULL AND R.dragon_id != 3 AND P.status IS NULL ORDER BY RAND()';
	connection.query(query, function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			//console.log("Nessun drago disponibile");
			return;
		}

		//console.log("Drago trovato!");

		var name = rows[0].name;
		var type = rows[0].type;
		var rank = rows[0].rank;
		var level = rows[0].level;
		var enemy_dragon_arms_id = rows[0].arms_id;
		var enemy_dragon_id = rows[0].dragon_id;
		var chat_id2 = rows[0].chat_id;

		connection.query('UPDATE player SET status = NULL, status_cnt = 0 WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			connection.query('UPDATE dragon_top_status SET poison = 0, protection = 0, dmg_boost = 0, confusion = 0, wait_dmg = 0, ice = 0, enemy_dragon_id = ' + enemy_dragon_id + ', battle_time = "' + long_date + '", no_match_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) {
					bot.sendMessage(chat_id, "A causa di un problema sei stato escluso dal combattimento in vetta senza penalit√†, ora puoi rientrare in coda");
					console.log("ERRORE DUPLICAZIONE player_id " + player_id);
					throw err;
					return;
				}

				// se duplicato si rompe qua com'√® giusto che sia

				connection.query('UPDATE dragon_top_rank SET combat = 1 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
					if (err) throw err;
					connection.query('UPDATE dragon_top_rank SET combat = 1 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
						if (err) throw err;

						var scale = 1;
						if (dragon_arms_id == 709) {
							var rand = Math.random() * 100;
							if (rand < 50)
								scale = 2;
						}
						var enemy_scale = 1;
						if (enemy_dragon_arms_id == 709) {
							var rand = Math.random() * 100;
							if (rand < 50)
								enemy_scale = 2;
						}

						connection.query('UPDATE dragon_top_status SET poison = 0, protection = 0, dmg_boost = 0, confusion = 0, wait_dmg = 0, ice = 0 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
							if (err) throw err;

							connection.query('UPDATE dragon SET scale = ' + enemy_scale + ' WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
								if (err) throw err;
								connection.query('UPDATE dragon SET scale = ' + scale + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "La ‚ô®Ô∏è <i>Fiamma del Prescelto</i> si muove sopra i nomi dei draghi del monte e si ferma sul drago <b>" + name + " " + type + "</b> " + dragonSym(type) + ". Questo sfidante ha raggiunto <b>" + rank + " √ê</b> ed √® un drago di livello <b>" + level + "</b>. Buona fortuna!", kbCombat);
									bot.sendMessage(chat_id2, "Il tuo drago √® stato sfidato nella vetta da <b>" + dragon_name + " " + my_dragon_type + "</b> con <b>" + my_rank + " √ê</b>!", html);

									connection.query("UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id IN (SELECT dragon_id FROM dragon_top_unlinked)", function (err, rows, fields) {
										if (err) throw err;
									});
								});
							});
						});
					});
				});
			});
		});
	});
}

function dragonDummyStart(top_id, chat_id, my_rank, dragon_id, player_id, my_exp, dragon_arms_id, my_level) {
	var kbCombat = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [['Entra in combattimento'], ['Torna al menu']]
		}
	};

	var d = new Date();
	d.setMinutes(d.getMinutes() + 20);
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

	var name_list = connection_sync.query("SELECT name FROM dragon_name_list ORDER BY RAND()");
	var dummy_name = name_list[0].name;
	var mid_lev = connection_sync.query("SELECT AVG(D.level) As lev FROM dragon_top_status S, dragon D WHERE S.dragon_id = D.id AND S.top_id = " + top_id + " AND S.is_dummy = 0");
	mid_lev = Math.round(mid_lev[0].lev);
	var tmp = my_level > mid_lev ? (my_level+mid_lev)/2 : mid_lev;
	var min = tmp - 5;
	var max = tmp + 5;
	var output = Math.floor(Math.random() * (max - min + 1)) + min;
	var dummy_level = output < 1 ? 1 : (output > 300 ? 300 : output);
	// console.log("Livello dummy: " + dummy_level);
	dummy_level = Math.floor(dummy_level);
	var dummy_exp = dummy_level*70;
	var dummy_scale = 1;
	var type_array = ["dei Mari", "delle Montagne", "Infernale", "dell'Oscurit√†", "dei Cieli", "dei Ghiacci"];
	var dummy_type = type_array[Math.floor(Math.random() * type_array.length)];
	var equip_rarity = "";
	if (dummy_level < 50)
		equip_rarity = "'NC','R','UR'";
	else if (dummy_level < 100)
		equip_rarity = "'L','E'";
	else if (dummy_level < 150)
		equip_rarity = "'E','UE'";
	else
		equip_rarity = "'UE'";
	var claws_list = connection_sync.query("SELECT id, dragon_power FROM item WHERE name LIKE 'Artigli %' AND rarity IN (" + equip_rarity + ") ORDER BY RAND()");
	var dummy_claws_id = claws_list[0].id;
	var dummy_claws = claws_list[0].dragon_power;
	var saddle_list = connection_sync.query("SELECT id, dragon_power FROM item WHERE name LIKE 'Sella %' AND rarity IN (" + equip_rarity + ") ORDER BY RAND()");
	var dummy_saddle_id = saddle_list[0].id;
	var dummy_saddle = Math.abs(claws_list[0].dragon_power);
	var arms_list = 0;
	var dummy_arms_id = 0;
	if (dummy_level > 150) {
		arms_list = connection_sync.query("SELECT id FROM item WHERE name LIKE 'Stemma %' AND rarity = 'UE' ORDER BY RAND()");
		dummy_arms_id = arms_list[0].id;
	}
	var dummy_evolved = 0;
	if (dummy_level > 200)
		dummy_evolved = 2;
	else if (dummy_level > 100)
		dummy_evolved = 1;

	if (dummy_arms_id == 709) {
		var rand = Math.random() * 100;
		if (rand < 50)
			dummy_scale = 2;
	}

	connection.query('INSERT INTO dragon_dummy (name, exp, level, scale, claws_id, claws, saddle_id, saddle, arms_id, type, evolved) VALUES ("' + dummy_name + '", ' + dummy_exp + ', ' + dummy_level + ',' + dummy_scale + ',' + dummy_claws_id + ',' + dummy_claws + ',' + dummy_saddle_id + ',' + dummy_saddle + ',' + dummy_arms_id + ',"' + dummy_type + '",' + dummy_evolved + ')', function (err, rows, fields) {
		if (err) throw err;

		var dummy_id = rows.insertId;
		checkDragon(dummy_id, 1);

		var scale = 1;
		if (dragon_arms_id == 709) {
			var rand = Math.random() * 100;
			if (rand < 50)
				scale = 2;
		}

		connection.query('INSERT INTO dragon_top_dummy (dragon_id, top_id) VALUES (' + dummy_id + ',' + top_id + ')', function (err, rows, fields) {
			if (err) throw err;

			var enemy_dragon_id = dummy_id;

			connection.query('UPDATE dragon_top_status SET poison = 0, protection = 0, dmg_boost = 0, confusion = 0, wait_dmg = 0, ice = 0, enemy_dragon_id = ' + enemy_dragon_id + ', battle_time = "' + long_date + '", no_match_time = NULL, is_dummy = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				connection.query('UPDATE dragon_top_rank SET combat = 1 WHERE dragon_id = ' + dragon_id, function (err, rows, fields) {
					if (err) throw err;
					connection.query('UPDATE dragon SET scale = ' + scale + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;

						var dummy_rank = my_rank;

						bot.sendMessage(chat_id, "La ‚ô®Ô∏è <i>Fiamma del Prescelto</i> si muove sopra i nomi dei draghi del monte e si ferma sul drago <b>" + dummy_name + " " + dummy_type + "</b> " + dragonSym(dummy_type) + ". Questo sfidante ha raggiunto <b>" + dummy_rank + " √ê</b> ed √® un drago di livello <b>" + dummy_level + "</b>. Buona fortuna!", kbCombat);

						connection.query("UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id IN (SELECT dragon_id FROM dragon_top_unlinked)", function (err, rows, fields) {
							if (err) throw err;
						});
						connection.query('UPDATE player SET status_cnt = 0, status = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					});
				});
			});
		});
	});
}

function checkDragonTop() {
	connection.query('SELECT player.chat_id, player.id As player_id, dragon_top_rank.rank, dragon_top_rank.top_id FROM dragon_top_rank, player WHERE dragon_top_rank.player_id = player.id', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 drago passato di monte\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " draghi passati di monte\x1b[0m");
			rows.forEach(setDragonTop);
		}
	});
};

function setDragonTop(element, index, array) {
	var chat_id = element.chat_id;
	var player_id = element.player_id;
	var rank = element.rank;
	var top = element.top_id;
	var res = 0;

	connection.query('SELECT pnt FROM dragon_top_list WHERE id = ' + top, function(err, rows, fields) {
		if (err) throw err;

		var reset = 0;
		if (rank <= 2) {
			if (top > 1) {
				top--;
				reset = 6;
			} else
				reset = rank;
			res = -1;
		} else if (rank >= rows[0].pnt) {
			if (top < max_top_id) {
				top++;
				res = 1;
				reset = 6;
			} else {
				res = 0;
				reset = rank;
			}
		} else {
			res = 0;
			reset = rank;
		}

		connection.query('SELECT name FROM dragon_top_list WHERE id = ' + top, function (err, rows, fields) {
			if (err) throw err;
			var name = rows[0].name;
			connection.query('UPDATE dragon_top_status SET top_id = ' + top + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				connection.query('UPDATE dragon_top_rank SET top_id = ' + top + ', rank = ' + reset + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					if (res == 1) {
						bot.sendMessage(chat_id, "In base al tuo posizionamento nella vetta sei stato portato al monte successivo! Il *" + name + "*!", mark);
					} else if (res == -1) {
						bot.sendMessage(chat_id, "In base al tuo posizionamento nella vetta sei stato retrocesso al monte precedente! Il *" + name + "*!", mark);
					} else if (res == 0) {
						bot.sendMessage(chat_id, "In base al tuo posizionamento nella vetta sei rimasto nel monte attuale! Il *" + name + "*!", mark);
					}
				});
			});
		});
	});
}

function checkDragonBattle() {
	connection.query('SELECT player.chat_id, player.id, enemy_dragon_id, dragon_id, is_dummy, top_id FROM dragon_top_status, player WHERE dragon_top_status.player_id = player.id AND battle_time < NOW() AND battle_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 battaglia drago scaduta\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " battaglie drago scadute\x1b[0m");
			rows.forEach(setDragonBattle);
		}
	});
};

function setDragonBattle(element, index, array) {
	var chat_id = element.chat_id;
	var player_id = element.id;
	var enemy_dragon_id = element.enemy_dragon_id;
	var dragon_id = element.dragon_id;
	var is_dummy = element.is_dummy;
	var top_id = element.top_id;

	connection.query('SELECT rank FROM dragon_top_rank WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;

		var my_rank = rows[0].rank;

		connection.query('SELECT rank, top_id FROM dragon_top_rank WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
			if (err) throw err;

			if (is_dummy == 0) {
				if (Object.keys(rows).length == 0) {
					return;
				}

				var enemy_rank = rows[0].rank;
				var enemy_top_id = rows[0].top_id;
			} else {
				enemy_rank = my_rank;
				enemy_top_id = top_id;
			}

			connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;

				var dragon_level = rows[0].level;

				var table = "dragon";
				var table2 = "dragon_top_status";
				if (is_dummy == 1) {
					table = "dragon_dummy";
					table2 = "dragon_top_dummy";
				}

				connection.query('SELECT level, arms_id FROM ' + table + ' WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
					if (err) throw err;

					var enemy_dragon_level = rows[0].level;
					var enemy_dragon_arms_id = rows[0].arms_id;

					var rank = 1;
					var rank_lost = 1;
					if ((enemy_dragon_level + 20) < dragon_level) {
						rank = 2;
						rank_lost = 2;
					}
					if (my_rank >= rank_lost) {
						connection.query('UPDATE dragon_top_rank SET rank = rank-' + rank_lost + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					} else { //Riprova con 1 rank, sperando che chi perde abbia almeno un rango
						rank_lost = 1;
						if (my_rank >= rank_lost) {
							connection.query('UPDATE dragon_top_rank SET rank = rank-' + rank_lost + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
							});
						} else
							rank_lost = 0; //Nel caso in cui chi perde abbia zero rango
					}

					if (enemy_top_id < max_top_id) {
						if (enemy_rank + rank >= rank_cap) {
							rank = rank_cap - enemy_rank;
							if (rank < 0)
								rank = 0;
						}
					}
					connection.query('UPDATE dragon_top_rank SET rank = rank+' + rank + ' WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
						if (err) throw err;
					});

					var d = new Date();
					d.setMinutes(d.getMinutes() + 15);
					var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

					connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
							if (err) throw err;
							connection.query('UPDATE dragon_top_status SET enemy_dragon_id = NULL, battle_time = NULL, is_dummy = 0 WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								connection.query('UPDATE ' + table2 + ' SET enemy_dragon_id = NULL, battle_time = NULL, no_match_time = "' + long_date + '" WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
									if (err) throw err;
									connection.query('SELECT player.chat_id, player.id FROM player, dragon WHERE dragon.id = ' + enemy_dragon_id + ' AND player.id = dragon.player_id', function (err, rows, fields) {
										if (err) throw err;

										var chest = 1;
										if (enemy_dragon_level > (dragon_level + 50))
											chest = 0;

										if (enemy_dragon_arms_id == 714) {
											var randS = Math.random() * 100;
											if (randS < 50)
												chest++;
										}

										if (my_rank == 0)
											chest = 0;

										var extra = "";
										if (chest == 1) {
											extra = " ed uno Scrigno Scaglia";

											if (is_dummy == 0)
												addChest(rows[0].id, 9);
										} else if (chest > 1) {
											extra = " e " + chest + " Scrigni Scaglia";
											if (is_dummy == 0)
												addChest(rows[0].id, 9, chest);
										}

										var d = new Date();
										d.setMinutes(d.getMinutes() + 5);
										var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

										connection.query('UPDATE dragon_top_status SET no_match_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
											if (err) throw err;
										});

										bot.sendMessage(chat_id, "La battaglia nella vetta √® scaduta, hai perso " + rank_lost + " √ê!");

										if (is_dummy == 0) {
											bot.sendMessage(rows[0].chat_id, "Lo sfidante nella vetta ha lasciato scadere la battaglia, hai ottenuto " + rank + " √ê" + extra + "!");

											var d = new Date();
											var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
											connection.query('INSERT INTO dragon_top_log (player_id, dragon_id, enemy_player_id, enemy_dragon_id, time, win, note) VALUES (' + player_id + ',' + dragon_id + ',' + rows[0].id + ',' + enemy_dragon_id + ',"' + long_date + '",2,"Scaduta")', function (err, rows, fields) {
												if (err) throw err;
											});
										} else if (is_dummy == 1) {
											connection.query('DELETE FROM dragon_top_dummy WHERE dragon_id = ' + enemy_dragon_id, function (err, rows, fields) {
												if (err) throw err;
												connection.query('DELETE FROM dragon_dummy WHERE id = ' + enemy_dragon_id, function (err, rows, fields) {
													if (err) throw err;
												});
											});
										}
									});
								});
							});
						});
					});
				});
			});
		});
	});
};

function checkDragonTopCd() {
	connection.query('SELECT player.chat_id, dragon_top_status.id, dragon.sleep_h FROM dragon_top_status, player, dragon WHERE dragon.id = dragon_top_status.dragon_id AND dragon_top_status.player_id = player.id AND wait_time < NOW() AND wait_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 drago timeout vetta\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " draghi timeout vetta\x1b[0m");
			rows.forEach(setDragonTopCd);
		}
	});
};

function setDragonTopCd(element, index, array) {
	var chat_id = element.chat_id;

	connection.query('UPDATE dragon_top_status SET wait_time = NULL WHERE id = ' + element.id, function (err, rows, fields) {
		if (err) throw err;
		if (element.sleep_h == 0) {
			bot.sendMessage(chat_id, "Il drago pu√≤ tornare a combattere nella vetta!");
		}
	});
};

function checkTeamCd() {
	connection.query('SELECT id, chat_id FROM player WHERE team_time < NOW() AND team_time IS NOT NULL', function (err, rows, fields) {
		var chat_id = 0;
		var id = 0;
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				chat_id = rows[i].chat_id;
				id = rows[i].id;

				bot.sendMessage(chat_id, "E' scaduto il tempo di attesa per accedere ad un nuovo team!");

				connection.query('UPDATE player SET team_time = NULL WHERE id = ' + id, function (err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
	connection.query('SELECT id, chat_id FROM player WHERE boss_time < NOW() AND boss_time IS NOT NULL', function (err, rows, fields) {
		var chat_id = 0;
		var id = 0;
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				chat_id = rows[i].chat_id;
				id = rows[i].id;

				bot.sendMessage(chat_id, "E' scaduto il tempo di attesa per combattere nuovamente nell'assalto!");

				connection.query('UPDATE player SET boss_time = NULL WHERE id = ' + id, function (err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
	connection.query('SELECT id, chat_id FROM player WHERE team_mission_time < NOW() AND team_mission_time IS NOT NULL', function (err, rows, fields) {
		var chat_id = 0;
		var id = 0;
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				chat_id = rows[i].chat_id;
				id = rows[i].id;

				bot.sendMessage(chat_id, "E' scaduto il tempo di attesa per iniziare un nuovo incarico!");

				connection.query('UPDATE player SET team_mission_time = NULL WHERE id = ' + id, function (err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
};

function checkEvents() {
	connection.query('SELECT mission_id, id, chat_id, exp, money, life, total_life FROM player WHERE event = 0 AND mission_id != 0 AND money > 500 AND exp > 100 ORDER BY RAND() LIMIT 10', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 evento da notificare\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " eventi da notificare\x1b[0m");
			rows.forEach(setEvents);
		}
	});
}

function setEvents(element, index, array) {
	var player_id = 0;
	var chat_id = 0;
	var level = 0;
	var rand = 0;
	var text = "";
	var itemName = "";
	var itemName2 = "";
	var itemName3 = "";
	var chat_id_t = 0;
	var money = 0;
	var life = 0;
	var total_life = 0;
	var mission_id = element.mission_id;

	rand = Math.round(Math.random() * 46);

	if (crazyMode == 1)
		rand = Math.round(Math.random() * 50);

	player_id = element.id;
	chat_id = element.chat_id;
	exp = element.exp;
	level = Math.floor(exp/10);
	money = element.money;
	life = element.life;
	total_life = element.total_life;

	if (mission_id == 1002) {
		text = "Durante la Missione vieni distratto da una rauca voce che invoca il tuo nome dall'oscuro portone di un edificio in rovina. La voce appartiene a una figura incappucciata che, al tuo apparire, senza mostrare il volto, ti porge cauta un tomo possente. Ne √® adorno il fronte, che a una bianca gemma ne cinge tre: cos√¨ √® rossa, gialla ed eguale blu. Scompare la figura, ci√≤ tuttavia s'accresce l'ardore: desideri leggerlo, desideri imparare. Un luogo conosciuto potrebbe aiutarti.";
		bot.sendMessage(chat_id, text);

		connection.query('UPDATE player SET event = 1 WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});
		return;
	}

	if (rand == 0) {
		connection.query('SELECT item.id, item.name, item.rarity FROM item WHERE item.rarity IN ("C", "NC", "R", "UR") AND item.craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			addItem(player_id, rows[0].id);
			text = "Durante la missione hai incontrato un mercante, che con la sua immensa ed incredibile gentilezza ti lascia un dono per il tuo grande coraggio, ti ha regalato un " + itemName;
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 1) {
		var damage = Math.round(getRandomArbitrary(level*10, level*15));
		connection.query('SELECT life FROM player WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione un gigantesco mostro ti attacca alle spalle e perdi " + formatNumber(damage) + " hp riportando gravi ferite";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 2) {
		var damage = Math.round(getRandomArbitrary(level*5, level*10));
		connection.query('SELECT life FROM player WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione cadi in una trappola avvelenata e perdi " + formatNumber(damage) + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 3) {
		var value = Math.round(getRandomArbitrary(level*10, level*20));
		if (money - value <= 0)
			return;
		if (value <= 0)
			value == 0;
		connection.query('UPDATE player SET money = money - ' + value + ' WHERE player.id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione un ladro ti spintona violentemente e senza che te accorgessi ti ruba " + formatNumber(value) + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 4) {
		var value = Math.round(getRandomArbitrary(level*5, level*20));
		if (money - value <= 0)
			value = 1;
		connection.query('UPDATE player SET money = money - ' + value + ' WHERE player.id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione incontri un uomo bisognoso, decidi di donargli " + formatNumber(value) + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 5) {
		var value = Math.round(getRandomArbitrary(level*10, level*20));
		connection.query('UPDATE player SET money = money + ' + value + ' WHERE player.id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione trovi un sacchetto pieno d'oro, ottieni cos√¨ " + formatNumber(value) + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 6) {
		if (life < total_life) {
			var value = Math.round(getRandomArbitrary(total_life/5, total_life/3));
			if (value+life > total_life)
				value = total_life-life;
			connection.query('UPDATE player SET life = life + ' + value + ' WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione ti imbatti in un piccolo villaggio, vieni medicato e recuperi " + formatNumber(value) + " hp";
				bot.sendMessage(chat_id, text);
			});
		}
	} else if (rand == 7) {
		connection.query('SELECT item.id, item.name, item.rarity FROM `item` WHERE item.rarity IN ("C", "NC", "R", "UR", "L") AND item.craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			addItem(player_id, rows[0].id);
			text = "Durante la missione salvi un bambino dai manigoldi del villaggio, e ricevi come ricompensa " + itemName;
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 8) {
		if (life < total_life) {
			var value = Math.round(getRandomArbitrary(level*10, level*20));
			if (value+life > total_life)
				value = total_life-life;
			connection.query('UPDATE player SET life = life + ' + value + ' WHERE player.id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante una missione ricevi una bevanda rigenerante, grazie ad essa recuperi " + formatNumber(value) + " hp";
				bot.sendMessage(chat_id, text);
			});
		}
	} else if (rand == 9) {
		connection.query('SELECT item.id, item.name, item.rarity FROM `item` WHERE item.rarity IN ("NC","R", "L") AND item.craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			addItem(player_id, rows[0].id);
			text = "Durante la missione trovi un piccolo scrigno che potrebbe contenere qualcosa di interessante, lo apri e trovi " + itemName;
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 10) {
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() - 10);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione trovi una scorciatoia, risparmi cos√¨ 10 minuti";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 11) {
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 10);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione ti imbatti in un bivio, tuttavia prendi la strada pi√π lunga, tornerai 10 minuti pi√π tardi";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 12) {
		var damage = Math.round(getRandomArbitrary(level*20, level*40));
		connection.query('SELECT life FROM player WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione il cielo si fa scuro e comincia a piovere, solamente che la pioggia che cade ti brucia la pelle, perdi cos√¨ " + formatNumber(damage) + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 13) {
		connection.query('SELECT item.id, item.name FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity IN ("C","NC","R", "UR") AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				var itemId = rows[0].id;
				var itemName = rows[0].name;
				delItem(player_id, itemId, 1);

				text = "Durante la missione ti accorgi che lo zaino √® pi√π leggero, controlli ed effettivamente manca l'oggetto " + itemName + "!";
				bot.sendMessage(chat_id, text);
			} else {
				text = "Durante la missione ti accorgi che lo zaino √® pi√π leggero, controlli ma non manca nulla! Era solo un impressione...";
				bot.sendMessage(chat_id, text);
			}
		});
	} else if (rand == 14) {
		var textArray = [
			'Durante la missione rischi di scivolare scalando una montagna, ma per fortuna mantieni salda la presa e non succede nulla',
			'Durante la missione un cavallo sulla collina vicina, diventa improvvisamente un orco. Fortunatamente non ti vede e non succede nulla',
			'Durante la missione osservi un uccellino che sta consumando il suo pranzo, quando ti accorgi che in realt√† si tratta di uno stivale, decidi di andartene e non succede nulla',
			'Durante la missione vedi uno scheletro adagiato su un angolino della strada, ma ti strofini gli occhi e ti accorgi che in realt√† si tratta di una paperella, ah',
			'Durante la missione inizi una missione, ma nemmeno in quella accade nulla di strano, che strano, peccato',
			'Durante la missione... no fa troppo caldo, quindi non fai nulla',
			'Durante la missione un ladro ti spintona e ti ruba lo zaino. Ah! Scherzavo.',
			'Durante la missione trovi il collo di Maurizio Costanzo che in realt√† non esiste quindi non succede nulla',
			'Durante la missione vedi un mercante addormentato. Decidi di derubarlo quando all\'improvviso risuona una voce che fa "E SE POI TE NE PENTI?". Allora cambi idea e continui per la tua strada'
		];
		var rand = Math.floor(Math.random() * textArray.length);
		bot.sendMessage(chat_id, textArray[rand]);
	} else if (rand == 15) {
		var damage = Math.round(getRandomArbitrary(level*60, level*80));
		connection.query('SELECT life FROM player WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione scivoli da un dirupo molto alto, ti rompi un osso della gamba e perdi " + formatNumber(damage) + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 16) {
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 20);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione un goblin ti nota e ti insegue con la bava alla bocca, sei costretto a deviare la strada quindi tornerai 20 minuti pi√π tardi";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 17) {
		var value = Math.round(getRandomArbitrary(level*10, level*30));;
		if (money - value <= 0)
			value = money;
		connection.query('UPDATE player SET money = money - ' + value + ' WHERE player.id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione ti distrai in un casin√≤, ma sfortunatamente non sei un buon giocatore cos√¨ perdi " + formatNumber(value) + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 18) {
		var value = Math.round(getRandomArbitrary(level*5, level*20));;
		connection.query('UPDATE player SET money = money + ' + value + ' WHERE player.id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione ti distrai in un casin√≤, sei un gran giocatore! Vinci cos√¨ " + formatNumber(value) + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 19) {
		connection.query('SELECT item.id, item.name, item.rarity FROM item WHERE item.rarity IN ("C","NC","R") AND item.craftable = 1 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			itemName2 = rows[1].name;
			itemName3 = rows[2].name;

			text = "Durante la missione noti un mercante qualche metro davanti a te, ad un certo punto per√≤ il suo sacco pieno si rompe, raccogli gli oggetti e trovi " + itemName + ", " + itemName2 + " e " + itemName3;
			bot.sendMessage(chat_id, text);

			addItem(player_id, rows[0].id);
			addItem(player_id, rows[1].id);
			addItem(player_id, rows[2].id);
		});
	} else if (rand == 20) {
		var damage = Math.round(getRandomArbitrary(level*1, level*5));;
		connection.query('SELECT life FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione trovi uno scrigno pieno di monete d'oro sul ciglio della strada, solo che dopo un attimo ti accorgi che si tratta di cioccolata, preso dalla disperazione divori il contenuto dello scrigno, ti viene il mal di pancia e perdi " + formatNumber(damage) + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 21) {
		var itemId = Math.round(Math.random() * 5 + 68);
		connection.query('SELECT item.id, item.name, item.rarity FROM `item` WHERE item.id = ' + itemId + ' AND item.craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			addItem(player_id, rows[0].id);
			text = "Durante la missione senti qualcosa toccarti un piede, abbassi lo sguardo e vedi una pietra strana, ricevi " + itemName + "!";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 22) {
		var damage = Math.round(getRandomArbitrary(level*10, level*20));
		connection.query('SELECT life FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione uno stregone ti coglie di sorpresa e ti ruba " + formatNumber(damage) + " hp, che poi andr√† a donare alla congrega dei maghi oscuri";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 23) {
		var damage = Math.round(getRandomArbitrary(level*10, level*50));;
		connection.query('SELECT life, nickname, chat_id, id FROM player WHERE craft_count > 20 AND holiday = 0 AND id != ' + player_id + ' ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			var nick = rows[0].nickname;
			var chat_id2 = rows[0].chat_id;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione trovi un arco e una freccia per terra, decidi di scoccarla verso il cielo in segno vittorioso ma senza volerlo colpisci un passante di nome <b>" + nick + "</b>, che perde " + formatNumber(damage) + " hp";
				bot.sendMessage(chat_id, text, html);
				var text2 = "Vedi una freccia in lontananza avvicinarsi a te a gran velocit√†, ti si conficca nel ginocchio e purtroppo perdi " + formatNumber(damage) + " hp!";
				bot.sendMessage(chat_id2, text2);
			});
		});
	} else if (rand == 24) {
		var money = Math.round(getRandomArbitrary(level*30, level*40));
		connection.query('SELECT chat_id, nickname FROM player WHERE exp > 30 AND money >= ' + money + ' ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;

			var chat_id2 = rows[0].chat_id;

			text = "Durante la missione vedi qualcuno con la testa china sul cellulare, con la coda dell'occhio noti che sta giocando ad uno strano bot, leggi il suo nickname e scopri che si chiama " + rows[0].nickname + ", per fargli uno scherzo gli fai uno sgambetto e gli fai cliccare a caso, cos√¨ perde " + formatNumber(money) + " ¬ß";
			var text2 = "Un passante per la strada ti fa uno sgambetto e cliccando a caso sul cellulare perdi " + formatNumber(money) + " ¬ß!";
			bot.sendMessage(chat_id, text);
			bot.sendMessage(chat_id2, text2);

			connection.query('UPDATE player SET money = money - ' + money + ' WHERE nickname = "' + rows[0].nickname + '"', function (err, rows, fields) {
				if (err) throw err;
			});
		});
	} else if (rand == 25) {
		var money = Math.round(getRandomArbitrary(level*1, level*10));;
		connection.query('UPDATE player SET money = money + ' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});

		text = "Durante la missione trovi una leva nascosta dentro un albero cavo. Curioso la tiri, ma non succede niente. In realt√† la leva ha fatto cadere un sacchettino pieno di qualcosa, ottieni " + formatNumber(money) + " ¬ß!";
		bot.sendMessage(chat_id, text);
	} else if (rand == 26) {
		var damage = Math.round(getRandomArbitrary(level*10, level*15));
		connection.query('SELECT life FROM player WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione trovi un pulsante a forma di papera e inizi a premerlo a ripetizione. Dopo giusto alcuni secondi ti accorgi che il pulsante ti toglie hp ogni volta che lo tocchi, infatti hai perso " + formatNumber(damage) + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 27) {
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 15);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione finisci nel mezzo di un uragano. Sollevato e lanciato lontano, quando ti riprendi scopri di essere tornato al luogo di partenza. Corri per recuperare il tempo perso, ma aumenti il tempo missione di 15 minuti";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 28) {
		if (life < total_life) {
			connection.query('UPDATE player SET life = total_life WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione vedi sfrecciare sopra di te una figura rossa. Ti distrai non tanto per la figura, ma per il fatto che sembra aver perso una nocciolina che precipitando ti urta la fronte attirando la tua attenzione. Un po'per vendetta un po' per fame mangi la nocciolina con tutto il guscio e scopri con sommo piacere che era una super arachide di super Pippo. Recuperi cos√¨ tutti gli hp!";
				bot.sendMessage(chat_id, text);
			});
		}
	} else if (rand == 29) {
		connection.query('SELECT life FROM player WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			connection.query('UPDATE player SET life = life - (life/10) WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione incontri tutti i boss riuniti assieme. Ti fissano, tu li fissi. Loro ti colpiscono violentemente e ti lasciano a terra nel fango";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 30) {
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() - 15);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione senti che qualcuno ti sta seguendo. Inizi a girare la zona per seminarlo, ma dopo esserti accorto che si tratta della tua ombra scopri di aver corso nella direzione giusta, risparmiandoti 15 minuti di viaggio";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 31) {
		var damage = Math.round(getRandomArbitrary(level*25, level*35));;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione ti distrai giocando a Loot Bot sul cellulare e sbatti violentemente contro un muro, perdendo " + formatNumber(damage) + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 32) {
		connection.query('SELECT item.id, item.name FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity IN ("NC","R") AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				var itemId = rows[0].id;
				var itemName = rows[0].name;
				delItem(player_id, itemId, 1);
				text = "Durante la missione incontri un uomo seduto sul marciapiede, decidi cos√¨ di derubarlo. Si scopre per√≤ che quell'uomo √® LastSoldier95. Lui ti guarda, apparentemente non succede nulla. Ma quando controlli nello zaino, noti che manca " + itemName + "!";
				bot.sendMessage(chat_id, text);
			} else {
				text = "Durante la missione incontri un uomo seduto sul marciapiede, decidi cos√¨ di derubarlo. Si scopre per√≤ che quell'uomo √® LastSoldier95. Lui ti guarda, non succede nulla. Oggi √® magnanimo.";
				bot.sendMessage(chat_id, text);
			}
		});
	} else if (rand == 33) {
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 60);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			connection.query('SELECT name, id FROM chest WHERE id IN (1,2) ORDER BY RAND()', function (err, rows, fields) {
				if (err) throw err;
				var chestName = rows[0].name;
				var chestId = rows[0].id;
				addChest(player_id, chestId);
				text = "Durante la missione decidi di intraprendere un'altra missione. Impiegherai un'ora in pi√π per tornare, ma ricevi " + chestName;
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 34) {
		var plus_life = Math.round(getRandomArbitrary(level*40, level*60));
		if (life+plus_life > total_life)
			return;
		connection.query('SELECT id, nickname FROM player WHERE exp > 30 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione incontri " + rows[0].nickname + " e vi salutate. Entrambi recuperate " + formatNumber(plus_life) + " hp (d'altronde √® salutare).";
			bot.sendMessage(chat_id, text);

			connection.query('UPDATE player SET life = life + ' + plus_life + ' WHERE id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('UPDATE player SET life = life + ' + plus_life + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		});
	} else if (rand == 35) {
		var damage = Math.round(getRandomArbitrary(level*20, level*30));;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0)
				return;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione incontri Jovanotti che ti lancia un faffo. Perdi " + formatNumber(damage) + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	} else if (rand == 36) {
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() - 60);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione cadi in un portale spazio temporale a forma di papera. Impiegherai un ora in meno per tornare.";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 37) {
		connection.query('SELECT item.id, item.name, item.rarity FROM item WHERE item.rarity = "R" AND item.craftable = 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			addItem(player_id, rows[0].id);
			text = "Durante la missione entri erroneamente nell'ufficio di fenix45. Prima di andartene per√≤, vai al suo computer personale e modifichi i dati del tuo pg aggiungendo 10.000 ¬ß e " + itemName;
			bot.sendMessage(chat_id, text);

			connection.query('UPDATE player SET money = money + 10000 WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		});
	} else if (rand == 38) {
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 30);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET life = life + (life/20), mission_time_end = "' + long_date + '" WHERE id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione incontri tua nonna che ti invita a fare uno spuntino. Impieghi 30 minuti in pi√π per tornare, ma recuperi un po' di salute.";
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 39) {
		connection.query('UPDATE player SET mission_id = 0, mission_time_end = null WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});
		text = "Durante una missione dimentichi di essere in missione e torni nel tuo rifugio senza ricompense.";
		bot.sendMessage(chat_id, text);
	} else if (rand == 40) {
		connection.query('SELECT name, id FROM chest WHERE id < 5 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			text = "Durante una missione pesti per sbaglio un sasso che in realt√† era una leva nascosta! Si apre una fenditura nel muro e trovi uno " + rows[0].name + "!";
			bot.sendMessage(chat_id, text);

			addChest(player_id, rows[0].id);
		});
	} else if (rand == 41) {
		if (life < total_life) {
			text = "Durante una missione incontri una fata graziosissima, diventate cos√¨ amici che decide di ricaricarti la vita al massimo!";
			bot.sendMessage(chat_id, text);

			connection.query('UPDATE player SET life = total_life WHERE player.id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		};
	} else if (rand == 42) {
		connection.query('SELECT mission_time_end, money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() - 20);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth() + 1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});

			if (rows[0].money > 2500) {
				text = "Durante una missione incontri un motociclista spericolato che ti d√† un passaggio, risparmi cos√¨ 20 minuti di missione, ma per ringraziarlo gli dai 2.500 ¬ß";
				connection.query('UPDATE player SET money = money-2500 WHERE id=' + player_id, function (err, rows, fields) {
					if (err) throw err;
				});
			} else {
				text = "Durante una missione incontri un motociclista spericolato che ti d√† un passaggio, risparmi cos√¨ 20 minuti di missione, per stavolta lo fa gratuitamente";
			}
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 43) {
		connection.query('SELECT item.name, item.id FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity = "NC" AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
			if (err) throw err;
			var money = 50000;
			var itemName = rows[0].name;
			if (Object.keys(rows).length > 0) {
				text = "Durante una missione, all'improvviso irrompe un fulmine, accecandoti. Ti accorgi in realt√† che il fulmine nient'altro era il boss di un villaggio vicino, che rubava ai sudditi e per non farsi riconoscere si era lanciato su se stesso un incantesimo che lo rendeva veloce come un fulmine. Quest'ultimo ti ha preso dallo zaino " + itemName + " ma al suo posto ti ha lasciato " + formatNumber(money) + " ¬ß.";
				delItem(player_id, rows[0].id, 1);
			} else {
				money = 30000;
				text = "Durante una missione, all'improvviso irrompe un fulmine, accecandoti. Ti accorgi in realt√† che il fulmine nient'altro era il boss di un villaggio vicino, che rubava ai sudditi e per non farsi riconoscere si era lanciato su se stesso un incantesimo che lo rendeva veloce come un fulmine. Quest'ultimo non ti ha preso nulla dallo zaino, e ti ha lasciato " + formatNumber(money) + " ¬ß.";
			}
			connection.query('UPDATE player SET money = money+' + money + ' WHERE id=' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
			bot.sendMessage(chat_id, text);
		});
	} else if (rand == 44) {
		addItem(player_id, 73);
		text = "Durante la missione incontri il grande mastro domatore di draghi Fuligah. Dopo una breve chiaccherata ti lascia in dono una Pietra Spirito Epico!";
		bot.sendMessage(chat_id, text);
	} else if (rand == 45) {
		connection.query('UPDATE player SET life = life - ROUND(life/3) WHERE id=' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});

		text = "Durante la missione incontri l'immenso drago di LastSoldier95 intento a consumare il suo pasto quotidiano. Dato che non vuoi diventare parte del banchetto, pian pianino torni indietro senza fare il minimo rumore e senza farti vedere. Ma quando pensi di essere scappato, il drago ti starnutisce addosso e perdi 1/3 della tua salute.";
		bot.sendMessage(chat_id, text);
	} else if (rand == 46) {
		var rand = Math.random() * 100;
		var text2 = "";
		if (rand > 50) {
			text2 = "per la profonda disperazione ti distrai, inciampi e perdi il 2% delle monete";
			connection.query('UPDATE player SET money = money - ((money/100)*2) WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		} else {
			text2 = "tuttavia ci ripensa e si rende conto che in effetti, non fosse poi cos√¨ male, allora si congratula con te e ti regala il 5% delle monete in pi√π!";
			connection.query('UPDATE player SET money = money + ((money/100)*5) WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		}

		text = "Durante la missione ti viene l'ispirazione poetica e decidi di scrivere una poesia avventurosa, ma appena finisci di scriverla non essendo un bravo scrittore dietro di te appare Lara997 e te la strappa perch√® scritta male, " + text2;
		bot.sendMessage(chat_id, text);
	} else if (rand == 47) {
		connection.query('SELECT money FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			var money = rows[0].money;

			if (money < 10000) {		
				connection.query('SELECT item.id, item.name FROM item, inventory WHERE item.rarity = "R" AND item.id = inventory.player_id AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0)
						return;
					var itemName = rows[0].name;
					var itemId = rows[0].id;
					text = "Durante la missione vedi una insegna che recita L'EMPORIO e decidi di entrare a dare un'occhiata. Il simpatico proprietario ekvas ti ubriaca di chiacchiere sull'andamento del mercato e dei prezzi. Esci con una Colla ma ti accorgi di esser stato convinto a scambiarla con " + itemName + "...";
					bot.sendMessage(chat_id, text);

					delItem(player_id, item_id, 1);
				});
			} else {
				var lost = Math.round(money / 100) * 5;
				text = "Durante la missione vedi una insegna che recita L'EMPORIO e decidi di entrare a dare un'occhiata. Il simpatico proprietario ekvas ti ubriaca di chiacchiere sull'andamento del mercato e dei prezzi. Esci con una Colla ma ti accorgi di esser stato convinto a pagarla " + formatNumber(lost) + " ¬ß...";
				addItem(player_id, 3);

				bot.sendMessage(chat_id, text);
				connection.query('UPDATE player SET money = money - ' + lost + ' WHERE id=' + player_id, function (err, rows, fields) {
					if (err) throw err;
				});
			}
		});
	} else if (rand == 48) {
		addChest(player_id, 6);

		text = "Durante la missione senti scorrere la follia dentro di te, al punto che senti l'anima esplodere e mostrare tutto il suo spirito d'avventura. Intraprendi una missione alla velocit√† della luce e questa missione ti fornisce uno Scrigno Epico!";
		bot.sendMessage(chat_id, text);
	} else if (rand == 49) {
		setExp(player_id, 15);
		text = "Durante la missione incontri un folle barcollante sul ciglio della strada, avvicinandoti scopri che si tratta di un elfo delle Lande Immaginarie, una razza ormai estinta, notandolo in fin di vita gli vai a comprare alcune pozioni, e lui ricambia donandoti 15 exp con un incantesimo";
		bot.sendMessage(chat_id, text);
	} else if (rand == 50) {	
		connection.query('SELECT item.id, item.name FROM inventory, item WHERE inventory.item_id = item.id AND item.rarity = "L" AND inventory.player_id = ' + player_id + ' AND inventory.quantity > 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0) {
				text = "Durante la missione ti rechi all'Emporio della Follia, deciso ad acquistare qualche strano intruglio, ma stavolta arrivi troppo tardi, √® chiuso.";
				bot.sendMessage(chat_id, text);
				return;
			}
			var item1 = rows[0].name;
			var item1_id = rows[0].id;
			connection.query('SELECT item.id, item.name FROM item WHERE item.rarity = "L" ORDER BY RAND()', function (err, rows, fields) {
				if (err) throw err;
				var item2 = rows[0].name;
				var item2_id = rows[0].id;

				addItem(player_id, item2_id);
				delItem(player_id, item1_id, 1);

				text = "Durante la missione ti rechi all'Emporio della Follia, incuriosito dai prodotti acquisti la Polvere Inverter, da applicare su un oggetto nello zaino ne cambia l'aspetto. Incuriosito procedi subito seguendo le istruzioni e il tuo oggetto " + item1 + " si trasforma in un " + item2 + "!";
				bot.sendMessage(chat_id, text);
			});
		});
	}

	connection.query('UPDATE player SET event = 1 WHERE player.id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
	});
};

function refreshHeists() {
	connection.query('UPDATE player SET heist_count = 0, heist_limit = 0, capsule_limit = 0, spy_count = 0', function (err, rows, fields) {
		if (err) throw err;
	});
};

function checkAct() {
	connection.query('SELECT P.nickname, P.id As player_id, P.chat_id, CAST(L.time As date) As last_action, CURDATE(), DATEDIFF(CURDATE(), CAST(L.time As date)) As last_access FROM player P INNER JOIN last_command L ON P.account_id = L.account_id WHERE P.holiday != 1 HAVING last_access > 60 LIMIT 20', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 giocatore espulso\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " giocatori espulsi\x1b[0m");
			rows.forEach(setFinishedAct);
		}
	});
};

function setFinishedAct(element, index, array) {
	var player_id = element.player_id;
	var nickname = element.nickname;
	var chat_id = element.chat_id;
	var last_access = element.last_access;

	console.log(">> " + player_id + " - " + nickname + " inattivo da " + last_access + " giorni");

	var now = new Date();
	now.setDate(now.getDate() + 14);
	var long_date = now.getFullYear() + "-" + addZero(now.getMonth() + 1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

	var now2 = new Date();
	now2.setDate(now2.getDate() + 365);
	var long_date2 = now2.getFullYear() + "-" + addZero(now2.getMonth() + 1) + "-" + addZero(now2.getDate()) + " " + addZero(now2.getHours()) + ':' + addZero(now2.getMinutes()) + ':' + addZero(now2.getSeconds());

	connection.query('INSERT INTO holiday (player_id, time_end) VALUES (' + player_id + ',"' + long_date + '")', function (err, rows, fields) {
		if (err) throw err;
		connection.query('UPDATE player SET holiday = 1, heist_protection = "' + long_date2 + '" WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Per inattivit√† √® stata attivata automaticamente la modalit√† vacanza!");
		});
	});
}

function checkTeamAct() {
	connection.query('SELECT P.nickname, P.chat_id, T.team_id, T.player_id, CAST(L.time As date) As last_action, CURDATE(), DATEDIFF(CURDATE(), CAST(L.time As date)) As last_access, T.role FROM player P INNER JOIN team_player T ON P.id = T.player_id INNER JOIN last_command L ON P.account_id = L.account_id WHERE P.holiday != 1 HAVING last_access > 14 LIMIT 20', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 giocatore espulso\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " giocatori espulsi\x1b[0m");
			rows.forEach(setFinishedTeamAct);
		}
	});
};

function setFinishedTeamAct(element, index, array) {
	var player_id = element.player_id;
	var nickname = element.nickname;
	var chat_id = element.chat_id;
	var team_id = element.team_id;
	var role = element.role;

	connection.query('SELECT player_id FROM team_player WHERE team_id = ' + team_id + ' AND role = 2', function (err, rows, fields) {
		if (err) throw err;

		if ((Object.keys(rows).length > 0) && (role == 1)) {
			connection.query('UPDATE team_player SET role = 1 WHERE team_id = ' + team_id + ' AND player_id = ' + rows[0].player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		} else {
			connection.query('SELECT player_id FROM team_player WHERE team_id = ' + team_id + ' AND role = 0 ORDER BY RAND()', function (err, rows, fields) {
				if (err) throw err;
				if ((Object.keys(rows).length > 0) && (role == 1)) {
					connection.query('UPDATE team_player SET role = 1 WHERE team_id = ' + team_id + ' AND player_id = ' + rows[0].player_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
			});
		}

		connection.query('SELECT player_id FROM team_player WHERE team_id = ' + team_id + ' AND role = 0 ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;

			if ((Object.keys(rows).length > 0) && (role == 2)) {
				connection.query('UPDATE team_player SET role = 2 WHERE team_id = ' + team_id + ' AND player_id = ' + rows[0].player_id, function (err, rows, fields) {
					if (err) throw err;
				});
			}

			connection.query('DELETE FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
				if (role > 0)
					bot.sendMessage(chat_id, "Sei stato espulso dal team per inattivit√† ed il tuo potere √® passato ad un altro membro del team");
				else
					bot.sendMessage(chat_id, "Sei stato espulso dal team per inattivit√†");
				connection.query('SELECT P.chat_id FROM player P, team_player T WHERE T.player_id = P.id AND T.team_id = ' + team_id + ' AND T.role = 1', function (err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(rows[0].chat_id, nickname + " √® stato espulso dal team per inattivit√†");
					removeFromAssault(player_id);
				});
			});
		});

		connection.query('UPDATE team SET players = players-1 WHERE id = ' + team_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});
};

function checkHeists() {
	connection.query('SELECT heist.id FROM `player`, heist WHERE player.id = heist.from_id AND heist.datetime < NOW() AND heist.datetime IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 ispezione terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " ispezioni terminate\x1b[0m");
			rows.forEach(setFinishedHeist);
		}
	});
};

function checkHeistsProgress() {
	connection.query('SELECT player.id, chat_id, changeComb, my_combination, to_id, nickname FROM player, heist_progress WHERE player.id = heist_progress.from_id AND heist_progress.wait_time < NOW() AND heist_progress.wait_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 ispezione progressiva terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " ispezioni progressive terminate\x1b[0m");
			rows.forEach(setFinishedHeistProgress);
		}
	});
};

function checkMana() {
	connection.query('SELECT player_id, chat_id FROM event_mana_status E, player P WHERE E.player_id = P.id AND time_start IS NOT NULL AND boost_time IS NULL AND boost_cnt < 3', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 evento mana lanciato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " eventi mana lanciati\x1b[0m");
			rows.forEach(setMana);
		}
	});
}

function setMana(element, index, array) {
	var rand = Math.random()*100;
	if (rand > 10)
		return;
	var player_id = element.player_id;
	var chat_id = element.chat_id;

	var d = new Date();
	d.setMinutes(d.getMinutes() + 5);
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

	connection.query('UPDATE event_mana_status SET boost_cnt = boost_cnt+1, boost_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;

		var kb = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Scava!"], ["Torna al menu"]]
			}
		};

		bot.sendMessage(chat_id, "Durante l'estrazione di Mana trovi una vena pi√π ricca del solito!\nHai tempo fino alle " + short_date + " prima che la zona crolli, scava!", kb);
	});
}

function checkExtraDust() {
	connection.query('SELECT player_id, chat_id FROM event_dust_status E, player P WHERE E.player_id = P.id AND extracting = 1 AND `generated` < max_qnt-10 AND boost_time IS NULL AND boost_cnt < 3', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 evento polvere lanciato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " eventi polvere lanciati\x1b[0m");
			rows.forEach(setExtraDust);
		}
	});
}

function setExtraDust(element, index, array) {
	var rand = Math.random()*100;
	if (rand > 10)
		return;
	var player_id = element.player_id;
	var chat_id = element.chat_id;

	var d = new Date();
	d.setMinutes(d.getMinutes() + 5);
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

	connection.query('UPDATE event_dust_status SET boost_cnt = boost_cnt+1, boost_time = "' + long_date + '" WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;

		var kb = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				keyboard: [["Spolvera!"], ["Torna al menu"]]
			}
		};

		bot.sendMessage(chat_id, "Durante la produzione del generatore arriva una folata di vento trascinando un po' di polvere!\nHai tempo fino alle " + short_date + " prima che voli via!", kb);
	});
}

function checkDust() {
	connection.query('SELECT player.nickname, event_dust_status.qnt, event_dust_status.generated, player.chat_id, event_dust_status.max_qnt, event_dust_status.id, player.id As player_id FROM event_dust_status, player WHERE player.id = event_dust_status.player_id AND extracting = 1 AND last_update < DATE_SUB(NOW(), INTERVAL 1 HOUR) AND notified = 0', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0)
			rows.forEach(setDust);
	});
};

function setDust(element, index, array) {
	var id = element.id;
	var player_id = element.player_id;
	var nick = element.nickname;
	var chat_id = element.chat_id;
	var max_qnt = element.max_qnt;
	var qnt = element.qnt;
	var generated = element.generated;

	connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 14', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0)
			qnt += parseInt(rows[0].ability_level);

		if (generated + qnt >= max_qnt) {
			bot.sendMessage(chat_id, "Il generatore √® pieno! Svuotalo per produrre altra polvere!");
			connection.query('UPDATE event_dust_status SET notified = 1 WHERE id = ' + id, function (err, rows, fields) {
				if (err) throw err;
			});
		}
		if (generated < max_qnt) {
			var d = new Date();
			var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
			if (generated + qnt > max_qnt)
				qnt = max_qnt - generated;
			connection.query('UPDATE event_dust_status SET `generated` = `generated`+' + qnt + ', last_update = "' + long_date + '" WHERE id = ' + id, function (err, rows, fields) {
				if (err) throw err;
			});
		}
	});
};

function checkAssaults() {
	connection.query('SELECT team_id, phase, boss_num FROM assault WHERE time_end < NOW() AND time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 fase assalto terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " fase assalto terminata\x1b[0m");
			rows.forEach(setFinishedAssaults);
		}
	});
};

function setFinishedAssaults(element, index, array) {
	var team_id = element.team_id;
	var phase = element.phase;
	var boss_num = element.boss_num;

	connection.query('SELECT player_id, chat_id FROM assault_place_player_id APP, player WHERE APP.player_id = player.id AND APP.team_id = ' + team_id + ' ORDER BY APP.id', function (err, rows, fields) {
		if (err) throw err;

		var text = "";
		if (phase == 1) {

			//console.log("Team " + team_id + " Fase 1 -> 2");

			// pulizia postazioni vuote ma costruite
			var place = connection_sync.query('SELECT AP.name, APT.level, APT.place_id, (SELECT COUNT(id) FROM assault_place_player_id WHERE place_id = APT.place_id AND team_id = ' + team_id + ') As players FROM assault_place_team APT, assault_place AP WHERE APT.place_id = AP.id AND team_id = ' + team_id + ' AND level > 0 HAVING players = 0');

			if (Object.keys(place).length > 0) {
				text += "Le seguenti postazioni sono state distrutte perch√® lasciate incustodite:\n";
				for (var i = 0, len = Object.keys(place).length; i < len; i++) {
					text += "> " + place[i].name + " (Lv " + place[i].level + ")\n";
					if (place[i].place_id == 1) {
						connection.query('DELETE FROM assault_place_magic WHERE team_id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
						});
						connection.query('DELETE FROM assault_place_player_id WHERE team_id = ' + team_id + ' AND place_id = 1', function (err, rows, fields) {
							if (err) throw err;
						});
					} else if (place[i].place_id == 2) {
						connection.query('DELETE FROM assault_place_cons WHERE team_id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
						});
						connection.query('DELETE FROM assault_place_player_id WHERE team_id = ' + team_id + ' AND place_id = 2', function (err, rows, fields) {
							if (err) throw err;
						});
					}
					connection.query('DELETE FROM assault_place_team WHERE team_id = ' + team_id + ' AND place_id = ' + place[i].place_id, function (err, rows, fields) {
						if (err) throw err;
					});
					connection.query('DELETE FROM assault_place_item WHERE team_id = ' + team_id + ' AND place_id = ' + place[i].place_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
				text += "\n";
			}

			// pulizia postazioni piene ma non costruite
			var place = connection_sync.query('SELECT AP.name, APT.level, APT.place_id, (SELECT COUNT(id) FROM assault_place_player_id WHERE place_id = APT.place_id AND team_id = ' + team_id + ') As players FROM assault_place_team APT, assault_place AP WHERE APT.place_id = AP.id AND team_id = ' + team_id + ' AND level = 0 HAVING players > 0');

			if (Object.keys(place).length > 0) {
				text += "Le seguenti postazioni sono state distrutte perch√® occupate ma non costruite:\n";
				for (var i = 0, len = Object.keys(place).length; i < len; i++) {
					text += "> " + place[i].name + "\n";
					connection.query('DELETE FROM assault_place_player_id WHERE team_id = ' + team_id + ' AND place_id = ' + place[i].place_id, function (err, rows, fields) {
						if (err) throw err;
					});
					connection.query('DELETE FROM assault_place_team WHERE team_id = ' + team_id + ' AND place_id = ' + place[i].place_id, function (err, rows, fields) {
						if (err) throw err;
					});
					connection.query('DELETE FROM assault_place_item WHERE team_id = ' + team_id + ' AND place_id = ' + place[i].place_id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
				text += "\n";
			}

			var elected = connection_sync.query('SELECT player_id FROM assault_place_player_id WHERE role = 1 AND team_id = ' + team_id);
			if (Object.keys(elected).length == 0) {
				var player = connection_sync.query('SELECT P.id, P.nickname FROM player P, assault_place_player_id AP WHERE P.id = AP.player_id AND team_id = ' + team_id + ' ORDER BY reborn DESC, exp DESC, RAND()');

				if (Object.keys(player).length > 0) {
					var nickname = player[0].nickname;
					var player_id = player[0].id;

					connection.query('UPDATE assault_place_player_id SET role = 1 WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});
					connection.query('UPDATE assault_place_player_id SET role = 0 WHERE team_id = ' + team_id + ' AND player_id != ' + player_id, function (err, rows, fields) {
						if (err) throw err;
					});
				} else {
					console.log("Assalto fallito per mancanza membri");
					text += "Nessun componente per iniziare, l'assalto √® <b>FALLITO</b>.";
					assaultEnd(team_id);
				}
			} else {
				var player = connection_sync.query('SELECT id, nickname FROM player WHERE id = ' + elected[0].player_id);

				var nickname = player[0].nickname;
			}

			text += "Il <b>Giorno dell'Assalto " + boss_num + "</b> ha inizio, entra in combattimento per ottenere la vittoria!\nL'eletto incaricato di guidare la battaglia √® <b>" + nickname + "</b> üó°";

			connection.query('UPDATE assault SET phase = ' + (phase+1) + ', refresh_mob = 1, time_end = DATE_ADD(NOW(), INTERVAL 1 DAY), expire_notify = 0 WHERE team_id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
			});

			connection.query('UPDATE assault_place_team SET life = total_life WHERE life > total_life AND team_id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
			});
		} else if (phase == 2) {

			//console.log("Team " + team_id + " Fase 2 -> Scaduto");

			text += "Il tempo a disposizione per l'assalto √® terminato! Non siete riusciti a completarlo in tempo, l'assalto √® <b>FALLITO</b>.";
			connection.query('UPDATE assault SET time_wait_end = DATE_ADD(NOW(), INTERVAL 1 DAY) WHERE team_id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
			});

			console.log("Assalto fallito per scadenza");
			assaultEnd(team_id);
		} else if (phase == 3) {
			connection.query('UPDATE assault SET phase = 1, time_end = DATE_ADD(NOW(), INTERVAL 1 DAY) WHERE team_id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
			});

			//console.log("Team " + team_id + " Fase 3 -> Fase 1");
			generateMobWeakness(team_id, 4);

			var regen = connection_sync.query('SELECT team_id, place_id, level FROM assault_place_team WHERE team_id = ' + team_id);
			if (Object.keys(regen).length > 0) {
				//console.log("Rigenerazione requisiti postazione in base ai livelli attuali per team " + team_id);
				for (var i = 0, len = Object.keys(regen).length; i < len; i++)
					regenItems(regen[i].team_id, regen[i].place_id, (regen[i].level-1));
			}

			connection.query('UPDATE assault_place_player_id SET killed = 0 WHERE team_id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
			});

			text += "Il <b>Giorno dell'Assalto " + (boss_num-1) + "</b> √® stato completato con successo!\n\nIl <b>Giorno della Preparazione</b> ha inizio, tutti i compagni sono usciti dall'infermeria, ora organizza le tue strutture per sopravvivere contro un altro boss!";
		} else {
			console.log("Errore phase non valida: " + phase);
			return;
		}

		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
			bot.sendMessage(rows[i].chat_id, text, html);
	});
};

function checkAssaultsMob() {
	connection.query('SELECT team_id, mob_count, boss_num, completed, lost FROM assault WHERE refresh_mob = 1', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 mob assalto generato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " mob assalto generati\x1b[0m");
			rows.forEach(setFinishedAssaultsMob);
		}
	});
};

function setFinishedAssaultsMob(element, index, array) {
	var team_id = element.team_id;
	var mob_count = element.mob_count;
	var boss_num = element.boss_num;
	var completed = element.completed+1;
	var lost = element.lost+1;

	var mob_name;
	var is_boss;

	var team = connection_sync.query('SELECT players, boss_count FROM team WHERE id = ' + team_id);		
	var team_players = team[0].players;
	var boss_count = team[0].boss_count;

	var boss = connection_sync.query('SELECT name, total_life FROM boss WHERE id = ' + boss_num);
	var mob_life = boss[0].total_life*(Math.sqrt(boss_count+1));
	mob_life = mob_life*0.8;

	var total_mob = 3;
	if (mob_count < total_mob) {	// Mob
		mob_name = mobGenerator.generate();
		mob_life = mob_life/(total_mob - mob_count + 2);
		is_boss = 0;
	} else {					// Boss
		mob_name = boss[0].name;
		is_boss = 1;
	}

	mob_life = Math.round(mob_life);
	// console.log("mob_life " + mob_life + " boss_num " + boss_num + " boss_count " + boss_count + " mob_count " + mob_count);

	connection.query('DELETE FROM assault_increment_history WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});

	connection.query('UPDATE assault SET refresh_mob = 0, mob_name = "' + mob_name + '", mob_life = ' + mob_life + ', mob_total_life = ' + mob_life + ', mob_paralyzed = 0, mob_critic = 0, is_boss = ' + is_boss + ' WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;

		connection.query('SELECT player_id, chat_id FROM team_player, player WHERE team_player.player_id = player.id AND holiday = 0 AND team_id = ' + team_id + ' ORDER BY team_player.id', function (err, rows, fields) {
			if (err) throw err;

			for (var i = 0, len = Object.keys(rows).length; i < len; i++)
				bot.sendMessage(rows[i].chat_id, "*" + mob_name + "* ha raggiunto la magione, entra in battaglia e difendila prima che venga distrutta!", mark);

			connection.query('SELECT player_id FROM assault_place_player_id WHERE role = 1 AND team_id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
				assaultIncrement(undefined, rows[0].player_id, team_id);
			});
		});
	});
};

function checkAssaultsItem() {
	connection.query('SELECT team_id, place_id, level FROM assault_place_team WHERE time_end < NOW() AND time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 costruzione assalto terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " costruzioni assalto terminate\x1b[0m");
			rows.forEach(setFinishedAssaultsItem);
		}
	});
};

function regenItems(team_id, place_id, level) {
	connection_sync.query('DELETE FROM assault_place_item WHERE team_id = ' + team_id + ' AND place_id = ' + place_id);
	if (place_id == 6) {
		var itemId = [68,69,70,71,72,73];
		var itemQuantity = [0,0,0,0,0,0];
		if (level == 0)
			itemQuantity = [5,0,0,0,0,0];
		else if (level == 1)
			itemQuantity = [5,5,0,0,0,0];
		else if (level == 2)
			itemQuantity = [7,5,3,0,0,0];
		else if (level == 3)
			itemQuantity = [10,7,3,0,0,0];
		else if (level == 4)
			itemQuantity = [13,10,4,2,0,0];
		else if (level == 5)
			itemQuantity = [15,13,7,4,0,0];
		else if (level == 6)
			itemQuantity = [17,15,10,7,2,0];
		else if (level == 7)
			itemQuantity = [20,17,13,10,4,0];
		else if (level == 8)
			itemQuantity = [23,20,15,13,7,0];
		else if (level == 9)
			itemQuantity = [25,23,17,15,10,3];

		for (var j = 0; j < Object.keys(itemId).length; j++) {
			if (itemQuantity[j] > 0)
				connection_sync.query("INSERT INTO assault_place_item (team_id, place_id, item_id, quantity) VALUES (" + team_id + "," + place_id + "," + itemId[j] + "," + itemQuantity[j] + ")");
		}
	} else if (place_id == 7) {
		var rarityName = ["NC","R","UR","L","E"];
		var rarityQuantity = [0,0,0,0,0];
		if (level == 0)
			rarityQuantity = [2,0,0,0,0];
		else if (level == 1)
			rarityQuantity = [2,1,0,0,0];
		else if (level == 2)
			rarityQuantity = [2,2,1,0,0];
		else if (level == 3)
			rarityQuantity = [2,2,2,1,0];
		else if (level == 4)
			rarityQuantity = [4,2,2,1,0];
		else if (level == 5)
			rarityQuantity = [4,4,2,1,0];
		else if (level == 6)
			rarityQuantity = [6,4,2,1,0];
		else if (level == 7)
			rarityQuantity = [6,6,4,2,0];
		else if (level == 8)
			rarityQuantity = [8,6,4,2,1];
		else if (level == 9)
			rarityQuantity = [10,8,6,4,2];

		var items;
		var quantity = 0;
		for (var k = 0; k < rarityQuantity.length; k++) {
			items = connection_sync.query("SELECT id FROM item WHERE rarity = '" + rarityName[k] + "' AND craftable = 1 AND ((power > 0 OR power_armor < 0 OR power_shield < 0) AND dragon_power = 0) AND cons = 0 AND id NOT IN (SELECT item_id FROM assault_place_item WHERE team_id = " + team_id + " AND place_id = " + place_id + ") ORDER BY RAND() LIMIT " + rarityQuantity[k]);
			//quantity = Math.round(((rarityQuantity.length+1)-i)/2)+player_num; // ipoteticamente max 6, min 3
			quantity = Math.round(Math.random()*2+2);
			for (var j = 0; j < Object.keys(items).length; j++)
				connection_sync.query("INSERT INTO assault_place_item (team_id, place_id, item_id, quantity) VALUES (" + team_id + "," + place_id + "," + items[j].id + "," + quantity + ")");
		}
	} else if (place_id == 8) {
		var rarityName = ["L","E"];
		var rarityQuantity = [1,0];
		if (level == 0)
			rarityQuantity = [2,0];
		else if (level == 1)
			rarityQuantity = [3,0];
		else if (level == 2)
			rarityQuantity = [4,0];
		else if (level == 3)
			rarityQuantity = [4,1];
		else if (level == 4)
			rarityQuantity = [4,2];
		else if (level == 5)
			rarityQuantity = [4,3];
		else if (level == 6)
			rarityQuantity = [4,4];
		else if (level == 7)
			rarityQuantity = [5,4];
		else if (level == 8)
			rarityQuantity = [6,4];
		else if (level == 9)
			rarityQuantity = [7,5];

		var items;
		var quantity = 0;
		for (var k = 0; k < rarityQuantity.length; k++) {
			items = connection_sync.query("SELECT id FROM item WHERE rarity = '" + rarityName[k] + "' AND craftable = 1 AND power = 0 AND power_armor = 0 AND power_shield = 0 AND dragon_power = 0 AND name NOT LIKE 'Talismano%' AND id NOT IN (SELECT item_id FROM assault_place_item WHERE team_id = " + team_id + " AND place_id = " + place_id + ") ORDER BY RAND() LIMIT " + rarityQuantity[k]);
			//quantity = Math.round(((rarityQuantity.length+1)-i)/2)+player_num; // ipoteticamente max 6, min 3
			quantity = Math.round(Math.random()*2+2);
			for (var j = 0; j < Object.keys(items).length; j++)
				connection_sync.query("INSERT INTO assault_place_item (team_id, place_id, item_id, quantity) VALUES (" + team_id + "," + place_id + "," + items[j].id + "," + quantity + ")");
		}
	} else {
		var rarityName = ["NC","R","UR","L","E"];
		var rarityQuantity = [0,0,0,0,0];
		if (level == 0)
			rarityQuantity = [3,0,0,0,0];
		else if (level == 1)
			rarityQuantity = [3,3,0,0,0];
		else if (level == 2)
			rarityQuantity = [6,6,0,0,0];
		else if (level == 3)
			rarityQuantity = [6,6,3,0,0];
		else if (level == 4)
			rarityQuantity = [9,6,6,0,0];
		else if (level == 5)
			rarityQuantity = [9,9,6,0,0];
		else if (level == 6)
			rarityQuantity = [9,9,9,3,0];
		else if (level == 7)
			rarityQuantity = [9,9,9,6,0];
		else if (level == 8)
			rarityQuantity = [12,12,12,9,0];
		else if (level == 9)
			rarityQuantity = [12,12,12,12,0];

		var items;
		var quantity = 0;
		for (var k = 0; k < rarityQuantity.length; k++) {
			items = connection_sync.query("SELECT id FROM item WHERE rarity = '" + rarityName[k] + "' AND craftable = 1 AND power = 0 AND power_armor = 0 AND power_shield = 0 AND dragon_power = 0 AND name NOT LIKE 'Talismano%' AND id NOT IN (SELECT item_id FROM assault_place_item WHERE team_id = " + team_id + " AND place_id = " + place_id + ") ORDER BY RAND() LIMIT " + rarityQuantity[k]);
			//quantity = Math.round(((rarityQuantity.length+1)-i)/2)+player_num; // ipoteticamente max 6, min 3
			quantity = Math.round(Math.random()*2+2);
			for (var j = 0; j < Object.keys(items).length; j++)
				connection_sync.query("INSERT INTO assault_place_item (team_id, place_id, item_id, quantity) VALUES (" + team_id + "," + place_id + "," + items[j].id + "," + quantity + ")");
		}
	}

	var extra_life = "";
	if (place_id == 5) {
		var class_bonus = connection_sync.query("SELECT COUNT(APP.id) As cnt FROM assault_place AP, assault_place_player_id APP, player P WHERE P.id = APP.player_id AND APP.place_id = AP.id AND AP.class_bonus = P.class AND APP.team_id = " + team_id + " AND AP.id = 5");
		var class_bonus_val = 0;
		if (class_bonus[0].cnt > 0)
			class_bonus_val = class_bonus[0].cnt*5;

		var team = connection_sync.query('SELECT boss_count FROM team WHERE id = ' + team_id);
		var assault = connection_sync.query('SELECT boss_num, mob_turn, lost FROM assault WHERE team_id = ' + team_id);
		var players_num = connection_sync.query("SELECT COUNT(id) As cnt FROM assault_place_player_id WHERE team_id = " + team_id);
		var mob_damage = mobDamage(team[0].boss_count, players_num[0].cnt, assault[0].boss_num, 1, assault[0].mob_turn, assault[0].lost, 1);
		//var place = connection_sync.query('SELECT level FROM assault_place_team WHERE place_id = 5 AND team_id = ' + team_id);
		var players = connection_sync.query('SELECT COUNT(id) As cnt FROM assault_place_player_id WHERE place_id = 5 AND team_id = ' + team_id);
		var wall_max_life = mob_damage * (level+1) * players[0].cnt;
		wall_max_life += wall_max_life*(class_bonus_val/100);
		wall_max_life = Math.round(wall_max_life);

		//console.log("Mura aggiornamento: " + team_id + " " + formatNumber(wall_max_life));

		connection.query('UPDATE assault_place_team SET life = ' + wall_max_life + ', total_life = ' + wall_max_life + ' WHERE place_id = 5 AND team_id = ' + team_id, function (err, rows, fields) {
			if (err) throw err;
		});
	}
}

function setFinishedAssaultsItem(element, index, array) {
	var place_id = element.place_id;
	var team_id = element.team_id;
	var level = element.level;		// livello attuale, non di destinazione
	connection.query('SELECT name FROM assault_place WHERE id = ' + place_id, function (err, rows, fields) {
		if (err) throw err;
		var name = rows[0].name;
		connection.query('SELECT chat_id FROM assault_place_player_id APP, player WHERE APP.player_id = player.id AND place_id = ' + place_id + ' AND team_id = ' + team_id + ' ORDER BY APP.id', function (err, rows, fields) {
			if (err) throw err;

			var player_num = Object.keys(rows).length;
			for (var i = 0; i < player_num; i++)
				bot.sendMessage(rows[i].chat_id, "La postazione *" + name + "* ha raggiunto il livello " + (level+1) + "!", mark);

			regenItems(team_id, place_id, level);

			connection.query('UPDATE assault_place_team SET time_end = NULL, level = level+1, life = total_life WHERE team_id = ' + team_id + ' AND place_id = ' + place_id, function (err, rows, fields) {
				if (err) throw err;
			});
		});
	});
};

function checkAssaultsExpire() {
	connection.query('SELECT team_id FROM assault WHERE phase = 2 AND expire_notify = 0 AND DATE_SUB(time_end, INTERVAL 2 HOUR) < NOW() AND time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 avviso scadenza assalto inviato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " avvisi scadenza assalto inviati\x1b[0m");
			rows.forEach(setFinishedAssaultsExpire);
		}
	});
};

function setFinishedAssaultsExpire(element, index, array) {
	var team_id = element.team_id;

	connection.query('SELECT player_id, chat_id FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' ORDER BY team_player.id', function (err, rows, fields) {
		if (err) throw err;

		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
			bot.sendMessage(rows[i].chat_id, "Il *Giorno dell'Assalto* si concluder√† tra meno di 2 ore, forza!", mark);

		connection.query('UPDATE assault SET expire_notify = 1 WHERE team_id = ' + team_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});
};

function checkAssaultsEnd() {
	connection.query('SELECT team_id FROM assault WHERE time_wait_end < NOW() AND time_wait_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 attesa fine assalto terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " attesa fine assalto terminata\x1b[0m");
			rows.forEach(setFinishedAssaultsEnd);
		}
	});
};

function setFinishedAssaultsEnd(element, index, array) {
	var team_id = element.team_id;

	connection.query('SELECT player_id, chat_id FROM team_player, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' ORDER BY team_player.id', function (err, rows, fields) {
		if (err) throw err;

		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
			bot.sendMessage(rows[i].chat_id, "Il nuovo assalto √® disponibile!", mark);

		connection.query('UPDATE assault_place SET time_wait_end = NULL WHERE team_id = ' + team_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});
};

function checkAssaultsLock() {
	connection.query('SELECT team_id FROM assault WHERE lock_time_end < NOW() AND lock_time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 incita assalto terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " incita assalto terminati\x1b[0m");
			rows.forEach(setFinishedAssaultsLock);
		}
	});
	connection.query('SELECT team_id FROM assault WHERE elected_lock_time_end < NOW() AND elected_lock_time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 incita assalto da eletto terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " incita assalto da eletto terminati\x1b[0m");
			rows.forEach(setFinishedAssaultsLock2);
		}
	});
	connection.query('SELECT team_id FROM assault WHERE weak_time_end < NOW() AND weak_time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 rapporto incarico terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " rapporti incarico terminati\x1b[0m");
			rows.forEach(setFinishedAssaultsLock3);
		}
	});	
};

function setFinishedAssaultsLock(element, index, array) {
	var team_id = element.team_id;

	connection.query('UPDATE assault SET lock_time_end = NULL WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
};

function setFinishedAssaultsLock2(element, index, array) {
	var team_id = element.team_id;

	connection.query('UPDATE assault SET elected_lock_time_end = NULL WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
};

function setFinishedAssaultsLock3(element, index, array) {
	var team_id = element.team_id;

	connection.query('SELECT P.chat_id FROM assault_place_player_id APP, player P, team_player TP WHERE TP.player_id = P.id AND APP.player_id = P.id AND APP.team_id = ' + team_id + ' AND TP.notification = 1 ORDER BY APP.id', function (err, rows, fields) {
		if (err) throw err;
		for (var i = 0, len = Object.keys(rows).length; i < len; i++)
			bot.sendMessage(rows[i].chat_id, "Il <b>report</b> debolezze dell'Assalto √® stato decifrato correttamente!", html);
	});

	connection.query('UPDATE assault SET weak_time_end = NULL, weak_unlocked = 1 WHERE team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
};

function checkMissions() {
	connection.query('SELECT nickname, id, mission_id, chat_id, charm_id, class, global_end, mission_auto_id, boost_id, boost_mission, reborn, exp, mission_gem, mission_count, global_end FROM player WHERE mission_time_end < NOW() AND mission_time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 missione terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " missioni terminate\x1b[0m");
			rows.forEach(setFinishedMission);
		}
	});
};

function checkTeamMissions() {
	connection.query('SELECT party_id, assigned_to, part_id, team_id, report_id, text_user FROM mission_team_party T WHERE T.mission_time_end < NOW() AND T.mission_time_end IS NOT NULL AND wait = 0', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 missione team terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " missioni team terminate\x1b[0m");
			rows.forEach(setFinishedTeamMission);
		}
	});
};

function setFinishedTeamMission(element, index, array) {
	var party_id = element.party_id;
	var assigned_to = element.assigned_to;
	var part_id = element.part_id;
	var team_id = element.team_id;
	var report_id = element.report_id;
	var text_user = element.text_user;

	var new_part_id = (part_id+1);

	connection.query('SELECT question, answ1, answ2, answ3 FROM mission_team_list_part WHERE list_id = ' + assigned_to + ' AND part_id = ' + new_part_id, function (err, rows, fields) {
		if (err) throw err;

		if ((Object.keys(rows).length == 0) && (new_part_id > 1)) {
			connection.query('SELECT pnt, text FROM mission_team_report WHERE report_id = ' + report_id, function (err, rows, fields) {
				if (err) throw err;

				var endText = "";
				var rewardText = "";
				var totPnt = 0;
				if (Object.keys(rows).length == 0) {
					console.log("Errore messaggio incarico vuoto per report_id " + report_id);
				}
				for (i = 0; i < Object.keys(rows).length; i++) {
					endText += rows[i].text;
					totPnt += rows[i].pnt;
				}

				connection.query('SELECT end_text FROM mission_team_list_part WHERE list_id = ' + assigned_to + ' ORDER BY part_id DESC', function (err, rows, fields) {
					if (err) throw err;

					if (rows[0].end_text != null)
						endText += "\n" + rows[0].end_text;

					connection.query('SELECT mandator, parts FROM mission_team_list WHERE id = ' + assigned_to, function (err, rows, fields) {
						if (err) throw err;

						var parts = rows[0].parts;
						var mandator = rows[0].mandator;

						connection.query('SELECT AVG(complex) As diff, reward_code, duration, parts, progress_num FROM mission_team_list L, mission_team_requirement R WHERE L.requirement_id = R.requirement_id AND L.id = ' + assigned_to, function (err, rows, fields) {
							if (err) throw err;

							var complex = rows[0].diff;
							var duration = rows[0].duration;
							var parts = rows[0].parts;
							var progress_num = rows[0].progress_num;
							var rewardLevel = Math.ceil((totPnt/parts)/(3.5-complex/4))*Math.round(Math.log2(parts)+1)*2;
							var rewardQuery = "";
							var rewardStr = rows[0].reward_code.split(":");

							var paPnt = 10;
							if (luckyMode == 1) {
								var d = new Date();
								if (d.getDay() == 6)
									paPnt = paPnt*2;
								else if (d.getDay() == 0) {
									var r = Math.random() * 100;
									if (r < 50)
										paPnt = 0;
									else if ((r > 50) && (r < 75))
										paPnt = paPnt*3;
								}
							}

							var expPnt = Math.floor((duration*(parts+1))/60/60);
							var qnt = rewardLevel*rewardStr[0];
							if (paPnt > 0)
								rewardText += "\n> " + paPnt + " ü¶ã (team)";
							if (expPnt > 0)
								rewardText += "\n> " + expPnt + " exp (a testa)";
							var isExp = 0;
							var isItem = 0;
							var isChest = 0;

							if (crazyMode == 1)
								qnt += qnt*0.5;

							// la query viene eseguita qnt volte

							if (rewardStr[1].indexOf("item") != -1) {
								var itemid = rewardStr[1].match(/\d+/g)[0];		// es: 1:item10
								var item = connection_sync.query("SELECT name, rarity FROM item WHERE id = " + itemid);
								qnt = Math.ceil(qnt);	// per gestire i 0.x nel db
								rewardText += "\n> " + qnt + "x " + item[0].name + " (" + item[0].rarity + ") (a testa)";
								isItem = 1;
							} else if (rewardStr[1] == "mana1") {
								rewardText += "\n> " + qnt + "x üåä Mana Blu (a testa)";
								rewardQuery = "UPDATE event_mana_status M, player P SET M.mana_1 = M.mana_1+1 WHERE M.player_id = P.id AND P.id = %playerid%";
							} else if (rewardStr[1] == "mana2") {
								rewardText += "\n> " + qnt + "x ‚ö°Ô∏è Mana Giallo (a testa)";
								rewardQuery = "UPDATE event_mana_status M, player P SET M.mana_2 = M.mana_2+1 WHERE M.player_id = P.id AND P.id = %playerid%";
							} else if (rewardStr[1] == "mana3") {
								rewardText += "\n> " + qnt + "x üî• Mana Rosso (a testa)";
								rewardQuery = "UPDATE event_mana_status M, player P SET M.mana_3 = M.mana_3+1 WHERE M.player_id = P.id AND P.id = %playerid%";
							} else if (rewardStr[1] == "mana") {
								rewardText += "\n> " + qnt + "x üåä‚ö°Ô∏èüî• Mana tutti i tipi (a testa)";
								rewardQuery = "UPDATE event_mana_status M, player P SET M.mana_1 = M.mana_1+1, M.mana_2 = M.mana_2+1, M.mana_3 = M.mana_3+1 WHERE M.player_id = P.id AND P.id = %playerid%";
							} else if (rewardStr[1] == "gems") {
								qnt = Math.floor(qnt/3);
								rewardText += "\n> " + qnt + "x üíé (a testa)";
								rewardQuery = "UPDATE player SET gems = gems+1 WHERE id = %playerid%";
							} else if (rewardStr[1] == "dust") {
								var itemid = 646;
								rewardText += "\n> " + qnt + "x Polvere (a testa)";
								isItem = 1;
							} else if (rewardStr[1] == "exp") {
								rewardText += "\n> " + qnt + " exp (a testa)";
								rewardQuery = "";
								isExp = 1;
							} else if (rewardStr[1].indexOf("chest") != -1) {
								var chestid = rewardStr[1].match(/\d+/g)[0];
								var chest = connection_sync.query("SELECT name, rarity_shortname FROM chest WHERE id = " + chestid);
								rewardText += "\n> " + qnt + "x " + chest[0].name + " (" + chest[0].rarity_shortname + ") (a testa)";
								isChest = 1;
							} else if (rewardStr[1] == "money") {
								rewardText += "\n> " + formatNumber(qnt*1000) + " ¬ß (a testa)";
								rewardQuery = "UPDATE player SET money = money+1000 WHERE id = %playerid%";
							} else if (rewardStr[1] == "rune") {
								var rand = Math.random()*100;
								if (rand < (rewardLevel/2)) {	// max 10% circa
									var itemid = 764;
									qnt = 1;
									rewardText += "\n> 1x Runa Necro (X) (a testa)";
								} else {
									var item = connection_sync.query("SELECT id, name, rarity FROM item WHERE name LIKE 'Runa%' AND rarity != 'X' ORDER BY RAND()");
									var itemid = item[0].id;
									qnt = Math.floor(rewardLevel/4)+1;
									if (crazyMode == 1) {
										qnt += qnt*0.5;
										qnt = Math.ceil(qnt);
									}
									rewardText += "\n> " + qnt + "x " + item[0].name + " (" + item[0].rarity + ") (a testa)";
								}
								isItem = 1;
							} else if (rewardStr[1] == "pietre") {
								qnt = Math.round(qnt/2);
								for (i = 4; i > 0; i--) {
									if (qnt % (i+1) === 0)
										break;
								}
								var val = (i+1);
								qnt = qnt/val;
								if (crazyMode == 1) {
									qnt += qnt*0.5;
									qnt = Math.ceil(qnt);
								}
								var item = connection_sync.query("SELECT id, name, rarity FROM item WHERE id = " + (68+val));
								var itemid = item[0].id;
								rewardText += "\n> " + qnt + "x " + item[0].name + " (" + item[0].rarity + ") (a testa)";
								isItem = 1;
							} else {
								console.log("Errore premi");
								return;
							}

							//console.log("Reward incarico: " + rewardStr + " - " + qnt)

							connection.query('SELECT P.chat_id, T.team_id, P.id, TP.suspended, P.nickname, P.boost_id, P.boost_mission, global_end FROM mission_team_party_player T, player P, team_player TP WHERE TP.player_id = P.id AND T.player_id = P.id AND T.party_id = ' + party_id + ' AND T.team_id = ' + team_id, function (err, rows, fields) {
								if (err) throw err;

								var savedQnt = qnt;
								var extra = "";

								var mission_time_count = Math.floor((duration*(parts+1))/60/60); // ore

								for (i = 0; i < Object.keys(rows).length; i++) {
									if (rows[i].suspended == 0) {

										qnt = savedQnt;

										var extra = "";
										/*
										if (rows[i].global_end == 1) {
											if ((qnt >= 100) || (rewardStr[1] == "money"))
												qnt += qnt*0.2;
											else
												qnt++;
											if ((isItem == 1) && (itemid == 764))
												qnt = 1;
											qnt = Math.round(qnt);
											var extra_val = (qnt-savedQnt);
											if (rewardStr[1] == "money")
												extra_val = extra_val*1000;
											console.log("Incarico: " + rewardStr[1] + " " + extra_val);
											extra = "\n\nQuantit√† incrementata di +" + extra_val + " per il bonus globale";
										}
										*/

										bot.sendMessage(rows[i].chat_id, "Hai completato l'incarico insieme al tuo party come richiesto da " + mandator + "!\nEcco il rapporto dell'incarico:\n<i>" + endText + "</i>\n\nL'ufficio incarichi vi premia con: " + rewardText + extra, html);

										if (isExp == 1)
											setExp(rows[i].id, qnt);
										else if (isItem == 1)
											addItem(rows[i].id, itemid, qnt);
										else if (isChest == 1)
											addChest(rows[i].id, chestid, qnt);
										else {
											for (j = 0; j < qnt; j++) {
												connection.query(rewardQuery.replace("%playerid%", rows[i].id), function (err, rows, fields) {
													if (err) throw err;
												});
											};
											if (rewardStr[1] == "mana")
												setAchievement(rows[i].id, 81, qnt*3);
										}

										setAchievement(rows[i].id, 22, 1);

										if (rows[i].boost_id == 5) {
											var rand = Math.random()*100;
											if (rand < 25)
												expPnt = expPnt*2;
											setBoost(rows[i].id, rows[i].boost_mission, rows[i].boost_id);
										}

										setExp(rows[i].id, expPnt); // exp a tutti

										if (villa == 1) {
											var villaPnt = connection_sync.query('SELECT player_id, points FROM event_villa_status WHERE player_id = ' + rows[i].id);
											if (Object.keys(villaPnt).length > 0) {
												var points = parseInt(villaPnt[0].points);
												connection_sync.query('UPDATE event_villa_status SET points = points+' + parts + ' WHERE player_id = ' + rows[i].id);
												bot.sendMessage(rows[i].chat_id, "Hai ricevuto " + parts + " punti per l'evento della Villa di LastSoldier95! Ora ne possiedi *" + (points + parts) + "*!", mark);
												//console.log("Consegnati " + parts + " punti a " + rows[i].nickname);
											};
										}
									} else {
										bot.sendMessage(rows[i].chat_id, "Hai completato l'incarico insieme al tuo party come richiesto da " + mandator + "!\nEcco il rapporto dell'incarico:\n<i>" + endText + "</i>\n\nNon ricevi ricompense poich√® sei stato sospeso dall'amministratore", html);
									}
									connection.query('UPDATE player SET mission_party = 0, mission_team_count = mission_team_count+1 WHERE id = ' + rows[i].id, function (err, rows, fields) {
										if (err) throw err;
									});
								}

								connection.query('SELECT player.chat_id, player.id FROM team_player, player WHERE team_player.player_id = player.id AND team_player.role IN (1,2) AND team_id = ' + team_id, function (err, rows, fields) {
									if (err) throw err;
									for (i = 0; i < Object.keys(rows).length; i++)		// In caso di pi√π admin
										bot.sendMessage(rows[i].chat_id, "Il Party " + party_id + " ha completato l'incarico assegnato!");

									connection.query('UPDATE team SET mission_count = mission_count+1, point = point+' + paPnt + ', mission_time_count = mission_time_count + ' + mission_time_count + ', mission_week_count = mission_week_count+1 WHERE id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});

									if (progress_num > 0) {	
										if (progress_num == 3)
											progress_num = 0;
										connection.query('UPDATE mission_team_party SET progress = ' + progress_num + ' WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
											if (err) throw err;
										});
									}

									// Pulizia (aggiorna anche l'altra)
									connection.query('UPDATE mission_team_party SET part_id = 0, assigned_to = NULL, report_id = NULL, mission_start = NULL, mission_time_end = NULL, wait = 0, mission_time_limit = NULL, text_user = NULL WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
										if (err) throw err;
									});
									connection.query('UPDATE mission_team_party_player SET answ_id = 0 WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
										if (err) throw err;
									});
									/*	// Mantenere per log?
									connection.query('DELETE FROM mission_team_report WHERE team_id = ' + team_id + ' AND party_id = ' + party_id + ' AND report_id = ' + report_id, function (err, rows, fields) {
										if (err) throw err;
									});
									*/
								});
							});
						});
					});
				});
			});
			return;
		}

		var question = rows[0].question;
		var answ1 = rows[0].answ1;
		var answ2 = rows[0].answ2;
		var answ3 = rows[0].answ3;
		var answer_list = "";

		if ((answ1.length > 45) || (answ2.length > 45) || (answ3.length > 45))
			answer_list = "\n\n1: " + answ1 + "\n2: " + answ2 + "\n3: " + answ3;

		connection.query('SELECT text FROM mission_team_report WHERE report_id = ' + report_id + ' ORDER BY id DESC', function (err, rows, fields) {
			if (err) throw err;

			var last_answer = "";
			if (Object.keys(rows).length > 0) {
				last_answer = capitalizeFirstLetter(rows[0].text);
			}

			connection.query('UPDATE mission_team_party_player SET answ_id = 0 WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
				if (err) throw err;
				connection.query('UPDATE mission_team_party SET part_id = ' + new_part_id + ', wait = 1 WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
					if (err) throw err;
					connection.query('SELECT P.chat_id, P.nickname FROM mission_team_party_player T, player P WHERE T.player_id = P.id AND T.party_id = ' + party_id + ' AND T.team_id = ' + team_id + ' ORDER BY RAND()', function (err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0) {
							console.log("Party senza membri: " + party_id + " del team " + team_id);
							return;
						}

						var iKeys = [];
						iKeys.push([{
							text: answ1,
							callback_data: "team_miss:1:" + new_part_id
						}]);
						iKeys.push([{
							text: answ2,
							callback_data: "team_miss:2:" + new_part_id
						}]);
						iKeys.push([{
							text: answ3,
							callback_data: "team_miss:3:" + new_part_id
						}]);

						if (text_user == null) {
							// order by rand per %casuale%
							question = question.replace("%casuale%", rows[0].nickname);
						} else {
							question = question.replace("%casuale%", text_user);
						}

						var team = connection_sync.query('SELECT name FROM team WHERE id = ' + team_id);
						question = question.replace(new RegExp("%team%", "g"), team[0].name);

						for (i = 0; i < Object.keys(rows).length; i++) {
							bot.sendMessage(rows[i].chat_id, "<b>Incarico in corso</b>\n\n" + last_answer + question + answer_list + "\n", {parse_mode: 'HTML', reply_markup: {inline_keyboard: iKeys}});
						}

						connection.query('UPDATE mission_team_party SET text_user = "' + rows[0].nickname + '" WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
							if (err) throw err;
						});
					});
				});
			});
		});
	});
};

bot.onText(/^\/elimina$|^\/elimina (.+)/, function (message, match) {

	if (!checkSpam(message))
		return;

	connection.query('SELECT player_id, team_id, role FROM team_player WHERE player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			bot.sendMessage(message.chat.id, "Non sei in team");
			return;
		}

		var player_id = rows[0].player_id;
		var team_id = rows[0].team_id;

		if (rows[0].role == 0) {
			bot.sendMessage(message.chat.id, "Devi essere amministratore o vice per utilizzare questo comando");
			return;
		}

		if (match[1] == undefined) {
			bot.sendMessage(message.chat.id, "Specifica i numeri dei party, esempio: /elimina 1,2,3");
			return;
		}

		var regParty = new RegExp("^[0-9,]+$");
		if (regParty.test(match[1]) == false) {
			bot.sendMessage(message.chat.id, "Solo numeri e virgole, grazie");
			return;
		}

		connection.query('SELECT party_id, assigned_to FROM mission_team_party WHERE party_id IN (' + match[1] + ') AND team_id = ' + team_id, function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Nessun party trovato per i numeri inseriti");
				return;
			}

			for (i = 0; i < Object.keys(rows).length; i++) {
				if (rows[i].assigned_to != null) {
					bot.sendMessage(message.chat.id, "Il party " + rows[i].party_id + " √® assegnato ad un incarico!");
					return;
				}

				connection.query('SELECT P.id, P.chat_id FROM player P, mission_team_party_player M WHERE P.id = M.player_id AND M.party_id = ' + rows[i].party_id + ' AND M.team_id = ' + team_id, function (err, rows2, fields) {
					if (err) throw err;
					for(k = 0; k < Object.keys(rows2).length; k++) {
						connection.query("UPDATE player SET mission_party = 0 WHERE id = " + rows2[k].id, function (err, rows, fields) {
							if (err) throw err;
						});
						bot.sendMessage(rows2[k].chat_id, "Il tuo Party √® stato sciolto dall'amministratore");
					}
				});

				connection.query('DELETE FROM mission_team_party_player WHERE team_id = ' + team_id + ' AND party_id = ' + rows[i].party_id, function (err, rows, fields) {
					if (err) throw err;
				});
				connection.query('DELETE FROM mission_team_party WHERE team_id = ' + team_id + ' AND party_id = ' + rows[i].party_id, function (err, rows, fields) {
					if (err) throw err;
				});
				connection.query('DELETE FROM mission_team_report WHERE team_id = ' + team_id + ' AND party_id = ' + rows[i].party_id, function (err, rows, fields) {
					if (err) throw err;
				});
			}

			bot.sendMessage(message.chat.id, "Party sciolti!");
		});
	});
});

bot.onText(/^\/incarico/, function (message, match) {

	if (!checkSpam(message))
		return;

	connection.query('SELECT team_id, party_id, answ_id FROM mission_team_party_player WHERE player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0) {
			bot.sendMessage(message.chat.id, "Non sei in team o in un party", back);
			return;
		}

		var party_id = rows[0].party_id;
		var team_id = rows[0].team_id;

		if (rows[0].answ_id > 0) {
			bot.sendMessage(message.chat.id, "Hai gi√† votato per questa parte di incarico", back);
			return;
		}

		connection.query('SELECT party_id, assigned_to, part_id, team_id, report_id FROM mission_team_party T WHERE T.party_id = ' + party_id + ' AND T.team_id = ' + team_id + ' AND wait = 1', function (err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0) {
				bot.sendMessage(message.chat.id, "Nessun incarico valido da richiamare", back);
				return;
			}

			var assigned_to = rows[0].assigned_to;
			var part_id = rows[0].part_id;
			var report_id = rows[0].report_id;

			//console.log("Richiamo manuale incarico per party " + party_id + " e team " + team_id);

			connection.query('SELECT question, answ1, answ2, answ3 FROM mission_team_list_part WHERE list_id = ' + assigned_to + ' AND part_id = ' + part_id, function (err, rows, fields) {
				if (err) throw err;

				var question = rows[0].question;
				var answ1 = rows[0].answ1;
				var answ2 = rows[0].answ2;
				var answ3 = rows[0].answ3;

				connection.query('SELECT text FROM mission_team_report WHERE report_id = ' + report_id + ' ORDER BY id DESC', function (err, rows, fields) {
					if (err) throw err;

					var last_answer = "";
					if (Object.keys(rows).length > 0)
						last_answer = capitalizeFirstLetter(rows[0].text);

					var iKeys = [];
					iKeys.push([{
						text: answ1,
						callback_data: "team_miss:1:" + part_id
					}]);
					iKeys.push([{
						text: answ2,
						callback_data: "team_miss:2:" + part_id
					}]);
					iKeys.push([{
						text: answ3,
						callback_data: "team_miss:3:" + part_id
					}]);

					question = question.replace("%casuale%", "qualcuno");

					bot.sendMessage(message.chat.id, "<b>Incarico in corso</b>\n\n" + last_answer + question + "\n", {parse_mode: 'HTML', reply_markup: {inline_keyboard: iKeys}});
				});
			});
		});
	});
});

function capitalizeFirstLetter(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}

function checkSpecialMissions() {
	connection.query('SELECT nickname, id, mission_special_id, chat_id FROM `player` WHERE mission_special_time_end < NOW() AND mission_special_time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 itinerario terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " itinerari terminati\x1b[0m");
			rows.forEach(setFinishedSpecialMission);
		}
	});
};

function checkEnchant() {
	connection.query('SELECT id, chat_id FROM `player` WHERE weapon_enchant_end < NOW() AND weapon_enchant_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 incantamento arma terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " incantamento terminato\x1b[0m");
			rows.forEach(setFinishedEnchant1);
		}
	});
};

function checkEnchant2() {
	connection.query('SELECT id, chat_id FROM `player` WHERE weapon2_enchant_end < NOW() AND weapon2_enchant_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 incantamento armatura terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " incantamento terminato\x1b[0m");
			rows.forEach(setFinishedEnchant2);
		}
	});
};

function checkEnchant3() {
	connection.query('SELECT id, chat_id FROM `player` WHERE weapon3_enchant_end < NOW() AND weapon3_enchant_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 incantamento scudo terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " incantamento terminato\x1b[0m");
			rows.forEach(setFinishedEnchant3);
		}
	});
};

function setFinishedEnchant1(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;

	connection.query('UPDATE player SET weapon_enchant_end = NULL, weapon_enchant = 0, weapon_enchant_bonus = 0 WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "L'incantamento dell'arma √® terminato");
	});
};

function setFinishedEnchant2(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;

	connection.query('UPDATE player SET weapon2_enchant_end = NULL, weapon2_enchant = 0, weapon2_enchant_bonus = 0 WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "L'incantamento dell'armatura √® terminato");
	});
};

function setFinishedEnchant3(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;

	connection.query('UPDATE player SET weapon3_enchant_end = NULL, weapon3_enchant = 0, weapon3_enchant_bonus = 0 WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "L'incantamento dello scudo √® terminato");
	});
};

function checkDragonArena() {
	connection.query('SELECT player_id, chat_id, reborn FROM player, event_arena_status WHERE event_arena_status.player_id = player.id AND fight_time < NOW() AND fight_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 scontro drago terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " draghi terminati\x1b[0m");
			rows.forEach(setFinishedArena);
		}
	});
};

function checkMerchant() {
	connection.query('SELECT M.player_id, P.chat_id, M.day_cnt FROM player P, merchant_offer M WHERE P.id = M.player_id AND M.time_end < NOW() AND M.time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 contrabbandiere terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " contrabbandieri terminati\x1b[0m");
			rows.forEach(setFinishedMerchant);
		}
	});
};

function setFinishedMerchant(element, index, array) {
	var player_id = element.player_id;
	var chat_id = element.chat_id;
	var day_cnt = element.day_cnt;

	connection.query('UPDATE merchant_offer SET time_end = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		if (day_cnt < merchant_limit) {
			var d = new Date();
			if ((d.getHours() > 8) && (d.getHours() < 23)) {
				bot.sendMessage(chat_id, "Il Contrabbandiere ha una nuova offerta per te!");
			}
		}
	});
};

function reloadFestival(manualFinish) {
	connection.query('SELECT MAX(id) As maxid FROM event_crafting_item', function (err, rows, fields) {
		if (err) throw err;

		connection.query('SELECT id FROM event_crafting_item WHERE time < NOW() AND time IS NOT NULL AND id = ' + rows[0].maxid, function (err, rows, fields) {
			if (err) throw err;

			if ((Object.keys(rows).length == 0) && (manualFinish == 0))
				return;

			connection.query('SELECT total_price, cnt, name FROM event_crafting_item, item WHERE event_crafting_item.item_id = item.id ORDER BY event_crafting_item.id DESC', function (err, rows, fields) {
				if (err) throw err;

				var tot = parseInt(rows[0].total_price) / parseInt(rows[0].cnt);
				var item_name = rows[0].name;

				connection.query('SELECT nickname, player_id, cnt, chat_id FROM event_crafting_status, player WHERE player.id = event_crafting_status.player_id AND cnt > 0', function (err, rows, fields) {
					if (err) throw err;

					var money = 0;
					for (i = 0; i < Object.keys(rows).length; i++) {
						money = Math.round(tot * rows[i].cnt);
						console.log(rows[i].nickname + ": " + rows[i].cnt + " creazioni per " + money + "¬ß");
						connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + rows[i].player_id, function (err, rows, fields) {
							if (err) throw err;
						});
						bot.sendMessage(rows[i].chat_id, "Si √® conclusa la possibilit√† di creare *" + item_name + "*!\nNe hai creati " + rows[i].cnt + " ottenendo cos√¨ *" + formatNumber(money) + "¬ß* come ricompensa!", mark);
					}

					connection.query('UPDATE event_crafting_status SET cnt = 0', function (err, rows, fields) {
						if (err) throw err;
					});

					connection.query('SELECT shortname FROM rarity WHERE shortname IN ("NC","R","UR","L","E") ORDER BY RAND()', function (err, rows, fields) {
						if (err) throw err;

						var shortname = rows[0].shortname;

						connection.query('SELECT item.rarity, item.name, item.id FROM item, craft WHERE craft.material_result = item.id AND ((material_1 IN (SELECT item_id FROM event_crafting_item)) OR (material_2 IN (SELECT item_id FROM event_crafting_item)) OR (material_3 IN (SELECT item_id FROM event_crafting_item))) AND item.craftable = 1 AND item.rarity = "' + shortname + '" AND item.id NOT IN (SELECT item_id FROM event_crafting_item) ORDER BY RAND()', function (err, rows, fields) {
							if (err) throw err;

							var item_id = 0;
							var item_rarity = "";
							var item_name = "";

							if (Object.keys(rows).length > 0) {
								item_id = rows[0].id;
								item_rarity = rows[0].rarity;
								item_name = rows[0].name;
							}

							connection.query('SELECT rarity, name, id FROM item WHERE craftable = 1 AND rarity = "' + shortname + '" AND id NOT IN (SELECT item_id FROM event_crafting_item) ORDER BY RAND()', function (err, rows, fields) {
								if (err) throw err;

								if ((Object.keys(rows).length > 0) && (item_id == 0)) {
									item_id = rows[0].id;
									item_rarity = rows[0].rarity;
									item_name = rows[0].name;
								}

								connection.query('SELECT rarity, name, id FROM item WHERE craftable = 1 AND rarity = "' + shortname + '"', function (err, rows, fields) {
									if (err) throw err;

									if ((Object.keys(rows).length > 0) && (item_id == 0)) {
										item_id = rows[0].id;
										item_rarity = rows[0].rarity;
										item_name = rows[0].name;
									}

									var wait_min = 15;

									var d = new Date();
									d.setHours(d.getHours() + 2);
									d.setMinutes(d.getMinutes() + wait_min);
									var time_end = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

									var value = merchantPrice(item_id);
									var increm = 0;
									if (manualFinish == 1) {
										var rows = connection_sync.query('SELECT increm FROM event_crafting_item ORDER BY id DESC');
										if (Object.keys(rows).length > 0) {
											var pastIncrem = parseInt(rows[0].increm);
											if (pastIncrem < 200)
												increm = parseInt(pastIncrem) + 10;
										}
									}

									var d = new Date();
									d.setMinutes(d.getMinutes() + wait_min);
									var wait_time = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

									if (isNaN(increm)) {
										increm = 0;
										console.log("Increm a nan");
									}

									connection.query('INSERT INTO event_crafting_item (item_id, time, start_price, full_price, increm, wait_time) VALUES (' + item_id + ',"' + time_end + '",' + Math.round(value / 10) + ',' + value + ', ' + increm + ',"' + wait_time + '")', function (err, rows, fields) {
										if (err) throw err;
										console.log(getNow("it") + "\x1b[32m Festival aggiornato\x1b[0m");
									});
								});
							});
						});
					});
				});
			});
		});
	});
};

bot.onText(/^\/firstfestival/, function (message, match) {
	connection.query('SELECT shortname FROM rarity WHERE shortname IN ("NC","R","UR","L","E") ORDER BY RAND()', function (err, rows, fields) {
		if (err) throw err;

		var shortname = rows[0].shortname;

		connection.query('SELECT item.rarity, item.name, item.id FROM item, craft WHERE craft.material_result = item.id AND ((material_1 IN (SELECT item_id FROM event_crafting_item)) OR (material_2 IN (SELECT item_id FROM event_crafting_item)) OR (material_3 IN (SELECT item_id FROM event_crafting_item))) AND item.craftable = 1 AND item.rarity = "' + shortname + '" AND item.id NOT IN (SELECT item_id FROM event_crafting_item) ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;

			var item_id = 0;
			var item_rarity = "";
			var item_name = "";

			if (Object.keys(rows).length > 0) {
				item_id = rows[0].id;
				item_rarity = rows[0].rarity;
				item_name = rows[0].name;
			}

			connection.query('SELECT rarity, name, id FROM item WHERE craftable = 1 AND rarity = "' + shortname + '" AND id NOT IN (SELECT item_id FROM event_crafting_item) ORDER BY RAND()', function (err, rows, fields) {
				if (err) throw err;

				if ((Object.keys(rows).length > 0) && (item_id == 0)) {
					item_id = rows[0].id;
					item_rarity = rows[0].rarity;
					item_name = rows[0].name;
				}

				connection.query('SELECT rarity, name, id FROM item WHERE craftable = 1 AND rarity = "' + shortname + '"', function (err, rows, fields) {
					if (err) throw err;

					if ((Object.keys(rows).length > 0) && (item_id == 0)) {
						item_id = rows[0].id;
						item_rarity = rows[0].rarity;
						item_name = rows[0].name;
					}

					var wait_min = 15;

					var d = new Date();
					d.setHours(d.getHours() + 2);
					d.setMinutes(d.getMinutes() + wait_min);
					var time_end = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

					var value = merchantPrice(item_id);
					var increm = 0;

					var d = new Date();
					d.setMinutes(d.getMinutes() + wait_min);
					var wait_time = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

					connection.query('INSERT INTO event_crafting_item (item_id, time, start_price, full_price, increm, wait_time) VALUES (' + item_id + ',"' + time_end + '",' + Math.round(value / 10) + ',' + value + ', ' + increm + ',"' + wait_time + '")', function (err, rows, fields) {
						if (err) throw err;
						console.log(getNow("it") + "\x1b[32m Festival aggiornato\x1b[0m");
					});
				});
			});
		});
	});
});

function checkLobbyTime() {
	connection.query('SELECT P.id As player_id, P.chat_id As chat_id, enemy_id FROM map_lobby M, player P WHERE M.player_id = P.id AND M.killed = 0 AND M.wait_time < NOW() AND wait_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 tempo attesa lobby\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + "  tempo attesa lobby\x1b[0m");
			rows.forEach(setLobbyTime);
		}
	});
};

function setLobbyTime(element, index, array) {
	var player_id = element.player_id;
	var chat_id = element.chat_id;
	var enemy_id = element.enemy_id;
	connection.query('UPDATE map_lobby SET wait_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		if (enemy_id == null)
			bot.sendMessage(chat_id, "Puoi procedere all'interno della mappa!");
	});
}

function checkBattleTime() {
	connection.query('SELECT M.lobby_id, P.id As player_id, P.chat_id, M.enemy_id FROM map_lobby M, player P WHERE M.player_id = P.id AND M.battle_timeout < NOW() AND battle_timeout IS NOT NULL AND enemy_id IS NOT NULL AND my_turn = 1', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 timeout combattimento scaduto\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " timeout combattimento scaduti\x1b[0m");
			rows.forEach(setBattleTime);
		}
	});
};

function setBattleTime(element, index, array) {
	var player_id = element.player_id;
	var chat_id = element.chat_id;
	var lobby_id = element.lobby_id;
	var enemy_id = element.enemy_id;

	connection.query('SELECT chat_id FROM player WHERE id = ' + enemy_id, function (err, rows, fields) {
		if (err) throw err;

		mapPlayerKilled(lobby_id, player_id, 2);

		bot.sendMessage(chat_id, "Il tempo per il turno √® scaduto!\nDal nulla arriva una freccia a gran velocit√† e decreta il tuo avversario come vincitore dello scontro!");
		bot.sendMessage(rows[0].chat_id, "Il tempo per il turno da parte dell'avversario √® scaduto!\nHai vinto lo scontro!");
		
		connection.query('UPDATE map_lobby SET match_kills = match_kills+1, global_kills = global_kills+1 WHERE id = ' + enemy_id, function (err, rows, fields) {
			if (err) throw err;
		});

		connection.query('UPDATE map_lobby SET battle_timeout = NULL WHERE player_id IN (' + player_id + ', ' + enemy_id + ')', function (err, rows, fields) {
			if (err) throw err;
		});
	});
}

function checkBattleTimeLimit() {
	connection.query('SELECT M.lobby_id, P.id As player_id, P.chat_id, M.enemy_id FROM map_lobby M, player P WHERE M.player_id = P.id AND M.battle_timeout_limit < NOW() AND battle_timeout_limit IS NOT NULL AND enemy_id IS NOT NULL AND my_turn = 1', function (err, rows, fields) {
		// il my_turn fa si che perdano quelli che hanno lasciato scadere lo scontro
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 timeout limite combattimento scaduto\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " timeout limite combattimento scaduti\x1b[0m");
			rows.forEach(setBattleTimeLimit);
		}
	});
};

function setBattleTimeLimit(element, index, array) {
	var player_id = element.player_id;
	var chat_id = element.chat_id;
	var lobby_id = element.lobby_id;
	var enemy_id = element.enemy_id;

	connection.query('SELECT chat_id FROM player WHERE id = ' + enemy_id, function (err, rows, fields) {
		if (err) throw err;

		mapPlayerKilled(lobby_id, player_id, 2);

		bot.sendMessage(chat_id, "Il tempo per il combattimento √® scaduto!\nDal nulla arriva una freccia a gran velocit√† e decreta il tuo avversario come vincitore dello scontro!");
		bot.sendMessage(rows[0].chat_id, "Il tempo per il combattimento da parte dell'avversario √® scaduto!\nHai vinto lo scontro!");
		
		connection.query('UPDATE map_lobby SET match_kills = match_kills+1, global_kills = global_kills+1 WHERE id = ' + enemy_id, function (err, rows, fields) {
			if (err) throw err;
		});

		connection.query('UPDATE map_lobby SET battle_timeout_limit = NULL WHERE player_id IN (' + player_id + ', ' + enemy_id + ')', function (err, rows, fields) {
			if (err) throw err;
		});
	});
}

function checkFullLobby() {
	connection.query('SELECT M.lobby_id, COUNT(M.lobby_id) As cnt FROM map_lobby M LEFT JOIN map_lobby_list L ON M.lobby_id = L.lobby_id WHERE M.lobby_id IS NOT NULL AND L.id IS NULL GROUP BY M.lobby_id HAVING cnt = ' + lobby_total_space + ' ORDER BY M.id', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 lobby avviata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " lobby avviate\x1b[0m");
			rows.forEach(setFullLobby);
		}
	});
};

function setFullLobby(element, index, array) {
	var lobby_id = element.lobby_id;
	var players = element.cnt;
	var size = Math.round(players*1.5); // il size deve essere sempre pari per il restringimento
	var mapMatrix = generateMap(size, size, players);
	var finalPoints = generateFinalPoints(mapMatrix);
	connection.query('INSERT INTO map_lobby_list (lobby_id, map_json, final_point_x, final_point_y, turn_number, next_restrict_time) VALUES (' + lobby_id + ', "' + JSON.stringify(mapMatrix) + '", ' + finalPoints[0] + ', ' + finalPoints[1] + ', 0, DATE_ADD(NOW(), INTERVAL ' + (lobby_restric_min*2) + ' MINUTE))', function (err, rows, fields) {
		if (err) throw err;

		connection.query('SELECT P.id, P.chat_id FROM map_lobby M, player P WHERE M.player_id = P.id AND lobby_id = ' + lobby_id,  function (err, rows, fields) {
			if (err) throw err;

			var kb = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					keyboard: [["Vai in battaglia"], ["Torna al menu"]]
				}
			};

			var posX = 0;
			var posY = 0;
			var posArr = [];

			for(i = 0; i < mapMatrix.length; i++) {
				for(j = 0; j < mapMatrix[i].length; j++) {
					if (mapMatrix[i][j] == 8)
						posArr.push([i, j]);
				}
			}

			var life = 10000;

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				connection.query('UPDATE map_lobby SET weapon_id = 13, weapon2_id = 56, weapon3_id = 26, posX = ' + posArr[i][0] + ', posY = ' + posArr[i][1] + ', life = ' + life + ', total_life = ' + life + ' WHERE player_id = ' + rows[i].id, function (err, rows, fields) {
					if (err) throw err;
				});

				bot.sendMessage(rows[i].chat_id, "La mappa √® stata generata!\nEntra in battaglia e conquista la vittoria!", kb);
			}
		});
	});
};

function checkLobbyEnd() {
	connection.query('SELECT lobby_id, COUNT(id) As cnt FROM map_lobby WHERE lobby_id IS NOT NULL AND killed = 1 GROUP BY lobby_id HAVING cnt >= ' + (lobby_total_space-1), function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 lobby conclusa\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " lobby concluse\x1b[0m");
			rows.forEach(setFinishedLobbyEnd);
		}
	});
}

function setFinishedLobbyEnd(element, index, array) {
	var lobby_id = element.lobby_id;
	connection.query('SELECT id FROM map_lobby_list WHERE lobby_id = ' + lobby_id,  function (err, rows, fields) {
		if (err) throw err;

		var map_lobby_id = rows[0].id;
		
		connection.query('SELECT M.player_id, P.nickname, M.match_kills FROM map_lobby M, player P WHERE M.player_id = P.id AND killed = 0 AND M.lobby_id = ' + lobby_id,  function (err, rows, fields) {
			if (err) throw err;

			var winner_nickname = "";
			var winner_player_id = -1;
			var winner_match_kills = -1;

			if (Object.keys(rows).length <= 1) {
				if (Object.keys(rows).length == 1) {
					winner_nickname = rows[0].nickname;
					winner_player_id = rows[0].player_id;
					winner_match_kills = rows[0].match_kills;

					// aggiunge il primo in classifica se era l'unico rimasto vivo
					connection_sync.query('INSERT INTO map_history (map_lobby_id, player_id, position, kills) VALUES (' + map_lobby_id + ', ' + winner_player_id + ', 1, ' + winner_match_kills + ')');
				}

				connection.query('SELECT P.id, P.nickname, P.trophies, M.position, M.kills FROM map_history M, player P WHERE M.player_id = P.id AND map_lobby_id = ' + map_lobby_id + ' ORDER BY position', function (err, rows, fields) {
					if (err) throw err;

					var list = "";
					var kill_text = "";
					var trophies_query = "";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].kills == 0)
							kill_text = "nessuna uccisione";
						else
							kill_text = rows[i].kills + " uccisioni";
						trophies_query = "+" + (lobby_total_space-parseInt(rows[i].position)+1);
						list += rows[i].position + "¬∞ " + rows[i].nickname + " (" + kill_text + ", " + trophies_query + " üèÜ)\n";

						connection.query('UPDATE player SET trophies = trophies' + trophies_query + ' WHERE id = ' + rows[i].id, function (err, rows, fields) {
							if (err) throw err;
						});
					}

					connection.query('SELECT chat_id FROM map_lobby M, player P WHERE M.player_id = P.id AND lobby_id = ' + lobby_id, function (err, rows, fields) {
						if (err) throw err;

						var msg = "La partit√† √® terminata!";
						if (winner_player_id != -1)
							msg += "\nüéâ Il vincitore √® <b>" + winner_nickname + "</b>! üéâ";
						msg += "\n\n" + list;

						for (var i = 0, len = Object.keys(rows).length; i < len; i++)
							bot.sendMessage(rows[i].chat_id, msg, back_html);

						// pulizia
						connection.query('DELETE FROM map_lobby_list WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
							if (err) throw err;
							connection.query('UPDATE map_lobby SET lobby_id = NULL, my_turn = 0, match_kills = 0, posX = NULL, posY = NULL, life = NULL, total_life = NULL, killed = 0, wait_time = NULL, weapon_id = NULL, weapon2_id = NULL, weapon3_id = NULL, money = 0, scrap = 0, pulsePosX = NULL, pulsePosY = NULL, last_obj = NULL, last_obj_val = NULL, enemy_id = NULL, battle_shield = 0, battle_heavy = 0, battle_timeout = NULL, battle_timeout_limit = NULL WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
								if (err) throw err;
							});
						});
					});
				});
			}
		});
	});
}

function checkSeasonEnd() {
	connection.query('SELECT 1 FROM config WHERE NOW() >= map_season_end', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 1) {
			connection.query('UPDATE config SET map_season_end = DATE_ADD(map_season_end, INTERVAL 30 DAY)', function (err, rows, fields) {
				if (err) throw err;
			});
			connection.query('SELECT id, chat_id, trophies FROM player WHERE trophies > 0', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					if (Object.keys(rows).length == 1)
						console.log(getNow("it") + "\x1b[32m 1 premio stagione concluso\x1b[0m");
					else
						console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " premi stagione conclusi\x1b[0m");
					rows.forEach(setSeasonEnd);
				}
			});
		}
	});
}

function setSeasonEnd(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;
	var trophies = element.trophies;
	
	var text = "";
	
	// todo
	
	bot.sendMessage(chat_id, "Per i <b>" + trophies + "</b> üèÜ guadagnati combattendo nelle <b>Mappe di Lootia</b>, hai ottenuto:" + text, html);

	connection.query('UPDATE player SET trophies = 0, total_trophies = total_trophies+' + trophies + ' WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
	});
}

function checkRestrictMap() {
	connection.query('SELECT lobby_id, map_json, final_point_x, final_point_y, turn_number FROM map_lobby_list WHERE next_restrict_time < NOW()', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 restrizione mappa avviata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " restrizioni mappe avviate\x1b[0m");
			rows.forEach(setRestrictMap);
		}
	});
};

function setRestrictMap(element, index, array) {
	var lobby_id = element.lobby_id;
	var mapMatrix = element.map_json;
	var finalPointX = element.final_point_x;
	var finalPointY = element.final_point_y;
	var turnNumber = element.turn_number;

	restrictMap(lobby_id, mapMatrix, finalPointY, finalPointX, turnNumber);

	connection.query('UPDATE map_lobby_list SET next_restrict_time = DATE_ADD(next_restrict_time, INTERVAL ' + lobby_restric_min + ' MINUTE) WHERE lobby_id = ' + lobby_id, function (err, rows, fields) {
		if (err) throw err;
	});
};

function checkDungeonNotification() {
	connection.query('SELECT player_id, id FROM dungeon_status WHERE TIMESTAMPDIFF(MINUTE, NOW(), finish_time) < 60 AND finish_time IS NOT NULL AND notified = 0 AND unlimited = 0', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 dungeon notificato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " dungeon notificati\x1b[0m");
			rows.forEach(setFinishedDungeonNotification);
		}
	});
};

function checkDungeonNotificationIstance() {
	connection.query('SELECT id FROM dungeon_list WHERE TIMESTAMPDIFF(MINUTE, NOW(), finish_date) < 180 AND finish_date IS NOT NULL AND notified = 0', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 istanza dungeon notificata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " istanze dungeon notificate\x1b[0m");
			rows.forEach(setFinishedDungeonNotificationIstance);
		}
	});
};

function setFinishedDungeonNotification(element, index, array) {
	var player_id = element.player_id;
	var id = element.id;

	connection.query('SELECT chat_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		var chat_id = rows[0].chat_id;
		connection.query('UPDATE dungeon_status SET notified = 1 WHERE id = ' + id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Ti rimane solamente 1 ora per terminare il dungeon! Forza!");
		});
	});
};

function setFinishedDungeonNotificationIstance(element, index, array) {
	var dungeon_id = element.id;

	connection.query('UPDATE dungeon_list SET notified = 1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
		if (err) throw err;
	});

	connection.query('SELECT player_id FROM dungeon_status WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
		if (err) throw err;
		for (i = 0; i < Object.keys(rows).length; i++) {
			connection.query('SELECT chat_id FROM player WHERE id = ' + rows[i].player_id, function (err, rows, fields) {
				if (err) throw err;
				var chat_id = rows[0].chat_id;
				bot.sendMessage(chat_id, "Ti rimangono solamente 3 ore prima del crollo dell'istanza! Forza!");
			});
		};
	});
};

function checkDragonBoost() {
	connection.query('SELECT player_id FROM dragon WHERE boost_time < NOW() AND boost_time IS NOT NULL AND boost_notification = 0', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 notifica bevanda pronta\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " notifiche bevande pronte\x1b[0m");
			rows.forEach(setFinishedDragonBoost);
		}
	});
};

function setFinishedDragonBoost(element, index, array) {
	var player_id = element.player_id;

	connection.query('UPDATE dragon SET boost_notification = 1 WHERE player_id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT chat_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(rows[0].chat_id, "La bevanda prodotta dal drago √® pronta!");
		});
	});
};

function checkCardTrade() {
	connection.query('SELECT player_from, player_to FROM card_trade WHERE time_end < NOW() AND time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 scambio figurine scaduto\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " scambi figurine scaduti\x1b[0m");
			rows.forEach(setFinishedCardTrade);
		}
	});
};

function setFinishedCardTrade(element, index, array) {
	var player_from = element.player_from;
	var player_to = element.player_to;

	connection.query('DELETE FROM card_trade WHERE player_from = ' + player_from, function (err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT chat_id FROM player WHERE id = ' + player_from, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(rows[0].chat_id, "Lo scambio figurine √® scaduto!");
		});
		connection.query('SELECT chat_id FROM player WHERE id = ' + player_to, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(rows[0].chat_id, "Lo scambio figurine √® scaduto!");
		});
	});
};

function checkDungeonRoom() {
	connection.query('SELECT dungeon_status.id As room_id, player.id As player_id, player.chat_id As chat_id FROM dungeon_status, player WHERE dungeon_status.player_id = player.id AND room_time < NOW() AND room_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 stanza terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " stanze terminate\x1b[0m");
			rows.forEach(setFinishedDungeonRoom);
		}
	});
};

function checkGnome() {
	connection.query('SELECT heist_progress.id As progressId, player.id As player_id, player.chat_id As chat_id FROM heist_progress, player WHERE heist_progress.from_id = player.id AND time_end < NOW() AND time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 gnomo scaduto\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " gnomi scaduti\x1b[0m");
			rows.forEach(setFinishedGnome);
		}
	});
};

function setFinishedGnome(element, index, array) {
	var chat_id = element.chat_id;

	connection.query('DELETE FROM heist_progress WHERE id = ' + element.progressId, function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "Il tuo gnomo √® stato troppo tempo fuori! E' tornato al tuo rifugio senza aver terminato la partita.");
	});
};

function checkDungeonEnd() {
	connection.query('SELECT id, chat_id FROM player WHERE dungeon_time < NOW() AND dungeon_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 dungeon terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " dungeon terminati\x1b[0m");
			rows.forEach(setFinishedDungeonEnd);
		}
	});
};

function checkMissionTeamExpire() {
	connection.query('SELECT party_id, team_id, report_id FROM mission_team_party WHERE mission_time_limit < NOW() AND mission_time_limit IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 missione team scaduta\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " missioni team scadute\x1b[0m");
			rows.forEach(setFinishedMissionTeamExpire);
		}
	});
};

function setFinishedMissionTeamExpire(element, index, array) {
	var party_id = element.party_id;
	var team_id = element.team_id;
	var report_id = element.report_id;

	connection.query('SELECT P.chat_id, P.id FROM player P, mission_team_party_player M WHERE P.id = M.player_id AND M.party_id = ' + party_id + ' AND M.team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
		for(i = 0; i < Object.keys(rows).length; i++) {
			bot.sendMessage(rows[i].chat_id, "Il tempo a disposizione per completare l'incarico √® terminato! Tutto il party torna al villaggio a mani vuote...");
			connection.query('UPDATE player SET mission_party = 0 WHERE id = ' + rows[i].id, function (err, rows, fields) {
				if (err) throw err;
			});
		}
	});
	connection.query('SELECT chat_id FROM team_player, player WHERE team_player.team_id = ' + team_id + ' AND team_player.role IN (1,2) AND team_player.player_id = player.id', function (err, rows, fields) {
		if (err) throw err;
		for(i = 0; i < Object.keys(rows).length; i++)
			bot.sendMessage(rows[i].chat_id, "Il Party " + party_id + " non √® riuscito a completare l'incarico in tempo!");
	});

	// Pulizia (aggiorna anche l'altra)
	connection.query('UPDATE mission_team_party SET part_id = 0, assigned_to = NULL, report_id = NULL, mission_start = NULL, mission_time_end = NULL, wait = 0, mission_time_limit = NULL, text_user = NULL WHERE team_id = ' + team_id + ' AND party_id = ' + party_id, function (err, rows, fields) {
		if (err) throw err;
	});
	connection.query('UPDATE mission_team_party_player SET answ_id = 0 WHERE party_id = ' + party_id + ' AND team_id = ' + team_id, function (err, rows, fields) {
		if (err) throw err;
	});
	if (report_id != null) {
		connection.query('DELETE FROM mission_team_report WHERE team_id = ' + team_id + ' AND party_id = ' + party_id + ' AND report_id = ' + report_id, function (err, rows, fields) {
			if (err) throw err;
		});
	}
}

function checkDungeonExpire() {
	connection.query('SELECT dungeon_status.id As dungeon_status_id, dungeon_status.dungeon_id As dungeon_id, player.id As player_id, player.chat_id FROM dungeon_status, player WHERE dungeon_status.player_id = player.id AND dungeon_status.finish_time < NOW() AND dungeon_status.finish_time IS NOT NULL AND unlimited = 0', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 giocatore istanza dungeon scaduto\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " giocatori in istanze dungeon scaduti\x1b[0m");
			rows.forEach(setFinishedDungeonExpire);
		}
	});
};

function checkIstanceExpire() {
	connection.query('SELECT dungeon_list.id As dungeon_id FROM dungeon_list WHERE dungeon_list.finish_date < NOW() AND dungeon_list.finish_date IS NOT NULL AND dungeon_list.main = 0 LIMIT 100', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 istanza dungeon scaduta\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " istanze dungeon scadute\x1b[0m");
			rows.forEach(setFinishedIstanceExpire);
		}
	});
};

function setFinishedIstanceExpire(element, index, array) {
	var dungeon_id = element.dungeon_id;

	connection.query('SELECT player.id As player_id, player.chat_id FROM dungeon_status, player, dungeon_list WHERE dungeon_status.dungeon_id = dungeon_list.id AND dungeon_status.player_id = player.id AND dungeon_list.id = ' + dungeon_id, function (err, rows, fields) {
		if (Object.keys(rows).length > 0) {
			for (var i = 0, len = Object.keys(rows).length; i < len; i++)
				bot.sendMessage(rows[i].chat_id, "L'intera istanza √® scaduta, sei costretto ad uscire dal dungeon!");
		}
		connection.query('DELETE FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM dungeon_status WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});

};

function setFinishedDungeonExpire(element, index, array) {
	var player_id = element.player_id;
	var dungeon_status_id = element.dungeon_status_id;
	var dungeon_id = element.dungeon_id;
	var chat_id = element.chat_id;

	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
		if (err) throw err;
		connection.query('DELETE FROM dungeon_status WHERE id = ' + dungeon_status_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Hai impiegato troppo tempo per completare il dungeon, i muri cominciano a crollare e sei costretto a scappare!");
		});
	});
};

function setFinishedDungeonEnd(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;

	connection.query('UPDATE player SET dungeon_time = NULL WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(element.chat_id, "I dungeon sono di nuovo disponibili!");
	});
};

function setFinishedDungeonRoom(element, index, array) {
	var player_id = element.player_id;
	var chat_id = element.chat_id;

	connection.query('UPDATE dungeon_status SET room_time = NULL WHERE id = ' + element.room_id, function (err, rows, fields) {
		if (err) throw err;
		var strArr = 	[	"Ti rialzi per proseguire il dungeon.",
						 "Ti risvegli e pieno di energie sei pronto a proseguire il dungeon!",
						 "Sei pronto a proseguire il tuo percorso nel dungeon!",
						 "Rincuorato, tiri un sospiro di sollievo e capisci che puoi riprendere il tuo cammino nel dungeon!",
						 "Il lungo corridoio √® finalmente terminato, scosti una parete di liane, pronto ad attraversarla...",
						 "Oltre un cumulo di macerie hai trovato uno stretto passaggio, l‚Äôhai seguito giungendo in un ampia stanza...",
						 "Inseguito da un gruppo di goblin ti sei spinto in una serie di cunicoli nella roccia, trovando il passaggio per una nuova stanza",
						 "Nell‚Äôoscurit√† intravedi finalmente la luce tremante di due fiaccole che illuminano un logoro portone di legno...",
						 "Sopra i riflessi di un affioramento d‚Äôacqua dolce, una lugubre porta si staglia: hai trovato come proseguire!",
						 "Nascosta tra muschi e piante selvatiche, una stretta via si apre. Annusi l‚Äôaria: odore di morte... Gonfi il petto, pronto per proseguire."
						];
		var rand = Math.round(Math.random() * (Object.keys(strArr).length - 1));
		bot.sendMessage(element.chat_id, strArr[rand]);
		setAchievement(player_id, 63, 1);
	});
};

function checkEventMissions() {
	connection.query('SELECT player.nickname, player.id As player_id, player.chat_id, mission_event_status.mission_id FROM player, mission_event_status WHERE mission_event_status.player_id = player.id AND mission_end < NOW() AND mission_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 missione evento terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " missioni evento terminate\x1b[0m");
			rows.forEach(setFinishedEventMission);
		}
	});
};

function checkTravels() {
	connection.query('SELECT nickname, id, travel_id, chat_id FROM player WHERE travel_time_end < NOW() AND travel_time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 viaggio terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " viaggi terminati\x1b[0m");
			rows.forEach(setFinishedTravel);
		}
	});
};

function resetDungeonSkip() {
	connection.query('UPDATE player SET dungeon_skip = 0 WHERE dungeon_skip != 0', function (err, rows, fields) {
		if (err) throw err;
	});
};

function resetRefill() {
	connection.query('UPDATE player SET refilled = 0 WHERE refilled > 0', function (err, rows, fields) {
		if (err) throw err;
	});
};

function resetDragonReject() {
	connection.query('UPDATE dragon_top_status SET reject = 0', function (err, rows, fields) {
		if (err) throw err;
	});
};

function deleteSearch() {
	connection.query('DELETE FROM search_history WHERE TIMESTAMPDIFF(DAY, time, NOW()) > 60', function (err, rows, fields) {
		if (err) throw err;
	});
};

function deleteHistory() {
	connection.query('DELETE FROM market_direct_history WHERE TIMESTAMPDIFF(DAY, time, NOW()) > 360', function (err, rows, fields) {
		if (err) throw err;
	});
}

function checkCave() {
	connection.query('SELECT nickname, reborn, boost_id, charm_id, id, cave_id, chat_id, boost_mission, cave_gem, global_end FROM player WHERE cave_time_end < NOW() AND cave_time_end IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 viaggio cava terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " viaggi cava terminati\x1b[0m");
			rows.forEach(setFinishedCave);
		}
	});
};

function checkGlobalMsg() {
	connection.query('SELECT global_msg, global_msg_on FROM config', function (err, rows, fields) {
		if (err) throw err;
		var msg = rows[0].global_msg;
		if (rows[0].global_msg_on == 1) {
			connection.query('SELECT id, chat_id FROM global_msg LIMIT 200', function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0) {
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						bot.sendMessage(rows[i].chat_id, msg + "\n\nUsa /globali per bloccare la ricezioni di questi messaggi, sconsigliato!", html_no_preview);
						var cnt = (rows[i].id % 200)
						if (cnt == 0)
							cnt = 200;
						console.log("Invio msg globale a " + rows[i].chat_id + " " + cnt + "/" + Object.keys(rows).length);
						connection.query('DELETE FROM global_msg WHERE chat_id = ' + rows[i].chat_id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				} else {
					connection.query('UPDATE config SET global_msg_on = 0', function (err, rows, fields) {
						if (err) throw err;
					});
				}
			});
		}
	});
}

function checkFestivalWait() {
	connection.query('SELECT id FROM event_crafting_item WHERE wait_time < NOW() AND wait_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			connection.query('UPDATE event_crafting_item SET wait_time = NULL WHERE id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
				console.log("Tempo preparazione festival terminato");
			});
		}
	});
}

function checkFestivalFinish() {
	connection.query('SELECT id FROM event_crafting_item WHERE completed = 1 AND reward = 0', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			connection.query('UPDATE event_crafting_item SET reward = 1 WHERE id = ' + rows[0].id, function (err, rows, fields) {
				if (err) throw err;
				reloadFestival(1);
			});
		}
	});
}

function checkProtection() {
	connection.query('SELECT nickname, id, chat_id FROM `player` WHERE heist_protection < NOW() AND heist_protection IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 protezione terminata\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " protezioni terminate\x1b[0m");
			rows.forEach(setFinishedProtection);
		}
	});
};

function setFinishedProtection(element, index, array) {
	var chat_id = element.chat_id;
	connection.query('UPDATE `player` SET `heist_protection`=NULL WHERE nickname = "' + element.nickname + '"', function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "L'effetto del Campo di Forza √® terminato!");
	});
}

function checkBoost() {
	connection.query('SELECT id, chat_id FROM player WHERE boost_mission = 0 AND boost_id != 0', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 boost terminato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " boost terminati\x1b[0m");
			rows.forEach(setFinishedBoost);
		}
	});
};

function toTime(seconds, withSec = 0) {
	var numdays = Math.floor((seconds % 31536000) / 86400);
	var numhours = Math.floor(((seconds % 31536000) % 86400) / 3600);
	var numminutes = Math.floor((((seconds % 31536000) % 86400) % 3600) / 60);
	var numseconds = Math.floor((((seconds % 31536000) % 86400) % 3600) % 60);

	if (withSec == 0) {
		if (numdays > 0) {
			if (numdays == 1) {
				if (numminutes > 0)
					return numdays + " giorno, " + numhours + " ore e " + numminutes + " min";
				else
					return numdays + " giorno, " + numhours + " ore";
			} else {
				if (numminutes > 0)
					return numdays + " giorni, " + numhours + " ore e " + numminutes + " min";
				else
					return numdays + " giorni, " + numhours + " ore e " + numminutes + " min";
			}
		} else {
			if (numhours > 1) {
				if (numminutes > 0)
					return numhours + " ore e " + numminutes + " min";
				else
					return numhours + " ore";
			} else if (numhours == 1) {
				if (numminutes > 0)
					return numhours + " ora e " + numminutes + " min";
				else
					return numhours + " ora";
			} else if (numhours < 1) {
				return numminutes + " min";
			}
		}
	} else {
		if (numdays > 0) {
			if (numdays == 1) {
				return numdays + " giorno, " + numhours + " ore, " + numminutes + " min e " + numseconds + " sec";
			} else {
				return numdays + " giorni, " + numhours + " ore, " + numminutes + " min e " + numseconds + " sec";
			}
		} else {
			if (numhours > 1) {
				return numhours + " ore, " + numminutes + " min e " + numseconds + " sec";
			} else if (numhours == 1) {
				return numhours + " ora, " + numminutes + " min e " + numseconds + " sec";
			} else if (numhours < 1) {
				return numminutes + " min e " + numseconds + " sec";
			}
		}
	}
}

function setFinishedEventMission(element, index, array) {
	var chat_id = element.chat_id;

	//console.log("Event: " + element.player_id + " - " + element.mission_id);

	connection.query('SELECT choice FROM mission_event_text WHERE id = ' + element.mission_id, function (err, rows, fields) {
		if (err) throw err;
		var choice = rows[0].choice;
		connection.query('UPDATE mission_event_status SET mission_end = NULL, mission_id = 0, choice_id = ' + rows[0].choice + ' WHERE player_id = ' + element.player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Hai completato la missione evento!\nProsegui la storia attraverso il pulsante nel men√π.");
		});
	});
}

function setFinishedMission(element, index, array) {
	var chat_id = element.chat_id;

	var charm_id = parseInt(element.charm_id);
	var auto_id = parseInt(element.mission_auto_id);
	var boost_id = parseInt(element.boost_id);
	var boost_mission = parseInt(element.boost_mission);
	var reborn = parseInt(element.reborn);
	var class_id = parseInt(element.class);
	var level = Math.floor(element.exp / 10);
	var mission_gem = element.mission_gem;
	var global_end = element.global_end;
	var mission_count = element.mission_count;
	var global_end = element.global_end;

	if ((boost_mission <= 0) && (boost_id != 0)) {
		connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + element.id, function (err, rows, fields) {
			if (err) throw err;
		});
		boost_mission = 0;
		boost_id = 0;
	}

	connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 9', function (err, rows, fields) {
		if (err) throw err;

		var abBonus = 0;
		var double = 0;
		if (Object.keys(rows).length > 0) {
			var rand = Math.random() * 100;
			abBonus = parseInt(rows[0].ability_level) * rows[0].val;
			if (rand < abBonus)
				double = 1;
		}

		if (rows.affectedRows == 0) {
			console.log(">> ERRORE UPDATE MISSIONE: " + element.mission_id + " DI " + element.nickname);
			return;
		}

		connection.query('UPDATE player SET mission_id = 0, mission_time_end = NULL WHERE id = ' + element.id, function (err, rows, fields) {
			if (err) throw err;

			if (element.mission_id == 1001) {
				addItem(element.id, 15);
				bot.sendMessage(chat_id, "Missione completata!\nHai trovato un misterioso *Tavolino*", mark);

				setExp(element.id, 1);
				connection.query('UPDATE player SET mission_count = mission_count + 1 WHERE id = ' + element.id, function (err, rows, fields) {
					if (err) throw err;
				});
				return;
			}

			if ((element.mission_id == 1002) || (element.mission_id == 1003)) {
				var exp = 0;
				if (element.mission_id == 1002)
					exp = 6;
				else if (element.mission_id == 1003)
					exp = 4;

				bot.sendMessage(chat_id, "Missione completata!\nHai ottenuto virt√π e conoscenza, nonch√© " + exp + " punti exp!", mark);
				setExp(element.id, exp);
				connection.query('UPDATE player SET mission_count = mission_count + 1 WHERE id = ' + element.id, function (err, rows, fields) {
					if (err) throw err;
				});
				return;
			}

			if (element.mission_id == 1004) {
				bot.sendMessage(chat_id, "Entrato in Biblioteca üèõ, recuperi l'archivio segreto e la memoria di un'importante missione...", mark);
				connection.query('UPDATE player SET mission_count = mission_count + 1 WHERE id = ' + element.id, function (err, rows, fields) {
					if (err) throw err;
				});
				return;
			}

			connection.query('SELECT chest_id FROM mission WHERE id = ' + element.mission_id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					console.log(">> ERRORE CHEST: " + element.mission_id + " DI " + element.nickname);
					return;
				}

				var mission_chest = rows[0].chest_id;
				var rand = 0;
				var evolved = 0;
				var evolved_text = "";

				rand = Math.round((Math.random() * 100) + 1);
				var bonus = 0;
				if (charm_id == 61)
					bonus = 5;
				else if (charm_id == 185)
					bonus = 10;
				else if (charm_id == 189)
					bonus = 15;
				else if (charm_id == 697)
					bonus = 20;

				if ((class_id == 3) && (reborn >= 4))
					bonus += 5;
				if ((class_id == 3) && (reborn == 3))
					bonus += 2.5;
				if ((class_id == 7) && (reborn == 3))
					bonus += 10;
				if ((class_id == 7) && (reborn >= 4))
					bonus += 15;

				var exp_lost = 0;
				if (luckyMode == 1) {
					var d = new Date();
					if (d.getDay() == 6)
						bonus += 50;
					else if (d.getDay() == 0) {
						var r = Math.random() * 100;
						if (r < 50)
							bonus += 50;
						else if ((r > 50) && (r < 75))
							exp_lost = 1;
					}
				}

				if (boost_id == 5)
					bonus = bonus * 2;

				if (mission_chest < 6) {
					if (rand <= bonus) {
						mission_chest++;
						evolved = 1;
						setAchievement(element.id, 53, 1);
					}
				}

				rand = Math.random() * 100;

				connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 11', function (err, rows, fields) {
					if (err) throw err;

					var achPnt = 0;

					var abBonus = 0;
					var rand_c = 15;

					if (Object.keys(rows).length > 0)
						abBonus = rows[0].ability_level * rows[0].val;
					rand_c += abBonus;

					var d = new Date();
					if (d.getDay() == 2)
						rand_c += 10;
					if (crazyMode == 1)
						rand_c += 20;

					if ((rand >= 5) && (rand <= rand_c) && (boost_id == 0)) {
						var rand2 = Math.round(Math.random() * 8);

						var ability = connection_sync.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 19');

						var abBonusStone = 0;
						if (Object.keys(ability).length > 0)
							abBonusStone = parseInt(ability[0].ability_level) * ability[0].val;

						var rand3 = Math.random()*100;
						var mplus = 0;
						var m = 0;
						if (rand3 < abBonusStone)
							mplus = 1;

						if (rand2 == 0) {
							var randBoost = Math.random()*100;
							if (randBoost < 70) {
								m = 3+mplus;
								connection.query('UPDATE player SET boost_id = 1, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Energetica! Per " + m + " missioni il tempo di attesa √® dimezzato.");
									setAchievement(element.id, 69, 1);
								});
							} else {
								m = 6+mplus;
								connection.query('UPDATE player SET boost_id = 1, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Energetica Plus! Per " + m + " missioni il tempo di attesa √® dimezzato.");
									setAchievement(element.id, 69, 1);
								});
							}
							achPnt++;
						} else if (rand2 == 1) {
							m = 3+mplus;
							connection.query('UPDATE player SET boost_id = 2, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai trovato una Bevanda Scrigno! Per " + m + " missioni gli scrigni ottenuti a fine missione sono raddoppiati.");
								setAchievement(element.id, 69, 1);
							});
							achPnt++;
						} else if (rand2 == 2) {
							if (level > 20) {
								m = 3+mplus;
								connection.query('UPDATE player SET boost_id = 3, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Fiamma di Drago! Per " + m + " viaggi in cava le pietre ottenute sono raddoppiate.");
									setAchievement(element.id, 69, 1);
								});
								achPnt++;
							}
						} else if (rand2 == 3) {
							m = 2+mplus;
							connection.query('UPDATE player SET boost_id = 4, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai trovato una Bevanda Livellante! Per " + m + " missioni i punti esperienza ottenuti a fine missione sono aumentati del 50%.");
								setAchievement(element.id, 69, 1);
							});
							achPnt++;
						} else if (rand2 == 4) {
							m = 3+mplus;
							connection.query('UPDATE player SET boost_id = 5, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai trovato una Bevanda Quadrifoglio! Per " + m + " utilizzi la fortuna √® raddoppiata.");
								setAchievement(element.id, 69, 1);
							});
							achPnt++;
						} else if (rand2 == 5) {
							m = 3+mplus;
							connection.query('UPDATE player SET boost_id = 6, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai trovato una Bevanda Furia! Per " + m + " attacchi il tuo danno √® raddoppiato.");
								setAchievement(element.id, 69, 1);
							});
							achPnt++;
						} else if (rand2 == 6) {
							m = 3+mplus;
							connection.query('UPDATE player SET boost_id = 7, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai trovato una Bevanda Bottino! Per " + m + " missioni fornisce x3 monete, per altrettante stanze dungeon fornisce x10 monete.");
								setAchievement(element.id, 69, 1);
							});
							achPnt++;
						} else if (rand2 == 7) {
							if (reborn > 1) {
								m = 2+mplus;
								connection.query('UPDATE player SET boost_id = 8, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Corsa! Per " + m + " stanze dungeon il tempo di attesa √® dimezzato.");
									setAchievement(element.id, 69, 1);
								});
								achPnt++;
							}
						} else if (rand2 == 8) {
							if (level > 15) {
								m = 2+mplus;
								connection.query('UPDATE player SET boost_id = 9, boost_mission = ' + m + ' WHERE id = ' + element.id, function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Idromele! Per " + m + " ispezioni il tempo di attesa √® dimezzato.");
									setAchievement(element.id, 69, 1);
								});
								achPnt++;
							}
						}
					}

					var chest8 = 0;
					if (boost_id == 5) {
						if ((rand > 2) && (rand < 5))
							chest8 = 1;
					} else {
						if ((rand > 2) && (rand < 8))
							chest8 = 1;
					}

					if (chest8 == 1) {
						if (getChestCnt(element.id, 8) == 0) {
							addChest(element.id, 8);
							bot.sendMessage(chat_id, "Hai trovato uno Scrigno Mistico! Che fortuna!");
							achPnt++;
						}
					}

					var gem = 0;
					if (boost_id == 5) {
						if ((rand > 97) && (reborn >= 2))
							gem = 1;
					} else {
						if ((rand > 99) && (reborn >= 2))
							gem = 1;
					}

					if (gem == 1) {
						connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + element.id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(chat_id, "Hai trovato una Gemma üíé!");
						});
						achPnt++;
					}

					var moon = 0;
					if ((luckyMode == 1) || (boost_id == 5)) {
						if ((rand > 80) && (rand < 84))
							moon = 1;
					} else {
						if ((rand > 80) && (rand < 81) && (mission_chest >= 3))
							moon = 1;
					}

					if (moon == 1) {
						connection.query('UPDATE player SET moon_coin = moon_coin+1 WHERE id = ' + element.id, function (err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(chat_id, "Al ritorno dalla missione vedi un bagliore lucente per terra e abbassi lo sguardo... Hai trovato una Moneta Lunare üåï!");
						});
						achPnt++;
					}

					setAchievement(element.id, 37, achPnt);

					if (auto_id == (max_mission_id + 1))
						auto_id = 1;

					connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 2', function (err, rows, fields) {
						if (err) throw err;

						var abBonus = 0;
						if (Object.keys(rows).length > 0)
							abBonus = parseInt(rows[0].ability_level) * rows[0].val;

						connection.query('SELECT rarity.shortname As rarity FROM mission_auto, mission, rarity WHERE mission.chest_id = rarity.id AND mission.chest_id = mission_auto.chest_id AND mission_auto.id = ' + auto_id + ' LIMIT 1', function (err, rows, fields) {
							if (err) throw err;
							var rarity_miss = "";

							if (Object.keys(rows).length > 0)
								rarity_miss = "\nLa prossima sar√† di rarit√† " + rows[0].rarity;

							connection.query('SELECT name, rarity_shortname, id FROM chest WHERE id = ' + mission_chest, function (err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0) {
									bot.sendMessage(chat_id, "Si √® verificato un problema, contatta l'amministratore.");
									return;
								}
								var chest_id = rows[0].id;
								var money = Math.round(((Math.random() * 500) + 500) * mission_chest);

								if (luckyMode == 1) {
									var d = new Date();
									if (d.getDay() == 6) {
										var rand = Math.random() * 100;
										if (rand < 75)
											money = money * 2;
									} else if (d.getDay() == 0) {
										var rand = Math.random() * 100;
										if (rand < 50)
											money = money * 2;
										else
											money = money / 2;
									}
								}

								money += abBonus;

								if (boost_id == 7)
									money = money * 3;

								if ((class_id == 3) && (reborn == 5))
									money += money * 0.1;

								if (charm_id == 697)
									money += money * 0.2;

								var exp = 0;
								exp = mission_chest;
								exp = exp - exp_lost;

								if (evolved == 1)
									evolved_text = ", evoluto grazie alla fortuna";
								if (boost_id == 4)
									exp = exp * 1.5;
								if (crazyMode == 1)
									exp = exp * 2;

								var crazyText = "";
								var num = 1;

								if (boost_id == 2) {
									num++;
									crazyText = num + "x ";

									addChest(element.id, chest_id);
								}
								if (double == 1) {
									num++;
									crazyText = num + "x ";

									addChest(element.id, chest_id);
								}
								if (crazyMode == 1) {
									num++;
									crazyText = num + "x ";

									addChest(element.id, chest_id);
								}

								if (crazyMode == 1) {
									var rand = Math.random() * 100;
									if ((chest_id >= 5) && (rand < 3)) {
										addItem(element.id, 200);
										bot.sendMessage(chat_id, "Sei stato veramente molto fortunato ed hai ottenuto un Necronucleo! Woah!");
									}
									if ((chest_id == 6) && (rand > 90)) {
										addChest(element.id, 7);

										bot.sendMessage(chat_id, "FOLLE! Hai trovato uno *Scrigno Capsula*!", mark);
										return;
									}
								}

								if ((class_id == 7) && (reborn > 1))
									money -= money * 0.15;
								if ((class_id == 9) && (reborn > 1))
									money += money * 0.15;

								if (reborn == 1)
									money = money * Math.round(6-level/20);

								money = Math.round(money);

								if (mission_gem == 0) {
									if (mission_chest >= 4)
										setAchievement(element.id, 82, 1);
								}

								var extra = "";
								/*
								if (global_end == 1) {
									exp += 1*mission_chest;
									extra = " (aumentati grazie al bonus impresa globale)";
								}
								*/

								exp = Math.round(exp);

								bot.sendMessage(chat_id, "Missione completata! Hai ottenuto:\n" + crazyText + "*" + rows[0].name + "* (" + rows[0].rarity_shortname + ")" + evolved_text + ", *" + formatNumber(money) + "* ¬ß e *" + exp + "* exp " + extra + "!" + rarity_miss, mark);

								addChest(element.id, chest_id);
								setExp(element.id, exp);

								if (mission_count+1 >= 5) {
									connection.query("SELECT referral_list.id, referral_list.player_id, player.chat_id FROM referral_list, player WHERE player.id = referral_list.player_id AND referral_list.new_player = " + element.id + " AND referral_list.reward = 0", function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length > 0) {
											var referall_money = 50000;	// Proprietario del link invito
											var referall_gems = 2;

											bot.sendMessage(rows[0].chat_id, "L'utente <b>" + element.nickname + "</b> che hai invitato ha completato abbastanza missioni, ottieni quindi <b>" + formatNumber(referall_money) + " ¬ß</b> e <b>" + referall_gems + "</b> üíé!", html);

											connection.query('UPDATE player SET money = money+' + referall_money + ', gems = gems+' + referall_gems + ' WHERE id = ' + rows[0].player_id, function (err, rows, fields) {
												if (err) throw err;
											});
											connection.query('UPDATE referral_list SET reward = 1 WHERE id = ' + rows[0].id, function (err, rows, fields) {
												if (err) throw err;
												console.log("Referral di " + element.id + " dopo " + (mission_count+1) + " missioni")
											});
										}
									});
								}

								connection.query('UPDATE player SET mission_count = mission_count + 1, money = money + ' + money + ' WHERE id = ' + element.id, function (err, rows, fields) {
									if (err) throw err;
								});

								if (villa == 1) {
									connection.query('SELECT points FROM event_villa_status WHERE player_id = ' + element.id, function (err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length > 0) {
											var points = parseInt(rows[0].points);
											connection.query('UPDATE event_villa_status SET points = points+' + chest_id + ' WHERE player_id = ' + element.id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(chat_id, "Hai ricevuto " + chest_id + " punti per l'evento della Villa di LastSoldier95! Ora ne possiedi *" + (points + chest_id) + "*!", mark);
											});
										};
									});
								}

								if ((boost_id == 2) && (chest_id != 7))	// solo se non U
									setBoost(element.id, boost_mission, 2);
								else if ((boost_id == 4) || (boost_id == 5) || (boost_id == 7))
									setBoost(element.id, boost_mission, boost_id);

								if ((snowHouse == 1) && (snowHouseEnd == 0)) {
									var rand = Math.random()*100;
									if (rand < 15) {
										connection.query('SELECT COUNT(id) As cnt FROM event_snowball_status WHERE player_id = ' + element.id, function (err, rows, fields) {
											if (err) throw err;
											if (rows[0].cnt > 0) {
												connection.query('SELECT COUNT(id) As cnt FROM event_snowball_list WHERE player_id = ' + element.id, function (err, rows, fields) {
													if (err) throw err;
													var snowball = 1+parseInt(rows[0].cnt);
													connection.query('UPDATE event_snowball_status SET snowball = snowball+' + snowball + ' WHERE player_id = ' + element.id, function (err, rows, fields) {
														if (err) throw err;
														if (snowball > 1)
															bot.sendMessage(chat_id, "Hai trovato " + snowball + " Palle di Neve!");
														else
															bot.sendMessage(chat_id, "Hai trovato 1 Palla di Neve!");
														console.log(snowball + " palle di neve a " + element.nickname);
													});
												});
											}
										});
									};
								};
								setAchievement(element.id, 1, 1);
							});
						});
					});
				});
			});
		});
	});
}

function setFinishedSpecialMission(element, index, array) {
	var chat_id = element.chat_id;
	var mission_id = element.mission_special_id;
	connection.query('SELECT charm_id, class, boost_id, boost_mission, reborn FROM player WHERE nickname = "' + element.nickname + '"', function (err, rows, fields) {
		if (err) throw err;
		var charm_id = parseInt(rows[0].charm_id);
		var boost_id = parseInt(rows[0].boost_id);
		var boost_mission = parseInt(rows[0].boost_mission);
		var reborn = parseInt(rows[0].reborn);
		var class_id = parseInt(rows[0].class);

		if ((boost_mission <= 0) && (boost_id != 0)) {
			connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE nickname = "' + element.nickname + '"', function (err, rows, fields) {
				if (err) throw err;
			});
			boost_mission = 0;
			boost_id = 0;
		}

		connection.query('UPDATE player SET mission_special_id = 0, mission_special_time_end = NULL WHERE nickname = "' + element.nickname + '" AND mission_special_id != 0', function (err, rows, fields) {
			if (err) throw err;

			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 11', function (err, rows, fields) {
				if (err) throw err;

				var abBonus = 0;
				var rand_c = 15;

				if (Object.keys(rows).length > 0)
					abBonus = rows[0].ability_level * rows[0].val;
				rand_c += abBonus;

				var d = new Date();
				if (d.getDay() == 2)
					rand_c += 10;

				connection.query('SELECT item.name, rarity.id As rarityid, item.rarity, item.id FROM item, rarity, mission_zone_item WHERE item.rarity = rarity.shortname AND zone_id = ' + mission_id + ' AND item.id = mission_zone_item.item_id ORDER BY RAND()', function (err, rows, fields) {
					if (err) throw err;

					var item_id = rows[0].id;
					var exp = rows[0].rarityid;
					var dust = exp;
					var num = 1;

					if (boost_id == 2) {
						num++;
						addItem(element.id, item_id);
					}

					if (boost_id == 4)
						exp = exp * 1.5;

					bot.sendMessage(chat_id, "Itinerario completato! Hai ottenuto:\n" + num + "x *" + rows[0].name + "* (" + rows[0].rarity + "), *" + exp + "* exp e *" + dust + "x Polvere* (S)!", mark);

					addItem(element.id, item_id);
					addItem(element.id, 646, dust);

					connection.query('UPDATE player SET exp = exp+' + exp + ' WHERE nickname = "' + element.nickname + '"', function (err, rows, fields) {
						if (err) throw err;
					});

					if ((boost_id == 2) || (boost_id == 4) || (boost_id == 5))
						setBoost(element.id, boost_mission, boost_id);
				});
			});
		});
	});
}

function setFinishedHeistProgress(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;
	var ext = element.extracted;
	var word = element.word;
	var to_id = element.to_id;
	var nick = element.nickname;
	var changeComb = String(element.changeComb);
	var myComb = String(element.my_combination);

	var rBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			keyboard: [["Contatta lo Gnomo"], ["Torna al menu"]]
		}
	};

	if (changeComb == 0) {
		connection.query('UPDATE heist_progress SET wait_time = NULL WHERE from_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Il tuo gnomo ha terminato la raccolta delle rune, torna al rifugio!", rBack);
		});
	} else {
		var numbers = changeComb.split("");
		var my_numbers = myComb.split("");
		var len = Object.keys(numbers).length;

		var randCom = 0;
		for (i = 0; i < len; i++) {
			randCom = Math.round(Math.random() * 5 + 1);
			if (randCom != my_numbers[numbers[i] - 1])
				my_numbers[numbers[i] - 1] = randCom;
			else
				i--;
		}

		connection.query('UPDATE heist_progress SET my_combination = ' + my_numbers.join("") + ', changeComb = 0, wait_time = NULL WHERE from_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});

		connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;

			var dragon = 0;
			if (Object.keys(rows).length > 0) {
				dragon = rows[0].level / 4;
			}

			var rand = Math.random() * 100;
			var text = "";

			if ((rand > 3) && (rand < 8)) {
				connection.query('SELECT id, name FROM item WHERE rarity = "D" AND name LIKE "Pietra%" ORDER BY RAND()', function (err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0) {
						var name = rows[0].name;
						var id = rows[0].id;
						addItem(player_id, id);
						connection.query('UPDATE heist_progress SET wait_time = NULL WHERE from_id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							text = "Durante il viaggio √® caduto in un buco profondo ed ha trovato una <b>" + name + "</b>!";
							bot.sendMessage(chat_id, "Il tuo gnomo ha cambiato le rune richieste, torna al rifugio!\n" + text, rBack);
						});
					}
				});
			} else if ((rand > 10) && (rand < 12)) {			
				connection.query('SELECT item.id As item_id, item.name FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity NOT IN ("U","IN","S","D","A","X") AND inventory.player_id = ' + to_id + ' AND inventory.quantity > 0 ORDER BY RAND()', function (err, rows, fields) {
					if (err) throw err;
					var name = "";
					var id = 0;
					if (Object.keys(rows).length > 0) {
						name = rows[0].name;
						id = rows[0].item_id;
						delItem(to_id, id, 1);
						addItem(player_id, id);
					}

					connection.query('UPDATE heist_progress SET wait_time = NULL WHERE from_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						if (id != 0) {
							text = "Durante il viaggio √® stato catturato dai guardiani del rifugio e durante la sua avventurosa fuga √® riuscito a sgraffignare 1x <b>" + name + "</b>!";
							bot.sendMessage(chat_id, "Il tuo gnomo ha cambiato le rune richieste, torna al rifugio!\n" + text, rBack);
							connection.query('SELECT chat_id FROM player WHERE id = ' + to_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(rows[0].chat_id, "Lo gnomo di " + nick + " √® riuscito a sgraffignarti 1x <b>" + name + "</b>!", html);
							});
						}
					});
				});
			} else if ((rand > 20) && (rand < 22)) {
				connection.query('SELECT C.id, C.name FROM chest C, inventory_chest I WHERE C.id = I.chest_id AND I.player_id = ' + to_id + ' AND quantity > 0 ORDER BY RAND()', function (err, rows, fields) {
					if (err) throw err;

					var name = "";
					var id = 0;
					if (Object.keys(rows).length > 0) {
						name = rows[0].name;
						id = rows[0].id;
						delChest(to_id, id, 1);
						addChest(player_id, id);
					}

					connection.query('UPDATE heist_progress SET wait_time = NULL WHERE from_id = ' + player_id, function (err, rows, fields) {
						if (err) throw err;
						if (id != 0) {
							text = "Durante il viaggio √® stato catturato e durante la sua avventurosa fuga √® riuscito a sgraffignare un <b>" + name + "</b>!";
							bot.sendMessage(chat_id, "Il tuo gnomo ha cambiato le rune richieste, torna al rifugio!\n" + text, rBack);
							connection.query('SELECT chat_id FROM player WHERE id = ' + to_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(rows[0].chat_id, "Lo gnomo di " + nick + " √® riuscito a sgraffignarti <b>" + name + "</b>!", html);
							});
						}
					});
				});
			} else {
				bot.sendMessage(chat_id, "Il tuo gnomo ha cambiato le rune richieste, torna al rifugio!", rBack);
				return;
			};
		});
	};
};

function setFinishedHeist(element, index, array) {
	connection.query('SELECT player.nickname, player.exp, player.heist_streak, player.ability, player.money, player.id, player.chat_id, heist.grade, heist.rate1, heist.to_id, heist.matchmaking FROM player, heist WHERE heist.from_id = player.id AND heist.id = ' + element.id, function (err, rows, fields) {
		if (err) throw err;
		var fromNick = rows[0].nickname;
		var fromId = rows[0].id;
		var toId = rows[0].to_id;
		var fromChat = rows[0].chat_id;
		var fromMoney = parseInt(rows[0].money);
		var fromAbility = parseInt(rows[0].ability);
		var fromLevel = Math.floor(rows[0].exp / 10);
		var streak = parseInt(rows[0].heist_streak);
		var isMatch = rows[0].matchmaking;
		var rate = rows[0].rate1; //Probabilit√† di successo
		var grade = rows[0].grade;

		connection.query('SELECT level, name, type FROM dragon WHERE player_id = ' + toId, function (err, rows, fields) {
			if (err) throw err;
			var dragon_room = 0;
			var dragon_level = 0;
			var dragon_name = "";
			if (Object.keys(rows).length > 0) {
				dragon_level = rows[0].level;
				dragon_name = rows[0].name + " " + rows[0].type;
			}
			connection.query('SELECT player.nickname, player.ability, player.id As playerid, player.chat_id, player.money FROM player, heist WHERE heist.to_id = player.id AND heist.id = ' + element.id, function (err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0) {
					console.log("Errore id ispezione: " + element.id);
					return;
				}
				var toNick = rows[0].nickname;
				var toId = rows[0].playerid;
				var toMoney = parseInt(rows[0].money);
				var toChat = rows[0].chat_id;
				var toAbility = parseInt(rows[0].ability);

				connection.query('SELECT wanted_id, player_id FROM event_wanted_status WHERE player_id = ' + fromId, function (err, rows, fields) {
					if (err) throw err;

					if (((wanted == 1) || (fromId == 1)) && (Object.keys(rows).length > 0)) {
						if (toId == rows[0].wanted_id) {
							var rand_succ = Math.random() * 100;
							var wantedId = rows[0].wanted_id;
							connection.query('SELECT heist_win_2 FROM event_wanted_status WHERE player_id = ' + wantedId, function (err, rows, fields) {
								if (err) throw err;
								var heist = rows[0].heist_win_2;

								var randChest = 0;
								var chest_id = 0;

								randChest = Math.round((Math.random() * 99) + 1);
								if ((randChest <= 100) && (randChest >= 50)) //50%
									chest_id = 2;
								else if ((randChest < 50) && (randChest >= 20)) //30%   
									chest_id = 3;
								else if ((randChest < 20) && (randChest >= 5)) //15%
									chest_id = 4;
								else if ((randChest < 5) && (randChest >= 0)) //5%
									chest_id = 5;

								connection.query('SELECT name, rarity_shortname FROM chest WHERE id = ' + chest_id, function (err, rows, fields) {
									if (err) throw err;
									addChest(fromId, chest_id);
									bot.sendMessage(fromChat, "Come ricompensa per il tentativo hai ricevuto uno *" + rows[0].name + "* (" + rows[0].rarity_shortname + ")!", mark);
								});

								connection.query('SELECT money, chat_id FROM player WHERE id = ' + wantedId, function (err, rows, fields) {
									if (err) throw err;

									var wanted_chat = rows[0].chat_id;

									if (rand_succ < 35) {
										var money = ((parseInt(heist) * 100) + 10000);

										if (money > 150000)
											money = 150000;

										//bot.sendMessage(wanted_chat, "Lo gnomo di " + fromNick + " √® riuscito a catturarti! Andr√† meglio la prossima volta!");

										var key = 0;
										var key_text = "";
										var keyRand = Math.random()*100;
										if (keyRand < 5) {
											key = 1;
											key_text = " (Bonus: 1 Chiave Mistica üóù!)";
										}

										connection.query('UPDATE player SET money = money + ' + money + ', mkeys = mkeys+' + key + ' WHERE id = ' + fromId, function (err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(fromChat, "Il tuo gnomo ha catturato il ricercato e hai ottenuto la sua taglia pari a *" + formatNumber(money) + "* ¬ß" + key_text + "\nTorna nella schermata dell'evento per visualizzare il nuovo ricercato!", mark);
										});

										connection.query('UPDATE event_wanted_status SET heist_win = heist_win+1 WHERE player_id = ' + fromId, function (err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE event_wanted_status SET heist_lost_2 = heist_lost_2+1 WHERE player_id = ' + wantedId, function (err, rows, fields) {
											if (err) throw err;
										});

										connection.query('SELECT nickname, from_id, COUNT(from_id) FROM heist_history, player, event_wanted_status WHERE account_id NOT IN (SELECT account_id FROM banlist) AND fail = 0 AND event_wanted_status.player_id = player.id AND player.id = heist_history.from_id AND player.id != ' + fromId + ' AND time between DATE_SUB(now(),INTERVAL 2 MONTH) AND NOW() GROUP BY from_id ORDER BY COUNT(from_id) DESC LIMIT 200', function (err, rows, fields) {
											if (err) throw err;

											var len = Object.keys(rows).length;
											var rand = Math.round(Math.random() * len);

											var sel = rows[rand].from_id;
											connection.query('UPDATE event_wanted_status SET wanted_id = ' + sel + ' WHERE player_id = ' + fromId, function (err, rows, fields) {
												if (err) throw err;
												//bot.sendMessage(fromChat, "Ora ispeziona il nuovo ricercato!");
											});
										});
									} else {
										//bot.sendMessage(wanted_chat, "Lo gnomo di " + fromNick + " ha tentato di catturarti, ma fortunatamente sei riuscito a scappare!");
										bot.sendMessage(fromChat, "Il tuo tentativo di cattura √® stato un FALLIMENTO, riprova tentando ancora!");

										connection.query('UPDATE event_wanted_status SET heist_lost = heist_lost+1 WHERE player_id = ' + fromId, function (err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE event_wanted_status SET heist_win_2 = heist_win_2+1 WHERE player_id = ' + wantedId, function (err, rows, fields) {
											if (err) throw err;
										});
									}
									connection.query('DELETE FROM `heist` WHERE `id`=' + element.id, function (err, rows, fields) {
										if (err) throw err;
									});
								});
							});
							return;
						}
					}
					connection.query('SELECT house_id FROM player WHERE id = ' + toId, function (err, rows, fields) {
						if (err) throw err;

						var to_house_id = rows[0].house_id;

						rate -= to_house_id * 5;
						rate -= dragon_level / 7;
						rate += fromLevel / 20;

						connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + fromId + ' AND ability_id = 4', function (err, rows, fields) {
							if (err) throw err;

							var abBonus = 0;
							var abBonus2 = 0;
							if (Object.keys(rows).length > 0) {
								abBonus = rows[0].ability_level;
								rate = parseInt(rate) + (abBonus * rows[0].val);
							}

							var rand = Math.random() * 100;
							var fail = 1;

							if (rate < 5)
								rate = 5;
							if (rate > 80)
								rate = 80;

							if (rand < rate)
								fail = 0;

							if (fromId == 1)
								fail = 0;

							connection.query('UPDATE player SET heist_limit = heist_limit+1 WHERE id = ' + toId, function (err, rows, fields) {
								if (err) throw err;
							});

							var kb = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Contatta lo gnomo"], ["Torna al menu"]]
								}
							};

							var kb2 = {
								parse_mode: "HTML",
								reply_markup: {
									resize_keyboard: true,
									keyboard: [["Torna al rifugio"], ["Torna al menu"]]
								}
							};

							if (fail == 1) {
								connection.query('SELECT chat_id, heist_description FROM player WHERE id = ' + toId, function (err, rows, fields) {
									if (err) throw err;
									var heist_description = "";
									if (rows[0].heist_description != null)
										heist_description = "\nLeggi malinconicamente un cartello affisso su un albero con su scritto: <i>" + rows[0].heist_description + "</i>";
									bot.sendMessage(fromChat, "Il tuo gnomo non √® riuscito a raggiungere il rifugio nemico, dannazione!", kb2);
									bot.sendMessage(rows[0].chat_id, "Lo gnomo di <b>" + fromNick + "</b> √® stato respinto dal tuo guardiano del cancello!", html);
								});

								var d = new Date();
								var history_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

								connection.query('INSERT INTO heist_history (from_id, to_id, rate1, fail, time, matchmaking) VALUES (' + fromId + ', ' + toId + ', 0, 1, "' + history_date + '", ' + isMatch + ')', function (err, rows, fields) {
									if (err) throw err;
								});
							} else {

								if (isMatch == 1)
									setAchievement(fromId, 9, 1);

								var d = new Date();
								d.setHours(d.getHours() + 12);
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
								var short_time = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

								var combi = "";
								for (i = 0; i < 5; i++)
									combi += String(Math.round(Math.random() * 5 + 1));

								connection.query('INSERT INTO heist_progress (from_id, to_id, combination, time_end, isMatch) VALUES (' + fromId + ',' + toId + ',' + combi + ', "' + long_date + '",' + isMatch + ')', function (err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(fromChat, "Il tuo gnomo √® arrivato al rifugio nemico, il guardiano del cancello ti propone uno strano gioco con le <b>Rune</b>, hai tempo fino alle " + short_time + " per partecipare!", html);
									connection.query('SELECT chat_id FROM player WHERE id = ' + toId, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(rows[0].chat_id, "Lo gnomo di <b>" + fromNick + "</b> √® riuscito ad arrivare davanti al tuo rifugio!", html);
									});
								});
							}
							connection.query('DELETE FROM heist WHERE id = ' + element.id, function (err, rows, fields) {
								if (err) throw err;
							});
						});
					});
				});
			});
		});
	});
};

function setFinishedTravel(element, index, array) {
	var chat_id = element.chat_id;

	connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 9', function (err, rows, fields) {
		if (err) throw err;

		var abBonus = 0;
		var double = 0;
		if (Object.keys(rows).length > 0) {
			var rand = Math.random();
			abBonus = parseInt(rows[0].ability_level) * rows[0].val;
			if (rand < abBonus)
				double = 1;
		}

		connection.query('UPDATE player SET travel_id = 0, travel_time_end = NULL WHERE id = ' + element.id, function (err, rows, fields) {
			if (err) throw err;
			connection.query('SELECT chest_id, money FROM travel WHERE id = "' + element.travel_id + '"', function (err, rows, fields) {
				if (err) throw err;
				var mission_chest = rows[0].chest_id;
				var money = rows[0].money;
				connection.query('SELECT name, rarity_shortname FROM chest WHERE id = "' + mission_chest + '"', function (err, rows, fields) {
					if (err) throw err;
					var chest_id = mission_chest;

					var qnt = (7-element.travel_id)*15;
					var exp = element.travel_id*10;

					var double_text = "";
					if (double == 1) {
						qnt = qnt*2;
						double_text = ", raddoppiati grazie al talento";
					}

					bot.sendMessage(chat_id, "Viaggio completato, hai ottenuto " + qnt + "x *" + rows[0].name + "* (" + rows[0].rarity_shortname + double_text + "), *" + formatNumber(money) + "* ¬ß e *" + exp + "* exp!", mark);

					addChest(element.id, chest_id, qnt);
					setExp(element.id, exp);

					connection.query('UPDATE player SET travel_limit = 0, money = money + ' + money + ', travel_count = travel_count+1 WHERE id = ' + element.id, function (err, rows, fields) {
						if (err) throw err;
					});
				});
			});
		});
	});
}

function setFinishedCave(element, index, array) {
	var chat_id = element.chat_id;
	var boost_id = element.boost_id;
	var boost_mission = element.boost_mission;
	var cave_gem = element.cave_gem;
	var global_end = element.global_end;

	if ((boost_mission <= 0) && (boost_id != 0)) {
		connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + element.id, function (err, rows, fields) {
			if (err) throw err;
		});
		boost_mission = 0;
		boost_id = 0;
	}

	connection.query('SELECT * FROM cave WHERE id = ' + element.cave_id, function (err, rows, fields) {
		if (err) throw err;

		var rand = 0;
		var stone_id = 0;
		var charm_id = element.charm_id;

		var caveid = parseInt(element.cave_id) + 2;

		/*
		if (global_end == 1)
			caveid = Math.round(caveid/2);
		*/

		if (charm_id == 603)
			caveid += 2;

		if (charm_id == 695)
			caveid += 5;

		if (luckyMode == 1) {
			var d = new Date();
			var rand = Math.random() * 100;
			if (d.getDay() == 6) {
				if (rand < 15)
					caveid = caveid * 2;
			} else if (d.getDay() == 0) {
				if (rand < 10)
					caveid = caveid * 2;
				else if ((rand > 10) && (rand < 25))
					caveid = 0;
			}
		}

		var boost_text = "";

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 16', function (err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0) {
				var rand = Math.random() * 100;
				abBonus = parseInt(rows[0].ability_level) * rows[0].val;
				if ((rand < abBonus) && (luckyMode == 0)) {
					setAchievement(element.id, 56, caveid);
					caveid = caveid * 2;
					boost_text += "\nRaddoppiate grazie al Talento!";
				}
			}

			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 8', function (err, rows, fields) {
				if (err) throw err;

				var abBonus = 0;
				if (Object.keys(rows).length > 0)
					abBonus = parseInt(rows[0].ability_level) * rows[0].val;

				if (boost_id == 3) {
					setAchievement(element.id, 56, caveid);
					caveid = caveid * 2;
					boost_text += "\nRaddoppiate grazie alla Bevanda Fiamma di Drago!";
					setBoost(element.id, boost_mission, boost_id);
				}

				var rand2 = 0;
				var totPnt = 0;

				var itemsArray = [];
				var msg = "";

				var stone1 = 0;
				var stone2 = 0;
				var stone3 = 0;
				var stone4 = 0;
				var stone5 = 0;
				var stone6 = 0;
				var stone1e = 0;
				var stone2e = 0;
				var stone3e = 0;
				var stone4e = 0;
				var stone5e = 0;
				var stone6e = 0;

				for (i = 0; i < caveid; i++) {
					evolved = 0;

					rand = Math.round(Math.random() * 100);
					if (rand <= 5) {
						stone_id = 73;
						stone6++;
					} else if (rand <= 15) {
						stone_id = 72;
						stone5++;
					} else if (rand <= 30) {
						stone_id = 71;
						stone4++;
					} else if (rand <= 50) {
						stone_id = 70;
						stone3++;
					} else if (rand <= 75) {
						stone_id = 69;
						stone2++;
					} else if (rand <= 100) {
						stone_id = 68;
						stone1++;
					}

					rand2 = Math.random() * 100;
					if ((rand2 < abBonus) && (stone_id != 73)) {
						stone_id++;

						if (stone_id == 73) {
							stone5--;
							stone6e++;
						} else if (stone_id == 72) {
							stone4--;
							stone5e++;
						} else if (stone_id == 71) {
							stone3--;
							stone4e++;
						} else if (stone_id == 70) {
							stone2--;
							stone3e++;
						} else if (stone_id == 69) {
							stone1--;
							stone2e++;
						}
					}

					totPnt += (stone_id-67);
					addItem(element.id, stone_id);
				}

				connection.query('UPDATE player SET cave_limit = 0, cave_id = 0, cave_time_end = NULL, cave_count = cave_count+1 WHERE id = ' + element.id, function (err, rows, fields) {
					if (err) throw err;
				});

				if (caveid == 0)
					bot.sendMessage(chat_id, "Hai completato l'esplorazione della cava ma non hai ottenuto alcuna pietra!");
				else {
					if ((stone1+stone1e) > 0) {
						msg += "\n> " + (stone1+stone1e) + "x Pietra Anima di Legno";
						if (stone1e > 0)
							msg += " (di cui " + stone1e + " evolute)";
					}
					if ((stone2+stone2e) > 0) {
						msg += "\n> " + (stone2+stone2e) + "x Pietra Anima di Ferro";
						if (stone2e > 0)
							msg += " (di cui " + stone2e + " evolute)";
					}
					if ((stone3+stone3e) > 0) {
						msg += "\n> " + (stone3+stone3e) + "x Pietra Anima Preziosa";
						if (stone3e > 0)
							msg += " (di cui " + stone3e + " evolute)";
					}
					if ((stone4+stone4e) > 0) {
						msg += "\n> " + (stone4+stone4e) + "x Pietra Cuore di Diamante";
						if (stone4e > 0)
							msg += " (di cui " + stone4e + " evolute)";
					}
					if ((stone5+stone5e) > 0) {
						msg += "\n> " + (stone5+stone5e) + "x Pietra Cuore Leggendario";
						if (stone5e > 0)
							msg += " (di cui " + stone5e + " evolute)";
					}
					if ((stone6+stone6e) > 0) {
						msg += "\n> " + (stone6+stone6e) + "x Pietra Spirito Epico";
						if (stone6e > 0)
							msg += " (di cui " + stone6e + " evolute)";
					}
					msg += "\n\n" + caveid + " pietre per un totale di " + totPnt + " punti";

					bot.sendMessage(chat_id, "Hai completato l'esplorazione della cava e hai ottenuto:" + msg + boost_text);
					setAchievement(element.id, 54, (stone1e+stone2e+stone3e+stone4e+stone5e+stone6e));
				}

				var now = new Date();
				var rand = Math.random() * 200;
				if ((now.getHours() == 11) && (rand < 3) && (element.reborn >= 3)) {
					addItem(element.id, 201);
					bot.sendMessage(chat_id, "Hai ottenuto un Respiro di Morte! Che fortuna!");
				}
				setAchievement(element.id, 11, 1);
			});
		});
	});
}

function setFinishedBoost(element, index, array) {
	var chat_id = element.chat_id;
	connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + element.id, function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "Effetto della bevanda terminato!");
	});
}

function checkReborn() {
	connection.query('SELECT id, exp, life, total_life, reborn, chat_id, nickname FROM player WHERE (reborn = 1 AND exp >= 1000) OR (reborn > 1)', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			var player_id = 0;
			var chat_id = 0;
			var nick = "";

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				player_id = rows[i].id;
				chat_id = rows[i].chat_id;
				nick = rows[i].nickname;
				if (rows[i].reborn == 1) {
					if (rows[i].exp >= 1000) {
						connection.query('UPDATE player SET exp = 1000 WHERE id = ' + rows[i].id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				} else if (rows[i].reborn == 2) {
					if (rows[i].exp >= 1500) {
						connection.query('UPDATE player SET exp = 1500 WHERE id = ' + rows[i].id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				} else if (rows[i].reborn == 3) {
					if (rows[i].exp >= 2000) {
						connection.query('UPDATE player SET exp = 2000 WHERE id = ' + rows[i].id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				} else if (rows[i].reborn == 4) {
					if (rows[i].exp >= 3000) {
						connection.query('UPDATE player SET exp = 3000 WHERE id = ' + rows[i].id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				} else if (rows[i].reborn == 5) {
					if (rows[i].exp >= 10000) {
						connection.query('UPDATE player SET exp = 10000 WHERE id = ' + rows[i].id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				}

				var realLev = getRealLevel(rows[i].reborn, Math.floor(rows[i].exp/10));
				if (realLev >= 750) {
					lacrima(player_id, chat_id);
				}
				if (realLev >= 1250) {
					lacrima2(player_id, chat_id);
				}
				if (realLev >= 1650) {
					lacrima3(player_id, chat_id);
				}

				var life = rows[i].exp * 10;
				if ((rows[i].life == 0) && (rows[i].total_life == 0)) {
					connection.query('UPDATE player SET life = ' + life + ', total_life = ' + life + ' WHERE id = ' + rows[i].id, function (err, rows, fields) {
						if (err) throw err;
					});
				} else {
					connection.query('UPDATE player SET total_life = ' + life + ' WHERE id = ' + rows[i].id, function (err, rows, fields) {
						if (err) throw err;
					});
				}
			}
		}
	});
};

function updateSpecialItem() {
	connection.query('SELECT material_3 FROM craft WHERE material_result = 759', function (err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT id FROM item WHERE rarity IN ("C","NC","R") AND craftable = 0 AND id != ' + rows[0].material_3 + ' ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			connection.query('UPDATE craft SET material_3 = ' + rows[0].id + ' WHERE material_result = 759', function (err, rows, fields) {
				if (err) throw err;
			});
		});
	});

	connection.query('SELECT material_1 FROM craft WHERE material_result = 771', function (err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT id FROM item WHERE id IN (264, 266, 272, 651) AND id != ' + rows[0].material_1 + ' ORDER BY RAND()', function (err, rows, fields) {
			if (err) throw err;
			connection.query('UPDATE craft SET material_1 = ' + rows[0].id + ' WHERE material_result = 771', function (err, rows, fields) {
				if (err) throw err;
			});
		});
	});
}

function resetSpecialItem() {
	connection.query('UPDATE craft SET material_3 = 646 WHERE material_result = 759', function (err, rows, fields) {
		if (err) throw err;
	});
}

function saveHourGlobal() {
	connection.query('INSERT INTO global_hourly (value) SELECT SUM(value) As tot FROM achievement_global', function (err, rows, fields) {
		if (err) throw err;
	});
}

function checkTeamClean() {
	connection.query('SELECT team.id, team.name, team.players, COUNT(team_player.player_id) As cnt FROM team LEFT JOIN team_player ON team.id = team_player.team_id GROUP BY team.id HAVING cnt = 0', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 team da cancellare\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " team da cancellare\x1b[0m");
			rows.forEach(setFinishedTeamClean);
		}
	});
};

function setFinishedTeamClean(element, index, array) {
	var name = element.name;
	var id = element.id;

	connection.query('DELETE FROM team WHERE id = ' + id, function (err, rows, fields) {
		if (err) throw err;
		console.log("Team eliminato: " + name);
	});
};

function checkTeamPlayers() {
	connection.query('SELECT team.id, team.name, team.players, COUNT(team_player.player_id) As cnt FROM team LEFT JOIN team_player ON team.id = team_player.team_id GROUP BY team.id', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 team adeguato\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " team adeguato\x1b[0m");
			rows.forEach(setFinishedTeamPlayers);
		}
	});
};

function setFinishedTeamPlayers(element, index, array) {
	var name = element.name;
	var id = element.id;
	var players = element.players;
	var cnt = element.cnt;

	if (players != cnt) {
		connection.query('UPDATE team SET players = ' + cnt + ' WHERE id = ' + id, function (err, rows, fields) {
			if (err) throw err;
			console.log("Team adeguato: " + name + " " + players + " -> " + cnt);
		});
	}
};

function checkGnomorraGame() {
	connection.query('SELECT player_id, enemy_id, round_sel FROM event_gnomorra WHERE game_time < NOW() AND game_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 partita scaduta\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " partite scadute\x1b[0m");
			rows.forEach(setFinishedGnomorraGame);
		}
	});
}

function setFinishedGnomorraGame(element, index, array) {
	var player_id = element.player_id;
	var enemy_id = element.enemy_id;
	var round_sel = element.round_sel;

	var text1 = "La partita di gnomorra in corso √® scaduta!";
	var text2 = "La partita di gnomorra in corso √® scaduta!";
	var q1 = "";
	var q2 = "";
	if (round_sel == 0) {
		text1 = "La partita di gnomorra in corso √® scaduta, la tua serie di vittorie √® stata resettata e la partita √® stata contrassegnata come sconfitta!";
		q1 = ", win_streak = 0, lose = lose+1";
		q2 = ", win = win+1";
	} else {
		text2 = "La partita di gnomorra in corso √® scaduta, la tua serie di vittorie √® stata resettata e la partita √® stata contrassegnata come sconfitta!";
		q2 = ", win_streak = 0, lose = lose+1";
		q1 = ", win = win+1";
	}
	connection.query('SELECT chat_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0) {
			console.log("Errore partita scaduta senza player_id");
			return;
		}
		bot.sendMessage(rows[0].chat_id, text1, back);
		connection.query('UPDATE event_gnomorra SET enemy_id = NULL, game_time = NULL, round_win = 0, round_sel = 0, type = 0' + q1 + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});
	connection.query('SELECT chat_id FROM player WHERE id = ' + enemy_id, function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0) {
			console.log("Errore partita scaduta senza enemy_id");
			return;
		}
		bot.sendMessage(rows[0].chat_id, text2, back);
		connection.query('UPDATE event_gnomorra SET enemy_id = NULL, game_time = NULL, round_win = 0, round_sel = 0, type = 0' + q2 + ' WHERE player_id = ' + enemy_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});
}

function checkGnomorraInvite() {
	connection.query('SELECT player_id, invite_id FROM event_gnomorra WHERE invite_time < NOW() AND invite_time IS NOT NULL', function (err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0) {
			if (Object.keys(rows).length == 1)
				console.log(getNow("it") + "\x1b[32m 1 invito scaduto\x1b[0m");
			else
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " inviti scaduti\x1b[0m");
			rows.forEach(setFinishedGnomorraInvite);
		}
	});
}

function setFinishedGnomorraInvite(element, index, array) {
	var player_id = element.player_id;
	var invite_id = element.invite_id;
	connection.query('SELECT chat_id FROM player WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(rows[0].chat_id, "L'invito inviato per gnomorra √® scaduto!", back);
		connection.query('UPDATE event_gnomorra SET invite_id = NULL, invite_time = NULL WHERE player_id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});
	connection.query('SELECT chat_id FROM player WHERE id = ' + invite_id, function (err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(rows[0].chat_id, "L'invito ricevuto per gnomorra √® scaduto!");
		connection.query('UPDATE event_gnomorra SET invite_id = NULL, invite_time = NULL WHERE player_id = ' + invite_id, function (err, rows, fields) {
			if (err) throw err;
		});
	});
};

function setExp(player_id, exp) {
	connection.query('SELECT chat_id, exp, reborn FROM player WHERE id = ' + player_id, function (err, rows, fields) {
		if (err) throw err;

		var chat_id = rows[0].chat_id;
		var reborn = rows[0].reborn;
		var my_exp = rows[0].exp;

		if (((reborn == 1) && (my_exp < 1000)) ||
			((reborn == 2) && (my_exp < 1500)) ||
			((reborn == 3) && (my_exp < 2000)) ||
			((reborn == 4) && (my_exp < 3000)) ||
			(reborn == 5)) {
			if (my_exp < 10000) {
				connection.query('UPDATE player SET exp = exp+' + exp + ' WHERE id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
				});
			} else {
				connection.query('SELECT COUNT(id) As cnt FROM artifacts WHERE item_id = 675 AND player_id = ' + player_id, function (err, rows, fields) {
					if (err) throw err;
					if (rows[0].cnt > 0) {
						connection.query('UPDATE player SET gain_exp = gain_exp+' + exp + ' WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
						});
					}
				});
			}
		}

		setAchievement(player_id, 57, exp);
	});
}

// Gestione oggetti

function addItem(player_id, item_id, qnt = 1) {
	qnt = parseInt(qnt);
	if (isNaN(qnt)) {
		console.log("ERRORE! addItem di " + qnt + "x " + item_id + " per player " + player_id);
		return;
	}

	var rows = connection_sync.query('UPDATE inventory SET quantity = quantity+' + qnt + ' WHERE player_id = ' + player_id + ' AND item_id = ' + item_id);
	if (rows.affectedRows == 0) {
		connection_sync.query('INSERT INTO inventory (player_id, item_id, quantity) VALUES (' + player_id + ',' + item_id + ', ' + qnt + ')');
	}
}

function delItem(player_id, item_id, qnt = 1) {
	qnt = parseInt(qnt);
	if (isNaN(qnt)) {
		console.log("ERRORE! delItem di " + qnt + "x " + item_id + " per player " + player_id);
		return;
	}

	connection.query('UPDATE inventory SET quantity = quantity-' + qnt + ' WHERE player_id = ' + player_id + ' AND item_id = ' + item_id, function (err, rows, fields) {
		if (err) throw err;
	});
}

function delAllItem(player_id, item_id) {
	connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id, function (err, rows, fields) {
		if (err) throw err;
	});
}

function delAllInventory(player_id) {
	connection_sync.query('DELETE FROM inventory WHERE player_id = ' + player_id);
}

function getItemCnt(player_id, item_id) {
	var item = connection_sync.query('SELECT quantity FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id);
	if (Object.keys(item).length == 0)
		return 0;
	else
		return item[0].quantity;
}

// Gestione scrigni

function addChest(player_id, chest_id, qnt = 1) {
	qnt = parseInt(qnt);
	if (isNaN(qnt)) {
		console.log("ERRORE! addChest di " + qnt + "x " + chest_id + " per player " + player_id);
		return;
	}

	var rows = connection_sync.query('UPDATE inventory_chest SET quantity = quantity+' + qnt + ' WHERE player_id = ' + player_id + ' AND chest_id = ' + chest_id);
	if (rows.affectedRows == 0) {
		connection_sync.query('INSERT INTO inventory_chest (player_id, chest_id, quantity) VALUES (' + player_id + ',' + chest_id + ', ' + qnt + ')');
	}
}

function delChest(player_id, chest_id, qnt = 1) {
	qnt = parseInt(qnt);
	if (isNaN(qnt)) {
		console.log("ERRORE! delChest di " + qnt + "x " + chest_id + " per player " + player_id);
		return;
	}
	connection.query('UPDATE inventory_chest SET quantity = quantity-' + qnt + ' WHERE player_id = ' + player_id + ' AND chest_id = ' + chest_id, function (err, rows, fields) {
		if (err) throw err;
	});
}

function delAllChest(player_id, chest_id) {
	connection.query('DELETE FROM inventory_chest WHERE player_id = ' + player_id + ' AND chest_id = ' + chest_id, function (err, rows, fields) {
		if (err) throw err;
	});
}

function delAllChestInventory(player_id) {
	connection_sync.query('DELETE FROM inventory_chest WHERE player_id = ' + player_id);
}

function getChestCnt(player_id, chest_id) {
	var item = connection_sync.query('SELECT quantity FROM inventory_chest WHERE player_id = ' + player_id + ' AND chest_id = ' + chest_id);
	if (Object.keys(item).length == 0)
		return 0;
	else
		return item[0].quantity;
}

function isBanned(account_id) {
	var banned = connection_sync.query('SELECT reason FROM banlist WHERE account_id = ' + account_id);
	if (Object.keys(banned).length == 0)
		return null;
	else {
		console.log(account_id + " √® bannato");
		return banned[0].reason;
	}
}

function calcNecro(start, lev, reborn, type) {
	var val = 0;
	if (type == 1)
		val = Math.round(start+lev/(6-0.25*(reborn-1)));
	else if (type == 2)
		val = Math.round(start+lev/(4+0.5*(4-(reborn-1))));
	return val;
}

function calcLife(message) {
	connection.query('SELECT id, exp, reborn, life, weapon_id, weapon2_id, weapon3_id, total_life FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0)
			return;

		var player_id = rows[0].id;
		var lev = Math.floor(rows[0].exp / 10);
		var reb = rows[0].reborn;
		var weapon_id = rows[0].weapon_id;
		var weapon2_id = rows[0].weapon2_id;
		var weapon3_id = rows[0].weapon3_id;

		if (weapon_id == 221) {
			var power = calcNecro(300, lev, reb, 1);
			connection.query('UPDATE player SET weapon = ' + power + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		} else if ((weapon_id == 638) || 
				   (weapon_id == 639) || 
				   (weapon_id == 640) || 
				   (weapon_id == 754)) {
			var power = calcNecro(300, lev, reb, 2);
			connection.query('UPDATE player SET weapon = ' + power + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		}

		if (weapon2_id == 577) {
			var power = -Math.abs(calcNecro(250, lev, reb, 1));
			connection.query('UPDATE player SET weapon2 = ' + power + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		} else if ((weapon2_id == 688) || 
				   (weapon2_id == 689) || 
				   (weapon2_id == 690) ||
				   (weapon2_id == 790)) {
			var power = -Math.abs(calcNecro(250, lev, reb, 2));
			connection.query('UPDATE player SET weapon2 = ' + power + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		}

		if (weapon3_id == 600) {
			var power = -Math.abs(calcNecro(250, lev, reb, 1));
			connection.query('UPDATE player SET weapon3 = ' + power + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		} else if ((weapon3_id == 671) || 
				   (weapon3_id == 672) || 
				   (weapon3_id == 673) ||
				   (weapon3_id == 791)) {
			var power = -Math.abs(calcNecro(250, lev, reb, 2));
			connection.query('UPDATE player SET weapon3 = ' + power + ' WHERE id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		}

		connection.query('UPDATE player SET total_life = exp*10 WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			connection.query('UPDATE player SET life = total_life WHERE life > total_life AND id = ' + player_id, function (err, rows, fields) {
				if (err) throw err;
			});
		});
	});
}

bot.onText(/^\/last (.+)/, function (message, match) {
	var nick = match[1];

	if (message.from.id == 20471035) {
		connection.query('SELECT time FROM last_command, player WHERE last_command.account_id = player.account_id AND player.nickname = "' + nick + '"', function (err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0) {
				var d = new Date(rows[0].time);
				var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
				bot.sendMessage(message.chat.id, long_date);
			} else {
				bot.sendMessage(message.chat.id, "Boh!");
			}
		});
	};
});

function addZero(i) {
	if (i < 10)
		i = "0" + i;
	return i;
}

function formatNumber(num) {
	return ("" + num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, function ($1) {
		return $1 + "."
	});
}

function toDate(lang, date) {
	var d = new Date(date);
	if (typeof date == "object")
		d = date;
	var datetime;
	if (lang == "it") {
		datetime = addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear() + " alle " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	} else if (lang == "en") {
		datetime = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	} else
		datetime = "Error";
	return datetime;
}

function getNow(lang, obj) {
	var d = new Date();
	obj = typeof obj !== 'undefined' ? obj : false;
	var datetime;
	if (lang == "it") {
		datetime = addZero(d.getDate()) + "/" + addZero(d.getMonth() + 1) + "/" + d.getFullYear() + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	} else if (lang == "en") {
		datetime = d.getFullYear() + "-" + addZero(d.getMonth() + 1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	} else {
		datetime = "Error";
	}
	if (obj == true)
		datetime = new Date(datetime);
	return datetime;
}

function callNTimes(time, fn) {
	function callFn() {
		if (1 < 0) return;
		fn();
		setTimeout(callFn, time);
	}
	setTimeout(callFn, time);
}

function findAndRemove(array, str) {
	for (var i = 0; i < array.length; i++) {
		if (array[i] == str) {
			array.splice(i, 1);
		}
	}
	return array;
}

function findInArray(array, str) {
	for (var i = 0; i < array.length; i++) {
		if (array[i] == str) {
			return true;
		}
	}
	return false;
}

function getPosition(str, m, i) {
	return str.split(m, i).join(m).length;
}

function shuffle(array) {
	var currentIndex = array.length,
		temporaryValue, randomIndex;

	while (0 !== currentIndex) {
		randomIndex = Math.floor(Math.random() * currentIndex);
		currentIndex -= 1;

		temporaryValue = array[currentIndex];
		array[currentIndex] = array[randomIndex];
		array[randomIndex] = temporaryValue;
	}
	return array;
}

function mysql_real_escape_string(str) {
	return str.replace(/[\0\x08\x09\x1a\n\r"'\\\%]/g, function (char) {
		switch (char) {
			case "\0":
				return "\\0";
			case "\x08":
				return "\\b";
			case "\x09":
				return "\\t";
			case "\x1a":
				return "\\z";
			case "\n":
				return "\\n";
			case "\r":
				return "\\r";
			case "\"":
			case "'":
			case "\\":
			case "%":
				return "\\" + char;
		}
	});
}

function estimate(values) {
	if (values.length <= 2)
		return average(values);
	var avg = average(values),
		upper = [],
		lower = [];
	values.forEach(function (val) {
		if (val >= avg)
			upper.push(val);
		else
			lower.push(val);
	});

	if (upper.length == 0)
		return average(lower);
	if (lower.length == 0)
		return average(upper);

	var upperDev = deviationFromAvg(upper, avg),
		lowerDev = deviationFromAvg(lower, avg);
	if (upperDev >= lowerDev)
		return estimate(lower);
	else
		return estimate(upper);
}

function searchArrayInString(str, strArray) {
	for (var j = 0; j < strArray.length; j++) {
		if (str.indexOf(strArray[j]) != -1)
			return j;
	}
	return -1;
}

function average(values) {
	var sum = 0;
	values.forEach(function (el) {
		sum += +el;
	});
	return Math.floor(sum / values.length);
}

function calculateAge(dob) { 
	var diff_ms = Date.now() - dob.getTime();
	var age_dt = new Date(diff_ms);

	return Math.abs(age_dt.getUTCFullYear() - 1970);
}

function deviationFromAvg(values, avg) {
	var dev = 0;
	values.forEach(function (el) {
		dev += Math.abs(el - avg);
	});
	return Math.floor(dev / values.length);
}

String.prototype.replaceAll = function (search, replacement) {
	var target = this;
	return target.replace(new RegExp(search, 'g'), replacement);
};