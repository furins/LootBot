process.on('uncaughtException', function (err) {
	console.error("\x1b[31m" + err.stack + "\x1b[0m");
});

process.on('unhandledRejection', function(reason, p){
	console.error("\x1b[31m" + reason.stack + ")\x1b[0m");
});

//Globali
var max_mission_id = 290;
var firstStart = 0;
var banlist_id = [];
var banlist_tx = [];
var timevar = [];
var timevarFlood = [];
var answerCallbacks = {};

var crazyMode = 0;
var luckyMode = 0;
var arena = 0;
var xxxteria = 0;
var xxxteriaBlock = 0;
var autoEstrazione = 0;
var halloween = 0;
var villa = 0;
var mistery = 0;
var wanted = 0;
var eventStory = 0;
var eventMana = 0;
var eventFestival = 0;
var specialMission = 0;
var eventDust = 0;
var eventTeamStory = 0;

var sconto = 10;
var max_duration = 5;
var wait_room = 900;
var wait_dungeon = 2;
var wait_dungeon_long = 5;
var max_istance = 120;
var merchant_limit = 5;
var rankList = [20,50,75,100,150,200,500,1000];

var progLev = [50,100,250,450,750,1250,1500,1750];
var progLevRew = [50000,100000,125000,150000,250000,1000000,2500000,5000000];
var progMis = [10, 25, 50, 75, 100, 250, 500, 1000, 2000, 5000, 10000];
var progMisRew = [5000, 12500, 25000, 50000, 75000, 100000, 250000, 350000, 500000, 1000000, 2000000];
var progDung = [1, 5, 10, 25, 50, 75, 100, 250, 500];
var progDungRew = [10000, 50000, 75000, 100000, 250000, 500000, 750000, 1000000, 2000000];
var progCraft = [100, 500, 1000, 2500, 5000, 10000, 20000, 50000, 75000, 100000];
var progCraftRew = [10000, 50000, 75000, 150000, 250000, 500000, 1000000, 2000000, 4000000, 6000000];

var re = new RegExp("^[0-9]*$");
var re2 = new RegExp("^[a-zA-Z0-9√†√®√¨√≤√π ]*$");
var re3 = new RegExp("^[a-zA-Z0-9!?,.√†√®√©√¨√≤√π@ ]*$");

var TelegramBot = require('node-telegram-bot-api');
var fs = require('fs')
var Schedule = require('node-schedule');
var similarWord = require('fast-levenshtein');

var token = '171514820:AAHSsAF-_bkpB5Du5NLvRqlUpzgSntwz22c';
var bot = new TelegramBot(token, {polling: true});

var Schedule = require('node-schedule');
var exec = require('child_process').exec;

var j = Schedule.scheduleJob('00 3 * * *', function(){		//3 notte
	refreshHeists();
	refreshLife();
});

var j2 = Schedule.scheduleJob('59 23 * * *', function(){	//23:59 notte
	saveActive();	
});

var j3 = Schedule.scheduleJob('01 00 * * *', function(){	//00:00 notte
	var d = new Date();
	if (d.getDay() != 5){
		autoMana();
	}
	if (d.getDay() != 2){
		autoDust();
	}
	if ((d.getDay() != 6) && (d.getDay() != 0)){
		reloadAchievement();
	}else{
		resetAchievement();
	}
	if (d.getDay() == 1){
		craftWeek();
	}
});

var j3 = Schedule.scheduleJob('05 00 * * *', function(){	//00:05 notte
	refreshMerchant(0);
	market_generation();
	resetDungeonSkip();
	resetRefill();
});

callNTimes(40000, function(){					//40 secondi
	checkMissions();
});

callNTimes(60000, function() { 					//Ogni 1 minuto
	if (mistery == 1){
		checkChestEvent();
	}
	if (eventStory == 1){
		checkEventMissions();
	}
	checkDragonArena();
	checkDragonTopCd();
	checkEventMissions();
	checkSpecialMissions();
	checkDungeonRoom();
	checkDungeonEnd();
	checkDungeonExpire();
	checkIstanceExpire();
	checkHeists();
	checkHeistsProgress();
	checkDust();
	checkMerchant();

	if (crazyMode == 1)
		merchant_limit = 8;
	var d = new Date();
	if ((d.getDay() != 6) && (d.getDay() != 0) && (luckyMode == 1)){
		luckyMode = 0;
	}
	if ((d.getDay() != 6) && (d.getDay() != 0) && (crazyMode == 1)){
		crazyMode = 0;
	}
	if ((d.getDay() == 4) || (d.getDay() == 5)){
		eventMana = 1;
		checkKeyboard();
	}else{
		eventMana = 0;
		checkKeyboard();
	}
	if ((d.getDay() == 1) || (d.getDay() == 2)){
		eventDust = 1;
		checkKeyboard();
	}else{
		eventDust = 0;
		checkKeyboard();
	}

	if (eventFestival == 1){
		reloadFestival();
	}
	if (autoEstrazione == 1){
		estrazione();
	}
});

callNTimes(120000, function() {  				//Ogni 2 minuti
	checkProtection();
	checkDungeonNotification();
	checkDungeonNotificationIstance();
	checkReborn();
	checkDragonSleep();
});

callNTimes(300000, function() {            		//Ogni 5 minuti
	checkRebornChest();
	checkTeam();
	refreshBosses();
	checkTravels();
	checkCave();
	checkEnchant();
	checkEnchant2();
	checkEnchant3();
	//checkRefill();
	checkGlobalMsg();
});

callNTimes(1800000, function() { 				//Ogni mezz'ora
	checkEvents();
	checkTeamAct();
	checkAct();
	checkGnome();
	checkTeamClean();
	checkTeamPlayers();
});

function reloadBans(){
	banlist_id = [];
	banlist_tx = [];

	var lineReader = require('readline').createInterface({
		input: require('fs').createReadStream('banlist.txt')
	});

	lineReader.on('line', function (line) {
		var elem = line.split("|");
		if (line != ""){
			banlist_id.push(elem[0]);
			banlist_tx.push(elem[1]);
			//console.log(elem[0]);
		}
	});
	console.log('Banlist caricata');
};

var mysql      = require('mysql');
var connection = mysql.createConnection({
	host     : 'xxx',
	user     : 'root',
	password : 'xxx',
	database : 'xxx'
});
connection.connect();

var mysqlRetry = require('node-mysql-deadlock-retries');
mysqlRetry(connection, 5, 10, 100);

checkReborn();
checkDungeonRoom();
refreshBosses();
checkTeamClean();
checkTeamPlayers();

reloadBans();

var d = new Date();

function checkSpam(message){
	var isOk = true;
	var diff = 0;
	if (timevar[message.from.id] != undefined){
		diff = new Date()/1000 - timevar[message.from.id];
		if (diff < 0.8){
			console.log("SPAM Utente " + message.from.username);
			isOk = false;
		}
	}
	timevar[message.from.id] = new Date()/1000;

	return isOk;
}

bot.on('message', function (message) {
	if (message.text != ""){
		console.log(getNow("it") + " - " + message.from.username + ": " + message.text);
		connection.query('SELECT id FROM last_command WHERE account_id = ' + message.from.id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO last_command (account_id, time) VALUES (' + message.from.id + ',"' + getNow("en") + '")', function (err, rows, fields){
					if (err) throw err;
				});
			}else{
				connection.query('UPDATE last_command SET time = "' + getNow("en") + '" WHERE account_id = ' + message.from.id, function (err, rows, fields){
					if (err) throw err;
				});
			}
		});
	}
	connection.query('SELECT account_id, market_ban, id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			var player_id = rows[0].id;
			if (message.successful_payment != undefined){
				connection.query('SELECT payload, status, id FROM payments WHERE player_id = ' + player_id + ' ORDER BY id DESC', function(err, rows, fields) {
					if (err) throw err;

					if ((rows[0].payload != message.successful_payment.invoice_payload) || (rows[0].status != "WAIT")){
						bot.sendMessage(message.chat.id, "Errore durante la verifica del pagamento, riprova", back);
						return;
					}

					connection.query('UPDATE payments SET status = "OK" WHERE id = ' + rows[0].id, function(err, rows, fields) {
						if (err) throw err;

						var amount = Math.floor(message.successful_payment.total_amount/100);

						bot.sendMessage("@lnotify", "#Donazione " + message.from.username + "-" + message.from.id + " per " + message.successful_payment.total_amount/100 + " ‚Ç¨");
						bot.sendMessage(message.chat.id, "Hai ricevuto *" + amount + " Monete Lunari* per la tua donazione, grazie mille!", back);

						connection.query('UPDATE player SET donation = donation + ' + amount + ' WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
						connection.query('UPDATE player SET moon_coin = moon_coin + ' + amount + ' WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
					});
				});
			}

			if (rows[0].account_id != message.from.id){
				if (rows[0].market_ban == 0){
					bot.sendMessage("@lnotify", "#Accountid " + message.from.username + "-" + message.from.id + ": " + message.text);
					connection.query('UPDATE player SET market_ban = 1 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "E' stata trovata un'incongruenza id relativa al tuo account, comunica a @fenix45. Intanto sei impossibilitato ad utilizzare il mercato");
					});
				}
			}
		}
	});

	const callback = answerCallbacks[message.chat.id];
	if (callback) {
		delete answerCallbacks[message.chat.id];
		return callback(message);
	}
});

bot.on("pre_checkout_query", function(message) {
	bot.answerPreCheckoutQuery(message.id, true);
});

var mainKeys = [];
mainKeys = [['Missione ‚öî','Dungeon üõ°'],
			//	['üèî Vette dei Draghi üê≤'],
			['Alchimia ‚öóÔ∏è','Rifugio üî¶'],
			['Zaino üéí','Piazza üí∞','Scrigni üîë'],
			['Giocatore üë§','Team üèÜ'],
			['Imprese üèãÔ∏è','Drago üêâ','Viaggi üó∫'],
			['Artefatti üî±','Sfide del Destino üîÆ'],
			['Top üîù','Eventi üéØ','Edificio üèö'],
			['Crediti üìö','Donazioni üåï','Info üìñ']]

var defaultKeys = [];
defaultKeys = mainKeys.slice();

var resp = {
	reply_markup: JSON.stringify(
		{force_reply: true}
	)
};

var mark = {
	parse_mode: "Markdown"
};

var html = {
	parse_mode: "HTML"
};

var main = {};
var main_html = {};
var mainReborn = {};
var mainReborn2 = {};
var mainReborn2_html = {};
var mainReborn_html = {};

var back = {
	parse_mode: "Markdown",
	disable_web_page_preview: true,
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Torna al menu"]]
	}
};

var back_html = {
	parse_mode: "Html",
	disable_web_page_preview: true,
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Torna al menu"]]
	}
};

var yesno = {
	parse_mode: "Markdown",
	reply_markup: {
		"force_reply": true,
		"resize_keyboard": true,
		"//one_time_keyboard": true,
		"keyboard": [["Si"],["Torna al menu"]]
	}
};

var conf = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Conferma"],["Torna al menu"]]
	}
};

var abort_travel = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Ritorna"],["Torna al menu"]]
	}
};

var abort_travel_2 = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Ritorna"],["Concludi immediatamente"],["Torna al menu"]]
	}
};

var abort_mission = {
	parse_mode: "HTML",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Termina subito"],["Torna al menu"]]
	}
};

var team = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Torna al Team"],["Torna al menu"]]
	}
};

var team_html = {
	parse_mode: "HTML",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Torna al Team"],["Torna al menu"]]
	}
};

var no_preview = {
	parse_mode: "Markdown",
	disable_web_page_preview: true
};

var revive = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Torna in Vita"],["Torna al menu"]]
	}
};

var keyrank = {
	parse_mode: "HTML",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [['Top'],['Torna al menu']]
	}
};

var kb_heist = {
	parse_mode: "Markdown",
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Completa immediatamente"],["Torna al menu"]]
	}
};

var no_preview_html = {
	parse_mode: "HTML",
	disable_web_page_preview: true
};

var no_preview_back = {
	parse_mode: "Markdown",
	disable_web_page_preview: true,
	reply_markup: {
		resize_keyboard: true,
		//one_time_keyboard: true,
		"keyboard": [["Torna al menu"]]
	}
};

bot.onText(/^\/checkrefill/i, function(message) {
	checkRefill();
	bot.sendMessage(message.chat.id, "OK");
});

bot.onText(/^\/key/, function(message, match) {
	checkKeyboard();
	bot.sendMessage(message.chat.id, "Tastiera aggiornata");
});

bot.onText(/^\/eventon (.+)|^\/eventon|^\/eventoff (.+)|^\/eventoff/, function(message, match) {
	if (message.from.username == "fenix45"){

		var event = "";
		if ((match[1] == undefined) && (match[2] == undefined)){
			bot.sendMessage(message.chat.id, "mana - lotteria - crazy - lucky - arena - festival - special - ricercato - polvere");
			return;
		}
		if (message.text.indexOf("eventon") != -1){
			event = match[1];
		}else if (message.text.indexOf("eventoff") != -1){
			event = match[2];
		}

		var onoff = 1;
		if (message.text.indexOf("eventoff") != -1){
			onoff = 0;
		}

		if (event == "mana"){
			eventMana = onoff;
		}else if (event == "lotteria"){
			xxxteria = onoff;
		}else if (event == "crazy"){
			crazyMode = onoff;
		}else if (event == "lucky"){
			luckyMode = onoff;
		}else if (event == "arena"){
			arena = onoff;
		}else if (event == "festival"){
			eventFestival = onoff;
		}else if (event == "ricercato"){
			wanted = onoff;
		}else if (event == "polvere"){
			polvere = onoff;
		}else if (event == "villa"){
			villa = onoff;
		}

		checkKeyboard();
		bot.sendMessage(message.chat.id, "Evento " + event + " impostato a " + onoff);
	}
});

var dMana = new Date();
if ((dMana.getDay() == 4) || (dMana.getDay() == 5)){
	eventMana = 1;
}else{
	eventMana = 0;
}
if ((d.getDay() == 1) || (d.getDay() == 2)){
	eventDust = 1;
	checkKeyboard();
}else{
	eventDust = 0;
	checkKeyboard();
}

checkKeyboard();

function checkKeyboard(){
	mainKeys = defaultKeys.slice();		//Resetta

	var mainKeysR = [];
	mainKeysR = mainKeys.slice();

	var mainKeysR2 = [];
	mainKeysR2 = mainKeys.slice();

	var mainKeysR3 = [];
	mainKeysR3 = mainKeys.slice();

	mainKeysR.splice(0, 0, ['‚≠êÔ∏è Rinasci ‚≠êÔ∏è ']);
	mainKeysR2.splice(0, 0, ['‚≠êÔ∏è Cassa Rinascita üéÅ']);

	if (eventMana == 1){
		mainKeys.splice(0, 0, ['‚õè Miniere di Mana (Evento) ‚õ∞ ']);
		mainKeysR.splice(1, 0, ['‚õè Miniere di Mana (Evento) ‚õ∞ ']);
		mainKeysR2.splice(1, 0, ['‚õè Miniere di Mana (Evento) ‚õ∞ ']);
		mainKeysR3.splice(1, 0, ['‚õè Miniere di Mana (Evento) ‚õ∞ ']);
	}
	if (xxxteria == 1){
		mainKeys.splice(0, 0, ['üíé Lootteria (Evento) üí∞ ']);
		mainKeysR.splice(1, 0, ['üíé Lootteria (Evento) üí∞ ']);	
		mainKeysR2.splice(1, 0, ['üíé Lootteria (Evento) üí∞ ']);
		mainKeysR3.splice(1, 0, ['üíé Lootteria (Evento) üí∞ ']);
	}
	if (crazyMode == 1){
		mainKeys.splice(0, 0, ['üéâ Weekend della Follia (Evento) üò±']);
		mainKeysR.splice(1, 0, ['üéâ Weekend della Follia (Evento) üò±']);	
		mainKeysR2.splice(1, 0, ['üéâ Weekend della Follia (Evento) üò±']);
		mainKeysR3.splice(1, 0, ['üéâ Weekend della Follia (Evento) üò±']);
	}
	if (luckyMode == 1){
		mainKeys.splice(0, 0, ['üåí Evento della Luna (Evento) üçÄ']);
		mainKeysR.splice(1, 0, ['üåí Evento della Luna (Evento) üçÄ']);	
		mainKeysR2.splice(1, 0, ['üåí Evento della Luna (Evento) üçÄ']);
		mainKeysR3.splice(1, 0, ['üåí Evento della Luna (Evento) üçÄ']);
	}
	if (arena == 1){
		mainKeys.splice(0, 0, ['üê≤ Arena dei Draghi (Evento) üî• ']);
		mainKeysR.splice(1, 0, ['üê≤ Arena dei Draghi (Evento) üî•']);	
		mainKeysR2.splice(1, 0, ['üê≤ Arena dei Draghi (Evento) üî•']);
		mainKeysR3.splice(1, 0, ['üê≤ Arena dei Draghi (Evento) üî•']);
	}
	if (eventFestival == 1){
		mainKeys.splice(0, 0, ['üéâCrafting Festival (Evento) üõ†']);
		mainKeysR.splice(1, 0, ['üéâCrafting Festival (Evento) üõ†']);
		mainKeysR2.splice(1, 0, ['üéâCrafting Festival (Evento) üõ†']);
		mainKeysR3.splice(1, 0, ['üéâCrafting Festival (Evento) üõ†']);
	}
	if (specialMission == 1){
		mainKeys.splice(0, 0, ['üèπItinerario Propizio (Evento) üéØ']);
		mainKeysR.splice(1, 0, ['üèπItinerario Propizio (Evento) üéØ']);
		mainKeysR2.splice(1, 0, ['üèπItinerario Propizio (Evento) üéØ']);
		mainKeysR3.splice(1, 0, ['üèπItinerario Propizio (Evento) üéØ']);
	}
	if (wanted == 1){
		mainKeys.splice(0, 0, ['üí∞Il Ricercato (Evento) üë∫']);
		mainKeysR.splice(1, 0, ['üí∞Il Ricercato (Evento) üë∫']);
		mainKeysR2.splice(1, 0, ['üí∞Il Ricercato (Evento) üë∫']);
		mainKeysR3.splice(1, 0, ['üí∞Il Ricercato (Evento) üë∫']);
	}
	if (eventDust == 1){
		mainKeys.splice(0, 0, ['‚è≤ Generatore di Polvere (Evento) üî•']);
		mainKeysR.splice(1, 0, ['‚è≤ Generatore di Polvere (Evento) üî•']);
		mainKeysR2.splice(1, 0, ['‚è≤ Generatore di Polvere (Evento) üî•']);
		mainKeysR3.splice(1, 0, ['‚è≤ Generatore di Polvere (Evento) üî•']);
	}
	if (villa == 1){
		mainKeys.splice(0, 0, ['üè∞ Villa di LastSoldier95 (Evento) üì¶']);
		mainKeysR.splice(1, 0, ['üè∞ Villa di LastSoldier95 (Evento) üì¶']);
		mainKeysR2.splice(1, 0, ['üè∞ Villa di LastSoldier95 (Evento) üì¶']);
		mainKeysR3.splice(1, 0, ['üè∞ Villa di LastSoldier95 (Evento) üì¶']);
	}
	if (eventTeamStory == 1){
		mainKeys.splice(0, 0, ['üí¨ Il Canto del Bardo (Evento) üìö']);
		mainKeysR.splice(1, 0, ['üí¨ Il Canto del Bardo (Evento) üìö']);
		mainKeysR2.splice(1, 0, ['üí¨ Il Canto del Bardo (Evento) üìö']);
		mainKeysR3.splice(1, 0, ['üí¨ Il Canto del Bardo (Evento) üìö']);
	}
	var d = new Date();
	if ((d.getDay() == 3) && (d.getHours() > 9) && (d.getHours() < 22)){
		mainKeys.splice(0, 0, ['üìÉ Casa dei Giochi (Evento) üé≤']);
		mainKeysR.splice(1, 0, ['üìÉ Casa dei Giochi (Evento) üé≤']);
		mainKeysR2.splice(1, 0, ['üìÉ Casa dei Giochi (Evento) üé≤']);
		mainKeysR3.splice(1, 0, ['üìÉ Casa dei Giochi (Evento) üé≤']);
	}

	main = {
		parse_mode: "Markdown",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": mainKeys
		}
	};

	main_html = {
		parse_mode: "HTML",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": mainKeys
		}
	};

	mainReborn = {
		parse_mode: "Markdown",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": mainKeysR
		}
	};

	mainReborn_html = {
		parse_mode: "HTML",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": mainKeysR
		}
	};

	mainReborn2 = {
		parse_mode: "Markdown",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": mainKeysR2
		}
	};

	mainReborn2_html = {
		parse_mode: "HTML",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": mainKeysR2
		}
	};

	mainReborn3 = {
		parse_mode: "Markdown",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": mainKeysR3
		}
	};

	mainReborn3_html = {
		parse_mode: "HTML",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": mainKeysR3
		}
	};
	//console.log("--- Tastiere ricaricate ---");
};

bot.onText(/^\/ping/, function(message, match) {
	bot.sendMessage(message.chat.id, "_Pong_", mark);
});

//EASTEREGG

bot.onText(/^Sniffa$/i, function(message, match) {
	bot.sendMessage(message.chat.id, "Uh, un üêº!");
});

bot.onText(/^Edo$/i, function(message, match) {
	bot.sendMessage(message.chat.id, "Boss ‚ö°Ô∏è");
});

//EASTEREGG

bot.onText(/^\/accountid (.+)/, function(message, match) {
	if (message.from.username == "fenix45"){
		connection.query('SELECT nickname, account_id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields){
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non ho trovato l'utente");
				return;
			}

			bot.sendMessage(message.chat.id, rows[0].account_id);
		});
	}
});

bot.onText(/^\/genmarket/, function(message, match) {
	market_generation();
	console.log("OK");
});

bot.onText(/^\/cleanInactive$/, function(message, match) {
	if (message.from.username == "fenix45"){
		connection.query("SELECT COUNT(P.nickname) As cnt FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time IS NULL AND P.id < (SELECT MAX(id)-5000 FROM player)", function (err, rows, fields){
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Last command non memorizzato: " + rows[0].cnt + "\nContinuo?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query("SELECT P.id, P.nickname, P.account_id, L.time FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time IS NULL AND P.id < (SELECT MAX(id)-5000 FROM player)", function (err, rows, fields){
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								console.log(rows[i].id + "  - " + rows[i].nickname + " inattivo dal " + rows[i].time);
							}
							bot.sendMessage(message.chat.id, "Continuare con la cancellazione?", yesno).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text.toLowerCase() == "si"){
										connection.query("SELECT P.id, P.nickname, P.account_id, L.time FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time IS NULL AND P.id < (SELECT MAX(id)-5000 FROM player) LIMIT 1000", function (err, rows, fields){
											if (err) throw err;
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												console.log("Eliminato: " + rows[i].id + "  - " + rows[i].nickname + " inattivo dal " + rows[i].time);
												connection.query("DELETE FROM player WHERE id = " + rows[i].id + " LIMIT 1", function (err, rows, fields){
													if (err) throw err;
												});
											}
											bot.sendMessage(message.chat.id, "Fin.", back);
										});
									};
								};
							});
						});
					}
				}
			});
		});
	};
});

bot.onText(/^\/cleanInactive6$/, function(message, match) {
	if (message.from.username == "fenix45"){
		connection.query("SELECT COUNT(P.nickname) As cnt FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time < NOW() - INTERVAL 6 MONTH", function (err, rows, fields){
			if (err) throw err;

			bot.sendMessage(message.chat.id, "Inattivi da + di 6 mesi: " + rows[0].cnt + "\nContinuo?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query("SELECT P.id, P.nickname, L.time FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time < NOW() - INTERVAL 6 MONTH", function (err, rows, fields){
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								console.log(rows[i].id + "  - " + rows[i].nickname + " inattivo dal " + rows[i].time);
							}
							bot.sendMessage(message.chat.id, "Continuare con la cancellazione?", yesno).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text.toLowerCase() == "si"){
										connection.query("SELECT P.id, P.nickname, L.time FROM last_command L RIGHT JOIN player P ON L.account_id = P.account_id WHERE time < NOW() - INTERVAL 6 MONTH LIMIT 1000", function (err, rows, fields){
											if (err) throw err;
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												console.log("Eliminato: " + rows[i].id + "  - " + rows[i].nickname + " inattivo dal " + rows[i].time);
												connection.query("DELETE FROM player WHERE id = " + rows[i].id + " LIMIT 1", function (err, rows, fields){
													if (err) throw err;
												});
											}
											bot.sendMessage(message.chat.id, "Fin.", back);
										});
									};
								};
							});
						});
					}
				}
			});
		});
	};
});

bot.onText(/^\/stopglobal$/, function(message, match) {
	connection.query('UPDATE config SET global_eventon = 0', function (err, rows, fields){
		if (err) throw err;
		bot.sendMessage(message.chat.id, "Ok");
	});
});

bot.onText(/^\/endglobal$/, function(message, match) {
	if (message.from.username == "fenix45"){

		var banned_join = banlist_id.join();

		connection.query('SELECT I.id As id1, I.name As name1, I2.id As id2, I2.name As name2, I3.id As id3, I3.name As name3 FROM config C INNER JOIN item I ON C.global_item1 = I.id INNER JOIN item I2 ON C.global_item2 = I2.id INNER JOIN item I3 ON C.global_item3 = I3.id', function (err, rows, fields){
			if (err) throw err;

			var item_1 = rows[0].name1;
			var item_2 = rows[0].name2;
			var item_3 = rows[0].name3;
			var item_1id = rows[0].id1;
			var item_2id = rows[0].id2;
			var item_3id = rows[0].id3;

			console.log(item_1, item_2, item_3, item_1id, item_2id, item_3id);

			connection.query('SELECT COUNT(DISTINCT player_id) As cnt FROM achievement_global', function (err, rows, fields){
				if (err) throw err;

				var tot = rows[0].cnt;

				connection.query('SELECT SUM(value) As val FROM achievement_global', function (err, rows, fields){
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Il valore attuale √® " + formatNumber(rows[0].val) + " per " + formatNumber(tot) + " persone, sicuro di chiudere l'impresa?", yesno).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text.toLowerCase() == "si"){
								connection.query('SELECT P.nickname, P.chat_id, A.player_id, SUM(A.value) As val FROM achievement_global A INNER JOIN player P ON A.player_id = P.id WHERE P.account_id NOT IN (' + banned_join + ') GROUP BY A.player_id ORDER BY val DESC', function (err, rows, fields){
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										if (rows[i].val >= (rows[0].val/4)){
											connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + rows[i].player_id + ',' + item_1id + ')', function (err, rows, fields){
												if (err) throw err;
											});
											bot.sendMessage(rows[i].chat_id, "Al termine dell'Impresa Globale hai ricevuto: *" + item_1 + "*!", mark);
											console.log(rows[i].nickname + " - Premio 1");
										}
										if (rows[i].val >= (rows[0].val/100)){
											connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + rows[i].player_id + ',' + item_2id + ')', function (err, rows, fields){
												if (err) throw err;
											});
											bot.sendMessage(rows[i].chat_id, "Al termine dell'Impresa Globale hai ricevuto: *" + item_2 + "*!", mark);
											console.log(rows[i].nickname + " - Premio 2");
										}
										connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + rows[i].player_id + ',' + item_3id + ')', function (err, rows, fields){
											if (err) throw err;
										});
										bot.sendMessage(rows[i].chat_id, "Al termine dell'Impresa Globale hai ricevuto: *" + item_3 + "*!", mark);
										console.log(rows[i].nickname + " - Premio 3");
									}
								});
								//connection.query('SELECT P.nickname, P.chat_id, A.player_id, SUM(A.value) As val, global_event FROM achievement_global A INNER JOIN player P ON A.player_id = P.id WHERE P.global_event < 5 GROUP BY A.player_id ORDER BY val DESC LIMIT 100', function (err, rows, fields){
								connection.query('(SELECT A.player_id, chat_id, nickname, SUM(A.value) As val, global_event FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (' + banned_join + ') GROUP BY A.player_id ORDER BY SUM(A.value) DESC LIMIT 100) UNION (SELECT A.player_id, chat_id, nickname, SUM(A.value) As val, global_event FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (' + banned_join + ') AND P.global_event < 5 GROUP BY A.player_id ORDER BY SUM(A.value) DESC LIMIT 100)', function (err, rows, fields){
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										connection.query('UPDATE player SET global_event = global_event+1 WHERE id = ' + rows[i].player_id, function (err, rows, fields){
											if (err) throw err;
										});
										bot.sendMessage(rows[i].chat_id, "Inoltre per il tuo posizionamento in classifica la tua impresa globale viene conteggiata nelle statistiche!", mark);
										console.log(rows[i].nickname + " - Punto");
									}
								});

								/*
								connection.query('DELETE FROM achievement_global', function (err, rows, fields){
									if (err) throw err;
								});
								*/

								connection.query('UPDATE config SET global_eventon = 0', function (err, rows, fields){
									if (err) throw err;
								});
							}
						}
					});
				});
			});
		});
	}
});

function market_generation(){
	var items = [];
	var rarity = [];

	connection.query('DELETE FROM market_pack', function (err, rows, fields){
		if (err) throw err;
		connection.query('SELECT id FROM item WHERE craftable = 0 AND rarity = "C" ORDER BY RAND() LIMIT 10', function (err, rows, fields){
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				items.push(rows[i].id);
				rarity.push(1);
			}
			connection.query('SELECT id FROM item WHERE craftable = 0 AND rarity = "NC" ORDER BY RAND() LIMIT 5', function (err, rows, fields){
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					items.push(rows[i].id);
					rarity.push(2);
				}
				connection.query('SELECT id FROM item WHERE craftable = 0 AND rarity = "R" ORDER BY RAND() LIMIT 4', function (err, rows, fields){
					if (err) throw err;
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						items.push(rows[i].id);
						rarity.push(3);
					}
					connection.query('SELECT id FROM item WHERE craftable = 0 AND rarity = "UR" ORDER BY RAND() LIMIT 3', function (err, rows, fields){
						if (err) throw err;
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							items.push(rows[i].id);
							rarity.push(4);
						}
						connection.query('SELECT id FROM item WHERE craftable = 0 AND rarity = "L" ORDER BY RAND() LIMIT 2', function (err, rows, fields){
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								items.push(rows[i].id);
								rarity.push(5);
							}
							connection.query('SELECT id FROM item WHERE craftable = 0 AND rarity = "E" ORDER BY RAND() LIMIT 1', function (err, rows, fields){
								if (err) throw err;
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									items.push(rows[i].id);
									rarity.push(6);
								}

								var item = 0;
								var rar = 0;

								for (var i = 0, len = items.length; i < len; i++) {

									item = items[i];
									rar = rarity[i];

									connection.query('SELECT DISTINCT(from_id), price FROM market_direct_history WHERE time BETWEEN date_sub(NOW(),INTERVAL 1 WEEK) AND NOW() AND price != (SELECT value FROM item WHERE id = ' + item + ') AND item_id = ' + item, function (err, rows, fields){
										if (err) throw err;
										var price = 0;
										var arr = [];
										if (Object.keys(rows).length > 0){
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												arr.push(rows[i].price);
											}
											price = estimate(arr);
											price = getRandomArbitrary(price-(price*0.1), price);
											connection.query('INSERT INTO market_pack (pack_id, item_id, price) VALUES (' + this.rar + ',' + this.item + ',' + price + ')', function (err, rows, fields){
												if (err) throw err;
											});
										}
									}.bind( {item: item, rar: rar} ));
								}
								console.log("Mercato a rotazione aggiornato");

								connection.query('UPDATE player SET market_pack = 0', function (err, rows, fields){
									if (err) throw err;
								});
							});
						});
					});
				});
			});
		});
	});
}

bot.onText(/^\/comandi/, function(message, match) {
	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		bot.sendMessage(message.chat.id, "Lista comandi\n" +
						"/ban nick | motivo\n" +
						"/marketban nick\n" +
						"/setwarn nick n\n" +
						"/setmsg messaggio\n" +
						"/banlist\n" +
						"/save\n" +
						"/active\n" +
						"/festival\n" +
						"/fixboss\n" +
						"/spboss teamid\n" +
						"/getid nick\n" +
						"/lacrima nick\n" +
						"/dona nick n\n" +
						"/dai_scrigni nick,nome,qnt\n" +
						"/dai_ogg nick,ogg,qnt\n" +
						"/key\n" +
						"/eventon /eventoff\n" +
						"/cmd backuplist/backup/reboot\n" +
						"/accountid nick\n" +
						"/genmarket\n" +
						"/endglobal\n");
	}else{
		bot.sendMessage(message.chat.id, "Piacerebbe :D");
	}
});

bot.onText(/^\/unban ([^\s]+)/, function(message, match) {
	if (message.from.username == "fenix45"){
		var lineReader = require('readline').createInterface({
			input: require('fs').createReadStream('banlist.txt')
		});

		var account_id = match[1];
		var i = 0;
		var text = "";

		lineReader.on('line', function (line) {
			if (line != ""){
				if (elem[0] != account_id){
					text += line;
				}
			}
		});
		fs.appendFile('banlist2.txt', text, function (err) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, account_id + " sbannato!");
		});
	};
});

bot.onText(/^\/marketban (.+)/, function(message, match) {
	match[1] = match[1].replace("@","");
	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		connection.query('SELECT id, market_ban, nickname, id, account_id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields){
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non ho trovato nessun utente con quel nickname.");
				return;
			}

			if (rows[0].market_ban == 0){
				connection.query('UPDATE player SET market_ban = 1 WHERE id = ' + rows[0].id, function (err, rows, fields){
					if (err) throw err;
				});

				bot.sendMessage(message.chat.id, rows[0].nickname + " bannato dal mercato.");
			}else{
				connection.query('UPDATE player SET market_ban = 0 WHERE id = ' + rows[0].id, function (err, rows, fields){
					if (err) throw err;
				});

				bot.sendMessage(message.chat.id, rows[0].nickname + " sbannato dal mercato.");
			}
		});
	};
});

bot.onText(/^\/sendmsg/, function(message, match) {
	if (message.from.username == "fenix45"){
		connection.query('DELETE FROM global_msg', function (err, rows, fields){
			if (err) throw err;
			connection.query('ALTER TABLE global_msg AUTO_INCREMENT=1', function (err, rows, fields){
				if (err) throw err;
				connection.query('INSERT INTO global_msg (chat_id) SELECT P.chat_id FROM last_command L, player P WHERE L.account_id = P.account_id AND L.time > NOW() - INTERVAL 1 WEEK AND P.global_msg = 1', function (err, rows, fields){
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Inserite " + rows.affectedRows + " voci");
				});
			});
		});
	}
});

bot.onText(/^\/setmsg (.+)/, function(message, match) {
	if (message.from.username == "fenix45"){
		connection.query('UPDATE config SET global_msg = "' + match[1] + '"', function (err, rows, fields){
			if (err) throw err;
			connection.query('SELECT global_msg FROM config', function (err, rows, fields){
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Messaggio impostato, ora /sendmsg\n\n" + rows[0].global_msg, no_preview_html);
			});
		});
	}
});

bot.onText(/^\/setwarn ([^\s]+) (.+)/, function(message, match) {
	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		connection.query('SELECT nickname, id, account_id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields){
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non ho trovato nessun utente con quel nickname.");
				return;
			}
			connection.query('UPDATE player SET market_warn = ' + match[2] + ' WHERE id = ' + rows[0].id, function (err, rows, fields){
				if (err) throw err;
			});
			bot.sendMessage(message.chat.id, rows[0].nickname + " impostato a " + match[2] + " warn");
		});
	};
});

bot.onText(/^\/ban ([^\s]+) (.+)/, function(message, match) {
	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		match[1] = match[1].replace("@","");
		connection.query('SELECT nickname, id, account_id FROM player WHERE nickname = "' + match[1] + '"', function (err, rows, fields){
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non ho trovato nessun utente con quel nickname.");
				return;
			}			

			fs.appendFile('banlist.txt', "\r\n" + rows[0].account_id + '|' + match[2], function (err) {
				if (err) throw err;

				reloadBans();

				connection.query('DELETE FROM public_shop WHERE player_id = ' + rows[0].id, function (err, rows, fields){
					if (err) throw err;
				});
				connection.query('UPDATE player SET market_ban = 1 WHERE id = ' + rows[0].id, function (err, rows, fields){
					if (err) throw err;
				});
				connection.query('DELETE FROM team_player WHERE player_id = ' + rows[0].id, function (err, rows, fields){
					if (err) throw err;
				});
				connection.query('UPDATE token SET token = NULL, status = "REVOKED" WHERE player_id = ' + rows[0].id, function(err, rows, fields) {
					if (err) throw err;
				});

				bot.sendMessage(message.chat.id, rows[0].nickname + " (" + rows[0].account_id + ") bannato.");
				//bot.sendMessage(rows[0].account_id, "Sei stato bannato dal bot, _Bye_.", mark);
			});
		});
	};
});

bot.onText(/^\/banlist/, function(message, match) {
	if (message.from.username != "fenix45"){
		return;
	}
	reloadBans();
	bot.sendMessage(message.chat.id, "Banlist aggiornata");
});

bot.onText(/^\/save/, function(message, match) {
	if (message.from.username != "fenix45"){
		return;
	}
	saveActive();
	bot.sendMessage(message.chat.id, "Salvata");
});

bot.onText(/^\/festival/, function(message, match) {
	if (message.from.username != "fenix45"){
		return;
	}
	reloadFestival();
	bot.sendMessage(message.chat.id, "Fatto!");	
});

bot.onText(/^\/active/, function(message, match) {
	connection.query('SELECT count, time FROM active_history ORDER BY time DESC LIMIT 50', function (err, rows, fields){
		if (err) throw err;

		var text = "";
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			text += rows[i].count + " -> " + rows[i].time + "\n";
		}
		bot.sendMessage(message.chat.id, text);
	});
});

function saveActive(){
	var d = new Date();
	var today = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate());
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

	connection.query('SELECT COUNT(*) As active FROM `last_command` WHERE time LIKE "' + today + '%"', function(err, rows, fields) {
		if (err) throw err;
		var act = rows[0].active;

		connection.query('INSERT INTO active_history (count, time) VALUES (' + act + ',"' + long_date + '")', function(err, rows, fields) {
			if (err) throw err;
			console.log("Attivit√† giocatori salvatata! --> " + act + " <--");
		});
	});
}

bot.onText(/\/start (.+)|\/start/i, function(message, match) {
	if ((message.from.username == undefined) || (message.from.username == "undefined")){
		bot.sendMessage(message.chat.id, "Devi impostare un username su Telegram per poter giocare, puoi farlo tramite le *impostazioni*. Una volta impostato, usa di nuovo il comando /start, oppure /start CODICEINVITO nel caso di un link invito, altrimenti non riceverai il bonus invito.", mark);
		return;
	}

	var invite = match[1];
	if (invite != undefined)
		console.log("Codice invito: " + invite);

	var code = "Non disponibile";

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			connection.query('UPDATE player SET chat_id = ' + message.chat.id + ' WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Sei gi√† registrato! Se hai qualche problema, segnala a @fenix45", back);
			});
			return;
		}
		connection.query('SELECT * FROM player WHERE account_id = ' + message.from.id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				bot.sendMessage(message.chat.id, "Questo id √® gi√† registrato, se hai cambiato nome utente usa /migrazione. Grazie!", back);
				return;
			}

			var rnd_code = makeid();
			var money = 0;
			connection.query('SELECT COUNT(*) AS num, nickname, id, chat_id FROM player WHERE invite_code = "' + invite + '"', function(err, rows, fields) {
				if (err) throw err;

				var invite = "";
				if (rows[0].num > 0){
					money = 2000;
					bot.sendMessage(rows[0].chat_id, "Un utente si √® registrato con il tuo link invito, hai ricevuto 1000 ¬ß di bonus. Riceverai un premio cospicuo quando il giocatore raggiunger√† la prima rinascita");

					connection.query('UPDATE player SET money = money+1000 WHERE id = ' + rows[0].id + ' LIMIT 1', function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Ti sei registrato con un link invito, hai ricevuto 2000 ¬ß di bonus.");
					});

					var d = new Date();
					var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

					invite = " (" + rows[0].nickname + ")";
					connection.query('INSERT INTO referral_list (new_player, player_id, new_player_nick, player_nick, time) VALUES ((SELECT MAX(id) FROM player)+1, ' + rows[0].id + ',"' + message.from.username + '", "' + rows[0].nickname + '", "' + long_date + '")', function(err, rows, fields) {
						if (err) throw err;
					});
				}
				money += 5000;
				connection.query('INSERT INTO player (id, account_id, nickname, chat_id, money, invite_code) VALUES (DEFAULT, ' + message.from.id + ', "' + message.from.username + '", ' + message.chat.id + ', ' + money + ', "' + rnd_code + '")', function(err, rows, fields) {
					if (err) throw err;

					bot.sendMessage("@lnotify", "#Registrazione: " + message.from.username + " (" + message.from.id + ") " + invite);

					printStart(message);
				});
			});
		});
	});
});

bot.onText(/\/fixboss/, function(message) {
	fixBoss(message);
	bot.sendMessage(message.chat.id, "Boss sistemati!");
});

function fixBoss(message){
	connection.query('UPDATE boss_team SET life = 100 WHERE killedby = "" AND life < 0',  function(err, rows, fields) {
		if (err) throw err;
	});	
}

function dailyChest(message, player_id) {
	var rand = 0;
	var chest_id = 0;

	rand = Math.round((Math.random()*99)+1);
	if ((rand <= 100) && (rand >= 50)){		//50%
		chest_id = 1;
	}else if ((rand < 50) && (rand >= 20)){		//30%   
		chest_id = 2;
	}else if ((rand < 20) && (rand >= 10)){ 	//10%
		chest_id = 3;
	}else if ((rand < 10) && (rand >= 0)){ 		//10%
		chest_id = 4;
	}else{
		console.log("Errore condizioni, random: " + rand);
	}

	connection.query('SELECT COUNT(*) As num FROM daily_chest WHERE player_id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		if (rows[0].num == 0){
			connection.query('SELECT name, rarity_shortname FROM chest WHERE id = ' + chest_id, function(err, rows, fields) {
				if (err) throw err;
				connection.query('INSERT INTO `inventory_chest`(`player_id`, `chest_id`) VALUES (' + player_id + ',' + chest_id + ')', function(err, rows, fields) {
					if (err) throw err;
				});
				connection.query('INSERT INTO daily_chest(`player_id`, `chest_id`) VALUES (' + player_id + ',' + chest_id + ')', function(err, rows, fields) {
					if (err) throw err;
				});
				bot.sendMessage(message.chat.id, "Iniziando la prima missione della giornata, hai ricevuto lo scrigno giornaliero: *" + rows[0].name + "* (" + rows[0].rarity_shortname + ")!", mark);
				setAchievement(message.chat.id, player_id, 39, 1);
			});
		}
	});
};

bot.onText(/Crediti/i, function(message) {
	var text = 	"Crediti Rilevanti\n\n" +
		"@fenix45\n@LastSoldier95\n\n" +
		"@FedeDark - @GasterTheSkeleton - @MattiaCris8\n" +
		"@mmmMANUuuu - @rosikcool - @SimoneBigozzi\n" +
		"@alessandromrx - @Lara997 - @IfrinGalanodel\n" +
		"@ekvas - @LordOfKraken - @Shari_8 - @Raukonar\n" +
		"@RipperoniEarl98"

	"\n\nOltre alle tantissime altre persone che hanno collaborato, anche se in piccola parte!";

	bot.sendMessage(message.chat.id, text, back_html);
});

bot.onText(/Donazioni/i, function(message) {
	var kb = {
		parse_mode: "HTML",
		disable_web_page_preview: true,
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Fai una Donazione!"],["Lista Donatori"],["Torna al menu"]]
		}
	};

	bot.sendMessage(message.chat.id, "<b>Donazioni</b>\n\n<i>Magari non tutti voi sapete che mantenere il server di Loot Bot ha un costo che deve essere saldato ogni mese, non ci sono pubblicit√†, n√® acquisti pay2win, n√® sponsorizzazioni che contribuiscono al sostentamento. Perci√≤ tu nel tuo piccolo puoi aiutare donando attraverso il link sotto, qualsiasi cifra pu√≤ aiutare. Per motivarti un po' (lo so che ti stai chiedendo: 'e io che ci guadagno?') oltre al fatto che saprai che hai aiutato ad estendere di un mese questo passatempo, riceverai anche una Moneta Lunare per ogni euro donato.\nNon √® niente di obbligatorio e niente di troppo vantaggioso, anzi. Per√≤ purtroppo non sempre si riesce a mantenere tutto in modo gratuito. A me personalmente farebbe molto piacere la cosa, pensaci!</i>\n\nLink PayPal: https://www.paypal.me/fenixtm\nIndirizzo Bitcoin: <code>3ChwKyXG4fo8NDAdQwJERUty78qumeyn91</code>\n\nRicordati di specificare il nickname, se hai problemi contattami in privato (@fenix45).", kb);
});

bot.onText(/Fai una Donazione!/i, function(message) {

	var iKeys = [];
	iKeys.push([{ text: "Paypal", url: "https://www.paypal.me/fenixtm"}]);
	iKeys.push([{ text: "2 ‚Ç¨", callback_data: "pay:2.00"}]);
	iKeys.push([{ text: "4 ‚Ç¨", callback_data: "pay:4.00"}]);
	iKeys.push([{ text: "10 ‚Ç¨", callback_data: "pay:10.00"}]);
	iKeys.push([{ text: "20 ‚Ç¨", callback_data: "pay:20.00"}]);
	iKeys.push([{ text: "50 ‚Ç¨", callback_data: "pay:50.00"}]);
	iKeys.push([{ text: "100 ‚Ç¨", callback_data: "pay:100.00"}]);

	bot.sendMessage(message.chat.id, "Seleziona l'importo della tua donazione, il pagamento avviene tramite Telegram attraverso il servizio Stripe e le Monete Lunari vengono accreditate immediatamente.", {parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: { inline_keyboard: iKeys }});
});

bot.on('callback_query', function (message) {
	var text = message.data;
	var func = text.split(":")[0];
	var param = text.split(":")[1];

	connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			bot.answerCallbackQuery(message.id, 'Registrati prima di donare!');
			return;
		}

		var player_id = rows[0].id;
		var chat_id = rows[0].chat_id;

		if (func == "pay"){
			var payload = player_id + Date.now() + param;
			var prices = [{label: "Donazione", amount: parseInt(param.replace(".",""))}];
			connection.query('INSERT INTO payments (player_id, payload, amount, status) VALUES (' + player_id + ', "' + payload + '", ' + param + ', "WAIT")', function(err, rows, fields) {
				if (err) throw err;
				bot.sendInvoice(chat_id, "Donazione", "Donazione di " + param + "‚Ç¨", payload, "350862534:LIVE:NTg4MzAxNGMzMzI5", "pay", "EUR", prices);
			});
		}
	});
});

bot.onText(/Donatori/i, function(message) {
	var top = "";
	connection.query('SELECT nickname, donation FROM player WHERE donation > 0 ORDER BY donation DESC', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			var c = 1;
			for (var i = 0, len = Object.keys(rows).length-1; i < len; i++) {
				top += c + "¬∞ " + rows[i].nickname + " (" + rows[i].donation + " ‚Ç¨)\n";
				if (rows[i].donation != rows[i+1].donation)
					c++;
			}
			top += c + "¬∞ " + rows[Object.keys(rows).length-1].nickname + " (" + rows[Object.keys(rows).length-1].donation + " ‚Ç¨)\n";
		}else{
			top = "Nessuna donazione :(\n";
		}
		bot.sendMessage(message.chat.id, "<b>Top donatori:</b>\n" + top, back_html);
	});
});

bot.onText(/avvEstraz/, function(message) {
	if ((message.from.username == "fenix45") || (message.from.username == "Lara997")){
		connection.query('SELECT player.nickname, player.chat_id FROM event_lottery_coins, player WHERE event_lottery_coins.player_id = player.id GROUP BY player_id', function(err, rows, fields) {
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				bot.sendMessage(rows[i].chat_id, "*Lootteria*: L'estrazione inizier√† a breve!", mark);
			}
			bot.sendMessage(message.chat.id, "Notifica inviata a " + Object.keys(rows).length + " utenti");
		});
	};
});

bot.onText(/fineEstraz/, function(message) {
	if ((message.from.username == "fenix45") || (message.from.username == "Lara997")){
		var prize = "";
		connection.query('SELECT item.name FROM event_lottery_prize, item WHERE event_lottery_prize.item_id = item.id', function(err, rows, fields) {
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				prize += "> " + rows[i].name + "\n";
			}

			var kb = {
				parse_mode: "Markdown",
				disable_web_page_preview: true,
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Scrigno di Consolazione"],["Torna al menu"]]
				}
			};

			connection.query('SELECT player.nickname, player.id, player.chat_id FROM event_lottery_coins, player WHERE event_lottery_coins.player_id = player.id GROUP BY player_id', function(err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					bot.sendMessage(rows[i].chat_id, "*Lootteria*: L'estrazione √® terminata! Usa il pulsante sotto per ricevere uno scrigno di consolazione!\n(Puoi anche scrivere Scrigno di Consolazione a mano)", kb);
				}
				bot.sendMessage(message.chat.id, "Notifica inviata a " + Object.keys(rows).length + " utenti");
			});
		});
	};
});

bot.onText(/Scrigno di Consolazione/i, function(message) {
	connection.query('SELECT id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		connection.query('SELECT extracted FROM `event_lottery_prize` ORDER BY id DESC', function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].extracted == 0){
				bot.sendMessage(message.chat.id, "L'estrazione √® in corso!", back)
				return;
			}

			connection.query('SELECT id FROM event_lottery_coins WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Non hai partecipato alla lotteria oppure hai vinto qualcosa durante l'estrazione.",back);
					return;
				}

				var date = new Date();
				var chest_id = 0;
				var chestName = "";
				switch(date.getDay()){
					case 6:
						chestName = "Scrigno di Diamante";
						chest_id = 4;
						break;
					case 0: 
						chestName = "Scrigno Leggendario";
						chest_id = 5;
						break;
									}

				bot.sendMessage(message.chat.id, "Riscattare lo Scrigno?", yesno).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text.toLowerCase() == "si"){
							connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chest_id + ')', function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai ricevuto *" + chestName + "* come premio di consolazione!", back);

								connection.query('DELETE FROM event_lottery_coins WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									console.log(player_id + " consolazione riscattata");
								});
							});
						};
					};
				});
			});
		});
	});
});

function estrazione(){
	connection.query(	'SELECT E.id, item_id, I.name As item_name, money, chest_id, exp, C.name As chest_name, gems, mana, extracted, quantity ' +
					 'FROM event_lottery_prize As E LEFT JOIN item As I ON E.item_id = I.id LEFT JOIN chest As C ON E.chest_id = C.id ' +
					 'WHERE E.extracted = 0', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			console.log("Non ci sono pi√π premi");
			autoEstrazione = 0;
			connection.query('SELECT chat_id FROM player, event_lottery_coins WHERE event_lottery_coins.player_id = player.id GROUP BY event_lottery_coins.player_id', function(err, rows, fields) {
				if (err) throw err;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					bot.sendMessage(rows[i].chat_id, "Estrazioni Lootteria terminate!", html);
				}
			});
			return;
		}

		var ext_id = rows[0].id;

		var name = "";
		var type = "";
		var item_id = 0;
		var chest_id = 0;
		var money = 0;
		var exp = 0;
		var mana = 0;
		var quantity = 1;

		if ((rows[0].item_id != 0) && (rows[0].item_id != null)){
			type = "item";
			name = rows[0].item_name;
			item_id = rows[0].item_id;
			quantity = rows[0].quantity;
		}else if (rows[0].money != 0){
			type = "money";
			name = rows[0].money + " ¬ß";
			money = rows[0].money;
		}else if ((rows[0].chest_id != 0) && (rows[0].item_id != null)){
			type = "chest";
			name = rows[0].chest_name;
			chest_id = rows[0].chest_id;
			quantity = rows[0].quantity;
		}else if (rows[0].gems != 0){
			type = "gems";
			name = rows[0].gems + " üíé";
		}else if (rows[0].exp != 0){
			type = "exp";
			name = rows[0].exp + " exp";
			exp = rows[0].exp;
		}else if (rows[0].mana != 0){
			type = "mana";
			name = rows[0].mana + " Mana tutti i tipi";
			mana = rows[0].mana;
		}else{
			console.log("Errore estrazione");
			return;
		}

		connection.query('SELECT COUNT(*) As num FROM event_lottery_coins', function(err, rows, fields) {
			if (err) throw err;

			var num = parseInt(rows[0].num)-1;
			var rand = Math.round(Math.random()*num);

			//COMMENTI per test
			//connection.query('SELECT player_id, nickname FROM event_lottery_coins, player WHERE player.id = event_lottery_coins.player_id ORDER BY RAND() LIMIT ' + rand + ',' + (rand+quantity), function(err, rows, fields) {
			connection.query('SELECT player_id, nickname FROM event_lottery_coins, player WHERE player.id = event_lottery_coins.player_id AND player_id != 1 AND player_id != 3 ORDER BY RAND() LIMIT ' + rand + ',' + quantity, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					console.log("Errore estrazione vincitore " + rand + "-" + quantity);
					return;
				}

				if (Object.keys(rows).length > 10){
					console.log("Quantit√† elevata " + Object.keys(rows).length + " - " + rand + " - " + quantity);
					return;
				}

				connection.query('UPDATE event_lottery_prize SET extracted = 1 WHERE extracted = 0 AND id = ' + ext_id, function(err, rows, fields) {
					if (err) throw err;
				});

				var text = "<i>Lootteria</i> - Estrazione per <b>" + name + "</b>!\n\n";

				var playerId = 0;
				var nickname = "";
				var nick_extracted = [];

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					playerId = rows[i].player_id;
					nickname = rows[i].nickname;
					nick_extracted.push(playerId);
					console.log("Estratto " + nickname);

					if (quantity > 1){
						text += "> " + nickname + "\n";
					}else{
						text += "Il vincitore √® <b>" + nickname + "</b>\n";
					}

					if (type == "item"){
						connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + playerId + ',' + item_id + ')', function(err, rows, fields) {
							if (err) throw err;
						});
					}
					if (type == "chest"){
						connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + playerId + ',' + chest_id + ')', function(err, rows, fields) {
							if (err) throw err;
						});
					}
					if (type == "money"){
						connection.query('UPDATE player SET money = money + ' + money + ' WHERE id = ' + playerId, function(err, rows, fields) {
							if (err) throw err;
						});
					}
					if (type == "gems"){
						connection.query('UPDATE player SET gems = gems+' + gems + ' WHERE id = ' + playerId, function(err, rows, fields) {
							if (err) throw err;
						});
					}
					if (type == "exp"){
						connection.query('UPDATE player SET exp = exp + ' + exp + ' WHERE id = ' + playerId, function(err, rows, fields) {
							if (err) throw err;
						});
					}
					if (type == "mana"){
						connection.query('UPDATE event_mana_status SET mana_1 = mana_1 + ' + mana + ', mana_2 = mana_2 + ' + mana + ', mana_3 = mana_3 + ' + mana + ' WHERE player_id = ' + playerId, function(err, rows, fields) {
							if (err) throw err;
						});
					}
				};

				connection.query('SELECT MAX(id) As tot FROM event_lottery_prize', function(err, rows, fields) {
					if (err) throw err;

					var tot = rows[0].tot;
					connection.query('SELECT chat_id FROM player, event_lottery_coins WHERE event_lottery_coins.player_id = player.id GROUP BY event_lottery_coins.player_id', function(err, rows, fields) {
						if (err) throw err;

						text += "\n" + ext_id + " / " + tot;	
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							bot.sendMessage(rows[i].chat_id, text, html);
						}
						console.log("Estrazione " + ext_id + " terminata");

						for (var i = 0, len = Object.keys(nick_extracted).length; i < len; i++) {
							playerId = nick_extracted[i];
							connection.query('DELETE FROM event_lottery_coins WHERE player_id = ' + playerId, function(err, rows, fields) {
								if (err) throw err;
							});
						}
					});
				});
			});
		});
	});
}

bot.onText(/estrazione/, function(message) {
	if (message.from.username == "fenix45"){
		if (autoEstrazione == 0){
			autoEstrazione = 1;
		}else{
			autoEstrazione = 0;
		}
		bot.sendMessage(message.chat.id, "Autoestrazione impostato a " + autoEstrazione);
		//estrazione();
	};
});

bot.onText(/spboss (.+)/, function(message, match) {
	var team_id = match[1];

	if ((team_id == "undefined") || (team_id == undefined)){
		bot.sendMessage(message.chat.id, "Boh!", back);
	}

	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		spawnTeamBoss(team_id);
		bot.sendMessage(message.chat.id, "Fatto :3", back);
	}else{
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.", back);
	}
});

bot.onText(/\/getid (.+)/, function(message, match) {
	connection.query('SELECT * FROM player WHERE nickname = "' + match[1] + '"', function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(message.chat.id, rows[0].id);
	});
});

bot.onText(/\/lacrima (.+)/, function(message, match) {

	if (match[1] == undefined){
		bot.sendMessage(message.chat.id, "/lacrima nickname");
		return;
	}

	var nick = match[1];

	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		connection.query('SELECT * FROM player WHERE nickname = "' + nick + '"', function(err, rows, fields) {
			if (err) throw err;
			var player_id = rows[0].id;
			lacrima(player_id, rows[0].chat_id);
			bot.sendMessage(message.chat.id, "Lacrima inviata a " + nick + "!");
		});
	}else{
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

function lacrima(player_id, chat_id){
	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',641)', function(err, rows, fields) {
		if (err) throw err;
	});
	connection.query('INSERT INTO tear (player_id, type) VALUES (' + player_id + ',1)', function(err, rows, fields) {
		if (err) throw err;
	});
	bot.sendMessage(chat_id, "Hai raggiunto il livello 300!\nPer questo hai ottenuto una *Lacrima dell'Immortale* come ricompensa!\nOra crea l'oggetto finale che preferisci e ottieni 2 artefatti per continuare con la rinascita!", mark);
}

function lacrima2(player_id, chat_id){
	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',674)', function(err, rows, fields) {
		if (err) throw err;
	});
	connection.query('INSERT INTO tear (player_id, type) VALUES (' + player_id + ',2)', function(err, rows, fields) {
		if (err) throw err;
	});
	bot.sendMessage(chat_id, "Hai raggiunto il livello 500!\nPer questo hai ottenuto una *Lacrima del Rinnegato* come ricompensa!", mark);
}

function lacrima3(player_id, chat_id){
	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',691)', function(err, rows, fields) {
		if (err) throw err;
	});
	connection.query('INSERT INTO tear (player_id, type) VALUES (' + player_id + ',3)', function(err, rows, fields) {
		if (err) throw err;
	});
	bot.sendMessage(chat_id, "Hai raggiunto il livello 900!\nPer questo hai ottenuto una *Lacrima dell'Impavido* come ricompensa!", mark);
}

bot.onText(/\/dona (.+)/, function(message, match) {
	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		if (match[1] == undefined){
			bot.sendMessage(message.chat.id, "/dona nickname quantit√† classifica");
			return;
		}

		var split = match[1].split(" ");

		var nick = split[0];
		var qnt = split[1];
		var leader = split[2];

		connection.query('SELECT * FROM player WHERE nickname = "' + nick + '"', function(err, rows, fields) {
			if (err) throw err;
			var player_id = rows[0].id;
			if (leader == 1){
				connection.query('UPDATE player SET donation = donation + ' + qnt + ' WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			}
			connection.query('UPDATE player SET moon_coin = moon_coin + ' + qnt + ' WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});
			bot.sendMessage(rows[0].chat_id, "Hai ricevuto *" + qnt + " Monete Lunari* dall'amministratore per la tua donazione!", mark);
			bot.sendMessage(message.chat.id, "Consegnati!");
		});
	}else{
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/leaderboard (.+)/, function(message, match) {
	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		if (match[1] == undefined){
			bot.sendMessage(message.chat.id, "/leaderboard nickname quantit√†");
			return;
		}

		var split = match[1].split(" ");

		var nick = split[0];
		var qnt = split[1];

		connection.query('SELECT * FROM player WHERE nickname = "' + nick + '"', function(err, rows, fields) {
			if (err) throw err;
			var player_id = rows[0].id;
			connection.query('UPDATE player SET donation = donation + ' + qnt + ' WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});
			bot.sendMessage(message.chat.id, "Fatto!");
		});
	}else{
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/^\/m (.+)|^\/m$/, function(message, match) {
	if (match[1] == undefined){
		bot.sendMessage(message.chat.id, "Sintassi: /m nickname testo");
		return;
	}

	var split = match[1].split(/ (.+)/);

	var nick = split[0];
	var msg = split[1];

	if (re3.test(msg) == false){
		bot.sendMessage(message.chat.id, "Puoi usare solo alcuni simboli");
		return;
	}

	nick = nick.replace("@","");

	connection.query('SELECT account_id, id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT id, player_id, allow FROM direct_message WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO direct_message (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Sei stato aggiunto al registro messaggi, usa /ricezione per bloccare i messaggi in entrata o riattivarli");
				});
			}

			connection.query('SELECT id, chat_id, account_id FROM player WHERE nickname = "' + nick + '"', function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Il giocatore non esiste!");
					return;
				}

				var account_id = (rows[0].account_id).toString();
				if (banlist_id.indexOf(account_id) != -1){
					bot.sendMessage(message.chat.id, "Il giocatore √® bannato");
					return;
				}

				var player_id2 = rows[0].id;
				var chat_id2 = rows[0].chat_id;

				connection.query('SELECT id, player_id, allow FROM direct_message WHERE player_id = ' + player_id2, function(err, rows, fields) {
					if (err) throw err;
					var allow = 1;
					if (Object.keys(rows).length == 0){
						connection.query('INSERT INTO direct_message (player_id, to_id) VALUES (' + player_id2 + ', ' + player_id + ')', function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(chat_id2, "Sei stato aggiunto al registro messaggi, usa /ricezione per bloccare i messaggi in entrata o riattivarli, '/r testo' per rispondere all'ultima discussione");
						});
					}else{
						allow = rows[0].allow;
					}

					if (allow == 0){
						bot.sendMessage(message.chat.id, "Il giocatore ha bloccato la ricezione messaggi");
						return;
					}

					connection.query('UPDATE direct_message SET reply_text = "' + msg.slice(0, 30) + "..." + '", to_id = ' + player_id + ' WHERE player_id = ' + player_id2, function(err, rows, fields) {
						if (err) throw err;
					});

					bot.sendMessage(chat_id2, "<b>Messaggio da @" + message.from.username + ":</b>\n" + msg, html);
					bot.sendMessage(message.chat.id, "Inviato!");
				});
			});
		});
	});
});

bot.onText(/^\/r (.+)|^\/r$/, function(message, match) {
	if (match[1] == undefined){
		bot.sendMessage(message.chat.id, "Sintassi: /r testo");
		return;
	}

	var msg = match[1];

	if (re3.test(msg) == false){
		bot.sendMessage(message.chat.id, "Puoi usare solo alcuni simboli");
		return;
	}

	connection.query('SELECT account_id, id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT id, player_id, allow, to_id, reply_text FROM direct_message WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Inizia prima una conversazione");
				return;
			}

			if (rows[0].to_id == 0){
				bot.sendMessage(message.chat.id, "Nessun messaggio a cui rispondere");
				return;
			}

			var reply_text = rows[0].reply_text;

			connection.query('SELECT id, chat_id, account_id FROM player WHERE id = ' + rows[0].to_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Il giocatore non esiste!");
					return;
				}

				var account_id = (rows[0].account_id).toString();
				if (banlist_id.indexOf(account_id) != -1){
					bot.sendMessage(message.chat.id, "Il giocatore √® bannato");
					return;
				}

				var player_id2 = rows[0].id;
				var chat_id2 = rows[0].chat_id;

				connection.query('SELECT id, player_id, allow FROM direct_message WHERE player_id = ' + player_id2, function(err, rows, fields) {
					if (err) throw err;
					var allow = 1;
					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Il giocatore non √® registrato, invia prima un messaggio");
						return;
					}else{
						allow = rows[0].allow;
					}

					if (allow == 0){
						bot.sendMessage(message.chat.id, "Il giocatore ha bloccato la ricezione messaggi");
						return;
					}

					connection.query('UPDATE direct_message SET reply_text = "' + msg.slice(0, 30) + "..." + '", to_id = ' + player_id + ' WHERE player_id = ' + player_id2, function(err, rows, fields) {
						if (err) throw err;
					});

					bot.sendMessage(chat_id2, "<b>Risposta da @" + message.from.username + ":</b>\n<i>" + reply_text + "</i>\n" + msg, html);
					bot.sendMessage(message.chat.id, "Inviato!");					
				});
			});			
		});
	});	
});

bot.onText(/\/ricezione/, function(message, match) {
	connection.query('SELECT id, player_id, allow FROM direct_message WHERE player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Registrati prima inviando un messaggio");
			return;
		}

		var allow = rows[0].allow;
		var player_id = rows[0].player_id;

		if (allow == 1){
			allow = 0;
			bot.sendMessage(message.chat.id, "Ricezione messaggi disattivata");
		}else if (allow == 0){
			allow = 1;
			bot.sendMessage(message.chat.id, "Ricezione messaggi attivata");
		}
		connection.query('UPDATE direct_message SET allow = ' + allow + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});
	});
});

bot.onText(/\/dai_scrigni (.+),(.+),(.+)/, function(message, match) {
	var nick = match[1];
	var chest_name = match[2];
	var qnt = match[3];

	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		connection.query('SELECT * FROM player WHERE nickname = "' + nick + '"', function(err, rows, fields) {
			if (err) throw err;			
			var chat_id = rows[0].chat_id;
			var player_id = rows[0].id;
			connection.query('SELECT id, name FROM chest WHERE name = "' + chest_name + '"', function(err, rows, fields) {
				if (err) throw err;
				var chest_name = rows[0].name;
				var chest_id = rows[0].id;
				for (var i = 0; i < qnt; i++) {
					connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chest_id + ')', function(err, rows, fields) {
						if (err) throw err;
					});
				}
				bot.sendMessage(chat_id, "Hai ricevuto " + qnt + "x *" + chest_name + "* dal Mercante Leggendario!", mark);
				bot.sendMessage(message.chat.id, "Consegnato!");
			});
		});
	}else{
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/dai_ogg (.+),(.+),(.+)/, function(message, match) {
	var nick = match[1];
	var item_name = match[2];
	var qnt = match[3];

	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		connection.query('SELECT * FROM player WHERE nickname = "' + nick + '"', function(err, rows, fields) {
			if (err) throw err;			
			var chat_id = rows[0].chat_id;
			var player_id = rows[0].id;
			connection.query('SELECT id, name FROM item WHERE name = "' + item_name + '"', function(err, rows, fields) {
				if (err) throw err;
				var item_name = rows[0].name;
				var item_id = rows[0].id;
				for (var i = 0; i < qnt; i++) {
					connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + item_id + ')', function(err, rows, fields) {
						if (err) throw err;
					});
				}
				bot.sendMessage(chat_id, "Hai ricevuto " + qnt + "x *" + item_name + "* dal Mercante Leggendario!", mark);
				bot.sendMessage(message.chat.id, "Consegnato!");
			});
		});
	}else{
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/soldi (.+),(.+)/, function(message, match) {
	var nick = match[1];
	var qnt = match[2];

	if ((message.from.username == "fenix45") || (message.from.username == "LastSoldier95")){
		connection.query('SELECT * FROM player WHERE nickname = "' + nick + '"', function(err, rows, fields) {
			if (err) throw err;			
			var chat_id = rows[0].chat_id;
			var player_id = rows[0].id;

			var query = "";
			var msg = "";
			if ((qnt.indexOf("-") != -1) || (qnt.indexOf("+") != -1)){
				query = "money = money " + qnt;
				msg = "Hai ricevuto *" + qnt + " ¬ß* dal Mercante Leggendario!";
			}else{
				query = "money = " + qnt;
				msg = "Il tuo patrimonio √® stato impostato a *" + qnt + " ¬ß* dal Mercante Leggendario!";
			}

			connection.query('UPDATE player SET ' + query + ' WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				bot.sendMessage(chat_id, msg, mark);
				bot.sendMessage(message.chat.id, "Consegnato!");
			});
		});
	}else{
		bot.sendMessage(message.chat.id, "Questo comando pu√≤ essere utilizzato solo dall'amministratore.");
	}
});

bot.onText(/\/invitati/i, function(message) {
	connection.query('SELECT player.nickname, player.exp, player.reborn FROM referral_list, player WHERE new_player = player.id AND player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Nessun utente si √® registrato con il tuo link");
			return;
		}

		var text = Object.keys(rows).length + " giocatori si sono registrati con il tuo link invito:\n";
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			text += "> @" + rows[i].nickname + " Livello: " + Math.floor(rows[i].exp/10) + " Rinascita: " + (rows[i].reborn-1) + "\n";
		}
		bot.sendMessage(message.chat.id, text);
	});
});

bot.onText(/\/globali/, function(message, match) {
	connection.query('SELECT global_msg FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (rows[0].global_msg == 1){
			connection.query('UPDATE player SET global_msg = 0 WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Ricezione avvisi disattivata, usa /globali per riattivarla");
			});
		}else{
			connection.query('UPDATE player SET global_msg = 1 WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Ricezione avvisi attivata, usa /globali per disattivarla");
			});
		}
	});
});

bot.onText(/\/messaggio (.+)|\/messaggio/, function(message, match) {
	if ((match[1] == undefined) || (match[1] == "")){
		bot.sendMessage(message.chat.id, "Specifica il messaggio da inviare al tuo team, il messaggio viene tagliato se vai a capo. Sintassi: /messaggio testo", back);
		return;
	}

	var msg = match[1];

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT player_id FROM `team_player` WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') AND role = 1', function(err, rows, fields) {
			if (err) throw err;

			var adminId = rows[0].player_id;

			connection.query('SELECT player_id, chat_id FROM `team_player`, player WHERE team_player.player_id = player.id AND team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY team_player.id', function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Non sei in un team", back);
					return;
				}

				if (adminId != player_id){
					bot.sendMessage(message.chat.id, "Non sei amministratore del team", back);
					return;
				}

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (rows[i].chat_id != message.chat.id){
						bot.sendMessage(rows[i].chat_id, "Messaggio dall'Amministratore Team\n" + msg);
					}
				}
				bot.sendMessage(message.chat.id, "Messaggio inviato a " + (Object.keys(rows).length-1) + " giocatori del team");
			});
		});
	});
});

bot.onText(/\/migrazione/, function(message, match) {
	connection.query('SELECT * FROM player WHERE account_id = ' + message.from.id, function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (message.from.username == undefined){
			bot.sendMessage(message.chat.id, "Imposta il nickname prima di migrare", back);
			return;
		}
		bot.sendMessage(message.chat.id, "Il tuo account verr√† aggiornato al tuo attuale username, verr√† inviata una notifica all'amministratore. Continuare?", yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					connection.query('SELECT id, nickname, account_id FROM player WHERE account_id = ' + message.from.id, function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "Non ho trovato il tuo account, segnala a @fenix45", back);
							return;
						}

						var account_id = (rows[0].account_id).toString();
						if (banlist_id.indexOf(account_id) != -1){
							var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
							bot.sendMessage(message.chat.id, text, mark);
							return;
						}

						var id = rows[0].id;
						var nickname = rows[0].nickname;

						connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"',  function(err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length > 0){
								bot.sendMessage(message.chat.id, "Non puoi migrare su un utente gi√† registrato, contatta @fenix45", back);
								bot.sendMessage("@lnotify", "#MigrazioneNegata: " + message.from.username);
								return;
							}

							connection.query('UPDATE player SET nickname = "' + message.from.username + '" WHERE id = ' + id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Migrazione completata!", back);

								bot.sendMessage("@lnotify", "#Migrazione: " + nickname + " -> " + message.from.username);
							});
						});
					});
				};
			};
		});
	});
});

bot.onText(/\/riscatta (.+)/, function(message, match) {
	var code = match[1];

	connection.query('SELECT * FROM code_list WHERE code = "' + code + '"', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Questo codice non √® valido", back);
			return;
		}
		if (rows[0].used != ""){
			bot.sendMessage(message.chat.id, "Questo codice √® gi√† stato utilizzato", back);
			return;
		}
		var nick = rows[0].nickname;
		if ((nick != message.from.username) && (nick != "")){
			bot.sendMessage(message.chat.id, "Non puoi riscattare questo codice privato", back);
			return;
		}
		var chest_id = parseInt(rows[0].chest_id);
		if (chest_id != 0){
			connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES ((SELECT id FROM player WHERE nickname = "' + message.from.username + '"),' + chest_id + ')', function(err, rows, fields) {
				if (err) throw err;
				connection.query('SELECT name FROM chest WHERE id = ' + chest_id, function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Hai ottenuto *" + rows[0].name + "*!", back);
				});
			});
		}
		var item_id = parseInt(rows[0].item_id);
		if (item_id != 0){
			connection.query('INSERT INTO inventory (player_id, item_id) VALUES ((SELECT id FROM player WHERE nickname = "' + message.from.username + '"),' + item_id + ')', function(err, rows, fields) {
				if (err) throw err;
				connection.query('SELECT name FROM item WHERE id = ' + item_id, function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Hai ottenuto *" + rows[0].name + "*!", back);
				});
			});			
		}
		var money = parseInt(rows[0].money);
		if (money != 0){
			connection.query('UPDATE player SET money = money + ' + money + ' WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai ottenuto *" + money + "* ¬ß!", back);
			});			
		}
		var gems = parseInt(rows[0].gems);
		if (gems != 0){
			connection.query('UPDATE player SET gems = gems + ' + gems + ' WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai ottenuto *" + gems + "* üíé !", back);
			});			
		}
		connection.query('UPDATE code_list SET used = "' + message.from.username + '" WHERE code = "' + code + '"', function(err, rows, fields) {
			if (err) throw err;
			console.log("Codice: " + code + " utilizzato");
		});		
	});
});

bot.onText(/craftweek/i, function(message) {
	if (message.from.username == "fenix45"){
		bot.sendMessage(message.chat.id, "Sicuro?", yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					craftWeek();
					bot.sendMessage(message.chat.id, "Fatto!", back);
				}
			}
		});
	}
});

function craftWeek(){
	connection.query('UPDATE player SET craft_week = 0', function(err, rows, fields) {
		if (err) throw err;
	});
}

bot.onText(/resetach/i, function(message) {
	if (message.from.username == "fenix45"){
		bot.sendMessage(message.chat.id, "Sicuro?", yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					reloadAchievement();
					bot.sendMessage(message.chat.id, "Fatto!", back);
				};
			};
		});
	}
});

bot.onText(/resetallboss/i, function(message) {
	if (message.from.username == "fenix45"){
		bot.sendMessage(message.chat.id, "Sicuro?", yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					incremBoss(0);
					bot.sendMessage(message.chat.id, "Fatto!", back);
				};
			};
		});
	}
});

function incremBoss(team_id){

	var where = "";
	if (team_id > 0){
		where = " WHERE id = " + team_id;
	}

	connection.query('SELECT id, total_life FROM boss', function(err, rows, fields) {
		if (err) throw err;

		var totlife = [];
		totlife.push(0); //per avere un valore vuoto
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			totlife.push(rows[i].total_life);
		}

		connection.query('SELECT * FROM team' + where, function(err, rows, fields) {
			if (err) throw err;

			var life = 0;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {

				/*
				if ((rows[i].id != 3) && (rows[i].id != 82) && (rows[i].id != 603) && (rows[i].id != 692) && (rows[i].id != 54)
					&& (rows[i].id != 277)){
					continue;
				}
				*/

				console.log("TEAMID: " + rows[i].name + " (" + rows[i].id + ") PARZ: " + rows[i].kill_num1 + " COMPL: " + rows[i].kill_num2);
				for (var j = 1; j < 32; j++) {
					boss_id = j;
					if (j <= 20){
						life = totlife[j]+(rows[i].kill_num1*(8000+(j*2000)));
					}else if ((j > 20) && (j <= 27)){
						life = totlife[j]+(rows[i].kill_num2*60000+((j-20)*5000));
					}else{
						life = totlife[j]+(rows[i].kill_num2*120000+((j-27)*20000));
					}

					life += (12+(2*j)-Math.log(life-1))*1000;
					life = Math.round(life);

					console.log("> BOSSID: " + boss_id + " LIFE: " + life);

					connection.query('UPDATE boss_team SET total_life = ' + life + ' WHERE team_id = ' + rows[i].id + ' AND boss_id = ' + boss_id, function(err, rows, fields) {
						if (err) throw err;
					});

					life = 0;
				}
				connection.query('UPDATE boss_team SET life = total_life WHERE life > total_life', function(err, rows, fields) {
					if (err) throw err;
				});
			}
		});
	});
}


function resetAchievement(){
	connection.query('DELETE FROM achievement_daily', function(err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM achievement_status', function(err, rows, fields) {
		if (err) throw err;
	});
	console.log("Imprese azzerate");
};

function reloadAchievement(){
	connection.query('SELECT id, name, item_rarity, type FROM (SELECT * FROM achievement_list ORDER BY RAND()) as t WHERE id NOT IN (SELECT achievement_id FROM achievement_daily) GROUP BY type ORDER BY RAND() LIMIT 3', function(err, rows, fields) {
		if (err) throw err;

		connection.query('DELETE FROM achievement_daily', function(err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM achievement_status', function(err, rows, fields) {
			if (err) throw err;
		});

		var rarity = 0;
		var id = 0;
		var type = 0;

		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			rarity = rows[i].item_rarity;
			id = rows[i].id;
			type = rows[i].type;

			if ((rarity != 0) && (type == 12)){
				connection.query('SELECT item.id FROM item, rarity WHERE rarity.shortname = item.rarity AND rarity.id = ' + rarity + ' AND craftable = 1 ORDER BY RAND()', function(err, rows, fields) {
					if (err) throw err;
					connection.query('INSERT INTO achievement_daily (id, achievement_id, item_id) VALUES (' + (this.i+1) + ',' + this.id + ',' + rows[0].id + ')', function(err, rows, fields) {
						if (err) throw err;
					});
				}.bind( {i: i, id: id} ));
			}else{
				connection.query('INSERT INTO achievement_daily (id, achievement_id, item_id) VALUES (' + (i+1) + ',' + id + ',' + rarity + ')', function(err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
};

bot.onText(/automana/i, function(message) {
	if (message.from.username == "fenix45"){
		bot.sendMessage(message.chat.id, "Sicuro?", yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					autoMana();
					bot.sendMessage(message.chat.id, "Fatto!", back);
				};
			};
		});
	}
});

function autoMana(){
	connection.query('SELECT mana.name, class, reborn, chat_id, nickname, player_id, rate, type, ROUND(TIMESTAMPDIFF(MINUTE,time_start,NOW())/60*rate,0) As quantity FROM event_mana_status, event_mana_zone, player, mana WHERE mana.id = event_mana_zone.type AND player.id = player_id AND event_mana_status.time_start IS NOT NULL AND event_mana_status.zone_id = event_mana_zone.id', function (err, rows, fields) {
		if (err) throw err;

		var mana_type = "";
		var text = "";
		if (Object.keys(rows).length > 0){
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				mana_type = 'mana_' + rows[i].type;
				if ((rows[i].class == 2) && (rows[i].reborn > 1)){
					rows[i].quantity += rows[i].quantity*0.3;
				}
				if ((rows[i].class == 3) && (rows[i].type == 2) && (rows[i].reborn > 1)){
					rows[i].quantity += rows[i].quantity*0.5;
				}
				if ((rows[i].class == 3) && (rows[i].type != 2) && (rows[i].reborn > 1)){
					rows[i].quantity -= rows[i].quantity*0.2;
				}
				if ((rows[i].class == 4) && (rows[i].type == 3) && (rows[i].reborn > 1)){
					rows[i].quantity += rows[i].quantity*0.5;
				}
				if ((rows[i].class == 4) && (rows[i].type != 3) && (rows[i].reborn > 1)){
					rows[i].quantity -= rows[i].quantity*0.2;
				}
				if ((rows[i].class == 5) && (rows[i].type == 1) && (rows[i].reborn > 1)){
					rows[i].quantity += rows[i].quantity*1;
				}
				if ((rows[i].class == 5) && (rows[i].type != 1) && (rows[i].reborn > 1)){
					rows[i].quantity -= rows[i].quantity*0.1;
				}
				if ((rows[i].class == 6) && (rows[i].reborn > 1)){
					rows[i].quantity -= rows[i].quantity*0.1;
				}
				rows[i].quantity = Math.floor(rows[i].quantity);

				connection.query('UPDATE event_mana_status SET ' + mana_type + ' = ' + mana_type + ' + ' + rows[i].quantity + ', zone_id = 0, time_start = NULL WHERE player_id = ' + rows[i].player_id, function (err, rows, fields){
					if (err) throw err;
				});
				bot.sendMessage(rows[i].chat_id, "Le miniere sono state chiuse, hai ricevuto " + rows[i].quantity + " Mana " + rows[i].name + "!");
				text += "\n" + rows[i].quantity + " Mana " + rows[i].name + " per " + rows[i].nickname + "(" + rows[i].player_id + ")";
			}
		}else{
			console.log("Nessuna miniera da terminare");
		}
	});	
};

function autoDust(){
	connection.query('SELECT chat_id, nickname, player_id, extracting FROM event_dust_status, player WHERE player.id = player_id AND extracting = 1', function (err, rows, fields) {
		if (err) throw err;

		var text = "";
		if (Object.keys(rows).length > 0){
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				connection.query('UPDATE event_dust_status SET extracting = 0, last_update = NULL WHERE player_id = ' + rows[i].player_id, function (err, rows, fields){
					if (err) throw err;
				});
				bot.sendMessage(rows[i].chat_id, "I Generatori di Polvere sono stati spenti!");
			}
		}else{
			console.log("Nessuna polvere da terminare");
		}
	});	
};

function makeid() {
	var text = "";
	var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

	for( var i=0; i < 10; i++ )
		text += possible.charAt(Math.floor(Math.random() * possible.length));

	return text;
}

function printStart(message){
	connection.query('SELECT invite_code FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var code = rows[0].invite_code;
		bot.sendMessage(message.chat.id, 	'‚ö°Ô∏è Benvenuto nel *xxx*!‚ö°Ô∏è \n\n'+
						'Benvenuto nel bot pi√π divertente di Telegram! Intraprendi missioni, crea i migliori oggetti per scalare la classifica!\n\n'+
						'Il tuo nickname √®: <b>' + message.from.username + '</b>.\n' +
						'Se modifichi il nickname perderai i dati di gioco! Usa il comando /migrazione per modificarlo automaticamente.\n\n' +
						'Il gioco si basa sul drop e creazione oggetti, per guadagnare un oggetto devi andare in missione ‚öî, sconfiggere boss e ispezionare.\n' +
						'Puoi affrontare i Dungeon per ottenere scrigni e oggetti e formare team per giocare in compagnia.\n' +
						'Una volta completata una missione ricevi uno <b>scrigno</b> di diversa rarit√†, una volta aperto otterrai un oggetto utilizzabile nelle creazioni.\n'+
						'Per iniziare segui il canale @xxxbotwiki\n'+
						'Visualizza le FAQ nel bot di supporto @xxxplusbot (scrivendo /faq)\n\n'+
						'<b>Regolamento</b>\n'+
						'- E\' <b>vietato</b> lo sfruttamento di bug, account-schiavi, account-zaini, account secondari e tutto ci√≤ che fornisce vantaggi al giocatore generati esternamente al proprio account, pena il ban di tutti i coinvolti. Anche nel caso di un solo membro del team, verranno bannati tutti i componenti. Lo stesso discorso vale per gli account che giocano al solo scopo di fornire materiale ad altri giocatori, anche se si tratta di giocatori reali.\n'+
						'- E\' vietato l\'utilizzo di userbot e strumenti per automatizzare le azioni del giocatore in qualsiasi modo.\n'+
						'- Si prega di non utilizzare nomi osceni o di carattere spiacevole nel drago o nel team.\n'+
						'- E\' vietato compiere frodi nel mercato e in tutte le modalit√† di trattazione oggetti, pena l\'esclusione da esso.\n'+
						'- L\'amministratore pu√≤ bannare a sua discrezione se nota comportamenti scorretti, <b>anche senza specificare la motivazione</b>.\n\n'+
						'<b>Inattivit√†</b>\n' +
						'Dopo 60 giorni di inattivit√† il tuo account sar√† automaticamente inserito in modalit√† vacanza.\n' +
						'Dopo 6 mesi di inattivit√† il tuo account sar√† eliminato senza possibilit√† di ripristinarlo.\n' +
						'Come ultima attivit√† si intende un qualsiasi comando inviato tramite il bot principale o il Plus.\n\n' +
						'<b>Link Utili</b>\n'+
						'<a href="https://storebot.me/bot/xxxgamebot">Vota il bot</a>\n'+
						'<a href="https://telegram.me/joinchat/AThc-z_EfojvcE8mbGw1Cw">Gruppo Pubblico</a> - <a href="https://telegram.me/joinchat/EXFobEDH8FbDpQ4MTmw-mQ">Gruppo Scuola</a>\n'+
						'<a href="http://fenixweb.net/">Dona per aiutarmi a mantenere il server, riceverai delle monete lunari!</a>\n'+
						'\n'+
						'<b>Crediti Principali</b>\n'+
						'Edoardo Cortese @fenix45\n'+
						'Emanuele Finiguerra @LastSoldier95\n\n'+
						'<b>Versione</b> 1.8', no_preview_html);

		mainMenu(message);
	});
}

bot.onText(/^info/i, function(message) {
	printStart(message);
});

function mainMenu(message){
	calcLife(message);
	var market = 0;

	var price_drop = 0;
	var price_drop_msg = "";
	var n = new Date().getDay()
	var n2 = new Date().getDate();

	if ((n == 0) && (crazyMode == 0)){
		if (n2 < 7){
			sconto = 20;
		}
		price_drop = 1;
		price_drop_msg = "\nüí∏ Oggi sconti del <b>" + sconto + "%</b> all'emporio ed al mercato!";
	}else if (n == 2){
		price_drop_msg = "\nüçÄ Oggi giornata <b>fortunata</b>!";		
	}else{
		var links = [	"<a href='http://telegram.me/storebot?start=xxxgamebot'>Vota</a> il bot!",
					 "Entra nella <a href='https://telegram.me/joinchat/AThc-z_EfojvcE8mbGw1Cw'>Taverna</a>!",
					 "Commercia nel <a href='https://telegram.me/joinchat/AThc-z90Erh4M2O8Mk5QLw'>Mercato</a>!",
					 "Iscriviti a @xxxAvvisi per seguire le novit√†!",
					 "<a href='https://paypal.me/fenixtm'>Dona</a> e riceverai alcune monete lunari per tentare la fortuna!",
					 "Aggiungi @xxxplusbot al tuo gruppo!",
					 ((n != 6) && (n != 0) ? "Ricordati di completare le Imprese Giornaliere!" : "In settimana completa le Imprese Giornaliere!")];
		var rand = Math.round(Math.random()*(Object.keys(links).length-1));
		price_drop_msg = "\n " + links[rand];
	}

	if (message.from.username == undefined){
		bot.sendMessage("@lnotify", "#undefined " + "-" + account_id);
		return;
	}

	var time = "üåï Salve";
	var n = new Date().getHours();

	if ((n >= 7) && (n <= 19)){
		time = "‚òÄÔ∏è Buongiorno";
	}else if ((n > 19) && (n < 23)){
		time = "üåô Buonasera";
	}

	var msgtext = "<b>" + time + " " + message.from.username + "! Cosa vuoi fare?</b>";

	connection.query('SELECT id, account_id, mission_id, mission_special_id, travel_id, cave_id, exp, life, total_life, reborn, money, holiday, boost_id, market_pack, heist_protection, mission_time_end, mission_special_time_end, travel_time_end, cave_time_end, dungeon_time, boost_mission, paralyzed FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Il tuo account non √® stato trovato, se hai cambiato nickname usa /migrazione, altrimenti usa /start per crearne uno nuovo.", mark);
			return;
		}

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var mission_id = rows[0].mission_id;
		var mission_special_id = rows[0].mission_special_id;
		var travel_id = rows[0].travel_id;
		var cave_id = rows[0].cave_id;
		var exp = rows[0].exp;
		var lev = Math.floor(exp/10);
		var life = rows[0].life;
		var tot_life = rows[0].total_life;
		var reborn = rows[0].reborn;
		var money = rows[0].money;
		var holiday = rows[0].holiday;
		var boost_id = rows[0].boost_id;
		var market_pack = rows[0].market_pack;
		var heist_protection = rows[0].heist_protection;

		var mission_time_end = rows[0].mission_time_end;
		var mission_special_time_end = rows[0].mission_special_time_end;
		var travel_time_end = rows[0].travel_time_end;
		var cave_time_end = rows[0].cave_time_end;
		var dungeon_time = rows[0].dungeon_time;
		var boost_end = rows[0].boost_mission;

		if (rows[0].paralyzed > 0){
			var plur = "i";
			if (rows[0].paralyzed == 1){
				plur = "o";
			}
			msgtext = msgtext + "\n‚ö°Ô∏è Sei paralizzato ancora per <b>" + rows[0].paralyzed + " turn" + plur + "</b>";
		}

		connection.query('SELECT room_time FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var min = 0;
			var room_time = 0;

			if (Object.keys(rows).length > 0){
				room_time = rows[0].room_time;
				if (rows[0].room_time != null){
					var now = new Date();
					min = Math.round(((new Date(room_time) - now)/1000)/60);
				}
			}

			if (crazyMode == 0){
				if (market_pack == 0){
					msgtext += "\nüëù 1 pacchetto acquistabile dal Mercante";
				}
			}else{
				if (market_pack < 2){
					msgtext += "\nüëù 3 pacchetti acquistabili dal Mercante";
				}
			}

			connection.query('SELECT wait_time FROM heist_progress WHERE from_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0){
					if (rows[0].wait_time == null){
						msgtext += "\n‚ùì Gnomo in attesa di istruzioni";
					}else{
						var wait_time = new Date(rows[0].wait_time);
						msgtext += "\nüî¶ Gnomo in esplorazione fino alle " + addZero(wait_time.getHours()) + ":" + addZero(wait_time.getMinutes());
					}
				}

				if (heist_protection != null){
					var prot_time = new Date(heist_protection);
					msgtext += "\nüö∑ Protetto fino alle " + addZero(prot_time.getHours()) + ":" + addZero(prot_time.getMinutes());
				}

				connection.query('SELECT zone_id FROM event_mana_status WHERE time_start IS NOT NULL AND player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length > 0){
						var zone = "";
						if (rows[0].zone_id == 1){
							type = "Blu";
						}else if (rows[0].zone_id == 2){
							type = "Giallo";
						}else if (rows[0].zone_id == 3){
							type = "Rosso";
						}

						msgtext = msgtext + "\n‚õè Estrazione di Mana " + type + " in corso";
					}

					connection.query('SELECT COUNT(*) As cnt FROM heist WHERE to_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length > 0){
							if (rows[0].cnt > 0){
								var plur = "o";
								if (rows[0].cnt > 1){
									plur = "i";
								}
								msgtext = msgtext + "\n‚ö†Ô∏è <b>" + rows[0].cnt + "</b> gnom" + plur + " in lontananza";
							}
						}

						connection.query('SELECT COUNT(*) As cnt FROM heist_progress WHERE to_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length > 0){
								if (rows[0].cnt > 0){
									var plur = "o";
									if (rows[0].cnt > 1){
										plur = "i";
									}
									msgtext = msgtext + "\n‚ö†Ô∏è <b>" + rows[0].cnt + "</b> gnom" + plur + " davanti al rifugio";
								}
							}

							connection.query('SELECT extracting, generated FROM event_dust_status WHERE player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length > 0){
									if (rows[0].extracting == 1){
										msgtext = msgtext + "\n‚è≤ Generatore attivo (" + rows[0].generated + " unit√†)";
									}
								}


								connection.query('SELECT datetime FROM heist WHERE from_id = ' + player_id,  function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length > 0){
										var heist_end = new Date(rows[0].datetime);
										msgtext = msgtext + "\nüî¶ Gnomo in ispezione alle " + addZero(heist_end.getHours()) + ":" + addZero(heist_end.getMinutes());
									}

									connection.query('SELECT name, progress, value, ROUND(progress/value*100) As perc FROM achievement_daily, achievement_list, achievement_status WHERE achievement_daily.achievement_id = achievement_list.id AND achievement_status.achievement_id = achievement_list.id AND player_id = ' + player_id + ' AND progress < value AND completed = 0 ORDER BY perc DESC', function(err, rows, fields) {
										if (err) throw err;

										var achievement = "";
										if (Object.keys(rows).length > 0){
											achievement = "\nüèã Impresa imminente: " + rows[0].name + " (" + formatNumber(rows[0].progress) + "/" + formatNumber(rows[0].value) + ")";
										}

										connection.query('SELECT time_end, day_cnt, item.name FROM merchant_offer, item WHERE merchant_offer.item_id = item.id AND player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length > 0){
												if (rows[0].day_cnt < merchant_limit){
													var d = new Date();
													if ((d.getHours() > 8) && (d.getHours() < 23)){
														if (rows[0].time_end != null){
															var time_end = new Date(rows[0].time_end);
															var short_date = addZero(time_end.getHours()) + ":" + addZero(time_end.getMinutes());
															if (time_end.getHours() < 23)
																msgtext = msgtext + "\nüí¨ Contrabbandiere assente fino alle " + short_date;
														}else{
															msgtext = msgtext + "\nüî© Offerta Contrabbandiere disponibile"; //per " + rows[0].name;
														}
													}
												}
											}

											connection.query('SELECT boost_time FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;

												if (mission_id > 0){
													var mission_end = new Date(mission_time_end);
													var now = new Date();
													var tomorrow = new Date();
													tomorrow.setDate(now.getDate() + 1);
													var tomorrow2 = new Date();
													tomorrow2.setDate(now.getDate() + 2);
													if (tomorrow.getFullYear() == mission_end.getFullYear() && tomorrow.getMonth() == mission_end.getMonth() && tomorrow.getDate() == mission_end.getDate()) {
														msgtext = msgtext + "\n‚öî Missione fino alle " + addZero(mission_end.getHours()) + ":" + addZero(mission_end.getMinutes()) + " di domani";
													}else if (tomorrow2.getFullYear() == mission_end.getFullYear() && tomorrow2.getMonth() == mission_end.getMonth() && tomorrow2.getDate() == mission_end.getDate()) {
														msgtext = msgtext + "\n‚öî Missione fino alle " + addZero(mission_end.getHours()) + ":" + addZero(mission_end.getMinutes()) + " di dopodomani";
													}else{
														msgtext = msgtext + "\n‚öî Missione fino alle " + addZero(mission_end.getHours()) + ":" + addZero(mission_end.getMinutes());
													}
												}
												if (mission_special_id > 0){
													var mission_end = new Date(mission_special_time_end);
													msgtext = msgtext + "\nüóæ Itinerario fino alle " + addZero(mission_end.getHours()) + ":" + addZero(mission_end.getMinutes());
												}
												if (travel_id > 0){
													var travel_end = new Date(travel_time_end);
													msgtext = msgtext + "\nüó∫ Viaggio fino alle " + addZero(travel_end.getHours()) + ":" + addZero(travel_end.getMinutes()) + " del " + addZero(travel_end.getDate()) + "/" + addZero(travel_end.getMonth()+1) + "/" + travel_end.getFullYear();
												}
												if (cave_id > 0){
													var cave_end = new Date(cave_time_end);
													msgtext = msgtext + "\nüóª Esplorazione cava fino alle " + addZero(cave_end.getHours()) + ":" + addZero(cave_end.getMinutes()) + " del " + addZero(cave_end.getDate()) + "/" + addZero(cave_end.getMonth()+1) + "/" + cave_end.getFullYear();
												}
												if (dungeon_time != null){
													var dungeon = new Date(dungeon_time);
													msgtext = msgtext + "\nüõ° Attesa dungeon fino alle " + addZero(dungeon.getHours()) + ":" + addZero(dungeon.getMinutes());
												}
												if (min > 0){
													var plur = "i";
													if (min == 1){
														plur = "o";
													}
													msgtext = msgtext + "\nüõ° Prossima stanza tra " + min + " minut" + plur;
												}

												if ((room_time == null) && (dungeon_time == null)){
													msgtext = msgtext + "\n‚ùóÔ∏è Prosegui il dungeon!";
												}

												if (Object.keys(rows).length > 0){
													if (rows[0].boost_time != null){
														var dragon = new Date(rows[0].boost_time);
														var now = new Date();
														if (dragon < now){
															msgtext = msgtext + "\nüç∂ Bevanda pronta al ritiro" ;
														}else{
															msgtext = msgtext + "\nüç∂ Produzione bevanda alle " + addZero(dragon.getHours()) + ":" + addZero(dragon.getMinutes());
														}
													}
												}
												if (boost_id == 1){
													var plur = "i";
													if (boost_end == 1){
														plur = "e";
													}
													if (boost_end > 0)
														msgtext = msgtext + "\nüçπ Bevanda Energetica attiva per " + boost_end + " mission" + plur;
												}
												if (boost_id == 2){
													var plur = "i";
													if (boost_end == 1){
														plur = "e";
													}
													if (boost_end > 0)
														msgtext = msgtext + "\nüçπ Bevanda Scrigno attiva per " + boost_end + " mission" + plur;
												}
												if (boost_id == 4){
													var plur = "i";
													if (boost_end == 1){
														plur = "e";
													}
													if (boost_end > 0)
														msgtext = msgtext + "\nüçπ Bevanda Livellante attiva per " + boost_end + " mission" + plur;
												}
												if (boost_id == 3){
													var plur = "i";
													if (boost_end == 1){
														plur = "io";
													}
													if (boost_end > 0)
														msgtext = msgtext + "\nüçπ Bevanda Fiamma di Drago attiva per " + boost_end + " viagg" + plur;
												}
												if (boost_id == 5){
													var plur = "i";
													if (boost_end == 1){
														plur = "e";
													}
													if (boost_end > 0)
														msgtext = msgtext + "\nüçπ Bevanda Quadrifoglio attiva per " + boost_end + " mission" + plur;
												}
												if (boost_id == 6){
													var plur = "hi";
													if (boost_end == 1){
														plur = "o";
													}
													if (boost_end > 0)
														msgtext = msgtext + "\nüçπ Bevanda Furia attiva per " + boost_end + " attacc" + plur;
												}
												if (boost_id == 7){
													var plur = "i";
													if (boost_end == 1){
														plur = "e";
													}
													if (boost_end > 0)
														msgtext = msgtext + "\nüçπ Bevanda Bottino attiva per " + boost_end + " mission" + plur;
												}
												if (holiday > 0){
													msgtext = msgtext + "\n‚õ± Sei in modalit√† Vacanza!";
												}
												if (achievement != ""){
													msgtext += achievement;
												}
												var reb = "";
												if (reborn > 1){
													reb = " R" + (reborn-1);
												}
												var s = rebSym(reborn);
												if (message.from.username == "Shari_8"){
													s = "üêº";
												}
												msgtext += "\n" + s + " <b>" + lev + "</b> ‚ù§Ô∏è " + formatNumber(life) + "/" + formatNumber(tot_life) + "\nüí∞ " + formatNumber(money) + " ¬ß";
												msgtext += price_drop_msg;

												if (((exp >= 1000) && (reborn == 1)) || ((exp >= 1500) && (reborn == 2)) || ((exp >= 2000) && (reborn == 3)) || ((exp >= 3000) && (reborn == 4))){
													bot.sendMessage(message.chat.id, msgtext, mainReborn_html);
												}else if (((exp <= 50) && (reborn == 2)) || ((exp <= 50) && (reborn == 3)) || ((exp <= 50) && (reborn == 4))){
													bot.sendMessage(message.chat.id, msgtext, mainReborn2_html);
												}else{
													bot.sendMessage(message.chat.id, msgtext, main_html);
												}
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
}

function rebSym(reborn){
	var rebSym = "";
	if (reborn == 1){
		rebSym = "‚ú®";
	}else if (reborn == 2){
		rebSym = "üîÜ";
	}else if (reborn == 3){
		rebSym = "üí´";
	}else if (reborn == 4){
		rebSym = "‚≠êÔ∏è";
	}else if (reborn == 5){
		rebSym = "üåü";
	}
	return rebSym;
}

bot.onText(/torna al menu$/i, function(message) {
	connection.query('SELECT account_id FROM plus_players WHERE account_id = ' + message.from.id, function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0){
			connection.query('INSERT INTO plus_players (account_id, nickname) VALUES (' + message.from.id + ',"' + message.from.username + '")', function(err, rows, fields) {
				if (err) throw err;
				console.log(message.from.username + " aggiunto");
			});
		}else{
			connection.query('UPDATE plus_players SET nickname = "' + message.from.username + '" WHERE account_id = ' + message.from.id, function(err, rows, fields) {
				if (err) throw err;
			});
		}
	});
	mainMenu(message);
});
bot.onText(/niente$/i, function(message) {
	mainMenu(message);
});
bot.onText(/nessuno$/i, function(message) {
	mainMenu(message);
});
bot.onText(/annulla$/i, function(message) {
	mainMenu(message);
});

bot.onText(/giocatore/i, function(message) {
	getInfo(message, message.from.username, 6);
});

function getInfo(message, player, myhouse_id){
	calcLife(message);

	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		helpMsg(message.chat.id, rows[0].id, 8);
	});

	connection.query('SELECT id, house_id, class, reborn, custom_name, custom_name2, custom_name3, custom_name_h, weapon_id, weapon2_id, weapon3_id, charm_id, boost_id FROM player WHERE nickname="' + player + '"', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Il giocatore non esiste.", back);
			return;
		}

		var player_id = rows[0].id;
		var boost_id = rows[0].boost_id;
		var custom_name = rows[0].custom_name;
		var custom_name2 = rows[0].custom_name2;
		var custom_name3 = rows[0].custom_name3;
		var custom_name_h = rows[0].custom_name_h;

		var weapon_id = rows[0].weapon_id;
		var weapon2_id = rows[0].weapon2_id;
		var weapon3_id = rows[0].weapon3_id;
		var charm_id = rows[0].charm_id;
		var house_id = rows[0].house_id;
		var reborn = rows[0].reborn;
		var class_id = rows[0].class;

		connection.query('SELECT name, id FROM item WHERE id = ' + weapon_id, function(err, rows, fields) {
			if (err) throw err;
			var weapon = "-";
			var weapon_id = 0;
			if (Object.keys(rows).length > 0){
				weapon_id = rows[0].id;
				if ((weapon_id == 638) || (weapon_id == 639) || (weapon_id == 640)){
					if (custom_name != null){
						weapon = custom_name + rows[0].name.replace("Necro","");
					}else{
						weapon = rows[0].name;
					}
				}else{
					weapon = rows[0].name;
				}
			};

			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 1', function(err, rows, fields) {
				if (err) throw err;

				var abBonus = 0;
				if (Object.keys(rows).length > 0){
					abBonus = rows[0].ability_level*rows[0].val;
				}

				connection.query('SELECT COUNT(item_id) As cnt FROM artifacts WHERE player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;

					var artifacts = "";
					if (rows[0].cnt == 0){
						artifacts = "-";
					}
					if (rows[0].cnt >= 1){
						artifacts += "ü•â";
					}
					if (rows[0].cnt >= 2){
						artifacts += "ü•à";
					}
					if (rows[0].cnt >= 3){
						artifacts += "ü•á";
					}
					if (rows[0].cnt >= 4){
						artifacts += "üéñ";
					}
					if (rows[0].cnt >= 5){
						artifacts += "üèÖ";
					}

					connection.query('SELECT name, description FROM item WHERE id = ' + charm_id, function(err, rows, fields) {
						if (err) throw err;
						var talismano = "-";
						var talismano_desc = "";
						if (Object.keys(rows).length > 0){
							talismano = rows[0].name;
							talismano_desc = " (" + rows[0].description + ")";
						};

						connection.query('SELECT name FROM house WHERE grade = ' + house_id, function(err, rows, fields) {
							if (err) throw err;
							var rifugio = "-";
							if (Object.keys(rows).length > 0){
								if (house_id >= 5){
									if (custom_name_h != null){
										rifugio = "Rifugio " + custom_name_h + " (" + house_id + ")";
									}else{
										rifugio = rows[0].name + " (" + house_id + ")";
									}
								}else{
									rifugio = rows[0].name + " (" + house_id + ")";
								}
							};

							connection.query('SELECT name FROM player, team, team_player WHERE player.id = ' + player_id + ' AND team.id = team_player.team_id AND team_player.player_id = player.id', function(err, rows, fields) {
								if (err) throw err;
								var team_desc = "";
								if (Object.keys(rows).length > 0){
									team_desc = " (" + rows[0].name.trim() + ")";
								};

								connection.query('SELECT name FROM house WHERE id = ' + house_id, function(err, rows, fields) {
									if (err) throw err;
									var house_name = rows[0].name;

									connection.query('SELECT name FROM item WHERE id = ' + weapon2_id, function(err, rows, fields) {
										if (err) throw err;
										var weapon2 = "-";
										if (Object.keys(rows).length > 0){
											if ((weapon2_id == 688) || (weapon2_id == 689) || (weapon2_id == 690)){
												if (custom_name2 != null){
													weapon2 = rows[0].name.replace("Necro", custom_name2);
												}else{
													weapon2 = rows[0].name;
												}
											}else{
												weapon2 = rows[0].name;
											}
										}

										connection.query('SELECT name FROM item WHERE id = ' + weapon3_id, function(err, rows, fields) {
											if (err) throw err;
											var weapon3 = "-";
											if (Object.keys(rows).length > 0){
												if ((weapon3_id == 671) || (weapon3_id == 672) || (weapon3_id == 673)){
													if (custom_name3 != null){
														weapon3 = rows[0].name.replace("Necro", custom_name3);
													}else{
														weapon3 = rows[0].name;
													}
												}else{
													weapon3 = rows[0].name;
												}
											}

											connection.query('SELECT dragon.* FROM player, dragon WHERE player.id = dragon.player_id AND player.id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												var dragon_name = "-";
												var dragon_level = "-";
												var dragon_damage = "-";
												var dragon_defense = "-";
												var dragon_critical = "-";
												var dragon_clawsid = 0;
												var dragon_saddleid = 0;
												var dragon_armsid = 0;
												var dragon_claws = 0;
												var dragon = 0;

												if (Object.keys(rows).length > 0){
													dragon = 1;

													if (charm_id == 602){
														rows[0].damage += 25;
														rows[0].critical += 10;
													}
													if (charm_id == 695){
														rows[0].damage += 30;
														rows[0].critical += 15;
													}

													if ((class_id == 7) && (reborn > 1)){
														rows[0].claws += rows[0].claws*0.5;
													}
													if ((class_id == 7) && (reborn > 1)){
														rows[0].saddle += rows[0].saddle*0.5;
													}
													if ((class_id == 7) && (reborn >= 4)){
														rows[0].damage += rows[0].damage*0.5;
													}
													if ((class_id == 7) && (reborn >= 4)){
														rows[0].defense += rows[0].defense*0.5;
													}
													if ((class_id == 7) && (reborn == 3)){
														rows[0].critical += 5;
													}
													if ((class_id == 7) && (reborn >= 4)){
														rows[0].critical += 7;
													}

													dragon_name = rows[0].name.trim() + " " + rows[0].type;
													dragon_level = rows[0].level;
													dragon_damage = "+" + Math.round(rows[0].damage + rows[0].claws);
													dragon_defense = "-" + Math.round(rows[0].defense + rows[0].saddle);
													dragon_critical = Math.round(rows[0].critical);

													dragon_claws = parseInt(rows[0].claws);

													dragon_clawsid = rows[0].claws_id;
													dragon_saddleid = rows[0].saddle_id;
													dragon_armsid = rows[0].arms_id;
												}

												connection.query('SELECT name, COUNT(name) As num FROM item WHERE id = ' + dragon_clawsid, function(err, rows, fields) {
													if (err) throw err;

													var dragon_claws_n = "-";
													if (rows[0].num > 0){
														dragon_claws_n = rows[0].name;
													}

													connection.query('SELECT name, COUNT(name) As num FROM item WHERE id = ' + dragon_saddleid, function(err, rows, fields) {
														if (err) throw err;

														var dragon_saddle_n = "-";
														if (rows[0].num > 0){
															dragon_saddle_n = rows[0].name;
														}

														connection.query('SELECT name, COUNT(name) As num FROM item WHERE id = ' + dragon_armsid, function(err, rows, fields) {
															if (err) throw err;

															var dragon_arms_n = "-";
															if (rows[0].num > 0){
																dragon_arms_n = rows[0].name;
															}

															connection.query('SELECT player_nick As player, new_player_nick As new, time FROM referral_list WHERE 	new_player = ' + player_id, function(err, rows, fields) {
																if (err) throw err;

																var referral = "";
																if (Object.keys(rows).length > 0){
																	var d = new Date(rows[0].time);
																	var short_date = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
																	referral = "Invitato da: " + rows[0].player + " (" + short_date + ")\n";
																}

																connection.query('SELECT class.name FROM player, class WHERE player.id = ' + player_id + ' AND player.class = class.id', function(err, rows, fields) {
																	if (err) throw err;

																	var class_name = "-";
																	if (Object.keys(rows).length > 0){
																		class_name = rows[0].name;
																	}

																	connection.query('SELECT * FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		var stars = rebSym(reborn);

																		if (player_id == 1){
																			stars = "üëë";
																		}

																		//Talismani

																		if (charm_id == 62){
																			rows[0].weapon += 5;
																		}
																		if (charm_id == 184){
																			rows[0].weapon += 15;
																		}
																		if (charm_id == 188){
																			rows[0].weapon += 20;
																		}
																		if (charm_id == 404){
																			rows[0].weapon_crit += 6;
																		}
																		if (charm_id == 493){
																			rows[0].weapon_crit += 2;
																		}
																		if (charm_id == 494){
																			rows[0].weapon_crit += 4;
																		}
																		if (charm_id == 495){
																			rows[0].weapon2_crit += 3;
																		}
																		if (charm_id == 496){
																			rows[0].weapon3_crit += 3;
																		}
																		if (charm_id == 696){
																			rows[0].weapon_crit += 5;
																			rows[0].weapon2_crit += 5;
																			rows[0].weapon3_crit += 3;
																		}
																		if (charm_id == 698){
																			rows[0].weapon += 30;
																		}
																		if (abBonus > 0){
																			rows[0].weapon_crit += abBonus;
																			rows[0].weapon2_crit += abBonus;
																			rows[0].weapon3_crit += abBonus;
																		}

																		//Vocazioni

																		if ((class_id == 2) && (reborn == 3)){
																			rows[0].weapon2_crit += 5;
																		}
																		if ((class_id == 2) && (reborn >= 4)){
																			rows[0].weapon2_crit += 7;
																			rows[0].weapon3_crit += 7;
																		}
																		if ((class_id == 4) && (reborn == 3)){
																			rows[0].weapon_crit += 2;
																			rows[0].weapon2_crit += 2;
																			rows[0].weapon3_crit += 2;
																		}
																		if ((class_id == 4) && (reborn >= 4)){
																			rows[0].weapon_crit += 7;
																			rows[0].weapon2_crit += 7;
																			rows[0].weapon3_crit += 7;
																		}
																		if ((class_id == 5) && (reborn == 3)){
																			rows[0].weapon3_crit += 3;
																		}
																		if ((class_id == 5) && (reborn >= 4)){
																			rows[0].weapon3_crit += 5;
																		}
																		if ((class_id == 6) && (reborn == 3)){
																			rows[0].weapon2_crit += 2;
																		}
																		if ((class_id == 6) && (reborn == 3)){
																			rows[0].weapon3_crit += 2;
																		}
																		if ((class_id == 6) && (reborn >= 4)){
																			rows[0].weapon2_crit += 7;
																		}
																		if ((class_id == 6) && (reborn >= 4)){
																			rows[0].weapon3_crit += 7;
																		}
																		if ((class_id == 6) && (reborn == 5)){
																			rows[0].weapon2_crit += 7;
																		}
																		if ((class_id == 6) && (reborn == 5)){
																			rows[0].weapon3_crit += 7;
																		}
																		if ((class_id == 8) && (reborn == 3)){
																			rows[0].weapon3_crit += 5;
																		}
																		if ((class_id == 8) && (reborn >= 4)){
																			rows[0].weapon3_crit += 7;
																		}
																		if ((class_id == 8) && (reborn == 5)){
																			rows[0].weapon_crit += 7;
																		}
																		if ((class_id == 9) && (reborn == 3)){
																			rows[0].weapon_crit += 2;
																			rows[0].weapon3_crit += 2;
																		}
																		if ((class_id == 9) && (reborn >= 4)){
																			rows[0].weapon_crit += 7;
																			rows[0].weapon3_crit += 7;
																		}

																		if ((class_id == 7) && (reborn == 5)){
																			rows[0].weapon_crit += Math.round(dragon_critical/2);
																		}

																		if ((class_id == 8) && (reborn > 1)){
																			rows[0].weapon += rows[0].weapon*0.1;
																		}
																		if ((class_id == 8) && (reborn == 5)){
																			rows[0].weapon += rows[0].weapon*0.1;
																		}
																		if ((class_id == 8) && ((reborn == 3) || (reborn >= 4))){
																			rows[0].weapon += rows[0].weapon*0.07;
																		}

																		//Descrizioni

																		var weapon_desc = "";
																		if (weapon != "-"){
																			weapon_desc = " (+" + Math.round(rows[0].weapon) + ", " + rows[0].weapon_crit + "%, " + rows[0].weapon_enchant + ")";
																		}
																		var weapon2_desc = "";
																		if (weapon2 != "-"){
																			weapon2_desc = " (" + Math.round(rows[0].weapon2) + ", " + rows[0].weapon2_crit + "%, " + rows[0].weapon2_enchant + ")";
																		}
																		var weapon3_desc = "";
																		if (weapon3 != "-"){
																			weapon3_desc = " (" + Math.round(rows[0].weapon3) + ", " + rows[0].weapon3_crit + "%, " + rows[0].weapon3_enchant + ")";
																		}

																		var nickname = rows[0].nickname;
																		var weapon_d = parseInt(rows[0].weapon);
																		var lev = Math.floor(rows[0].exp/10);
																		var player_atk = (lev+weapon_d+rows[0].weapon_enchant) + " - " + ((lev+weapon_d+rows[0].weapon_enchant)+(weapon_d+rows[0].weapon_enchant+dragon_claws));
																		var player_description = rows[0].player_description;

																		var Keys = []

																		if (player == message.from.username){
																			Keys.push(["Vocazione üèπ","Albero Talenti üå≥"]);
																			Keys.push(["Link Invito üó£","Statistiche Personali üìä"]);
																			if (((weapon_id == 638) || (weapon_id == 639) || (weapon_id == 640) ||
																				 (weapon2_id == 688) || (weapon2_id == 689) || (weapon2_id == 690) ||
																				 (weapon3_id == 671) || (weapon3_id == 672) || (weapon3_id == 673)) || (house_id >= 5)){
																				Keys.push(["Nomina Equip/Rifugio üè∑"]);
																			}
																			if (boost_id != 0){
																				Keys.push(["Annulla Bevanda Attiva üö´"]);
																			}
																			Keys.push(["Descrizione Personale üí¨","Vacanza ‚õ± "]);
																		}else{
																			if (myhouse_id == 1){
																				rows[0].life = "?";
																				rows[0].total_life = "?";
																				rows[0].heist_count = "?";
																				rows[0].spy_count = "?";
																				rows[0].money = "?";
																				rows[0].exp = "?";
																				lev = "?";
																				weapon = "?";
																				weapon_desc = "";
																				weapon2 = "?";
																				weapon2_desc = "";
																				weapon3 = "?";
																				weapon3_desc = "";
																				talismano = "?";
																				talismano_desc = "";
																				dragon_name = "?";
																				dragon_level = "?";
																				dragon_claws_n = "?";
																				dragon_damage = "?";
																				dragon_saddle_n = "?";
																				dragon_defense = "?";
																				dragon_critical = "?";
																			}else if (myhouse_id == 2){
																				rows[0].heist_count = "?";
																				rows[0].spy_count = "?";
																				rows[0].money = "?";
																				weapon = "?";
																				weapon_desc = "";
																				weapon2 = "?";
																				weapon2_desc = "";
																				weapon3 = "?";
																				weapon3_desc = "";
																				talismano = "?";
																				talismano_desc = "";
																				dragon_name = "?";
																				dragon_level = "?";
																				dragon_claws_n = "?";
																				dragon_damage = "?";
																				dragon_saddle_n = "?";
																				dragon_arms_n = "?";
																				dragon_defense = "?";
																				dragon_critical = "?";
																			}else if (myhouse_id == 3){
																				rows[0].heist_count = "?";
																				rows[0].spy_count = "?";
																				rows[0].money = "?";
																				talismano = "?";
																				talismano_desc = "";
																				dragon_name = "?";
																				dragon_level = "?";
																				dragon_claws_n = "?";
																				dragon_damage = "?";
																				dragon_saddle_n = "?";
																				dragon_defense = "?";
																				dragon_critical = "?";
																			}else if (myhouse_id == 4){
																				rows[0].heist_count = "?";
																				rows[0].spy_count = "?";
																				rows[0].money = "?";
																			}else if (myhouse_id == 5){
																				rows[0].money = "?";
																			}
																		}
																		Keys.push(["Torna al menu"]);

																		var kb = {
																			parse_mode: "HTML",
																			reply_markup: {
																				resize_keyboard: true,
																				//one_time_keyboard: true,
																				"keyboard": Keys
																			}
																		};

																		bot.sendMessage(message.chat.id, "<b>Giocatore</b> üë§\n" +
																						nickname + team_desc + "\n" +
																						stars + " " + lev + " (" + rows[0].exp + " xp)" + "\n\n" +
																						"üèπ " + class_name + "\n" +
																						"üíé " + rows[0].gems + " " + "üåï " + rows[0].moon_coin + " " + "üóù " + rows[0].mkeys + "\n" +
																						"üí∞ " + formatNumber(rows[0].money) + " ¬ß\n" +
																						"‚ù§Ô∏è " + rows[0].life + " / " + rows[0].total_life + " hp\n" +
																						"üì¶ " + rows[0].craft_count + " (" + rows[0].craft_week + ")\n" +
																						"üèï " + rifugio + "\n" +
																						"\n<b>Equipaggiamento</b> ‚öîÔ∏è\n" +
																						"üó° " + weapon + weapon_desc + "\n" +
																						"ü•ã " + weapon2 + weapon2_desc + "\n" +
																						"üõ° " + weapon3 + weapon3_desc + "\n" +
																						"üìø " + talismano + "\n" +
																						//"üí• " + player_atk + "\n" +

																						(dragon ? "\n<b>" + dragon_name + " (L" + dragon_level + ")</b> üêâ\n" : "") +
																						(dragon ? dragon_claws_n + " (" + dragon_damage + ")\n" : "") +
																						(dragon ? dragon_saddle_n + " (" + dragon_defense + ")\n" : "") +
																						(dragon ? dragon_arms_n + "\n": "") +
																						(dragon ? "Critico (" + dragon_critical + "%)\n" : "") +

																						"\n<b>Altro</b> üí±\n" +
																						referral +
																						"Artefatti: " + artifacts + "\n" +
																						"Abilit√†: " + rows[0].ability + "\n" +
																						"Rango: " + getRankName(rows[0].rank, 0) + " (" + rows[0].rank + ")\n" +
																						(player_description != null ? "\n<i>" + player_description  + "</i>" : ""), kb);
																	});
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
};

bot.onText(/annulla bevanda/i, function(message) {
	connection.query('SELECT id, boost_id, boost_mission FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		if (rows[0].boost_id == 0){
			bot.sendMessage(message.chat.id, "Non hai nessuna bevanda attiva, puoi produrle con il drago o trovarle nelle missioni", back);
			return;
		}

		var cost = 1;
		if (crazyMode == 1){
			cost = 3;
		}

		bot.sendMessage(message.chat.id, "Sei sicuro di voler annullare la bevanda attiva? Ti coster√† " + cost + " üíé", yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					connection.query('SELECT gems FROM player WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						var gems = rows[0].gems;

						if (gems < cost){
							bot.sendMessage(message.chat.id, "Non hai abbastanza gemme!", back);
							return;
						}

						connection.query('UPDATE player SET gems = gems-' + cost + ', boost_id = 0, boost_mission = 0 WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "La bevanda attiva √® stata annullata", back);
						});
					});
				};
			};
		});
	});
});

bot.onText(/descrizione personale/i, function(message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		bot.sendMessage(message.chat.id, "Inserisci la descrizione del tuo personaggio, comparir√† quando altri giocatori ti spiano.\nNon utilizzare insulti, bestemmie, offese verso gli altri player, ecc., massimo 250 caratteri, non andare a capo e non tutti i simboli sono consentiti", back).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text != "Torna al menu"){
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z√†√®√¨√≤√π√©.,\\\?\!\'\@\(\) ]{1,500}$");
					if (reg.test(resp) == false){
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", back);
						return;
					}
					bot.sendMessage(message.chat.id, "Descrizione personaggio impostata:\n\n_" + resp + "_", back);
					connection.query('UPDATE player SET player_description = "' + resp + '" WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
					});
				}
			}
		});
	});
});

bot.onText(/trasmogrificazione/i, function(message) {

	/*
	if (message.from.username != "fenix45"){
		bot.sendMessage(message.chat.id, "A breveeeeeeh", back);
		return;
	}
	*/

	connection.query('SELECT id, exp FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);

		connection.query('SELECT 1 FROM necro_change WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){

				var kb = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Procedi"],["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Per sbloccare questa funzionalit√† ti serviranno questi requisiti:\n" +
								"> 150 Livelli complessivi dei Talenti\n" +
								"> Almeno 4 Artefatti ottenuti\n" +
								"> Livello 1000\n" +
								"> Drago al livello 200\n" +
								"> Set Necro Base (verr√† consumato)\n" +
								"\nIn seguito potrai cambiare il tipo di equipaggiamento Necro.", kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text == "Procedi"){

							connection.query("SELECT SUM(ability_level) As cnt FROM ability WHERE player_id = " + player_id, function(err, rows, fields) {
								if (err) throw err;

								if (rows[0].cnt < 150){
									bot.sendMessage(message.chat.id, "I talenti ottenuti non sono sufficienti", back);
									return;
								}

								connection.query("SELECT COUNT(item_id) As cnt FROM artifacts WHERE player_id = " + player_id, function(err, rows, fields) {
									if (err) throw err;

									if (rows[0].cnt < 4){
										bot.sendMessage(message.chat.id, "Gli artefatti ottenuti non sono sufficienti", back);
										return;
									}

									if (level < 1000){
										bot.sendMessage(message.chat.id, "Il livello del personaggio ottenuto non √® sufficiente", back);
										return;
									}

									connection.query('SELECT * FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Non possiedi il drago", back);
											return;
										}

										if (rows[0].level < 200){
											bot.sendMessage(message.chat.id, "Il livello del drago ottenuto non √® sufficiente", back);
											return;
										}

										connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE item_id = 221 AND player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;

											if (rows[0].cnt < 1){
												bot.sendMessage(message.chat.id, "Non possiedi la Necrolama", back);
												return;
											}

											connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE item_id = 577 AND player_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;

												if (rows[0].cnt < 1){
													bot.sendMessage(message.chat.id, "Non possiedi la Corazza Necro", back);
													return;
												}

												connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE item_id = 600 AND player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													if (rows[0].cnt < 1){
														bot.sendMessage(message.chat.id, "Non possiedi lo Scudo Necro", back);
														return;
													}

													connection.query('DELETE FROM inventory WHERE item_id = 221 AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('DELETE FROM inventory WHERE item_id = 577 AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('DELETE FROM inventory WHERE item_id = 600 AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
														if (err) throw err;
													});

													connection.query('INSERT INTO necro_change (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Hai ottenuto l'accesso alle *Porte degli Dei*, potrai cambiare il tipo di equipaggiamento Necro su richiesta!", back);
													});
												});
											});
										});
									});
								});
							});
						};
					};
				});
				return;
			}

			var kb = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Necrolama"],["Corazza Necro"],["Scudo Necro"],["Torna al menu"]]
				}
			};

			var kb2 = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Rossa"],["Gialla"],["Blu"],["Torna al menu"]]
				}
			};

			bot.sendMessage(message.chat.id, "Scegli l'oggetto dell'Equip Necro da cambiare", kb).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text == "Torna al menu"){
						return;
					}else{
						var set = answer.text;
						bot.sendMessage(message.chat.id, "Con quale tipo di oggetto vuoi scambiarlo?", kb2).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Torna al menu"){
									return;
								}
								var type = answer.text;
								if (set == "Necrolama"){
									connection.query('SELECT weapon_id FROM player WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										if ((rows[0].weapon_id != 638) && (rows[0].weapon_id != 639) && (rows[0].weapon_id != 640)){
											bot.sendMessage(message.chat.id, "Equipaggia una delle 3 lame incantate per poterla scambiare", back);
											return;
										}

										var id = 0;
										if (type == "Rossa"){
											id = 639;
										}else if (type == "Gialla"){
											id = 638;
										}else if (type == "Blu"){
											id = 640;
										}else{
											bot.sendMessage(message.chat.id, "Colore non valido", back);
											return;
										}

										connection.query('UPDATE player SET weapon_id = ' + id + ' WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Necrolama cambiata di tipo, ora √® *" + type + "*!", back);
										});
									});
								}else if (set == "Corazza Necro"){
									connection.query('SELECT weapon2_id FROM player WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										if ((rows[0].weapon2_id != 688) && (rows[0].weapon2_id != 689) && (rows[0].weapon2_id != 690)){
											bot.sendMessage(message.chat.id, "Equipaggia una delle 3 corazze incantate per poterla scambiare", back);
											return;
										}

										var id = 0;
										if (type == "Rossa"){
											id = 688;
										}else if (type == "Gialla"){
											id = 690;
										}else if (type == "Blu"){
											id = 689;
										}else{
											bot.sendMessage(message.chat.id, "Colore non valido", back);
											return;
										}

										connection.query('UPDATE player SET weapon2_id = ' + id + ' WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Corazza Necro cambiata di tipo, ora √® *" + type + "*!", back);
										});
									});
								}else if (set == "Scudo Necro"){
									connection.query('SELECT weapon3_id FROM player WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										if ((rows[0].weapon3_id != 671) && (rows[0].weapon3_id != 672) && (rows[0].weapon3_id != 673)){
											bot.sendMessage(message.chat.id, "Equipaggia uno dei 3 scudi incantati per poterli scambiare", back);
											return;
										}

										var id = 0;
										if (type == "Rossa"){
											id = 672;
										}else if (type == "Gialla"){
											id = 671;
										}else if (type == "Blu"){
											id = 673;
										}else{
											bot.sendMessage(message.chat.id, "Colore non valido", back);
											return;
										}

										connection.query('UPDATE player SET weapon3_id = ' + id + ' WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Scudo Necro cambiato di tipo, ora √® *" + type + "*!", back);
										});
									});
								}
							};
						});
					};
				};
			});
		});
	});
});

bot.onText(/nomina equip/i, function(message) {
	var kb = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Nomina Necrolama"],["Nomina Corazza Necro"],["Nomina Scudo Necro"],["Nomina Rifugio"],["Torna al menu"]]
		}
	};

	bot.sendMessage(message.chat.id, "Quale elemento vuoi rinominare?", kb);
});

bot.onText(/nomina necrolama/i, function(message) {
	connection.query('SELECT id, weapon_id, custom_name FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var weapon_id = rows[0].weapon_id;

		if (rows[0].custom_name != null){
			bot.sendMessage(message.chat.id, "Ripristinare il nome originale della Necrolama?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query('UPDATE player SET custom_name = NULL WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai ripristinato il nome originale della tua Necrolama!", back);
						});
					}
				}
			});
			return;
		}

		if ((weapon_id != 638) && (weapon_id != 639) && (weapon_id != 640)){
			bot.sendMessage(message.chat.id, "Equipaggia una delle 3 Necrolame Incantate per utilizzare questa funzionalit√†", back);
			return;
		}

		bot.sendMessage(message.chat.id, "Inserisci il nome da utilizzare per la tua *Necrolama*, risulter√† poi in questo modo: '_Nomeinserito_+lama' per esempio inserendo '_Banana_', il nome diventer√† '_Bananalama_'.\nNon utilizzare nomi non consoni, divinit√†, insulti, ecc., massimo 10 caratteri e nessun simbolo!", back).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text != "Torna al menu"){
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z]{0,10}$");
					if (reg.test(resp) == false){
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", back);
						return;
					}
					connection.query('SELECT name FROM item WHERE id = ' + weapon_id, function(err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Complimenti! La tua nuova Necrolama si chiama ora *" + resp + rows[0].name.replace("Necro","") + "*!", back);
						connection.query('UPDATE player SET custom_name = "' + resp + '" WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
					});
				}
			}
		});
	});
});

bot.onText(/nomina corazza necro/i, function(message) {
	connection.query('SELECT id, weapon2_id, custom_name2 FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var weapon2_id = rows[0].weapon2_id;

		if (rows[0].custom_name2 != null){
			bot.sendMessage(message.chat.id, "Ripristinare il nome originale della Corazza?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query('UPDATE player SET custom_name2 = NULL WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai ripristinato il nome originale della tua Corazza!", back);
						});
					}
				}
			});
			return;
		}

		if ((weapon2_id != 688) && (weapon2_id != 689) && (weapon2_id != 690)){
			bot.sendMessage(message.chat.id, "Equipaggia una delle 3 Corazze Incantate per utilizzare questa funzionalit√†", back);
			return;
		}

		bot.sendMessage(message.chat.id, "Inserisci il nome da utilizzare per la tua *Corazza*, risulter√† poi in questo modo: 'Corazza _Nomeinserito_' per esempio inserendo '_Banana_', il nome diventer√† 'Corazza _Banana_'.\nNon utilizzare nomi non consoni, divinit√†, insulti, ecc., massimo 10 caratteri e nessun simbolo!", back).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text != "Torna al menu"){
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z]{0,10}$");
					if (reg.test(resp) == false){
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", back);
						return;
					}
					connection.query('SELECT name FROM item WHERE id = ' + weapon2_id, function(err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Complimenti! La tua nuova Corazza si chiama ora *" + rows[0].name.replace("Necro", resp) + "*!", back);
						connection.query('UPDATE player SET custom_name2 = "' + resp + '" WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
					});
				}
			}
		});
	});
});

bot.onText(/nomina scudo necro/i, function(message) {
	connection.query('SELECT id, weapon3_id, custom_name3 FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var weapon3_id = rows[0].weapon3_id;

		if (rows[0].custom_name3 != null){
			bot.sendMessage(message.chat.id, "Ripristinare il nome originale dello Scudo?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query('UPDATE player SET custom_name3 = NULL WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai ripristinato il nome originale del tuo Scudo!", back);
						});
					}
				}
			});
			return;
		}

		if ((weapon3_id != 671) && (weapon3_id != 672) && (weapon3_id != 673)){
			bot.sendMessage(message.chat.id, "Equipaggia uno dei 3 Scudi Incantati per utilizzare questa funzionalit√†", back);
			return;
		}

		bot.sendMessage(message.chat.id, "Inserisci il nome da utilizzare per il tuo *Scudo*, risulter√† poi in questo modo: 'Scudo _Nomeinserito_' per esempio inserendo '_Banana_', il nome diventer√† 'Scudo _Banana_'.\nNon utilizzare nomi non consoni, divinit√†, insulti, ecc., massimo 10 caratteri e nessun simbolo!", back).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text != "Torna al menu"){
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z]{0,10}$");
					if (reg.test(resp) == false){
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", back);
						return;
					}
					connection.query('SELECT name FROM item WHERE id = ' + weapon3_id, function(err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Complimenti! Il tuo nuovo Scudo si chiama ora *" + rows[0].name.replace("Necro", resp) + "*!", back);
						connection.query('UPDATE player SET custom_name3 = "' + resp + '" WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
					});
				}
			}
		});
	});
});

bot.onText(/nomina rifugio/i, function(message) {
	connection.query('SELECT id, house_id, custom_name_h FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var house_id = rows[0].house_id;

		if (rows[0].custom_name_h != null){
			bot.sendMessage(message.chat.id, "Ripristinare il nome originale del Rifugio?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query('UPDATE player SET custom_name_h = NULL WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai ripristinato il nome originale del Rifugio!", back);
						});
					}
				}
			});
			return;
		}

		if (house_id < 5){
			bot.sendMessage(message.chat.id, "Devi possedere il rifugio almeno al livello 5 per utilizzare questa funzionalit√†", back);
			return;
		}

		bot.sendMessage(message.chat.id, "Inserisci il nome da utilizzare per il tuo *Rifugio*, risulter√† poi in questo modo: 'Rifugio _Nomeinserito_' per esempio inserendo '_Banana_', il nome diventer√† 'Rifugio _Banana_'.\nNon utilizzare nomi non consoni, divinit√†, insulti, ecc., massimo 15 caratteri, spazi e nessun simbolo!", back).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text != "Torna al menu"){
					var resp = answer.text;
					var reg = new RegExp("^[a-zA-Z ]{0,30}$");
					if (reg.test(resp) == false){
						bot.sendMessage(message.chat.id, "Nome non valido, riprova", back);
						return;
					}
					connection.query('SELECT name FROM house WHERE grade = ' + house_id, function(err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Complimenti! Il tuo nuovo Rifugio si chiama ora *Rifugio " + resp + "*!", back);
						connection.query('UPDATE player SET custom_name_h = "' + resp + '" WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
					});
				}
			}
		});
	});
});

bot.onText(/resetta guide/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		bot.sendMessage(message.chat.id, "Sei sicuro di voler ripristinare tutte le guide per sezione?", yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					connection.query('DELETE FROM help_message WHERE player_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Le guide sono state resettate!", back);
					});
				}
			}
		});
	});
});

bot.onText(/casa dei giochi/i, function(message) {

	var s = 1;
	if ((message.from.username != "fenix45") && (message.from.username != "Gaius87") && (message.from.username != "lorsalv") && (message.from.username != "Juri_L") && (message.from.username != "CH4R124RD") && (message.from.username != "Raukonar") && (message.from.username != "Shaeryen")){
		s = 0;
	}

	if (s == 0){
		var d = new Date();
		if (d.getDay() != 3){
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)){
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1){
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var myMoney = rows[0].money;

		if (reborn < 2){
			bot.sendMessage(message.chat.id, "Raggiungi almeno la Rinascita 1 per accedere a questa funzione!", back);
			return;
		}

		var game = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Numero Fortunato ü•á","Combo Craft üíé"],["Carte e Pirata üìÉ"],["Torna al menu"]]
			}
		};

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbBack2 = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbRote = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				one_time_keyboard: true,
				"keyboard": [["Gira Rotelle"],["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbNum = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Gioca Numeri"],["Torna al menu"]]
			}
		};

		var kbCard = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Vedi la Carta üìÉ"],["Classifica","Tabella Premi"],["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		connection.query('SELECT id FROM game_house_stats WHERE type = 1 AND player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO game_house_stats (player_id, type) VALUES (' + player_id + ', 1)', function(err, rows, fields) {
					if (err) throw err;
				});
			}
		});

		connection.query('SELECT id FROM game_house_stats WHERE type = 2 AND player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO game_house_stats (player_id, type) VALUES (' + player_id + ', 2)', function(err, rows, fields) {
					if (err) throw err;
				});
			}
		});

		connection.query('SELECT id FROM game_house_stats WHERE type = 3 AND player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO game_house_stats (player_id, type) VALUES (' + player_id + ', 3)', function(err, rows, fields) {
					if (err) throw err;
				});
			}
		});

		bot.sendMessage(message.chat.id, "Benvenuto nella Casa dei Giochi!\nSeleziona il gioco a cui vuoi partecipare", game).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if ((answer.text.indexOf("Numero Fortunato") != -1)){
					bot.sendMessage(message.chat.id, "*Numero Fortunato*\n\nIn questo gioco puoi puntare su uno o pi√π numeri e offrire una certa somma di ¬ß, quando avrai specificato entrambe le informazioni, la _Sfera Tempesta_ verr√† fatta girare nel grosso campo da gioco e si fermer√† su uno dei 36 numeri (37 considerando lo 0, che per√≤ √® sempre perdente). Se almeno una delle tue previsioni sar√† corretta, otterrai una vincita pari a quanto puntato per il numero di previsioni.\n\nAl momento possiedi " + formatNumber(myMoney) + " ¬ß", kbNum);
				}else if ((answer.text.indexOf("Combo Craft") != -1)){
					var price = 1000;
					bot.sendMessage(message.chat.id, "*Combo di Craft*\n\nIn questo gioco puoi tentare la fortuna facendo girare le 3 _Rotelle X_ e tentare di vincere qualcosa. Quando tutte e 3 segneranno lo stesso simbolo, otterrai oggetti o strumenti particolari. Ogni giocata ti coster√† " + price + " ¬ß, procedi?",  kbRote);
				}else if ((answer.text.indexOf("Carte e Pirata") != -1)){
					var price = 500;
					bot.sendMessage(message.chat.id, "*Carte e Pirata*\n\nIn questo gioco dovrai sfidare il Pirata a _Carte Stropicciate_ e indovinare pi√π volte possibili di fila se la carta successiva sar√† pi√π alta o pi√π bassa della precedente. Le carte hanno un valore che varia casualmente tra 1 e 20. Giocare ti coster√† " + price + " ¬ß a carta, il gioco finisce quando non indovini e riceverai un premio partendo dalle 5 vittorie di fila, procedi?", kbCard).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text == "Classifica"){

								var text = "Classifica per vittorie consecutive:\n";
								var c = 1;
								var mypnt = 0;
								var totpnt = 0;
								var mypos = 0;
								var size = 20;

								var banned_join = banlist_id.join();

								connection.query('SELECT nickname, record FROM game_house_stats, player WHERE account_id NOT IN (' + banned_join + ') AND game_house_stats.player_id = player.id AND nickname != "fenix45" AND nickname != "LastSoldier95" AND game_house_stats.type = 3 ORDER BY record DESC', function(err, rows, fields) {
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										if (c < size+1){
											rows[i].total_cnt = formatNumber(rows[i].record);
											text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].record + ")\n";
										}
										if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
											mypnt = rows[i].record;
											mypos = c;
										}
										c++;
									}
									text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + mypnt + ")";

									bot.sendMessage(message.chat.id, text, kbBack2);
								});
							}else if (answer.text == "Tabella Premi"){
								var text = "*Tabella premi*:\n\n" +
									"_(Vittorie consecutive)_\n" +
									"5-6: 5x Scrigno di Legno\n" +
									"7-9: 5x Scrigno di Ferro\n" +
									"10-11: 5x Scrigno Prezioso\n" +
									"12-14: 5x Scrigno di Diamante\n" +
									"15-19: 5x Scrigno Leggendario\n" +
									"20-24: 5x Scrigno Epico\n" +
									"25-29: 15x Scrigno Epico\n" +
									"30-in su: 1x Scrigno Capsula";

								bot.sendMessage(message.chat.id, text, kbBack);
							}
						};
					});
				}
			};
		});
	});
});

bot.onText(/gioca numeri/i, function(message) {

	if (!checkSpam(message)){
		return;
	}

	var s = 1;
	if ((message.from.username != "fenix45") && (message.from.username != "Gaius87") && (message.from.username != "lorsalv") && (message.from.username != "Juri_L") && (message.from.username != "CH4R124RD") && (message.from.username != "Raukonar") && (message.from.username != "Shaeryen")){
		s = 0;
	}

	if (s == 0){
		var d = new Date();
		if (d.getDay() != 3){
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)){
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1){
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var myMoney = rows[0].money;

		if (reborn < 2){
			bot.sendMessage(message.chat.id, "Raggiungi almeno la Rinascita 1 per accedere a questa funzione!", back);
			return;
		}

		var kbChoice = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Tutti i pari","Tutti i dispari"],["Primi 12","Secondi 12","Ultimi 12"],["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbNum = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Gioca Numeri"],["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				one_time_keyboard: true,
				"keyboard": [["Si"],["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, "Seleziona i numeri che vuoi giocare, separati da virgola. Oppure indica i gruppi di numeri attraverso i pulsanti.", kbChoice).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {

				if (answer.text == "Torna alla casa dei giochi"){
					return;
				}

				if (answer.text == "Tutti i pari"){
					answer.text = "2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36";
				}else if (answer.text == "Tutti i dispari"){
					answer.text = "1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35";
				}else if (answer.text == "Primi 12"){
					answer.text = "1,2,3,4,5,6,7,8,9,10,11,12";
				}else if (answer.text == "Secondi 12"){
					answer.text = "13,14,15,16,17,18,19,20,21,22,23,24";
				}else if (answer.text == "Ultimi 12"){
					answer.text = "25,26,27,28,29,30,31,32,33,34,35,36";
				}

				var numbers = answer.text.trim().split(",");
				var len = Object.keys(numbers).length;

				if (len < 1){
					bot.sendMessage(message.chat.id, "Inserisci almeno un numero, riprova", kbNum);
					return;
				}

				if (len > 18){
					bot.sendMessage(message.chat.id, "Troppi numeri, massimo 18, riprova", kbNum);
					return;
				}

				var check = 0;
				var checkn = 0;

				for (var i = 0; i < len; i++) {
					numbers[i] = Math.round(numbers[i]);

					if (isNaN(numbers[i])){
						bot.sendMessage(message.chat.id, "Almeno un numero non √® valido, riprova", kbNum);
						return;
					}
					if ((numbers[i] < 1) || (numbers[i] > 36)){
						bot.sendMessage(message.chat.id, numbers[i] + " non √® valido, deve essere compreso tra 1 e 36", kbNum);
						return;
					}
					checkn = 0;
					for (var j = 0; j < len; j++) {
						if (numbers[i] == numbers[j]){
							checkn++;
						}
						if (checkn >= 2){
							bot.sendMessage(message.chat.id, numbers[i] + " non √® valido, √® gi√† stato inserito", kbNum);
							return;
						}
					}
				}

				connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;

					var max = 10000;
					bot.sendMessage(message.chat.id, "La tua puntata in caso di vittoria sar√† x*" + Math.round(36/len) + "*, ora indica l'ammontare per la tua puntata, massimo " + max + " ¬ß. Possiedi " + formatNumber(rows[0].money) + " ¬ß",  kbBack).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if ((answer.text != "Torna alla casa dei giochi") && (answer.text != "Torna al menu")){
								var money = parseInt(answer.text);

								if (isNaN(money)){
									bot.sendMessage(message.chat.id, "Valore non valido, riprova", kbNum);
									return;
								}

								money = Math.round(money);

								if (money > max){
									bot.sendMessage(message.chat.id, "Il massimo √® " + max + " ¬ß", kbNum);
									return;
								}

								if (money < 1){
									bot.sendMessage(message.chat.id, "Il minimo √® 1 ¬ß", kbNum);
									return;
								}

								connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;

									if (rows[0].money < money){
										bot.sendMessage(message.chat.id, "Non hai cos√¨ tante monete", kbNum);
										return;
									}

									var win = Math.floor(money*Math.round(36/len));

									bot.sendMessage(message.chat.id, "Bene, ecco un riassunto:\nNumeri: " + numbers.join() + "\nImporto: " + formatNumber(money) + " ¬ß\n\nIn caso di vittoria otterrai: " + formatNumber(win) + " ¬ß, procedi?", kbYesNo).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text.toLowerCase() == "si"){
												connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													if (rows[0].money < money){
														bot.sendMessage(message.chat.id, "Non hai monete sufficienti", kbNum);
														return;
													}

													var extracted = Math.round(Math.random()*36);

													bot.sendMessage(message.chat.id, "La sfera viene lanciata sul campo...");
													setTimeout(function() {
														bot.sendMessage(message.chat.id, "Rotola rotola...");
														setTimeout(function() {

															connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;

																if (rows[0].money < money){
																	bot.sendMessage(message.chat.id, "Non hai cos√¨ tante monete", kbNum);
																	return;
																}

																connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;

																	if (numbers.indexOf(extracted) != -1){
																		bot.sendMessage(message.chat.id, "E si ferma sul numero *" + extracted + "*!\n\nHAI VINTO e ottenuto *" + formatNumber(win) + "* ¬ß!", kbNum);

																		connection.query('UPDATE player SET money = money+' + win + ' WHERE id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});

																		connection.query('UPDATE game_house_stats SET win = win+1, pay = pay+ ' + money + ' WHERE player_id = ' + player_id + ' AND type = 1', function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}else{
																		bot.sendMessage(message.chat.id, "E si ferma sul numero *" + extracted + "*!\n\nHAI PERSO!", kbNum);

																		connection.query('UPDATE game_house_stats SET lose = lose+1, pay = pay+ ' + money + ' WHERE player_id = ' + player_id + ' AND type = 1', function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																});
															});
														}, 2000);
													}, 2000);
												});
											}
										};
									});
								});
							};
						};
					});
				});
			};
		});
	});
});

bot.onText(/gira rotelle/i, function(message) {

	if (!checkSpam(message)){
		return;
	}

	var s = 1;
	if ((message.from.username != "fenix45") && (message.from.username != "Gaius87") && (message.from.username != "lorsalv") && (message.from.username != "Juri_L") && (message.from.username != "CH4R124RD") && (message.from.username != "Raukonar") && (message.from.username != "Shaeryen")){
		s = 0;
	}

	if (s == 0){
		var d = new Date();
		if (d.getDay() != 3){
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)){
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna alla casa dei giochi"],["Torna al menu"]]
		}
	};

	var kbRote = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			one_time_keyboard: true,
			"keyboard": [["Gira Rotelle"],["Torna alla casa dei giochi"],["Torna al menu"]]
		}
	};

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1){
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var myMoney = rows[0].money;

		if (reborn < 2){
			bot.sendMessage(message.chat.id, "Raggiungi almeno la Rinascita 1 per accedere a questa funzione!", back);
			return;
		}

		var price = 1000;

		connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (rows[0].money < price){
				bot.sendMessage(message.chat.id, "Non hai monete sufficienti", kbBack);
				return;
			}

			var symArray = ["üåï","üé≤","üìö","üõ°","üçø","üçª","üî©","üç´","üéØ","üí∞"];
			var symLen = symArray.length;
			var sym1 = symArray[Math.floor(Math.random()*symLen)];
			var sym2 = symArray[Math.floor(Math.random()*symLen)];
			var sym3 = symArray[Math.floor(Math.random()*symLen)];

			var sym4 = symArray[Math.floor(Math.random()*symLen)];
			var sym5 = symArray[Math.floor(Math.random()*symLen)];
			var sym6 = symArray[Math.floor(Math.random()*symLen)];

			var sym7 = symArray[Math.floor(Math.random()*symLen)];
			var sym8 = symArray[Math.floor(Math.random()*symLen)];
			var sym9 = symArray[Math.floor(Math.random()*symLen)];


			bot.sendMessage(message.chat.id, "Le rotelle cominciano a roteare...");
			setTimeout(function() {
				bot.sendMessage(message.chat.id, "Lentamente rallentano...");
				setTimeout(function() {

					connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;

						if (rows[0].money < price){
							bot.sendMessage(message.chat.id, "Non hai monete sufficienti", kbBack);
							return;
						}

						connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							var win = 0;
							var result = "";
							if ((sym1 == sym2) && (sym2 == sym3)){
								win += 1;
								result += "Orizzontale prima riga con 3 " + sym1 + "\n";
							}
							if ((sym4 == sym5) && (sym5 == sym6)){
								win += 1;
								result += "Orizzontale seconda riga con 3 " + sym4 + "\n";
							}
							if ((sym7 == sym8) && (sym8 == sym9)){
								win += 1;
								result += "Orizzontale terza riga con 3 " + sym7 + "\n";
							}

							if ((sym1 == sym5) && (sym5 == sym9)){
								win += 1;
								result += "Diagonale da sinistra con 3 " + sym1 + "\n";
							}
							if ((sym3 == sym5) && (sym5 == sym7)){
								win += 1;
								result += "Diagonale da destra con 3 " + sym3 + "\n";
							}

							if ((sym1 == sym4) && (sym4 == sym7)){
								win += 1;
								result += "Verticale prima colonna con 3 " + sym1 + "\n";
							}
							if ((sym2 == sym5) && (sym5 == sym8)){
								win += 1;
								result += "Verticale seconda colonna con 3 " + sym2 + "\n";
							}
							if ((sym3 == sym6) && (sym6 == sym9)){
								win += 1;
								result += "Verticale terza colonna con 3 " + sym3 + "\n";
							}

							if ((sym1 == "üî©") && (sym2 == "üî©") && (sym3 == "üî©")){
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',220)', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Con questa particolare combinazione hai ottenuto una *Capsula Prelevazione*! Che fortuna!", back);
								});
							}

							var txt = "";
							if (win > 0){
								txt = "\n\nHAI VINTO!\nRisultato:\n" + result;

								connection.query('UPDATE game_house_stats SET win = win+1, pay = pay+ ' + price + ' WHERE player_id = ' + player_id + ' AND type = 2', function(err, rows, fields) {
									if (err) throw err;
								});
							}else{
								txt = "\n\nHAI PERSO!";
								connection.query('UPDATE game_house_stats SET lose = lose+1, pay = pay+ ' + price + ' WHERE player_id = ' + player_id + ' AND type = 2', function(err, rows, fields) {
									if (err) throw err;
								});
							}

							bot.sendMessage(message.chat.id, "E si fermano indicando 9 simboli\n\n" + sym1 + " " + sym2 + " " + sym3 + " \n" + sym4 + " " + sym5 + " " + sym6 + " \n" + sym7 + " " + sym8 + " " + sym9 + " " + txt, kbRote);

							if (win > 0){
								var rand = 0;
								for (var i = 0; i < win; i++) {
									rand = Math.random()*100;

									if (rand < 90){
										connection.query('SELECT id, name FROM item WHERE estimate < 100000 AND rarity IN ("C","NC","R","UR","L","E") ORDER BY RAND()', function(err, rows, fields) {
											var name = rows[0].name;
											connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Con questa particolare combinazione hai ottenuto: *" + name + "*!", mark);
											});
										});
									}else if (rand < 99){
										connection.query('SELECT id, name FROM item WHERE rarity = "D" AND name LIKE "Pietra%" ORDER BY RAND()', function(err, rows, fields) {
											var name = rows[0].name;
											connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Con questa particolare combinazione hai ottenuto un: *" + name + "*!", mark);
											});
										});
									}else{
										connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function(err, rows, fields) {
											bot.sendMessage(message.chat.id, "Con questa particolare combinazione hai ottenuto una *Gemma*!", mark);
										});
									}
								}
							}
						});
					});
				}, 2000);
			}, 2000);
		});
	});
});

bot.onText(/vedi la carta/i, function(message) {

	if (!checkSpam(message)){
		return;
	}

	var s = 1;
	if ((message.from.username != "fenix45") && (message.from.username != "Gaius87") && (message.from.username != "lorsalv") && (message.from.username != "Juri_L") && (message.from.username != "CH4R124RD") && (message.from.username != "Raukonar") && (message.from.username != "Shaeryen")){
		s = 0;
	}

	if (s == 0){
		var d = new Date();
		if (d.getDay() != 3){
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
		if ((d.getHours() < 10) || (d.getHours() > 21)){
			bot.sendMessage(message.chat.id, "La Casa dei Giochi √® aperta solo il mercoled√¨, dalle 10:00 alle 22:00", back);
			return;
		}
	}

	connection.query('SELECT account_id, market_ban, holiday, id, reborn, money FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1){
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var myMoney = rows[0].money;

		if (reborn < 2){
			bot.sendMessage(message.chat.id, "Raggiungi almeno la Rinascita 1 per accedere a questa funzione!", back);
			return;
		}

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbChoice2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Pi√π bassa ‚¨áÔ∏è","Pi√π alta ‚¨ÜÔ∏è"],["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		var kbCard = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Vedi la Carta üìÉ"],["Torna alla casa dei giochi"],["Torna al menu"]]
			}
		};

		connection.query('SELECT player_id, streak, card FROM house_game_3 WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var price = 500;
			var streak = 0;
			var card = Math.round(Math.random()*19+1); 
			var record = 0;

			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO house_game_3 (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
					if (err) throw err;
				});
			}else{
				streak = rows[0].streak;
				card = rows[0].card;
			}

			if (myMoney < price){
				bot.sendMessage(message.chat.id, "Non hai monete sufficienti", kbBack);
				return;
			}

			connection.query('SELECT record FROM game_house_stats WHERE type = 3 AND player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0){
					record = rows[0].record;
				}

				connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
					connection.query('UPDATE house_game_3 SET card = ' + card + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Sequenza di vittorie: *" + streak + "*\nIl Pirata tira fuori la carta stropicciata e legge ad alta voce il numero scritto sopra:\n\n*" + card + "*\n\nSecondo te la carta successiva sar√†...", kbChoice2).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {

								var card2 = Math.round(Math.random()*19+1);
								var win = 0;

								if (answer.text.indexOf("Pi√π alta") != -1){
									if (card2 > card){
										win = 1;
									}else if (card2 < card){
										win = 0;
									}else if (card2 == card){
										win = 1
									}
								}else if (answer.text.indexOf("Pi√π bassa") != -1){
									if (card2 < card){
										win = 1;
									}else if (card2 > card){
										win = 0;
									}else if (card2 == card){
										win = 1
									}
								}else{
									return;		
								}

								if (win == 1){
									bot.sendMessage(message.chat.id, "Il Pirata prende l'altra carta e la apre piano piano, al suo interno si legge un numero:\n\n*" + card2 + "*\n\nHAI VINTO!", kbCard);
									connection.query('UPDATE house_game_3 SET card = ' + card2 + ', streak = streak+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
									});
								}else{

									var txt = "\nMa hai vinto solo " + streak  + " turni di fila, non ti meriti nessun premio.";


									var chest_id = 0;
									var qnt = 0;
									var chest_name = "";

									if ((streak >= 5) && (streak <= 6)){
										chest_name = "Scrigno di Legno";
										chest_id = 1;
										qnt = 5;
									}
									if ((streak >= 7) && (streak <= 9)){
										chest_name = "Scrigno di Ferro";
										chest_id = 2;
										qnt = 5;
									}
									if ((streak >= 10) && (streak <= 11)){
										chest_name = "Scrigno Prezioso";
										chest_id = 3;
										qnt = 5;
									}
									if ((streak >= 12) && (streak <= 14)){
										chest_name = "Scrigno di Diamante";
										chest_id = 4;
										qnt = 5;
									}
									if ((streak >= 15) && (streak <= 19)){
										chest_name = "Scrigno Leggendario";
										chest_id = 5;
										qnt = 5;
									}
									if ((streak >= 20) && (streak <= 24)){
										chest_name = "Scrigno Epico";
										chest_id = 6;
										qnt = 5;
									}
									if ((streak >= 25) && (streak <= 29)){
										chest_name = "Scrigno Epico";
										chest_id = 6;
										qnt = 15;
									}
									if (streak >= 30){
										chest_name = "Scrigno Capsula";
										chest_id = 7;
										qnt = 1;
									}

									if (streak > record){
										connection.query('UPDATE game_house_stats SET record = ' + streak + ' WHERE type = 3 AND player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
										});
									}

									var num = (chest_id+1);

									if (chest_id > 0){
										txt = "\nIn base alle " + streak  + " vittorie consecutive hai vinto *" + qnt + "x " + chest_name + "*!";

										connection.query('UPDATE game_house_stats SET win = win+1, pay = pay+ ' + price + ' WHERE player_id = ' + player_id + ' AND type = 3', function(err, rows, fields) {
											if (err) throw err;
										});
									}else{
										connection.query('UPDATE game_house_stats SET lose = lose+1, pay = pay+ ' + price + ' WHERE player_id = ' + player_id + ' AND type = 3', function(err, rows, fields) {
											if (err) throw err;
										});
									}

									for (var i = 0; i < qnt; i++) {
										connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chest_id + ')', function(err, rows, fields) {
											if (err) throw err;
										});
									}

									bot.sendMessage(message.chat.id, "Sequenza di vittorie: *" + streak + "*\nIl Pirata prende un'altra carta e la apre lentamente, al suo interno si legge un numero:\n\n*" + card2 + "*\n\nHAI PERSO!" + txt, kbCard);
									connection.query('DELETE FROM house_game_3 WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
									});
								}
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/vocazioni|vocazione/i, function(message) {

	if (message.text == "Cambia Vocazione"){
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		var player_id = rows[0].id;
		var player_class = rows[0].class;
		var reborn = rows[0].reborn;
		var changed = rows[0].class_changed;

		if (reborn == 1){
			bot.sendMessage(message.chat.id, "Non puoi selezionare una vocazione fino alla Rinascita 1", back);
			return;
		}

		connection.query('SELECT name, description FROM class', function(err, rows, fields) {
			if (err) throw err;

			var iKeys = [];
			var text = "";

			for (var i = 1, len = Object.keys(rows).length; i < len; i++) {
				iKeys.push([rows[i].name]);
				//text += "*" + rows[i].name + "*: " + rows[i].description + "\n";
			}

			iKeys.push(["Torna al menu"]);

			var sClass = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": iKeys
				}
			};

			var bClass = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Torna alle vocazioni"]]
				}
			};

			var backChange = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Cambia Vocazione"],["Torna al menu"]]
				}
			};

			var cClass = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Si"],["Torna alle vocazioni"]]
				}
			};

			if (player_class == 1){
				bot.sendMessage(message.chat.id, "Le *Vocazioni* sono dei percorsi che puoi scegliere e per migliorare una particolare sezione del tuo personaggio.\nSeleziona la vocazione che preferisci per trarne i benefici associati, *ma fai attenzione, non potrai pi√π cambiarla!*\n\n" + 
								"Le caratteristiche di Rinascita 1 si preservano fino alla fine, come anche quelle di Rinascita 3 e 4. Mentre la Rinascita 2 viene rimpiazzata dalla 3.", sClass).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text != "Torna al menu"){
							connection.query('SELECT id, name, description FROM class WHERE name = "' + answer.text + '"', function(err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Vocazione non valida!", bClass);
									return;
								}

								var class_id = rows[0].id;
								var class_name = rows[0].name;
								var description = rows[0].description;

								bot.sendMessage(message.chat.id, "La vocazione " + class_name + " offre i seguenti bonus/malus:\n\n" + description + "\n\nScegli questa vocazione?", cClass).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text.toLowerCase() == "si"){
											bot.sendMessage(message.chat.id, "Sicuro?", cClass).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													if (answer.text.toLowerCase() == "si"){
														connection.query('UPDATE player SET class = ' + class_id + ' WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Hai selezionato la vocazione *" + class_name + "*!", back);
														});
													}
												}
											});
										}
									}
								});
							});
						}
					};
				});
			}else{

				if (player_class == 5){
					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Genera Pozioni","Genera Piuma"],["Cambia Vocazione"],["Torna al menu"]]
						}
					};					
				}

				connection.query('SELECT name, description FROM class WHERE id = ' + player_class, function(err, rows, fields) {
					if (err) throw err;
					if (player_class == 5){
						bot.sendMessage(message.chat.id, "Informazioni sulla vocazione *" + rows[0].name + "*:\n\n" + rows[0].description, kb).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text.toLowerCase() == "genera pozioni"){

									if (reborn < 3){
										bot.sendMessage(message.chat.id, "Non puoi creare pozioni a questo livello di rinascita");
										return;
									}

									var mana = 50;
									var num = 4;
									var pot = "Piccole";
									var potId = 92;
									if (reborn == 4){
										mana = 100;
										pot = "Medie";
										potId = 93;
									}else if (reborn == 5){
										mana = 250;
										pot = "Grandi";
										potId = 94;
										num = 6;
									}

									connection.query('SELECT mana_1 FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										var poss = rows[0].mana_1;

										bot.sendMessage(message.chat.id, "Vuoi consumare " + mana + " Mana Blu per generare " + num + " Pozioni " + pot + "?\n\nNe possiedi " + poss + " unit√†", cClass).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {
												if (answer.text.toLowerCase() == "si"){
													connection.query('SELECT mana_1 FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														if (rows[0].mana_1 < mana){
															bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Blu!", bClass);
															return;
														}
														connection.query('UPDATE event_mana_status SET mana_1 = mana_1-' + mana + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + potId + ')', function(err, rows, fields) {
																if (err) throw err;
															}); 
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + potId + ')', function(err, rows, fields) {
																if (err) throw err;
															}); 
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + potId + ')', function(err, rows, fields) {
																if (err) throw err;
															}); 
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + potId + ')', function(err, rows, fields) {
																if (err) throw err;
															});
															if (reborn == 5){
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + potId + ')', function(err, rows, fields) {
																	if (err) throw err;
																}); 
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + potId + ')', function(err, rows, fields) {
																	if (err) throw err;
																}); 
															}
															bot.sendMessage(message.chat.id, "Hai ottenuto " + num + " Pozioni " + pot + " per " + mana + " Mana Blu!", bClass);
														});
													});
												}
											}
										});
									});
								}else if (answer.text.toLowerCase() == "genera piuma"){
									if (reborn != 5){
										bot.sendMessage(message.chat.id, "Il tuo livello rinascita non √® sufficiente!", bClass);
										return;
									}
									bot.sendMessage(message.chat.id, "Vuoi consumare 250 Mana Blu per generare 3 Piume di Fenice?", cClass).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text.toLowerCase() == "si"){
												connection.query('SELECT mana_1 FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
													if (rows[0].mana_1 < 250){
														bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Blu!", bClass);
														return;
													}
													connection.query('UPDATE event_mana_status SET mana_1 = mana_1-250 WHERE player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',619)', function(err, rows, fields) {
															if (err) throw err;
														}); 
														connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',619)', function(err, rows, fields) {
															if (err) throw err;
														}); 
														connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',619)', function(err, rows, fields) {
															if (err) throw err;
														}); 
														bot.sendMessage(message.chat.id, "Hai ottenuto 3 Piume di Fenice per 250 Mana Blu!", bClass);
													});
												});
											}
										}
									});
								}
							}
						});
					}else{
						bot.sendMessage(message.chat.id, "Informazioni sulla vocazione *" + rows[0].name + "*:\n\n" + rows[0].description, backChange);
					}
				});
			}
		});
	});
});

bot.onText(/cambia vocazione/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		var player_id = rows[0].id;
		var player_class = rows[0].class;
		var reborn = rows[0].reborn;
		var changed = rows[0].class_changed;

		if (reborn == 1){
			bot.sendMessage(message.chat.id, "Non puoi selezionare una vocazione fino alla Rinascita 1", back);
			return;
		}

		var bClass = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna alle vocazioni"]]
			}
		};
		var cClass = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Torna alle vocazioni"]]
			}
		};

		if (changed == 1){
			bot.sendMessage(message.chat.id, "Hai gi√† cambiato la vocazione", bClass);
			return;
		}

		if (player_class == 1){
			bot.sendMessage(message.chat.id, "Puoi cambiare vocazione solo dopo averne scelta una", bClass);
			return;
		}

		var scadenza = new Date(2017, 5, 14);
		var oggi = new Date();

		//		if (oggi > scadenza){
		bot.sendMessage(message.chat.id, "Non √® pi√π possibile cambiare la vocazione, tempo scaduto", bClass);
		return;
		//		}

		bot.sendMessage(message.chat.id, "Sei sicuro di voler modificare la Vocazione? Puoi farlo solamente una volta dal momento in cui sceglierai 'Si', hai tempo fino a Domenica 14/05", cClass).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					connection.query('UPDATE player SET class = 1, class_changed = 1 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Hai resettato la vocazione, ora fai la nuova scelta", bClass);
					});
				}
			}
		});	
	});
});

bot.onText(/statistiche/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var missioni = rows[0].mission_count;
		var imprese = rows[0].achievement_count;
		var dungeon_tot = rows[0].dungeon_count;
		var global_event = rows[0].global_event;

		connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE to_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var ispezioniSubite = rows[0].cnt;

			connection.query('SELECT kill_streak FROM team_player WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				var scalate = 0;
				if (Object.keys(rows).length > 0){
					scalate = rows[0].kill_streak;
				}

				connection.query('SELECT total_cnt FROM merchant_offer WHERE player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;

					var contrabbandiere = 0;
					if (Object.keys(rows).length > 0){
						contrabbandiere = rows[0].total_cnt;
					}

					connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE from_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						var ispezioniEffettuate = rows[0].cnt;
						connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE fail > 0 AND to_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							var ispezioniSubiteVinte = rows[0].cnt;
							connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE fail = 0 AND to_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								var ispezioniSubitePerse = rows[0].cnt;
								connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE fail = 0 AND from_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									var ispezioniEffettuateVinte = rows[0].cnt;
									connection.query('SELECT COUNT(*) As cnt FROM heist_history WHERE fail > 0 AND from_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										var ispezioniEffettuatePerse = rows[0].cnt;
										connection.query('SELECT COUNT(*) As cnt FROM search_history WHERE player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											var ricerche = rows[0].cnt;
											connection.query('SELECT COUNT(*) As cnt FROM market_direct_history WHERE from_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												var vendite = rows[0].cnt;
												connection.query('SELECT COUNT(*) As cnt FROM market_direct_history WHERE to_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
													var acquisti = rows[0].cnt;
													connection.query('SELECT COUNT(*) As cnt FROM market_history WHERE from_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														var scambiOut = rows[0].cnt;
														connection.query('SELECT COUNT(*) As cnt FROM market_history WHERE to_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															var scambiIn = rows[0].cnt;
															connection.query('SELECT COUNT(*) As cnt FROM referral_list WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																var invitati = rows[0].cnt;
																connection.query('SELECT COUNT(*) As cnt FROM inventory WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	var oggetti = rows[0].cnt;
																	connection.query('SELECT COUNT(*) As cnt FROM public_lottery_history WHERE creator_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		var lotterie = rows[0].cnt;
																		connection.query('SELECT COUNT(*) As cnt FROM public_lottery_history WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																			var lotterieVinte = rows[0].cnt;
																			connection.query('SELECT COUNT(*) As cnt FROM ability WHERE player_id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																				var abilita = rows[0].cnt;

																				connection.query("SELECT SUM(ability_level) As cnt FROM ability WHERE player_id = " + player_id, function(err, rows, fields) {
																					if (err) throw err;

																					var talenti = rows[0].cnt

																					var text = 	"*Statistiche giocatore*\n\n" +
																						"*Missioni completate*: " + missioni + "\n" +
																						"*Imprese giornaliere completate*: " + imprese + "\n" +
																						"*Dungeon completati*: " + dungeon_tot + "\n" +
																						"*Ispezioni subite*: " + ispezioniSubite + "\n" +
																						"*Ispezioni subite vinte*: " + ispezioniSubiteVinte + "\n" +
																						"*Ispezioni subite perse*: " + ispezioniSubitePerse + "\n" +
																						"*Ispezioni effettuate vinte*: " + ispezioniEffettuateVinte + "\n" +
																						"*Ispezioni effettuate perse*: " + ispezioniEffettuatePerse + "\n" +
																						"*Ricerche*: " + ricerche + "\n" +
																						"*Acquisti*: " + acquisti + "\n" +
																						"*Vendite*: " + vendite + "\n" +
																						"*Scambi in uscita*: " + scambiOut + "\n" +
																						"*Scambi in entrata*: " + scambiIn + "\n" +
																						"*Utenti invitati*: " + invitati + "\n" +
																						"*Oggetti posseduti*: " + oggetti + "\n" +
																						"*Lotterie*: " + lotterie + "\n" +
																						"*Lotterie vinte*: " + lotterieVinte + "\n" +
																						"*Talenti sbloccati*: " + abilita + "\n" +
																						"*Scalate personali*: " + scalate + "\n" +
																						"*Imprese globali (partecipando attivamente)*: " + global_event + "\n" +
																						"*Offerte contrabbandiere accettate*: " + contrabbandiere + "\n" +
																						"*Livelli Talenti raggiunti*: " + talenti + "\n";

																					bot.sendMessage(message.chat.id, text, back);

																				});
																			});
																		});
																	});
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

function getRankImg(rank){

	var img = "rank/";

	if (rank < rankList[0]){
		img += "rank1.webp";
	}else if (rank < rankList[1]){
		img += "rank2.webp";
	}else if (rank < rankList[2]){
		img += "rank3.webp";
	}else if (rank < rankList[3]){
		img += "rank4.webp";
	}else if (rank < rankList[4]){
		img += "rank5.webp";
	}else if (rank < rankList[5]){
		img += "rank6.webp";
	}else if (rank < rankList[6]){
		img += "rank7.webp";
	}

	return img;
}

function getRankName(rank, opt){

	if (opt == 0){
		var text = "";

		if (rank < rankList[0]){
			text = "Esploratore Novizio";
		}else if (rank < rankList[1]){
			text = "Esploratore Modesto";
		}else if (rank < rankList[2]){
			text = "Esploratore Professionista";
		}else if (rank < rankList[3]){
			text = "Avventuriero Giovane";
		}else if (rank < rankList[4]){
			text = "Avventuriero Forestiero";
		}else if (rank < rankList[5]){
			text = "Avventuriero della Notte";
		}else if (rank < rankList[6]){
			text = "Avventuriero Impavido";
		}

		return text;
	}else if (opt == 1){
		var next = 0;

		for (var i = 0, len = Object.keys(rankList).length; i < len; i++) {
			if (rank < rankList[i]){
				next = rankList[i];
				break;
			}
		}

		return next;
	}
}

function globalAchievement(player_id, value = 1){
	connection.query('SELECT global_eventon, global_cap FROM config', function(err, rows, fields) {
		if (err) throw err;
		if (rows[0].global_eventon == 1){
			var cap = rows[0].global_cap;
			connection.query('SELECT SUM(value) As cnt FROM achievement_global', function(err, rows, fields) {
				if (err) throw err;
				if (rows[0].cnt >= cap){
					connection.query('UPDATE config SET global_eventon = 0', function(err, rows, fields) {
						if (err) throw err;
						console.log("Fine impresa!");
					});
				}else{
					connection.query('INSERT INTO achievement_global (player_id, value) VALUES (' + player_id + ', ' + value + ')', function(err, rows, fields) {
						if (err) throw err;
						console.log("Impresa +" + value);
					});
				}
			});
		}
	});
}

bot.onText(/dungeon/i, function(message) {

	if (message.text.indexOf("velocemente") != -1){
		return;
	}

	var dBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna al dungeon"],["Torna al menu"]]
		}
	};

	var dYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Si"],["Torna al dungeon"]]
		}
	};

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var player_life = rows[0].life;
		var player_total_life = rows[0].total_life;
		var player_ability = rows[0].ability;
		var player_money = rows[0].money;
		var player_rank = rows[0].rank;
		if (player_rank > 500){
			player_rank = 500;
		}
		var player_reborn = rows[0].reborn;
		var player_level = Math.floor(rows[0].exp/10);
		var player_class_id = rows[0].class;
		var player_dungeon_skip = rows[0].dungeon_skip;

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (player_reborn == 1){
			bot.sendMessage(message.chat.id, "Per accedere ai dungeon devi aver raggiunto almeno la Rinascita 1", back);
			return;
		}

		if (player_id != 1){
			if ((player_class_id == 1) && (player_reborn >= 3)){
				bot.sendMessage(message.chat.id, "Raggiunta questa Rinascita la Vocazione √® obbligatoria, la puoi scegliere nella sezione Giocatore > Vocazione", back);
				return;
			}
		}

		if (player_life <= 0){
			bot.sendMessage(message.chat.id, "Non puoi entrare nel dungeon da morto", revive);
			return;
		}
		var dungeon_time = rows[0].dungeon_time;

		var nightText = "";
		var nightMode = 0;
		var now = new Date();
		if (now.getHours() <= 6){
			nightText = "*, attento, di notte i dungeon nascondono pi√π insidie!*";
			nightMode = 1;
		}

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 3', function(err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0){
				/*
				if (crazyMode == 1){
					abBonus = parseInt(rows[0].ability_level)*(rows[0].val/2);
				}else{
				*/
				abBonus = parseInt(rows[0].ability_level)*rows[0].val;
				//}
			}

			connection.query('SELECT * FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0){
					connection.query('SELECT * FROM dungeon_list ORDER BY min_rank', function(err, rows, fields) {
						if (err) throw err;

						var iKeys = [];

						iKeys.push(["Il tuo Rango"]);
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							var num = rows[i].name.match(/\d+/g);
							if (num == null) {
								if (rows[i].name != "Test"){
									iKeys.push([rows[i].name + " (stanze: " + rows[i].rooms + ", punti min: " + rows[i].min_rank + ")"]);
								}
							}
						}

						iKeys.push(["Resetta il Rango"]);
						iKeys.push(["Torna al menu"]);

						var dSelect = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						var rank = getRankName(player_rank, 0);

						bot.sendMessage(message.chat.id,"Benvenuto nella *Sala di Ritrovo degli Esploratori*\nQui puoi controllare i dungeon esistenti ed esplorarli.\n" +
										"Il tuo rango attuale √® _" + rank + "_\n" +
										"Seleziona il dungeon da esplorare" + nightText, dSelect).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {

								if (answer.text == "Torna al menu"){
									return;
								}

								if (answer.text == "Il tuo Rango"){
									var next_rank = 0;
									next_rank = parseInt(getRankName(player_rank, 1));
									bot.sendMessage(message.chat.id, "Rango Attuale: *" + rank + "* (" + player_rank + ")\nAumento Rango a " + next_rank + " punti", dBack);
									bot.sendSticker(message.chat.id, getRankImg(player_rank));
									return;
								}

								if (answer.text == "Resetta il Rango"){
									if (player_reborn < 2){
										bot.sendMessage(message.chat.id, "Per resettare i tuoi punti dungeon, devi aver raggiunto la rinascita 2 ed essere massimo livello 5.", dBack);
										return;
									}
									if (player_level > 5){
										bot.sendMessage(message.chat.id, "Per resettare i tuoi punti dungeon, devi aver raggiunto la rinascita 2 ed essere massimo livello 5.", dBack);
										return;
									}
									bot.sendMessage(message.chat.id, "Sei sicuro di voler resettare i tuoi punti dungeon? Potrai farlo al massimo fino al livello 5", dYesNo).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text.toLowerCase() == "si"){
												connection.query('UPDATE player SET rank = 0 WHERE id = ' + player_id, function (err, rows, fields){
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai resettato i punti dungeon!", dBack);
												});
											}
										}
									});
									return;
								}

								if (dungeon_time != null){
									var d = new Date(dungeon_time);
									var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

									var dVarco = {
										parse_mode: "Markdown",
										reply_markup: {
											resize_keyboard: true,
											//one_time_keyboard: true,
											"keyboard": [["Si"],["Prosegui il dungeon"],["Torna al menu"]]
										}
									};

									bot.sendMessage(message.chat.id, "Puoi tornare nei dungeon alle " + short_date + "\nVuoi utilizzare un Varco Temporale per annullare l'attesa?", dVarco).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text.toLowerCase() == "si"){

												if (crazyMode == 0){
													if (player_dungeon_skip >= 3){
														bot.sendMessage(message.chat.id, "Puoi usare un Varco Temporale solamente 3 volte al giorno", back);
														return;
													}
												}

												connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 645', function(err, rows, fields) {
													if (err) throw err;
													if (Object.keys(rows).length == 0){
														bot.sendMessage(message.chat.id, "Non possiedi un Varco Temporale", back);
														return;
													}
													connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 645 LIMIT 1', function(err, rows, fields) {
														if (err) throw err;
														connection.query('UPDATE player SET dungeon_time = NULL, dungeon_skip = dungeon_skip+1 WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Puoi tornare nel dungeon!", dBack);
															setAchievement(message.chat.id, player_id, 41, 1);
														});
													});
												});
											}
										};
									});
									return;
								}

								if (answer.text != "Torna al menu"){
									var name1 = answer.text.substring(0, answer.text.indexOf("(")-1);
									name1 = name1.replace(/[0-9]/g, '')

									connection.query('SELECT id FROM dungeon_list WHERE name = "' + name1 + '"', function(err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Il dungeon che hai selezionato non esiste", dBack);
											return;
										}

										connection.query('SELECT COUNT(id) As cnt FROM dungeon_list WHERE main = 0 AND name LIKE "' + name1 + '%"', function(err, rows, fields) {
											if (err) throw err;

											var this_istance_number = rows[0].cnt;

											connection.query('SELECT * FROM dungeon_list WHERE name LIKE "' + name1 + '%" AND duration < 5 ORDER BY duration DESC', function(err, rows, fields) {
												if (err) throw err;

												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "Il dungeon che hai selezionato non esiste", dBack);
													return;
												}

												if (player_rank < rows[0].min_rank){
													bot.sendMessage(message.chat.id, "Sali di rango per iniziare questo dungeon", dBack);
													return;
												}

												var this_rank = rows[0].min_rank;
												var this_room = rows[0].rooms;

												var iKeys = [];
												iKeys.push(["Genera Nuova Istanza"]);

												for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
													if (i < 120){
														var num = rows[i].name.match(/\d+/g);
														if (num != null) {
															iKeys.push([rows[i].name + " (" + (5-rows[i].duration) + " posti liberi)"]);
														}
													}
												}
												iKeys.push(["Torna al dungeon"]);
												iKeys.push(["Torna al menu"]);

												var dSelect2 = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": iKeys
													}
												};

												var d = new Date();
												d.setHours(d.getHours() + (parseInt(this_room)+5));
												var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

												connection.query('SELECT DISTINCT(min_rank) FROM `dungeon_list` ORDER BY min_rank', function (err, rows, fields){
													if (err) throw err;

													var last_rank = 0;
													for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
														if (player_rank >= rows[i].min_rank){
															last_rank = rows[i].min_rank;
														}
													}

													if ((last_rank != this_rank) && (message.from.username != "fenix45")){
														bot.sendMessage(message.chat.id, "Il tuo rango √® troppo alto per accedere a questo dungeon", dBack);
														return;
													}

													bot.sendMessage(message.chat.id, "Seleziona una variante di dungeon esistente o creane una nuova, in ogni variante la disposizione delle stanze sar√† diversa e scompariranno alla scadenza dell'istanza.\n" +
																	"Possono essere ancora create *" + (Math.abs(max_istance-this_istance_number)) + "* istanze.", dSelect2).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {
															if ((answer.text != "Torna al menu") && (answer.text != "Torna al dungeon")){

																if (answer.text == "Genera Nuova Istanza"){
																	connection.query('SELECT * FROM dungeon_list WHERE name LIKE "' + name1 + '%" ORDER BY LENGTH(name), name', function(err, rows, fields) {
																		if (err) throw err;

																		if (Object.keys(rows).length == 0){
																			bot.sendMessage(message.chat.id, "Il dungeon che hai selezionato non esiste", dBack);
																			return;
																		}

																		var newname = "";
																		var dungeon_rooms = rows[0].rooms;
																		var dungeon_rank = rows[0].min_rank;
																		var istance = 0;
																		var num = rows[Object.keys(rows).length-1].name.match(/\d+/g);
																		if (num == null) {
																			// Caso in cui esiste solo il dungeon base
																			istance = 1;
																		}else{
																			// Caso in cui √® presente gi√† una stanza numerata

																			var numArray = rows.map(function (item) { return item.name.replace( /^\D+/g, ''); });
																			//console.log(numArray);

																			istance = findMissing(numArray);
																			if (istance == undefined){
																				istance = parseInt(rows[Object.keys(rows).length-1].name.replace( /^\D+/g, ''))+1;
																			}
																			console.log(">> NEWISTANCE: " + istance);
																		}

																		newname = name1 + " " + istance;

																		if (istance == -1){
																			bot.sendMessage(message.chat.id, "Errore creazione istanza, riprova", dBack);
																			return;
																		}

																		if (Object.keys(rows).length > max_istance){
																			bot.sendMessage(message.chat.id, "Questo dungeon ha raggiunto il limite massimo di istanze, gioca prima a quelle gi√† create", dBack);
																			return;
																		}

																		var d = new Date();
																		d.setDate(d.getDate()+7);
																		var long_date2 = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																		connection.query('INSERT INTO dungeon_list (name, rooms, min_rank, finish_date, creator_id) VALUES ("' + newname + '",' + dungeon_rooms + ',' + dungeon_rank + ',"' + long_date2 + '",' + player_id + ')', function (err, rows, fields) {
																			if (err) throw err;
																			connection.query('SELECT * FROM dungeon_list WHERE name = "' + newname + '"', function(err, rows, fields){
																				var dungeon_id = rows[0].id;
																				var dungeon_name = rows[0].name;

																				var duration = rows[0].duration;
																				if (duration >= max_duration){
																					bot.sendMessage(message.chat.id, "Questo dungeon √® gi√† pieno di esploratori, aspetta che qualcuno esca o genera una nuova istanza.", dBack);
																					return;
																				}

																				connection.query('UPDATE dungeon_list SET duration = duration+1 WHERE id = ' + dungeon_id, function (err, rows, fields){
																					if (err) throw err;

																					connection.query('INSERT INTO dungeon_status (player_id, dungeon_id, room_id, finish_time) VALUES (' + player_id + ',' + dungeon_id + ',1,"' + long_date + '")', function(err, rows, fields) {
																						if (err) throw err;
																						bot.sendMessage(message.chat.id, "Sei stato aggiunto alla Lista Avventurieri del dungeon *" + dungeon_name + "*!", dBack);
																					});
																				});
																			});
																		});
																	});
																}else{
																	var name2 = answer.text.substring(0, answer.text.indexOf("(")-1);

																	if (name2.match(/\d+/g) == null){
																		bot.sendMessage(message.chat.id, "Istanza non valida", dBack);
																		return;
																	}

																	connection.query('SELECT * FROM dungeon_list WHERE name = "' + name2 + '"', function(err, rows, fields) {
																		if (err) throw err;

																		if (Object.keys(rows).length == 0){
																			bot.sendMessage(message.chat.id, "Il dungeon che hai selezionato non esiste", dBack);
																			return;
																		}

																		if (player_rank < rows[0].min_rank){
																			bot.sendMessage(message.chat.id, "Sali di rango per iniziare questo dungeon", dBack);
																			return;
																		}

																		var dungeon_id = rows[0].id;
																		var dungeon_name = rows[0].name;

																		var duration = rows[0].duration;
																		var creator_id = rows[0].creator_id;
																		var creation = rows[0].creation_date;
																		var finish = rows[0].finish_date;

																		var long_date_creation = toDate("it", creation);
																		var long_date_finish = toDate("it", finish);

																		var confDg = {
																			parse_mode: "HTML",
																			reply_markup: {
																				resize_keyboard: true,
																				//one_time_keyboard: true,
																				"keyboard": [["Si"],["Torna al dungeon"]]
																			}
																		};

																		connection.query('SELECT nickname, room_id FROM dungeon_status S, dungeon_list L, player P WHERE L.id = ' + dungeon_id + ' AND L.id = S.dungeon_id AND S.player_id = P.id', function(err, rows, fields) {
																			if (err) throw err;

																			var playerlist = "";
																			if (Object.keys(rows).length > 0){
																				playerlist = "\n";
																				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																					playerlist += "> " + rows[i].nickname + " (stanza " + rows[i].room_id + ")\n";
																				};
																				playerlist += "\n";
																			};

																			connection.query('SELECT nickname FROM player WHERE id = ' + creator_id, function(err, rows, fields) {
																				if (err) throw err;

																				var creator_name = "?";
																				if (Object.keys(rows).length > 0){
																					creator_name = rows[0].nickname;
																				}

																				bot.sendMessage(message.chat.id, "<i>" + name2 + "</i>\n<b>Data creazione</b>: " + long_date_creation + "\n<b>Creatore dell'istanza</b>: " + creator_name +
																								"\n<b>Data crollo</b>: " + long_date_finish + "\n<b>Esploratori al suo interno</b>: " + duration + "/" + max_duration + "\n" + 
																								playerlist + "Continuare?", confDg).then(function() {
																					answerCallbacks[message.chat.id] = function(answer) {
																						if (answer.text.toLowerCase() == "si"){
																							connection.query('SELECT duration FROM dungeon_list WHERE name = "' + name2 + '"', function(err, rows, fields) {
																								if (err) throw err;
																								if ((rows[0].duration >= max_duration) || (duration < 0)){
																									bot.sendMessage(message.chat.id, "Questo dungeon √® gi√† pieno di esploratori, aspetta che qualcuno esca o genera una nuova istanza.", dBack);
																									return;
																								}

																								connection.query('UPDATE dungeon_list SET duration = duration+1 WHERE id = ' + dungeon_id, function (err, rows, fields){
																									if (err) throw err;
																									connection.query('INSERT INTO dungeon_status (player_id, dungeon_id, room_id, finish_time) VALUES (' + player_id + ',' + dungeon_id + ',1,"' + long_date + '")', function(err, rows, fields) {
																										if (err) throw err;
																										bot.sendMessage(message.chat.id, "Sei stato aggiunto alla Lista Avventurieri del dungeon *" + dungeon_name + "*!", dBack);
																										setAchievement(message.chat.id, player_id, 27, 1);
																									});
																								});
																							});
																						};
																					};
																				});
																			});
																		});
																	});
																};
															};
														};
													});
												});
											});
										});
									});
								};
							};
						});
					});
				}else{
					if (dungeon_time != null){
						var d = new Date(dungeon_time);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

						var dVarco = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Si"],["Prosegui il dungeon"],["Torna al menu"]]
							}
						};

						bot.sendMessage(message.chat.id, "Puoi tornare nei dungeon alle " + short_date + "\nVuoi utilizzare un Varco Temporale per annullare l'attesa?", dVarco).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text.toLowerCase() == "si"){

									if (crazyMode == 0){
										if (player_dungeon_skip >= 3){
											bot.sendMessage(message.chat.id, "Puoi usare un Varco Temporale solamente 3 volte al giorno", back);
											return;
										}
									}

									connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 645', function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Non possiedi un Varco Temporale", back);
											return;
										}
										connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 645 LIMIT 1', function(err, rows, fields) {
											connection.query('UPDATE player SET dungeon_time = NULL, dungeon_skip = dungeon_skip+1 WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Puoi tornare nel dungeon!", dBack);
												setAchievement(message.chat.id, player_id, 41, 1);
											});
										});
									});
								}
							};
						});
						return;
					}

					var dNav = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["‚ò†Ô∏è","‚¨ÜÔ∏è","üîë"],["‚¨ÖÔ∏è","‚öí","‚û°Ô∏è"],["Scappa","Torna al menu"]]
						}
					};

					var dNext = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Prosegui il dungeon"],["Torna al menu"]]
						}
					};

					var dNext2 = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Prosegui"],["Torna al menu"]]
						}
					};

					var dStart = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Entra nel dungeon"],["Torna al menu"]]
						}
					};

					var dBattle = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Attacca","Scappa"],["Torna al menu"]]
						}
					};

					var dChest = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Prendi"],["Torna al menu"]]
						}
					};

					var dPeople = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Aiuta","Ignora"],["Torna al menu"]]
						}
					};

					var dPotions = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Segui la Vecchia","Ignora"],["Torna al menu"]]
						}
					};

					var dButtons = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["1","2","3"],["4","5","6"],["Scappa"],["Torna al menu"]]
						}
					};

					var dKeys = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Tipo 1: Scorciatoia"],["Tipo 2: Rivelazione"],["Torna al dungeon"]]
						}
					};

					var dungeon_id = parseInt(rows[0].dungeon_id);
					var room_id = parseInt(rows[0].room_id);
					var monster_id = rows[0].monster_id;
					var last_dir = rows[0].last_dir;
					var room_time = new Date(rows[0].room_time);
					var param = rows[0].param;
					var timecheck = rows[0].timevar;
					var finish_time = new Date(rows[0].finish_time);

					if (rows[0].room_time != null){
						var now = new Date();
						var min = Math.round(((room_time - now)/1000)/60);
						if (min >= 0){
							if (min > 0){
								bot.sendMessage(message.chat.id, "Sei impegnato nel dungeon ancora " + min + " minuti", dNext);
							}else{
								bot.sendMessage(message.chat.id, "Sei impegnato nel dungeon ancora per qualche secondo", dNext);
							}
							return;
						}else{
							connection.query('UPDATE dungeon_status SET room_time = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
							});
							globalAchievement(player_id, 1);
						}
					}

					connection.query('UPDATE `player` SET magic_to = 2, dragon_to = 2 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
					});

					var text = "";

					connection.query('SELECT * FROM dungeon_rooms WHERE dungeon_id = ' + dungeon_id, function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0){
							connection.query('SELECT * FROM dungeon_list WHERE id = ' + dungeon_id, function(err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0){
									connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Il dungeon corrispondente non esiste pi√π, selezionane un altro.", back);
									});
									return;
								}

								bot.sendMessage(message.chat.id, "Il dungeon √® in costruzione, attendi.");

								var rooms = parseInt(rows[0].rooms);
								var id = rows[0].id;

								//	Mostro: > 10
								//	Scrigno: 1
								//	Monete: 2
								//	Trappola: 3
								//	Viandante: 4
								//	Trasporto: 5
								//	Persone in pericolo: 6
								//	Vecchia strega: 7
								//	Elementale: 8
								//	Divisa in due: 9
								//	Spada o bottino: 10
								//	Fontana di Mana: 0
								//  Fessura nel muro: -1
								//  Ascia Gigante: -2
								//	Gabbia con parola: -3
								//	Predone scambio: -4
								//	Meditazione: -5
								//	Desideri: -6
								//	Drago di TheLast: -7

								var arr = [];
								var p1 = Math.round((rooms*3)/100*60);
								var rand = 0;
								var limitS = 0; //Limitazione spawn spade

								console.log("Generazione nuovo dungeon con " + rooms + " stanze...");

								for (var i = 0; i < (rooms*3); i++) {
									if (i < p1){
										rand = Math.round(Math.random()*10+(rooms+1)); //per evitare che venga generato 10, cio√® un errore dove non trova il mostro
										arr.push([rand]);
									}else{
										rand = Math.round(Math.random()*21-11);		//-11 a +10
										arr.push([rand]);
									}
								}

								arr = shuffle(arr);

								var arr1 = arr.slice(0, rooms);
								var arr2 = arr.slice(rooms, rooms*2);
								var arr3 = arr.slice(rooms*2, rooms*3);

								for (var i = 0; i < rooms; i++) {
									top = arr1[i];
									right = arr2[i];
									left = arr3[i];
									connection.query('INSERT INTO dungeon_rooms (room_id, dungeon_id, player_id, dir_top, dir_right, dir_left) VALUES (' + (i+1) + ',' + dungeon_id + ',' + player_id + ',' + top + ',' + right + ',' + left + ')', function(err, rows, fields) {
										if (err) throw err;
									});
									if ((top == 4) || (right == 4) || (left == 4)){
										connection.query('SELECT id, value, estimate FROM item WHERE craftable = 0 AND rarity NOT IN ("UE","A","H","S","D","U","IN") ORDER BY RAND() LIMIT 3', function (err, rows, fields) {
											if (err) throw err;

											var item1 = rows[0].id;
											var item2 = rows[1].id;
											var item3 = rows[2].id;

											var est1 = parseInt(rows[0].estimate);
											var est2 = parseInt(rows[1].estimate);
											var est3 = parseInt(rows[2].estimate);

											var price1 = Math.round(Math.random()*(est1*0.1)+(est1));
											var price2 = Math.round(Math.random()*(est2*0.1)+(est2));
											var price3 = Math.round(Math.random()*(est3*0.1)+(est3));

											connection.query('INSERT INTO dungeon_market (room_id, dungeon_id, item_1, item_2, item_3, price_1, price_2, price_3) ' +
															 'VALUES (' + (this.i+1) + ',' + dungeon_id + ',' + item1 + ',' + item2 + ',' + item3 + ',' + price1 + ',' + price2 + ',' + price3 + ')', function(err, rows, fields) {
												if (err) throw err;
											});
										}.bind( {i: i} ));
									}
									if ((top == -4) || (right == -4) || (left == -4)){
										connection.query('SELECT id FROM item WHERE craftable = 0 AND rarity NOT IN ("UE","A","H","S","D","U","IN") ORDER BY RAND() LIMIT 2', function (err, rows, fields) {
											if (err) throw err;

											var item1 = rows[0].id;
											var item2 = rows[1].id;

											connection.query('INSERT INTO dungeon_trade (room_id, dungeon_id, item_1, item_2) ' +
															 'VALUES (' + (this.i+1) + ',' + dungeon_id + ',' + item1 + ',' + item2 + ')', function(err, rows, fields) {
												if (err) throw err;
											});
										}.bind( {i: i} ));
									}
									if ((top == -11) || (right == -11) || (left == -11)){
										connection.query('SELECT COUNT(id) As cnt FROM dungeon_well WHERE dungeon_id = ' + dungeon_id, function (err, rows, fields) {
											if (err) throw err;

											if (rows[0].cnt == 0){
												var rand = Math.round(Math.random()*(player_rank*50))+(player_rank*50);
												connection.query('INSERT INTO dungeon_well (dungeon_id, amount) VALUES (' + dungeon_id + ',' + rand + ')', function(err, rows, fields) {
													if (err) throw err;
												});
											};
										});
									}
								}

								console.log("Generazione completata, id " + (id+1));

								connection.query('UPDATE dungeon_status SET room_id = 1 WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Il dungeon √® stato creato, ora inizia l'esplorazione!", dStart);
								});
							});
						}else{

							connection.query('SELECT rooms FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields) {
								if (err) throw err;

								var room_num = rows[0].rooms;

								connection.query('SELECT * FROM dungeon_rooms WHERE room_id = ' + room_id + ' AND dungeon_id = ' + dungeon_id, function(err, rows, fields) {
									if (err) throw err;

									if (monster_id != 0){
										bot.sendMessage(message.chat.id, "Stai combattendo contro un mostro!\nNon puoi proseguire senza averlo prima sconfitto.", dBattle).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {
												if (answer.text == "Scappa"){
													bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {
															if (answer.text.toLowerCase() == "si"){

																var rand = Math.random()*100;
																if (rand < 20){
																	var dmg = Math.round(player_total_life*20/100);
																}else{
																	var dmg = Math.round(player_total_life*30/100);
																}

																var exText = "";

																connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});

																if (player_life - dmg <= 0){
																	exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																	var d = new Date();
																	d.setHours(d.getHours() + wait_dungeon_long);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	if (player_rank > 0){
																		connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																}else{
																	exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																	var d = new Date();
																	d.setHours(d.getHours() + (wait_dungeon-1));
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});							
																bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + dmg + " hp, " + exText, back);

															}
														}
													});
												}
											};
										});
										return;
									}

									var now = new Date();
									var min_tot = Math.round(((finish_time - now)/1000)/60);
									var ore = Math.floor(min_tot/60);
									var min = Math.round(min_tot%60);

									min = ('0' + min).slice(-2);

									text = "Stanza " + room_id + "/" + room_num + " (" + ore + ":" + min + " rimanenti)\n";

									if (room_id == 1){
										text += "Decidi di addentrarti nel dungeon. Nell'oscurit√† intravedi una strada e vari corridoi che si perdono a vista d'occhio. Quale direzione scegli di intraprendere?";
									}else{
										var dText = 	[
											"L'atmosfera cupa e misteriosa ti inquieta, hai davanti a te 3 strade, dove prosegui?",
											"Una stanza di fronte a te mostra 3 porte in 3 diverse direzioni, dove decidi di proseguire?",
											"Indeciso sulla direzione, rimani a riflettere sperando che sia il miglior percorso, quale strada scegli?",
											"Di fronte a te diverse strade che portano in direzioni diverse, dove ti dirigi?"
										];
										var len = parseInt(Object.keys(dText).length)-1;
										var index = Math.round(Math.random()*len);

										text += dText[index];
									}

									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Sei arrivato alla stanza finale! Per uscire devi sconfiggere la Bestia del Dungeon.");

										connection.query('SELECT * FROM dungeon_monsters WHERE level = ' + (parseInt(room_num)+5) + ' ORDER BY RAND()', function (err, rows, fields){
											if (err) throw err;
											if (Object.keys(rows).length == 0){
												bot.sendMessage(message.chat.id, "Errore", back);
												return;
											}
											connection.query('UPDATE dungeon_status SET boss_battle = 1, monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ' WHERE player_id = ' + player_id, function (err, rows, fields){
												if (err) throw err;
											});

											setTimeout(function() {
												bot.sendMessage(message.chat.id, "Incontri una Bestia *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo e completare il dungeon, oppure scappare.", dBattle).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Scappa"){
															bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if (answer.text.toLowerCase() == "si"){

																		var rand = Math.random()*100;
																		if (rand < 50){
																			var dmg = Math.round(player_total_life*20/100);
																		}else{
																			var dmg = Math.round(player_total_life*30/100);
																		}

																		var exText = "";

																		connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});

																		if (player_life - dmg <= 0){
																			exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																			var d = new Date();
																			d.setHours(d.getHours() + wait_dungeon_long);
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																			connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																				if (err) throw err;
																			});
																			if (player_rank > 0){
																				connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																					if (err) throw err;
																				});
																			}
																		}else{
																			exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																			var d = new Date();
																			d.setHours(d.getHours() + (wait_dungeon-1));
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																			connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});
																		}
																		connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																		bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + dmg + " hp, " + exText, back);
																	}
																}
															});
														}
													};
												});
											}, 1000);
										});
										return;
									}

									var dir_top = parseInt(rows[0].dir_top);
									var dir_right = parseInt(rows[0].dir_right);
									var dir_left = parseInt(rows[0].dir_left);

									var dir = null;

									if (last_dir != null){
										text = "Sei tornato esattamente nel punto in cui eri prima. Ora prosegui.";
										dNav = dNext2;
									}

									bot.sendMessage(message.chat.id, text, dNav).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text == "‚¨ÜÔ∏è"){
												dir = dir_top;
											}else if (answer.text == "‚¨ÖÔ∏è"){
												dir = dir_left;
											}else if (answer.text == "‚û°Ô∏è"){
												dir = dir_right;
											}else if (answer.text == "üîë"){
												bot.sendMessage(message.chat.id, "Puoi utilizzare le chiavi per sfruttare diverse funzionalit√†", dKeys).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Tipo 1: Scorciatoia"){
															bot.sendMessage(message.chat.id, "Puoi prendere una scorciatoia utilizzando una Chiave Tipo 1, procedi?", dYesNo).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if (answer.text.toLowerCase() == "si"){
																		connection.query('SELECT id FROM inventory WHERE item_id = 604 AND player_id = ' + player_id, function(err, rows, fields){
																			if (err) throw err;
																			if (Object.keys(rows).length == 0){
																				bot.sendMessage(message.chat.id, "Non hai abbastanza Chiavi Tipo 1", dBack);
																			}else{
																				connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 604 LIMIT 1', function(err, rows, fields){
																					if (err) throw err;
																					connection.query('UPDATE dungeon_status SET room_id = room_id+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																						if (err) throw err;
																						bot.sendMessage(message.chat.id, "Hai preso una scorciatoia!", dBack);
																					});				
																				});
																			}
																		});
																	}
																}
															});
														}else if (answer.text == "Tipo 2: Rivelazione"){
															bot.sendMessage(message.chat.id, "Puoi rivelare le stanze utilizzando una Chiave Tipo 2, procedi?", dYesNo).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if (answer.text.toLowerCase() == "si"){
																		connection.query('SELECT id FROM inventory WHERE item_id = 605 AND player_id = ' + player_id, function(err, rows, fields){
																			if (err) throw err;
																			if (Object.keys(rows).length == 0){
																				bot.sendMessage(message.chat.id, "Non hai abbastanza Chiavi Tipo 2", dBack);
																			}else{
																				connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 605 LIMIT 1', function(err, rows, fields){
																					if (err) throw err;
																					var text = "Scelta stanza successiva:\n";
																					var i = 0;
																					var d = 0;
																					var t = "";

																					while (i < 3){
																						if (i == 0){
																							d = dir_top;
																							t = "Avanti";
																						}else if (i == 1){
																							d = dir_right;
																							t = "Destra";
																						}else if (i == 2){
																							d = dir_left;
																							t = "Sinistra";
																						}
																						text += "*" + t + ":* " + dungeonToDesc(d) + "\n";
																						i++;
																					}

																					bot.sendMessage(message.chat.id, text, dBack);
																				});
																			}
																		});
																	}
																}
															});
														}
													};
												});
												return;
											}else if (answer.text == "Scappa"){
												bot.sendMessage(message.chat.id, "Sicuro di voler uscire dal dungeon? Se possiedi un Kit Fuga lo consumerai e non dovrai attendere prima di rientrare. In ogni caso perderai 1 punto rango.", dYesNo).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text.toLowerCase() == "si"){
															connection.query('SELECT * FROM inventory WHERE item_id = 616 AND player_id = ' + player_id, function (err, rows, fields){
																if (err) throw err;
																var extra = "";
																if (Object.keys(rows).length > 0){
																	connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 616 LIMIT 1', function (err, rows, fields) {
																		if (err) throw err;
																	});
																	extra = " scappando con un Kit Fuga!";
																}else{
																	var d = new Date();
																	d.setHours(d.getHours() + wait_dungeon_long);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																}
																if (player_rank > 0){
																	connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
																connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai deciso di rinunciare al dungeon" + extra, back);
																});
															});
														}
													}
												});
												return;
											}else if (answer.text == "‚ò†Ô∏è"){
												connection.query('SELECT name, COUNT(name) As num FROM item, inventory WHERE item.name LIKE "Pass%" AND inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' GROUP BY item.name', function (err, rows, fields){
													if (err) throw err;

													if (Object.keys(rows).length == 0){
														bot.sendMessage(message.chat.id, "Non possiedi nessun pass.", dBack);
														return;
													}

													var iKeys = [];
													for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
														iKeys.push([rows[i].name + " (" + rows[i].num + ")"]);
													}
													iKeys.push(["Torna al dungeon"]);

													var dPass = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": iKeys
														}
													};

													bot.sendMessage(message.chat.id, "Puoi utilizzare un *Pass* per chiedere aiuto ad un tuo compagno di team (di pari rinascita) e farlo entrare nel dungeon al posto tuo: il Pass *Bronzo* ti permette di chiedere aiuto ad un compagno con Rinascita pari alla tua, il Pass *Argento* ad un compagno con 1 rinascita di differenza, mentre il Pass *Oro* con 2 rinascite di differenza", dPass).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {

															if (answer.text != "Torna al dungeon"){
																var passName = answer.text.substring(0, answer.text.indexOf("(")-1);

																connection.query('SELECT name, item.id FROM item, inventory WHERE item.name = "' + passName + '" AND inventory.item_id = item.id AND inventory.player_id = ' + player_id, function (err, rows, fields){
																	if (err) throw err;
																	if (Object.keys(rows).length == 0){
																		bot.sendMessage(message.chat.id, "Non possiedi il pass selezionato.", dBack);
																		return;
																	}else{

																		var passId = rows[0].id;

																		if ((passId != 608) && (passId != 609) && (passId != 610)){
																			bot.sendMessage(message.chat.id, "Pass non valido", dBack);
																			return;
																		}

																		connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function (err, rows, fields){
																			if (err) throw err;
																			var team_id = rows[0].team_id;
																			if (Object.keys(rows).length == 0){
																				bot.sendMessage(message.chat.id, "Devi essere in un team per utilizzare questa funzionalit√†.", dBack);
																				return;
																			}else{
																				connection.query('SELECT nickname FROM team_player, player WHERE player.id = team_player.player_id AND team_id = ' + rows[0].team_id + ' AND player_id != ' + player_id, function (err, rows, fields){
																					if (err) throw err;
																					if (Object.keys(rows).length == 0){
																						bot.sendMessage(message.chat.id, "Nessun compagno di team disponibile.", dBack);
																						return;
																					}else{
																						var iKeys2 = [];
																						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																							iKeys2.push([rows[i].nickname]);
																						}
																						iKeys2.push(["Torna al dungeon"]);

																						var dTeam = {
																							parse_mode: "Markdown",
																							reply_markup: {
																								resize_keyboard: true,
																								//one_time_keyboard: true,
																								"keyboard": iKeys2
																							}
																						};

																						bot.sendMessage(message.chat.id, "Seleziona il compagno di team con cui scambiarti, ricorda che questo utente non deve essere in un dungeon.", dTeam).then(function() {
																							answerCallbacks[message.chat.id] = function(answer) {
																								connection.query('SELECT nickname, rank, dungeon_time, player.reborn, player.id, player.chat_id FROM team_player, player WHERE player.nickname = "' + answer.text + '" AND player.id = team_player.player_id AND team_id = ' + team_id + ' AND player_id != ' + player_id, function (err, rows, fields){
																									if (err) throw err;
																									if (Object.keys(rows).length == 0){
																										bot.sendMessage(message.chat.id, "Utente non valido.", dBack);
																										return;
																									}else{
																										var new_playerid = rows[0].id;
																										var chat_id = rows[0].chat_id;
																										var pass_reborn = rows[0].reborn;
																										var pass_rank = rows[0].rank;

																										if (passId == 608){
																											if (player_reborn != pass_reborn){
																												bot.sendMessage(message.chat.id, "Puoi usare questo pass solo verso utenti con rinascita pari alla tua", dBack);
																												return;
																											}
																										}else if (passId == 609){
																											if (pass_reborn-player_reborn > 1){
																												bot.sendMessage(message.chat.id, "Puoi usare questo pass solo verso utenti con rinascita pi√π alta di 1 rispetto alla tua, o uguale", dBack);
																												return;
																											}
																										}else if (passId == 610){
																											if (pass_reborn-player_reborn > 2){
																												bot.sendMessage(message.chat.id, "Puoi usare questo pass solo verso utenti con rinascita pi√π alta di 2 rispetto alla tua, pi√π alta di 1, o uguale", dBack);
																												return;
																											}
																										}

																										/*
																										if (player_rank < pass_rank){
																											bot.sendMessage(message.chat.id, "Puoi usare il pass solo verso utenti con rango pari o inferiore", dBack);
																											return;	
																										}
																										*/

																										if (rows[0].dungeon_time != null){
																											bot.sendMessage(message.chat.id, "L'utente √® in attesa dungeon", dBack);
																											return;
																										}

																										connection.query('SELECT name, item.id FROM item, inventory WHERE item.name = "' + passName + '" AND inventory.item_id = item.id AND inventory.player_id = ' + player_id, function (err, rows, fields){
																											if (err) throw err;
																											if (Object.keys(rows).length == 0){
																												bot.sendMessage(message.chat.id, "Non possiedi il pass selezionato.", dBack);
																												return;
																											}

																											connection.query('SELECT id FROM dungeon_status WHERE player_id = ' + new_playerid, function (err, rows, fields) {
																												if (err) throw err;
																												if (Object.keys(rows).length == 0){
																													connection.query('DELETE FROM inventory WHERE item_id = ' + passId + ' AND player_id = ' + player_id + ' LIMIT 1', function (err, rows, fields){
																														if (err) throw err;
																													});
																													connection.query('UPDATE dungeon_status SET pass = ' + player_id + ', player_id = ' + new_playerid + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																														if (err) throw err;

																														var d = new Date();
																														d.setHours(d.getHours() + wait_dungeon);
																														var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																														connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																															if (err) throw err;
																															bot.sendMessage(message.chat.id, "Hai completato lo scambio con il compagno di team!", back);
																															bot.sendMessage(chat_id, message.from.username.replace(new RegExp("_", "g"), " ") + " ha richiesto lo scambio con te nel dungeon!", dBack);
																															setAchievement(message.chat.id, player_id, 46, 1);
																														});
																													});
																												}else{
																													bot.sendMessage(message.chat.id, "L'utente selezionato √® attualmente in un dungeon", dBack);
																												}
																											});
																										});
																									}
																								});
																							};
																						});
																					}
																				});
																			}
																		});
																	}
																});
															}
														};
													});
												});
												return;
											}else if (answer.text == "Prosegui"){
												//Salta sotto
											}else if (last_dir == null){
												return;
											}

											if (last_dir != null){
												dir = last_dir;
											}

											var d = new Date();
											var sec = wait_room;

											if (abBonus > 0){
												sec -= abBonus;
											}
											if ((player_class_id == 3) && (player_reborn == 3)){
												sec = sec-120;
											}
											if ((player_class_id == 9) && (player_reborn > 1)){
												sec = sec-120;
											}
											if ((player_class_id == 9) && (player_reborn == 5)){
												sec = sec-180;
											}
											if ((player_class_id == 3) && (player_reborn >= 4)){
												sec = sec-300;
											}
											if (crazyMode == 1){
												sec = sec-120;
											}
											d.setSeconds(d.getSeconds() + sec);

											var room_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
											var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

											connection.query('UPDATE dungeon_status SET last_dir = ' + dir + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
											});

											if (dir > 10){
												var monsterLev = dir-10;

												connection.query('SELECT id, min_rank FROM dungeon_list WHERE id = ' + dungeon_id, function (err, rows, fields){
													if (err) throw err;

													var min_rank = rows[0].min_rank;

													connection.query('SELECT id, name, min_rank FROM dungeon_list WHERE min_rank > ' + min_rank + ' ORDER BY min_rank ASC LIMIT 1', function (err, rows, fields){
														if (err) throw err;

														var max_rank = 0;
														if (Object.keys(rows).length == 0){
															max_rank = 250;		//Controllare
														}else{
															max_rank = rows[0].min_rank;
														}

														var startrank = 50;
														var extra = "";
														if (player_rank >= startrank){
															var perc = (player_rank-min_rank)*(50/(max_rank-min_rank));
															var rand = Math.random()*100;
															if (perc >= rand){
																var monster_boost = Math.round(Math.random()*7+3);
																monsterLev += monster_boost;
																extra = "L'aria si fa pi√π pesante verso la prossima stanza. ";
															}
														}

														if (nightMode == 1){
															monsterLev += 5;
															//console.log("MonsterLev: " + monsterLev);
														}

														connection.query('SELECT * FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields){
															if (err) throw err;
															if (Object.keys(rows).length == 0){
																bot.sendMessage(message.chat.id, "Errore selezione mostro: " + monsterLev, back);
																return;
															}
															connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields){
																if (err) throw err;
															});
															bot.sendMessage(message.chat.id, extra + "Incontri un *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if (answer.text == "Scappa"){
																		bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function() {
																			answerCallbacks[message.chat.id] = function(answer) {
																				if (answer.text.toLowerCase() == "si"){

																					var rand = Math.random()*100;
																					if (rand < 50){
																						var dmg = Math.round(player_total_life*20/100);
																					}else{
																						var dmg = Math.round(player_total_life*30/100);
																					}

																					var exText = "";

																					connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;
																					});

																					if (player_life - dmg <= 0){
																						exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																						var d = new Date();
																						d.setHours(d.getHours() + wait_dungeon_long);
																						var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																						connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																						connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;
																						});
																						connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																							if (err) throw err;
																						});
																						if (player_rank > 0){
																							connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																								if (err) throw err;
																							});
																						}
																					}else{
																						exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																						var d = new Date();
																						d.setHours(d.getHours() + (wait_dungeon-1));
																						var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																						connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					}
																					connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																						if (err) throw err;
																					});
																					bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + dmg + " hp, " + exText, back);
																				}
																			}
																		});
																	}
																};
															});
														});
													});
												});
											}else if (dir == 1){
												bot.sendMessage(message.chat.id, "Nella stanza sembra esserci uno *scrigno* pronto per essere aperto, cosa fai?", dChest).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Prendi"){
															var rand = Math.round((Math.random()*99)+1);
															var rand2 = Math.round((Math.random()*99)+1);

															if (rand2 < 70){
																var chest_id = 0;
																if (rand <= 60){				//60%
																	chest_id = 3;
																}else if ((rand > 60) && (rand <= 80)){		//20%
																	chest_id = 4;
																}else if ((rand > 80) && (rand <= 98)){	//10%
																	chest_id = 5;
																}else{
																	chest_id = 0;
																}

																if (chest_id > 0){
																	connection.query('SELECT name FROM chest WHERE id = ' + chest_id, function (err, rows, fields){
																		if (err) throw err;
																		var chestName = rows[0].name;
																		connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chest_id + ')', function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai trovato uno *" + chestName + "*!", dNext);
																		});
																	});
																}else{
																	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',604)', function (err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Aprendo uno strano scrigno hai trovato una *Chiave Tipo 1*!", dNext);
																	});
																}
															}else{
																var monsterLev = Math.round(Math.random()*Math.round(room_num/2)+Math.round(room_num/2));

																connection.query('SELECT * FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields){
																	if (err) throw err;
																	if (Object.keys(rows).length == 0){
																		bot.sendMessage(message.chat.id, "Errore selezione mostro: " + monsterLev, back);
																		return;
																	}
																	connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields){
																		if (err) throw err;
																	});
																	bot.sendMessage(message.chat.id, "Hai trovato uno Scrigno! Ma appena lo tocchi esso assume le sembianze di un *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function() {
																		answerCallbacks[message.chat.id] = function(answer) {
																			if (answer.text == "Scappa"){
																				bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function() {
																					answerCallbacks[message.chat.id] = function(answer) {
																						if (answer.text.toLowerCase() == "si"){

																							var rand = Math.random()*100;
																							if (rand < 50){
																								var dmg = Math.round(player_total_life*20/100);
																							}else{
																								var dmg = Math.round(player_total_life*30/100);
																							}

																							var exText = "";

																							connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							if (player_life - dmg <= 0){
																								exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																								var d = new Date();
																								d.setHours(d.getHours() + wait_dungeon_long);
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																									if (err) throw err;
																								});
																								if (player_rank > 0){
																									connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																							}else{
																								exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																								var d = new Date();
																								d.setHours(d.getHours() + (wait_dungeon-1));
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							}
																							connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																								if (err) throw err;
																							});
																							bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + dmg + " hp, " + exText, back);
																						}
																					}
																				});
																			}
																		};
																	});
																});
																connection.query('UPDATE dungeon_status SET last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																return;
															}
														}else if (answer.text == "Ignora"){
															bot.sendMessage(message.chat.id, "Hai ignorato lo Scrigno", dNext);
														}else{
															return;
														}
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
													}
												});	
											}else if (dir == 2){
												bot.sendMessage(message.chat.id, "Al centro della stanza vedi un mucchietto di monete, cosa fai?", dChest).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Prendi"){
															if (player_rank == 0){
																player_rank = 1;
															}
															var rand = Math.round(Math.random()*(player_rank*100))+(player_rank*100);
															connection.query('UPDATE player SET money = money+' + rand + ' WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai ricevuto *" + formatNumber(rand) + "* ¬ß!", dNext);
															});
														}else{
															return;
														}
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
													}
												});	
											}else if (dir == 3){
												var dmg = Math.round(Math.random()*(player_life/10*2)+1);
												connection.query('UPDATE player SET life = life - ' + dmg + ' WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													var dText = 	[
														"Camminando per raggiungere la prossima stanza, una trappola per orsi ti ha ferito la gamba, hai perso " + dmg + " hp!",
														"Percorrendo un corridoio scivoli su una pozzanghera giallognola e tiri una testata contro un muro in pietra, perdi " + dmg + " hp!",
														"Uno strano pulsante rosso come un pomodoro ti incuriosisce, lo premi e ti cade addosso un pietrone, facendoti perdere " + dmg + " hp!",
														"Vedi un Nano della terra di Grumpi e ti chiedi come faccia a trovarsi in un luogo del genere, girandosi si rivela essere un goblin che ti colpisce togliendoti " + dmg + " hp!"
													];
													var len = parseInt(Object.keys(dText).length)-1;
													var index = Math.round(Math.random()*len);

													text = dText[index];

													bot.sendMessage(message.chat.id, text, dNext);
												});
												connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});
												connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});
											}else if (dir == 4){
												var iKeys = [];
												var items = [];
												var prices = [];

												var text = "Nella stanza incontri un viandante, ti propone alcuni oggetti a buon prezzo, puoi acquistarne uno oppure ignorarlo e procedere.\n";

												connection.query(	'SELECT I.id As item1id, DM.price_1 As price1, DM.price_2 As price2, DM.price_3 As price3, I.value As item1val, I.name As item1n, I2.id As item2id, I2.value As item2val, I2.name As item2n, I3.id As item3id, I3.value As item3val, I3.name As item3n ' +
																 'FROM dungeon_market DM INNER JOIN item I ON DM.item_1 = I.id INNER JOIN item I2 ON DM.item_2 = I2.id INNER JOIN item I3 ON DM.item_3 = I3.id ' +
																 'WHERE DM.dungeon_id = ' + dungeon_id + ' AND DM.room_id = ' + room_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0){
														connection.query('UPDATE dungeon_status SET last_dir = NULL, room_id = room_id+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Il viandante al momento non √® disponibile, la stanza viene saltata", dNext);
														});
														return;
													}

													var multi = 15;
													var newprice = 0;
													if (rows[0].price1 == 0){
														var multi = 15;
														text += "\n> " + rows[0].item1n + " (" + (rows[0].item1val*multi) + " ¬ß)";
														text += "\n> " + rows[0].item2n + " (" + (rows[0].item2val*multi) + " ¬ß)";
														text += "\n> " + rows[0].item3n + " (" + (rows[0].item3val*multi) + " ¬ß)";
													}else{
														newprice = 1;
														text += "\n> " + rows[0].item1n + " (" + (rows[0].price1) + " ¬ß)";
														text += "\n> " + rows[0].item2n + " (" + (rows[0].price2) + " ¬ß)";
														text += "\n> " + rows[0].item3n + " (" + (rows[0].price3) + " ¬ß)";
													}
													iKeys.push(["Accetta Oggetto 1"]);
													iKeys.push(["Accetta Oggetto 2"]);
													iKeys.push(["Accetta Oggetto 3"]);
													items.push(rows[0].item1id);
													items.push(rows[0].item2id);
													items.push(rows[0].item3id);
													prices.push(rows[0].price1);
													prices.push(rows[0].price2);
													prices.push(rows[0].price3);

													iKeys.push(["Ignora"]);
													iKeys.push(["Torna al menu"]);

													var dItems = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": iKeys
														}
													};

													bot.sendMessage(message.chat.id, text, dItems).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {
															var ogg = answer.text;
															if (ogg == "Ignora"){
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	connection.query('UPDATE dungeon_status SET last_dir = NULL, room_id = room_id+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Decidi di ignorare il viandante e prosegui", dNext);
																	});
																});
																return;
															}else if (ogg == "Torna al menu"){
																return;
															}else{
																var itemN = parseInt(ogg.substring(Object.keys(ogg).length-1));

																if ((itemN > 3) || (itemN < 1)){
																	bot.sendMessage(message.chat.id, "Il viandante non possiede questo oggetto", back);
																	return;
																}

																var item_id = items[itemN-1];
																var item_price = prices[itemN-1];

																//console.log(items, prices, item_id, item_price, newprice);

																if (item_id == undefined){
																	bot.sendMessage(message.chat.id, "Il viandante non possiede questo oggetto", back);
																	return;
																}
																if (item_price == undefined){
																	bot.sendMessage(message.chat.id, "Il viandante non possiede questo oggetto", back);
																	return;
																}

																connection.query('SELECT id, name, value FROM item WHERE id = ' + item_id, function(err, rows, fields) {
																	if (err) throw err;

																	if (newprice == 0){
																		item_price = rows[0].value*multi;
																	}

																	if (player_money - item_price < 0){
																		bot.sendMessage(message.chat.id, "Non hai abbastanza monete", back);
																		return;
																	}

																	//console.log("PRICE: " + item_price);

																	bot.sendMessage(message.chat.id, "Acquistare " + rows[0].name + " per " + item_price + " ¬ß?", dYesNo).then(function() {
																		answerCallbacks[message.chat.id] = function(answer) {
																			if (answer.text.toLowerCase() == "si"){
																				connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + item_id + ')', function (err, rows, fields) {
																					if (err) throw err;
																					connection.query('UPDATE player SET money = money-' + item_price + ' WHERE id = ' + player_id, function (err, rows, fields) {
																						if (err) throw err;

																						connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;
																						});

																						connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;
																						});

																						bot.sendMessage(message.chat.id, "Acquisto completato!", dNext);
																					});
																				});
																			}
																		}
																	});
																});
															}
														}
													});
												});
											}else if (dir == 5){
												var rand = Math.round(Math.random()*100);

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Sinistra","Centro","Destra"],["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Al centro della stanza ci sono 3 leve, quale spingi?", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if ((answer.text == "Sinistra") || (answer.text == "Centro") || (answer.text == "Destra")){
															if (rand <= 50){
																if (room_id > 2){
																	room_id--;
																	bot.sendMessage(message.chat.id, "Spingendo una leva si √® aperto un varco sotto di te! Torni alla stanza precedente.", dNext);
																}else{
																	bot.sendMessage(message.chat.id, "Spingendo una leva senti degli strani rumori, ma non succede nulla!", dNext);	
																}
															}else if ((rand > 50) && (rand <= 90)){
																room_id++;
																bot.sendMessage(message.chat.id, "Spingendo una leva senti degli strani rumori, e si apre la porta della stanza!", dNext);
															}else if (rand > 90){
																room_id += 2;
																bot.sendMessage(message.chat.id, "Spingendo una leva si apre un varco sul fianco della stanza, √® una scorciatoia che ti permette di avanzare di due stanze!", dNext);				
															}
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = ' + room_id + ', last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});	
														}else{
															return;
														}
													}
												});
											}else if (dir == 6){
												var dText = 	[
													"una ragazza che sembra essere in difficolt√†",
													"un bambino che piange",
													"un uomo ferito e sanguinante",
													"una donna impaurita",
													"un anziano dolorante"
												];
												var len = parseInt(Object.keys(dText).length)-1;
												var index = Math.round(Math.random()*len);

												text = dText[index];

												bot.sendMessage(message.chat.id, "Appena entrato nella stanza vedi nell'angolo " + text + ", cosa fai?", dPeople).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Aiuta"){
															var rand = Math.random()*100;
															if (rand < 50){
																var monsterLev = Math.round(Math.random()*Math.round(room_num/2)+Math.round(room_num/2));

																connection.query('SELECT * FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields){
																	if (err) throw err;
																	if (Object.keys(rows).length == 0){
																		bot.sendMessage(message.chat.id, "Errore selezione mostro", back);
																		return;
																	}
																	connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields){
																		if (err) throw err;
																	});

																	bot.sendMessage(message.chat.id, "Decidi di toccare la persona davanti a te, ma questa si gira e sembra essere un *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function() {
																		answerCallbacks[message.chat.id] = function(answer) {
																			if (answer.text == "Scappa"){
																				bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function() {
																					answerCallbacks[message.chat.id] = function(answer) {
																						if (answer.text.toLowerCase() == "si"){

																							var rand = Math.random()*100;
																							if (rand < 50){
																								var dmg = Math.round(player_total_life*20/100);
																							}else{
																								var dmg = Math.round(player_total_life*30/100);
																							}

																							var exText = "";

																							connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																								if (err) throw err;
																							});

																							if (player_life - dmg <= 0){
																								exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																								var d = new Date();
																								d.setHours(d.getHours() + wait_dungeon_long);
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																									if (err) throw err;
																								});
																								if (player_rank > 0){
																									connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																							}else{
																								exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																								var d = new Date();
																								d.setHours(d.getHours() + (wait_dungeon-1));
																								var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																								connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																								connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});
																							}
																							connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																								if (err) throw err;
																							});
																							bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + dmg + " hp, " + exText, back);
																						}
																					}
																				});
																			};
																		};
																	});
																});
																connection.query('UPDATE dungeon_status SET last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																return; // Non cancellare
															}else{
																if (rand > 90){
																	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',608)', function (err, rows, fields){
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Decidi di toccare la persona davanti a te, si gira e ti ringrazia per averla trovata, regalandoti un *Pass Bronzo*!", dNext);
																	});
																}else{
																	connection.query('SELECT id, name FROM item WHERE rarity = "R" AND craftable = 0 ORDER BY RAND()', function (err, rows, fields){
																		var itemName = rows[0].name;
																		connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].id + ')', function (err, rows, fields){
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Decidi di toccare la persona davanti a te, si gira e ti ringrazia per averla trovata, regalandoti: *" + itemName + "*!", dNext);
																		});
																	});
																}
															}
														}else if (answer.text == "Ignora"){
															bot.sendMessage(message.chat.id, "Hai ignorato la persona", dNext);
														}else{
															return;
														}
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});

														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
													};
												});										
											}else if (dir == 7){
												var dText = 	[
													"Un'anziana signora in lontananza ti chiama",
													"Una vecchina poco affidabile in lontananza attira la tua attenzione"
												];
												var len = parseInt(Object.keys(dText).length)-1;
												var index = Math.round(Math.random()*len);

												text = dText[index];

												bot.sendMessage(message.chat.id, "Aprendo la porta ti ritrovi in un ambiente aperto, con alberi e liane che ricoprono ogni cosa. " + text + ", cosa fai?", dPotions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Segui la Vecchia"){
															var rand = Math.random()*100;

															if (rand < 60){
																var potId = 94;
																var potN = "Pozione Grande";

																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + potId + ')', function(err, rows, fields){
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "La vecchina ha preparato una Pozione, e decide di regalartene un po' per aver avuto fiducia in lei. Ottieni cos√¨ *" + potN + "*", dNext);
																});
															}else{
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '", last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "La vecchina ha preparato una Pozione, e decidi di provarla, ma appena bevuta ti addormenti, al tuo risveglio sei nuovamente davanti alle 3 porte che ti avevano condotto in questa foresta.", dNext);
																});
																return; //NON CANCELLARE
															}	
														}else if (answer.text == "Ignora"){
															bot.sendMessage(message.chat.id, "Hai ignorato la Vecchia", dNext);
														}else{
															return;
														}
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
													};
												});
											}else if (dir == 8){
												var type = 0;
												var d = new Date();
												var rand = Math.round(d.getHours()/4) % 2;

												if (rand == 1){
													type = 1;
													text = "Appena aperta la porta della stanza, un caldo esagerato ti avvolge, compare al centro una pulsantiera, probabilmente uno di quei bottoni potrebbe aprire la porta successiva.\n\nSalute: " + formatNumber(player_life) + " hp";
												}else if (rand == 0){
													type = 2;
													text = "Appena aperta la porta della stanza, un freddo polare ti avvolge, appare una pulsantiera congelata, probabilmente uno di quei bottoni potrebbe aprire la porta successiva.\n\nSalute: " + formatNumber(player_life) + " hp";
												}

												if ((param == null) || (param == undefined)){
													var randNum = Math.round(Math.random()*5+1);
													connection.query('UPDATE dungeon_status SET param = "' + randNum + '" WHERE player_id = ' + player_id, function (err, rows, fields){
														if (err) throw err;
													});
													param = randNum;
												}

												bot.sendMessage(message.chat.id, text, dButtons).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {

														if (answer.text == "Torna al menu"){
															return;
														}

														if (answer.text == "Scappa"){ 
															bot.sendMessage(message.chat.id, "Sicuro di voler uscire dal dungeon? Se possiedi un Kit Fuga lo consumerai e non dovrai attendere prima di rientrare. In ogni caso perderai 1 punto rango.", dYesNo).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if (answer.text.toLowerCase() == "si"){
																		connection.query('SELECT * FROM inventory WHERE item_id = 616 AND player_id = ' + player_id, function (err, rows, fields){
																			if (err) throw err;

																			var extra = "";
																			if (Object.keys(rows).length > 0){
																				connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 616 LIMIT 1', function (err, rows, fields) {
																					if (err) throw err;
																				});
																				extra = " scappando con un Kit Fuga!";
																			}else{
																				var d = new Date();
																				d.setHours(d.getHours() + wait_dungeon_long);
																				var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																				connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			}
																			if (player_rank > 0){
																				connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																					if (err) throw err;
																				});
																			}
																			connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Hai deciso di rinunciare al dungeon" + extra, back);
																			});
																		});
																	}
																}
															});
															return;
														}

														if ((parseInt(answer.text) < 1 ) || (parseInt(answer.text > 6))){
															bot.sendMessage(message.chat.id,"Pulsante non valido, riprova", dBack);
															return;
														}else if ((parseInt(answer.text) >= 1 ) || (parseInt(answer.text <= 6))){

															var rand = Math.random()*200;

															if (parseInt(answer.text) != param){

																var damage = Math.round(Math.random()*(player_total_life/15)+(player_total_life/15));
																damage = Math.round(damage/2);

																connection.query('UPDATE player SET life = life - ' + damage + ' WHERE id = ' + player_id, function (err, rows, fields){
																	if (err) throw err;

																	var randKey = Math.random()*100;
																	if (randKey < 3){
																		connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',605)', function (err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Si apre una piastrella del muro dal quale cade una *Chiave Tipo 2*!", dNext);
																		});
																	}

																	if (type == 1){
																		bot.sendMessage(message.chat.id, "Hai sbagliato pulsante! Il calore ti provoca una perdita pari a " + damage + " hp!", dNext);
																	}else if (type == 2){
																		bot.sendMessage(message.chat.id, "Hai sbagliato pulsante! Il gelo ti provoca una perdita pari a " + damage + " hp!", dNext);
																	}
																});

																if ((answer.text == (param/2)) && (rand < 1) && (player_reborn >= 3)){
																	connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',598)', function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Si apre una crepa nella parete, da cui esce un soffio di vento ottieni cos√¨ un *Soffio di Morte*!", mark);
																	});
																}

																if (player_life-damage <= 0){
																	bot.sendMessage(message.chat.id, "Sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.", back);

																	var d = new Date();
																	d.setHours(d.getHours() + wait_dungeon_long);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	if (player_rank > 0){
																		connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																}
															}else{
																if (rand < 5){
																	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',609)', function (err, rows, fields){
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Hai trovato il pulsante corretto! Sul soffitto si apre una botola dalla quale vedi scendere un foglietto, ottieni cos√¨ un *Pass Argento*!", dNext);	
																	});
																}else{
																	bot.sendMessage(message.chat.id, "Hai trovato il pulsante corretto! Prosegui alla prossima stanza.", dNext);
																}
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET param = NULL, room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});		
															};
														};
													};
												});
											}else if (dir == 9){
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Pi√π Raro","Meno Raro"],["Ignora"]]
													}
												};

												var rand = Math.random()*100;

												bot.sendMessage(message.chat.id, "Raggiungi una stanza suddivisa in due, vedi un oggetto per lato, dove ti dirigi?" , dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if ((answer.text == "Pi√π Raro") || (answer.text == "Meno Raro")){

															var monsterLev = room_num;
															var rarity = "";

															if (answer.text == "Pi√π Raro"){
																if (rand > 30){
																	rarity = "UR";
																}else{
																	rarity = "L";
																}
															}else if (answer.text == "Meno Raro"){
																if (rand > 50){
																	rarity = "R";
																}else{
																	rarity = "NC";
																}
																monsterLev -= 5;
															}

															connection.query('SELECT name, id FROM item WHERE rarity = "' + rarity + '" AND craftable = 0 ORDER BY RAND()', function (err, rows, fields){
																if (err) throw err;
																var itemName = rows[0].name;
																var itemId = rows[0].id;

																connection.query('SELECT * FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields){
																	if (err) throw err;
																	if (Object.keys(rows).length == 0){
																		bot.sendMessage(message.chat.id, "Errore selezione mostro", back);
																		return;
																	}
																	connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields){
																		if (err) throw err;
																	});
																	var mName = rows[0].name;
																	var mLevel = rows[0].level;
																	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + itemId + ')', function (err, rows, fields) {
																		if (err) throw err;
																		var text = "Ti avvicini all'oggetto con calma, scopri che si tratta di *" + itemName + "*, ma appena lo prendi, appare di fronte a te un";
																		bot.sendMessage(message.chat.id, text + " *" + mName + "* di livello *" + mLevel + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function() {
																			answerCallbacks[message.chat.id] = function(answer) {
																				if (answer.text == "Scappa"){
																					bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function() {
																						answerCallbacks[message.chat.id] = function(answer) {
																							if (answer.text.toLowerCase() == "si"){

																								var rand = Math.random()*100;
																								if (rand < 50){
																									var dmg = Math.round(player_total_life*20/100);
																								}else{
																									var dmg = Math.round(player_total_life*30/100);
																								}

																								var exText = "";

																								connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});

																								if (player_life - dmg <= 0){
																									exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																									var d = new Date();
																									d.setHours(d.getHours() + wait_dungeon_long);
																									var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																									connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																										if (err) throw err;
																									});
																									connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																										if (err) throw err;
																									});
																									if (player_rank > 0){
																										connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																											if (err) throw err;
																										});
																									}
																								}else{
																									exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																									var d = new Date();
																									d.setHours(d.getHours() + (wait_dungeon-1));
																									var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																									connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																								connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																									if (err) throw err;
																								});
																								bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + dmg + " hp, " + exText, back);
																							}
																						}
																					});
																				}
																			};
																		});
																	});
																});
															});
															connection.query('UPDATE dungeon_status SET last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															return;
														}else if (answer.text == "Ignora"){
															bot.sendMessage(message.chat.id, "Hai ignorato gli oggetti", dNext);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
														}else{
															return;
														}
													}
												});
											}else if (dir == 10){
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Accumula Monete","Estrai Spada"],["Torna al menu"]]
													}
												};

												if ((param == null) || (param == undefined)){
													param = "0;0";
													connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields){
														if (err) throw err;
													});
												}

												var param_arr = param.split(";");
												var acc_money = param_arr[0];										
												var acc_life = param_arr[1];

												bot.sendMessage(message.chat.id, "Entri in una stanza piena d'oro luccicante e una spada conficcata nel muro, puoi decidere di prendere oro ma un messaggio su un cartello raccomanda di non essere troppo avido, cosa fai?\nFin ora hai accumulato " + acc_money + " ¬ß.", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if ((answer.text == "Accumula Monete") || (answer.text == "Estrai Spada")){

															var damage = Math.round(player_total_life/100*acc_life);

															if (answer.text == "Accumula Monete"){
																if (player_rank == 0){
																	player_rank = 1;
																}

																//console.log("Spade per rango " + player_rank);

																var middle = Math.pow(player_rank, 0.55)*1000
																var min = middle * 0.66;
																var max = middle * 1.33;
																var rand = Math.round(Math.random()*(max-min+1)+min);

																//console.log("Spade v2: " + rand)

																/*
																var min = player_rank*100;
																var max = player_rank*85;
																var rand = Math.round(Math.random()*(min))+(max);

																console.log("Spade: " + rand)
																*/

																acc_money = parseInt(acc_money)+rand;

																if (acc_life == 90){
																	bot.sendMessage(message.chat.id, "Non ci sono pi√π monete nella stanza!", dNext);
																	return;
																}

																var randKey = Math.random()*100;
																if (randKey < 1){
																	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',616)', function (err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "In mezzo ai mucchi trovi un *Kit Fuga*!", dNext);
																	});
																}

																if (player_life - damage <= 0){
																	bot.sendMessage(message.chat.id, "Sei troppo stanco per riuscire a portare altre monete!", dNext);
																	return;
																}

																acc_life = parseInt(acc_life)+10;
																param = acc_money + ";" + acc_life;

																connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields){
																	if (err) throw err;
																});

																bot.sendMessage(message.chat.id, "Hai deciso di accumulare altre monete, raggiungi cos√¨ un bottino di " + acc_money + " ¬ß", dNext);
															}else if (answer.text == "Estrai Spada"){

																if (player_life - damage <= 0){
																	connection.query('UPDATE player SET life = life - ' + damage + ' WHERE id = ' + player_id, function (err, rows, fields){
																		if (err) throw err;

																		var d = new Date();
																		d.setHours(d.getHours() + wait_dungeon_long);
																		var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																		connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																			if (err) throw err;
																		});

																		bot.sendMessage(message.chat.id, "La porta si apre, ma un dolore lancinante al petto ti fa perdere i sensi, vieni cos√¨ portato fuori dal dungeon in orribili condizioni.", back);
																	});
																	return;
																}

																connection.query('UPDATE player SET money = money + ' + acc_money + ', life = life - ' + damage + ' WHERE id = ' + player_id, function (err, rows, fields){
																	if (err) throw err;
																	if (acc_money == 0){
																		bot.sendMessage(message.chat.id, "La spada provoca un piccolo terremoto e si apre la porta! Immediatamente per√≤ senti una voce spiritica risuonare nell'aria.\nSi apre la porta e prosegui senza nessuna moneta!", dNext);
																	}else{
																		bot.sendMessage(message.chat.id, "La spada provoca un piccolo terremoto e si apre la porta! Immediatamente per√≤ senti una voce spiritica risuonare nell'aria e un dolore lancinante al petto.\nSi apre la porta e ottieni *" + acc_money + "* ¬ß, ma perdi *" + damage + "* hp", dNext);
																	}
																});

																connection.query('UPDATE dungeon_status SET param = NULL, room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
														}else{
															return;
														}
													};
												});
											}else if (dir == 0){
												var rand = Math.round(Math.random()*100);

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Esamina"],["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Appena entrato nella stanza noti subito una strana fontana situata nel centro, cosa fai?", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Esamina"){
															connection.query('SELECT COUNT(*) As cnt FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;

																var color = "";
																var type = 0;
																if (rows[0].cnt > 0){
																	if (rand <= 20){
																		color = "Rosso";
																		type = 3;
																	}else if ((rand > 20) && (rand <= 40)){
																		color = "Blu";
																		type = 1;
																	}else if ((rand > 40) && (rand <= 60)){
																		color = "Giallo";
																		type = 2;
																	}
																}
																if (color != ""){
																	connection.query('UPDATE event_mana_status SET mana_' + type + ' = mana_' + type + '+100 WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Ti avvicini alla fontana e vedi che l'acqua ha uno strano colore, la esamini meglio ed ottieni 100 Mana " + color + "!", dNext);
																	});
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});	
																}else{
																	var monsterLev = Math.round(Math.random()*Math.round(room_num/2)+Math.round(room_num/2));

																	connection.query('SELECT * FROM dungeon_monsters WHERE level = ' + monsterLev + ' ORDER BY RAND()', function (err, rows, fields){
																		if (err) throw err;
																		if (Object.keys(rows).length == 0){
																			bot.sendMessage(message.chat.id, "Errore selezione mostro: " + monsterLev, back);
																			return;
																		}
																		connection.query('UPDATE dungeon_status SET monster_id = ' + rows[0].id + ', monster_life = ' + rows[0].life + ', monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function (err, rows, fields){
																			if (err) throw err;
																		});
																		bot.sendMessage(message.chat.id, "Ti avvicini alla fontana per esaminarla meglio, appena provi a toccare l'acqua dal suo interno esce un *" + rows[0].name + "* di livello *" + rows[0].level + "*, puoi sfidarlo per ottenere il suo bottino e proseguire, oppure scappare.", dBattle).then(function() {
																			answerCallbacks[message.chat.id] = function(answer) {
																				if (answer.text == "Scappa"){
																					bot.sendMessage(message.chat.id, "Sicuro di voler tentare di tornare alla stanza precedente? Il mostro potrebbe colpirti durante la fuga", dYesNo).then(function() {
																						answerCallbacks[message.chat.id] = function(answer) {
																							if (answer.text.toLowerCase() == "si"){

																								var rand = Math.random()*100;
																								if (rand < 50){
																									var dmg = Math.round(player_total_life*20/100);
																								}else{
																									var dmg = Math.round(player_total_life*30/100);
																								}

																								var exText = "";

																								connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																									if (err) throw err;
																								});

																								if (player_life - dmg <= 0){
																									exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																									var d = new Date();
																									d.setHours(d.getHours() + wait_dungeon_long);
																									var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																									connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																									connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																										if (err) throw err;
																									});
																									connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																										if (err) throw err;
																									});
																									if (player_rank > 0){
																										connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																											if (err) throw err;
																										});
																									}
																								}else{
																									exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																									var d = new Date();
																									d.setHours(d.getHours() + (wait_dungeon-1));
																									var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																									connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																										if (err) throw err;
																									});
																								}
																								connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																									if (err) throw err;
																								});
																								bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + dmg + " hp, " + exText, back);
																							}
																						}
																					});
																				}
																			};
																		});
																	});
																}
															});
															/*
														}else if (answer.text == "Ignora"){
															bot.sendMessage(message.chat.id, "Hai ignorato la fontana", dNext);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
														*/
														}else{
															return;
														}
													}
												});
											}else if (dir == -1){
												var rand = Math.round(Math.random()*100);

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Inserisci Monete"],["Inserisci Moneta Lunare"],["Sfonda il Muro"],["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Questa stanza √® vuota, c'√® solo una piccola fessura sul muro di fronte, ha la forma di una monetina. E scorgi una sagoma di un portone subito a fianco. Cosa fai?", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Inserisci Monete"){
															connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																var money = Math.round(rows[0].money*0.05);
																if (money > 5000){
																	money = 5000;
																}
																if (money <= 0){
																	bot.sendMessage(message.chat.id, "Non hai monete, non puoi procedere, torna quando avrai qualche moneta da parte", dNext);
																	return;
																}
																connection.query('UPDATE player SET money = money - ' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Scegli di inserire nella fessura " + money + " ¬ß, il portone ti ringrazia con una voce inquietante, e si apre lentamente, cos√¨ da aprire la strada per la stanza seguente.", dNext);
																});
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});	
															});
														}else if (answer.text == "Inserisci Moneta Lunare"){
															connection.query('SELECT moon_coin FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;

																if (rows[0].moon_coin < 1){
																	bot.sendMessage(message.chat.id, "Non hai nessuna moneta!", dNext);
																	return;
																}

																connection.query('UPDATE player SET moon_coin = moon_coin - 1 WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Scegli di inserire nella fessura 1 Moneta Lunare, il portone ti ringrazia con una voce inquietante, e si apre lentamente per la stanza seguente.", dNext);
																});
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});	
															});
														}else if (answer.text == "Sfonda il Muro"){
															connection.query('SELECT total_life FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																var life = Math.round(rows[0].total_life*0.2);
																if (player_life-life <= 0){

																	connection.query('UPDATE player SET life = life - ' + life + ' WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Tirando spallate troppo forti hai perso i sensi e quindi portato fuori dal dungeon", back);
																	});

																	var d = new Date();
																	d.setHours(d.getHours() + wait_dungeon_long);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}else{
																	connection.query('UPDATE player SET life = life - ' + life + ' WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Scegli di tirare gi√π il portone a spallate, perdi cos√¨ " + life + " hp, ma riesci ad aprire la strada per la stanza seguente.", dNext);
																	});
																}
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});	
															});
														}else{
															return;
														}
													}
												});
											}else if (dir == -2){
												var rand = Math.round(Math.random()*100);

												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Procedi"],["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Un cartello con un punto esclamativo ti preoccupa, al centro della stanza c'√® un taglio che la percorre per tutta la sua larghezza, l'unica alternativa √® procedere.", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Procedi"){
															connection.query('SELECT life FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																var life = Math.round(rows[0].life/2);
																var rand = Math.random()*100;

																connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;

																	var lev = 0;
																	if (Object.keys(rows).length > 0){
																		if (lev > 90)
																			lev = 90;
																		lev = rows[0].level;
																	}

																	if (lev >= rand){
																		connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',72)', function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Come avanzi di due passi scatta un meccanismo e un'ascia gigantesca ti precipita addosso, fortunatamente il tuo drago riesce a difenderti bloccandola completamente e vicino alla porta trovi un sacchettino contenente una Pietra Cuore Leggendario!", dNext);
																		});
																	}else{
																		connection.query('UPDATE player SET life = life - ' + life + ' WHERE id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Come avanzi di due passi scatta un meccanismo e un'ascia gigantesca ti precipita addosso, il tuo drago si precipita in tua difesa ma non √® abbastanza forte, l'ascia ti prende in pieno e perdi met√† della tua salute!", dNext);
																		});
																	}
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});	
																});
															});
														}else{
															return;
														}
													}
												});
											}else if (dir == -3){
												var min = room_id-3;
												var max = room_id+10;

												connection.query('SELECT room_id, dir_top, dir_right, dir_left FROM dungeon_rooms WHERE room_id BETWEEN ' + min + ' AND ' + max + ' AND room_id != ' + room_id + ' AND dungeon_id = ' + dungeon_id + ' ORDER BY RAND()', function (err, rows, fields){
													if (err) throw err;

													if ((param == null) || (param == undefined)){
														var i1 = rows[0].room_id;
														var i2 = rows[1].room_id;
														var i3 = rows[2].room_id;
														var d1 = "";
														var d2 = "";
														var d3 = "";
														var r1 = 0;
														var r2 = 0;
														var r3 = 0;
														var c1 = 0;
														var c2 = 0;
														var c3 = 0;

														var rand0 = Math.random()*100;
														if (rand0 < 33){
															c1 = 1;
															c2 = 0;
															c3 = 0;
														}else if (rand0 < 66){
															c1 = 0;
															c2 = 1;
															c3 = 0;
														}else{
															c1 = 0;
															c2 = 0;
															c3 = 1;
														}

														var rand1 = Math.random()*100;
														if (rand1 < 30){
															r1 = rows[0].dir_top;
															d1 = "top";
														}else if (rand1 < 60){
															r1 = rows[0].dir_right;
															d1 = "right";
														}else{
															r1 = rows[0].dir_left;
															d1 = "left";
														}
														if (c1 == 0){
															if (r1 > 8)
																r1 = Math.round(getRandomArbitrary(-10, 9));
															else
																r1++;
														}

														var rand2 = Math.random()*100;
														if (rand2 < 30){
															r2 = rows[1].dir_top;
															d2 = "top";
														}else if (rand2 < 60){
															r2 = rows[1].dir_right;
															d2 = "right";
														}else{
															r2 = rows[1].dir_left;
															d2 = "left";
														}
														if (c2 == 0){
															if (r2 > 8)
																r2 = Math.round(getRandomArbitrary(-10, 9));
															else
																r2++;
														}

														var rand3 = Math.random()*100;
														if (rand3 < 30){
															r3 = rows[2].dir_top;
															d3 = "top";
														}else if (rand3 < 60){
															r3 = rows[2].dir_right;
															d3 = "right";
														}else{
															r3 = rows[2].dir_left;
															d3 = "left";
														}
														if (c3 == 0){
															if (r3 > 8)
																r3 = Math.round(getRandomArbitrary(-10, 9));
															else
																r3++;
														}

														var sequence = 	i1 + "," + r1 + "," + d1 + "," + c1 + "," +
															i2 + "," + r2 + "," + d2 + "," + c2 + "," +
															i3 + "," + r3 + "," + d3 + "," + c3;

														connection.query('UPDATE dungeon_status SET param = "' + sequence + '" WHERE player_id = ' + player_id, function (err, rows, fields){
															if (err) throw err;
														});
														param = sequence;
													}

													var params = param.split(",");
													var iKeys = [];

													var dir1 = "";
													var dir2 = "";
													var dir3 = "";

													if (params[2] == "top"){
														dir1 = "Avanti";
													}else if (params[2] == "right"){
														dir1 = "Destra";
													}else{
														dir1 = "Sinistra";
													}
													if (params[6] == "top"){
														dir2 = "Avanti";
													}else if (params[6] == "right"){
														dir2 = "Destra";
													}else{
														dir2 = "Sinistra";
													}
													if (params[10] == "top"){
														dir3 = "Avanti";
													}else if (params[10] == "right"){
														dir3 = "Destra";
													}else{
														dir3 = "Sinistra";
													}
													iKeys.push(["1. Stanza " + params[0] + " (" + dir1 + "): " + dungeonToDesc(params[1])]);
													iKeys.push(["2. Stanza " + params[4] + " (" + dir2 + "): " + dungeonToDesc(params[5])]);
													iKeys.push(["3. Stanza " + params[8] + " (" + dir3 + "): " + dungeonToDesc(params[9])]);

													iKeys.push(["Cambia Incisione"]);
													iKeys.push(["Torna al menu"]);

													var dOptions = {
														parse_mode: "HTML",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": iKeys
														}
													};

													var dYesNo = {
														parse_mode: "HTML",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": [["Si"],["Torna al dungeon"]]
														}
													};

													var next = -1;
													var winroom = 1;
													if (params[3] != 0){
														winroom = params[0];
													}else if (params[7] != 0){
														winroom = params[4];
													}else if (params[11] != 0){
														winroom = params[8];
													}else{
														bot.sendMessage(message.chat.id, "Errore misterioso, contatta l'admin", back);
														return;
													}

													bot.sendMessage(message.chat.id, "In questa stanza non noti nessuna porta, al loro posto 3 incisioni con un pulsante ciascuna, le leggi e rifletti su quale premere.", dOptions).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {

															if (answer.text == "Cambia Incisione"){
																bot.sendMessage(message.chat.id, "Per cambiare le iscrizioni dovrai attendere 10 minuti, procedi?", dYesNo).then(function() {
																	answerCallbacks[message.chat.id] = function(answer) {
																		if (answer.text.toLowerCase() == "si"){

																			var d = new Date();
																			d.setMinutes(d.getMinutes()+10);
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																			connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																			});

																			if (timecheck >= 5){
																				connection.query('UPDATE dungeon_status SET room_id = ' + winroom + ', last_dir = NULL, param = NULL, timevar = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																					if (err) throw err;
																					bot.sendMessage(message.chat.id, "Hai esaurito i tentativi, vieni automaticamente sbalzato alla stanza corretta!", dNext);
																				});
																				return;
																			}

																			connection.query('UPDATE dungeon_status SET param = NULL, timevar = timevar+1 WHERE player_id = ' + player_id, function (err, rows, fields){
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Le iscrizioni piano piano svaniscono...", dNext);
																			});
																		}
																	}
																});
																return;
															}

															if (answer.text.indexOf("1.") != -1){
																if (params[3] == 0){
																	win = 0;
																}else{
																	win = 1;
																}
																next = params[0];
															}else if (answer.text.indexOf("2.") != -1){
																if (params[7] == 0){
																	win = 0;
																}else{
																	win = 1;
																}
																next = params[4];
															}else if (answer.text.indexOf("3.") != -1){
																if (params[11] == 0){
																	win = 0;
																}else{
																	win = 1;
																}
																next = params[8];
															}else{
																return;
															}

															if (next == -1){
																bot.sendMessage(message.chat.id, "Errore selezione stanza, riprova (" + next + ")", back);
																return;
															}

															if (next == 0)
																next++;

															if (win == 1){
																connection.query('UPDATE dungeon_status SET param = NULL, timevar = 0 WHERE player_id = ' + player_id, function (err, rows, fields){
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Premi un pulsante e sul muro appare un messaggio con scritto _'La stanza indicata corrisponde perfettamente alla sua descrizione!'_, vieni teletrasportato alla stanza " + next + " del dungeon", dNext);
																});
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = ' + next + ', last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}else{
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '", timevar = timevar+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;

																	if (timecheck >= 5){
																		connection.query('UPDATE dungeon_status SET room_id = ' + winroom + ', last_dir = NULL, param = NULL, timevar = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai esaurito i tentativi, vieni automaticamente sbalzato alla stanza corretta!", dNext);
																		});
																		return;
																	}

																	bot.sendMessage(message.chat.id, "Premi un pulsante ma sul muro appare un messaggio con scritto _'La stanza indicata non corrisponde alla sua descrizione, non conosci abbastanza bene il dungeon'_, sei costretto ad aspettare un po' di tempo per riprovare.", dNext);
																});
															}
														}
													});
												});
											}else if (dir == -4){
												var iKeys = [];

												var text = "Nella stanza incontri un predone del deserto dall'aria docile, ti propone uno scambio, puoi accettarlo o ignorarlo e procedere.\n";

												connection.query('SELECT I.id As item1id, I.name As item1n, I2.id As item2id, I2.name As item2n ' +
																 'FROM dungeon_trade DT INNER JOIN item I ON DT.item_1 = I.id INNER JOIN item I2 ON DT.item_2 = I2.id ' +
																 'WHERE DT.dungeon_id = ' + dungeon_id + ' AND DT.room_id = ' + room_id, function (err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0){
														connection.query('UPDATE dungeon_status SET last_dir = NULL, room_id = room_id+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Errore selezione oggetti mercato", dNext);
														});
														return;
													}
													text += "Ti offre *" + rows[0].item1n + "* in cambio del tuo *" + rows[0].item2n + "*";

													iKeys.push(["Accetta"]);
													var item1id = rows[0].item1id;
													var item2id = rows[0].item2id;

													iKeys.push(["Ignora"]);
													iKeys.push(["Torna al menu"]);

													var dItems = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": iKeys
														}
													};

													bot.sendMessage(message.chat.id, text, dItems).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {
															var ogg = answer.text;
															if (ogg == "Ignora"){
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	connection.query('UPDATE dungeon_status SET last_dir = NULL, room_id = room_id+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Decidi di ignorare il predone e prosegui", dNext);
																	});
																});
																return;
															}else if (ogg == "Torna al menu"){
																return;
															}else{
																bot.sendMessage(message.chat.id, "Sicuro di voler accettare lo scambio?", dYesNo).then(function() {
																	answerCallbacks[message.chat.id] = function(answer) {
																		if (answer.text.toLowerCase() == "si"){

																			connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item2id, function(err, rows, fields) {
																				if (err) throw err;

																				if (rows[0].cnt < 1){
																					bot.sendMessage(message.chat.id, "Non possiedi l'oggetto richiesto", back);
																					return;
																				}

																				connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + item1id + ')', function (err, rows, fields) {
																					if (err) throw err;
																					connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item2id + ' LIMIT 1', function (err, rows, fields) {
																						if (err) throw err;

																						connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;
																						});

																						connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;
																						});

																						bot.sendMessage(message.chat.id, "Scambio effettuato!", dNext);
																					});
																				});
																			});
																		}
																	}
																});

															}
														}
													});
												});
											}else if (dir == -5){
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Medita"],["Termina Meditazione"],["Torna al menu"]]
													}
												};

												if (param == null)
													param = 0;

												bot.sendMessage(message.chat.id, "Raggiungi una stanza con un'incisione profonda: Stanza della Meditazione, cosa vuoi fare?\nFin ora hai meditato " + param + " volte", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Medita"){
															if (param > 6){
																bot.sendMessage(message.chat.id, "Non puoi meditare troppo a lungo", dNext);
																return;
															}
															if (param == 0){
																connection.query('UPDATE dungeon_status SET param = 1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}else{
																connection.query('UPDATE dungeon_status SET param = param+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}

															var rand = Math.random()*100;
															if (rand < 2){
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',610)', function (err, rows, fields){
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Per l'altissimo livello di meditazione hai ottenuto un *Pass Oro*!", mark);
																});
															}

															var d = new Date();
															d.setMinutes(d.getMinutes()+10+(param*10));
															var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
															var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

															connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai iniziato a meditare, finirai alle " + short_date, dNext);
															});
															return;
														}else if (answer.text == "Termina Meditazione"){
															if (param == null){
																bot.sendMessage(message.chat.id, "Non hai meditato quindi non hai ricevuto nulla", dNext);
															}else{
																var rand = Math.random()*100;
																if (rand < 30){
																	for (var i = 0, len = param; i < len; i++) {
																		connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',70)', function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																	bot.sendMessage(message.chat.id, "Per la meditazione prolungata, il saggio della montagna ti premia con " + param + "x Pietra Anima Preziosa!", dNext);
																}else if (rand < 60){
																	for (var i = 0, len = param; i < len; i++) {
																		connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',3)', function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																	bot.sendMessage(message.chat.id, "Per la meditazione prolungata, il saggio della montagna ti premia con " + param + "x Scrigni Preziosi!", dNext);
																}else{
																	param = param*2;
																	for (var i = 0, len = param; i < len; i++) {
																		connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',646)', function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																	bot.sendMessage(message.chat.id, "Per la meditazione prolungata, il saggio della montagna ti premia con " + param + "x Polvere!", dNext);
																}
															}

															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET param = NULL, room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
														}else{
															return;
														}
													}
												});
											}else if (dir == -6){
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Tornare in piena salute"],["Avere uno zaino pieno zeppo"],["Essere ricco sfondato"],["Completare il dungeon velocemente"],["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Davanti a te si erge un portale completamente rosso, una voce rimbomba dal tuo interno: esprimi un desiderio avventuriero! 'Vorrei...'", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														var rand = Math.random()*100;
														if (answer.text == "Tornare in piena salute"){
															if (rand < 40){
																connection.query('UPDATE player SET life = total_life WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ed √® stato ascoltato! Hai recuperato tutti gli hp!", dNext);
																});
															}else{
																connection.query('UPDATE player SET life = 1 WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Ti rimane 1 solo hp!", dNext);
																});
															}
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
														}else if (answer.text == "Avere uno zaino pieno zeppo"){
															if (rand < 40){
																connection.query('SELECT item.id, item.name FROM item, inventory WHERE item.id = inventory.item_id AND rarity IN ("C","NC","R","UR","L","E") AND player_id = ' + player_id + ' ORDER BY RAND()', function(err, rows, fields) {
																	if (err) throw err;
																	var name = rows[0].name;
																	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ed √® stato ascoltato! Hai ottenuto " + name + "!", dNext);
																	});
																});
															}else{
																connection.query('SELECT item.id, item.name FROM item, inventory WHERE item.id = inventory.item_id AND rarity IN ("C","NC","R","UR","L","E") AND player_id = ' + player_id + ' ORDER BY RAND()', function(err, rows, fields) {
																	if (err) throw err;
																	if (Object.keys(rows).length == 0){
																		bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Avendo lo zaino vuoto per√≤ non hai perso nulla!", dNext);
																	}else{
																		var name = rows[0].name;
																		connection.query('DELETE FROM inventory WHERE item_id = ' + rows[0].id + ' AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Hai perso " + name + "!", dNext);
																		});
																	}
																});
															}
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
														}else if (answer.text == "Essere ricco sfondato"){
															if (player_rank == 0)
																player_rank = 1;
															var money = Math.round(getRandomArbitrary(100*player_rank, 300*player_rank));
															if (rand < 40){
																connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ed √® stato ascoltato! Hai ottenuto " + money + " ¬ß!", dNext);
																});
															}else{
																connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	if (rows[0].money < money)
																		money = rows[0].money;
																	connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Hai perso " + money + " ¬ß!", dNext);
																	});
																});
															}
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});	
														}else if (answer.text == "Completare il dungeon velocemente"){
															if (rand < 40){
																room_id += 2;
																bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ed √® stato ascoltato! Avanzi di due stanze!", dNext);
															}else{
																if (room_id < 3){
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Essendo all'inizio del dungeon vieni sbalzato fuori!", back);

																	var d = new Date();
																	d.setHours(d.getHours() + wait_dungeon_long);
																	var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																	connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	if (player_rank > 0){
																		connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																}else{
																	room_id -= 2;
																	bot.sendMessage(message.chat.id, "Hai espresso il tuo desiderio... Ma non √® stato ascoltato! Retrocedi di due stanze!", dNext);
																}
															}
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = ' + room_id + ', last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});	
														}else{
															return;
														}
													};
												});
											}else if (dir == -7){
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Attacca con il Drago"],["Ignora"],["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Entri nella stanza e per sbaglio pesti una mattonella leggermente rovinata, il muro si apre ed esce l'immenso drago di LastSoldier95, cosa fai?", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Attacca con il Drago"){

															var rand = Math.random();
															connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;

																if (Object.keys(rows).length == 0){
																	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',71)', function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Colpendo il drago scopri che si tratta in realt√† di un peluche, ma comunque ottieni una Pietra Anima Preziosa!", dNext);
																	});
																}else{
																	if (rows[0].level > rand){
																		connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',72)', function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Il tuo drago riesce a sconfiggere Eragon, passi accanto al cadavere e prendi velocemente una Pietra Cuore Leggendario dal suo nascondiglio!", dNext);
																		});
																	}else if (rand < 60){
																		connection.query('UPDATE dragon SET exp = exp-5 FROM drago WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Il tuo drago viene spazzato via dal grande Eragon, e cos√¨ perde 5 punti esperienza!", dNext);
																		});
																	}
																};
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});	
															});
														}else if (answer.text == "Ignora"){
															bot.sendMessage(message.chat.id, "Corri velocemente verso l'uscita e passi alla stanza successiva", dNext);
															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});	
														}else{
															return;
														}
													};
												});
											}else if (dir == -8){
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["..."],["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Entri in una stanza apparentemente vuota, cosa fai?", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "..."){
															var rand = Math.random()*200;
															var text = "";

															if (rand < 50){
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',93)', function(err, rows, fields) {
																	if (err) throw err;
																});
																text = "qualcosa che in effetti potrebbe farti sentire meglio";
															}else if (rand < 70){
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',619)', function(err, rows, fields) {
																	if (err) throw err;
																});
																text = "qualcosa che pu√≤ farti rialzare una volta in pi√π";
															}else if (rand < 105){
																connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																text = "qualcosa che luccica e riflette la luce in modo incredibile";
															}else if (rand < 140){
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',33)', function(err, rows, fields) {
																	if (err) throw err;
																});
																text = "qualcosa che ti fa stare un po' pi√π al caldo";
															}else if (rand < 170){
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',646)', function(err, rows, fields) {
																	if (err) throw err;
																});
																text = "qualcosa che ti provoca un prurito fastidioso";
															}else if (rand < 199){
																connection.query('UPDATE player SET exp = exp+10 WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																text = "qualcosa che ti fa sentire un po' pi√π esperto di prima";
															}else{
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',200)', function(err, rows, fields) {
																	if (err) throw err;
																});
																text = "qualcosa che ti provoca un brivido nella schiena";
															}

															bot.sendMessage(message.chat.id, "Succede qualcosa, " + text + ", procedi alla prossima stanza con aria interrogativa...", dNext);

															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
														};
													};
												});
											}else if (dir == -9){
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Punta"],["Ignora"],["Torna al menu"]]
													}
												};

												var dOptions2 = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Gioca"],["Torna al menu"]]
													}
												};

												if (param != null){

													var id = param.split(":");

													connection.query('SELECT name FROM item WHERE id = ' + id[0], function (err, rows, fields){
														if (err) throw err;

														var name1 = rows[0].name; //player

														connection.query('SELECT name FROM item WHERE id = ' + id[1], function (err, rows, fields){
															if (err) throw err;

															var name2 = rows[0].name; //marinaio

															bot.sendMessage(message.chat.id, "Il marinaio aspetta il tuo turno avendo puntato *" + name2 + "*, mentre tu hai puntato *" + name1 + "* procedi?", dOptions2).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if (answer.text == "Gioca"){
																		bot.sendMessage(message.chat.id, "Inserisci un numero da 1 a 6 e lancia il dado, il vincitore sar√† colui che si avviciner√† di pi√π al risultato del dado", back).then(function() {
																			answerCallbacks[message.chat.id] = function(answer) {
																				if (answer.text == "Torna al menu"){
																					return;
																				}else{
																					var num1 = Math.round(parseInt(answer.text));
																					if ((num1 < 1) || (num1 > 6) || (isNaN(num1))){
																						bot.sendMessage(message.chat.id, "Il dado ha solo numeri da 1 a 6...", dBack);
																						return;
																					}
																					var num2 = Math.round(Math.random()*5+1);
																					var dado = Math.round(Math.random()*5+1);

																					var vic1 = Math.abs(dado-num1);
																					var vic2 = Math.abs(dado-num2);

																					var text = "Tu hai scelto il *" + num1 + "*\nIl marinaio ha scelto il *" + num2 + "*\n\nSul dado √® uscito il... *" + dado + "*!";
																					if (vic1 < vic2){
																						bot.sendMessage(message.chat.id, text + "\n\nHai VINTO!", dNext);
																						connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + id[0] + ')', function(err, rows, fields) {
																							if (err) throw err;
																						});
																						connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + id[1] + ')', function(err, rows, fields) {
																							if (err) throw err;
																						});
																					}else if (vic1 == vic2){
																						connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + id[0] + ')', function(err, rows, fields) {
																							if (err) throw err;
																						});
																						bot.sendMessage(message.chat.id, text + "\n\nPARITA'!", dNext);
																					}else{
																						bot.sendMessage(message.chat.id, text + "\n\nHai PERSO!", dNext);
																					}
																					connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																						if (err) throw err;
																					});
																					connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL, param = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																						if (err) throw err;
																					});
																				}
																			};
																		});
																	}
																}
															});
														});
													});
												}else{
													bot.sendMessage(message.chat.id, "Nella stanza incontri un marinaio con aria furba, ti propone una partita ai dadi, il vincitore otterr√† l'oggetto dell'avversario, vuoi partecipare?", dOptions).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {
															if (answer.text == "Punta"){
																bot.sendMessage(message.chat.id, "Inserisci il nome dell'oggetto da puntare, solo oggetti base e rarit√† fino alla L", back).then(function() {
																	answerCallbacks[message.chat.id] = function(answer) {
																		if (answer.text == "Torna al menu"){
																			return;
																		}else{
																			connection.query('SELECT item.id, item.rarity, item.name FROM item, inventory WHERE item.id = inventory.item_id AND player_id = ' + player_id + ' AND name = "' + answer.text + '" AND craftable = 0 AND item.rarity IN ("C","NC","R","UR","L")', function (err, rows, fields){
																				if (err) throw err;
																				if (Object.keys(rows).length == 0){
																					bot.sendMessage(message.chat.id, "L'oggetto inserito non √® valido", back);
																					return;
																				}

																				var id1 = rows[0].id;
																				var name1 = rows[0].name;
																				var rar = rows[0].rarity;

																				connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + id1 + ' LIMIT 1', function (err, rows, fields){
																					if (err) throw err;
																					connection.query('SELECT id, name FROM item WHERE craftable = 0 AND item.rarity = "' + rar + '" AND id != ' + id1 + ' ORDER BY RAND()', function (err, rows, fields){
																						if (err) throw err;

																						var id2 = rows[0].id;
																						var name2 = rows[0].name;

																						param = id1 + ":" + id2;

																						connection.query('UPDATE dungeon_status SET param = "' + param + '" WHERE player_id = ' + player_id, function (err, rows, fields){
																							if (err) throw err;
																						});
																						bot.sendMessage(message.chat.id, "Hai puntato il tuo oggetto", dNext);
																					});

																				});
																			});
																		}
																	};
																});
															}else if (answer.text == "Ignora"){
																bot.sendMessage(message.chat.id, "Ringrazi il marinaio dell'offerta e passi alla stanza successiva", dNext);
																connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
														}
													});
												}
											}else if (dir == -10){
												var dOptions = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [["Porta Normale"],["Porta Misteriosa"],["Torna al menu"]]
													}
												};

												bot.sendMessage(message.chat.id, "Oltrepassando la porta ti trovi davanti ad altre due porte, una con un'aria familiare, l'altra con un grosso punto interrogativo scolpito sopra, quale apri?", dOptions).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Porta Normale"){

															bot.sendMessage(message.chat.id, "Scegli la solita porta arrugginita e procedi alla stanza successiva", dNext);

															connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
															connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
															});
														}else if (answer.text == "Porta Misteriosa"){
															connection.query('SELECT room_id FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;

																var room_id = parseInt(rows[0].room_id);

																connection.query('SELECT rooms FROM dungeon_list WHERE id = ' + dungeon_id, function(err, rows, fields) {
																	if (err) throw err;
																	var rooms = rows[0].rooms;

																	var min = room_id-10;
																	var max = room_id+10;

																	if (min <= 0){
																		min = 1;
																	}
																	if (max > rooms){
																		max = rooms;
																	}

																	var room = room_id;
																	while (room == room_id){
																		room = Math.round(getRandomArbitrary(min, max));
																	}

																	bot.sendMessage(message.chat.id, "Apri lentamente la porta e la attraversi, ritrovandoti alla stanza numero *" + room + "* del dungeon!", dNext);

																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = ' + room + ', last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																});
															});
														}
													};
												});
											}else if (dir == -11){

												connection.query('SELECT amount FROM dungeon_well WHERE dungeon_id = ' + dungeon_id, function(err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0){
														bot.sendMessage(message.chat.id, "Vedi un pozzo in lontananza, ma √® diroccato e non puoi far altro che proseguire", dNext);
														connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
														connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
														return;
													}

													var stored_money = rows[0].amount;
													var min = player_rank*12;

													if (min == 0){
														min = 10;
													}

													var dOptions = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": [[min + " ¬ß"],["Prova a raccoglierle"],["Torna al menu"]]
														}
													};

													var text = "";
													if (stored_money == 0){
														text = "_Neanche l'ombra di una monetina..._";
													}else if (stored_money < 10000){
														text = "_Una piccola quantit√† di monetine..._";
													}else if (stored_money < 50000){
														text = "_Alcune monetine..._";
													}else if (stored_money < 100000){
														text = "_Un bel gruzzolo..._";
													}else{
														text = "_Un ottimo malloppo..._";
													}

													bot.sendMessage(message.chat.id, "Una luce esagerata ti avvolge, esci in un piccolo spiazzo di prato con un pozzo al centro ed uno schermino appoggiato sopra, puoi buttare una porzione di monetine al suo interno, sembra l'unico modo per proseguire, oppure puoi cercare di raccogliere tutto il malloppo.\n\nLo schermino segna: '" + text + "', butti...", dOptions).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {
															if (answer.text.indexOf("¬ß") != -1){

																var money = parseInt(answer.text.replace("¬ß", ""));

																if (money < min){
																	bot.sendMessage(message.chat.id, "Inserisci almeno il valore minimo: " + min + " ¬ß!", dBack);
																	return;
																}

																connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	var mymoney = rows[0].money;

																	if (mymoney < money){
																		bot.sendMessage(message.chat.id, "Non hai cos√¨ tante monetine...", dBack);
																		return;
																	}

																	if (money <= 0){
																		bot.sendMessage(message.chat.id, "Non essere cos√¨ tirchio!", dNext);
																		return;
																	}

																	if (mymoney == 0){
																		bot.sendMessage(message.chat.id, "Non puoi procedere senza monete!", dBack);
																		return;
																	}

																	connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Hai gettato nel pozzo *" + money + "* monetine!\nOra prosegui alla prossima stanza", dNext);

																		connection.query('UPDATE dungeon_well SET amount = amount+' + money + ' WHERE dungeon_id = ' + dungeon_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																		connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	});
																});
															}else if (answer.text == "Prova a raccoglierle"){
																var rand = Math.random()*100;

																if (stored_money == 0){
																	bot.sendMessage(message.chat.id, "Il pozzo √® vuoto, √® inutile cercare di prendere qualcosa", dBack);
																	return;
																}

																connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;

																	var mymoney = rows[0].money;
																	if (mymoney < Math.round(stored_money)){
																		bot.sendMessage(message.chat.id, "Il pozzo √® troppo alto per te! Non puoi farcela, procedi in altro modo", dBack);
																		return;
																	}

																	if (mymoney == 0){
																		bot.sendMessage(message.chat.id, "Non puoi procedere senza monete!", dBack);
																		return;
																	}

																	if (rand < 40){
																		connection.query('UPDATE player SET money = money+' + stored_money + ' WHERE id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Sei tornato tutto intero con un sacchettino contenente *" + formatNumber(stored_money) + "* monetine!\nOra prosegui alla prossima stanza", dNext);
																		});
																		connection.query('UPDATE dungeon_well SET amount = 0 WHERE dungeon_id = ' + dungeon_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}else{
																		connection.query('UPDATE player SET money = money-' + stored_money + ' WHERE id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Purtroppo sei caduto nel pozzo e per ritirarti su ti sono cadute delle monetine, ne hai perse quindi *" + formatNumber(stored_money) + "*!\nOra prosegui alla prossima stanza", dNext);
																		});
																		connection.query('UPDATE dungeon_well SET amount = amount+' + stored_money + ' WHERE dungeon_id = ' + dungeon_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																	connection.query('UPDATE dungeon_status SET room_time = "' + room_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	connection.query('UPDATE dungeon_status SET room_id = room_id+1, last_dir = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																});
															}
														}
													});
												});
											}else{
												bot.sendMessage(message.chat.id, "Direzione non valida, segnala a @fenix45 questo valore: " + dir, dBack);
											}
										}
									});
								});
							});
						};
					});
				}
			});
		});
	});
});

function dungeonToDesc(d){
	if (d > 10){
		return "Mostro";
	}else if (d == 1){
		return "Scrigno";
	}else if (d == 2){
		return "Monete";
	}else if (d == 3){
		return "Trappola";
	}else if (d == 4){
		return "Viandante";
	}else if (d == 5){
		return "Leve";
	}else if (d == 6){
		return "Persona in pericolo";
	}else if (d == 7){
		return "Vecchina";
	}else if (d == 8){
		return "Pulsantiera";
	}else if (d == 9){
		return "Stanza divisa in due";
	}else if (d == 10){
		return "Spada o bottino";
	}else if (d == 0){
		return "Fontana di Mana";
	}else if (d == -1){
		return "Fessura del Muro";
	}else if (d == -2){
		return "Ascia Gigante";
	}else if (d == -3){
		return "Tre incisioni";
	}else if (d == -4){
		return "Predone";
	}else if (d == -5){
		return "Meditazione";
	}else if (d == -6){
		return "Desideri";
	}else if (d == -7){
		return "Dragone del Soldato";
	}else if (d == -8){
		return "Stanza Vuota";
	}else if (d == -9){
		return "Marinaio ed il dado";
	}else if (d == -10){
		return "Due Porte";
	}else if (d == -11){
		return "Pozzo Ricco";
	}
}

function findMissing(numArray){
	var missing = 0;
	for(var i = 1; i < numArray.length; i++) {
		if(numArray[i] - numArray[i-1] != 1) {
			missing = numArray[i];
			console.log("MISSING: " + parseInt(parseInt(missing)-1));
			return parseInt(parseInt(missing)-1);
		};
	};
};

bot.onText(/attacca$|^Lancia ([a-zA-Z ]+) ([0-9]+)/i, function(message, match) {

	var dYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Si"],["Torna al dungeon"]]
		}
	};

	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		var player_id = rows[0].id;
		var player_weapon_id = rows[0].weapon_id;
		var player_weapon2_id = rows[0].weapon2_id;
		var player_weapon3_id = rows[0].weapon3_id;
		var reborn = rows[0].reborn;
		var class_id = rows[0].class;
		var player_paralyzed = rows[0].paralyzed;
		var player_charm_id = rows[0].charm_id;

		var critical = parseInt(rows[0].weapon_crit);
		var critical_armor = parseInt(rows[0].weapon2_crit);
		var critical_shield = parseInt(rows[0].weapon3_crit);
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;

		if ((boost_mission == 0) && (boost_id != 0)){
			connection.query('UPDATE player SET boost_id = 0 WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});
		}

		if (player_charm_id == 404){
			critical += 6;
		}
		if (player_charm_id == 493){
			critical += 2;
		}
		if (player_charm_id == 494){
			critical += 4;
		}
		if (player_charm_id == 495){
			critical_armor += 3;
		}
		if (player_charm_id == 496){
			critical_shield += 3;
		}
		if (charm_id == 696){
			critical += 5;
			critical_armor += 5;
			critical_shield += 3;
		}
		if ((class_id == 2) && (reborn == 3)){
			critical_armor += 5;
		}
		if ((class_id == 2) && (reborn >= 4)){
			critical_armor += 7;
			critical_shield += 7;
		}
		if ((class_id == 4) && (reborn == 3)){
			critical += 2;
			critical_armor += 2;
			critical_shield += 2;
		}
		if ((class_id == 4) && (reborn >= 4)){
			critical += 7;
			critical_armor += 7;
			critical_shield += 7;
		}
		if ((class_id == 5) && (reborn == 3)){
			critical_shield += 3;
		}
		if ((class_id == 5) && (reborn >= 4)){
			critical_shield += 5;
		}
		if ((class_id == 6) && (reborn == 3)){
			critical_armor += 2;
		}
		if ((class_id == 6) && (reborn == 3)){
			critical_shield += 2;
		}
		if ((class_id == 6) && (reborn >= 4)){
			critical_armor += 7;
		}
		if ((class_id == 6) && (reborn >= 4)){
			critical_shield += 7;
		}
		if ((class_id == 6) && (reborn == 5)){
			critical_armor += 7;
		}
		if ((class_id == 6) && (reborn == 5)){
			critical_shield += 7;
		}
		if ((class_id == 8) && (reborn == 3)){
			critical_shield += 5;
		}
		if ((class_id == 8) && (reborn >= 4)){
			critical_shield += 7;
		}
		if ((class_id == 8) && (reborn == 5)){
			critical += 7;
		}
		if ((class_id == 9) && (reborn == 3)){
			critical += 2;
			critical_shield += 2;
		}
		if ((class_id == 9) && (reborn >= 4)){
			critical += 7;
			critical_shield += 7;
		}

		var danno = Math.round(Math.random()*(rows[0].exp/15+rows[0].weapon)+rows[0].weapon);
		danno += rows[0].weapon_enchant;

		var charm_id = rows[0].charm_id;
		var player_exp = rows[0].exp;
		var player_life = rows[0].life;
		var player_total_life = rows[0].total_life;
		var rank = rows[0].rank;
		var automagic1 = rows[0].weapon_enchant_bonus;
		var automagic2 = rows[0].weapon2_enchant_bonus;
		var automagic3 = rows[0].weapon3_enchant_bonus;
		var boost_cast = rows[0].boost_cast;

		if (player_life <= 0){
			bot.sendMessage(message.chat.id, "Non puoi combattere da morto!", revive);
			return;
		}

		if (charm_id == 62){
			danno += 5;
		}else if (charm_id == 184){
			danno += 15;
		}else if (charm_id == 188){
			danno += 20;
		}else if (charm_id == 698){
			danno += 30;
		}

		var bonus = 0;
		if (rows[0].weapon2 < 0){
			var bonus = Math.abs(rows[0].weapon2)+Math.abs(rows[0].weapon3)+rows[0].weapon3_enchant+rows[0].weapon2_enchant;
			bonus = Math.round(Math.random()*((rows[0].exp/10+bonus)/2)+bonus);
		}

		danno = parseInt(danno);
		bonus = parseInt(bonus);

		var critical_rand = Math.round(Math.random()*100)+1;
		var crit_bool = 0;
		var crit_txt = "";

		if (crazyMode == 1){
			danno = danno*2;
		}

		var magic = 0;
		var magicId = 0;
		var magicPow = 0;
		var magicPowBase = 0;

		if (message.text.indexOf("Lancia") != -1){
			if (rows[0].magic_to == 2){
				//match[1] = match[1].slice(0, -1);
				if (match[1] == "Furia dei Mari"){
					magic = 1;
				}else if (match[1] == "Tempesta Folgorante"){
					magic = 2;
				}else if (match[1] == "Impeto di Fiamme"){
					magic = 3;
				}else if (match[1] == "Ira Astrale"){
					magic = 4;
				}
			}else{
				return;
			}
		}

		if (rows[0].dungeon_time != null){
			var d = new Date(rows[0].dungeon_time);
			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

			bot.sendMessage(message.chat.id, "Puoi tornare nei dungeon alle " + short_date, back);
			return;
		}

		var pow = 0;
		if (match[2] != undefined){
			pow = match[2];
		}

		var magicDouble = 0;
		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 10', function(err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0){
				abBonus = parseInt(rows[0].ability_level)*rows[0].val;
			}

			connection.query('SELECT type, id, power, quantity FROM magic WHERE player_id = ' + player_id + ' AND power = ' + pow + ' AND type = ' + magic, function(err, rows, fields) {
				if (err) throw err;

				if (magic != 0){
					if (Object.keys(rows).length > 0){
						if (rows[0].quantity == 0){
							bot.sendMessage(message.chat.id, "Hai terminato gli utilizzi dell'incantesimo selezionato!", bossKb);
							return;
						}else{
							magicId = rows[0].id;
							magicPow = rows[0].power;
							magicPowBase = magicPow;

							var rand = Math.random()*100;
							if ((class_id == 4) && ((magic == 3) || (magic == 4)) && (reborn == 5)){
								abBonus += 25;
							}
							if (rand < abBonus){
								magicDouble = 1;
								//console.log("DUNG_DOUBLE");
							}
						}
					}else{
						bot.sendMessage(message.chat.id, "Non possiedi l'incantesimo selezionato!", bossKb);
						return;
					}
				}

				var automagic = 0;

				if (charm_id == 698){
					boost_cast += 3;
				}

				if (magic == 0){
					var magicrand = Math.random()*100;
					if (magicrand < (5+boost_cast)){
						if (player_weapon_id == 630){
							magic = 2;
							automagic = 1;
							magicPow = 50;
						}else if (player_weapon_id == 631){
							magic = 3;
							automagic = 1;
							magicPow = 50;
						}else if (player_weapon_id == 632){
							magic = 1;
							automagic = 1;
							magicPow = 50;
						}
					}
					if (magicrand < (10+boost_cast)){
						if (player_weapon_id == 638){
							magic = 2;
							automagic = 1;
							magicPow = 200;					
						}else if (player_weapon_id == 639){
							magic = 3;
							automagic = 1;
							magicPow = 150;
						}else if (player_weapon_id == 640){
							magic = 1;
							automagic = 1;
							magicPow = 150;
						}
					}
					if ((magicrand > 80) && (automagic1 > 0)){
						var magicrand2 = Math.random()*100;
						if (automagic1 == 1){
							magic = 1;
							automagic = 1;
							magicPow = 50;
						}else if (automagic1 == 2){
							magic = 2;
							automagic = 1;
							magicPow = 150;
						}else{
							magic = 3;
							automagic = 1;
							magicPow = 50;
						}
					}
				}

				var check = 0;
				if (magicDouble == 1){
					if (automagic == 0){
						if ((class_id == 2) && (reborn == 3)){
							magicPow += magicPow*0.1;
							magicPow += magicPowBase;
							check = 1;
						}
						if ((class_id == 2) && (reborn == 4)){
							magicPow += magicPow*0.25;
							magicPow += magicPowBase;
							check = 1;
						}
						if ((class_id == 2) && (reborn == 5)){
							magicPow += magicPow*0.25;
							magicPow += magicPow*0.50;
							magicPow += magicPowBase;
							check = 1;
						}
					}
					if ((class_id == 3) && (reborn == 5)){
						magicPow += magicPow*0.3;
						magicPow += magicPowBase;
						check = 1;
					}
					if (check == 0){
						magicPow += magicPowBase;
					}
				}else{
					if (automagic == 0){
						if ((class_id == 2) && (reborn == 3)){
							magicPow += magicPow*0.1;
						}
						if ((class_id == 2) && (reborn == 4)){
							magicPow += magicPow*0.25;
						}
						if ((class_id == 2) && (reborn == 5)){
							magicPow += magicPow*0.25;
							magicPow += magicPow*0.50;
						}
					}
					if ((class_id == 3) && (reborn == 5)){
						magicPow += magicPow*0.3;
					}
				}

				connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 1', function(err, rows, fields) {
					if (err) throw err;

					var abBonus = 0;
					if (Object.keys(rows).length > 0){
						abBonus = rows[0].ability_level*rows[0].val;
						critical += abBonus;
						critical_armor += abBonus;
						critical_shield += abBonus;
					}

					connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 3', function(err, rows, fields) {
						if (err) throw err;

						var abBonus2 = 0;
						if (Object.keys(rows).length > 0){
							abBonus2 = parseInt(rows[0].ability_level)*rows[0].val;
						}

						connection.query('SELECT damage, critical, defense, claws, saddle FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length > 0){
								if ((class_id == 7) && (reborn > 1)){
									rows[0].claws += rows[0].claws*0.5;
								}
								if ((class_id == 7) && (reborn > 1)){
									rows[0].saddle += rows[0].saddle*0.5;
								}
								if ((class_id == 7) && (reborn >= 4)){
									rows[0].damage += rows[0].damage*0.5;
								}
								if ((class_id == 7) && (reborn >= 4)){
									rows[0].defense += rows[0].defense*0.5;
								}
								danno += parseInt(rows[0].damage);
								danno += parseInt(rows[0].claws);
								bonus += parseInt(rows[0].defense);
								bonus += parseInt(rows[0].saddle);
								var dragon_crit = rows[0].critical;
								if (charm_id == 602){
									danno += 25;
									dragon_crit += 10;
								}
								if (charm_id == 695){
									danno += 30;
									dragon_crit += 15;
								}

								if ((class_id == 7) && (reborn == 3)){
									dragon_crit += 5;
								}
								if ((class_id == 7) && (reborn >= 4)){
									dragon_crit += 7;
								}
								if ((class_id == 7) && (reborn == 5)){
									critical += dragon_crit/2;
								}
							}

							if ((class_id == 8) && (reborn > 1)){
								danno += danno*0.1;
							}
							if ((class_id == 8) && (reborn == 5)){
								danno += danno*0.1;
							}
							if ((class_id == 8) && ((reborn == 3) || (reborn >= 4))){
								danno += danno*0.07;
							}

							connection.query('SELECT * FROM dungeon_status WHERE player_id = ' + player_id + ' AND monster_id != 0', function(err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Non sei in combattimento contro un mostro!", back);
									return;
								}

								var monster_id = rows[0].monster_id;
								var monster_life = rows[0].monster_life;
								var boss_battle = rows[0].boss_battle;
								var room_id = rows[0].room_id;
								var dungeon_id = rows[0].dungeon_id;
								var pass_id = rows[0].pass;

								var paralyzed = rows[0].monster_paralyzed;
								var critic = rows[0].monster_critic;

								connection.query('SELECT * FROM dungeon_monsters WHERE id = ' + monster_id, function(err, rows, fields) {
									if (err) throw err;

									var monster_name = rows[0].name;
									var monster_total_life = rows[0].life;
									var monster_level = rows[0].level;
									var weapon_id = rows[0].weapon_id;
									var weapon2_id = rows[0].weapon2_id;
									var weapon3_id = rows[0].weapon3_id;
									var charm_id = rows[0].charm_id;

									connection.query('SELECT name, power, critical FROM item WHERE id = ' + weapon_id, function(err, rows, fields) {
										if (err) throw err;

										var weapon_dmg = rows[0].power;
										var weapon_name = rows[0].name + " (+" + rows[0].power + ")";
										var en_crit = rows[0].critical;

										if (weapon_id == 221){
											weapon_dmg = Math.round(50+(monster_level/2));
										}

										connection.query('SELECT name, power_armor, critical FROM item WHERE id = ' + weapon2_id, function(err, rows, fields) {
											if (err) throw err;

											var weapon2_name = "-";
											var weapon2_dmg = 0;
											var en_crit2 = 0;
											if (Object.keys(rows).length > 0){
												weapon2_dmg = rows[0].power_armor;
												weapon2_name = rows[0].name + " (" + rows[0].power_armor + ")";
												en_crit2 = rows[0].critical;
											}

											if (weapon2_id == 577){
												power = Math.round(25+(monster_level/2));
												power = -Math.abs(power);
												extra = ", Probab. /2: " + crit + "%";
											}

											connection.query('SELECT name, power_shield, critical FROM item WHERE id = ' + weapon3_id, function(err, rows, fields) {
												if (err) throw err;

												var weapon3_name = "-";
												var weapon3_dmg = 0;
												var en_crit3 = 0;
												if (Object.keys(rows).length > 0){
													weapon3_dmg = rows[0].power_shield;
													weapon3_name = rows[0].name + " (" + rows[0].power_shield + ")";
													en_crit3 = rows[0].critical;
												}

												if (weapon3_id == 600){
													power = Math.round(20+(monster_level/2));
													power = -Math.abs(power);
												}

												connection.query('SELECT name FROM item WHERE id = ' + charm_id, function(err, rows, fields) {
													if (err) throw err;

													var charm_name = "-";
													if (Object.keys(rows).length > 0){
														charm_name = rows[0].name;
													}

													var dBattleM = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": [["Attacca " + monster_name],["Incantesimi"],["Scappa","‚öí","Torna al menu"]]
														}
													};

													var dNext = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": [["Prosegui il dungeon"],["Torna al menu"]]
														}
													};

													var dBattle = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": [["Attacca"],["Torna al menu"]]
														}
													};

													var status = "Normale";

													if (paralyzed > 0){
														status = "Paralizzato (" + paralyzed + " turni)";
													}
													if (critic > 0){
														status = "Vulnerabile (" + critic + " turni)";
													}

													/*
													if ((paralyzed > 0) && (automagic == 1) && (magic == 2)){
														automagic = 0;
														magic = 0;
													}
													if ((critic > 0) && (automagic == 1) && (magic == 4)){
														automagic = 0;
														magic = 0;
													}
													*/

													if ((paralyzed > 0) && (automagic == 1) && (magic == 2)){
														automagic = 0;
														magic = 0;
														connection.query('UPDATE player SET boost_cast = boost_cast+5 WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}

													bot.sendMessage(message.chat.id,"*" + monster_name + "*\nStato: " + status + "\nSalute: *" + formatNumber(monster_life) + "* hp\n" +
																	"Arma: " + weapon_name + "\n" +
																	"Armatura: " + weapon2_name + "\n" +
																	"Scudo: " + weapon3_name + "\n" +
																	"Talismano: " + charm_name + "\n" +
																	"\nLa tua salute: *" + formatNumber(player_life) + "* hp", dBattleM).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {

															if (answer.text == "Scappa"){
																bot.sendMessage(message.chat.id, "Sicuro di voler uscire dal dungeon?", dYesNo).then(function() {
																	answerCallbacks[message.chat.id] = function(answer) {
																		if (answer.text.toLowerCase() == "si"){

																			var rand = Math.random()*100;
																			if (rand < 50){
																				var dmg = Math.round(player_total_life*50/100);
																			}else{
																				var dmg = Math.round(player_total_life*40/100);
																			}

																			var exText = "";

																			connection.query('UPDATE player SET life = life-' + dmg + ' WHERE id = ' + player_id, function (err, rows, fields) {
																				if (err) throw err;
																			});

																			if (player_life - dmg <= 0){
																				exText = "ma sei stato ucciso e quindi portato fuori dal dungeon ed il tuo rango viene ridotto.";

																				var d = new Date();
																				d.setHours(d.getHours() + wait_dungeon_long);
																				var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																				connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																				connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																					if (err) throw err;
																				});
																				if (rank > 0){
																					connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																						if (err) throw err;
																					});
																				}
																				connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			}else{
																				exText = "e sei sopravvissuto, di conseguenza torni alla stanza precedente, ma impiegherai un po' di tempo per riprenderti";

																				var d = new Date();
																				d.setHours(d.getHours() + (wait_dungeon-1));
																				var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																				connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			}
																			connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																			});
																			bot.sendMessage(message.chat.id, "Tentando la fuga il mostro ti ha colpito e hai perso " + dmg + " hp, " + exText, back);
																		}
																	}
																});
																return;
															}
															if (answer.text.indexOf("Attacca") == -1){
																return;
															}

															if (paralyzed > 0){
																connection.query('UPDATE dungeon_status SET monster_paralyzed = monster_paralyzed-1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
															if (critic > 0){
																connection.query('UPDATE dungeon_status SET monster_critic = monster_critic-1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}

															if (magic != 0){
																setAchievement(message.chat.id, player_id, 6, 1);
															}

															var meParalyzed = 0;
															if (player_paralyzed > 0){
																connection.query('UPDATE player SET paralyzed = paralyzed-1 WHERE id = ' + player_id, function(err, rows, fields){
																	if (err) throw err;
																});
																meParalyzed = 1;
																danno = 0;
																magic = 0;
															}

															if ((magic == 2) && (meParalyzed == 0)){
																var turn = 0;
																if (magicPow < 100){
																	turn = 1;
																}else if (magicPow < 200){
																	turn = 2;
																}else if (magicPow < 250){
																	turn = 3;
																}else if (magicPow < 300){
																	turn = 4;
																}else if (magicPow < 350){
																	turn = 5;
																}else if (magicPow < 400){
																	turn = 6
																}else{
																	turn = 7;
																}
																var r = Math.random()*100;
																if ((automagic == 1) && (r < 50))
																	turn++;
																paralyzed = turn;
																connection.query('UPDATE dungeon_status SET monster_paralyzed = ' + (turn-1) + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	if (magicDouble == 1){
																		bot.sendMessage(message.chat.id, "Il mostro √® stato paralizzato per " + turn + " turni (x2)!");
																	}else{
																		bot.sendMessage(message.chat.id, "Il mostro √® stato paralizzato per " + turn + " turni!");
																	}

																	connection.query('UPDATE player SET boost_cast = 0 WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																});
															}

															if ((magic == 4) && (meParalyzed == 0)){
																var turn = 0;
																if (magicPow < 100){
																	turn = 1;
																}else if (magicPow < 200){
																	turn = 2;
																}else if (magicPow < 250){
																	turn = 3;
																}else if (magicPow < 300){
																	turn = 4;
																}else if (magicPow < 350){
																	turn = 5;
																}else if (magicPow < 400){
																	turn = 6;
																}else{
																	turn = 7;
																}
																var r = Math.random()*100;
																if ((automagic == 1) && (r < 50))
																	turn++;
																critic = turn;
																connection.query('UPDATE dungeon_status SET monster_critic = ' + turn + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																	if (magicDouble == 1){
																		bot.sendMessage(message.chat.id, "Il mostro √® vulnerabile ai colpi critici per " + turn + " turni (x2)!");
																	}else{
																		bot.sendMessage(message.chat.id, "Il mostro √® vulnerabile ai colpi critici per " + turn + " turni!");
																	}
																});
															}

															if ((magic != 0) && (automagic == 0) && (meParalyzed == 0)){
																connection.query('UPDATE magic SET quantity = quantity - 1 WHERE id = ' + magicId, function (err, rows, fields){
																	if (err) throw err;
																	//console.log("Magia con ID " + magicId + " utilizzata");
																});
															}

															connection.query('SELECT * FROM dungeon_status WHERE player_id = ' + player_id + ' AND monster_id != 0', function(err, rows, fields) {
																if (err) throw err;

																if (paralyzed == 0)
																	paralyzed = rows[0].monster_paralyzed;
																if (critic == 0)
																	critic = rows[0].monster_critic;

																if (critic != 0){
																	critical += 50;
																}

																var critical_rand = Math.round(Math.random()*100)+1;

																//console.log("CRITICO DUNGEON: " + critical_rand + " - " + critical + " " + meParalyzed);

																if ((critical_rand <= critical) && (meParalyzed == 0)){
																	danno = danno*2;
																	crit_bool = 1;
																	setAchievement(message.chat.id, player_id, 33, 1);
																	crit_txt = " CRITICI";
																	//console.log("CRITICO DUNGEON");
																}

																var magic_txt = "";
																if ((magic == 3) && (meParalyzed == 0)){
																	var prop = 100*magicPow/200;
																	danno = danno*(prop/15);
																	if (magicDouble == 1){
																		magic_txt = " con un incantesimo (x2)";
																	}else{
																		magic_txt = " con un incantesimo";
																	}
																}

																var magic_txt2 = "";
																var extra_bonus = 0;
																if ((magic == 1) && (meParalyzed == 0)){
																	var prop = 100*magicPow/150;
																	extra_bonus = bonus*(prop/5);
																	if (magicDouble == 1){
																		magic_txt2 = ", assorbito grazie ad un incantesimo (x2)";
																	}else{
																		magic_txt2 = ", assorbito grazie ad un incantesimo";
																	}
																}

																var min = (monster_level*7)+weapon_dmg;
																var max = min*1.5;
																var damage = Math.round(Math.random()*max+min)-bonus;

																var heal = Math.round(Math.max(player_total_life*(magicPow/1000), (player_total_life*((magicPow/900)+0.2)) - (damage*20)));

																damage = damage-extra_bonus;

																if (charm_id == 404){
																	en_crit += 6;
																}
																if (charm_id == 493){
																	en_crit += 2;
																}
																if (charm_id == 494){
																	en_crit += 4;
																}
																if (charm_id == 495){
																	en_crit2 += 3;
																}
																if (charm_id == 496){
																	en_crit3 += 3;
																}
																if (charm_id == 696){
																	en_crit += 5;
																	en_crit2 += 5;
																	en_crit3 += 3;
																}

																if (charm_id == 63){
																	damage = damage-5;
																}else if (charm_id == 186){
																	damage = damage-15;
																}else if (charm_id == 189){
																	damage = damage-20;
																}

																if (player_charm_id == 698){
																	en_crit -= 5;
																	en_crit2 -= 5;
																	en_crit3 -= 5;
																}

																var critical_rand2 = Math.round(Math.random()*100)+1;
																var crit_txt2 = "";

																if ((critical_rand2 <= critical_armor) && (meParalyzed == 0)){
																	damage = damage/1.5;
																	damage = damage/1.5;
																	crit_txt2 = ", ridotti grazie alla tua corazza";
																	setAchievement(message.chat.id, player_id, 31, 1);
																}

																if (player_charm_id == 63){
																	damage = damage-5;
																}else if (player_charm_id == 186){
																	damage = damage-15;
																}else if (player_charm_id == 189){
																	damage = damage-20;
																}

																if (charm_id == 62){
																	damage += 5;
																}else if (charm_id == 184){
																	damage += 15;
																}else if (charm_id == 188){
																	damage += 20;
																}else if (charm_id == 698){
																	damage += 30;
																}

																if ((class_id == 2) && (reborn > 1)){
																	damage += damage*0.05;
																}
																if ((class_id == 6) && (reborn > 1)){
																	damage -= damage*0.15;
																}
																if ((class_id == 8) && (reborn > 1)){
																	damage += damage*0.1;
																}
																if ((class_id == 8) && (reborn == 5)){
																	damage += damage*0.1;
																}
																if ((class_id == 8) && ((reborn == 3) || (reborn >= 4))){
																	damage += damage*0.07;
																}
																if ((class_id == 9) && (reborn > 1)){
																	damage += damage*0.1;
																}

																damage = Math.round(damage);

																var critical_rand = Math.random()*100;
																var en_crit_txt = "";
																if ((critical_rand <= en_crit) && (paralyzed == 0)){
																	damage = damage*2;
																	en_crit_bool = 1;
																	en_crit_txt = " CRITICI ";
																}

																if (damage <= 0){
																	damage = 0;
																}

																var critical_rand3 = Math.round(Math.random()*100)+1;
																var crit_bool3 = 0;
																var crit_txt3 = "";

																if ((critical_rand3 <= critical_shield) && (meParalyzed == 0)){
																	damage = 0;
																	crit_bool3 = 1;
																	crit_txt3 = ", assorbito completamente dallo scudo";
																	setAchievement(message.chat.id, player_id, 32, 1);
																}

																danno = danno-(Math.abs(weapon2_dmg)+Math.abs(weapon3_dmg));

																var enemy_magic = "";
																var enemy_magicRand = Math.random()*100;
																var heal_enemy = 0;
																var restored = "";

																if ((monster_level >= 50) && (paralyzed == 0)){
																	if ((monster_level-49) > enemy_magicRand){
																		var rand = Math.random()*100;

																		if (rand < 30){
																			var r = 100;
																			rand = Math.random()*100;
																			if ((player_weapon3_id == 672) || (automagic3 == 3)){
																				r = 50;
																			}
																			if (r >= rand){
																				enemy_magic = "Impeto di Fiamme";
																				damage = damage*4;
																				if ((weapon2_id == 688) || (automagic2 == 3)){
																					var r2 = Math.random()*100;
																					if (r2 < 50){
																						var restore = Math.round(getRandomArbitrary(100,300));
																						restored = " Hai assorbito " + restore + " Mana Rosso dall'incantesimo!";
																						connection.query('UPDATE event_mana_status SET mana_3 = mana_3 + ' + restore + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;
																						});
																					}
																				}
																			}
																		}else if (rand < 60){
																			var r = 100;
																			rand = Math.random()*100;
																			if ((player_weapon3_id == 673) || (automagic3 == 1)){
																				r = 50;
																			}
																			if (r >= rand){
																				enemy_magic = "Furia dei Mari";
																				heal_enemy = getRandomArbitrary(monster_total_life*0.01, monster_total_life*0.1);
																				if (monster_life+heal_enemy > monster_total_life){
																					heal_enemy = monster_total_life-monster_life;
																				}
																				if (heal_enemy < 0)
																					heal_enemy = Math.abs(heal_enemy);
																				if (heal_enemy > 50000){
																					heal_enemy = 50000;
																				}
																				heal_enemy = Math.round(heal_enemy);
																				connection.query('UPDATE dungeon_status SET monster_life = monster_life+' + heal_enemy + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																					if (err) throw err;
																				});
																				if ((weapon2_id == 689) || (automagic2 == 1)){
																					var r2 = Math.random()*100;
																					if (r2 < 50){
																						var restore = Math.round(getRandomArbitrary(100,300));
																						restored = " Hai assorbito " + restore + " Mana Blu dall'incantesimo!";
																						connection.query('UPDATE event_mana_status SET mana_1 = mana_1 + ' + restore + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;
																						});
																					}
																				}
																			}
																		}else{
																			var r = 100;
																			rand = Math.random()*100;
																			if ((player_weapon3_id == 671)  || (automagic3 == 2)){
																				r = 50;
																			}
																			if ((r >= rand) && (meParalyzed == 0)){
																				enemy_magic = "Tempesta Folgorante";
																				connection.query('UPDATE player SET paralyzed = 2 WHERE id = ' + player_id, function(err, rows, fields) {
																					if (err) throw err;
																				});
																				if ((weapon2_id == 690) || (automagic2 == 2)){
																					var r2 = Math.random()*100;
																					if (r2 < 50){
																						var restore = Math.round(getRandomArbitrary(100,300));
																						restored = " Hai assorbito " + restore + " Mana Giallo dall'incantesimo!";
																						connection.query('UPDATE event_mana_status SET mana_2 = mana_2 + ' + restore + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;
																						});
																					}
																				}
																			}
																		}
																	}
																}

																var multi = Math.round(Math.floor(player_exp/10)/10);
																if (multi >= 3){
																	danno = danno*3;
																	damage = damage*3;
																}else{
																	danno = danno*multi;
																	danno = danno*multi;
																}

																if ((boost_mission > 0) && (boost_id == 6)){
																	connection.query('UPDATE player SET boost_mission = boost_mission-1 WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	danno = danno*2;
																}

																var en_rand = Math.random()*100;
																var crit_en2 = "";
																if (en_rand <= en_crit2){
																	danno = danno/2;
																	crit_en2 = ", ridotti a causa della sua corazza";
																}

																en_rand = Math.random()*100;
																if (en_rand <= en_crit3){
																	danno = 0;
																}

																if (danno < 0)
																	danno = 0;

																danno = Math.round(danno);

																var lifesum = monster_life - danno;
																if (lifesum <= 0){
																	connection.query('UPDATE dungeon_status SET monster_id = 0, monster_life = 0, last_dir = NULL, monster_paralyzed = 0, monster_critic = 0, room_id = room_id+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;

																		var chest_id = Math.ceil(room_id/10);
																		var money = 0;
																		var moneyText = "";
																		var rand = Math.random()*100;
																		var exp = 1;

																		if (chest_id >= 4){
																			chest_id = 4;
																		}

																		money = Math.round(Math.random()*(room_id*10)+100+(rank*2));
																		var now = new Date();
																		if (now.getHours() < 6){
																			money = money*2;
																		}
																		if (crazyMode == 1){
																			money = money*5;
																		}
																		moneyText = ", " + money + " ¬ß";

																		if (rand < 15){
																			chest_id++;
																		}
																		if (boss_battle == 1){
																			chest_id++;
																		}
																		if (crazyMode == 1){
																			if (chest_id < 6)
																				chest_id++;
																		}

																		connection.query('SELECT name FROM chest WHERE id = ' + chest_id, function(err, rows, fields) {
																			if (err) throw err;
																			var chestName = rows[0].name;
																			connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chest_id + ')', function (err, rows, fields) {
																				if (err) throw err;

																				var extra = "";
																				if (enemy_magic == "Tempesta Folgorante"){
																					extra = "\nMa prima di esalare l'ultimo respiro, lancia " + enemy_magic;
																				}
																				bot.sendMessage(message.chat.id, "Hai ucciso il mostro, infliggendo " + formatNumber(danno) + " danni, ottenuto *" + exp + " exp*" + moneyText + " ed uno *" + chestName + "*!" + extra + restored, dNext);

																				setAchievement(message.chat.id, player_id, 3, 1);

																				if (boss_battle == 1){
																					connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																						if (err) throw err;

																						var rankPoint = 1;
																						if (luckyMode == 1){
																							var d = new Date();
																							if (d.getDay() == 6){
																								var rand = Math.random()*100;
																								if (rand < 25){
																									rankPoint = 2;
																								}
																							}else if (d.getDay() == 0){
																								var rand = Math.random()*100;
																								if (rand < 25){
																									rankPoint = 2;
																								}else if ((rand > 25) && (rand < 50)){
																									rankPoint = 0;
																								}
																							}
																						}

																						var refill = "";
																						if (player_life < player_total_life/2){
																							connection.query('UPDATE player SET life = ROUND(total_life/2,0) WHERE id = ' + player_id, function(err, rows, fields){
																								if (err) throw err;
																							});
																							refill = "Inoltre la tua salute √® stata ricaricata fino al 50%!";
																						}
																						setAchievement(message.chat.id, player_id, 26, 1);
																						bot.sendMessage(message.chat.id, "Hai completato il dungeon! Hai ottenuto " + rankPoint + " punto rango!\n" + refill, back);

																						if (pass_id != 0){
																							connection.query('SELECT chat_id, rank FROM player WHERE id = ' + pass_id, function (err, rows, fields){
																								if (err) throw err;
																								bot.sendMessage(rows[0].chat_id, "Il tuo compagno " + message.from.username + " ha completato il dungeon ed hai ottenuto " + rankPoint + " punti rango!");
																								connection.query('UPDATE player SET rank = rank+' + rankPoint + ' WHERE id = ' + pass_id, function (err, rows, fields){
																									if (err) throw err;
																								});
																							});
																						}

																						var rand = Math.round(Math.random()*100);
																						if ((rand <= 5) && (rank > 20)){
																							connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',618)', function(err, rows, fields) {
																								if (err) throw err;
																								bot.sendMessage(message.chat.id, "Sul pavimento appena fuori dal dungeon hai trovato una *Capsula Estrazione*! Che fortuna!", mark);
																							});
																						}

																						var d = new Date();
																						d.setHours(d.getHours() + wait_dungeon);
																						var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																						connection.query('UPDATE player SET dungeon_count = dungeon_count+1, dungeon_time = "' + long_date + '", rank = rank+' + rankPoint + ' WHERE id = ' + player_id, function (err, rows, fields) {
																							if (err) throw err;
																							setAchievementProgress(player_id, 3);
																						});

																						connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields) {
																							if (err) throw err;
																						});
																					});
																				}

																				var d = new Date();
																				var sec = wait_room;

																				if (abBonus2 > 0){
																					sec -= abBonus2;
																				}
																				if ((class_id == 3) && (reborn == 3)){
																					sec = sec-120;
																				}
																				if ((class_id == 9) && (reborn > 1)){
																					sec = sec-120;
																				}
																				if ((class_id == 9) && (reborn == 5)){
																					sec = sec-180;
																				}
																				if ((class_id == 3) && (reborn >= 4)){
																					sec = sec-300;
																				}
																				//}
																				if (crazyMode == 1)
																					sec = sec-120;
																				d.setSeconds(d.getSeconds() + sec);

																				var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
																				var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																				connection.query('UPDATE dungeon_status SET room_time = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																					if (err) throw err;
																				});

																				connection.query('UPDATE player SET exp = exp+' + exp + ', money = money+' + money + ' WHERE id = ' + player_id, function (err, rows, fields) {
																					if (err) throw err;
																				});
																			});
																		});
																	});
																	return;
																}else{
																	if (meParalyzed == 0){
																		if (danno == 0){
																			bot.sendMessage(message.chat.id, "Il mostro ha evitato il tuo colpo!");
																		}else{
																			bot.sendMessage(message.chat.id, "Hai colpito il mostro e hai inferto *" + formatNumber(danno) + "* danni" + crit_txt + magic_txt + crit_en2 + "!", mark);
																		}
																	}else if (meParalyzed == 1){
																		if ((player_paralyzed-1) != 0){
																			bot.sendMessage(message.chat.id, "Non sei riuscito a colpire il mostro, sei ancora paralizzato per " + (player_paralyzed-1) + " turni");
																		}else{
																			bot.sendMessage(message.chat.id, "Non sei riuscito a colpire il mostro, e ora non sei pi√π paralizzato");
																		}
																	}
																	connection.query('UPDATE dungeon_status SET monster_life = ' + lifesum + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}

																if (paralyzed > 0){
																	bot.sendMessage(message.chat.id, "Il mostro √® paralizzato!", dBattle);
																	return;
																}

																var extra = "";
																if (enemy_magic != ""){
																	extra = "ha lanciato *" + enemy_magic + "*";
																	if (heal_enemy != 0){
																		extra += " (+" + formatNumber(heal_enemy) + " hp)";
																	}
																}

																var mylifesum = player_life - damage;
																if (mylifesum <= 0){
																	connection.query('UPDATE player SET life = life-' + damage + ' WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		connection.query('DELETE FROM dungeon_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;

																			if (extra != ""){
																				bot.sendMessage(message.chat.id, "Il mostro " + extra + " e ti ha ucciso, vieni riportato all'entrata del dungeon.\nIl tuo rango viene ridotto.", back);
																			}else{
																				bot.sendMessage(message.chat.id, "Sei stato ucciso dal mostro, vieni riportato all'entrata del dungeon.\nIl tuo rango viene ridotto.", back);
																			}

																			var d = new Date();
																			d.setHours(d.getHours() + wait_dungeon_long);
																			var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																			connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function (err, rows, fields){
																				if (err) throw err;
																			});
																			connection.query('UPDATE player SET dungeon_time = "' + long_date + '" WHERE id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																			});

																			if (rank > 0){
																				connection.query('UPDATE player SET rank = rank-1 WHERE id = ' + player_id, function(err, rows, fields) {
																					if (err) throw err;
																				});
																			}
																		});
																	});
																	return;
																}else{
																	var text2 = " hai perso *" + formatNumber(damage) + "* hp" + en_crit_txt + crit_txt2 + "!" + restored;
																	connection.query('UPDATE player SET life = life-' + damage + ' WHERE id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		if (magic_txt2 != ""){
																			connection.query('UPDATE player SET life = life+' + heal + ' WHERE id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																				calcLife(message);
																				console.log("Ricarica salute dungeon: " + heal);
																			});
																			if (magicDouble == 1){
																				magic_txt2 += " (+" + formatNumber(heal) + " hp - x2)";
																			}else{
																				magic_txt2 += " (+" + formatNumber(heal) + " hp)";
																			}
																		}

																		if (damage == 0){
																			if (extra != ""){
																				bot.sendMessage(message.chat.id, "Il mostro " + extra + ", ma il suo attacco successivo ha colpito a vuoto" + magic_txt2 + "!" + restored, dBattle);
																			}else{
																				bot.sendMessage(message.chat.id, "Il mostro ha colpito a vuoto" + crit_txt3 + magic_txt2 + "!", dBattle);
																			}
																		}else{

																			if (extra != "")
																				extra += " e ";

																			bot.sendMessage(message.chat.id, "Il mostro " + extra + "ti ha ferito," + text2 + magic_txt2, dBattle);
																		}
																	});
																}
															});	
														};
													});
												});
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});	
});

bot.onText(/cassa rinascita|torna alla cassa/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var exp = rows[0].exp;

		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna alla cassa"]]
			}
		};

		var kbConf = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Conferma"],["Torna alla cassa"]]
			}
		};

		connection.query('SELECT rarity.shortname FROM reborn_chest_status, rarity WHERE rarity.id = rarity_id AND player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var saved = "";
			if (Object.keys(rows).length > 0){
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					saved = saved + rows[i].shortname + " ";
				}
			}else{
				saved = "Nessuna";
			}

			if ((reborn != 1) && (exp < 50)){
				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Recupera Rarit√† C","Recupera Rarit√† NC"],["Recupera Rarit√† R","Recupera Rarit√† UR"],["Recupera Rarit√† L","Recupera Rarit√† E"],["Torna al menu"]]
					}
				};
				bot.sendMessage(message.chat.id, 	"A questo livello puoi solamente ritirare oggetti dalla Cassa Rinascita, seleziona la rarit√†." +
								"\n\n*Rarit√† salvate*: " + saved, kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text.indexOf("Recupera Rarit√†") != -1){
							var split = answer.text.split(" ");
							if ((split[2] == "C") || (split[2] == "NC") || (split[2] == "R") || (split[2] == "UR") || (split[2] == "L") || (split[2] == "E")){
								var rarity = split[2];
								connection.query('SELECT id FROM rarity WHERE shortname = "' + rarity + '"', function(err, rows, fields) {
									if (err) throw err;

									var rarity_id = rows[0].id;
									connection.query('SELECT * FROM reborn_chest_status WHERE player_id = ' + player_id + ' AND rarity_id = ' + rarity_id,  function(err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Questa rarit√† non √® salvata", kbBack);
											return;
										}
										var rnext = 0;
										rnext = parseInt(rows[0].reborn)+parseInt(1);
										if (rnext != reborn){
											bot.sendMessage(message.chat.id, "Non puoi ritirare a questo livello rinascita (" + rnext + "," + reborn + ")", kbBack);
											return;
										}

										var parent_id = rows[0].id;
										connection.query('SELECT item_id FROM reborn_chest WHERE parent_id = ' + parent_id, function(err, rows, fields) {
											if (err) throw err;
											if (Object.keys(rows).length == 0){
												bot.sendMessage(message.chat.id, "Non ho trovato oggetti salvati di quella rarit√†", kbBack);
												return;
											}
											var c = 0;
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[i].item_id + ')', function(err, rows, fields) {
													if (err) throw err;
												});
												//console.log("RECOVER " + rarity + " " + rows[i].item_id);
												c++;
											}
											connection.query('DELETE FROM reborn_chest WHERE parent_id = ' + parent_id, function(err, rows, fields) {
												if (err) throw err;
												connection.query('DELETE FROM reborn_chest_status WHERE id = ' + parent_id, function (err, rows, fields){
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai ritirato " + c + " oggetti di rarit√† " + rarity + "!", kbBack);
												});
											});
										});
									});
								});
							}else{
								bot.sendMessage(message.chat.id, "Rarit√† non valida", back);
							}
						}
					};
				});

				return;
			}

			if (reborn == 1){
				if (exp < 1000){
					bot.sendMessage(message.chat.id, "Raggiungi il livello 100 per accedere alla cassa rinascita.", back);
					return;
				}
			}else if (reborn == 2){
				if (exp < 1500){
					bot.sendMessage(message.chat.id, "Raggiungi il livello 150 per accedere alla cassa rinascita.", back);
					return;
				}
			}else if (reborn == 3){
				if (exp < 2000){
					bot.sendMessage(message.chat.id, "Raggiungi il livello 200 per accedere alla cassa rinascita.", back);
					return;
				}
			}else if (reborn == 4){
				if (exp < 3000){
					bot.sendMessage(message.chat.id, "Raggiungi il livello 300 per accedere alla cassa rinascita.", back);
					return;
				}else if (exp == 3000){
					bot.sendMessage(message.chat.id, "Per questa rinascita non √® necessaria la cassa.", back);
					return;					
				}
			}else if (reborn == 5){
				bot.sendMessage(message.chat.id, "Hai raggiunto il massimo livello di rinascita, non puoi accedere.", back);
				return;			
			}

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Salva Rarit√† C","Salva Rarit√† NC"],["Salva Rarit√† R","Salva Rarit√† UR"],["Salva Rarit√† L","Salva Rarit√† E"],["Torna al menu"]]
				}
			};

			bot.sendMessage(message.chat.id, 	"La *Cassa Rinascita* ti serve per salvare gli oggetti al prezzo di alcune gemme (pi√π bassa la rarit√†, pi√π gemme richieste).\n*ATTENZIONE*\nDopo aver depositato una rarit√† hai 24 ore per ritirarla, altrimenti verr√† eliminata totalmente, puoi depositarla solo una volta. Inoltre puoi ritirare gli oggetti solo fino al livello 5 dopo la rinascita. Quale rarit√† vuoi salvare?" +
							"\n\n*Rarit√† salvate*: " + saved, kb).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.indexOf("Salva Rarit√†") != -1){
						var split = answer.text.split(" ");
						if ((split[2] == "C") || (split[2] == "NC") || (split[2] == "R") || (split[2] == "UR") || (split[2] == "L") || (split[2] == "E")){

							var rarity = split[2].trim();

							connection.query('SELECT id FROM rarity WHERE shortname = "' + rarity + '"', function(err, rows, fields) {
								if (err) throw err;

								var rarity_id = rows[0].id;
								var gems = 0;	

								if (rarity_id >= 5){
									gems = 0;
								}else if (rarity_id >= 3){
									gems = 1;
								}else{
									gems = 1;
								}

								connection.query('SELECT * FROM reborn_chest_status WHERE rarity_id = ' + rarity_id + ' AND player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length > 0){
										bot.sendMessage(message.chat.id, "Questa rarit√† √® gi√† salvata", kbBack);
										return;
									}

									connection.query('SELECT COUNT(*) As cnt FROM inventory_rarity WHERE rarity_id = ' + rarity_id + ' AND player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										var cnt = rows[0].cnt;

										bot.sendMessage(message.chat.id, "Stai per salvare la rarit√† " + rarity + " che consiste in " + cnt + " oggetti al prezzo di " + gems + " gemme, continuare?", kbConf).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {
												if (answer.text.toLowerCase() == "conferma"){
													connection.query('SELECT gems FROM player WHERE id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														if (rows[0].gems < gems){
															bot.sendMessage(message.chat.id, "Non hai abbastanza gemme", kbBack);
															return;
														}
														connection.query('UPDATE player SET gems = gems-' + gems + ' WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;

															var d = new Date();
															d.setHours(d.getHours()+24);
															var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
															var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

															connection.query('INSERT INTO reborn_chest_status (player_id, rarity_id, reborn, time_end) VALUES (' + player_id + ',' + rarity_id + ',' + reborn + ',"' + long_date + '")', function(err, rows, fields) {
																if (err) throw err;

																connection.query('SELECT id FROM reborn_chest_status WHERE player_id = ' + player_id + ' AND rarity_id = ' + rarity_id, function(err, rows, fields) {
																	if (err) throw err;

																	var parent_id = rows[0].id;

																	connection.query('SELECT item_id FROM inventory_rarity WHERE rarity_id = ' + rarity_id + ' AND player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;
																		var c = 0;
																		if (Object.keys(rows).length > 0){
																			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																				connection.query('INSERT INTO reborn_chest (player_id, item_id, parent_id) VALUES (' + player_id + ',' + rows[i].item_id + ',' + parent_id + ')', function(err, rows, fields) {
																					if (err) throw err;
																				});
																				//console.log("INSERT " + rarity + " " + rows[i].item_id);
																				c++;
																			}
																		}
																		connection.query('DELETE inventory FROM inventory, item, rarity WHERE inventory.item_id = item.id AND item.rarity = rarity.shortname AND rarity.id = ' + rarity_id + ' AND player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Hai depositato " + c + " oggetti di rarit√† " + rarity + "!\nHai tempo fino alle " + short_date + " di domani per recuperarle!", kbBack);
																		});
																	});
																});
															});
														});
													});
												}
											};
										});	
									});
								});
							});
						}else{
							bot.sendMessage(message.chat.id, "Rarit√† non valida", kbBack);
						}
					}
				};
			});
		});
	});	
});

bot.onText(/rinasci/i, function(message) {

	if (message.text.toLowerCase() == "cassa rinascita"){
		return;
	}

	if (message.text.indexOf("Rinascita") != -1){
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var maxlev = 150;

		if (reborn == 1){
			maxlev = 150;
			if (rows[0].exp < 1000){
				bot.sendMessage(message.chat.id, "Raggiungi il livello 100 per accedere alla rinascita.", back);
				return;
			}
		}else if (reborn == 2){
			maxlev = 200;
			if (rows[0].exp < 1500){
				bot.sendMessage(message.chat.id, "Raggiungi il livello 150 per accedere alla rinascita.", back);
				return;
			}
		}else if (reborn == 3){
			maxlev = 300;
			if (rows[0].exp < 2000){
				bot.sendMessage(message.chat.id, "Raggiungi il livello 200 per accedere alla rinascita.", back);
				return;
			}
		}else if (reborn == 4){
			maxlev = 1000;
			if (rows[0].exp < 3000){
				bot.sendMessage(message.chat.id, "Raggiungi il livello 300 per accedere alla rinascita.", back);
				return;
			}
		}else{
			bot.sendMessage(message.chat.id, "Hai raggiunto il massimo livello di rinascita.", back);
			return;			
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Avvia Rinascita " + reborn],["Cassa Rinascita"],["Torna al menu"]]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Torna al menu"]]
			}
		};

		var text = "Vuoi rinascere?\nIl tuo personaggio perder√† exp, zaino, usa /faq nel @xxxplusbot per informazioni dettagliate. Riceverai il simbolo di rinascita nelle informazioni del tuo account, inoltre un premio in ¬ß e una grande quantit√† di Scrigni per ricominciare a creare oggetti!\nDopo la rinascita il livello massimo sar√† " + maxlev + "!";

		if (reborn == 4){
			text = "Vuoi rinascere?\nIl tuo personaggio stavolta non perder√† nulla, riceverai il simbolo speciale e il massimo livello sar√† il 1000. Tuttavia per iniziare la rinascita ti servono almeno due Artefatti!\nProcedi?";
		}

		bot.sendMessage(message.chat.id, text, kb).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				var resp = answer.text;
				if (resp == "Avvia Rinascita " + reborn){
					bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler continuare?", kbYesNo).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text.toLowerCase() != "si"){
								return;
							}
							if (reborn == 1){
								var money = 250000;
								var reborn_val = 2;
								var chest1 = 30;
								var chest2 = 25;
								var chest3 = 20;
								var chest4 = 15;
								var chest5 = 10;
								var chest6 = 5;
								var chest7 = 1;

								connection.query('SELECT * FROM referral_list WHERE new_player = ' + player_id, function (err, rows, fields){
									if (err) throw err;
									if (Object.keys(rows).length > 0){
										connection.query('SELECT chat_id, id FROM player WHERE id = ' + rows[0].player_id, function (err, rows, fields){
											if (err) throw err;
											var chat_id = rows[0].chat_id;
											connection.query('UPDATE player SET gems = gems+1, money = money+100000 WHERE id = ' + rows[0].id, function (err, rows, fields){
												if (err) throw err;
												bot.sendMessage(chat_id, "L'utente " + message.from.username + " che hai invitato ha appena raggiunto la Rinascita 1! Hai ottenuto cos√¨ una Gemma e 100.000 ¬ß!");
											});
										});
									}
								});

							}else if (reborn == 2){
								var money = 500000;
								var reborn_val = 3;
								var chest1 = 50;
								var chest2 = 45;
								var chest3 = 35;
								var chest4 = 30;
								var chest5 = 20;
								var chest6 = 10;
								var chest7 = 1;
							}else if (reborn == 3){
								var money = 750000;
								var reborn_val = 4;
								var chest1 = 100;
								var chest2 = 70;
								var chest3 = 60;
								var chest4 = 50;
								var chest5 = 40;
								var chest6 = 20;
								var chest7 = 2;
							}else if (reborn == 4){
								var reborn_val = 5;

								connection.query('SELECT COUNT(id) As num FROM artifacts WHERE player_id = ' + player_id, function (err, rows, fields){
									if (err) throw err;

									if (rows[0].num < 2){
										bot.sendMessage(message.chat.id, "Devi prima ottenere almeno due artefatti!", back);
										return;
									}

									connection.query('UPDATE player SET exp = 1, life = 100, total_life = 100, mission_auto_id = 1, heist_count = 0, reborn = ' + reborn_val + ' WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai completato l'ultima rinascita! Ma la strada √® ancora lunga!", back);
									});
								});
								return;
							}else{
								bot.sendMessage(message.chat.id, "Rinascita non valida!", back);
								return;
							}

							connection.query('UPDATE player SET exp = 1, life = 100, total_life = 100, money = ' + money + ', mission_auto_id = 1, heist_count = 0, reborn = ' + reborn_val + ' WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								console.log("Player resettato e soldi consegnati");
								connection.query('DELETE inventory FROM inventory, item WHERE inventory.item_id = item.id AND rarity NOT IN ("IN","H","U","UE","X","S","D") AND player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									console.log("Inventario svuotato");
									connection.query('DELETE FROM inventory_chest WHERE player_id=' + player_id, function(err, rows, fields) {
										if (err) throw err;
										console.log("Inventario scrigni svuotato");
										for (var i = 0; i < chest1; i++) {
											connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES (' + player_id + ',1)', function(err, rows, fields) {
												if (err) throw err;
											});
										}
										console.log("Scrigni C consegnati");
										for (var i = 0; i < chest2; i++) {
											connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES (' + player_id + ',2)', function(err, rows, fields) {
												if (err) throw err;
											});
										}
										console.log("Scrigni NC consegnati");
										for (var i = 0; i < chest3; i++) {
											connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES (' + player_id + ',3)', function(err, rows, fields) {
												if (err) throw err;
											});
										}
										console.log("Scrigni R consegnati");
										for (var i = 0; i < chest4; i++) {
											connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES (' + player_id + ',4)', function(err, rows, fields) {
												if (err) throw err;
											});
										}
										console.log("Scrigni UR consegnati");
										for (var i = 0; i < chest5; i++) {
											connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES (' + player_id + ',5)', function(err, rows, fields) {
												if (err) throw err;
											});
										}
										console.log("Scrigni L consegnati");
										for (var i = 0; i < chest6; i++) {
											connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES (' + player_id + ',6)', function(err, rows, fields) {
												if (err) throw err;
											});
										}
										console.log("Scrigni E consegnati");
										for (var i = 0; i < chest7; i++) {
											connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES (' + player_id + ',7)', function(err, rows, fields) {
												if (err) throw err;
											});
										}
										console.log("Scrigni U consegnati");
										bot.sendMessage(message.chat.id, "Complimenti, " + message.from.username + "!\n" +
														"Hai completato la rinascita " + reborn + " e hai ottenuto:\n" + 
														chest1 + " Scrigni di Legno\n" +
														chest2 + " Scrigni di Ferro\n" +
														chest3 + " Scrigni Preziosi\n" +
														chest4 + " Scrigni di Diamante\n" +
														chest5 + " Scrigni Leggendari\n" +
														chest6 + " Scrigni Epici\n" +
														chest7 + " Scrigni Capsula\n" +
														"Oltre a " + money + " ¬ß\n" +
														"Ed ora continua la tua incredibile avventura! Buon game!", back_html);
										console.log("Finito :)");
									});
								});
							});
						};
					});
				}
			};
		});
	});
});

bot.onText(/link invito/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		code = "*Il tuo codice invito*: https://telegram.me/xxxgamebot?start=" + rows[0].invite_code;
		bot.sendMessage(message.chat.id, code, no_preview_back).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text == "Torna al menu"){
					return;
				}
				if ((Math.floor(rows[0].exp/10) < 5) && (rows[0].reborn == 1)){
					connection.query('SELECT id, nickname, chat_id FROM player WHERE nickname = "' + answer.text + '"', function(err, rows, fields) {
						if (err) throw err;
						var old_player = rows[0].id;
						var old_nick = rows[0].nickname;
						var chat_id = rows[0].chat_id;
						connection.query('SELECT new_player FROM referral_list WHERE new_player = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								var d2 = new Date();
								var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

								connection.query('INSERT INTO referral_list (new_player, player_id, new_player_nick, player_nick, time) VALUES (' + player_id + ',' + old_player + ',"' + message.from.username + '","' + old_nick + '","' + long_date + '")', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "OK!", back);
									connection.query('UPDATE player SET money = money+1000 WHERE id = ' + old_player, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(chat_id, "Un utente si √® registrato con il tuo link invito, hai ricevuto 1000 ¬ß di bonus. Riceverai un premio cospicuo quando il giocatore raggiunger√† la prima rinascita");
									});
								});
							}
						});
					});
				}
			};
		});
	});
});

bot.onText(/Ritorna/i, function(message) {
	connection.query('SELECT holiday, travel_id, travel_time_end, travel_limit, cave_id, cave_time_end, cave_limit, exp, gems FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var travel_time_end = rows[0].travel_time_end;
		var cave_time_end = rows[0].cave_time_end;

		if ((rows[0].travel_id == 0) && (rows[0].cave_id == 0)){
			bot.sendMessage(message.chat.id, "Non sei in viaggio.", back);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var travel_id = rows[0].travel_id;
		var cave_id = rows[0].cave_id;
		var cave_limit = rows[0].cave_limit;
		var travel_limit = rows[0].travel_limit;

		if (rows[0].exp < 5){
			bot.sendMessage(message.chat.id, "Non hai abbastanza exp!", back)
			return;
		}

		bot.sendMessage(message.chat.id, "Sicuro di voler annullare il viaggio? Ti coster√† 5 exp", yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					if (travel_id != 0){
						if (travel_limit > 1){
							bot.sendMessage(message.chat.id, "Sei gi√† ritornato da un viaggio troppe volte!", back)
							return;
						}
						connection.query('SELECT duration FROM travel WHERE id = ' + travel_id, function(err, rows, fields) {
							if (err) throw err;
							connection.query('UPDATE player SET travel_id = 0, travel_time_end = NULL, exp = exp-5, travel_limit = travel_limit+1 WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Sei rientrato dal viaggio senza averlo completato.", back);
							});
						});
					}else if (cave_id != 0){
						if (cave_limit > 1){
							bot.sendMessage(message.chat.id, "Sei gi√† ritornato da una cava troppe volte!", back)
							return;
						}
						connection.query('SELECT duration FROM cave WHERE id = ' + cave_id, function(err, rows, fields) {
							if (err) throw err;
							connection.query('UPDATE player SET cave_id = 0, cave_time_end = NULL, exp = exp-5, cave_limit = cave_limit+1 WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Sei rientrato dalla cava senza averla completata.", back);
							});
						});
					}
				}
			};
		});
	});
});

bot.onText(/Termina subito/i, function(message) {
	connection.query('SELECT holiday, mission_id, mission_time_end, id, gems FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var mission_time_end = rows[0].mission_time_end;
		var player_id = rows[0].id;

		if (rows[0].mission_id == 0){
			bot.sendMessage(message.chat.id, "Non sei in missione.", back);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var d = new Date(mission_time_end);
		var now = new Date();
		var diff = Math.round(((now - d)/1000)/60);	//minuti
		diff = Math.abs(diff);

		if (diff < 1){
			bot.sendMessage(message.chat.id, "Manca meno di un minuto al termine della missione, pazienta!", back)
			return;
		}

		bot.sendMessage(message.chat.id, "Sicuro di voler terminare subito la missione? Consumerai una üíé. Ne possiedi " + rows[0].gems, yesno).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					connection.query('SELECT gems FROM player WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						if (rows[0].gems < 1){
							bot.sendMessage(message.chat.id, "Non hai abbastanza gemme.", back);
							return;
						}

						setAchievement(message.chat.id, player_id, 24, 1);

						var d2 = new Date();
						var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

						connection.query('UPDATE player SET gems = gems-1, mission_time_end = "' + long_date + '" WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Fatto! Attendi qualche secondo per ricevere il premio.", back);
						});
					});
				}
			};
		});
	});
});

bot.onText(/Completa immediatamente/i, function(message) {
	connection.query('SELECT holiday, id, gems FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var gems = rows[0].gems;

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		connection.query('SELECT id, datetime FROM heist WHERE from_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non hai un ispezione in corso", back);
				return;
			}

			var d = new Date(rows[0].datetime);
			var now = new Date();
			var diff = Math.round(((now - d)/1000)/60);	//minuti
			diff = Math.abs(diff);

			if (diff < 1){
				bot.sendMessage(message.chat.id, "Manca meno di un minuto al termine dell'ispezione, pazienta!", back)
				return;
			}

			bot.sendMessage(message.chat.id, "Sicuro di voler terminare subito l'ispezione?\nConsumerai due üíé. Ne possiedi " + gems, yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query('SELECT gems FROM player WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (rows[0].gems < 2){
								bot.sendMessage(message.chat.id, "Non hai abbastanza gemme.", back);
								return;
							}

							var d2 = new Date();
							var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

							connection.query('UPDATE heist SET datetime = "' + long_date + '" WHERE from_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								connection.query('UPDATE player SET gems = gems-2 WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Fatto! Attendi qualche secondo per conoscere il risultato.", back);
								});
							});
						});
					}
				};
			});
		});
	});
});

bot.onText(/Concludi immediatamente/i, function(message) {
	/*
	if (message.from.username != "fenix45"){
		return;
	}
	*/

	connection.query('SELECT id, holiday, boost_id, boost_mission, cave_id, cave_time_end, gems FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var gems = rows[0].gems;

		if (rows[0].cave_id == 0){
			bot.sendMessage(message.chat.id, "Non sei in cava.", back);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var d = new Date(rows[0].cave_time_end);
		var now = new Date();
		var diff = Math.round(((now - d)/1000)/60);	//minuti
		diff = Math.abs(diff);

		if (diff < 1){
			bot.sendMessage(message.chat.id, "Manca meno di un minuto al termine dell'esplorazione della cava, pazienta!", back)
			return;
		}

		var cave_id = rows[0].cave_id;

		if (cave_id != 0){
			var num = 0;
			if ((rows[0].boost_id == 3) && (rows[0].boost_mission > 0)){
				num = (3+cave_id)*2;
			}else{
				num = (3+cave_id);
			}
			bot.sendMessage(message.chat.id, "Sicuro di voler terminare subito l'esplorazione della cava? Ti coster√† " + num + " üíé. Ne possiedi " + gems, yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query('SELECT gems FROM player WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (rows[0].gems < num){
								bot.sendMessage(message.chat.id, "Non hai abbastanza gemme.", back);
								return;
							}

							setAchievement(message.chat.id, player_id, 24, 1);

							var d2 = new Date();
							var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

							connection.query('UPDATE player SET gems = gems-' + num + ', cave_time_end = "' + long_date + '" WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Fatto! Attendi qualche minuto per ricevere il premio.", back);
							});
						});
					}
				};
			});
		}
	});
});

/*
bot.onText(/Scomponi/i, function(message) {
	connection.query('SELECT id, exp, reborn, holiday, gems, account_id, craft_count FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var exp = rows[0].exp;
		var gems = rows[0].gems;
		var reborn = rows[0].reborn;
		var craft_count = rows[0].craft_count;

		if ((Math.floor(exp/10) < 50) && (reborn == 1)){
			bot.sendMessage(message.chat.id, "Il tuo livello √® troppo basso", back);
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Niente"]]
			}
		};

		bot.sendMessage(message.chat.id, "Puoi scomporre un oggetto nei suoi oggetti di creazione utilizzando 2 gemme + il triplo dei punti creazione necessari a quell'oggetto. Scrivi il nome completo dell'oggetto da scomporre.", kb).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text == "Niente"){
					return;
				}else{
					var ogg = answer.text.trim();

					connection.query('SELECT item.id, item.rarity, item.craftable FROM item, inventory WHERE item.id = inventory.item_id AND inventory.player_id = ' + player_id + ' AND item.name = "' + ogg + '"', function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0){			
							bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", back);
							return;
						}

						if (rows[0].craftable == 0){
							bot.sendMessage(message.chat.id, "L'oggetto selezionato non √® creabile", back);
							return;
						}

						var craft = 0;
						if (rows[0].rarity == "L"){
							craft = 3;
						}else if (rows[0].rarity == "UR"){
							craft = 2;
						}else if (rows[0].rarity == "E"){
							craft = 5;
						}else if (rows[0].rarity == "X"){
							craft = 50;
						}else if (rows[0].rarity == "UE"){
							craft = 25;
						}else if (rows[0].rarity == "U"){
							craft = 35;
						}

						bot.sendMessage(message.chat.id, "Sei sicuro? Consumerai due gemme e " + (craft*3) + " punti creazione", yesno).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Torna al menu"){
									return;
								}else if (answer.text.toLowerCase() == "si"){
									connection.query('SELECT item.id, item.rarity, item.craftable FROM item, inventory WHERE item.id = inventory.item_id AND inventory.player_id = ' + player_id + ' AND item.name = "' + ogg + '"', function(err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0){			
											bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", back);
											return;
										}

										var material_result = rows[0].id;
										var rarity = rows[0].rarity;

										if ((craft_count < (craft*3)) || (gems < 2)){
											bot.sendMessage(message.chat.id, "Non hai abbastanza punti creazione o gemme", back);
											return;
										}else{
											connection.query('UPDATE player SET craft_count = craft_count-' + (craft*3) + ', gems = gems-2 WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
											});
										}

										connection.query('SELECT material_1, material_2, material_3 FROM craft WHERE material_result = ' + material_result, function(err, rows, fields) {
											if (err) throw err;

											connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].material_1 + ')', function(err, rows, fields) {
												if (err) throw err;
											});
											connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].material_2 + ')', function(err, rows, fields) {
												if (err) throw err;
											});
											connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].material_3 + ')', function(err, rows, fields) {
												if (err) throw err;
											});

											connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + material_result + ' LIMIT 1', function(err, rows, fields) {
												if (err) throw err;
											});

											setAchievement(message.chat.id, player_id, 25, 1);
											bot.sendMessage(message.chat.id, "Hai scomposto l'oggetto!", back);
										});
									});
								}
							}
						});
					});
				}
			};
		});
	});	
});
*/

bot.onText(/Scomponi/i, function(message) {

	if (eventFestival == 1){
		bot.sendMessage(message.chat.id, "Durante il festival non √® possibile utilizzare questa funzione!", back);
		return;
	}

	connection.query('SELECT id, exp, reborn, holiday, gems, account_id, craft_count FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;

		if ((Math.floor(exp/10) < 50) && (reborn == 1)){
			bot.sendMessage(message.chat.id, "Il tuo livello √® troppo basso", back);
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Niente"]]
			}
		};

		bot.sendMessage(message.chat.id, 	"Puoi scomporre un oggetto nei suoi oggetti di creazione in base a questi criteri:\n\n" +
						"NC: 5.000 ¬ß\n" +
						"R: 10.000 ¬ß\n" +
						"UR: 25.000 ¬ß + 4 Punti Creazione\n" +
						"L-E: 1 üíé + 6-10 Punti Creazione\n" +
						"UE-U: 2 üíé + 50-70 Punti Creazione\n\n" +
						"I punti vengono controllati sulle creazioni settimanali. Scrivi il nome completo dell'oggetto da scomporre.", kb).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text == "Niente"){
					return;
				}else{
					var ogg = answer.text.trim();

					connection.query('SELECT item.id, item.rarity, item.craftable FROM item, inventory WHERE item.id = inventory.item_id AND inventory.player_id = ' + player_id + ' AND item.name = "' + ogg + '"', function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0){			
							bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", back);
							return;
						}

						if (rows[0].craftable == 0){
							bot.sendMessage(message.chat.id, "L'oggetto selezionato non √® creabile", back);
							return;
						}

						var craft = 0;
						var money = 0;
						var gems = 0;
						if (rows[0].rarity == "NC"){
							money = 5000;
						}else if (rows[0].rarity == "R"){
							money = 10000;
						}else if (rows[0].rarity == "UR"){
							money = 25000;
							craft = 2;
							craft = craft*2;
						}else if (rows[0].rarity == "L"){
							gems = 1;
							craft = 3;
							craft = craft*2;
						}else if (rows[0].rarity == "E"){
							gems = 1;
							craft = 5;
							craft = craft*2;
						}else if (rows[0].rarity == "UE"){
							gems = 2;
							craft = 25;
							craft = craft*2;
						}else if (rows[0].rarity == "U"){
							gems = 2;
							craft = 35;
							craft = craft*2;
						}else{
							bot.sendMessage(message.chat.id, "Questa rarit√† non √® scomponibile", back);
							return;
						}

						var cons = "";
						if (money > 0){
							cons += "> " + money + " ¬ß\n";
						}
						if (gems > 0){
							cons += "> " + gems + " üíé\n";
						}
						if (craft > 0){
							cons += "> " + craft + " punti creazione\n";
						}

						bot.sendMessage(message.chat.id, "Sei sicuro? Consumerai:\n" + cons, yesno).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Torna al menu"){
									return;
								}else if (answer.text.toLowerCase() == "si"){
									connection.query('SELECT item.id, item.rarity, item.craftable FROM item, inventory WHERE item.id = inventory.item_id AND inventory.player_id = ' + player_id + ' AND item.name = "' + ogg + '"', function(err, rows, fields) {
										if (err) throw err;

										if (Object.keys(rows).length == 0){			
											bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", back);
											return;
										}

										var material_result = rows[0].id;
										var rarity = rows[0].rarity;

										connection.query('SELECT gems, craft_count, money, craft_week FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
											if (err) throw err;

											if (rows[0].craft_week < craft){
												bot.sendMessage(message.chat.id, "Non hai abbastanza punti creazione", back);
												return;
											}

											if (rows[0].gems < gems){
												bot.sendMessage(message.chat.id, "Non hai abbastanza gemme", back);
												return;
											}

											if (rows[0].money < money){
												bot.sendMessage(message.chat.id, "Non hai abbastanza monete", back);
												return;
											}

											connection.query('UPDATE player SET money = money - ' + money + ', craft_week = craft_week - ' + craft + ', craft_count = craft_count - ' + craft + ', gems = gems - ' + gems + ' WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												connection.query('SELECT material_1, material_2, material_3 FROM craft WHERE material_result = ' + material_result, function(err, rows, fields) {
													if (err) throw err;

													connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].material_1 + ')', function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].material_2 + ')', function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].material_3 + ')', function(err, rows, fields) {
														if (err) throw err;
													});

													connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + material_result + ' LIMIT 1', function(err, rows, fields) {
														if (err) throw err;
													});

													setAchievement(message.chat.id, player_id, 25, 1);

													var kb = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": [["Scomponi Ancora"],["Torna al menu"]]
														}
													};

													bot.sendMessage(message.chat.id, "Hai scomposto l'oggetto!", kb);
												});
											});
										});
									});
								}
							}
						});
					});
				}
			};
		});
	});	
});

bot.onText(/^Incanta/i, function(message) {

	if (message.text == "Incantaspade"){
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var gems = rows[0].gems;
		var w1 = parseInt(rows[0].weapon);
		var w2 = parseInt(rows[0].weapon2);
		var w3 = parseInt(rows[0].weapon3);
		var e1 = rows[0].weapon_enchant;
		var e2 = rows[0].weapon2_enchant;
		var e3 = rows[0].weapon3_enchant;
		var t1 = rows[0].weapon_enchant_end;
		var t2 = rows[0].weapon2_enchant_end;
		var t3 = rows[0].weapon3_enchant_end;
		var b1 = rows[0].weapon_enchant_bonus;
		var b2 = rows[0].weapon2_enchant_bonus;
		var b3 = rows[0].weapon3_enchant_bonus;

		if ((message.text.indexOf("Arma") != -1) || (message.text.indexOf("Armatura") != -1) || (message.text.indexOf("Scudo") != -1)){
			connection.query('SELECT item.name, item.rarity, COUNT(item.name) As num FROM player, inventory, item WHERE player.id = inventory.player_id AND item.rarity IN ("E") AND inventory.item_id = item.id AND item.name LIKE "Runa%" AND player.id = ' + player_id + ' GROUP BY item.name', function(err, rows, fields) {
				if (err) throw err;

				var iKeys = [];

				if (Object.keys(rows).length > 0){
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						iKeys.push([rows[i].name + " (" + rows[i].rarity + ", " + rows[i].num + ")"]);
					}
				}

				iKeys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": iKeys
					}
				};

				var type = message.text.substring(message.text.indexOf(" ")+1);
				var text = "";
				var w_dmg = 0;
				var w_enc = 0;

				if (type == "Arma"){
					text = "dell'arma";
					w_dmg = w1;
					if (t1 != null){
						var d = new Date(t1);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
						bot.sendMessage(message.chat.id, "L'incantamento su questo oggetto √® ancora efficace fino alle " + short_date, back);
						return;
					}
				}
				if (type == "Armatura"){
					text = "dell'armatura";
					w_dmg = w2;
					if (t2 != null){
						var d = new Date(t2);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
						bot.sendMessage(message.chat.id, "L'incantamento su questo oggetto √® ancora efficace fino alle " + short_date, back);
						return;
					}
				}
				if (type == "Scudo"){
					text = "dello scudo";
					w_dmg = w3;
					if (t3 != null){
						var d = new Date(t3);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
						bot.sendMessage(message.chat.id, "L'incantamento su questo oggetto √® ancora efficace fino alle " + short_date, back);
						return;
					}
				}

				var kb2 = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Gemma"],["Runa"],["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Il valore attuale " + text + " √® *" + w_dmg + "*, puoi aumentarne temporaneamente il valore e attribuirle l'abilit√†  di lancio incantesimi, il tipo di incantesimo verr√† attribuito casualmente." +
								"\nL'effetto dell'incantamento durer√†  48 ore\n" +
								"Vuoi utilizzare due gemme oppure una runa?", kb2).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {

						if (answer.text == "Torna al menu"){
							return;
						}else if (answer.text == "Runa"){
							bot.sendMessage(message.chat.id, "Quale Runa vuoi utilizzare?", kb).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {

									var runa = "";
									var pos = answer.text.indexOf("(");
									if (pos != -1){
										runa = answer.text.substr(0, pos-1);
									}

									connection.query('SELECT item.name, item.id, item.rarity FROM player, inventory, item WHERE player.id = inventory.player_id AND inventory.item_id = item.id AND item.name = "' + runa + '" AND player.id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Non possiedi abbastanza Rune!", back);
											return;
										}

										var rand = 0;
										if (rows[0].rarity == "UR"){
											rand = Math.random()*5+5;	//5-10
										}else if (rows[0].rarity == "L"){
											rand = Math.random()*5+10;	//10-15
										}else if (rows[0].rarity == "E"){
											rand = Math.random()*5+20;	//20-25
										}else{
											bot.sendMessage(message.chat.id, "Non possiedi la Runa selezionata!", back);
											return;
										}

										rand = Math.round(rand);
										connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + rows[0].id + ' LIMIT 1', function(err, rows, fields) {
											if (err) throw err;
											setEnchant(message, player_id, type, rand);
										});
									});
								};
							});
						}else if (answer.text == "Gemma"){
							if (gems < 2){
								bot.sendMessage(message.chat.id, "Non possiedi abbastanza üíé", kb);
								return;
							}else{
								connection.query('UPDATE player SET gems = gems-2 WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
								});
							}
							var rand = 0;
							rand = Math.random()*5+25;	//5-30
							rand = Math.round(rand);

							setEnchant(message, player_id, type, rand);
						}
					}
				});
			});
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Incanta Arma","Incanta Armatura","Incanta Scudo"],["Torna al menu"]]
			}
		};

		var status = "";

		if (t1 != null){
			var d = new Date(t1);
			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

			status += "\n> Arma Incantata +" + e1 + " " + numToMana(b1) + " (" + short_date + ")";
		}

		if (t2 != null){
			var d = new Date(t2);
			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

			status += "\n> Armatura Incantata +" + e2 + " " + numToMana(b2) + " (" + short_date + ")";
		}

		if (t3 != null){
			var d = new Date(t3);
			var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

			status += "\n> Scudo Incantato +" + e3 + " " + numToMana(b3) + " (" + short_date + ")";
		}

		bot.sendMessage(message.chat.id, "Per incantare un oggetto dell'equipaggiamento ti serve una Runa E oppure 2 üíé, aumenterai il valore dell'oggetto e la probabilit√†  di lanciare incantesimi.\n" + status, kb);
	});
});

function numToMana(num){
	if (num == 1){
		return "Blu";
	}else if (num == 2){
		return "Giallo";
	}else{
		return "Rosso";
	}
}

function setEnchant(message, player_id, type, rand){
	setAchievement(message.chat.id, player_id, 23, 1);

	var d = new Date();
	if (crazyMode == 1){
		d.setHours(d.getHours()+168);
	}else{
		d.setHours(d.getHours()+48);
	}
	var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

	var rand2 = Math.random()*100;
	var magicN = "";
	var magic = 0;
	if (rand2 < 30){
		magic = 1;	//Blu
		magicN = "Blu";
	}else if (rand2 < 60){
		magic = 2;	//Giallo
		magicN = "Giallo";
	}else{
		magic = 3;	//Rosso
		magicN = "Rosso";
	}

	var extra = "";
	extra = ", inoltre ora pu√≤ utilizzare il potere del mana *" + magicN + "*!";
	extra += "\nL'effetto terminer√†  alle " + short_date;

	if (type == "Arma"){
		connection.query('UPDATE player SET weapon_enchant_bonus = ' + magic + ', weapon_enchant_end = "' + long_date + '", weapon_enchant = weapon_enchant + ' + rand + ' WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Il valore incantamento arma √® aumentato di *" + rand + "*" + extra, back);
		});
	}else if (type == "Armatura"){
		connection.query('UPDATE player SET weapon2_enchant_bonus = ' + magic + ', weapon2_enchant_end = "' + long_date + '", weapon2_enchant = weapon2_enchant + ' + rand + ' WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Il valore incantamento armatura √® aumentato di *" + rand + "*" + extra, back);
		});
	}else if (type == "Scudo"){
		connection.query('UPDATE player SET weapon3_enchant_bonus = ' + magic + ', weapon3_enchant_end = "' + long_date + '", weapon3_enchant = weapon3_enchant + ' + rand + ' WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(message.chat.id, "Il valore incantamento scudo √® aumentato di *" + rand + "*" + extra, back);
		});
	}
};

bot.onText(/fai nascere il drago|accudisci drago|nutri ancora|^drago|torna al drago/i, function(message) {
	connection.query('SELECT holiday, id, exp, charm_id, account_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var exp = rows[0].exp;

		helpMsg(message.chat.id, player_id, 5);

		connection.query('SELECT * FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length <= 0){
				// Non possiede ancora il drago

				if (exp < 100){
					bot.sendMessage(message.chat.id, "Devi aver raggiunto 100 exp per far nascere il drago.", back);
					return;
				}

				var dragon = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Dai un nome al drago!"],["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Vuoi far nascere il drago?\nIl drago √® utile in varie situazioni:\n- Ti aiuta nelle lotte contro i boss\n- Riduce i tempi dei viaggi\n- Incrementa la protezione del tuo rifugio\n- Consente di produrre bevande per le missioni o i viaggi\n\nTi serviranno le seguenti pietre:\n> Pietra Anima di Legno\n> Pietra Anima di Ferro\n> Pietra Anima Preziosa\n> Pietra Cuore di Diamante\n> Pietra Cuore Leggendario\n> Pietra Spirito Epico\nSi possono trovare nelle cave dei viaggi (dal livello 10).", dragon);
			}else{
				var dragon_name = rows[0].name;
				var dragon_lev = rows[0].level;
				var dragon_exp = rows[0].exp;
				var dragon_evolved = rows[0].evolved;
				var dragon_claws = rows[0].claws;
				var dragon_saddle = rows[0].saddle;
				var dragon_saddle_id = rows[0].saddle_id;
				var dragon_claws_id = rows[0].claws_id;
				var dragon_arms_id = rows[0].arms_id;
				var dragon_type = rows[0].type;

				var dragon_claws_name = "";
				var dragon_saddle_name = "";
				var dragon_arms_name = "";

				connection.query('SELECT name FROM item WHERE id = ' + dragon_claws_id, function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						dragon_claws_name = rows[0].name;
					}
					connection.query('SELECT name FROM item WHERE id = ' + dragon_saddle_id, function(err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0){
							dragon_saddle_name = rows[0].name;
						}
						connection.query('SELECT name FROM item WHERE id = ' + dragon_arms_id, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length > 0){
								dragon_arms_name = rows[0].name;
							}

							connection.query('SELECT item.name, COUNT(item.name) As Num FROM item, inventory, player WHERE player.id = ' + player_id  + ' AND item.id = inventory.item_id AND player.id = inventory.player_id AND item.name LIKE "Pietra%" AND item.rarity = "D" GROUP BY item.name ORDER BY item.id', function(err, rows, fields) {
								if (err) throw err;
								var iKeys = [];
								if (Object.keys(rows).length > 0){
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										iKeys.push(["Dai " + rows[i].name + " (" + rows[i].Num + ")"]);
									}
									iKeys.push(["Dai tutte"]);
								}

								iKeys.push(["Equipaggia Drago"]);
								if ((dragon_lev == 100) && (dragon_evolved == 0)){
									iKeys.push(["Scaglia Evolutiva"]);
								}
								iKeys.push(["Rinomina Drago","Bevande","Cambia Tipo"]);
								iKeys.push(["Torna al menu"]);

								var kb = {
									parse_mode: "HTML",
									reply_markup: {
										resize_keyboard: true,
										//one_time_keyboard: true,
										"keyboard": iKeys
									}
								};

								var claws_text = "";
								if (dragon_claws_id > 0){
									claws_text = "\n<b>Artigli</b>: " + dragon_claws_name + " +" + dragon_claws;
								}
								var saddle_text = "";
								if (dragon_saddle_id > 0){
									saddle_text = "\n<b>Sella</b>: " + dragon_saddle_name + " -" + dragon_saddle;
								}
								var arms_text = "";
								if (dragon_arms_id > 0){
									arms_text = "\n<b>Stemma</b>: " + dragon_arms_name;
								}

								var necess = 70;
								var lev = ((dragon_exp)/necess).toFixed(2);

								if (dragon_evolved == 0){
									if ((lev == "100") || (lev == "100.00")){
										lev = "100.00";
									}
								}else{
									if ((lev == "200") || (lev == "200.00")){
										lev = "200.00";
									}
								}
								var dPerc = (lev+"").split(".")[1];
								lev = parseFloat(lev)+1;
								var dLev = (lev+"").split(".")[0];

								var bonustext = "";

								var sInfernale = 0;
								var sGlaciale = 0;
								var sOscuro = 0;
								var sCeleste = 0;
								var sAbissale = 0;
								var sVette = 0;

								if ((dragon_saddle_id == 213) || (dragon_saddle_id == 718) || (dragon_saddle_id == 719) || (dragon_saddle_id == 720)){		//Infernale
									sInfernale++;
								}else if ((dragon_saddle_id == 214) || (dragon_saddle_id == 724) || (dragon_saddle_id == 725) || (dragon_saddle_id == 726)){		//Glaciale
									sGlaciale++;
								}else if ((dragon_saddle_id == 215) || (dragon_saddle_id == 730) || (dragon_saddle_id == 731) || (dragon_saddle_id == 732)){		//Oscuro
									sOscuro++;
								}else if ((dragon_saddle_id == 216) || (dragon_saddle_id == 736) || (dragon_saddle_id == 737) || (dragon_saddle_id == 738)){		//Celeste
									sCeleste++;
								}else if ((dragon_saddle_id == 217) || (dragon_saddle_id == 742) || (dragon_saddle_id == 743) || (dragon_saddle_id == 744)){		//Abissale
									sAbissale++;
								}else if ((dragon_saddle_id == 218) || (dragon_saddle_id == 748) || (dragon_saddle_id == 749) || (dragon_saddle_id == 750)){		//Vette
									sVette++;
								}

								if ((dragon_claws_id == 207) || (dragon_claws_id == 715) || (dragon_claws_id == 716) || (dragon_claws_id == 717)){		//Infernale
									sInfernale++;
								}else if ((dragon_claws_id == 208) || (dragon_claws_id == 721) || (dragon_claws_id == 722) || (dragon_claws_id == 723)){	//Glaciale
									sGlaciale++;
								}else if ((dragon_claws_id == 209) || (dragon_claws_id == 727) || (dragon_claws_id == 728) || (dragon_claws_id == 729)){	//Oscuro
									sOscuro++;
								}else if ((dragon_claws_id == 210) || (dragon_claws_id == 733) || (dragon_claws_id == 734) || (dragon_claws_id == 735)){	//Celeste
									sCeleste++;
								}else if ((dragon_claws_id == 211) || (dragon_claws_id == 739) || (dragon_claws_id == 740) || (dragon_claws_id == 741)){	//Abissale
									sAbissale++;
								}else if ((dragon_claws_id == 212) || (dragon_claws_id == 745) || (dragon_claws_id == 746) || (dragon_claws_id == 747)){	//Vette
									sVette++;
								}

								if (sInfernale == 2){
									bonustext = "\nSet Infernale equipaggiato!";
								}else if (sGlaciale == 2){
									bonustext = "\nSet Glaciale equipaggiato!";
								}else if (sOscuro == 2){
									bonustext = "\nSet Oscuro equipaggiato!";
								}else if (sCeleste == 2){
									bonustext = "\nSet Celeste equipaggiato!";
								}else if (sAbissale == 2){
									bonustext = "\nSet Abissale equipaggiato!";
								}else if (sVette == 2){
									bonustext = "\nSet delle Vette equipaggiato!";
								}

								bot.sendMessage(message.chat.id, "Cosa vuoi fare con il tuo drago?\n\n<b>Nome</b>: " + dragon_name + " " + dragon_type + " " + dragonSym(dragon_type) + "\n<b>Crescita</b>: " + dPerc + "% del livello " + dragon_lev + claws_text + saddle_text + arms_text + bonustext, kb).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text == "Scaglia Evolutiva"){

											if (dragon_evolved == 1){
												bot.sendMessage(message.chat.id, "Il tuo drago √® gi√† stato evoluto", back);
												return;
											}

											bot.sendMessage(message.chat.id, "La Scaglia Evolutiva consente di aumentare il livello massimo del tuo drago, vuoi utilizzarla?", yesno).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													if (answer.text.toLowerCase() == "si"){
														connection.query('SELECT item_id FROM inventory WHERE item_id = 649 AND player_id=' + player_id, function(err, rows, fields) {
															if (err) throw err;
															if (Object.keys(rows).length < 1){
																bot.sendMessage(message.chat.id, "Non possiedi la Scaglia Evolutiva", back);
																return;
															}
															connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 649 LIMIT 1', function(err, rows, fields) {
																if (err) throw err;
																connection.query('UPDATE dragon SET evolved = 1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Il tuo drago si √® evoluto e pu√≤ superare il suo livello massimo!", back);
																});
															});
														});
													}
												};
											});
										}
									};
								});
							});
						});
					});
				});
			}
		});
	});
});

bot.onText(/Dai un nome al drago/i, function(message) {
	connection.query('SELECT id, holiday, exp, account_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var exp = rows[0].exp;

		connection.query('SELECT * FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length <= 0){

				if (exp < 100){
					bot.sendMessage(message.chat.id, "Devi aver raggiunto 100 exp per far nascere il drago.", back);
					return;
				}

				connection.query('SELECT * FROM inventory WHERE player_id = ' + player_id + ' AND item_id IN (68, 69, 70, 71, 72, 73) GROUP BY item_id', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length >= 6){
						var d = new Date();
						var rand = Math.round(d.getDate()/5);
						var type = "";
						if (rand == 1){
							type = "delle Montagne";
						}else if (rand == 2){
							type = "dei Cieli";
						}else if (rand == 3){
							type = "Infernale";
						}else if (rand == 4){
							type = "dell'Oscurit√†";
						}else if (rand == 5){
							type = "dei Mari";
						}else{
							type = "dei Ghiacci";
						}

						bot.sendMessage(message.chat.id, "Il drago " + type + " √® nato!\nCome vorresti chiamarlo?", back).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								var name = answer.text.trim();

								if (name == "Torna al menu"){
									return;
								}

								if ((name == "Si") || (name == "") || (name.indexOf("_") != -1)){
									bot.sendMessage(message.chat.id, "Il nome inserito non √® valido, riprova.", back);
									return;
								}

								if (re2.test(name) == false){
									bot.sendMessage(message.chat.id, "I simboli non sono consentiti.", back);
									return;	
								}

								for (var i = 1, len = 7; i < len; i++) {
									connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + (67+i) + ' LIMIT 1', function(err, rows, fields) {
										if (err) throw err;
									});
								}
								connection.query('INSERT INTO `dragon`(`id`, `player_id`, `name`, `exp`, `level`, `damage`, `defense`, `type`) VALUES (DEFAULT,' + player_id + ',"' + name + '",0,1,1,1,"' + type + '")', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Complimenti, √® nato *" + name + "*, puoi nutrirlo per farlo crescere e trarne vantaggi!", back);
								});
							};
						});
					}else{
						bot.sendMessage(message.chat.id, "Non hai abbastanza pietre per far nascere il drago!",back);
					}
				});
			}else{
				bot.sendMessage(message.chat.id, "Possiedi gi√† il drago!", back);
				return;
			}
		});
	});
});

bot.onText(/^bevande|torna alle bevande/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {	
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT * FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;

			if (rows[0].boost_time != null){
				var boost_time = new Date(rows[0].boost_time);
				var now = new Date();

				if (boost_time < now){
					var boost_id = rows[0].boost_id;
					if (boost_id == 0){
						boost_id = Math.round(Math.random()*6+1);
						connection.query('UPDATE dragon SET boost_id = ' + boost_id + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
					}
					var itemId = 0;
					var m = 3;
					if (boost_id == 1){
						itemId = 48;
					}else if (boost_id == 2){
						itemId = 601;
					}else if (boost_id == 3){
						itemId = 613;
					}else if (boost_id == 4){
						itemId = 617;
						m = 2;
					}else if (boost_id == 5){
						itemId = 642;
					}else if (boost_id == 6){
						itemId = 265;
					}else if (boost_id == 7){
						itemId = 650;
					}else{
						bot.sendMessage(message.chat.id, "Bevanda non valida", back);
						return;
					}

					var kb2 = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Attiva","Scarta"],["Torna al menu"]]
						}
					};

					var kb3 = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Torna alle bevande"],["Torna al menu"]]
						}
					};

					connection.query('SELECT name FROM item WHERE id = ' + itemId, function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "La *" + rows[0].name + "* √® pronta, cosa vuoi fare? Attivandola andr√† a rimpiazzare la bevanda eventualmente attiva", kb2).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Attiva"){
									connection.query('UPDATE player SET boost_id = ' + boost_id + ', boost_mission = ' + m + ' WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										connection.query('UPDATE dragon SET boost_id = 0, boost_time = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Bevanda attivata!", kb3);
										});
									});
								}else if (answer.text == "Scarta"){
									connection.query('UPDATE dragon SET boost_id = 0, boost_time = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Bevanda scartata!", kb3);
									});
								}
							};
						});
					});
				}else{
					var short_date = addZero(boost_time.getHours()) + ':' + addZero(boost_time.getMinutes()) + ':' + addZero(boost_time.getSeconds());
					bot.sendMessage(message.chat.id, "La bevanda √® ancora in produzione, attendi fino alle " + short_date, back);
				}
				return;
			}

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Inizia Produzione"],["Torna al menu"]]
				}
			};

			bot.sendMessage(message.chat.id, "Puoi far produrre una bevanda casuale al drago, ci impiegher√† 24 ore e ti coster√† una Pietra Spirito Epico", kb).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text == "Inizia Produzione"){

						connection.query('SELECT id FROM inventory WHERE item_id = 73 AND player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Non hai nessuna Pietra Spirito Epico da consumare!", back);
								return;
							}

							var d = new Date();
							d.setHours(d.getHours()+24);
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
							var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

							connection.query('UPDATE dragon SET boost_time = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Produzione iniziata, dovrai attendere fino alle " + short_date + " di domani, poi torna a recuperare la bevanda", back);
							});
							connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 73 LIMIT 1', function(err, rows, fields) {
								if (err) throw err;
							});
							setAchievement(message.chat.id, player_id, 38, 1);
						});
					}
				};
			});
		});
	});
});

bot.onText(/cambia tipo/i, function(message) {
	var tipo = message.text.substring(message.text.indexOf(":")+2);

	//console.log(tipo);

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {	
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT * FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;				
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;
			var dragon_claws = rows[0].claws;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_type = rows[0].type;

			if ((dragon_saddle_id != 0) || (dragon_claws_id != 0)){
				bot.sendMessage(message.chat.id, "Prima di cambiare tipo al drago devi rimuovere tutti i suoi equipaggiamenti.", back);
				return;
			}

			var kbD = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["dei Mari"],["dei Ghiacci"],["Infernale"],["dei Cieli"],["delle Montagne"],["dell'Oscurit√†"],["Torna al menu"]]
				}
			};

			bot.sendMessage(message.chat.id, "Inserisci il nuovo tipo del drago, verr√† consumato un Mutaforma e *il suo livello verr√† azzerato*.", kbD).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					var newtype = answer.text;

					connection.query('SELECT * FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 219', function(err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "Ti serve il Mutaforma per cambiare tipo al drago.", back);
							return;
						}

						if ((newtype == "") || (newtype == "Torna al menu") || (newtype == "Cambia Tipo")){
							bot.sendMessage(message.chat.id, "Tipo non valido!", back);
							return;
						}
						if ((newtype != "dei Mari") && (newtype != "dei Ghiacci") && (newtype != "Infernale") && (newtype != "dei Cieli") && (newtype != "delle Montagne") && (newtype != "dell'Oscurit√†")){
							bot.sendMessage(message.chat.id, "Tipo non valido!", back);
							return;
						}

						connection.query('UPDATE dragon SET exp = 0, level = 0, type = "' + newtype + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							connection.query('DELETE FROM inventory WHERE item_id = 219 AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai cambiato tipo al drago!", back);
							});
						});
					});
				};
			});
		});
	});
});

bot.onText(/rinomina drago/i, function(message) {
	var name = message.text.substring(message.text.indexOf(":")+1);
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {	
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT * FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;				
			}
			bot.sendMessage(message.chat.id, "Inserisci il nuovo nome del drago, verr√† consumato un Rinominatore.", back).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					var newname = answer.text;

					connection.query('SELECT * FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 199', function(err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "Ti serve il Rinominatore per rinominare il drago.", back);
							return;
						}

						if ((newname == "") || (newname == "Torna al menu") || (newname == "Rinomina")){
							bot.sendMessage(message.chat.id, "Nome non valido!", back);
							return;
						}

						if (re2.test(newname) == false){
							bot.sendMessage(message.chat.id, "I simboli non sono consentiti.", back);
							return;	
						}

						connection.query('UPDATE dragon SET name = "' + newname.trim() + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
						connection.query('DELETE FROM inventory WHERE item_id = 199 AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Hai rinominato il drago!", back);
						});		
					});
				};
			});
		});
	});
});

bot.onText(/cambia nome/i, function(message) {
	var name = message.text.substring(message.text.indexOf(":")+1);
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {	
		if (err) throw err;
		var player_id = rows[0].id;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		connection.query('SELECT * FROM `team_player` WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = player_id;

				if (rows[0].role == 1){
					isAdmin = 1;
				}

				if (isAdmin == 0){
					bot.sendMessage(message.chat.id, "Devi essere amministratore per rinominare il team.", back);
					return;
				}

				connection.query('SELECT * FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 199', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Ti serve il Rinominatore per rinominare il team.", back);
						return;
					}

					bot.sendMessage(message.chat.id, "Inserisci il nuovo nome del team, verr√† consumato un Rinominatore.", back).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var newname = answer.text;

							connection.query('SELECT * FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 199', function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Ti serve il Rinominatore per rinominare il team.", back);
									return;
								}

								if ((newname == "") || (newname == "Torna al menu") || (newname == "Rinomina")){
									bot.sendMessage(message.chat.id, "Nome non valido!", back);
									return;
								}

								if (re2.test(newname) == false){
									bot.sendMessage(message.chat.id, "I simboli non sono consentiti.", back);
									return;	
								}
								connection.query('UPDATE team SET name = "' + newname.trim() + '" WHERE id = ' + team_id, function(err, rows, fields) {
									if (err) throw err;
								});
								connection.query('DELETE FROM inventory WHERE item_id = 199 AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai rinominato il team!", back);
								});		
							});		
						};
					});
				});
			});
		});
	});
});

bot.onText(/dai pietra/i, function(message) {
	var foodmore = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Nutri Ancora"],["Torna al menu"]]
		}
	};

	var pietra = message.text.substring(message.text.indexOf(" ")+1);
	var necess = 70;

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {	
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var charm_id = rows[0].charm_id;

		connection.query('SELECT * FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;				
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;
			var dragon_evolved = rows[0].evolved;
			var dragon_claws = rows[0].claws;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_type = rows[0].type;

			if (dragon_evolved == 0){
				if (dragon_lev >= 100){
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			}else{
				if (dragon_lev >= 200){
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			}

			var pos = pietra.indexOf("(");
			if (pos != -1){
				pietra = pietra.substr(0, pos-1);
			}

			connection.query('SELECT COUNT(item.id) As cnt, item.id FROM item, inventory, player WHERE player.id = ' + player_id + ' AND item.id = inventory.item_id AND player.id = inventory.player_id AND item.name = "' + pietra + '" AND item.rarity = "D" GROUP BY item.name', function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Non possiedi questa pietra.", back);
					return;
				}

				var cnt = rows[0].cnt;
				var stoneId = rows[0].id;

				cnt = cnt.toString();

				if (cnt > 1){
					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["1"],[cnt],["Torna al menu"]]
						}
					};
				}else{
					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["1"],["Torna al menu"]]
						}
					};
				}

				bot.sendMessage(message.chat.id, "Quante pietre vuoi utilizzare?", kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text != "Torna al menu"){

							var qnt = answer.text;

							if ((qnt < 1) || (re.test(qnt) == false)){
								bot.sendMessage(message.chat.id, "Quantit√† non valida", foodmore);
								return;
							}

							connection.query('SELECT id FROM inventory WHERE item_id = "' + stoneId + '" AND player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;

								qnt = parseInt(qnt);

								if (Object.keys(rows).length < qnt){
									bot.sendMessage(message.chat.id, "Non possiedi abbastanza pietre.", foodmore);
									return;
								}

								var val = stoneId-67;

								val = val*qnt;

								var lev = ((dragon_exp+val)/necess).toFixed(2);
								if (dragon_evolved == 0){
									if ((lev == "100") || (lev == "100.00")){
										lev = "100.00";
									}
								}else{
									if ((lev == "200") || (lev == "200.00")){
										lev = "200.00";
									}
								}
								var perc = (lev+"").split(".")[1];
								lev = parseFloat(lev)+1;

								var lev_int = parseInt((lev+"").split(".")[0]);

								if (dragon_evolved == 0){
									if (lev_int > 100){
										bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 100", foodmore);
										return;
									}
								}else{
									if (lev_int > 200){
										bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 200", foodmore);
										return;
									}
								}

								connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + stoneId + ' LIMIT ' + qnt, function(err, rows, fields) {
									if (err) throw err;
									connection.query('UPDATE dragon SET exp = exp+' + val + ', level = ' + lev_int + ' WHERE player_id=' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Il drago si trova al " + perc + "% del livello " + (lev+"").split(".")[0] + ".", foodmore);
										checkDragon(player_id);
									});
								});

								setAchievement(message.chat.id, player_id, 4, val);
							});
						};
					};
				});
			});
		});
	});
});

bot.onText(/^\/checkDragon (.+)/i, function(message, match) {
	connection.query('SELECT id FROM player WHERE nickname = "' + match[1] + '"', function(err, rows, fields) {
		if (err) throw err;
		checkDragon(rows[0].id);
		bot.sendMessage(message.chat.id, "Fatto");
	});
});

function checkDragon(player_id){
	connection.query('SELECT level, exp, evolved, saddle_id, claws_id FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
			return;				
		}
		var dragon_evolved = rows[0].evolved;
		var dragon_level = rows[0].level;
		var dragon_exp = rows[0].exp;

		var dragon_claws_id = rows[0].claws_id;
		var dragon_saddle_id = rows[0].saddle_id;

		if (dragon_evolved == 0){
			if (dragon_level > 100){
				dragon_level = 100;
				dragon_exp = 7000;
			}
		}else{
			if (dragon_level > 200){
				dragon_level = 200;
				dragon_exp = 14000;
			}
		}

		var sInfernale = 0;
		var sGlaciale = 0;
		var sOscuro = 0;
		var sCeleste = 0;
		var sAbissale = 0;
		var sVette = 0;

		if ((dragon_saddle_id == 213) || (dragon_saddle_id == 718) || (dragon_saddle_id == 719) || (dragon_saddle_id == 720)){		//Infernale
			sInfernale++;
		}else if ((dragon_saddle_id == 214) || (dragon_saddle_id == 724) || (dragon_saddle_id == 725) || (dragon_saddle_id == 726)){		//Glaciale
			sGlaciale++;
		}else if ((dragon_saddle_id == 215) || (dragon_saddle_id == 730) || (dragon_saddle_id == 731) || (dragon_saddle_id == 732)){		//Oscuro
			sOscuro++;
		}else if ((dragon_saddle_id == 216) || (dragon_saddle_id == 736) || (dragon_saddle_id == 737) || (dragon_saddle_id == 738)){		//Celeste
			sCeleste++;
		}else if ((dragon_saddle_id == 217) || (dragon_saddle_id == 742) || (dragon_saddle_id == 743) || (dragon_saddle_id == 744)){		//Abissale
			sAbissale++;
		}else if ((dragon_saddle_id == 218) || (dragon_saddle_id == 748) || (dragon_saddle_id == 749) || (dragon_saddle_id == 750)){		//Vette
			sVette++;
		}

		if ((dragon_claws_id == 207) || (dragon_claws_id == 715) || (dragon_claws_id == 716) || (dragon_claws_id == 717)){		//Infernale
			sInfernale++;
		}else if ((dragon_claws_id == 208) || (dragon_claws_id == 721) || (dragon_claws_id == 722) || (dragon_claws_id == 723)){	//Glaciale
			sGlaciale++;
		}else if ((dragon_claws_id == 209) || (dragon_claws_id == 727) || (dragon_claws_id == 728) || (dragon_claws_id == 729)){	//Oscuro
			sOscuro++;
		}else if ((dragon_claws_id == 210) || (dragon_claws_id == 733) || (dragon_claws_id == 734) || (dragon_claws_id == 735)){	//Celeste
			sCeleste++;
		}else if ((dragon_claws_id == 211) || (dragon_claws_id == 739) || (dragon_claws_id == 740) || (dragon_claws_id == 741)){	//Abissale
			sAbissale++;
		}else if ((dragon_claws_id == 212) || (dragon_claws_id == 745) || (dragon_claws_id == 746) || (dragon_claws_id == 747)){	//Vette
			sVette++;
		}

		var damage = 0;
		var defense = 0;
		var critical = 0;
		if (sInfernale == 2){
			damage = 25;
		}else if (sGlaciale == 2){
			defense = 25;
		}else if (sOscuro == 2){
			damage = 15;
			defense = 10;
			critical = 5;
		}else if (sCeleste == 2){
			defense = 15;
			damage = 10;
			critical = 5;
		}else if (sAbissale == 2){
			damage = 10;
			defense = 5;
			critical = 10;
		}else if (sVette == 2){
			damage = 5;
			defense = 10;
			critical = 10;
		}

		connection.query('UPDATE dragon SET level = ' + dragon_level + ', exp = ' + dragon_exp + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			connection.query('UPDATE dragon SET total_life = exp*100, critical = ' + critical + ', damage = ' + (dragon_level+damage) + ', defense = ' + (Math.floor(dragon_level/2)+defense) + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});
		});
	});
};

bot.onText(/dai tutte/i, function(message) {

	var foodmore = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Nutri Ancora"],["Torna al menu"]]
		}
	};

	var necess = 70;

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {	
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var charm_id = rows[0].charm_id;

		connection.query('SELECT * FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;				
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;
			var dragon_evolved = rows[0].evolved;
			var dragon_claws = rows[0].claws;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_type = rows[0].type;

			if (dragon_evolved == 0){
				if (dragon_lev >= 100){
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			}else{
				if (dragon_lev >= 200){
					bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del drago!", back);
					return;
				}
			}

			bot.sendMessage(message.chat.id, "Sei sicuro?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){

						connection.query('SELECT item.name, item.id FROM item, inventory, player WHERE player.id = ' + player_id  + ' AND item.id = inventory.item_id AND player.id = inventory.player_id AND item.name LIKE "Pietra%" AND item.rarity = "D"', function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length > 0){
								var val = 0;

								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									val += rows[i].id-67;
								}

								var lev = ((dragon_exp+val)/necess).toFixed(2);
								if (dragon_evolved == 0){
									if ((lev == "100") || (lev == "100.00")){
										lev = "100.00";
									}
								}else{
									if ((lev == "200") || (lev == "200.00")){
										lev = "200.00";
									}
								}
								var perc = (lev+"").split(".")[1];
								lev = parseFloat(lev)+1;

								var lev_int = parseInt((lev+"").split(".")[0]);

								if (dragon_evolved == 0){
									if (lev_int > 100){
										bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 100", foodmore);
										return;
									}
								}else{
									if (lev_int > 200){
										bot.sendMessage(message.chat.id, "Non puoi dare cos√¨ tante pietre al drago, il livello massimo √® 200", foodmore);
										return;
									}
								}

								connection.query('DELETE inventory.* FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id=' + player_id + ' AND item.rarity = "D" AND item.name LIKE "Pietra%"', function(err, rows, fields) {
									if (err) throw err;
									connection.query('UPDATE dragon SET exp = exp+' + val + ', level = ' + lev_int + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Il drago si trova al " + perc + "% del livello " + (lev+"").split(".")[0] + ".", foodmore);
										checkDragon(player_id);
									});
								});

								setAchievement(message.chat.id, player_id, 4, val);
							}else{
								bot.sendMessage(message.chat.id, "Non hai nessuna pietra nello zaino.", back);
								return;
							}
						});
					};
				};
			});
		});
	});
});

bot.onText(/equipaggia drago/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {	
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT * FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;				
			}
			var dragon_lev = rows[0].level;
			var dragon_exp = rows[0].exp;
			var dragon_claws = rows[0].claws;
			var dragon_saddle = rows[0].saddle;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_arms_id = rows[0].arms_id;
			var dragon_type = rows[0].type;

			connection.query('SELECT item.name, item.dragon_power, item.description FROM item, inventory WHERE inventory.player_id = ' + player_id  + ' AND item.id = inventory.item_id AND (item.dragon_power <> 0 OR (item.name LIKE "Stemma%" AND rarity = "UE")) GROUP BY item.name', function(err, rows, fields) {
				if (err) throw err;
				var Keys = [];

				if (Object.keys(rows).length > 0){
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].dragon_power > 0){
							Keys.push([rows[i].name + " (+" + rows[i].dragon_power + " attacco)"]);
						}else if (rows[i].dragon_power < 0){
							Keys.push([rows[i].name + " (+" + Math.abs(rows[i].dragon_power) + " difesa)"]);
						}else{
							Keys.push([rows[i].name + " (Efficace solo sulla Vetta)"]);
						}
					}
				}

				Keys.push(["Stacca Artigli"],["Stacca Sella"],["Stacca Stemma"]);
				Keys.push(["Torna al drago"]);
				Keys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": Keys
					}
				};

				var kbBack = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Torna al drago"],["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Cosa vuoi equipaggiare al drago? üêâ", kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if ((answer.text == "Torna al menu") || (answer.text == "Torna al drago")){
							return;
						}else if (answer.text.indexOf("Stacca") != -1){
							var necess = 70;
							var lev = ((dragon_exp)/necess).toFixed(2);
							if ((lev == "100") || (lev == "100.00")){
								lev = "100.00";
							}
							var dPerc = (lev+"").split(".")[1];
							lev = parseFloat(lev)+1;
							var dLev = (lev+"").split(".")[0];

							var action = "";
							if (answer.text.indexOf("Artigli") != -1){
								action = "Artigli";
							}else if (answer.text.indexOf("Sella") != -1){
								action = "Sella";
							}else if (answer.text.indexOf("Stemma") != -1){
								action = "Stemma";
							}else{
								bot.sendMessage(message.chat.id, "Equipaggiamento da staccare non valido", kbBack);
								return;
							}

							bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									var resp = answer.text;
									if (resp.toLowerCase() != "si"){
										return;
									}

									connection.query('SELECT saddle_id, claws_id, arms_id FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
										if (err) throw err;

										dragon_saddle_id = rows[0].saddle_id;
										dragon_claws_id = rows[0].claws_id;
										dragon_arms_id = rows[0].arms_id;

										if (action == "Sella"){
											if (dragon_saddle_id != 0){
												connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + dragon_saddle_id + ')', function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai rimosso l'equipaggiamento sella dal drago.", kbBack);
												});

												connection.query('UPDATE dragon SET damage = ' + dLev + ', defense = ' + Math.floor(dLev/2) + ', saddle_id = 0, saddle = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});
											}else{
												bot.sendMessage(message.chat.id, "La sella non √® equipaggiata.", kbBack);
											}
										}else if (action == "Artigli"){
											if (dragon_claws_id != 0){
												connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + dragon_claws_id + ')', function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai rimosso l'equipaggiamento artigli dal drago.", kbBack);
												});

												connection.query('UPDATE dragon SET damage = ' + dLev + ', defense = ' + Math.floor(dLev/2) + ', claws_id = 0, claws = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});
											}else{
												bot.sendMessage(message.chat.id, "Gli artigli non sono equipaggiati.", kbBack);
											}
										}else if (action == "Stemma"){
											if (dragon_arms_id != 0){
												connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + dragon_arms_id + ')', function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai rimosso l'equipaggiamento stemma dal drago.", kbBack);
												});

												connection.query('UPDATE dragon SET arms_id = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});
											}else{
												bot.sendMessage(message.chat.id, "Lo stemma non √® equipaggiato.", kbBack);
											}
										}
									});
								};
							});
						}else{
							var equip = answer.text;
							var pos = answer.text.indexOf("(");
							if (pos != -1){
								equip = equip.substr(0, pos-1);
							}
							connection.query('SELECT item.id, item.dragon_power FROM item, inventory WHERE inventory.player_id = ' + player_id  + ' AND item.id = inventory.item_id AND (item.dragon_power <> 0 OR (item.name LIKE "Stemma%" AND rarity = "UE")) AND name = "' + equip + '"', function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "L'oggetto specificato non √® consentito", kbBack);
									return;
								}

								bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text.toLowerCase() == "si"){
											var itemid = rows[0].id;
											var dragon_power = rows[0].dragon_power;

											connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + itemid, function(err, rows, fields) {
												if (err) throw err;

												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato.", kbBack);
													return;
												}

												if (dragon_power == 0){
													connection.query('SELECT arms_id FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														if (rows[0].arms_id != 0){
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].arms_id + ')', function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Lo stemma precedentemente equipaggiato √® tornato nell'inventario");
															});
														}

														connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + itemid + ' LIMIT 1', function(err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE dragon SET arms_id = ' + itemid + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Stemma equipaggiato!", kbBack);
															});
														});
													});
													return;
												}

												var type = ["Infernal","Oscur","Glacial","Celest","Abissal","delle Vett"];
												var this_type = "";

												if (dragon_type == "Infernale"){
													this_type = "Infernal";
												}else if (dragon_type == "dei Ghiacci"){
													this_type = "Glacial";
												}else if (dragon_type == "dell'Oscurit√†"){
													this_type = "Oscur";
												}else if (dragon_type == "dei Cieli"){
													this_type = "Celest";
												}else if (dragon_type == "dei Mari"){
													this_type = "Abissal";
												}else if (dragon_type == "delle Montagne"){
													this_type = "delle Vett";
												}

												var isSet = 0;
												var setText = "";

												if (searchArrayInString(equip, type) != -1){
													if (equip.indexOf(this_type) != -1){
														isSet = 1;
														setText = "\nQuesto oggetto fa parte di un set, equipaggia anche l'altro per ottenere ulteriori benefici";
													}else{
														bot.sendMessage(message.chat.id, "Questo oggetto pu√≤ solo essere equipaggiato al tipo del drago corrispondente", back);
														return;
													}
												}

												if (dragon_power > 0){
													connection.query('SELECT claws_id FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														if (rows[0].claws_id != 0){
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].claws_id + ')', function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Gli artigli precedentemente equipaggiati sono tornati nell'inventario");
															});
														}

														var damage = 0;
														var defense = 0;
														var critical = 0;
														if (isSet == 1){
															if ((dragon_saddle_id == 213) || (dragon_saddle_id == 718) || (dragon_saddle_id == 719) || (dragon_saddle_id == 720)){		//Infernale
																damage = 25;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno!", kbBack);
															}else if ((dragon_saddle_id == 214) || (dragon_saddle_id == 724) || (dragon_saddle_id == 725) || (dragon_saddle_id == 726)){		//Glaciale
																defense = 25;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + defense + " difesa!", kbBack);
															}else if ((dragon_saddle_id == 215) || (dragon_saddle_id == 730) || (dragon_saddle_id == 731) || (dragon_saddle_id == 732)){		//Oscuro
																damage = 15;
																defense = 10;
																critical = 5;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defense + " difesa e " + critical + "% critico!", kbBack);
															}else if ((dragon_saddle_id == 216) || (dragon_saddle_id == 736) || (dragon_saddle_id == 737) || (dragon_saddle_id == 738)){		//Celeste
																defense = 15;
																damage = 10;
																critical = 5;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defense + " difesa e " + critical + "% critico!", kbBack);
															}else if ((dragon_saddle_id == 217) || (dragon_saddle_id == 742) || (dragon_saddle_id == 743) || (dragon_saddle_id == 744)){		//Abissale
																damage = 10;
																defense = 5;
																critical = 10;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno, +" + defense + " difesa e " + critical + "% critico!", kbBack);
															}else if ((dragon_saddle_id == 218) || (dragon_saddle_id == 748) || (dragon_saddle_id == 749) || (dragon_saddle_id == 750)){		//Vette
																damage = 5;
																defense = 10;
																critical = 10;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defense + " difesa e " + critical + "% critico!", kbBack);
															}
														}

														connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + itemid + ' LIMIT 1', function(err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE dragon SET claws_id = ' + itemid + ', critical = ' + critical + ', defense = defense + ' + defense + ', damage = damage + ' + damage + ', claws = ' + dragon_power + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Artigli equipaggiati!" + setText, kbBack);
															});
														});
													});
												}else if (dragon_power < 0){
													connection.query('SELECT saddle_id FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														if (rows[0].saddle_id != 0){
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].saddle_id + ')', function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "La sella precedentemente equipaggiata √® tornata nell'inventario");
															});
														}
														var damage = 0;
														var defense = 0;
														var critical = 0;

														if (isSet == 1){
															if ((dragon_claws_id == 207) || (dragon_claws_id == 715) || (dragon_claws_id == 716) || (dragon_claws_id == 717)){		//Infernale
																damage = 25;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno!", kbBack);
															}else if ((dragon_claws_id == 208) || (dragon_claws_id == 721) || (dragon_claws_id == 722) || (dragon_claws_id == 723)){	//Glaciale
																defense = 25;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + defense + " difesa!", kbBack);
															}else if ((dragon_claws_id == 209) || (dragon_claws_id == 727) || (dragon_claws_id == 728) || (dragon_claws_id == 729)){	//Oscuro
																damage = 15;
																defense = 10;
																critical = 5;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defense + " difesa e " + critical + "% critico!", kbBack);
															}else if ((dragon_claws_id == 210) || (dragon_claws_id == 733) || (dragon_claws_id == 734) || (dragon_claws_id == 735)){	//Celeste
																defense = 15;
																damage = 10;
																critical = 5;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defense + " difesa e " + critical + "% critico!", kbBack);
															}else if ((dragon_claws_id == 211) || (dragon_claws_id == 739) || (dragon_claws_id == 740) || (dragon_claws_id == 741)){	//Abissale
																damage = 10;
																defense = 5;
																critical = 10;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno, +" + defense + " difesa e " + critical + "% critico!", kbBack);
															}else if ((dragon_claws_id == 212) || (dragon_claws_id == 745) || (dragon_claws_id == 746) || (dragon_claws_id == 747)){	//Vette
																damage = 5;
																defense = 10;
																critical = 10;
																bot.sendMessage(message.chat.id, "Set equipaggiato! Bonus: +" + damage + " danno e +" + defense + " difesa e " + critical + "% critico!", kbBack);
															}
														}

														connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + itemid + ' LIMIT 1', function(err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE dragon SET damage = damage + ' + damage + ', critical = ' + critical + ', defense = defense + ' + defense + ', saddle_id = ' + itemid + ', saddle = ' + Math.abs(dragon_power) + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Sella equipaggiata!" + setText, kbBack);
															});
														});
													});
												};
											});
										};
									};
								});
							});
						};
					};
				});
			});
		});
	});
});

bot.onText(/vette dei draghi|vetta/i, function(message) {

	if (message.text.toLowerCase().indexOf("vetta delle anime") != -1){
		return;
	}

	if (Object.keys(message.text).length > 30){
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;

		if (reborn < 3){
			bot.sendMessage(message.chat.id, "Devi raggiungere almeno la Rinascita 2 per utilizzare questa funzione!", back);
			return;
		}

		connection.query('SELECT * FROM dragon WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;				
			}

			var dragon_id = rows[0].id;
			var dragon_name = rows[0].name;
			var dragon_level = rows[0].level;
			var dragon_life = rows[0].life;
			var dragon_total_life = rows[0].total_life;
			var dragon_arms_id = rows[0].arms_id;
			var sleep_time = rows[0].sleep_time_end;

			if (dragon_level < 30){
				bot.sendMessage(message.chat.id, "E' richiesto almeno il livello 30 del drago per partecipare.", back);
				return;
			}

			if (message.from.username != "fenix45"){
				bot.sendMessage(message.chat.id, "Le vette sono in preparazione, seguir√† una fase di test, intanto preparate le vostre creature alate per la battaglia üêâ.", back);
				return;
			}

			var kb2 = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [['Entra nella Vetta'],['Torna al menu']]
				}
			};

			var kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [['Torna alla vetta'],['Torna al menu']]
				}
			};

			var kbCombat = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [['Entra in combattimento'],['Torna al menu']]
				}
			};

			var kbYesNo = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [['Si'],['Torna alla vetta']]
				}
			};

			connection.query('SELECT id, top_id, enemy_dragon_id, wait_time FROM dragon_top_status WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				var d = new Date();
				var finish_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

				if (Object.keys(rows).length == 0){
					connection.query('INSERT INTO dragon_top_status (player_id, dragon_id) VALUES (' + player_id + ',' + dragon_id + ')', function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Benvenuto nelle <b>Vette dei Draghi</b>!\nIn questo luoghi dovrai sottoporre il tuo <i>" + dragon_name + "</i> all'ardua sfida di raggiungere le cime dei monti pi√π alti di Lootia! Durante questa sfida incontrerai altri draghi, dovrai sfidarli ed essere un bravo domatore per salire fino alla vetta. Esistono inizalmente 3 monti, all'iscrizione verrai assegnato ad un Monte in base al livello del tuo drago, buon divertimento!\nRicorda che quando il drago partecipa, non ti potr√† aiutare nelle battaglie al di fuori della vetta.\n\n<b>Funzionamento</b>:\n\n- Il drago da sfidare verr√† scelto casualmente in base al Monte in cui si viene inseriti\n- Una volta sconfitto si ottiene 1 √ê o pi√π, se si viene sconfitti lo si perde\n- Nel combattimento si hanno a disposizione 4 mosse con diversi effetti\n- Ogni mossa consuma un certo numero di Scaglie ‚öúÔ∏è e ne ottieni una alla fine di ogni turno, per un massimo di 5\n\nAl termine della stagione se sarai posizionato in un punto abbastanza alto della classifica passerai al Monte successivo, se sarai in fondo tornerai al precedente, altrimenti rimarrai nell'attuale.", kb2);
					});
				}else{
					var top_id = rows[0].top_id;
					var enemy_dragon_id = rows[0].enemy_dragon_id;
					var wait_time = rows[0].wait_time;

					if (enemy_dragon_id != 0){
						bot.sendMessage(message.chat.id, "Stai combattendo contro un drago!", kbCombat);
						return;
					}

					if (top_id == 0){
						connection.query('SELECT id, name, min_lev FROM dragon_top_list', function(err, rows, fields) {
							if (err) throw err;
							var top_id = 0;
							var name = "";
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (dragon_level > rows[i].min_lev){
									top_id = rows[i].id;
									name = rows[i].name;
								}
							}

							connection.query('UPDATE dragon_top_status SET top_id = ' + top_id + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO dragon_top_rank (player_id, top_id, dragon_id) VALUES (' + player_id + ',' + top_id + ',' + dragon_id + ')', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "In base al tuo livello sei stato assegnato al *" + name + "*!", kbBack);
								});
							});
						});
					}else{
						connection.query('SELECT R.id, R.dragon_id, R.rank, D.name, D.type FROM dragon_top_rank R, dragon D WHERE R.dragon_id = D.id ORDER BY rank DESC', function(err, rows, fields) {
							if (err) throw err;

							var range = 3;

							var leaderboard = [];
							var dragon_names = [];
							var dragon_type = [];
							var dragon_rank = [];
							var mypos = 0;
							var text = "";

							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								leaderboard.push(rows[i].id);
								dragon_names.push(rows[i].name);
								dragon_type.push(rows[i].type);
								dragon_rank.push(rows[i].rank);
								if (dragon_id == rows[i].dragon_id){
									mypos = i;
								}
							}
							for (var i = (mypos-range); i < (mypos+(range+1)); i++) {
								if (dragon_names[i] != undefined){
									if (i == mypos){
										text += (i+1) + "¬∞ <b>" + dragon_names[i] + " " + dragon_type[i] + "</b> " + dragonSym(dragon_type[i]) + " (" + dragon_rank[i] + " √ê)\n";
									}else{
										text += (i+1) + "¬∞ " + dragon_names[i] + " " + dragon_type[i] + " " + dragonSym(dragon_type[i]) + " (" + dragon_rank[i] + " √ê)\n";
									}
								}
							}

							connection.query('SELECT name FROM dragon_top_list WHERE id = ' + top_id, function(err, rows, fields) {
								if (err) throw err;

								var kb = {
									parse_mode: "HTML",
									reply_markup: {
										resize_keyboard: true,
										//one_time_keyboard: true,
										"keyboard": [['Combatti'],['Riposa','Abbandona'],['Torna al menu']]
									}
								};
								var kbSleep = {
									parse_mode: "HTML",
									reply_markup: {
										resize_keyboard: true,
										//one_time_keyboard: true,
										"keyboard": [['1','2','3','4'],['5','6','7','8'],['9','10'],['Torna al menu']]
									}
								};

								var status = "<i>" + dragon_name + "</i> - 0 |" + calcDragonLife(dragon_life, dragon_total_life) + "| " + formatNumber(dragon_life) + " ‚ù§Ô∏è";

								bot.sendMessage(message.chat.id, status + "\nClassifica attuale <b>" + rows[0].name + "</b>\n\n" + text + "\nLa stagione attuale scadr√† alle " + finish_date, kb).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text == "Combatti"){

											if (sleep_time != null){
												var d = new Date(sleep_time);
												var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
												bot.sendMessage(message.chat.id, "Il tuo drago si sta riposando, attendi fino alle " + short_date, back);
												return;
											}

											if (wait_time != null){
												var d = new Date(wait_time);
												var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes());
												bot.sendMessage(message.chat.id, "Il tuo drago ha appena concluso uno scontro, attendi fino alle " + short_date, back);
												return;
											}

											connection.query('SELECT R.dragon_id, R.rank, D.name, D.type, D.level, D.arms_id FROM dragon_top_rank R, dragon D WHERE R.dragon_id = D.id AND R.top_id = ' + top_id + ' AND R.dragon_id != ' + dragon_id + ' AND R.combat = 0 AND D.sleep_h = 0 ORDER BY RAND()', function(err, rows, fields) {
												if (err) throw err;

												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "La fiamma blu non ha trovato nessun avversario degno, riprova pi√π tardi", kbBack);
													return;
												}

												var name = rows[0].name;
												var type = rows[0].type;
												var rank = rows[0].rank;
												var level = rows[0].level;
												var enemy_dragon_arms_id = rows[0].arms_id;
												var enemy_dragon_id = rows[0].dragon_id;

												connection.query('UPDATE dragon_top_status SET enemy_dragon_id = ' + enemy_dragon_id + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
													connection.query('UPDATE dragon_top_rank SET combat = 1 WHERE player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;

														var scale = 1;
														if (dragon_arms_id == 709){
															var rand = Math.random()*100;
															if (rand < 50){
																scale = 2;
															}
														}
														var enemy_scale = 1;
														if (enemy_dragon_arms_id == 709){
															var rand = Math.random()*100;
															if (rand < 50){
																enemy_scale = 2;
															}
														}

														connection.query('UPDATE dragon SET scale = ' + enemy_scale + ' WHERE id = ' + enemy_dragon_id, function(err, rows, fields) {
															connection.query('UPDATE dragon SET scale = ' + scale + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "La üî• Fiamma del Prescelto si muove sopra i nomi dei draghi del monte e si ferma sul drago <b>" + name + " " + type + "</b>. Questo sfidante ha raggiunto <b>" + rank + " √ê</b> ed √® un drago di livello <b>" + level + "</b>. Buona fortuna!", kbCombat);
															});
														});
													});
												});
											});
										}else if (answer.text == "Riposa"){
											if (sleep_time != null){
												var d = new Date(sleep_time);
												var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
												bot.sendMessage(message.chat.id, "Il tuo drago si sta riposando, attendi fino alle " + short_date, back);
												return;
											}

											if (dragon_life == dragon_total_life){
												bot.sendMessage(message.chat.id, "Il tuo drago √® in piena salute, non serve riposare", kbBack);
												return;
											}

											bot.sendMessage(message.chat.id, "Puoi far riposare il tuo drago per fargli recuperare salute, recuperer√† il 10% per ogni ora di riposo, per quante ore vuoi farlo riposare?", kbSleep).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													if (answer.text == "Torna al menu"){
														return;
													}
													var h = parseInt(answer.text);
													if (isNaN(h) || (h < 1) || (h > 10)){
														bot.sendMessage(message.chat.id, "Valore non valido: minimo 1 ora, massimo 10", kbBack);
														return;
													}

													var d = new Date();
													d.setHours(d.getHours() + h);
													var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
													var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

													connection.query('UPDATE dragon SET sleep_h = ' + h + ', sleep_time_end = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Il tuo drago si riposer√† fino alle " + short_date, kbBack);
													});
												};
											});
										}else if (answer.text == "Abbandona"){
											bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler abbandonare? Al tuo rientro sarai costretto a ricominciare", kbYesNo).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													if (answer.text == "si"){
														connection.query('DELETE FROM dragon_top_rank WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Hai abbandonato la vetta", back);
														});
														connection.query('UPDATE dragon_top_status SET top_id = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
													};
												};
											});
										};
									};
								});
							});
						});
					};
				};
			});
		});
	});
});

function calcDragonLife(dragon_life, dragon_total_life){
	var perc_life = "";
	var perc = Math.round((100/dragon_total_life*dragon_life)/10);
	for (i = 0; i < perc;i++){
		perc_life += "#";
	}
	var perc2 = 10-perc;
	for (i = 0; i < perc2;i++){
		perc_life += "-";
	}
	return perc_life;
}

function dragonToId(type){
	if (type == "delle Montagne"){
		dragon_type = 1;
	}else if (type == "dei Mari"){
		dragon_type = 2;
	}else if (type == "Infernale"){
		dragon_type = 3;
	}else if (type == "dell'Oscurit√†"){
		dragon_type = 4;
	}else if (type == "dei Cieli"){
		dragon_type = 5;
	}else if (type == "dei Ghiacci"){
		dragon_type = 6;
	}
	return dragon_type;
}

function typeWeak(type1, type2, isMove = 0){
	var weak = [];

	weak["myDmg"] = 0;
	weak["enemyDmg"] = 0;
	weak["isWeak"] = 0;

	if ((type1 == 4) && (type2 == 6)){
		weak["myDmg"] = 0.1;
		if (isMove == 1)
			weak["myDmg"] = 0.3;
	}
	if ((type1 == 4) && (type2 == 5)){
		weak["enemyDmg"] = 0.1;
		weak["isWeak"] = 1;
	}

	if ((type1 == 6) && (type2 == 5)){
		weak["myDmg"] = 0.1;
		if (isMove == 1)
			weak["myDmg"] = 0.3;
	}
	if ((type1 == 5) && (type2 == 3)){
		weak["enemyDmg"] = 0.1;
		weak["isWeak"] = 1;
	}

	if ((type1 == 2) && (type2 == 3)){
		weak["myDmg"] = 0.1;
		if (isMove == 1)
			weak["myDmg"] = 0.3;
	}
	if ((type1 == 2) && (type2 == 1)){
		weak["enemyDmg"] = 0.1;
		weak["isWeak"] = 1;
	}

	if ((type1 == 5) && (type2 == 4)){
		weak["myDmg"] = 0.1;
		if (isMove == 1)
			weak["myDmg"] = 0.3;
	}
	if ((type1 == 5) && (type2 == 6)){
		weak["enemyDmg"] = 0.1;
		weak["isWeak"] = 1;
	}

	if ((type1 == 1) && (type2 == 2)){
		weak["myDmg"] = 0.1;
		if (isMove == 1)
			weak["myDmg"] = 0.3;
	}
	if ((type1 == 1) && (type2 == 4)){
		weak["enemyDmg"] = 0.1;
		weak["isWeak"] = 1;
	}

	if ((type1 == 3) && (type2 == 1)){
		weak["myDmg"] = 0.1;
		if (isMove == 1)
			weak["myDmg"] = 0.3;
	}
	if ((type1 == 1) && (type2 == 2)){
		weak["enemyDmg"] = 0.1;
		weak["isWeak"] = 1;
	}

	return weak;
}

bot.onText(/Entra in combattimento|Continua a combattere/i, function(message) {
	if (message.from.username != "fenix45"){
		return;
	}

	connection.query('SELECT account_id, id, reborn, charm_id, holiday FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var charm_id = rows[0].charm_id;

		var kbBack = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [['Torna alla vetta'],['Torna al menu']]
			}
		};

		var kbNext = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [['Continua a Combattere'],['Torna al menu']]
			}
		};

		var kbNext = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [['Continua a Combattere'],['Torna al menu']]
			}
		};

		var kbYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [['Si'],['Continua a Combattere']]
			}
		};

		var d = new Date();
		d.setMinutes(d.getMinutes() + 15);
		var dragon_time = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
		var dragon_time_short = addZero(d.getHours()) + ':' + addZero(d.getMinutes());

		connection.query('SELECT * FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi il drago.", back);
				return;				
			}

			var dragon_id = rows[0].id;
			var dragon_name = rows[0].name;
			var dragon_level = rows[0].level;
			var dragon_type = rows[0].type;
			var dragon_scale = rows[0].scale;
			var dragon_life = rows[0].life;
			var dragon_total_life = rows[0].total_life;

			var dragon_damage = rows[0].damage;
			var dragon_claws = rows[0].claws;
			var dragon_claws_id = rows[0].claws_id;
			var dragon_saddle_id = rows[0].saddle_id;
			var dragon_arms_id = rows[0].arms_id;
			var dragon_crit = rows[0].critical;

			var dragon_defense = rows[0].defense;
			var dragon_saddle = rows[0].saddle;

			connection.query('SELECT * FROM dragon_move WHERE type = ' + dragonToId(dragon_type), function(err, rows, fields) {
				if (err) throw err;

				var move = [];
				var dragon_moves = [];

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					dragon_moves.push(rows[i].name);
				}

				move.push([rows[0].name + " (" + rows[0].scale + " ‚öúÔ∏è)", rows[1].name + " (" + rows[1].scale + " ‚öúÔ∏è)"]);
				move.push([rows[2].name + " (" + rows[2].scale + " ‚öúÔ∏è)", rows[3].name + " (" + rows[3].scale + " ‚öúÔ∏è)"]);
				move.push(["Salta (0 ‚öúÔ∏è)", "Risorse"]);
				move.push(["Scruta","Rinuncia","Torna al menu"]);

				var kbCombat = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": move
					}
				};

				connection.query('SELECT id, top_id, enemy_dragon_id, poison, dmg_boost, ice, protection, wait_dmg, confusion FROM dragon_top_status WHERE player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;

					var enemy_dragon_id = rows[0].enemy_dragon_id;
					if (enemy_dragon_id == 0){
						bot.sendMessage(message.chat.id, "Iscriviti prima di entrare in combattimento", kbBack);
						return;
					}

					var dmg_boost = rows[0].dmg_boost;
					var poison = rows[0].poison;
					var ice = rows[0].ice;
					var protection = rows[0].protection;
					var wait_dmg = rows[0].wait_dmg;
					var confusion = rows[0].confusion;

					connection.query('SELECT dmg_boost, poison, ice, protection, wait_dmg, confusion FROM dragon_top_status WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
						if (err) throw err;

						var enemy_dmg_boost = rows[0].dmg_boost;
						var enemy_poison = rows[0].poison;
						var enemy_ice = rows[0].ice;
						var enemy_protection = rows[0].protection;
						var enemy_wait_dmg = rows[0].wait_dmg;
						var enemy_confusion = rows[0].confusion;

						connection.query('SELECT combat, rank FROM dragon_top_rank WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Accedi alla vetta prima di entrare in combattimento", kbBack);
								return;
							}

							if (rows[0].combat == 0){
								bot.sendMessage(message.chat.id, "Cerca un avversario prima di entrare in combattimento", kbBack);
								return;
							}

							var dragon_rank = rows[0].rank;

							connection.query('SELECT player.id, player.charm_id FROM player, dragon WHERE player.id = dragon.player_id AND dragon.id = ' + enemy_dragon_id, function(err, rows, fields) {
								if (err) throw err;

								var player_id2 = rows[0].id;
								var enemy_charm_id = rows[0].charm_id;

								connection.query('SELECT combat, rank FROM dragon_top_rank WHERE player_id = ' + player_id2, function(err, rows, fields) {
									if (err) throw err;

									var enemy_dragon_rank = rows[0].rank;

									connection.query('SELECT * FROM dragon WHERE id = ' + enemy_dragon_id, function(err, rows, fields) {
										if (err) throw err;

										var enemy_dragon_name = rows[0].name;
										var enemy_dragon_level = rows[0].level;
										var enemy_dragon_type = rows[0].type;
										var enemy_dragon_life = rows[0].life;
										var enemy_dragon_total_life = rows[0].total_life;
										var enemy_dragon_scale = rows[0].scale;

										var enemy_dragon_damage = rows[0].damage;
										var enemy_dragon_claws = rows[0].claws;
										var enemy_dragon_claws_id = rows[0].claws_id;
										var enemy_dragon_saddle_id = rows[0].saddle_id;
										var enemy_dragon_arms_id = rows[0].arms_id;
										var enemy_dragon_crit = rows[0].critical;

										var enemy_dragon_defense = rows[0].defense;
										var enemy_dragon_saddle = rows[0].saddle;

										var scale = "";
										if (dragon_scale > 0){
											for (var i = 0; i < dragon_scale; i++) {
												scale += "‚öúÔ∏è ";
											}
										}else{
											scale = "-";
										}

										var status = "Tuo drago " + dragonSym(dragon_type) + ": 0 |" + calcDragonLife(dragon_life, dragon_total_life) + "| " + formatNumber(dragon_life) + " ‚ù§Ô∏è\n";

										status += "Avversario " + dragonSym(enemy_dragon_type) + ": 0 |" + calcDragonLife(enemy_dragon_life, enemy_dragon_total_life) + "| " + formatNumber(enemy_dragon_life) + " ‚ù§Ô∏è\n"

										status += "Scaglie: " + scale;

										bot.sendMessage(message.chat.id, status + "\n\nQuale mossa utilizzare?", kbCombat).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {

												if (answer.text == "Torna al menu"){
													return;
												}

												if (answer.text == "Risorse"){
													connection.query('SELECT item.name, COUNT(inventory.id) As cnt FROM item, inventory WHERE item.id = inventory.item_id AND item.category = 6 AND inventory.player_id = ' + player_id + ' GROUP BY inventory.item_id', function(err, rows, fields) {
														if (err) throw err;

														for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
															iKeys.push([rows[i].name + " (" + rows[i].cnt + ")"]);
														};

														iKeys.push(["Continua a combattere"]);
														iKeys.push(["Torna al menu"]);

														var kb = {
															parse_mode: "Markdown",
															reply_markup: {
																resize_keyboard: true,
																//one_time_keyboard: true,
																"keyboard": iKeys
															}
														};

														bot.sendMessage(message.chat.id, "Quale oggetto vuoi utilizzare?", kb).then(function() {
															answerCallbacks[message.chat.id] = function(answer) {
																if ((answer.text == "Continua a combattere") || (answer.text == "Torna al menu")){
																	return;
																}
																var item = answer.text.substring(0, answer.text.indexOf("(")-1);
																connection.query('SELECT id FROM item WHERE name = "' + item + '"', function(err, rows, fields) {
																	if (err) throw err;
																	if (Object.keys(rows).length == 0){
																		bot.sendMessage(message.chat.id, "L'oggetto selezionato non esiste", kbNextH);
																		return;
																	}
																	var item_id = rows[0].id;
																	connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id, function(err, rows, fields) {
																		if (err) throw err;
																		if (Object.keys(rows).length == 0){
																			bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", kbNextH);
																			return;
																		}

																		connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id + " LIMIT 1", function(err, rows, fields) {
																			if (err) throw err;
																			if ((item_id == 700) || (item_id == 701) || (item_id == 702)){

																				var scale = 0;
																				if (item_id == 700){
																					scale = 1;
																				}else if (item_id == 701){
																					scale = 2;
																				}else if (item_id == 703){
																					scale = 3;
																				}

																				if (dragon_scale+scale > 5)
																					scale = 5-dragon_scale;

																				connection.query('UPDATE dragon SET scale = scale+' + scale + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																					bot.sendMessage(message.chat.id, "Hai ottenuto " + scale + " ‚öúÔ∏è!", kbNextH);
																				});
																			}else if ((item_id == 703) || (item_id == 704) || (item_id == 705)){

																				var life = 0;
																				if (item_id == 703){
																					life = 0.05;
																				}else if (item_id == 704){
																					life = 0.1;
																				}else if (item_id == 705){
																					life = 0.20;
																				}

																				connection.query('UPDATE dragon SET life = total_life*' + life + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																					life = life*100;
																					bot.sendMessage(message.chat.id, "Il tuo drago ha recuperato il " + life + "% di vita!", kbNextH);
																				});
																			}else if (item_id == 706){

																				var sign = "+";
																				var text = "ottenuto";
																				var rand = Math.random()*100;
																				if ((rand < 50) && (dragon_level > 5)){
																					sign = "-";
																					text = "perso";
																				}

																				connection.query('UPDATE dragon SET exp = exp' + sign + '70 WHERE player_id = ' + player_id, function(err, rows, fields) {
																					life = life*100;
																					bot.sendMessage(message.chat.id, "Il tuo drago ha " + text + " un livello!", kbNextH);
																					checkDragon(player_id);
																				});
																			};
																		});
																	});
																});
															};
														});
													});
												}

												if (answer.text == "Scruta"){
													bot.sendMessage(message.chat.id, "<b>Informazioni sul drago avversario:</b>\n" + "Nome: " + enemy_dragon_name + " " + enemy_dragon_type + "\nLivello: " + enemy_dragon_level, kbNextH);
													return;
												}

												if (answer.text == "Rinuncia"){
													bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler abbandonare? Al tuo rientro sarai costretto a ricominciare.", kbYesNo).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {
															if (answer.text.toLowerCase() == "si"){
																connection.query('DELETE FROM dragon_top_rank WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai abbandonato la vetta", kbBack);
																});
																connection.query('UPDATE dragon_top_status SET enemy_dragon_id = 0, top_id = 0 WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															};
														};
													});
													return;
												}

												var skip = 0;
												if (answer.text.indexOf("Salta") != -1){
													skip = 1;
												}

												var move = answer.text.substring(0, answer.text.indexOf("(")-1);
												if ((dragon_moves.indexOf(move) == -1) && (skip == 0)){
													return;
												}
												connection.query('SELECT name, scale, damage, move_type FROM dragon_move WHERE name = "' + move + '"', function(err, rows, fields) {
													if (err) throw err;

													var move_damage = 0;
													var move_name = "";
													var move_scale = 0;
													var move_type = 0;

													if (Object.keys(rows).length > 0){
														if (dragon_scale < rows[0].scale){
															bot.sendMessage(message.chat.id, "Non hai abbastanza ‚öúÔ∏è per utilizzare questa mossa (" + rows[0].scale + " necessarie)", kbNext);
															return;
														}

														move_damage = rows[0].damage;
														move_name = rows[0].name;
														move_scale = rows[0].scale;
														move_type = rows[0].move_type;
													}

													var enemySkip = 0;

													//Per saltare i turni a volte
													var rand = Math.random()*100;
													var prob = 50-10*enemy_dragon_scale;
													if (prob > rand)
														enemySkip = 1;

													connection.query('SELECT name, scale, damage FROM dragon_move WHERE scale <= ' + enemy_dragon_scale + ' AND type = ' + dragonToId(enemy_dragon_type) + ' ORDER BY RAND()', function(err, rows, fields) {

														var enemy_move_name = "";
														var enemy_move_damage = 0;
														var enemy_move_type = 0;

														if ((Object.keys(rows).length > 0) && (enemySkip == 0)){
															enemy_move_name = rows[0].name;
															enemy_move_damage = rows[0].damage;
															enemy_move_type = rows[0].type;

															connection.query('UPDATE dragon SET scale = scale-' + rows[0].scale + ' WHERE id = ' + enemy_dragon_id, function(err, rows, fields) {
																if (err) throw err;
															});

															enemy_dragon_scale -= rows[0].scale;
														}else{
															enemySkip = 1;
														}

														dragon_scale -= move_scale;

														connection.query('UPDATE dragon SET scale = scale-' + move_scale + ' WHERE id = ' + dragon_id, function(err, rows, fields) {
															if (err) throw err;

															//asd
															var rand = Math.random()*100;
															var crit_txt = "";

															var weak1 = typeWeak(dragonToId(dragon_type), dragonToId(enemy_dragon_type));
															var weak2 = typeWeak(dragonToId(enemy_dragon_type), dragonToId(dragon_type));
															var moveWeak1 = typeWeak(move_type, dragonToId(enemy_dragon_type), 1);
															var moveWeak2 = typeWeak(enemy_move_type, dragonToId(dragon_type), 1);

															var moveCrit1 = 0;
															var moveCrit2 = 0;

															//Mio

															if ((move_type == 1) && (enemy_poison == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (enemy_dragon_arms_id == 710){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (enemy_dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (dragon_claws_id == 717){
																	randC += 5;
																}
																if (enemy_dragon_claws_id == 744){
																	randC -= 5;
																}
																if (enemy_dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	enemy_poison = 2;
																	if (dragon_claws_id == 747){
																		enemy_poison++;
																	}
																	connection.query('UPDATE dragon_top_status SET poison = ' + enemy_poison + ' WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}
															if ((move_type == 2) && (protection == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (enemy_dragon_arms_id == 710){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (enemy_dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (enemy_dragon_claws_id == 744){
																	randC -= 5;
																}
																if (enemy_dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	protection = 2;
																	if (dragon_claws_id == 741){
																		var rand = Math.random()*100;
																		if (rand < 10){
																			protection++;
																		}
																	}
																	connection.query('UPDATE dragon_top_status SET protection = ' + protection + ' WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}
															if ((move_type == 3) && (dmg_boost == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (enemy_dragon_arms_id == 710){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (enemy_dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (enemy_dragon_claws_id == 744){
																	randC -= 5;
																}
																if (enemy_dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	connection.query('UPDATE dragon_top_status SET dmg_boost = 2 WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	dmg_boost = 2;
																}
															}
															if ((move_type == 4) && (enemy_confusion == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (enemy_dragon_arms_id == 710){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (dragon_claws_id == 716){
																	randC += 5;
																}
																if (enemy_dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (enemy_dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (enemy_dragon_claws_id == 744){
																	randC -= 5;
																}
																if (enemy_dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	enemy_confusion = 2;
																	if (dragon_claws_id == 727){
																		var rand = Math.random()*100;
																		if (rand < 10){
																			enemy_confusion++;
																		}
																	}
																	connection.query('UPDATE dragon_top_status SET confusion = ' + enemy_confusion + ' WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}
															if ((move_type == 5) && (wait_dmg == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (enemy_dragon_arms_id == 710){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (enemy_dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (enemy_dragon_claws_id == 744){
																	randC -= 5;
																}
																if (enemy_dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	connection.query('UPDATE dragon_top_status SET wait_dmg = 2 WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	wait_dmg = 2;
																}
															}
															if ((move_type == 6) && (enemy_ice == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (enemy_dragon_arms_id == 710){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (enemy_dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (enemy_dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (enemy_dragon_claws_id == 744){
																	randC -= 5;
																}
																if (enemy_dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	enemy_ice = 2;
																	if (dragon_claws_id == 721){
																		var rand = Math.random()*100;
																		if (rand < 10){
																			enemy_ice++;
																		}
																	}
																	connection.query('UPDATE dragon_top_status SET ice = ' + enemy_ice + ' WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}

															var damage = dragon_damage+dragon_claws;
															damage += damage*move_damage;

															var max = damage+(damage*0.1);
															var min = damage-(damage*0.1);
															damage = getRandomArbitrary(min, max);
															if (charm_id == 602){
																damage += 25;
																dragon_crit += 10;
															}
															if (charm_id == 695){
																damage += 30;
																dragon_crit += 15;
															}
															if ((dmg_boost > 0) && (skip == 0)){
																damage += damage*0.1;
																connection.query('UPDATE dragon_top_status SET dmg_boost = dmg_boost-1 WHERE boost_dmg > 0 AND dragon_id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
															var enemy_poison_dmg = 0;
															if (enemy_poison > 0){
																enemy_poison_dmg = damage*getRandomArbitrary(0.3, 0.5);
																if (dragon_claws_id == 746){
																	enemy_poison_dmg = enemy_poison_dmg*2;
																}
																damage += enemy_poison_dmg;
																connection.query('UPDATE dragon_top_status SET poison = poison-1 WHERE poison > 0 AND dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
															if ((ice > 0) && (skip == 0)){
																damage = 0;
																connection.query('UPDATE dragon_top_status SET ice = ice-1 WHERE ice > 0 AND dragon_id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
															if ((enemy_protection > 0) && (skip == 0)){
																damage -= damage*0.1;
																connection.query('UPDATE dragon_top_status SET dmg_boost = dmg_boost-1 WHERE boost_dmg > 0 AND dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
															var high_dmg = 0;
															if (wait_dmg > 0){
																if (wait_dmg == 1){
																	high_dmg = damage*1;
																	damage += high_dmg;
																}else{
																	skip = 1;
																}
																connection.query('UPDATE dragon_top_status SET wait_dmg = wait_dmg-1 WHERE wait_dmg > 0 AND dragon_id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}

															if (dragon_crit > rand){
																if (dragon_arms_id == 712){
																	damage += damage*1.5;
																}else{
																	damage += damage*1;
																}
																if (dragon_claws_id == 733){
																	damage += damage*1.3;
																}else{
																	damage += damage*1;
																}
																crit_txt = " CRITICI";
															}

															if (enemy_dragon_saddle_id == 719){
																moveWeak1["myDmg"] = 0;
															}

															damage += damage*weak1["myDmg"];
															damage += damage*moveWeak1["myDmg"];

															if (moveWeak1["myDmg"] != 0)
																moveCrit1 = 1;

															//Nemico

															if ((enemy_move_type == 1) && (poison == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (dragon_arms_id == 710){
																	randC -= 5;
																}
																if (dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (enemy_dragon_claws_id == 717){
																	randC += 5;
																}
																if (dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (dragon_claws_id == 744){
																	randC -= 5;
																}
																if (dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	poison = 2;
																	if (dragon_claws_id == 747){
																		poison++;
																	}
																	connection.query('UPDATE dragon_top_status SET poison = ' + poison + ' WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}
															if ((enemy_move_type == 2) && (enemy_protection == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (dragon_arms_id == 710){
																	randC -= 5;
																}
																if (dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (dragon_claws_id == 744){
																	randC -= 5;
																}
																if (dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	enemy_protection = 2;
																	if (dragon_claws_id == 741){
																		enemy_protection++;
																	}
																	connection.query('UPDATE dragon_top_status SET protection = ' + enemy_protection + ' WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}
															if ((enemy_move_type == 3) && (enemy_dmg_boost == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (dragon_arms_id == 710){
																	randC -= 5;
																}
																if (dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (dragon_claws_id == 744){
																	randC -= 5;
																}
																if (dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	connection.query('UPDATE dragon_top_status SET dmg_boost = 2 WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	enemy_dmg_boost = 2;
																}
															}
															if ((enemy_move_type == 4) && (confusion == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (dragon_arms_id == 710){
																	randC -= 5;
																}
																if (dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (enemy_dragon_claws_id == 716){
																	randC += 5;
																}
																if (dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (dragon_claws_id == 744){
																	randC -= 5;
																}
																if (dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	confusion = 2;
																	if (enemy_dragon_claws_id == 727){
																		var rand = Math.random()*100;
																		if (rand < 10){
																			confusion++;
																		}
																	}
																	connection.query('UPDATE dragon_top_status SET confusion = ' + confusion + ' WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}
															if ((enemy_move_type == 5) && (enemy_wait_dmg == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (dragon_arms_id == 710){
																	randC -= 5;
																}
																if (dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (dragon_claws_id == 744){
																	randC -= 5;
																}
																if (dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	connection.query('UPDATE dragon_top_status SET wait_dmg = 2 WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																	enemy_wait_dmg = 2;
																}
															}
															if ((enemy_move_type == 6) && (ice == 0)){
																var rand = Math.random()*100;
																var randC = 40;
																if (dragon_arms_id == 710){
																	randC -= 5;
																}
																if (dragon_saddle_id == 720){
																	randC -= 5;
																}
																if (dragon_saddle_id == 725){
																	randC -= 5;
																}
																if (dragon_saddle_id == 732){
																	randC -= 10;
																}
																if (dragon_saddle_id == 738){
																	randC -= 10;
																}
																if (dragon_claws_id == 744){
																	randC -= 5;
																}
																if (dragon_claws_id == 749){
																	randC -= 5;
																}
																if (rand < randC){
																	ice = 2;
																	if (enemy_dragon_claws_id == 721){
																		var rand = Math.random()*100;
																		if (rand < 10){
																			ice++;
																		}
																	}
																	connection.query('UPDATE dragon_top_status SET ice = ' + ice + ' WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}
															}

															rand = Math.random()*100;
															var enemy_crit_txt = "";

															var enemy_damage = enemy_dragon_damage+enemy_dragon_claws;
															enemy_damage += enemy_damage*enemy_move_damage;

															var max = enemy_damage+(enemy_damage*0.1);
															var min = enemy_damage-(enemy_damage*0.1);
															enemy_damage = getRandomArbitrary(min, max);
															if (enemy_charm_id == 602){
																enemy_damage += 25;
																enemy_dragon_crit += 10;
															}
															if (enemy_charm_id == 695){
																enemy_damage += 30;
																enemy_dragon_crit += 15;
															}
															if ((enemy_dmg_boost > 0) && (enemySkip == 0)){
																enemy_damage += enemy_damage*0.1;
																connection.query('UPDATE dragon_top_status SET dmg_boost = dmg_boost-1 WHERE boost_dmg > 0 AND dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}

															//Riduzioni e aumenti di danno
															if (dragon_arms_id == 711){
																damage += damage*0.1;
															}
															if (enemy_dragon_arms_id == 711){
																enemy_damage += enemy_damage*0.1;
															}
															if (enemy_dragon_arms_id == 713){
																damage -= damage*0.1;
															}
															if (dragon_arms_id == 713){
																enemy_damage -= enemy_damage*0.1;
															}
															if (enemy_dragon_claws_id == 722){
																damage -= damage*0.1;
															}
															if (dragon_claws_id == 722){
																enemy_damage -= enemy_damage*0.1;
															}
															if (dragon_arms_id == 728){
																damage += damage*0.05;
															}
															if (enemy_dragon_arms_id == 728){
																enemy_damage += enemy_damage*0.05;
															}

															if (enemy_dragon_type == 3){
																if (dragon_saddle_id == 726){
																	enemy_damage -= enemy_damage*0.1;
																}
															}
															if (dragon_type == 3){
																if (enemy_dragon_saddle_id == 726){
																	damage -= damage*0.1;
																}
															}
															if (enemy_dragon_type == 1){
																if (dragon_saddle_id == 731){
																	enemy_damage -= enemy_damage*0.1;
																}
															}
															if (dragon_type == 1){
																if (enemy_dragon_saddle_id == 731){
																	damage -= damage*0.1;
																}
															}
															if (dragon_claws_id == 735){
																enemy_damage -= enemy_damage*0.05;
															}
															if (enemy_dragon_claws_id == 735){
																damage -= damage*0.05;
															}
															if (dragon_claws_id == 739){
																enemy_damage -= enemy_damage*0.1;
															}
															if (enemy_dragon_claws_id == 739){
																damage -= damage*0.1;
															}
															if (dragon_type == 2){
																if (enemy_dragon_saddle_id == 737){
																	damage -= damage*0.1;
																}
															}
															if (enemy_dragon_type == 2){
																if (dragon_saddle_id == 737){
																	enemy_damage -= enemy_damage*0.1;
																}
															}
															if (dragon_type == 4){
																if (enemy_dragon_saddle_id == 743){
																	damage -= damage*0.1;
																}
															}
															if (enemy_dragon_type == 4){
																if (dragon_saddle_id == 743){
																	enemy_damage -= enemy_damage*0.1;
																}
															}
															if (dragon_claws_id == 750){
																enemy_damage -= enemy_damage*0.1;
															}
															if (enemy_dragon_claws_id == 750){
																damage -= damage*0.1;
															}

															var poison_dmg = 0;
															if (poison > 0){
																poison_dmg = enemy_damage*getRandomArbitrary(0.3, 0.5);
																if (enemy_dragon_claws_id == 746){
																	poison_dmg = poison_dmg*2;
																}
																enemy_damage += poison_dmg;
																connection.query('UPDATE dragon_top_status SET poison = poison-1 WHERE poison > 0 AND dragon_id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
															if ((enemy_ice > 0) && (enemySkip == 0)){
																enemy_damage = 0;
																connection.query('UPDATE dragon_top_status SET ice = ice-1 WHERE ice > 0 AND dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
															if ((protection > 0) && (skip == 0)){
																enemy_damage -= enemy_damage*0.1;
																connection.query('UPDATE dragon_top_status SET protection = protection-1 WHERE protection > 0 AND dragon_id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}
															var enemy_high_dmg = 0;
															if (enemy_wait_dmg > 0){
																if (enemy_wait_dmg == 1){
																	enemy_high_dmg = enemy_damage*1;
																	enemy_damage += enemy_high_dmg;
																}else{
																	enemySkip = 1;
																}
																connection.query('UPDATE dragon_top_status SET wait_dmg = wait_dmg-1 WHERE wait_dmg > 0 AND dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
															}

															if (enemy_dragon_crit > rand){
																if (enemy_dragon_arms_id == 712){
																	enemy_damage += enemy_damage*1.5;
																}else{
																	enemy_damage += enemy_damage*1;
																}
																if (enemy_dragon_claws_id == 733){
																	enemy_damage += enemy_damage*1.3;
																}else{
																	enemy_damage += enemy_damage*1;
																}
																enemy_crit_txt = " CRITICI";
															}

															if (dragon_saddle_id == 719){
																moveWeak2["myDmg"] = 0;
															}

															enemy_damage += enemy_damage*weak2["myDmg"];
															enemy_damage += enemy_damage*moveWeak2["myDmg"];

															if (moveWeak2["myDmg"] != 0)
																moveCrit2 = 1;

															damage = Math.round(damage);
															enemy_damage = Math.round(enemy_damage);

															if (damage >= enemy_dragon_life){
																connection.query('UPDATE dragon_top_status SET enemy_dragon_id = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dragon SET life = 0 WHERE id = ' + enemy_dragon_id, function(err, rows, fields) {
																	if (err) throw err;

																	var rank = 1;
																	if (dragon_level < enemy_dragon_level){
																		rank = 2;
																	}

																	if (enemy_dragon_rank >= rank){
																		connection.query('UPDATE dragon_top_rank SET rank = rank-' + rank + ' WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}

																	connection.query('UPDATE dragon_top_rank SET rank = rank+' + rank + ' WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																		connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',9)', function(err, rows, fields) {
																			if (err) throw err;

																			var money = 0
																			var randM = Math.random()*100;
																			var bonus_money = ""; 
																			if (randM < 30){
																				money = dragon_level*getRandomArbitrary(20, 40);
																				if (dragon_arms == 714){
																					money += money*0.3;
																					bonus_money = " (Bonus: " + money + " ¬ß)";
																				}
																			}

																			bot.sendMessage(message.chat.id, "Hai sconfitto <b>" + enemy_dragon_name + "</b>, hai ottenuto " + rank + " √ê ed uno Scrigno Scaglia!" + bonus_money, kbBack);

																			connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																			});
																			connection.query('UPDATE dragon_top_status SET wait_time = "' + dragon_time + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																			});
																		});
																	});
																});
																return;
															}
															if (enemy_damage >= dragon_life){
																connection.query('UPDATE dragon_top_status SET enemy_dragon_id = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dragon_top_rank SET combat = 0 WHERE dragon_id = ' + enemy_dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('UPDATE dragon SET life = 0 WHERE id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;

																	var rank = 1;
																	if (enemy_dragon_level < dragon_level){
																		rank = 2;
																	}

																	if (dragon_rank >= rank){
																		connection.query('UPDATE dragon_top_rank SET rank = rank-' + rank + ' WHERE id = ' + dragon_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}

																	connection.query('UPDATE dragon_top_rank SET rank = rank+' + rank + ' WHERE id = ' + enemy_dragon_id, function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Sei stato sconfitto da <b>" + enemy_dragon_name + "</b> ed hai perso " + rank + " √ê!", kbBack);

																		connection.query('UPDATE dragon_top_status SET wait_time = "' + dragon_time + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	});
																});
																return;
															}

															connection.query('UPDATE dragon SET life = life-' + damage + ' WHERE id = ' + enemy_dragon_id, function(err, rows, fields) {
																if (err) throw err;
																if (poison_dmg > 0)
																	bot.sendMessage(message.chat.id, "Per avvelenamento hai perso " + poison_dmg  + " hp!");

																if (skip == 1){
																	if (ice > 0)
																		bot.sendMessage(message.chat.id, "Il tuo drago ha saltato il turno per congelamento!");
																	else if (wait_dmg > 0)
																		bot.sendMessage(message.chat.id, "Il tuo drago salta il turno! Si sta caricando!", kbNext);
																	else
																		bot.sendMessage(message.chat.id, "Il tuo drago ha saltato il turno!");
																}else if (damage <= 0){
																	bot.sendMessage(message.chat.id, "Il tuo drago non ha inflitto alcun danno all'avversario!");
																}else{
																	var extra = "";
																	if (moveCrit1 == 1){
																		extra = " E' superefficace!";
																	}
																	var moveEffect = ""
																	if (dmg_boost == 1){
																		moveEffect = "Aumentati grazie al potere della mossa di fuoco!\n";
																	}
																	if (high_dmg > 0){
																		moveEffect += "Dei quali " + high_dmg + " derivano dall'esserti colpito da solo!";
																	}
																	bot.sendMessage(message.chat.id, "Il tuo drago ha inflitto " + damage + " danni" + crit_txt + " all'avversario con " + move_name + "!" + extra + "\n" + moveEffect);
																}

																connection.query('UPDATE dragon SET life = life-' + enemy_damage + ' WHERE id = ' + dragon_id, function(err, rows, fields) {
																	if (err) throw err;
																	if (enemy_poison_dmg > 0)
																		bot.sendMessage(message.chat.id, "Per avvelenamento il nemico ha perso " + enemy_poison_dmg  + " hp!");

																	if (enemySkip == 1){
																		if (enemy_ice > 0)
																			bot.sendMessage(message.chat.id, "Il drago avversario salta il turno per congelamento!", kbNext);
																		else if (enemy_wait_dmg > 0)
																			bot.sendMessage(message.chat.id, "Il drago avversario salta il turno! Si sta caricando!", kbNext);
																		else
																			bot.sendMessage(message.chat.id, "Il drago avversario salta il turno!", kbNext);
																	}else if (enemy_damage <= 0){
																		bot.sendMessage(message.chat.id, "Il drago avversario non ha inflitto alcun danno!");
																	}else{
																		var extra = "";
																		if (moveCrit2 == 1){
																			extra = " E' superefficace!";
																		}
																		var moveEffect = ""
																		if (dmg_boost == 1){
																			moveEffect = "Aumentati grazie al potere della mossa di fuoco!\n";
																		}
																		if (enemy_high_dmg > 0){
																			moveEffect += "Dei quali " + enemy_high_dmg + " derivano dall'essersi colpito da solo!";
																		}
																		bot.sendMessage(message.chat.id, "Il drago avversario avversario ti infligge " + enemy_damage + " danni" + enemy_crit_txt + " con " + enemy_move_name + "!" + extra + "\n" + moveEffect, kbNext);
																	}

																	if ((dragon_scale+1) <= 5){
																		connection.query('UPDATE dragon SET scale = ' + (dragon_scale+1) + ' WHERE id = ' + dragon_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	}
																	if ((enemy_dragon_scale+1) <= 5){
																		connection.query('UPDATE dragon SET scale = ' + (enemy_dragon_scale+1) + ' WHERE id = ' + enemy_dragon_id, function(err, rows, fields) {
																			if (err) throw err;
																		});
																	};
																});
															});
														});
													});
												});
											};
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/team/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		helpMsg(message.chat.id, player_id, 4);

		var new_price = 5000;
		var price_drop = 0;
		var price_drop_msg = "";
		var n = new Date().getDay()
		var n2 = new Date().getDate();

		if (rows[0].team_time != null){
			var d = new Date(rows[0].team_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

			bot.sendMessage(message.chat.id, "Non puoi ancora entrare in un team, ne hai appena lasciato uno. Attendi fino alle " + long_date, back);
			return;
		}

		if (n == 0){
			price_drop = 1;
			new_price = 3500;
			price_drop_msg = "*SOLO OGGI* ";
		}

		connection.query('SELECT team.id As team_id, name FROM team, team_player WHERE team.id = team_player.team_id AND player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [['Fonda nuovo'],['Entra in uno esistente'],['Liste Membri','Hall of Fame'],['Torna al menu']]
					}
				};

				bot.sendMessage(message.chat.id, "I Team sono dei gruppi di battaglia utili negli scontri contro i boss, puoi crearlo (" + price_drop_msg + "ti coster√† " + new_price + " ¬ß) oppure entrare in uno gi√† esistente", kb);
			}else{
				var team_id = rows[0].team_id;
				connection.query('SELECT T2.name, T2.players FROM team T1 JOIN team T2 ON T1.child_team = T2.id WHERE T1.id = ' + team_id, function (err, rows, fields){
					if (err) throw err;

					var childName = "";
					var childPlayers = 0;
					if (Object.keys(rows).length > 0){
						childName = rows[0].name;
						childPlayers = rows[0].players;
					}

					connection.query('SELECT T2.name, T2.players FROM team T1 JOIN team T2 ON T1.id = T2.id WHERE T1.child_team = ' + team_id, function (err, rows, fields){
						if (err) throw err;

						var motherName = "";
						var motherPlayers = 0;
						if (Object.keys(rows).length > 0){
							motherName = rows[0].name;
							motherPlayers = rows[0].players;
						}

						connection.query('SELECT team_player.role, team_player.player_id, player.nickname FROM team_player, player WHERE player.id = team_player.player_id AND team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
							if (err) throw err;

							var isAdmin = 0;
							var adminId = 0;

							if (rows[0].role == 1){
								isAdmin = 1;
							}

							connection.query('SELECT player.id, player.nickname FROM team_player, player WHERE player.id = team_player.player_id AND team_id = ' + team_id + ' AND role = 1', function (err, rows, fields){
								if (err) throw err;

								if (Object.keys(rows).length == 0){
									connection.query('UPDATE team_player SET role = 1 WHERE team_id = ' + team_id + ' AND player_id = ' + player_id,  function (err, rows, fields){
										if (err) throw err;
									});
									adminName = message.from.username;
									adminId = player_id;
								}else{
									adminName = rows[0].nickname;
									adminId = rows[0].id;
								}

								connection.query('SELECT id FROM boss_team WHERE team_id = ' + team_id + ' AND unlocked = 1 AND killedby = "" ORDER BY `id` ASC',  function(err, rows, fields) {
									if (err) throw err;

									var att_boss = 0;
									if (Object.keys(rows).length > 0){
										att_boss = rows[0].id;
									}

									connection.query('SELECT team_player.player_id, role, boss_damage.boss_id, SUM(damage) As dmg, COUNT(damage) As dmg_cnt FROM boss_damage RIGHT JOIN team_player ON team_player.player_id = boss_damage.player_id WHERE team_player.team_id = ' + team_id + ' AND boss_damage.boss_id = ' + att_boss + ' GROUP BY team_player.player_id', function(err, rows, fields) {
										if (err) throw err;

										var list_dmg = [];
										var list_dmg_cnt = [];

										if (Object.keys(rows).length > 0){
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												list_dmg[rows[i].player_id] = rows[i].dmg;
												list_dmg_cnt[rows[i].player_id] = rows[i].dmg_cnt;
											}
										}

										connection.query('SELECT team.kill_num1, team.kill_num2, team.boost_id, team.point, class.name As class_name, team_player.*, last_command.time, team.craft_count As team_craft, (SELECT COUNT(*) FROM team_player WHERE team_id = ' + team_id + ') As cnt, player.id As player_id, player.rank, player.weapon, player.mission_time_end, player.travel_time_end, player.cave_time_end, player.holiday, player.ability, player.reborn, player.nickname, player.craft_count, player.life, player.total_life, player.exp, team.name, team.players, team.details, team.max_players, team.boss_count, team.level, team.closed, SUM(boss_damage.damage) As dmg, COUNT(boss_damage.damage) As dmg_cnt FROM last_command, `team_player` LEFT JOIN boss_damage ON boss_damage.player_id = team_player.player_id, player, team, class WHERE player.class = class.id AND team.id = team_player.team_id AND team_player.player_id = player.id AND team_player.team_id = ' + team_id + ' AND player.account_id = last_command.account_id GROUP BY nickname ORDER BY team_player.role DESC, team_player.id', function(err, rows, fields) {
											if (err) throw err;
											var iKeys = [];
											var teamName = rows[0].name;
											var closed = rows[0].closed;
											var details = rows[0].details;
											var team_craft = rows[0].team_craft;

											var num_members = rows[0].cnt;
											connection.query('UPDATE team SET players = ' + num_members + ' WHERE id = ' + team_id, function(err, rows, fields) {
												if (err) throw err;
											});

											if (rows[0].max_players == 19){
												connection.query('UPDATE team SET max_players = 20 WHERE id = ' + team_id, function(err, rows, fields) {
													if (err) throw err;
												});
											}

											var user_text = "\n\n\n<b>Membri nel team:</b>\n\n";
											var user_text2 = "";
											var partial_text = "\n\n<b>Attivit√† membri:</b>\n\n";

											var stars = "";
											var lev = 0;
											var player_atk = 0;
											var weapon_d = 0;
											var dragon_claws = 0;
											var act = "";
											var d = new Date();
											var long_date = "";
											var last = "";
											var suspended = "";
											var nickname = "";
											var class_name = "";
											var life = 0;
											var total_life = 0;
											var craft_count = 0;
											var ability = 0;
											var dmg = 0;
											var dmg_cnt = 0;
											var dmg2 = 0;
											var dmg_cnt2 = 0;
											var base_text = "";

											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												if (rows[i].dmg == null){
													rows[i].dmg = 0;
												}
												stars = "";
												if (rows[i].reborn >= 2){
													stars = rebSym(rows[i].reborn);
												}

												lev = Math.floor(rows[i].exp/10);
												weapon_d = parseInt(rows[i].weapon);
												dragon_claws = 0;
												player_atk = (lev+weapon_d) + " - " + ((lev+weapon_d)+(weapon_d+dragon_claws));

												if (rows[i].mission_time_end != null){
													d = new Date(rows[i].mission_time_end);
													long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
													act = "üèÉüèΩ Missione (" + long_date + ")";
												}else if (rows[i].travel_time_end != null){
													d = new Date(rows[i].travel_time_end);
													long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
													act = "üèÉ üèΩViaggio (" + long_date + ")";
												}else if (rows[i].cave_time_end != null){
													d = new Date(rows[i].cave_time_end);
													long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
													act = "üèÉüèΩ Cava (" + long_date + ")";
												}else if (rows[i].holiday == 1){
													act = "‚õ± Vacanza";
												}else{
													act = "";
												}

												if (rows[i].role == 0){
													d = new Date(rows[i].time);
													last = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();
												}else{
													last = "Nascosto";
												}

												if (rows[i].suspended == 1){
													suspended = " üí¨";
												}else{
													suspended = "";
												}

												var act_line = "";
												if ((act != "") || (suspended != "")){
													act_line = act + suspended + "\n";
												}

												nickname = rows[i].nickname;
												class_name = rows[i].class_name;
												life = rows[i].life;
												total_life = rows[i].total_life;
												craft_count = rows[i].craft_count;
												ability = rows[i].ability;
												dmg = rows[i].dmg;
												dmg_cnt = rows[i].dmg_cnt;
												rank = rows[i].rank;

												if (list_dmg[rows[i].player_id] == undefined){
													dmg2 = 0;
													dmg_cnt2 = 0;
												}else{
													dmg2 = list_dmg[rows[i].player_id];
													dmg_cnt2 = list_dmg_cnt[rows[i].player_id];
												}

												if (dmg2 == null){
													dmg2 = 0;
												}

												base_text = "<i>" + nickname + "</i> " + stars + " " + lev + " \n" +
													class_name + "\n" +
													act_line +
													"üïê " + last + "\n" +
													"üí• " + player_atk + "\n" +
													"‚ù§Ô∏è " + life + "/" + total_life + " hp\n" + 
													"üì¶ " + craft_count + " pnt creazione\n" +
													"üî¶ " + ability + " abilit√†\n" +
													"üõ° " + rank + " rango\n" +
													"üìà " + dmg + " dmg/" + dmg_cnt + " scalata\n" +
													"üêó " + dmg2 + " dmg/" + dmg_cnt2 + " boss attuale\n\n";

												partial_text += "<i>" + nickname + "</i> " + stars + " " + lev + " \n" +
													act_line +
													"üêó " + dmg2 + " dmg/" + dmg_cnt2 + " boss attuale\n\n";

												if (i < 10){
													user_text += base_text;
												}else{
													user_text2 += base_text;
												}
											}

											if (isAdmin == 1){
												// ADMIN
												iKeys.push(["Scalata Boss üêó"]);
												iKeys.push(["Dettaglio Membri"]);
												iKeys.push(["Aumenta Posti","Accademia"]);
												iKeys.push(["Cambia Admin","Cambia Nome"]);
												iKeys.push(["Potenziamenti Anima"]);
												iKeys.push(["Gestisci Membri","Sciogli","Limite"]);
												iKeys.push(["Hall of Fame","Liste Membri"]);
												if (closed == 1){
													iKeys.push(["Tipo: Chiuso"]);
												}else{
													iKeys.push(["Tipo: Aperto"]);
												}

												if (details == 1){
													iKeys.push(["Dettagli: Non Visibili"]);
												}else{
													iKeys.push(["Dettagli: Visibili"]);
												}

												iKeys.push(["Torna al menu"]);
											}else{
												// UTENTE
												iKeys.push(["Scalata Boss üêó"]);
												if (details == 1)
													iKeys.push(["Dettaglio Membri"]);
												iKeys.push(["Potenziamenti Anima"]);
												iKeys.push(["Hall of Fame","Notifiche"]);
												iKeys.push(["Liste Membri","Lascia"]);
												iKeys.push(["Torna al menu"]);
											}

											var kb = {
												parse_mode: "HTML",
												reply_markup: {
													resize_keyboard: true,
													//one_time_keyboard: true,
													"keyboard": iKeys
												}
											};

											var level = rows[0].level;
											var bonus = 0;
											var bonus_parz = 0;
											var bonus_compl = 0;

											if (rows[0].kill_num1 > 0)
												bonus_parz = Math.floor(Math.log(rows[0].kill_num1)*1000)+800;

											if (rows[0].kill_num2 > 0)
												bonus_compl = Math.floor(Math.log2(rows[0].kill_num2)*1500)+1500;

											bonus = (100*rows[0].level)+bonus_parz+bonus_compl;

											var boost_name = "";
											if (rows[0].boost_id == 1){
												boost_name = " (Temporaneo: Unione Fatale)";
											}else if (rows[0].boost_id == 2){
												boost_name = " (Temporaneo: Bottino Ricco)";
											}else if (rows[0].boost_id == 3){
												boost_name = " (Temporaneo: Formazione Impenetrabile)";
											}

											var text = "üèÜ <b>" + teamName + "</b>\n";
											text += "üë• " + rows[0].players + "/" + rows[0].max_players + " (+" + bonus + " ¬ß + bonus)\n";
											text += "üêó " + rows[0].boss_count + " sconfitti\n";
											text += "üì¶ " + formatNumber(team_craft) + " punti\n";
											text += "üìä " + rows[0].kill_num1 + " Parziali\n";
											text += "üìà " + rows[0].kill_num2 + " Complete\n";
											text += "ü¶ã " + rows[0].point + " Punti Anima" + boost_name + "\n";
											if (isAdmin == 1){
												text += "Usa '/messaggio testo' per inviare un messaggio al team";
											}else{
												text += "üëë " + adminName;
											}
											if (childName != ""){
												text += "\n\nAccademia " + childName + " (+1 ü¶ã/boss)";
											}
											if (motherName != ""){
												if (childName == "")
													text += "\n";
												text += "\nTeam Madre " + motherName;
											}

											if ((isAdmin == 1) || (details == 1)){
												text += partial_text;
											}

											bot.sendMessage(message.chat.id, text, kb).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													if (answer.text == "Dettaglio Membri"){
														var extra = 0;
														var text = "";
														if ((isAdmin == 1) || (details == 1)){
															text += user_text;
															extra = 1;
															bot.sendMessage(message.chat.id, text, team_html);
															if ((rows[0].players >= 11) && (extra == 1)){
																setTimeout(function() {
																	bot.sendMessage(message.chat.id, user_text2, team_html);
																}, 500);
															}
														}else{
															bot.sendMessage(message.chat.id, "Non sei abilitato a visualizzare la lista dei membri", team);
														}
													}
												};
											});
										});
									});
								});
							});
						});
					});
				});
			}
		});
	});
});

bot.onText(/Potenziamenti Anima/i, function(message) {

	/*
	if (message.from.username != "fenix45"){
		bot.sendMessage(message.chat.id, "Pazienta", back)
		return;
	}
	*/

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT boost_id, level FROM team_boost WHERE team_id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var boost_list = "";
					if (Object.keys(rows).length > 0){
						boost_list += "Potenziamenti permanenti:\n";
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if ((rows[i].boost_id == 1) && (rows[i].level > 0)){
								boost_list += "> Unione Fatale (Livello " + rows[i].level + ", +" + (3*rows[i].level) + "%)\n";
							}
							if ((rows[i].boost_id == 2) && (rows[i].level > 0)){
								boost_list += "> Bottino Ricco (Livello " + rows[i].level + ", +" + (3*rows[i].level) + "%)\n";
							}
							if ((rows[i].boost_id == 3) && (rows[i].level > 0)){
								boost_list += "> Formazione Impenetrabile (Livello " + rows[i].level + ", -" + (3*rows[i].level) + "%)\n";
							}
						}
					}

					connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
						if (err) throw err;
						var level = rows[0].level;
						var closed = rows[0].closed;
						var details = rows[0].details;
						var point = rows[0].point;
						var boost_id = rows[0].boost_id;

						if (isAdmin == 0){
							bot.sendMessage(message.chat.id, "Il team possiede *" + point + "* ü¶ã. Puoi ottenerne altri uccidendo i boss oppure partecipando agli eventi di team. Solo l'amministratore pu√≤ procedere con i potenziamenti.\n\n" + boost_list, team)
							return;
						}

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Unione Fatale (40/200 ü¶ã)"],
											 ["Bottino Ricco (60/300 ü¶ã)"],
											 ["Formazione Impenetrabile (50/250 ü¶ã)"],
											 ["Richiamo dei Guerrieri (200 ü¶ã)"],
											 ["Torna al team"],
											 ["Torna al menu"]]
							}
						};

						var kbSel = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Temporaneo"],["Permanente"],["Torna ai potenziamenti anima"]]
							}
						};

						var kbYesNo = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Si"],["Torna ai potenziamenti anima"]]
							}
						};

						var kbBack = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Torna ai potenziamenti anima"]]
							}
						};

						bot.sendMessage(message.chat.id, "Il tuo team possiede *" + point + "* ü¶ã. Puoi ottenerne altri uccidendo i boss oppure partecipando agli eventi di team. Seleziona un potenziamento da attivare.\n\n" + boost_list, kb).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if ((answer.text == "Torna al team") || (answer.text == "Torna al menu")){
									return;
								}

								if (answer.text.indexOf("Richiamo dei Guerrieri") != -1){

									if (crazyMode == 1){
										bot.sendMessage(message.chat.id, "Durante il folle non puoi usare questo potenziamento!", kbBack);
										return;
									}

									bot.sendMessage(message.chat.id, "Questo potenziamento √® istantaneo, se utilizzato quando si attende il respawn, questo avviene all'istante. Procedere spendendo 200 ü¶ã?", kbYesNo).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text.toLowerCase() == "si"){
												connection.query('SELECT point FROM team WHERE id = ' + team_id, function(err, rows, fields) {
													if (err) throw err;
													var point = rows[0].point;

													if (point < 200){
														bot.sendMessage(message.chat.id, "Il tuo team non ha abbastanza ü¶ã!", kbBack);
														return;
													}

													connection.query('UPDATE team SET point = point-200 WHERE id = ' + team_id, function(err, rows, fields) {
														if (err) throw err;

														respawnBossMan(team_id);
														bot.sendMessage(message.chat.id, "I boss sono stati riportati in vita!", kbBack);

														connection.query('SELECT player_id, chat_id FROM `team_player`, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' ORDER BY team_player.id', function(err, rows, fields) {
															if (err) throw err;

															for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																if (rows[i].chat_id != message.chat.id){
																	bot.sendMessage(rows[i].chat_id, "I boss sono stati riportati in vita! Torna a combattere!");
																}
															}
														});
													});
												});
											}
										};
									});
									return;
								}

								var p = 0;
								var p2 = 0;
								var id = 0;
								var desc = "";

								if (answer.text.indexOf("Unione Fatale") != -1){
									p = 40;
									p2 = 200;
									id = 1;
									desc = "Questa opzione permette di scegliere tra un potenziamento temporaneo per il team, che dar√† la possibilit√† di infliggere +50% di danno ai boss fino al respawn e coster√† " + p + " ü¶ã oppure un potenziamento permanente di +3% per livello al danno inflitto a tutti i boss, che coster√† " + p2 + " ü¶ã, continuare?";
								}else if (answer.text.indexOf("Bottino Ricco") != -1){
									p = 60;
									p2 = 300;
									id = 2;
									desc = "Questa opzione permette di scegliere tra un potenziamento temporaneo del team, che dar√† la possibilit√† di guadagnare +50% ¬ß dalla sconfitta dei boss fino al respawn e coster√† " + p + " ü¶ã oppure un potenziamento permanente di +3% per livello dei ¬ß guadagnati per ogni boss, che coster√† " + p2 + " ü¶ã, continuare?"
								}else if (answer.text.indexOf("Formazione Impenetrabile") != -1){
									p = 50;
									p2 = 250;
									id = 3;
									desc = "Questa opzione permette di scegliere tra un potenziamento temporaneo per il team, che dar√† la possibilit√† di subire -50% di danno dai boss fino al respawn e coster√† " + p + " ü¶ã oppure un potenziamento permanente di -3% per livello al danno subito da tutti i boss, che coster√† " + p2 + " ü¶ã, continuare?";
								}
								if (id == 0){
									bot.sendMessage(message.chat.id, "Potenziamento non valido", team);
									return;
								}
								bot.sendMessage(message.chat.id, desc, kbSel).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text.toLowerCase() == "temporaneo"){

											if (boost_id != 0){
												bot.sendMessage(message.chat.id, "Puoi attivare solo un potenziamento temporaneo alla volta, attendi il respawn", team);
												return;
											}

											bot.sendMessage(message.chat.id, "Spenderai " + p + " ü¶ã, continuare?", kbYesNo).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													if (answer.text.toLowerCase() == "si"){
														connection.query('SELECT point FROM team WHERE id = ' + team_id, function(err, rows, fields) {
															if (err) throw err;
															var point = rows[0].point;

															if (point < p){
																bot.sendMessage(message.chat.id, "Il tuo team non ha abbastanza ü¶ã!", kbBack);
																return;
															}

															connection.query('UPDATE team SET boost_id = ' + id + ', point = point-' + p + ' WHERE id = ' + team_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Potenziamento attivato! Terminer√† al respawn.", kbBack);
															});
														});
													}
												}
											});
										}else if (answer.text.toLowerCase() == "permanente"){
											bot.sendMessage(message.chat.id, "Spenderai " + p2 + " ü¶ã, continuare?", kbYesNo).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													if (answer.text.toLowerCase() == "si"){
														connection.query('SELECT point FROM team WHERE id = ' + team_id, function(err, rows, fields) {
															if (err) throw err;
															var point = rows[0].point;

															if (point < p2){
																bot.sendMessage(message.chat.id, "Il tuo team non ha abbastanza ü¶ã!", kbBack);
																return;
															}

															connection.query('SELECT level FROM team_boost WHERE boost_id = ' + id + ' AND team_id = ' + team_id, function(err, rows, fields) {
																if (Object.keys(rows).length > 0){
																	var level = rows[0].level;

																	if (level > 10){
																		bot.sendMessage(message.chat.id, "Questo potenziamento ha raggiunto il livello massimo!", kbBack);
																		return;
																	}

																	connection.query('UPDATE team_boost SET level=level+1 WHERE boost_id = ' + id + ' AND team_id = ' + team_id, function(err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE team SET point = point-' + p2 + ' WHERE id = ' + team_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Potenziamento migliorato al livello " + (level+1) + "!", kbBack);
																		});
																	});
																}else{
																	connection.query('INSERT INTO team_boost (team_id, boost_id, level) VALUES (' + team_id + ',' + id + ',1)', function(err, rows, fields) {
																		if (err) throw err;
																		connection.query('UPDATE team SET point = point-' + p2 + ' WHERE id = ' + team_id, function(err, rows, fields) {
																			bot.sendMessage(message.chat.id, "Potenziamento attivato!", kbBack);
																		});
																	});
																}
															});
														});
													}
												}
											});
										}
									};
								});
								//Fine
							};
						});
					});
				});
			});
		});
	});
});

bot.onText(/liste membri/i, function(message) {
	var keynull = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Nessuno"]]
		}
	};

	var kbBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna alle Liste Membri"],["Torna al team"]]
		}
	};

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;

		bot.sendMessage(message.chat.id, "Inserisci il nome del team da cercare, anche parziale. Per una ricerca precisa aggiungi l'asterisco al fondo.", keynull).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if ((answer.text != "Torna al menu") && (answer.text != "Nessuno")){

					var query = 'LIKE "%' + answer.text + '%"';
					if (answer.text.indexOf("*") != -1){
						answer.text = answer.text.replace("*","");
						query = '= "' + answer.text + '"';
					}

					connection.query('SELECT * FROM team WHERE name ' + query, function(err, rows, fields) {
						if (err) throw err;

						var search1 = Object.keys(rows).length;
						var res1 = rows;

						var terms = "";
						if (search1 > 1){
							terms += "\n\n";
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								terms += rows[i].name + "\n";
							}
						}

						connection.query('SELECT * FROM team WHERE name LIKE "' + answer.text + '"', function(err, rows, fields) {
							if (err) throw err;

							var search2 = Object.keys(rows).length;
							var res2 = rows;

							if ((search1 == 0) && (search2 == 0)){
								bot.sendMessage(message.chat.id, "Il team che hai richiesto non esiste", kbBack);
								return;
							}
							if ((search1 > 1) && (search2 == 0)){
								bot.sendMessage(message.chat.id, "Troppi risultati, riprova con termini di ricerca pi√π precisi" + terms, kbBack);
								return;
							}

							if (search1 == 1){
								rows = res1;
							}else{
								rows = res2;
							}

							var text = "Il team <b>" + rows[0].name + "</b> ha ucciso " + rows[0].boss_count + " boss\n\n";
							connection.query('SELECT player.nickname, player.reborn, player.exp FROM team_player, player WHERE player.id = team_player.player_id AND team_id = ' + rows[0].id + ' ORDER BY team_player.role DESC', function(err, rows, fields) {
								if (err) throw err;
								var stars = "";
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									text += rows[i].nickname + " " + rebSym(rows[i].reborn) + " (" + Math.floor(rows[i].exp/10) + ")\n";
								}
								bot.sendMessage(message.chat.id, text, kbBack);
							});
						});
					});
				}
			}
		});
	});	
});

bot.onText(/Fonda nuovo/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		var new_price = 5000;
		var price_drop = 0;
		var price_drop_msg = "";
		var n = new Date().getDay()
		var n2 = new Date().getDate();

		if (rows[0].team_time != null){
			var d = new Date(rows[0].team_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

			bot.sendMessage(message.chat.id, "Non puoi ancora entrare in un team, ne hai appena lasciato uno. Attendi fino alle " + long_date, back);
			return;
		}

		if (n == 0){
			price_drop = 1;
			new_price = 3500;
			price_drop_msg = "*SOLO OGGI* ";
		}

		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				bot.sendMessage(message.chat.id, "Sei gi√† in un team!", team);
				return;
			}

			if (money < new_price){
				bot.sendMessage(message.chat.id, "Non hai abbastanza soldi.", back);
				return;
			}

			bot.sendMessage(message.chat.id, "Scegli un nome per il tuo Team, ma fai attenzione non potrai cambiarlo. Inoltre non usare simboli ne la parola 'Team'.", mark).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					var name = answer.text.trim();

					if ((name.indexOf("Team") != -1) || (name.indexOf("team") != -1) || (name == "") || (name.indexOf("_") != -1) || (name.indexOf("*") != -1) || (name.toLowerCase() == "Torna al menu")){
						bot.sendMessage(message.chat.id, "Nome non valido.", back);
						return;						
					}

					if (re2.test(name) == false){
						bot.sendMessage(message.chat.id, "I simboli non sono consentiti.", back);
						return;	
					}

					connection.query('SELECT * FROM team WHERE name = "' + name + '"', function(err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length == 0){
							connection.query('INSERT INTO `team`(`id`, `name`, `players`, `max_players`) VALUES (DEFAULT,"' + name + '",1,3)', function(err, rows, fields) {
								if (err) throw err;
								connection.query('UPDATE player SET money = money - ' + new_price + ' WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Team " + name + " creato! Puoi ospitare 3 membri totali compreso te, torna su questa pagina per gestire il team e potenziarlo.", team);
								});
								connection.query('SELECT id FROM team WHERE name = "' + name + '"', function(err, rows, fields) {
									if (err) throw err;
									connection.query('INSERT INTO `team_player`(`id`, `player_id`, `team_id`) VALUES (DEFAULT,' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
										if (err) throw err;
										console.log("Admin aggiunto");
									});
									spawnTeamBoss(rows[0].id);
								});								
							});
						}else{
							bot.sendMessage(message.chat.id, "Il nome che hai inserito esiste gi√†, riprova.", team);
							return;
						}
					});
				};
			});			
		});
	});
});

bot.onText(/Entra in uno esistente|Pagina (.+)/i, function(message, match) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (rows[0].team_time != null){
			var d = new Date(rows[0].team_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

			bot.sendMessage(message.chat.id, "Non puoi ancora entrare in un team, ne hai appena lasciato uno. Attendi fino alle " + long_date, back);
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		var lev = Math.floor(rows[0].exp/10);
		var reborn = rows[0].reborn;

		connection.query('SELECT * FROM `team_player` WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				bot.sendMessage(message.chat.id, "Sei gi√† in un team!", team);
				return;
			}
			var iKeys = [];

			var thisPage = 1;
			var limMin = 0;
			var limMax = 50;
			if (match[1] != undefined){
				thisPage = parseInt(match[1]);
				limMin = 50*(thisPage-1);
				limMax = 50*thisPage;
			}

			connection.query('SELECT * FROM team WHERE closed = 0 AND players < max_players AND ' + getRealLevel(reborn, lev) + ' >= min_lev ORDER BY name LIMIT ' + limMin + ', ' + limMax, function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Non ci sono pi√π team disponibili o hanno raggiunto il limite di membri.", back);
					return;
				}

				var closed_text = "";

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					iKeys.push(["Entra in " + rows[i].name + " (" + rows[i].players + "/" + rows[i].max_players + ")"]);
				};

				if (Object.keys(rows).length >= 50){
					iKeys.push(["Pagina " + (thisPage+1)]);
				}
				iKeys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": iKeys
					}
				};

				bot.sendMessage(message.chat.id, "Seleziona il team al quale desideri unirti.", kb);
			});
		});
	});
});

bot.onText(/Hall of Fame/i, function(message) {
	connection.query('SELECT team.name FROM team, team_player WHERE team.id = team_player.team_id AND team_player.player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function(err, rows, fields) {
		if (err) throw err;

		var myTeam = 0;

		if (Object.keys(rows).length > 0){
			myTeam = rows[0].name;
		}

		connection.query('SELECT name As name, (craft_count+(boss_count*(SELECT COUNT(*) FROM team_player WHERE team_id = T.id))) As pnt FROM team T WHERE name != "Number Zero" GROUP BY id ORDER BY pnt DESC', function(err, rows, fields){
			if (err) throw err;
			var text = "Classifica Team:\n";
			var c = 1;
			var mypos = "";
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (c <= 15){
					text += c + "¬∞ " + rows[i].name + " (" + formatNumber(Math.floor(rows[i].pnt)) + " pnt)\n";
				}
				if (myTeam != 0){
					if (rows[i].name == myTeam){
						mypos = "\nIl tuo team:\n";
						mypos += c + "¬∞ " + rows[i].name + " (" + formatNumber(Math.floor(rows[i].pnt)) + " pnt)";
					}
				}
				c++;
			}
			bot.sendMessage(message.chat.id, text + mypos, team);
		});
	});
});

bot.onText(/Dettagli: |Dettagli: /i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					var closed = rows[0].closed;
					var details = rows[0].details;

					if (isAdmin == 0){
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore!", team);
						return;
					}
					if (details == 1){
						connection.query('UPDATE team SET details = 0 WHERE id = ' + team_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Ora i membri non visualizzano pi√π la lista dei membri.", team);
						});
					}else{
						connection.query('UPDATE team SET details = 1 WHERE id = ' + team_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Ora i membri possono visualizzare la lista dei membri.", team);
						});
					}					
				});
			});
		});
	});
});

bot.onText(/Tipo: Aperto|Tipo: Chiuso/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					var closed = rows[0].closed;
					var details = rows[0].details;

					if (isAdmin == 0){
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore!", team);
						return;
					}

					if (closed == 1){
						connection.query('UPDATE team SET closed = 0 WHERE id = ' + team_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Il team √® stato impostato su Aperto, gli utenti possono accedere liberamente.", team);
						});
					}else{
						connection.query('UPDATE team SET closed = 1 WHERE id = ' + team_id, function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Il team √® stato impostato su Chiuso, nessun utente pu√≤ accedere.", team);
						});
					}
				});
			});
		});
	});
});

bot.onText(/Gestisci Membri/i, function(message) {

	/*
	if (message.from.username != "fenix45"){
		bot.sendMessage(message.chat.id, "Manutenzione", back);
		return;
	}
	*/

	var player = message.text.substring(message.text.indexOf(" ")+1);
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT team_player.*, player.nickname FROM `team_player`, player WHERE player.id = team_player.player_id AND team_player.role = 0 AND team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}

			var iKeys = [];
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				iKeys.push([rows[i].nickname]);
			}
			iKeys.push(["Torna al menu"]);

			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT level FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					if (isAdmin == 0){
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore!", team);
						return;
					}

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": iKeys
						}
					};

					var kb2 = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Espelli","Sospendi"],["Sposta in Madre"],["Sposta in Accademia"],["Torna al menu"]]
						}
					};

					var kbBack = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Gestisci membri"],["Torna al team"],["Torna al menu"]]
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona il membro del team da gestire", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text != "Torna al menu"){

								var player = answer.text;

								bot.sendMessage(message.chat.id, "Cosa vuoi fare?", kb2).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text == "Espelli"){

											connection.query('SELECT chat_id, player.id FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function(err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "Non ho trovato il giocatore selezionato.", kbBack);
													return;
												}
												var chat_id = rows[0].chat_id;
												var playerId = rows[0].id;

												if (player_id == playerId){
													bot.sendMessage(message.chat.id, "Non puoi espellere te stesso", kbBack);
													return;
												}

												connection.query('DELETE FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + playerId + ' LIMIT 1', function(err, rows, fields) {
													if (err) throw err;
													connection.query('UPDATE team SET players = players-1 WHERE id = ' + team_id, function(err, rows, fields) {
														if (err) throw err;
														bot.sendMessage(message.chat.id, player + " √® stato cacciato dal team!", kbBack);
														bot.sendMessage(chat_id, "Sei stato cacciato dal team!");
													});

													var d2 = new Date();
													d2.setHours(d2.getHours() + 72);
													var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

													connection.query('UPDATE player SET boss_id = 0, team_time = "' + long_date + '" WHERE id = ' + playerId, function(err, rows, fields) {
														if (err) throw err;
													});
												});
											});
										}else if (answer.text == "Sospendi"){
											connection.query('SELECT chat_id, player.id, team_player.suspended FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function(err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "Non ho trovato il giocatore selezionato.", kbBack);
													return;
												}
												var chat_id = rows[0].chat_id;
												var playerId = rows[0].id;

												if (player_id == playerId){
													bot.sendMessage(message.chat.id, "Non puoi sospendere te stesso", kbBack);
													return;
												}

												var s = 0;
												if (rows[0].suspended == 0){
													s = 1;
												}

												connection.query('UPDATE team_player SET suspended = ' + s + ' WHERE player_id = ' + playerId, function (err, rows, fields){
													if (err) throw err;
													if (s == 1){
														bot.sendMessage(message.chat.id, player + " √® stato sospeso dal team!", kbBack);
														bot.sendMessage(chat_id, "Sei stato sospeso dal team!");
													}else{
														bot.sendMessage(message.chat.id, player + " non √® pi√π sospeso dal team!", kbBack);
														bot.sendMessage(chat_id, "Non sei pi√π sospeso dal team!");									
													}
												});
											});
										}else if (answer.text == "Sposta in Madre"){
											connection.query('SELECT chat_id, player.id, player.nickname FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function(err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "Non ho trovato il giocatore selezionato.", kbBack);
													return;
												}
												var chat_id = rows[0].chat_id;
												var playerId = rows[0].id;
												var nick = rows[0].nickname;

												connection.query('SELECT * FROM team WHERE child_team = ' + team_id, function(err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0){
														bot.sendMessage(message.chat.id, "Questo team non possiede un team madre", kbBack);
														return;
													}

													var motherId = rows[0].id;
													var teamName = rows[0].name;

													if (crazyMode == 1){
														bot.sendMessage(message.chat.id, "Durante l'evento folle non puoi trasferire", kbBack);
														return;
													}

													if (player_id == playerId){
														bot.sendMessage(message.chat.id, "Non puoi trasferire te stesso", kbBack);
														return;
													}

													connection.query('SELECT players, max_players FROM team WHERE id = ' + motherId, function(err, rows, fields) {
														if (err) throw err;

														if (rows[0].players >= rows[0].max_players){
															bot.sendMessage(message.chat.id, "Il team √® pieno!", kbBack);
															return;
														}

														var d2 = new Date();
														d2.setHours(d2.getHours() + 48);
														var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

														connection.query('UPDATE player SET boss_time = "' + long_date + '", boss_id = 0 WHERE id = ' + playerId, function(err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE team_player SET kill_streak = 0, team_id = ' + motherId + ' WHERE player_id = ' + playerId, function(err, rows, fields) {
																if (err) throw err;
																connection.query('DELETE FROM boss_damage WHERE player_id = ' + playerId, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai trasferito il membro nel Team Madre!", kbBack);
																	bot.sendMessage(chat_id, "Sei stato trasferito nel Team Madre dall'amministratore");

																	connection.query('SELECT player_id FROM team_player WHERE team_id = ' + motherId + ' AND role = 1', function(err, rows, fields) {
																		if (err) throw err;
																		connection.query('SELECT chat_id FROM player WHERE id = ' + rows[0].player_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(rows[0].chat_id, "<b>" + nick + "</b> √® stato trasferito nel tuo team", html);
																		});
																	});
																});
															});
														});
													});
												});
											});
										}else if (answer.text == "Sposta in Accademia"){
											connection.query('SELECT player.chat_id, player.id, player.nickname FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function(err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "Non ho trovato il giocatore selezionato.", kbBack);
													return;
												}
												var chat_id = rows[0].chat_id;
												var playerId = rows[0].id;
												var nick = rows[0].nickname;

												connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
													if (err) throw err;

													var childId = rows[0].child_team;

													if (childId == 0){
														bot.sendMessage(message.chat.id, "Questo team non possiede un'accademia", kbBack);
														return;
													}

													var teamName = rows[0].name;

													if (crazyMode == 1){
														bot.sendMessage(message.chat.id, "Durante l'evento folle non puoi trasferire", kbBack);
														return;
													}

													if (player_id == playerId){
														bot.sendMessage(message.chat.id, "Non puoi trasferire te stesso", kbBack);
														return;
													}

													connection.query('SELECT players, max_players FROM team WHERE id = ' + childId, function(err, rows, fields) {
														if (err) throw err;

														if (rows[0].players >= rows[0].max_players){
															bot.sendMessage(message.chat.id, "Il team √® pieno!", kbBack);
															return;
														}

														var d2 = new Date();
														d2.setHours(d2.getHours() + 48);
														var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

														connection.query('UPDATE player SET boss_time = "' + long_date + '", boss_id = 0 WHERE id = ' + playerId, function(err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE team_player SET kill_streak = 0, team_id = ' + childId + ' WHERE player_id = ' + playerId, function(err, rows, fields) {
																if (err) throw err;
																connection.query('DELETE FROM boss_damage WHERE player_id = ' + playerId, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai trasferito il membro in Accademia!", kbBack);
																	bot.sendMessage(chat_id, "Sei stato trasferito in Accademia dall'amministratore");

																	connection.query('SELECT player_id FROM team_player WHERE team_id = ' + childId + ' AND role = 1', function(err, rows, fields) {
																		if (err) throw err;
																		connection.query('SELECT chat_id FROM player WHERE id = ' + rows[0].player_id, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(rows[0].chat_id, "<b>" + nick + "</b> √® stato trasferito nel tuo team", html);
																		});
																	});
																});
															});
														});
													});
												});
											});
										}
									};
								});
							}
						}
					});
				});
			});
		});
	});
});

bot.onText(/^limite$/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					var closed = rows[0].closed;
					var details = rows[0].details;

					if (isAdmin == 0){
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore!", team);
						return;
					}

					bot.sendMessage(message.chat.id, "Inserisci il livello minimo di accesso al tuo team, sommando i livelli per rinascita corrispondente. Inserisci 0 per eliminare il controllo.", team).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var num = parseInt(answer.text);

							if (num > 1750){
								bot.sendMessage(message.chat.id, "Livello non valido, massimo 1750", team);
								return;
							}

							connection.query('UPDATE team SET min_lev = ' + num + ' WHERE id = ' + team_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Livello minimo (" + getLevel(num) + ") impostato correttamente", team);
							});
						};
					});
				});
			});
		});
	});
});

bot.onText(/^Accademia/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		connection.query('SELECT team_player.*, player.nickname FROM `team_player`, player WHERE player.id = team_player.player_id AND team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}

			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;

					var now = new Date();

					if (rows[0].child_time != null){
						var d = new Date(rows[0].child_time);
						if (d > now){
							var long_date = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear() + " alle " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

							bot.sendMessage(message.chat.id, "Prima di cambiare accademia devi aspettare fino al " + long_date, team);
							return;
						}
					}

					if (rows[0].child_team != 0){
						bot.sendMessage(message.chat.id, "Questo team √® gi√† collegato ad un'accademia, se continui andrai a rimpiazzarla", team);
					}

					var teamName = rows[0].name;

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Scollega"],["Annulla"]]
						}
					};

					if (isAdmin == 0){
						bot.sendMessage(message.chat.id, "Questa funzione √® riservata all'amministratore!", team);
						return;
					}

					bot.sendMessage(message.chat.id, "Collegare un accademia a questo team aumenter√† il premio per uccisione boss. Inserisci il nome completo del team da rendere accademia di questo.\nNota: Inizierai a ottenere bonus solo se l'accademia √® almeno al livello 5, lo stesso nell'altro senso\nNon potrai cambiare accademia per una settimana", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text == "Scollega"){
								connection.query('UPDATE team SET child_team = 0 WHERE child_team = ' + team_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Il tuo team non √® pi√π un'accademia", team);
								});
								return;
							}
							if ((answer.text != "Annulla") && (answer.text != "Torna al menu")){
								connection.query('SELECT * FROM team WHERE name = "' + answer.text + '"', function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Questo team non esiste", team);
										return;
									}

									var teamName2 = rows[0].name;

									if (team_id == rows[0].id){
										bot.sendMessage(message.chat.id, "Lo stesso team non pu√≤ essere sia madre che accademia di se stesso", team);
										return;
									}

									var d = new Date();
									d.setDate(d.getDate() + 7);
									var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

									connection.query('UPDATE team SET child_team = ' + rows[0].id + ', child_time = "' + long_date + '" WHERE id = ' + team_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, teamName2 + " √® ora accademia di " + teamName + "!", team);
									});
								});
							};
						};
					});
				});
			});
		});
	});
});

bot.onText(/Lascia$/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player` WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ' LIMIT 1) ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
				if (err) throw err;
				var level = rows[0].level;

				bot.sendMessage(message.chat.id, "Sei sicuro di voler uscire dal team?", conf).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						var action = answer.text;
						if (action == "Torna al Team"){
							return;
						}else if (action == "Conferma"){	
							connection.query('SELECT player.chat_id FROM player, team_player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND role = 1', function(err, rows, fields) {
								if (err) throw err;
								var chat_id = rows[0].chat_id;
								connection.query('DELETE FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
									if (err) throw err;
									connection.query('UPDATE team SET players = players-1 WHERE id = ' + team_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Sei uscito dal team! Per 72 ore non puoi entrare o creare un altro team!", back);
										bot.sendMessage(chat_id, message.from.username + " √® uscito dal team!");
									});

									var d2 = new Date();
									d2.setHours(d2.getHours() + 72);
									var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

									connection.query('UPDATE player SET boss_id = 0, team_time = "' + long_date + '" WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
									});
								});
							});
						}
					};
				});
			});
		});
	});
});

bot.onText(/Notifiche$/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player` WHERE team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ' LIMIT 1) ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT notification FROM team_player WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				var notify = rows[0].notification;

				connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;

					bot.sendMessage(message.chat.id, "Cambiare l'impostazione notifiche da parte del team?", conf).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var action = answer.text;
							if (action == "Torna al Team"){
								return;
							}else if (action == "Conferma"){
								if (notify == 1){
									notify = 0;
								}else{
									notify = 1;
								}
								connection.query('UPDATE team_player SET notification = ' + notify + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									if (notify == 0){
										bot.sendMessage(message.chat.id, "Hai disattivato le notifiche team!", back);
									}else{
										bot.sendMessage(message.chat.id, "Hai attivato le notifiche team!", back);
									}
								});
							}
						};
					});
				});
			});
		});
	});
});

bot.onText(/Sciogli/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					if (isAdmin == 1){

						bot.sendMessage(message.chat.id, "Sei sicuro di voler eliminare il team?", conf).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								var action = answer.text;
								if (action == "Conferma"){
									connection.query('SELECT * FROM team_player WHERE team_id = ' + team_id, function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 1){
											connection.query('DELETE FROM team_player WHERE team_id = ' + team_id, function(err, rows, fields) {
												if (err) throw err;
												connection.query('DELETE FROM team WHERE id = ' + team_id, function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Team eliminato! Non puoi crearlo o accedere ad un altro team prima che siano passate 72 ore!", back);
													return;
												});
											});
											var d2 = new Date();
											d2.setHours(d2.getHours() + 72);
											var long_date = d2.getFullYear() + "-" + addZero(d2.getMonth()+1) + "-" + addZero(d2.getDate()) + " " + addZero(d2.getHours()) + ':' + addZero(d2.getMinutes()) + ':' + addZero(d2.getSeconds());

											connection.query('UPDATE player SET boss_id = 0, team_time = "' + long_date + '" WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
											});
											connection.query('DELETE FROM boss_team WHERE team_id = ' + team_id, function(err, rows, fields) {
												if (err) throw err;
											});											
										}else{
											bot.sendMessage(message.chat.id, "Devi prima espellere tutti i membri del team!", team);
											return;
										}
									});
								}
							};
						});
					}else{
						bot.sendMessage(message.chat.id, "Questa operazione √® consentita solo all'amministratore.", back);
						return;
					}	
				});
			});
		});
	});
});

bot.onText(/cambia admin/i, function(message) {

	var player = message.text.substring(message.text.indexOf(":")+2);

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;
					if (isAdmin == 1){
						var iKeys = [];

						connection.query('SELECT player.nickname FROM `team_player`, player WHERE team_player.player_id = player.id AND team_id = ' + team_id, function(err, rows, fields) {
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].nickname != message.from.username){
									iKeys.push(["Cambia admin: " + rows[i].nickname]);										
								}
							}

							if ((player != "") && (player != " ") && (message.text.indexOf(":") != -1)){
								connection.query('SELECT player.nickname FROM `team_player`, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' AND nickname = "' + player + '"', function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length > 0){
										connection.query('SELECT id FROM player WHERE nickname = "' + player + '"', function(err, rows, fields) {
											if (err) throw err;
											var newAdmin = rows[0].id;
											connection.query('UPDATE team_player SET role = 0 WHERE player_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
											});
											connection.query('UPDATE team_player SET role = 1 WHERE player_id = ' + newAdmin, function(err, rows, fields) {
												if (err) throw err;
											});
											bot.sendMessage(message.chat.id, "Cambio admin completato!", back);
										});
									}else{
										bot.sendMessage(message.chat.id, "Questo giocatore non √® valido.", back);
										return;
									}
								});
								return;
							}


							var kb = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									//one_time_keyboard: true,
									"keyboard": iKeys
								}
							};

							bot.sendMessage(message.chat.id, "Chi vuoi eleggere amministratore al posto tuo?", kb);
						});
					}else{
						bot.sendMessage(message.chat.id, "Questa operazione √® consentita solo all'amministratore.", back);
						return;	
					}
				});
			});
		});
	});
});

bot.onText(/^aumenta posti/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var money = rows[0].money;
		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team", team);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				connection.query('SELECT * FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var level = rows[0].level;

					if (isAdmin == 1){
						if (level >= 9){
							bot.sendMessage(message.chat.id, "Hai raggiunto il livello massimo del Team.", team);
							return;
						}

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [['Conferma'],['Torna al Team']]
							}
						};

						var price = 4000;
						if (level+1 < 2){
							price = 8000;
						}else if (level+1 < 4){
							price = 10000;
						}else if (level+1 < 6){
							price = 15000;
						}else if (level+1 < 7){
							price = 20000;
						}else if (level+1 < 8){
							price = 30000;
						}else{
							price = 50000;
						}

						bot.sendMessage(message.chat.id, "Il potenziamento al livello " + (level+1) + " ti coster√† " + price + " ¬ß e aumenter√† lo spazio per i membri del team", kb).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								var action = answer.text;
								if (action == "Conferma"){
									if (money < price){
										bot.sendMessage(message.chat.id, "Non hai abbastanza monete.", team);
										return;
									}
									var upd = 2;
									if (level == 8){
										upd = 3;
									}
									connection.query('UPDATE team SET level = level+1, max_players = max_players+' + upd + ' WHERE id = ' + team_id, function(err, rows, fields) {
										if (err) throw err;
										connection.query('UPDATE player SET money=money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											connection.query('SELECT level, max_players FROM team WHERE id = ' + team_id, function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Potenziamento al livello " + rows[0].level + " completato, ora pu√≤ ospitare un massimo di " + rows[0].max_players + " membri", team);
											});
										});
									});
								}
							};
						});
					}else{
						bot.sendMessage(message.chat.id, "Questa operazione √® consentita solo all'amministratore.", back);
						return;
					}
				});
			});
		});
	});
});

bot.onText(/Entra in(?! uno esistente)/i, function(message) {
	var name = message.text.substring(message.text.indexOf("in")+3, message.text.lenght);

	if (name == "Torna al menu"){
		return;
	}

	var pos = name.indexOf("(");
	if (pos != -1){
		name = name.substr(0, pos-1);
	}

	if ((name.toLowerCase() == "uno esistente") || (name.toLowerCase() == "combattimento")){
		return;
	}

	connection.query('SELECT id, team_time, holiday, account_id, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (rows[0].team_time != null){
			var d = new Date(rows[0].team_time);
			var long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

			bot.sendMessage(message.chat.id, "Non puoi ancora entrare in un team, ne hai appena lasciato uno. Attendi fino alle " + long_date, back);
			return;
		}

		var player_id = rows[0].id;
		var lev = Math.floor(rows[0].exp/10);
		var reborn = rows[0].reborn;

		connection.query('SELECT * FROM `team_player` where player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				bot.sendMessage(message.chat.id, "Sei gi√† in un team.", back);
				return;
			}

			connection.query('SELECT * FROM team WHERE name = "' + name + '"', function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0){
					if (rows[0].players < rows[0].max_players){
						var team_id = rows[0].id;
						var team_name = rows[0].name;
						var min_lev = rows[0].min_lev;
						if (rows[0].closed == 1){
							bot.sendMessage(message.chat.id, "Non puoi entrare in un team che non accetta altri membri.", back);
							return;
						}

						var extra = "";
						if (min_lev > 0){
							extra = "\nPer l'accesso √® richiesto almeno il livello " + getLevel(min_lev);
						}

						bot.sendMessage(message.chat.id, "Sicuro di voler entrare nel team " + team_name + "?" + extra, yesno).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text.toLowerCase() == "si"){
									if (getRealLevel(reborn, lev) < min_lev){
										bot.sendMessage(message.chat.id, "Il tuo livello non √® ancora sufficiente per entrare in questo team, torna al " + getLevel(min_lev), back);
										return;
									}
									connection.query('INSERT INTO `team_player`(`id`, `player_id`, `team_id`) VALUES (DEFAULT,' + player_id + ',' + team_id + ')', function(err, rows, fields) {
										if (err) throw err;
										connection.query('SELECT player_id FROM team_player WHERE team_id = ' + team_id + ' AND role = 1', function(err, rows, fields) {
											if (err) throw err;
											connection.query('SELECT chat_id FROM player WHERE id = ' + rows[0].player_id, function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(rows[0].chat_id, message.from.username + " √® entrato nel tuo team!");
											});
										});
										bot.sendMessage(message.chat.id, "Sei entrato nel team " + name + "!", team);
										return;
									});
									connection.query('UPDATE team SET players = players+1 WHERE id = ' + team_id, function(err, rows, fields) {
										if (err) throw err;
									});
								};
							};
						});
					}else{
						bot.sendMessage(message.chat.id, "Il team specificato √® pieno, chiedi al fondatore di potenziarlo per aumentare gli slot.", back);
						return;
					}
				}else{
					bot.sendMessage(message.chat.id, "Il team che hai richiesto non esiste.", back);
					return;
				}
			});
		});
	});
});

function spawnTeamBoss(team_id){
	connection.query('SELECT * FROM boss', function(err, rows, fields) {
		if (err) throw err;
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			if (rows[i].id == 1){
				connection.query('INSERT INTO `boss_team`(`id`, `boss_id`, `life`, `total_life`, `unlocked`, `team_id`) VALUES (DEFAULT,' + rows[i].id + ',' + rows[i].total_life + ',' + rows[i].total_life + ',1,' + team_id + ')', function(err, rows, fields) {
					if (err) throw err;
				});
			}else{
				connection.query('INSERT INTO `boss_team`(`id`, `boss_id`, `life`, `total_life`, `unlocked`, `team_id`) VALUES (DEFAULT,' + rows[i].id + ',' + rows[i].total_life + ',' + rows[i].total_life + ',0,' + team_id + ')', function(err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
}

bot.onText(/^Robot/i, function(message) {
	if ((eventRobot == 0) && (message.from.username != "fenix45")){
		return;
	}

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;

		var kb = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Continua"],["Torna al menu"]]
			}
		};

		connection.query('SELECT player_id, phase FROM event_robot_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO event_robot_status (player_id, phase) VALUES (' + player_id + ',1)', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "intro", kb);
				});
			}else{
				connection.query('SELECT * FROM event_robot_list WHERE id = ' + rows[0].phase, function(err, rows, fields) {
					if (err) throw err;

					var next = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [[rows[0].r1],[rows[0].r2],[rows[0].r3],["Torna al menu"]]
						}
					};

					var text = rows[0].text;

					bot.sendMessage(message.chat.id, text.replace(new RegExp("%player%", "g"), message.from.username), next).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text != "Torna al menu"){
								var sel = 0;
								if (answer.text == rows[0].r1){
									sel = rows[0].p1;
								}else if (answer.text == rows[0].r2){
									sel = rows[0].p2;
								}else if (answer.text == rows[0].r3){
									sel = rows[0].p3;
								}else{
									return;
								}
								connection.query('UPDATE event_robot_status SET phase = ' + sel + ' WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
								});
							};
						};
					});
				});
			}
		});
	});
});

bot.onText(/^Villa|Villa di Last|Torna alla Villa|Entra nella Villa/i, function(message) {

	var today = new Date();
	if ((today.getDay() > 2) && (today.getDay() < 6)){
		villa = 0;
	}

	if (villa == 0){
		connection.query("SELECT nickname, COUNT(item_id) As cnt FROM event_villa_gift, player WHERE event_villa_gift.from_id = player.id GROUP BY from_id ORDER BY COUNT(item_id) DESC LIMIT 50", function(err, rows, fields) {
			if (err) throw err;

			var text = "";
			var c = 1;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				text += c + "¬∞ " + rows[i].nickname + " (" + rows[i].cnt + ")\n";
				c++;
			}

			connection.query("SELECT nickname, COUNT(item_id) As cnt FROM event_villa_gift, player WHERE event_villa_gift.to_id = player.id GROUP BY to_id ORDER BY COUNT(item_id) DESC LIMIT 50", function(err, rows, fields) {
				if (err) throw err;

				text += "\n\nE quella di chi ne ha ricevute di pi√π:\n";
				c = 1;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					text += c + "¬∞ " + rows[i].nickname + " (" + rows[i].cnt + ")\n";
					c++;
				}

				bot.sendMessage(message.chat.id, "L'evento √® terminato! Grazie per aver partecipato, ecco la classifica di chi ha donato pi√π casse:\n" + text, back_html);
			});
		});
		return;
	}

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Invia una Cassa üì¶"],["Torna al menu"]]
		}
	};

	var kb1 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Entra nella Villa üè∞"],["Torna al menu"]]
		}
	};

	var kb2 = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna alla Villa"],["Torna al menu"]]
		}
	};

	var kb3 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna alla Villa"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, account_id, reborn FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		connection.query('SELECT COUNT(*) As cnt, (SELECT COUNT(*) FROM event_villa_gift WHERE from_id = ' + player_id + ') As mycnt FROM event_villa_gift', function(err, rows, fields) {
			if (err) throw err;

			var count = rows[0].cnt;
			var mycount = rows[0].mycnt;

			connection.query('SELECT player_id, points FROM event_villa_status WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					connection.query('UPDATE `player` SET `boost_id`=1,`boost_mission` = 6 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						connection.query('INSERT INTO event_villa_status (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Benvenuto nella *Villa di LastSoldier95* üè∞!\nDurante questa settimana, questo facoltoso cavaliere ti premier√† per il completamento di *pi√π missioni possibili*, pi√π missioni verranno completate, pi√π il padrone di casa sar√† soddisfatto.\nTi suggerisce anche un modo per coinvolgere pi√π avventurieri possibili regalando loro *Casse Misteriose*!\nImmediatamente egli ti assegna una Bevanda Energetica Plus per partire con pi√π carica e ti augura buona fortuna!", kb1);
						});
					});
					return;
				}

				var gift = Math.floor(rows[0].points/5);
				var bonusText = "";

				var text = "Benvenuto nella *Villa di LastSoldier95* üè∞!\nSvolgi missioni da questo momento ed ogni 5 punti otterrai la possibilit√† di inviare una *Cassa Misteriosa* üì¶ ad un altro avventuriero!\n\nHai a disposizione *" + gift + "* Casse da inviare\nFin ora sono state inviate *" + count + "* Casse, *" + mycount + "* da parte tua\n\nNota: Se non invierai tutte le casse entro la fine dell'evento, il padrone di casa se le riprender√† scontento del tuo operato" + bonusText;
				bot.sendMessage(message.chat.id, text, kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text.indexOf("Cassa") != -1){

							if (gift <= 0){
								bot.sendMessage(message.chat.id, "Non hai Casse a disposizione! Svolgi missioni per ottenere punti!", kb2);
								return;
							}

							bot.sendMessage(message.chat.id, "A chi vuoi inviare la Cassa? Puoi inviarne solamente 5 per persona! Scrivi il suo nome utente").then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									var nick = answer.text.replace("@","");
									connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + nick + '"', function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Il nome utente inserito non esiste!", kb2);
											return;
										}
										var player_id2 = rows[0].id;
										var chat_id = rows[0].chat_id;

										if (player_id2 == player_id){
											bot.sendMessage(message.chat.id, "Quanto √® orribile inviare un dono a se stessi?! Daiii!", kb2);
											return;
										}

										if (player_id2 == 1){
											bot.sendMessage(message.chat.id, "Grazie per il pensiero ma il sommo ha gi√† tutto ci√≤ che gli serve ‚ù§Ô∏è ", kb2);
											return;
										}

										connection.query('SELECT * FROM event_villa_gift WHERE from_id = ' + player_id + ' AND to_id = ' + player_id2, function (err, rows, fields){
											if (err) throw err;

											if (Object.keys(rows).length > 4){
												bot.sendMessage(message.chat.id, "Non puoi inviare pi√π di 5 regali alla stessa persona!", kb2);
												return;
											}

											connection.query('UPDATE event_villa_status SET points = points-5 WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												connection.query('SELECT id, name FROM item WHERE rarity NOT IN ("C","U","UE","A","X","NC","S","D","H","IN") AND craftable = 0 ORDER BY RAND()', function (err, rows, fields){
													if (err) throw err;

													var item_id = rows[0].id;
													var item_name = rows[0].name;

													var uArray = [200, 201, 532, 598];
													var nArray = ["Necronucleo","Respiro di Morte","Urlo di Morte","Soffio di Morte"];
													var rand = Math.random()*500;
													if ((rand < 1) && (reborn < 5)){
														var i = Math.floor(Math.random() * uArray.length);
														item_id = uArray[i];
														item_name = nArray[i];
														console.log("CASSA U");
													}
													console.log("CASSA: " + rand);

													connection.query('INSERT INTO event_villa_gift (from_id, to_id, item_id) VALUES (' + player_id + ',' + player_id2 + ',' + item_id + ')', function (err, rows, fields){
														if (err) throw err;
														connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id2 + ',' + item_id + ')', function (err, rows, fields){
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Hai inviato una Cassa Misteriosa a <b>" + nick + "</b>!", kb2);
															bot.sendMessage(chat_id, "Hai ricevuto una Cassa Misteriosa contenente <b>" + item_name + "</b> da <b>" + message.from.username + "</b>!", html);
														});
													});
												});
											});
										});
									});
								};
							});
						}
					};
				});
			});
		});
	});
});

bot.onText(/Casa Stregata/i, function(message) {
	var kbEnd = {
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Calderone"],["Torna al menu"]]
		}
	};

	if (halloween == 0){
		connection.query('SELECT nickname, trick_count FROM `event_halloween_status`, player WHERE player.id = player_id ORDER BY trick_count DESC', function(err, rows, fields) {
			if (err) throw err;

			var text = "Classifica dolcetto/scherzetto su " + Object.keys(rows).length + " partecipanti:\n";
			var mypos = "\nLa mia posizione:\n";
			var c = 1;
			if (Object.keys(rows).length > 0){
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c <= 30){
						text += c + "¬∞ " + rows[i].nickname + " (" + rows[i].trick_count + ")\n";
					}
					if (rows[i].nickname == message.from.username){
						mypos += c + "¬∞ " + rows[i].nickname + " (" + rows[i].trick_count + ")";
					}
					c++;
				}
			}
			mypos += "\n\nA breve verranno rimossi tutti gli oggetti BASE dell'evento, quindi dolci usciti dal calderone e Zucche Complete rimarranno. Grazie per aver partecipato!";
			bot.sendMessage(message.chat.id, text + mypos, kbEnd);
		});
		return;
	}

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Esplorazione della Zucca"],["Dolcetto o Scherzetto"],["Calderone"],["Il Fantasma di Lootville üíé "],["Torna al menu"]]
		}
	};

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna alla Casa Stregata"],["Torna al menu"]]
		}
	};

	var kb2 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["A caso"],["Torna alla Casa Stregata"]]
		}
	};

	var kb3 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Chiedi di forgiare una Gemma"],["Torna alla Casa Stregata"]]
		}
	};


	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var token = rows[0].token;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		connection.query('SELECT * FROM event_halloween_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO `event_halloween_status`(`id`, `player_id`) VALUES (DEFAULT,' + player_id + ')', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Benvenuto nell'evento di Halloween, trova caramelle, pezzetti di zucca, parla con fantasmi e forma utili consumabili. Di notte le esplorazioni si fanno pi√π interessanti! Comincia subito!", kbBack);
				});
				return;
			}

			var mission_type = rows[0].mission_type;
			var trick = rows[0].trick_count;
			var trick_time = rows[0].trick_time;

			var plur = "e";
			if (trick == 1){
				plur = "a";
			}

			bot.sendMessage(message.chat.id, "Benvenuto nella Casa Stregata üëª , l'evento di Halloween! üéÉ \nEcco cosa puoi fare qui:\n> Intraprendere esplorazioni e trovare oggetti come Caramelle o Pezzetti di Zucca\n> Bussare a casa di un giocatore e chiedere Dolcetto o Scherzetto\n> Buttare dolci nel calderone e formare qualcosa di interessante!\n> Chiedere al Fantasma di forgiare per te una Gemma\nFin ora hai bussato a *" + trick + "* port" + plur + "!", kb).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text == "Esplorazione della Zucca"){
						if (mission_type != 0){
							bot.sendMessage(message.chat.id, "Stai gi√† esplorando una zona!", kbBack);
							return;
						}

						var titles = [	"Lo Spaventapasseri",
									  "La Zucca Maligna",
									  "Fantasmi nei Vicoli",
									  "Gara tra Streghe",
									  "Un Poker Misterioso",
									  "Zucca Esplosiva"
									 ];

						var text = [	"Ho sentito alcune voci su uno spaventapasseri che sta terrorizzando il villaggio, potresti andare a controllare? Magari scopri qualcosa di interessante.",
									"Una Zucca completamente brillante sta rotolando gi√π dalla collina infastidendo tutta la popolazione! Devi fermarla!",
									"Qualcuno ha segnalato la possibilit√† di fantasmi che preparano gustosi pranzi a base di zucca nei vicoli del villaggio, stanno rovinando l'economia della citt√†! Fai qualcosa!",
									"Hai sentito di una possibile gara tra streghe che si terrebbe oggi nei cieli del villaggio, ma entrambe poco esperte si stampano contro un albero e devi andarle a recuperare",
									"Due ragazzi vestiti da fantasmi stanno giocando a poker, quando arriva uno scheletro che sembra quasi vero, cos√¨ vero che lo √® sul serio! Fai qualcosa!",
									"Senti un rumore nel cielo, e ti accorgi solo dopo qualche secondo che si tratta di una zucca gigante! Speri di riuscire a raccoglierne un pezzetto, potebbe essere utile."
								   ];

						var time = [65,85,60,55,55,70];
						var rand = Math.round(Math.random()*(Object.keys(titles).length-1));

						var d = new Date();
						d.setMinutes(d.getMinutes() + time[rand]);
						var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

						bot.sendMessage(message.chat.id, "*" + titles[rand] + "*\n" + text[rand] + "\nQuesta ricerca durer√† _" + time[rand] + "_ minuti", kbBack);

						connection.query('UPDATE event_halloween_status SET mission_type = 1, time_end = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
					}else if (answer.text == "Dolcetto o Scherzetto"){
						var now = new Date();
						var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

						if (trick_time > long_date){
							bot.sendMessage(message.chat.id, "Devi riposarti per 60 minuti prima di cercare un'altra casa dove bussare!", kbBack);
							return;
						}

						bot.sendMessage(message.chat.id, "Puoi andare a bussare alla casa di un giocatore a tua scelta e chiedergli un dolcetto, oppure donarne uno! Scrivi il nome del giocatore che vuoi andare a trovare.", kb2).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								var sql = ' AND nickname = "' + answer.text.replace("@","").trim() + '"';

								if (answer.text == "Torna alla Casa Stregata"){
									return;
								}else if (answer.text == "A caso"){
									sql = ' AND player_id != ' + player_id + ' ORDER BY RAND()';
								}

								connection.query('SELECT player_id, nickname, item_id, name, rarity FROM inventory_rarity WHERE craftable = 0 AND rarity = "H" AND player_id = ' + player_id, function (err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Non puoi uscire di casa senza dolcetti!", kbBack);
										return;
									}
									var myItem = rows[0].item_id;
									var myItemName = rows[0].name;

									connection.query('SELECT player_id, chat_id, nickname, item_id, name, rarity FROM inventory_rarity WHERE craftable = 0 AND rarity = "H"' + sql, function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Questo giocatore non possiede nessun dolcetto, oppure non c'√® nessun giocatore disponibile!", kbBack);
											return;
										}
										var rand = Math.round(Math.random()*100);
										if (rand < 50){
											connection.query('UPDATE inventory SET player_id = ' + player_id + ' WHERE player_id = ' + rows[0].player_id + ' AND item_id = ' + rows[0].item_id + ' LIMIT 1', function (err, rows, fields) {
												if (err) throw err;
											});
											console.log("Dolcetto per " + message.from.username + " (" + player_id + ") - " + rows[0].name);
											bot.sendMessage(message.chat.id, "Bussi alla porta... " + rows[0].nickname.replace(new RegExp("_", "g"), " ") + " ti apre e chiedi 'Dolcetto o Scherzetto?'\nCon un sorriso ti consegna *" + rows[0].name + "* che riponi nel tuo zainetto!", kbBack);
											if (answer.text == "A caso"){
												bot.sendMessage(rows[0].chat_id, "Qualcuno ha bussato alla tua porta per Halloween, hai deciso di consegnare *" + rows[0].name + "*!", mark);
											}else{
												bot.sendMessage(rows[0].chat_id, message.from.username.replace(new RegExp("_", "g"), " ") + " ha bussato alla tua porta per Halloween, hai deciso di consegnare *" + rows[0].name + "*!", mark);												
											}
										}else{
											connection.query('UPDATE inventory SET player_id = ' + rows[0].player_id + ' WHERE player_id = ' + player_id + ' AND item_id = ' + myItem + ' LIMIT 1', function (err, rows, fields) {
												if (err) throw err;
											});
											console.log("Scherzetto per " + message.from.username + " (" + player_id + ") - " + myItemName);
											bot.sendMessage(message.chat.id, "Bussi alla porta... " + rows[0].nickname + " ti apre e chiedi 'Dolcetto o Scherzetto?'\nCon un sorriso maligno esce dalla porta con una zucca in testa, ti spaventi e sei costretto a lasciargli *" + myItemName + "*!", kbBack);
											if (answer.text == "A caso"){
												bot.sendMessage(rows[0].chat_id, "Qualcuno ha bussato alla tua porta per Halloween, ma l'hai mandato via e ottenuto *" + rows[0].name + "*!", mark);
											}else{
												bot.sendMessage(rows[0].chat_id, message.from.username.replace(new RegExp("_", "g"), " ") + " ha bussato alla tua porta per Halloween, ma l'hai mandato via e ottenuto *" + rows[0].name + "*!", mark);
											}
										}
										var d = new Date();
										d.setMinutes(d.getMinutes() + 60);
										var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

										connection.query('UPDATE event_halloween_status SET trick_count = trick_count + 1, trick_time = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
										});
									});
								});
							};
						});
					}
					/*
					}else if (answer.text.indexOf("Fantasma") != -1){
						bot.sendMessage(message.chat.id, "Il Fantasma di Lootville √® in grado, con i suoi poteri, di forgiare gemme üíé in cambio di gettoni. Vuoi chiedere il suo intervento?", kb3).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Chiedi di forgiare una Gemma"){
									bot.sendMessage(message.chat.id, "Forgiare una gemma richiede un gettone ma non per forza la conversione pu√≤ riuscire, sicuro di continuare?", yesno).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text.toLowerCase() == "si"){
												if (token < 1){
													bot.sendMessage(message.chat.id, "Non hai abbastanza gettoni!", kbBack);
													return;
												}else{
													connection.query('UPDATE player SET token = token-1 WHERE id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														var rand = Math.random()*100;
														if (rand < 10){
															connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Il fantasma ha provato a forgiare la gemma ed √® riuscito! Hai ottenuto quindi una Gemma üíé !", kbBack);
															});
														}else{
															bot.sendMessage(message.chat.id, "Il fantasma ha provato a forgiare la gemma ma purtroppo non √® riuscito! E il tuo gettone non esiste pi√π...", kbBack);
														}
													});
												}
											}
										}
									});
								}
							}
						});
					}
					*/
				};
			});
		});
	});
});

bot.onText(/Calderone/i, function(message) {

	if (halloween == 0){
		return;
	}

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna al Calderone"],["Torna alla Casa Stregata"],["Torna al menu"]]
		}
	};

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var iKeys = [];

		connection.query('SELECT * FROM event_halloween_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				return;
			}

			var status = rows[0].cauldron;
			var color = "bianco";

			if (status < 2500){
				color = "bianco";
			}else if (status < 5000){
				color = "verde";
			}else if (status < 10000){
				color = "rosso";
			}else if (status < 15000){
				color = "blu";
			}else if (status => 15000){
				color = "argento";
			}

			connection.query('SELECT item.name, count(item.name) As num FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND item.rarity = "H" GROUP BY item.name', function(err, rows, fields) {
				if (err) throw err;

				iKeys.push(["Forma Zucca Completa üéÉ"]);

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					iKeys.push([rows[i].name + " (" + rows[i].num + ")"]);
				}

				iKeys.push(["Procedi con la Miscela"]);
				iKeys.push(["Torna alla Casa Stregata"]);

				var kb3 = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": iKeys
					}
				};

				bot.sendMessage(message.chat.id, "Butta nel calderone tutti i dolci che hai trovato per tirare fuori qualcosa di MAGICO!\nUsa l'apposita opzione per unire invece tutti i pezzi di zucca üéÉ \nIl contenuto del Calderone sembra tendente al colore " + color, kb3).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {

						if (answer.text == "Torna alla Casa Stregata"){
							return;
						}else if (answer.text.indexOf("Forma") != -1){
							connection.query('SELECT COUNT(distinct item_id) As num FROM inventory WHERE item_id IN (578,579,580,581,582,583,584,585,586) AND player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Non possiedi nessun oggetto per la zucca completa!", kbBack);
									return;
								}

								if (rows[0].num == 9){
									for (i = 578; i < 587; i++){
										connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + i + ' LIMIT 1', function(err, rows, fields) {
											if (err) throw err;
										});
									}
									connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ', 593)', function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Sei riuscito ad unire tutti i pezzi della zucca e formare *Zucca Completa*!", kbBack);
									});
								}else{
									bot.sendMessage(message.chat.id, "Non possiedi tutti i pezzi della zucca!", kbBack);
								}
							});
						}else if (answer.text.indexOf("Procedi") != -1){
							if (status < 2501){
								bot.sendMessage(message.chat.id, "Non ci sono abbastanza ingredienti nel calderone!", kbBack);
								return;
							}

							connection.query('SELECT name, id FROM item WHERE id IN (594,595,596,597) ORDER BY id', function(err, rows, fields){
								if (err) throw err;

								var itemId = 0;
								var itemName = "";
								if ((status < 5000) && (status > 2500)){
									itemId = rows[0].id;
									itemName = rows[0].name;
								}else if (status < 10000){
									itemId = rows[1].id;
									itemName = rows[1].name;
								}else if (status < 15000){
									itemId = rows[2].id;
									itemName = rows[2].name;
								}else if (status >= 15000){
									itemId = rows[3].id;
									itemName = rows[3].name;
								}

								connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ', ' + itemId + ')', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Mescolando per lungo tempo sei riuscito a produrre *" + itemName + "*!", kbBack);
								});

								connection.query('UPDATE event_halloween_status SET cauldron = 0 WHERE player_id = ' + player_id, function(err, rows, fields){
									if (err) throw err;
								});
							});
						}else{
							var ogg = "";
							var pos = answer.text.indexOf("(");
							if (pos != -1){
								ogg = answer.text.substring(0,pos);
							}

							if (status > 31000){
								bot.sendMessage(message.chat.id, "Il calderone √® troppo pieno, c'√® il rischio che strabordi. Non puoi aggiungere nulla senza prima crearne qualcosa!", kbBack);
								return;
							}

							connection.query('SELECT item.value, item.id FROM item, inventory WHERE item.id = inventory.item_id AND inventory.player_id = ' + player_id + ' AND item.name = "' + ogg + '"', function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Non possiedi l'oggetto selezionato", kbBack);
									return;
								}
								var item_id = rows[0].id;
								connection.query('UPDATE event_halloween_status SET cauldron = cauldron + ' + rows[0].value + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id + ' LIMIT 1', function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai buttato l'oggetto nel calderone!", kbBack);
									});
								});
							});
						};

					};
				});
			});
		});
	});
});

bot.onText(/eventi/i, function(message) {

	var text = 	"*Lista Eventi:\n\n*" +
		"> *Storia Interattiva* - 1 Settimana\n" +
		"> *Arena dei Draghi* - Weekend\n" +
		"> *Lootteria* - Weekend\n" +
		"> *Weekend della Follia* - Weekend\n" +
		"> *Evento della Luna* - Weekend\n" +
		"> *Miniere di Mana* - Gioved√¨/Venerd√¨ \n" +
		"> *Il Ricercato* - Weekend\n" +
		"> *Crafting Festival* - Weekend\n" +
		"> *Itinerario Propizio* - Weekend\n" +
		"> *Generatore di Polvere* - Luned√¨/Marted√¨\n" +
		"> *Villa di LastSoldier95* - 4 Giorni\n" +
		"> *Il Canto del Bardo* - Weekend\n" +
		"\nGli eventi vengono modificati di volta in volta per essere migliorati, e non avvengono per forza in questo ordine!\n" +
		"Per partecipare compariranno gli appositi pulsanti nel men√π.";

	bot.sendMessage(message.chat.id, text, back);
});

bot.onText(/festival/i, function(message) {

	if (eventFestival == 0){
		bot.sendMessage(message.chat.id, "Evento non disponibile!", back);
		return;
	}

	var today = new Date();
	if ((today.getDay() != 6) && (today.getDay() != 0)){
		bot.sendMessage(message.chat.id, "L'evento non √® pi√π disponibile!", back);
		return;
	}

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT * FROM event_crafting_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var eventKb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Entra nel festival"],["Torna al menu"]]
				}
			};

			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO event_crafting_status (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "*Benvenuto nel Crafting Festival!*\nIn questo evento ogni 2 ore viene selezionato un oggetto da creare, e chi lo crea ricever√† un premio! Inoltre pi√π volte l'oggetto viene creato, pi√π salir√† il suo valore. Preparati a consumare fino all'ultimo pezzettino di legno del tuo zaino, buon crafting!", eventKb);
					return;
				});
			}else{
				connection.query('SELECT event_crafting_item.cnt, event_crafting_item.price, event_crafting_item.time, item.name, item.rarity FROM event_crafting_item, item WHERE item.id = event_crafting_item.item_id ORDER BY event_crafting_item.id DESC LIMIT 1', function(err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Non √® disponibile ancora nessun oggetto da creare", rKb);
					}else{
						var d = new Date(rows[0].time);
						var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

						var plur = "e";
						if (rows[0].cnt == 1){
							plur = "a";
						}

						var rKb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Aggiorna festival"],["Cerca " + rows[0].name],["Crea " + rows[0].name],["Torna al menu"]]
							}
						};

						bot.sendMessage(message.chat.id, "L'oggetto da creare √®:\n\n*" + rows[0].name + " (" + rows[0].rarity + ")* per *" + rows[0].price + " ¬ß*\n\nCreato " + rows[0].cnt + " volt" + plur + ", verr√† aggiornato alle *" + short_date + "*!\n\nPer evitare troppo carico √® stato inserito un Antiflood per la creazione, non siate troppo frettolosi.", rKb);
					}
				});
			}
		});
	});
});

bot.onText(/Miniere di Mana|Raccolta/i, function(message) {
	if (eventMana == 0){
		bot.sendMessage(message.chat.id, "L'evento non √® disponibile oggi!", back);
		return;
	}

	var back2 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Sintesi"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		if (rows[0].cave_id != 0){
			bot.sendMessage(message.chat.id, "Non puoi raccogliere mana mentre sei in cava", back2);
			return;
		}
		if (rows[0].travel_id != 0){
			bot.sendMessage(message.chat.id, "Non puoi raccogliere mana mentre sei in viaggio", back2);
			return;
		}

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		var mBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna alla Raccolta"],["Torna al menu"]]
			}
		};

		var mYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Torna alla Raccolta"],["Torna al menu"]]
			}
		};
		var mYesNo2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Sintesi"],["Torna al menu"]]
			}
		};

		connection.query('SELECT * FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var eventKb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Inizia Raccolta"],["Torna al menu"]]
				}
			};

			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO event_mana_status (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Ti sei iscritto alla comunit√† di estrattori di mana!\nQuesto evento √® l'unica possibilit√† di recuperare mana allo scopo di sintetizzare incantesimi, inizia a estrarre mana da una miniera e poi raccogli quando sei soddisfatto.", eventKb);
					return;
				});
			}else{
				if (rows[0].zone_id != 0){
					var time_start = new Date(rows[0].time_start);
					var time_creation = time_start.setHours(time_start.getHours());
					var now = new Date();
					var diff = Math.round(((now - time_creation)/1000)/60);	
					diff = Math.abs(diff);

					connection.query('SELECT * FROM event_mana_zone WHERE id = ' + rows[0].zone_id, function(err, rows, fields) {
						if (err) throw err;

						var rate = rows[0].rate;
						var name = rows[0].mana_name;
						var type = rows[0].type;
						var quantity = Math.floor(diff/60*rate);

						if ((class_id == 2) && (reborn > 1)){
							quantity += quantity*0.3;
						}
						if ((class_id == 3) && (type == 2) && (reborn > 1)){
							quantity += quantity*0.5;
						}
						if ((class_id == 3) && (type != 2) && (reborn > 1)){
							quantity -= quantity*0.2;
						}
						if ((class_id == 4) && (type == 3) && (reborn > 1)){
							quantity += quantity*0.5;
						}
						if ((class_id == 4) && (type != 3) && (reborn > 1)){
							quantity -= quantity*0.2;
						}
						if ((class_id == 5) && (type == 1) && (reborn > 1)){
							quantity += quantity*1;
						}
						if ((class_id == 5) && (type != 1) && (reborn > 1)){
							quantity -= quantity*0.1;
						}
						if ((class_id == 6) && (reborn > 1)){
							quantity -= quantity*0.1;
						}

						connection.query('SELECT mana.name, chat_id, nickname, player_id, rate, type, ROUND(TIMESTAMPDIFF(MINUTE,time_start,NOW())/60*rate,0) As quantity FROM event_mana_status, event_mana_zone, player, mana WHERE mana.id = event_mana_zone.type AND player.id = player_id AND event_mana_status.time_start IS NOT NULL AND event_mana_status.zone_id = event_mana_zone.id AND player.id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							//console.log(quantity + " - " + rows[0].quantity);

							//quantity = rows[0].quantity;
							quantity = Math.floor(quantity);

							bot.sendMessage(message.chat.id, 	"Attualmente stai estraendo da una miniera, vuoi interrompere e ottenere " + quantity + " Mana " + name + "?", mYesNo2).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text.toLowerCase() == "si"){
										connection.query('SELECT * FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;

											if (rows[0].zone_id == 0){
												bot.sendMessage(message.chat.id, "Attualmente non stai estraendo", mBack);
												return;
											}

											var mana_type = 'mana_' + type;
											connection.query('UPDATE event_mana_status SET ' + mana_type + ' = ' + mana_type + ' + ' + quantity + ', zone_id = 0, time_start = NULL WHERE player_id = ' + player_id, function (err, rows, fields){
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Hai ricevuto " + quantity + " Mana " + name + "!", mBack);
											});
										});
									}
								};
							});
						});
					});

					return;
				}

				var text = 	"Blu: " + rows[0].mana_1 + "\n" +
					"Giallo: " + rows[0].mana_2 + "\n" +
					"Rosso: " + rows[0].mana_3;

				connection.query('SELECT * FROM event_mana_zone', function(err, rows, fields) {
					if (err) throw err;

					var iKeys = [];
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						iKeys.push([rows[i].name + " (" + rows[i].mana_name + " " + rows[i].rate + "/ora)"]);
					}

					iKeys.push(["Sintesi"]);
					iKeys.push(["Torna al menu"]);

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": iKeys
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona la miniera dalla quale iniziare a estrarre mana.\nAl momento possiedi:\n" + text + "\nAvrai possibilit√† di estrarre ogni gioved√¨ e venerd√¨ della settimana", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if ((answer.text == "Torna al menu") || (answer.text == "Sintesi")){
								return;
							}

							var zone = answer.text.substring(0, answer.text.indexOf("(")-1);

							connection.query('SELECT * FROM event_mana_zone WHERE name = "' + zone + '"', function(err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Miniera non valida", mBack);
									return;
								}

								var zone_id = rows[0].id;

								bot.sendMessage(message.chat.id, "Iniziare l'estrazione nella " + zone + "?", mYesNo).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text.toLowerCase() == "si"){

											var d = new Date();
											if ((d.getDay() != 4) && (d.getDay() != 5)){
												bot.sendMessage(message.chat.id, "Non puoi estrarre oggi", back);
												return;
											}

											var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

											connection.query('UPDATE event_mana_status SET time_start = "' + long_date + '", zone_id = ' + zone_id + ' WHERE player_id = ' + player_id, function (err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Estrazione iniziata, torna qui tra qualche ora per concluderla e ricevere ci√≤ che hai estratto", mBack);
											});
										}
									};
								});
							});
						};
					});
				});
			}
		});
	});
});

bot.onText(/generatore di polvere|torna al generatore/i, function(message) {

	/*
	if (message.from.username != "fenix45"){
		bot.sendMessage(message.chat.id, "Il Generatore √® quasi pronto üî•", back);
		return;
	}
	*/

	if (eventDust == 0){
		bot.sendMessage(message.chat.id, "L'evento non √® disponibile oggi!", back);
		return;
	}

	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		if (rows[0].cave_id != 0){
			bot.sendMessage(message.chat.id, "Non puoi raccogliere polvere mentre sei in cava", back);
			return;
		}
		if (rows[0].travel_id != 0){
			bot.sendMessage(message.chat.id, "Non puoi raccogliere polvere mentre sei in viaggio", back);
			return;
		}

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		var gBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna al Generatore di Polvere"],["Torna al menu"]]
			}
		};

		var gYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Torna al Generatore di Polvere"]]
			}
		};

		var eventKb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Vai al Generatore di Polvere"],["Torna al menu"]]
			}
		};

		var eventKb2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Aziona Generatore"],["Aumenta Deposito","Utilizza Polvere"],["Genera Scaglia Evolutiva"],["Torna al menu"]]
			}
		};

		var eventKb3 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Ritira","Spegni"],["Torna al menu"]]
			}
		};

		connection.query('SELECT * FROM event_dust_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO event_dust_status (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Hai ricevuto il tuo Generatore di Polvere!\nPotrai utilizzare la polvere prodotta per generare un oggetto a tua scelta, √® disponibile ogni luned√¨ e marted√¨!", eventKb);
					return;
				});
			}else{
				var max_qnt = parseInt(rows[0].max_qnt);
				var qnt = parseInt(rows[0].qnt);

				if (rows[0].extracting == 1){
					var generated = rows[0].generated;
					var updateTime = rows[0].last_update;
					bot.sendMessage(message.chat.id, "Hai generato fin ora " + generated + "/" + max_qnt + " unit√† di polvere, vuoi spegnere il generatore o ritirarla?\n\nUltima attivit√†: " + toDate("it",updateTime), eventKb3).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text == "Torna al menu"){
								return;
							}
							if (answer.text == "Ritira"){
								connection.query('SELECT generated FROM event_dust_status WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;

									if (rows[0].generated == 0){
										bot.sendMessage(message.chat.id, "Non c'√® ancora abbastanza Polvere per poterla ritirare!", gBack);
										return;
									}

									for (var i = 0, len = rows[0].generated; i < len; i++) {
										connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',646)', function(err, rows, fields) {
											if (err) throw err;
										});
									}
									var d = new Date();
									var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
									connection.query('UPDATE event_dust_status SET generated = 0, notified = 0, last_update = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
									});
									bot.sendMessage(message.chat.id, "Hai ottenuto " + rows[0].generated + "x Polvere!", gBack);
								});
							}else if (answer.text == "Spegni"){
								connection.query('UPDATE event_dust_status SET extracting = 0, last_update = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai spento il generatore", gBack);
								});
							}
						};
					});
				}else{

					connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 14', function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length > 0){
							qnt += parseInt(rows[0].ability_level);
						}

						connection.query('SELECT COUNT(id) As qnt FROM inventory WHERE item_id = 646 AND player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							var unit = rows[0].qnt;

							bot.sendMessage(message.chat.id, "*Gestione Generatore*\n\nProdurrai " + qnt + "x Polvere/ora e il deposito ti consente massimo " + max_qnt + " unit√†\n" +
											"Al momento possiedi " + unit + " unit√† nello zaino", eventKb2).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text == "Torna al menu"){
										return;
									}
									if (answer.text == "Aziona Generatore"){
										var d = new Date();
										var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
										connection.query('UPDATE event_dust_status SET extracting = 1, last_update = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Generatore azionato! Torna tra un po' di tempo per ritirare la polvere prodotta!", back);
										});
									}else if (answer.text == "Aumenta Deposito"){
										if (max_qnt >= 54){
											bot.sendMessage(message.chat.id, "Il deposito del generatore √® gi√† potenziato al massimo", gBack);
											return;
										}

										bot.sendMessage(message.chat.id, "Aggiungere 2 unit√† al tuo deposito ti coster√† 50.000 ¬ß, procedi?", gYesNo).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {
												if (answer.text.toLowerCase() == "si"){
													connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
														if (rows[0].money < 50000){
															bot.sendMessage(message.chat.id, "Non hai abbastanza monete", gBack);
															return;
														}
														connection.query('UPDATE player SET money = money-50000 WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE event_dust_status SET max_qnt = max_qnt + 2 WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai potenziato il deposito e hai raggiunto " + (max_qnt+2) + " unit√† di spazio disponibile!", gBack);
															});
														});
													});
												}
											}
										});
									}
								};
							});
						});
					});
				}
			}
		});
	});
});

bot.onText(/^\/sintesi (.+),(.+),(.+)|^\/sintesi/i, function(message, match) {
	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;	

		if ((match[1] == undefined) ||(match[2] == undefined) || (match[3] == undefined)){
			bot.sendMessage(message.chat.id, "Utilizza la sintassi '/sintesi 100,200,300' (blu, giallo, rosso) per continuare", back);
			return;
		}

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 13', function(err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0){
				abBonus = rows[0].ability_level*rows[0].val;
			}
			var maxUnit = 200;
			maxUnit += abBonus;

			connection.query('SELECT * FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Non possiedi alcuna riserva di mana", back)
					return;
				}

				var mana_1 = rows[0].mana_1;
				var mana_2 = rows[0].mana_2;
				var mana_3 = rows[0].mana_3;

				connection.query('SELECT COUNT(*) As cnt FROM magic WHERE player_id = ' + player_id, function (err, rows, fields){
					if (err) throw err;

					if (rows[0].cnt >= 5){
						bot.sendMessage(message.chat.id, "Non puoi sintetizzare altre magie prima di averle consumate", back);
						return;
					}

					var m1 = parseInt(match[1]);	//BLU
					if ( (isNaN(m1)) || (m1 < 0) || (re.test(m1) == false)){
						bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
						return;
					}

					if (m1 > mana_1){
						bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", back);
						return;
					}

					var m2 = parseInt(match[2]);	//GIALLO
					if (isNaN(m2) || (m2 < 0) || (re.test(m2) == false)){
						bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
						return;
					}

					if (m2 > mana_2){
						bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", back);
						return;
					}


					var m3 = parseInt(match[3]);	//ROSSO
					if (isNaN(m3) || (m3 < 0) || (re.test(m3) == false)){
						bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
						return;
					}

					if (m3 > mana_3){
						bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", back);
						return;
					}

					bot.sendMessage(message.chat.id, "Iniziare la sintesi utilizzando le unit√† selezionate?", yesno).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {

							if (answer.text.toLowerCase() == "si"){
								connection.query('SELECT * FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;

									if (m1 > rows[0].mana_1){
										bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Blu", back);
										return;
									}
									if (m2 > rows[0].mana_2){
										bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Giallo", back);
										return;
									}
									if (m3 > rows[0].mana_3){
										bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Rosso", back);
										return;
									}

									m1 = parseInt(m1);
									m2 = parseInt(m2);
									m3 = parseInt(m3);
									var power = m1+m2+m3;

									if (power > maxUnit){
										bot.sendMessage(message.chat.id, "Il valore complessivo di Mana non pu√≤ superare i " + maxUnit + " punti, ora √® pari a " + power);
										return;
									}
									if (power < 50){
										bot.sendMessage(message.chat.id, "Minimo 50 di potenza, ora " + power, back);
										return;
									}


									var type = 0;
									var quantity = 3;
									var magic_name = "";

									if ((m1 == m2) && (m2 == m3) && (m1 == m3)){
										type = 4;
										magic_name = "Ira Astrale";
									}else if ((m1 >= m2) && (m1 >= m3)){
										type = 1;
										magic_name = "Furia dei Mari";
									}else if ((m2 >= m1) && (m2 >= m3)){
										type = 2;
										magic_name = "Tempesta Folgorante";
									}else if ((m3 >= m1) && (m3 >= m2)){
										type = 3;
										magic_name = "Impeto di Fiamme";
									}else{
										bot.sendMessage(message.chat.id, "Configurazione non valida, riprova", back);
										return;
									}

									connection.query('UPDATE event_mana_status SET mana_1 = mana_1 - ' + m1 + ', mana_2 = mana_2 - ' + m2 + ', mana_3 = mana_3 - ' + m3 + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										connection.query('INSERT INTO magic (player_id, type, power, quantity) VALUES (' + player_id + ',' + type + ',' + power + ',' + quantity + ')', function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai sintetizzato *" + magic_name + " " + power + "*!", back);
											setAchievement(message.chat.id, player_id, 28, 1);
										});
									});
								});
							};
						};
					});
				});
			});
		});
	});
});

bot.onText(/^sintesi|Torna alla Sintesi/i, function(message) {
	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;	

		connection.query('SELECT * FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non possiedi alcuna riserva di mana", back)
				return;
			}

			var mana_1 = rows[0].mana_1;
			var mana_2 = rows[0].mana_2;
			var mana_3 = rows[0].mana_3;

			var text = 	"Blu: " + mana_1 + "\n" +
				"Giallo: " + mana_2 + "\n" +
				"Rosso: " + mana_3;

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Inizia Sintesi"],["Sintetizza Materiali Finali"],["Torna al menu"]]
				}
			};

			var kbBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Torna alla Sintesi"],["Torna al menu"]]
				}
			};

			var kbYesNo = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Si"],["Torna alla Sintesi"]]
				}
			};

			var kb2 = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["0","10","20"],["50","100","200"],["Annulla"]]
				}
			};

			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 13', function(err, rows, fields) {
				if (err) throw err;

				var abBonus = 0;
				if (Object.keys(rows).length > 0){
					abBonus = rows[0].ability_level*rows[0].val;
				}
				var maxUnit = 200;
				maxUnit += abBonus;

				bot.sendMessage(message.chat.id, "*Le tue riserve di mana:*\n\n" + text, kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text == "Torna al menu"){
							return;
						}

						if (answer.text == "Sintetizza Materiali Finali"){
							connection.query('SELECT name FROM item WHERE id IN (623, 624, 625, 635, 636, 637)', function (err, rows, fields){
								if (err) throw err;

								var iKeys = [];

								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									iKeys.push([rows[i].name]);
								}

								iKeys.push(["Torna alla Sintesi"]);
								var kb_f = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										//one_time_keyboard: true,
										"keyboard": iKeys
									}
								};
								bot.sendMessage(message.chat.id, "Questa sezione √® riservata alla sintesi dei componenti finali per le armi, seleziona il componente da sintetizzare", kb_f).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text == "Torna alla Sintesi"){
											return;
										}
										connection.query('SELECT name, id, value FROM item WHERE id IN (623, 624, 625, 635, 636, 637) AND name = "' + answer.text + '"', function (err, rows, fields){
											if (err) throw err;
											if (Object.keys(rows).length > 0){
												var qnt = 0;
												var type = 0;
												var itemId = rows[0].id;
												var itemName = rows[0].name;
												var name = "";
												if (rows[0].value == 25000){
													qnt = 2500;
												}else if (rows[0].value == 100000){
													qnt = 5000;
												}
												if ((rows[0].id == 623) || (rows[0].id == 635)){
													type = 2;
													name = "Giallo";
												}else if ((rows[0].id == 624) || (rows[0].id == 636)){
													type = 3;
													name = "Rosso";
												}else if ((rows[0].id == 625) || (rows[0].id == 637)){
													type = 1;
													name = "Blu";
												}else{
													bot.sendMessage(message.chat.id, "Errore", kbBack);
													return;
												}
												bot.sendMessage(message.chat.id, "Sintetizzare questo oggetto richieder√† " + qnt + " Mana " + name + ", continuare?", kbYesNo).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text.toLowerCase() == "si"){
															if (type == 1){
																if (mana_1 < qnt){
																	bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Blu", kbBack);
																	return;
																}
															}else if (type == 2){
																if (mana_2 < qnt){
																	bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Giallo", kbBack);
																	return;
																}
															}else if (type == 3){
																if (mana_3 < qnt){
																	bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Rosso", kbBack);
																	return;
																}
															}

															connection.query('UPDATE event_mana_status SET mana_' + type + ' = mana_' + type + ' - ' + qnt + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + itemId + ')', function (err, rows, fields){
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Hai sintetizzato " + itemName + "!", kbBack);
																});
															});
														}
													}
												});
											}else{
												bot.sendMessage(message.chat.id, "Oggetto non valido", kbBack);
											}
										});
									}
								});
							});
							return;
						}else if (answer.text == "Inizia Sintesi"){
							bot.sendMessage(message.chat.id, 	"Puoi sintetizzare un incantesimo utilizzando qualsiasi quantit√† di mana per tipo, per un massimo di " + maxUnit + " unit√† complessive, pi√π √® alto il valore, pi√π sar√† efficace l'incantesimo\n" +
											"Ogni incantesimo ha una durata pari a 3 utilizzi, indipendentemente dalla sua potenza, puoi possedere solamente 5 incantesimi contemporaneamente\n" +
											"Quanto Mana Blu vuoi utilizzare? Ne possiedi *" + mana_1 + "* unit√†, puoi anche scrivere il numero manualmente", kb2).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text == "Annulla"){
										return;
									}

									connection.query('SELECT COUNT(*) As cnt FROM magic WHERE player_id = ' + player_id, function (err, rows, fields){
										if (err) throw err;

										if (rows[0].cnt >= 5){
											bot.sendMessage(message.chat.id, "Non puoi sintetizzare altre magie prima di averle consumate", kbBack);
											return;
										}

										var m1 = parseInt(answer.text);
										if ( (isNaN(m1)) || (m1 < 0) || (re.test(m1) == false)){
											bot.sendMessage(message.chat.id, "Quantit√† non valida", kbBack);
											return;
										}

										if (m1 > mana_1){
											bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", kbBack);
											return;
										}

										bot.sendMessage(message.chat.id, "Quanto Mana Giallo vuoi utilizzare? Ne possiedi *" + mana_2 + "* unit√†, puoi anche scrivere il numero manualmente", kb2).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {
												if (answer.text == "Annulla"){
													return;
												}
												var m2 = parseInt(answer.text);
												if (isNaN(m2) || (m2 < 0) || (re.test(m2) == false)){
													bot.sendMessage(message.chat.id, "Quantit√† non valida", kbBack);
													return;
												}

												if (m2 > mana_2){
													bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", kbBack);
													return;
												}

												bot.sendMessage(message.chat.id, "Quanto Mana Rosso vuoi utilizzare? Ne possiedi *" + mana_3 + "* unit√†, puoi anche scrivere il numero manualmente", kb2).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text == "Annulla"){
															return;
														}
														var m3 = parseInt(answer.text);
														if (isNaN(m3) || (m3 < 0) || (re.test(m3) == false)){
															bot.sendMessage(message.chat.id, "Quantit√† non valida", kbBack);
															return;
														}

														if (m3 > mana_3){
															bot.sendMessage(message.chat.id, "Non hai abbastanza mana di quel tipo", kbBack);
															return;
														}

														bot.sendMessage(message.chat.id, "Iniziare la sintesi utilizzando le unit√† selezionate?", yesno).then(function() {
															answerCallbacks[message.chat.id] = function(answer) {

																if (answer.text.toLowerCase() == "si"){
																	connection.query('SELECT * FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
																		if (err) throw err;

																		if (m1 > rows[0].mana_1){
																			bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Blu", kbBack);
																			return;
																		}
																		if (m2 > rows[0].mana_2){
																			bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Giallo", kbBack);
																			return;
																		}
																		if (m3 > rows[0].mana_3){
																			bot.sendMessage(message.chat.id, "Non hai abbastanza Mana Rosso", kbBack);
																			return;
																		}

																		m1 = parseInt(m1);
																		m2 = parseInt(m2);
																		m3 = parseInt(m3);
																		var power = m1+m2+m3;

																		if (power > maxUnit){
																			bot.sendMessage(message.chat.id, "Il valore complessivo di Mana non pu√≤ superare i " + maxUnit + " punti, ora √® pari a " + power, kbBack);
																			return;
																		}
																		if (power < 50){
																			bot.sendMessage(message.chat.id, "Minimo 50 di potenza, ora " + power, kbBack);
																			return;
																		}


																		var type = 0;
																		var quantity = 3;
																		var magic_name = "";

																		if ((m1 == m2) && (m2 == m3) && (m1 == m3)){
																			type = 4;
																			magic_name = "Ira Astrale";
																		}else if ((m1 >= m2) && (m1 >= m3)){
																			type = 1;
																			magic_name = "Furia dei Mari";
																		}else if ((m2 >= m1) && (m2 >= m3)){
																			type = 2;
																			magic_name = "Tempesta Folgorante";
																		}else if ((m3 >= m1) && (m3 >= m2)){
																			type = 3;
																			magic_name = "Impeto di Fiamme";
																		}else{
																			bot.sendMessage(message.chat.id, "Configurazione non valida, riprova", mBack);
																			return;
																		}

																		connection.query('UPDATE event_mana_status SET mana_1 = mana_1 - ' + m1 + ', mana_2 = mana_2 - ' + m2 + ', mana_3 = mana_3 - ' + m3 + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																			if (err) throw err;

																			connection.query('INSERT INTO magic (player_id, type, power, quantity) VALUES (' + player_id + ',' + type + ',' + power + ',' + quantity + ')', function(err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Hai sintetizzato *" + magic_name + " " + power + "*!", kbBack);
																				setAchievement(message.chat.id, player_id, 28, 1);
																			});
																		});
																	});
																};
															};
														});
													};
												});
											};
										});
									});
								};
							});
						};
					};
				});
			});
		});
	});
});

bot.onText(/Il Canto del Bardo|Iscrizione dal Bardo|Torna dal Bardo/i, function(message) {
	if (message.from.username != "fenix45"){
		if (eventTeamStory == 0){
			return;
		}
	}

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT * FROM `team_player`where team_id = (SELECT team_id FROM team_player WHERE player_id = ' + player_id + ') ORDER BY id', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Per partecipare a questo evento devi essere in un team", back);
				return;
			}
			var team_id = rows[0].team_id;

			connection.query('SELECT role FROM team_player WHERE team_id = ' + team_id + ' AND player_id = ' + player_id, function (err, rows, fields){
				if (err) throw err;

				var isAdmin = 0;
				var adminId = 0;

				if (rows[0].role == 1){
					isAdmin = 1;
					adminId = player_id;
				}

				if (isAdmin == 0){
					bot.sendMessage(message.chat.id, "Questo evento √® gestito dall'amministratore del tuo team, contattalo per continuare", back);
					return;
				}

				connection.query('SELECT * FROM event_team_story WHERE team_id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					var eventKb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Iscrizione dal Bardo"],["Torna al menu"]]
						}
					};

					var kb = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Torna al menu"]]
						}
					};

					var kb2 = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Invia Scrittura"],["Torna al menu"]]
						}
					};

					var rBack = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Torna dal Bardo"],["Torna al menu"]]
						}
					};

					var rSend = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Torna dal Bardo"]]
						}
					};

					if (Object.keys(rows).length == 0){
						connection.query('INSERT INTO event_team_story (team_id) VALUES (' + team_id + ')', function(err, rows, fields) {
							if (err) throw err;
							bot.sendMessage(message.chat.id, "Benvenuto nella gara che tutti i team attendono, il *Canto del Bardo*!\n" +
											"In questa battaglia di scrittura tu ed il tuo team dovrete utilizzare le vostre migliori doti letterarie per stupire il Bardo, e non sar√† un'impresa semplice. In base alla vostra abilit√† riceverete dei ü¶ã, anche solo partecipando! Le istruzioni saranno disponibili accedendo all'evento.", eventKb);
						});
					}else{

						var win = "";
						if (rows[0].point_1 > 0){
							win = "\n\nPremio primo giorno: " + rows[0].point_1 + " ü¶ã";
						}else{
							if (rows[0].story_1 != null){
								win = "\n\nTesto del primo giorno inviato con successo";
							}else{
								win = "\n\nTesto del primo giorno in attesa...";
							}
						}
						if (rows[0].point_2 > 0){
							win += "\nPremio secondo giorno: " + rows[0].point_2 + " ü¶ã";
						}else{
							if (rows[0].story_2 != null){
								win += "\nTesto del secondo giorno inviato con successo";
							}else{
								win += "\nTesto del secondo giorno in attesa...";
							}
						}

						var text = "";
						var n = new Date().getDay();
						if (n == 6){
							text = "<b>Bentornato!</b>\nIl Bardo ti suggerisce le istruzioni per la scrittura di oggi, puoi scegliere una delle due tracce:\n" +
								"> Traccia 1: Due persone una notte si svegliano di soprassalto ed assistono ad un fenomeno paranormale...\n" +
								"> Traccia 2: Il Re e la Regina di xxxia hanno un erede un po' problematico, cosa succeder√† al regno?\n" +
								"> Massimo 4.000 caratteri\n\n" +
								"Ricorda di inviare la storia prima di mezzanotte, domani cambieranno i temi!";
						}else if (n == 0){
							text = "<b>Bentornato!</b>\nIl Bardo ti suggerisce le istruzioni per la scrittura di oggi, puoi scegliere una delle due tracce:\n" +
								"> Traccia 1: In una stanza completamente chiusa avviene un omicidio, l'unica chiave per entrare ce l'ha addosso la vittima...\n" +
								"> Traccia 2: Elogio al raffreddore. Cosa ci pu√≤ essere di meglio?\n" +
								"> Massimo 4.000 caratteri\n\n" +
								"Ricorda di inviare la storia di prima di mezzanotte! Le valutazioni arriveranno il prima possibile";
						}else{
							bot.sendMessage(message.chat.id, "Oggi non √® disponibile il Bardo, torna quando l'evento √® attivo", back);
							return;
						}

						bot.sendMessage(message.chat.id, text + win, kb2).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Invia Scrittura"){

									bot.sendMessage(message.chat.id, "Incolla qua il testo completo e attendi la fine della giornata! Ricordati di non utilizzare bestemmie, insulti, argomenti spiacevoli, ecc. (le solite cose), pena il ban di tutto il team dal bot. Forza!",  rSend).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text == "Torna dal Bardo"){
												return;
											}

											var text = answer.text;
											/*
											var reg = new RegExp("^[a-zA-Z0-9 \-\;\,\.√†√π√®√¨√©√≤√≥_\¬ß\!\\\n?]{1,4000}$");

											if (!reg.test(text)){
												bot.sendMessage(message.chat.id, "Il testo contiene caratteri non ammessi, riprova", rBack);
												return;
											}
											*/

											var n = new Date().getDay();
											if (n == 6){		//Sabato

												if (rows[0].point_1 > 0){
													bot.sendMessage(message.chat.id, "Il primo giorno dell'evento √® terminato", rBack);
													return;
												}

												connection.query('UPDATE event_team_story SET story_1 = "' + connection.escape(text) + '" WHERE team_id = ' + team_id, function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "La scrittura √® stata inviata, attendi la fine della giornata per ricevere una valutazione", rSend);
												});
											}else if (n == 0){	//Domenica

												if (rows[0].point_2 > 0){
													bot.sendMessage(message.chat.id, "Il secondo giorno dell'evento √® terminato", rBack);
													return;
												}

												connection.query('UPDATE event_team_story SET story_2 = "' + connection.escape(text) + '" WHERE team_id = ' + team_id, function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "La scrittura √® stata inviata, attendi la fine della giornata per ricevere una valutazione", rSend);
												});
											}
										};
									});
								}
							};
						});
					}
				});
			});
		});
	});
});

bot.onText(/dai_punti/i, function(message) {
	if (message.from.username != "fenix45"){
		return;
	}
	bot.sendMessage(message.chat.id, "Sei sicuro?", yesno).then(function() {
		answerCallbacks[message.chat.id] = function(answer) {
			if (answer.text.toLowerCase() == "si"){
				connection.query('SELECT team_id, point_1, point_2 FROM event_team_story WHERE point_1 > 0 OR point_2 > 0', function(err, rows, fields) {
					if (err) throw err;
					var point = 0;
					var n = new Date().getDay();
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						point = 0;
						point = parseInt(rows[i].point_1+rows[i].point_2);
						console.log(rows[i].team_id + " -> " + point);
						connection.query('UPDATE team SET point = point+' + point + ' WHERE id = ' + rows[i].team_id, function(err, rows, fields) {
							if (err) throw err;
						});
					}
					bot.sendMessage(message.chat.id, "Consegnati punti anima a " + Object.keys(rows).length + " team", back);
				});
			};
		};
	});
});

bot.onText(/ricercato|evento/i, function(message) {

	if (wanted == 0){
		return;
	}

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT * FROM event_wanted_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var eventKb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Vai all'Evento"],["Torna al menu"]]
				}
			};

			var kb = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Torna al menu"]]
				}
			};

			var rBack = {
				parse_mode: "HTML",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Torna al Ricercato"],["Torna al menu"]]
				}
			};

			var banned_join = banlist_id.join();

			if (Object.keys(rows).length == 0){
				connection.query('SELECT nickname, from_id, COUNT(from_id) FROM heist_history, player, event_wanted_status WHERE account_id NOT IN (' + banned_join + ') AND fail = 0 AND event_wanted_status.player_id = player.id AND player.id = heist_history.from_id AND player.id != ' + player_id + ' AND time between DATE_SUB(now(),INTERVAL 2 MONTH) AND NOW() GROUP BY from_id ORDER BY COUNT(from_id) DESC LIMIT 200', function(err, rows, fields) {
					if (err) throw err;

					var len = Object.keys(rows).length;
					var rand = Math.round(Math.random()*len);

					var sel = rows[rand].from_id;

					connection.query('INSERT INTO event_wanted_status (player_id, wanted_id) VALUES (' + player_id + ',' + sel + ')', function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Benvenuto nell'*Evento Ricercato*!\nTi √® stato assegnato un fuorilegge che dovrai stanare irrompendo nel suo rifugio, potrai ottenere grosse taglie in caso di successo, forza!\nAlla fine visualizzerai una classifica quindi cerca di vincerne il pi√π possibile!\nLe ispezioni al ricercato sono molto veloci, in pi√π solo in questo weekend i tempi generali di ispezione sono ridotti!", eventKb);
					});
				});
			}else{
				connection.query('SELECT E.wanted_id, E.heist_win, E.heist_lost, E.heist_win_2, E.heist_lost_2, player.nickname, player.id, player.ability, player.house_id FROM event_wanted_status E, player WHERE E.wanted_id = player.id AND E.player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;

					if (Object.keys(rows).length == 0){
						connection.query('SELECT nickname, from_id, COUNT(from_id) FROM heist_history, player, event_wanted_status WHERE account_id NOT IN (' + banned_join + ') AND fail = 0 AND event_wanted_status.player_id = player.id AND player.id = heist_history.from_id AND player.id != ' + player_id + ' AND time between DATE_SUB(now(),INTERVAL 2 MONTH) AND NOW() GROUP BY from_id ORDER BY COUNT(from_id) DESC LIMIT 200', function(err, rows, fields) {
							if (err) throw err;

							var len = Object.keys(rows).length;
							var rand = Math.round(Math.random()*len);

							var sel = rows[rand].from_id;
							connection.query('UPDATE event_wanted_status SET wanted_id = ' + sel + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Il tuo ricercato non √® ancora disponibile, torna tra qualche secondo!", back);
							});
						});
						return;
					}

					var win = rows[0].heist_win;
					var lost = rows[0].heist_lost;
					var win2 = rows[0].heist_win_2;
					var lost2 = rows[0].heist_lost_2;

					var nick = rows[0].nickname;
					var ab = rows[0].ability;
					var house = rows[0].house_id;

					connection.query('SELECT heist_win_2 FROM event_wanted_status WHERE player_id = ' + rows[0].wanted_id, function(err, rows, fields) {
						if (err) throw err;

						var value1 = ((parseInt(win2)*100)+1000);
						var value2 = ((parseInt(rows[0].heist_win_2)*100)+1000)
						if (value1 > 15000){
							value1 = 15000;
						}
						if (value2 > 15000){
							value2 = 15000;
						}

						var text = 	"<b>Il tuo status da ricercato</b>:\nVittorie/Sconfitte: " + win + " / " + lost + "\nSubite/Respinte: " + lost2 + " / " + win2 + "\nLa tua taglia: " +
							value1 + " ¬ß\n\n" +
							"üë∫ Il ricercato √® <b>" + nick + "</b> con abilit√† " + ab + " ed un rifugio al livello " + house + "!\n" +
							"Ispeziona il suo rifugio per catturarlo e ottenere la taglia!\nTaglia attuale: " + value2 + " ¬ß";
						var kb2 = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Ispeziona: " + nick],["I pi√π pericolosi"],["Torna al menu"]]
							}
						};
						bot.sendMessage(message.chat.id, text, kb2).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text.toLowerCase().indexOf("pericolosi") != -1){
									connection.query('SELECT nickname, event_wanted_status.heist_win FROM event_wanted_status, player WHERE event_wanted_status.player_id = player.id ORDER BY event_wanted_status.heist_win DESC LIMIT 5', function(err, rows, fields) {
										if (err) throw err;
										var text = "Utenti che hanno catturato pi√π ricercati:\n";
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											text += "> " + rows[i].nickname + " (" + rows[i].heist_win + ")	\n";
										};
										connection.query('SELECT nickname, event_wanted_status.heist_lost FROM event_wanted_status, player WHERE event_wanted_status.player_id = player.id ORDER BY event_wanted_status.heist_lost DESC LIMIT 5', function(err, rows, fields) {
											if (err) throw err;
											text += "\nUtenti che hanno fallito pi√π volte:\n";
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												text += "> " + rows[i].nickname + " (" + rows[i].heist_lost + ") \n";
											};

											connection.query('SELECT nickname, event_wanted_status.heist_win_2 FROM event_wanted_status, player WHERE event_wanted_status.player_id = player.id ORDER BY event_wanted_status.heist_win_2 DESC LIMIT 5', function(err, rows, fields) {
												if (err) throw err;
												text += "\nUtenti che hanno subito e vinto pi√π tentativi:\n";
												for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
													text += "> " + rows[i].nickname + " (" + rows[i].heist_win_2 + ") \n";
												};					
												connection.query('SELECT nickname, event_wanted_status.heist_lost_2 FROM event_wanted_status, player WHERE event_wanted_status.player_id = player.id ORDER BY event_wanted_status.heist_lost_2 DESC LIMIT 5', function(err, rows, fields) {
													if (err) throw err;
													text += "\nUtenti che hanno subito e perso pi√π tentativi:\n";
													for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
														text += "> " + rows[i].nickname + " (" + rows[i].heist_lost_2 + ") \n";
													};					
													bot.sendMessage(message.chat.id, text, rBack);
												});
											});
										});	
									});
								}
							};
						});
					});
				});
			}
		});
	});
});

bot.onText(/Il Tesoro di Arthur|Evento/i, function(message) {

	return;

	if (eventStory == 0){
		if (message.from.username != "fenix45"){
			bot.sendMessage(message.chat.id, "L'evento sar√† disponibile a breve!", back);
			return;
		}
	}

	connection.query('SELECT id, holiday, account_id, mission_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;

		connection.query('SELECT * FROM mission_event_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var eventKb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Vai all'Evento"],["Torna al menu"]]
				}
			};

			if (Object.keys(rows).length == 0){
				// Prima volta

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Iscriviti al Registro"],["Torna al menu"]]
					}
				};

				bot.sendMessage(message.chat.id, "Benvenuto nella Storia Interattiva!\nQuesto evento √® composto da missioni che sono collegate fra di loro con scelte che dovrai intraprendere, a seconda del percorso comporrai una storia diversa e arriverai ad un finale diverso, con un premio diverso.\n\nTuttavia √® possibile completare il percorso solamente una volta, e l'evento ha una durata limitata. Quando vuoi iniziare clicca sul pulsante Iscriviti al Registro. Buon divertimento!\n\n_Questo evento √® il primo di due parti_", kb);
			}else{
				if (rows[0].mission_end != null){
					var d = new Date(rows[0].mission_end);
					var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
					bot.sendMessage(message.chat.id, "Stai svolgendo una missione dell'evento fino alle " + short_date, back);
					return;
				}

				var choice_id = rows[0].choice_id;
				var mission_time = rows[0].mission_time;
				var mission_id = rows[0].mission_id;
				var flag = rows[0].flag;

				var pos = rows[0].pos;
				var neg = rows[0].neg;

				var event_end = rows[0].event_end;
				var var_end = rows[0].var_end;

				if (event_end == 0){
					if (choice_id >= 200){
						bot.sendMessage(message.chat.id, "Riscattare la ricompensa?", yesno).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text.toLowerCase() == "si"){

									var text = "";
									var chest = 0;
									var num = 0;
									var end_exp = 0;

									if ((pos != 0) && (neg != 0)){
										if (pos > neg){
											if (pos < 5){
												num = 5;
												end_exp = 10;
											}else if (pos <= 10){
												num = 7;
												end_exp = 10;
											}else if (pos > 10){
												epic = 10;
												end_exp = 10;
											}
										}else{
											if (neg < 5){
												num = 3;
												end_exp = 15;
											}else if (pos <= 10){
												num = 5;
												end_exp = 25;
											}else if (pos > 10){
												num = 7;
												end_exp = 40;
											}
										}
										chest = 6;
										text = "Hai ricevuto *" + num + " Scrigni Epici* e *" + end_exp + " exp*!";
									}else{
										if (var_end != 1){
											if (var_end == 6){
												text = "Purtroppo ti hanno distrutto il solo modo per trovare il tesoro e non hai ottenuto ricompense.";
											}
											if (var_end == 8){
												chest = 4;
												num = 3;
												text = "Ricevi 3 Scrigni di Diamante!";
											}
											if ((var_end == 11) || (var_end == 13) || (var_end == 14)){
												chest = 5;
												num = 3;
												text = "Ti restano soltanto gli scrigni che hai in soffitta, ottieni quindi 3 Scrigni Leggendari!";
											}
											if (var_end == 25){
												chest = 6;
												num = 3;
												text = "All'interno della stanza trovi 3 Scrigni Epici!";
											}
											if (var_end == 26){
												connection.query('UPDATE player SET life = total_life*0.1 WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});
												text = "Fortunatamente non sei morto, ma torni al tuo rifugio con il 10% dei tuoi hp.";
											}
										}	
									}

									for (var i = 0; i < num; i++) {
										connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES(' + player_id + ',' + chest + ')', function(err, rows, fields) {
											if (err) throw err;
										});
									}
									connection.query('UPDATE mission_event_status SET event_end = 1 WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
									});
									connection.query('UPDATE player SET exp = exp + ' + end_exp + ' WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
									});
									connection.query('SELECT COUNT(*) As num FROM `mission_event_status` WHERE event_end = 1', function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Evento completato!\n*" + text + "*\nUn enorme grazie per aver partecipato!\nSei l'utente numero " + rows[0].num + " ad aver completato l'evento.\nSi ringrazia @AlexCortinovis per aver ideato la storia e mi raccomando, se avete idee proponetele e magari la prossima storia sar√† ideata da voi!\nCi vediamo al prossimo!", back);
									});
								}
							}
						});
						return;
					}
				}else if (event_end == 1){
					bot.sendMessage(message.chat.id, "Hai gi√† riscattato le ricompense dell'evento!", back);
					return;
				}

				connection.query('SELECT * FROM mission_event_choice WHERE id = ' + choice_id, function(err, rows, fields) {
					if (err) throw err;
					console.log("Scelta: " + choice_id);

					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Si √® verificato un errore, contatta l'admin indicando questo codice: " + choice_id + "!", back);
						return;
					}

					var text = rows[0].text;
					text = text.replace(new RegExp("%player%", "g"), message.from.username.replace(new RegExp("_", "g"), " "));

					var var1 = "";
					var var2 = "";
					var var3 = "";

					if ((rows[0].text1 == undefined) || (rows[0].text1 == "")){
						rows[0].text1 = "1. Favoloso!";
						rows[0].text2 = "2. Cos√¨ cos√¨";
						rows[0].text3 = "3. Non mi √® piaciuto";

						connection.query('UPDATE mission_event_status SET choice_id = 200, var_end = ' + choice_id + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});

						text += "\n\nLascia un voto, e procedi per ottenere la tua ricompensa!";
					}

					var c1 = rows[0].text1;
					var c2 = rows[0].text2;
					var c3 = rows[0].text3;

					var eventChoice = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [[c1],[c2],[c3],["Torna al menu"]]
						}
					};

					// RIMUOVERE NEI PROSSIMI EVENTI!

					if ((choice_id == 9) && (flag == 0)){
						connection.query('UPDATE player SET money = money-10000 WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
						connection.query('UPDATE mission_event_status SET flag = 1 WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});
					}

					bot.sendMessage(message.chat.id, text, eventChoice);
				});
			}
		});
	});	
});

bot.onText(/^Iscriviti al Registro$/i, function(message) {

	if (eventStory == 0){
		if ((message.from.username != "fenix45") && (message.from.username != "LastSoldier95")){
			return;
		}
	}

	var eventKb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Vai all'evento"],["Torna al menu"]]
		}
	};

	connection.query('SELECT mission_id, id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		connection.query('SELECT * FROM mission_event_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO mission_event_status (player_id,choice_id,mission_end) VALUES (' + player_id + ',1,NULL)', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Sei stato aggiunto al registro eventi!", eventKb);
					return;
				});
			}else{
				bot.sendMessage(message.chat.id, "Sei gi√† stato aggiunto al registro eventi!", eventKb);
			}
		});
	});
});

bot.onText(/[1-9][.] [a-z1-9\s]+/i, function(message) {

	return;

	if (eventStory == 0){
		if ((message.from.username != "fenix45") && (message.from.username != "LastSoldier95")){
			return;
		}
	}

	var num = parseInt(message.text.charAt(0));
	var choice = message.text.substring(message.text.indexOf(" ")+1, message.text.lenght);

	connection.query('SELECT id, mission_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		connection.query('SELECT * FROM mission_event_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non ti sei ancora iscritto al registro eventi!", back);
				return;
			}
			var choice_id = rows[0].choice_id;
			var epic = 0;
			var event_end = rows[0].event_end;

			console.log("choice_id = " + choice_id);

			if (event_end == 0){
				if (choice_id >= 200){
					var eventKb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Riscatta ricompensa evento"],["Torna al menu"]]
						}
					};

					connection.query('UPDATE mission_event_status SET vote = "' + choice + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
					});

					bot.sendMessage(message.chat.id, "Evento completato! Torna all'evento per ricevere la ricompensa!", eventKb);
					return;
				}
			}else if (event_end == 1){
				bot.sendMessage(message.chat.id, "Hai gi√† riscattato le ricompense dell'evento!", back);
				return;
			}

			connection.query('SELECT * FROM mission_event_choice WHERE id = ' + choice_id + ' AND (text1 LIKE "%' + choice + '" OR text2 LIKE "%' + choice + '" OR text3 LIKE "%' + choice + '")', function(err, rows, fields) {
				if (err) throw err;
				console.log("Scelta: " + num);

				var nextMission = 0;

				if (Object.keys(rows).length > 0){
					if (num == 1){
						nextMission = rows[0].to_mission1;
					}else if (num == 2){
						nextMission = rows[0].to_mission2;
					}else if (num == 3){
						nextMission = rows[0].to_mission3;
					}else{
						bot.sendMessage(message.chat.id, "Errore, la corrispondenza della scelta non √® stata trovata", back);
						return;
					}

					connection.query('SELECT * FROM mission_event_text WHERE id = ' + nextMission, function(err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0){
							var text = "*" + rows[0].title + "*\n";
							text += rows[0].text + "\n";
							text += "Questa parte di storia durer√† *" + toTime(rows[0].duration) + "*";

							var d = new Date();
							d.setSeconds(d.getSeconds() + rows[0].duration);
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

							var pos = rows[0].pos;
							var neg = rows[0].neg;

							connection.query('UPDATE mission_event_status SET pos = pos + ' + pos + ', neg = neg + ' + neg + ', mission_id = ' + rows[0].id + ', mission_end = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, text, back);
							});
						}
					});
				}else{
					bot.sendMessage(message.chat.id, "Scelta non valida", back);
					return;
				}
			});
		});
	});
});

function randomChest(){
	var rand = Math.round((Math.random()*100)+1);

	var chest1 = 100;
	var chest2 = 70;
	var chest3 = 50;
	var chest4 = 20;
	var chest5 = 10;
	var chest6 = 3;

	if (rand <= chest6){
		var rarity = 6;
	}else if (rand <= chest5){
		var rarity = 5;
	}else if (rand <= chest4){
		var rarity = 4;
	}else if (rand <= chest3){
		var rarity = 3;
	}else if (rand <= chest2){
		var rarity = 2;
	}else if (rand <= chest1){
		var rarity = 1;
	}

	return rarity;
}

bot.onText(/piazza di xxxia|piazza/i, function(message) {

	var iKeys = [];
	iKeys.push(["Emporio üí∏"]);
	iKeys.push(["Contrabbandiere dell'Est üë£"]);
	iKeys.push(["Mercante Pazzo üëù"]);
	iKeys.push(["Cronologia üí¨","Regala un oggetto üéÅ"]);
	iKeys.push(["Torna al menu"]);

	var kb = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": iKeys
		}
	};

	bot.sendMessage(message.chat.id,"Benvenuto nella <b>Piazza di Lootia</b>, cosa vorresti fare?", kb);
});

bot.onText(/contrabbandiere|vedi incarichi/i, function(message) {

	if (message.text == "Classifica Contrabbandiere"){
		return;
	}

	connection.query('SELECT account_id, market_ban, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].market_ban == 1){
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;

		var d = new Date();
		if ((d.getHours() < 9) || (d.getHours() > 22)){		//9-23
			bot.sendMessage(message.chat.id, "Il Contrabbandiere non √® in piazza a quest'ora...", back);
			return;
		}

		connection.query('SELECT id, item_id, price, total_cnt, day_cnt, time_end FROM merchant_offer WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Vedi Incarichi"],["Torna al menu"]]
					}
				};

				connection.query('INSERT INTO merchant_offer (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Sei stato aggiunto alla *Lista Iscrizioni* del Contrabbandiere, accetta i suoi incarichi per ottenere dei pagamenti in cambio delle tue opere di creazione!", kb);
					refreshMerchant(player_id);
				});
			}else{

				var price = rows[0].price;
				var total_cnt = rows[0].total_cnt;
				var day_cnt = rows[0].day_cnt;
				var item_id = rows[0].item_id;

				if (rows[0].time_end != null){
					var time_end = new Date(rows[0].time_end);
					var short_date = addZero(time_end.getHours()) + ":" + addZero(time_end.getMinutes()) + ":" + addZero(time_end.getSeconds());

					if ((time_end.getHours() > 22) || (day_cnt >= merchant_limit)){
						bot.sendMessage(message.chat.id, "Il Contrabbandiere non ha ancora nulla per te, riprova domani", back);
					}else{
						bot.sendMessage(message.chat.id, "Il Contrabbandiere non ha ancora nulla per te, riprova alle " + short_date, back);
					}
					return;
				}

				connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id, function(err, rows, fields) {
					if (err) throw err;

					var poss = "";
					if (rows[0].cnt > 0){
						poss = " ‚úÖ";
					}

					connection.query('SELECT name, rarity FROM item WHERE id = ' + item_id, function(err, rows, fields) {
						if (err) throw err;

						var name = rows[0].name;
						var rarity = rows[0].rarity;

						var kb = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Accetta Vendita di " + name],["Cerca " + name],["Cambia offerta","Torna al menu"]]
							}
						};

						var kbYesNo = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Si"],["Torna dal contrabbandiere"],["Torna al menu"]]
							}
						};

						var kbBack = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Torna dal contrabbandiere"],["Torna al menu"]]
							}
						};

						var kbBack2 = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Torna dal contrabbandiere"],["Torna al menu"]]
							}
						};

						var kbSel = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Istantaneo","Aspetta 4 ore"],["Torna al menu"]]
							}
						};

						if (day_cnt == merchant_limit){
							bot.sendMessage(message.chat.id, "Il Contrabbandiere non ha pi√π bisogno di nulla per oggi", back);
							return;
						}

						bot.sendMessage(message.chat.id, "Benvenuto <b>" + message.from.username + "</b>!\nPuoi creare oggetti per il <b>Contrabbandiere</b> ed egli provveder√† a valutarli e ricompensarti adeguatamente, purtroppo per√≤ √® disponibile solamente di giorno. Quando lascia la piazza, aggiorna la sua fornitura e quando torna ti propone affari diversi.\n\n<b>" + name + " (" + rarity + ")</b> al prezzo di <i>" + formatNumber(price) + "</i> ¬ß" + poss + "\n\nAccetti l'incarico di questo oggetto? Se l'offerta che ti propone non ti sembra valida, puoi cambiarla.", kb).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Torna al menu"){
									return;
								}else if (answer.text == "Cambia offerta"){
									bot.sendMessage(message.chat.id, "Per chiedere un nuovo oggetto istantaneamente ti servir√† una üíé, oppure puoi attendere 4 ore per dare il tempo al contrabbandiere di rifornirsi, cosa vuoi fare?", kbSel).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text == "Istantaneo"){
												bot.sendMessage(message.chat.id, "Sei sicuro?", kbYesNo).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text.toLowerCase() == "si"){
															connection.query('SELECT gems FROM player WHERE id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																if (rows[0].gems < 1){
																	bot.sendMessage(message.chat.id, "Non hai abbastanza gemme", back);
																	return;
																}
																connection.query('UPDATE player SET gems = gems-1 WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																	refreshMerchant(player_id);
																	bot.sendMessage(message.chat.id, "E' arrivata la nuova offerta!", kbBack);
																});
															});
														};
													};
												});
											}else if (answer.text == "Aspetta 4 ore"){
												var now = new Date();
												now.setMinutes(now.getMinutes() + 240);
												var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
												var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());

												if ((now.getHours() > 22) || (now.getHours() < 5)){
													bot.sendMessage(message.chat.id, "A quell'ora il viandante sar√† gi√† andato via, non puoi aspettare cos√¨ tanto", kbBack);
													return;
												}

												connection.query('UPDATE merchant_offer SET time_end = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													refreshMerchant(player_id);
													bot.sendMessage(message.chat.id, "Hai chiesto una nuova offerta, dovrai attendere fino alle " + short_date + "!", kbBack);
												});
											}
										};
									});
								}else if (answer.text.indexOf("Accetta Vendita di") != -1){
									bot.sendMessage(message.chat.id, "Sei sicuro di voler vendere il tuo " + name + " per " + formatNumber(price) + " ¬ß?", kbYesNo).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text.toLowerCase() == "si"){
												connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id, function(err, rows, fields) {

													if (rows[0].cnt == 0){
														bot.sendMessage(message.chat.id, "Non possiedi l'oggetto richiesto!", kbBack);
														return;
													}

													var isC = 0;
													if ((total_cnt % 40 == 0) && (total_cnt > 0)){
														connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',677)', function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Per la tua costanza il contrabbandiere ti regala un *Coupon*, valido immediatamente!", mark);
														});
														isC = 1;
													}

													connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 677', function(err, rows, fields) {

														var bonus = ""
														if ((rows[0].cnt > 0) || (isC == 1)){
															price = price+Math.round(price/3);
															bonus = ", aumentati grazie al Coupon";
															var rand = Math.random()*100;
															if ((rand < 30) && (isC == 0)){
																bonus += " (Appena Scaduto)";
																connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 677 LIMIT 1', function(err, rows, fields) {
																	if (err) throw err;
																});
															}
														}

														if (luckyMode == 1){
															var d = new Date();
															if (d.getDay() == 6){
																var rand = Math.random()*100;
																if (rand < 10){
																	price = price*2;
																}
															}else if (d.getDay() == 0){
																var rand = Math.random()*100;
																if (rand < 20){
																	price = price*2;
																}else if ((rand > 20) && (rand < 30)){
																	price = Math.round(price/2);
																}
															}
														}

														var now = new Date();
														now.setMinutes(now.getMinutes() + 30);
														var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
														var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes());

														var extra = "\nTorna tra 30 minuti per provare a commerciare di nuovo!";
														if ((day_cnt+1) >= merchant_limit){
															extra = "\nPer oggi il mercante ha terminato le sue offerte per te!";
														}

														if (now.getHours() > 22){
															extra = "\nPer oggi il mercante ha terminato le sue offerte!";
														}

														connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id + ' LIMIT 1', function(err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE player SET money = money + ' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																connection.query('UPDATE merchant_offer SET time_end = "' + long_date + '", total_cnt = total_cnt+1, day_cnt = day_cnt+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;

																	bot.sendMessage(message.chat.id, "Vendita completata! Hai venduto *" + name + "* per *" + formatNumber(price) + "* ¬ß" + bonus + extra, kbBack);
																	refreshMerchant(player_id);
																	setAchievement(message.chat.id, player_id, 49, 1);
																});
															});
														});
													});
												});
											};
										};
									});
								};
							};
						});
					});
				});
			}
		});
	});
});

bot.onText(/calcAll (.+)|calcAll/i, function(message, match) {
	if (match[1] == undefined){
		bot.sendMessage(message.chat.id, "0 = value, 1 = estimate")
		return;
	}else{
		estimate = match[1];
	}

	var calcVal = 0;

	connection.query('UPDATE item SET base_sum = 0', function(err, rows, fields) {
		if (err) throw err;
		connection.query('SELECT id, name, estimate, value FROM item WHERE estimate > 0 AND rarity IN ("C","NC","R","UR","L","E","U") AND craftable = 1', function(err, rows, fields) {
			if (err) throw err;
			var len = Object.keys(rows).length
			for (var i = 0; i < len; i++) {
				console.log(i + "/" + len + " Somma base per " + rows[i].name);
				calcBase(rows[i].id, rows[i].id, estimate);

				/*		ESCLUDE SE STESSO DAL CALCOLO, TOGLI IL COMMENTO PER INCLUDERE
				if (estimate == 0){
					calcVal = rows[i].value;
				}else{
					calcVal = rows[i].estimate;
				}

				connection.query('UPDATE item SET base_sum = base_sum+' + calcVal + ' WHERE id = ' + rows[i].id, function(err, rows, fields) {
					if (err) throw err;
				});
				*/
			}
		});
	});
});

function calcBase(base_id, item_id, estimate = 0){
	connection.query('SELECT I1.id As i1, I1.name As n1, I1.value As v1, I1.estimate As e1, I1.craftable As c1, I2.id As i2, I2.name As n2, I2.craftable As c2, I2.value As v2, I2.estimate As e2, I3.id As i3, I3.name As n3, I3.value As v3, I3.estimate As e3, I3.craftable As c3 FROM craft C INNER JOIN item I1 ON C.material_1 = I1.id INNER JOIN item I2 ON C.material_2 = I2.id INNER JOIN item I3 ON C.material_3 = I3.id WHERE C.material_result = ' + item_id, function(err, rows, fields) {
		if (err) throw err;

		var calcVal = 0;

		if (rows[0].c1 == 1){
			calcBase(base_id, rows[0].i1);
		}else{
			if (estimate == 0){
				calcVal = rows[0].v1;
			}else{
				calcVal = rows[0].e1;
			}
			connection.query('UPDATE item SET base_sum = base_sum+' + calcVal + ' WHERE id = ' + base_id, function(err, rows, fields) {
				if (err) throw err;
			});
		}
		if (rows[0].c2 == 1){
			calcBase(base_id, rows[0].i2);
		}else{
			if (estimate == 0){
				calcVal = rows[0].v2;
			}else{
				calcVal = rows[0].e2;
			}
			connection.query('UPDATE item SET base_sum = base_sum+' + calcVal + ' WHERE id = ' + base_id, function(err, rows, fields) {
				if (err) throw err;
			});
		}
		if (rows[0].c3 == 1){
			calcBase(base_id, rows[0].i3);
		}else{
			if (estimate == 0){
				calcVal = rows[0].v3;
			}else{
				calcVal = rows[0].e3;
			}
			connection.query('UPDATE item SET base_sum = base_sum+' + calcVal + ' WHERE id = ' + base_id, function(err, rows, fields) {
				if (err) throw err;
			});
		}
	});
}

bot.onText(/pntAll/i, function(message, match) {
	connection.query('UPDATE item SET pnt_sum = 0, price_sum = 0', function(err, rows, fields) {
		if (err) throw err;

		connection.query('SELECT id, name, rarity FROM item WHERE rarity IN ("UR","L","E","UE","X","U") AND craftable = 1', function(err, rows, fields) {
			if (err) throw err;
			var len = Object.keys(rows).length;
			var calcVal = 0;
			var calcVal2 = 0;
			for (var i = 0; i < len; i++) {
				console.log(i + "/" + len + " Somma punti craft e costi per " + rows[i].name);
				calcPnt(rows[i].id, rows[i].id);

				if (rows[i].rarity == "UR"){
					calcVal = 2;
					calcVal2 = 500;
				}else if (rows[i].rarity == "L"){
					calcVal = 3;
					calcVal2 = 750;
				}else if (rows[i].rarity == "E"){
					calcVal = 5;
					calcVal2 = 1000;
				}else if (rows[i].rarity == "UE"){
					calcVal = 25;
					calcVal2 = 10000;
				}else if (rows[i].rarity == "X"){
					calcVal = 50;
					calcVal2 = 100000;
				}else if (rows[i].rarity == "U"){
					calcVal = 35;
					calcVal2 = 50000;
				}else{
					calcVal = 0;
				}
				connection.query('UPDATE item SET pnt_sum = pnt_sum+' + calcVal + ', price_sum = price_sum+' + calcVal2 + ' WHERE id = ' + rows[i].id, function(err, rows, fields) {
					if (err) throw err;
				});
			}
		});
	});
});


function calcPnt(base_id, item_id){
	connection.query('SELECT I1.id As i1, I1.name As n1, I1.rarity As r1, I1.craftable As c1, I2.id As i2, I2.name As n2, I2.craftable As c2, I2.rarity As r2, I3.id As i3, I3.name As n3, I3.rarity As r3, I3.craftable As c3 FROM craft C INNER JOIN item I1 ON C.material_1 = I1.id INNER JOIN item I2 ON C.material_2 = I2.id INNER JOIN item I3 ON C.material_3 = I3.id WHERE C.material_result = ' + item_id, function(err, rows, fields) {
		if (err) throw err;

		var calcVal = 0;
		var calcVal2 = 0;

		if (rows[0].c1 == 1){
			calcPnt(base_id, rows[0].i1);
			if (rows[0].r1 == "UR"){
				calcVal = 2;
				calcVal2 = 500;
			}else if (rows[0].r1 == "L"){
				calcVal = 3;
				calcVal2 = 750;
			}else if (rows[0].r1 == "E"){
				calcVal = 5;
				calcVal2 = 1000;
			}else if (rows[0].r1 == "UE"){
				calcVal = 25;
				calcVal2 = 10000;
			}else if (rows[0].r1 == "X"){
				calcVal = 50;
				calcVal2 = 100000;
			}else if (rows[0].r1 == "U"){
				calcVal = 35;
				calcVal2 = 50000;
			}else{
				calcVal = 0;
				calcVal2 = 0;
			}
			connection.query('UPDATE item SET pnt_sum = pnt_sum+' + calcVal + ', price_sum = price_sum+' + calcVal2 + ' WHERE id = ' + base_id, function(err, rows, fields) {
				if (err) throw err;
			});

			console.log(rows[0].n1 + " " + calcVal);
		}
		if (rows[0].c2 == 1){
			calcPnt(base_id, rows[0].i2);
			if (rows[0].r2 == "UR"){
				calcVal = 2;
				calcVal2 = 500;
			}else if (rows[0].r2 == "L"){
				calcVal = 3;
				calcVal2 = 750;
			}else if (rows[0].r2 == "E"){
				calcVal = 5;
				calcVal2 = 1000;
			}else if (rows[0].r2 == "UE"){
				calcVal = 25;
				calcVal2 = 10000;
			}else if (rows[0].r2 == "X"){
				calcVal = 50;
				calcVal2 = 100000;
			}else if (rows[0].r2 == "U"){
				calcVal = 35;
				calcVal2 = 50000;
			}else{
				calcVal = 0;
				calcVal2 = 0;
			}
			connection.query('UPDATE item SET pnt_sum = pnt_sum+' + calcVal + ', price_sum = price_sum+' + calcVal2 + ' WHERE id = ' + base_id, function(err, rows, fields) {
				if (err) throw err;
			});

			console.log(rows[0].n2 + " " + calcVal);
		}
		if (rows[0].c3 == 1){
			calcPnt(base_id, rows[0].i3);
			if (rows[0].r3 == "UR"){
				calcVal = 2;
				calcVal2 = 500;
			}else if (rows[0].r3 == "L"){
				calcVal = 3;
				calcVal2 = 750;
			}else if (rows[0].r3 == "E"){
				calcVal = 5;
				calcVal2 = 1000;
			}else if (rows[0].r3 == "UE"){
				calcVal = 25;
				calcVal2 = 10000;
			}else if (rows[0].r3 == "X"){
				calcVal = 50;
				calcVal2 = 100000;
			}else if (rows[0].r3 == "U"){
				calcVal = 35;
				calcVal2 = 50000;
			}else{
				calcVal = 0;
				calcVal2 = 0;
			}
			connection.query('UPDATE item SET pnt_sum = pnt_sum+' + calcVal + ', price_sum = price_sum+' + calcVal2 + ' WHERE id = ' + base_id, function(err, rows, fields) {
				if (err) throw err;
			});

			console.log(rows[0].n3 + " " + calcVal);
		}
	});
}

bot.onText(/refreshMerchant/i, function(message, match) {
	refreshMerchant(0);
	bot.sendMessage(message.chat.id, "Fatto!");
	return;
});

function refreshMerchant(player_id){
	if (player_id == 0){
		connection.query('SELECT id FROM merchant_offer', function(err, rows, fields) {
			if (err) throw err;

			var id = 0;
			var val = 0;
			var perc = 0;
			var price = 0;
			var name = "";
			var price_sum = 0;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				id = rows[i].id;
				connection.query('SELECT item_id FROM merchant_offer WHERE id = ' + id, function(err, rows, fields) {
					if (err) throw err;
					connection.query('SELECT id, base_sum, price_sum, name, value FROM item WHERE estimate > 0 AND id != ' + rows[0].item_id + ' AND rarity IN ("C","NC","R","UR","L","E") AND craftable = 1 ORDER BY RAND()', function(err, rows, fields) {
						if (err) throw err;
						val = parseInt(rows[0].base_sum);
						price_sum = parseInt(rows[0].price_sum);

						price = val+price_sum+rows[0].value;
						price = price*(1.3+(Math.random()*0.6));

						name = rows[0].name;
						connection.query('UPDATE merchant_offer SET item_id = ' + rows[0].id + ', price = ' + price + ' WHERE id = ' + this.id, function(err, rows, fields) {
							if (err) throw err;
						});
					}.bind( {id: this.id} ));
				}.bind( {id: id} ));
			}
			//console.log("Contrabbandiere auto per " + Object.keys(rows).length + " player");
		});
	}else{
		connection.query('SELECT item_id FROM merchant_offer WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			connection.query('SELECT id, base_sum, price_sum, name, value FROM item WHERE estimate > 0 AND id != ' + rows[0].item_id + ' AND rarity IN ("C","NC","R","UR","L","E") AND craftable = 1 ORDER BY RAND()', function(err, rows, fields) {
				if (err) throw err;
				var val = parseInt(rows[0].base_sum);
				var price_sum = parseInt(rows[0].price_sum);

				var price = val+price_sum+rows[0].value;
				price = price*(1.3+(Math.random()*0.6));

				var name = rows[0].name;
				connection.query('UPDATE merchant_offer SET item_id = ' + rows[0].id + ', price = ' + price + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			});
		});
	}
}

bot.onText(/offerte giornaliere|^mercante pazzo|mercante/i, function(message) {

	if (message.text.indexOf("Cerca") != -1){
		return;
	}

	if (message.text.toLowerCase().indexOf("statuetta") != -1){
		return;
	}

	var price_drop = 0;
	var price_drop_msg = "";
	var n = new Date().getDay()
	var n2 = new Date().getDate();

	if (n == 0){
		if (n2 < 7){
			sconto = 20;
		}
		price_drop = 1;
		price_drop_msg = "*Oggi il prezzo √® ridotto del " + sconto + "%!*\n";
	}

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;		

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}
		if (rows[0].market_ban == 1){
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		var player_id = rows[0].id;

		if (crazyMode == 0){
			if (rows[0].market_pack > 0){
				bot.sendMessage(message.chat.id, "Oggi hai gi√† acquistato un pacchetto, torna domani", back);
				return;
			}
		}else{
			if (rows[0].market_pack > 2){
				bot.sendMessage(message.chat.id, "Oggi hai gi√† acquistato tre pacchetti grazie al folle, torna domani", back);
				return;
			}
		}

		connection.query('SELECT rarity.name, SUM(price) As tot FROM market_pack, rarity WHERE market_pack.pack_id = rarity.id GROUP BY pack_id', function(err, rows, fields) {
			if (err) throw err;

			var iKeys = [];
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				iKeys.push(["Pacchetto " + rows[i].name + " (" + formatNumber(rows[i].tot) + " ¬ß)"]);
			}
			iKeys.push(["Torna al menu"]);

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": iKeys
				}
			};

			bot.sendMessage(message.chat.id, price_drop_msg + "Il *Mercante Pazzo* oggi offre alcuni pacchetti dall'aspetto interessante, selezionali per vedere il loro contenuto, ma attenzione, puoi acquistare solamente un pacchetto al giorno!", kb).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text == "Torna al menu"){
						return;
					}
					var reg3 = /Pacchetto (.+) \(/i;
					var rarity = answer.text.match(reg3);

					if (rarity[1] == undefined){
						return;
					}
					connection.query('SELECT pack_id, SUM(price) As tot FROM market_pack, rarity WHERE market_pack.pack_id = rarity.id AND rarity.name = "' + rarity[1] + '"', function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "Pacchetto non valido", back);
							return;
						}
						if (rows[0].tot == null){
							bot.sendMessage(message.chat.id, "Pacchetto non valido", back);
							return;
						}

						var pack_id = rows[0].pack_id;
						var price = rows[0].tot;

						connection.query('SELECT pack_id, item.name, item.id, price FROM market_pack, item WHERE market_pack.item_id = item.id AND pack_id = ' + pack_id, function(err, rows, fields) {
							if (err) throw err;
							var text = "Oggetti contenuti nel pacchetto:\n";
							var items = [];
							var prices = [];
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								text += "> " + rows[i].name + "\n";
								items.push(rows[i].id);
								if (price_drop == 1){
									prices.push(Math.round(rows[i].price-(rows[i].price/100*sconto)));
								}else{
									prices.push(rows[i].price);
								}
							}
							if (price_drop == 1){
								price = Math.round(price-(price/100*sconto));
							}
							text += "\nAl prezzo di: *" + formatNumber(price) + "* ¬ß";

							var kb2 = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									//one_time_keyboard: true,
									"keyboard": [["Accetta"],["Torna dal mercante"],["Torna al menu"]]
								}
							};
							bot.sendMessage(message.chat.id, text + "\n\nAcquisti il pacchetto?", kb2).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text == "Accetta"){
										connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											if (rows[0].money < price){
												bot.sendMessage(message.chat.id, "Non hai abbatanza monete!", back);
												return;
											}
											connection.query('UPDATE player SET market_pack = market_pack+1, money = money - ' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												var d = new Date();
												var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
												for (var i = 0, len = Object.keys(items).length; i < len; i++) {
													connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + items[i] + ')', function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('INSERT INTO market_direct_history (item_id, price, time, from_id, to_id, buyer, type) VALUES (' + items[i] + ',' + prices[i] + ',"' + long_date + '",' + player_id + ',0,"Pacchetto",4)', function(err, rows, fields) {
														if (err) throw err;
													});
												}
												bot.sendMessage(message.chat.id, "Acquisto pacchetto *" + rarity[1] + "* completato! Hai speso *" + formatNumber(price) + "* ¬ß!", back);
												//console.log("Pacchetto acquistato");
												setAchievement(message.chat.id, player_id, 45, 1);
											});
										});
									}
								}
							});
						});
					});
				};
			});
		});
	});	
});

bot.onText(/^Regala un oggetto/, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}
		if (rows[0].market_ban == 1){
			bot.sendMessage(message.chat.id, "Sei bannato dal mercato", back);
			return;
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna alla piazza"],["Torna al menu"]]
			}
		};

		var player_id = rows[0].id;

		connection.query('SELECT * FROM market_gift WHERE player_id = ' + player_id + ' ORDER BY time DESC', function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length > 0){
				var d = new Date(rows[0].time);
				var now = new Date();
				var diff = Math.round(((now - d)/1000)/60/60);	//in ore
				diff = Math.abs(diff);

				if (diff < 24*3){
					d.setDate(d.getDate() + 3);
					var long_date = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear() + " alle " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

					bot.sendMessage(message.chat.id, "Prima di regalare ancora devi aspettare fino al " + long_date, back);
					return;
				}	
			}

			bot.sendMessage(message.chat.id, "Inserisci il nickname del giocatore al quale regalare l'oggetto, puoi farlo solamente una volta ogni 3 giorni", kb).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if ((answer.text == "Torna al menu") || (answer.text == "Torna alla piazza")){
						return;
					}

					var user = answer.text.replace("@","").trim();

					connection.query('SELECT id, chat_id FROM player WHERE nickname = "' + user + '"', function(err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "Il giocatore specificato non esiste", kb);
							return;
						}
						var player_id2 = rows[0].id;
						var chat_id2 = rows[0].chat_id;

						if (player_id == player_id2){
							bot.sendMessage(message.chat.id, "Non puoi inviare regali a te stesso", kb);
							return;
						}

						bot.sendMessage(message.chat.id, "Inserisci il nome dell'oggetto", kb).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if ((answer.text == "Torna al menu") || (answer.text == "Torna alla piazza")){
									return;
								}
								var itemName = answer.text;
								connection.query('SELECT id, name, allow_sell FROM item WHERE name = "' + itemName + '"', function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste", kb);
										return;
									}
									if (rows[0].allow_sell == 0){
										bot.sendMessage(message.chat.id, "L'oggetto specificato non pu√≤ essere regalato", kb);
										return;
									}

									var itemId = rows[0].id;
									itemName = rows[0].name;
									connection.query('SELECT id FROM inventory WHERE item_id = ' + itemId + ' AND player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "L'oggetto specificato non √® presente nel tuo inventario", kb);
											return;
										}

										bot.sendMessage(message.chat.id, "Inserisci il messaggio da inviare (senza andare a capo o caratteri strani)", back).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {
												if (answer.text == "Torna al menu"){
													return;
												}
												var msg = answer.text;

												var reg = new RegExp("[<>]+");
												if (reg.test(msg) == true){
													bot.sendMessage(message.chat.id, "Non utilizzare caratteri come <, o >", kb);
													return;
												}

												bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function() {
													answerCallbacks[message.chat.id] = function(answer) {
														if (answer.text.toLowerCase() == "si"){
															connection.query('SELECT id FROM inventory WHERE item_id = ' + itemId + ' AND player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																if (Object.keys(rows).length == 0){
																	bot.sendMessage(message.chat.id, "L'oggetto specificato non √® presente nel tuo inventario", back);
																	return;
																}

																setAchievement(message.chat.id, player_id, 36, 1);

																var d = new Date();
																var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																connection.query('INSERT INTO market_gift (player_id, to_id, item_id, time) VALUES (' + player_id + ',' + player_id2 + ',' + itemId + ',"' + long_date + '")', function (err, rows, fields){
																	if (err) throw err;
																});

																connection.query('UPDATE inventory SET player_id = ' + player_id2 + ' WHERE player_id = ' + player_id + ' AND item_id = ' + itemId + ' LIMIT 1', function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Regalo inviato!", kb);
																	bot.sendMessage(chat_id2, "Hai ricevuto <b>" + itemName + "</b> da <b>" + message.from.username + "</b>, e ti scrive:\n<i>" + msg + "</i>", html);
																});
															});
														}
													}
												});
											};
										});
									});
								});
							}
						});
					});
				}
			});
		});
	});
});

bot.onText(/cron (.+)/i, function(message, match) {

	if (message.from.username != "fenix45"){
		return;
	}

	connection.query('SELECT id FROM player WHERE nickname = "' + match[1] + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		connection.query('SELECT item.name, M.price, M.type, time, from_id, to_id, P1.nickname As from_nick, P2.nickname As to_nick FROM market_direct_history M INNER JOIN player P1 ON P1.id = M.from_id INNER JOIN player P2 ON P2.id = M.to_id, item WHERE item.id = M.item_id AND (from_id = ' + player_id + ' OR to_id = ' + player_id + ') ORDER BY M.id DESC LIMIT 50', function(err, rows, fields) {
			if (err) throw err;

			var text = "*Cronologia vendite utente*\n\n";
			var long_date;
			var d;

			var tipo = "";

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				d = new Date(rows[i].time);
				long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1);

				if (rows[i].type == 1){
					tipo = "Mercato";
				}else if (rows[i].type == 2){
					tipo = "Negozi";
				}else{
					tipo = "?";
				}

				if (rows[i].from_id == player_id){
					text += ">> *" + rows[i].name + "* a " + rows[i].price + " ¬ß a " + rows[i].to_nick.replace(new RegExp("_", "g"), " ") + " " + long_date + " (" + tipo + ")\n";
				}else if (rows[i].to_id == player_id){
					text += "<< *" + rows[i].name + "* a " + rows[i].price + " ¬ß da " + rows[i].from_nick.replace(new RegExp("_", "g"), " ") + " " + long_date + " (" + tipo + ")\n";
				}
			}
			bot.sendMessage(message.chat.id, text, mark);
		});
	});
});

bot.onText(/cronologia/i, function(message) {
	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		connection.query('SELECT item.name, M.price, M.type, time, from_id, to_id, P1.nickname As from_nick, P2.nickname As to_nick FROM market_direct_history M INNER JOIN player P1 ON P1.id = M.from_id INNER JOIN player P2 ON P2.id = M.to_id, item WHERE item.id = M.item_id AND (from_id = ' + player_id + ' OR to_id = ' + player_id + ') ORDER BY M.id DESC LIMIT 50', function(err, rows, fields) {
			if (err) throw err;

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Torna alla piazza"],["Torna al menu"]]
				}
			};

			var text = "*Cronologia vendite personali*\n\n";
			var long_date;
			var d;
			var tipo = "";

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				d = new Date(rows[i].time);
				long_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1);

				if (rows[i].type == 1){
					tipo = "Mercato";
				}else if (rows[i].type == 2){
					tipo = "Negozi";
				}else{
					tipo = "?";
				}

				if (rows[i].from_id == player_id){
					text += ">> *" + rows[i].name + "* a " + rows[i].price + " ¬ß a " + rows[i].to_nick.replace(new RegExp("_", "g"), " ") + " - " + long_date + " (" + tipo + ")\n";
				}else if (rows[i].to_id == player_id){
					text += "<< *" + rows[i].name + "* a " + rows[i].price + " ¬ß da " + rows[i].from_nick.replace(new RegExp("_", "g"), " ") + " - " + long_date + " (" + tipo + ")\n";
				}
			}
			bot.sendMessage(message.chat.id, text, kb);
		});
	});
});

bot.onText(/^cerca/i, function(message) {

	if (message.text.toLowerCase().indexOf("ricercato") != -1){
		return;
	}

	if (!checkSpam(message)){
		return;
	}

	if (message.text.indexOf(" ") != -1){
		var oggetto = message.text.substring(message.text.indexOf(" ")+1);
		if ((oggetto == "Ancora") || (oggetto == "üîé")){
			cerca(message);
			return;
		}

		connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
			if (err) throw err;
			var player_id = rows[0].id;

			cercaTermine(message, oggetto, player_id);
		});
	}else{
		cerca(message);
	}
});

bot.onText(/Torna a /i, function(message) {
	var oggetto = message.text.substring(getPosition(message.text," ",2)+1);

	if (oggetto == "Crea"){
		return;
	}

	if (!checkSpam(message)){
		return;
	}

	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		cercaTermine(message, oggetto, player_id);
	});
});

function cercaTermine(message, param, player_id){

	var search = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Cerca Ancora"],["Torna al menu"]]
		}
	};
	var now = new Date();
	var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

	connection.query('INSERT INTO search_history (player_id, term, time) VALUES (' + player_id + ',"' + param + '","' + long_date + '")', function(err, rows, fields) {
		if (err) throw err;
	});

	connection.query('SELECT id, term FROM search_history WHERE player_id = ' + player_id + ' ORDER BY id DESC LIMIT 2', function(err, rows, fields) {
		if (err) throw err;

		var prev = 0;
		var prevtxt = "";
		if (Object.keys(rows).length == 2){
			prevtxt = "Torna a " + rows[1].term;
			prev = 1;
		}

		connection.query('SELECT exp, weapon_id, weapon2_id, weapon3_id, charm_id FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var lev = Math.floor(rows[0].exp/10);

			var weapon1 = rows[0].weapon_id;
			var weapon2 = rows[0].weapon2_id;
			var weapon3 = rows[0].weapon3_id;
			var weapon4 = rows[0].charm_id;

			param = param.trim();

			var rarity = ["C","NC","R","UR","L","E","S","D","UE","U","X","IN"];
			var check = rarity.indexOf(param.split(" ")[0]);

			//console.log(check, param);

			if ((Object.keys(param).length <= 4) && (check != -1)){
				if (param.startsWith(rarity[check])){
					var craftable = -1;
					var extra = "";
					var extra_txt = "";
					if (param.indexOf(" ") != -1){
						craftable = param.substring(Object.keys(param).length-1, Object.keys(param).length);
						extra = " AND craftable = " + craftable;
						if (craftable == 1){
							extra_txt = " creabili";
						}else{
							extra_txt = " base"
						}
						param = param.slice(0, -2);
					}

					connection.query('SELECT name, rarity FROM item WHERE rarity = "' + param + '"' + extra + ' ORDER BY name', function(err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length > 0){
							var bottext = "Risultati per rarit√† '" + param + "'" + extra_txt + ":\n";
							var iKeys = [];
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								bottext = bottext + rows[i].name + " (" + rows[0].rarity + ")\n";
								iKeys.push(["Cerca " + rows[i].name]);
							}

							iKeys.push(["Torna a Crea"]);				
							iKeys.push(["Cerca Ancora"]);
							if (prev == 1){
								iKeys.push([prevtxt]);
							}
							iKeys.push(["Torna al menu"]);

							var kb2 = {
								parse_mode: "Markdown",
								reply_markup: {
									resize_keyboard: true,
									//one_time_keyboard: true,
									"keyboard": iKeys
								}
							};

							bot.sendMessage(message.chat.id, bottext, kb2);
						}else{
							bot.sendMessage(message.chat.id, "Non ci sono oggetti" + extra_txt + " con quel livello di rarit√†.", search);
						}
					});
					return;
				}
			}

			if (param == "Armi"){
				connection.query('SELECT name, rarity, power FROM item WHERE power > 0 ORDER BY name', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].name.indexOf("Necrolama") != -1){
								rows[i].power = Math.round(50+(lev/2));
							}
							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")   +" + rows[i].power + "\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Torna a Crea"]);				
						iKeys.push(["Cerca Ancora"]);
						if (prev == 1){
							iKeys.push([prevtxt]);
						}
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}
			if (param == "Armature"){
				connection.query('SELECT name, rarity, power_armor FROM item WHERE power_armor < 0 ORDER BY name', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].name.indexOf("Corazza Necro") != -1){
								rows[i].power_armor = Math.round(25+(lev/2));
								rows[i].power_armor = -Math.abs(rows[i].power_armor);
							}

							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")   " + rows[i].power_armor + "\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Torna a Crea"]);				
						iKeys.push(["Cerca Ancora"]);
						if (prev == 1){
							iKeys.push([prevtxt]);
						}
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}
			if (param == "Scudi"){
				connection.query('SELECT name, rarity, power_shield FROM item WHERE power_shield < 0 ORDER BY name', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].name.indexOf("Scudo Necro") != -1){
								rows[i].power_shield = Math.round(20+(lev/2));
								rows[i].power_shield = -Math.abs(rows[i].power_shield);
							}

							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")   " + rows[i].power_shield + "\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Torna a Crea"]);				
						iKeys.push(["Cerca Ancora"]);
						if (prev == 1){
							iKeys.push([prevtxt]);
						}
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}
			if (param == "Drago"){
				connection.query('SELECT name, rarity FROM item WHERE dragon_power <> 0 OR item.rarity = "D" OR (rarity = "UE" AND name LIKE "Stemma%") OR name = "Scaglia Evolutiva" ORDER BY name', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							bottext = bottext + rows[i].name  + " (" + rows[i].rarity + ")\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Torna a Crea"]);				
						iKeys.push(["Cerca Ancora"]);
						if (prev == 1){
							iKeys.push([prevtxt]);
						}
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}

			if (param == "Talismani"){
				connection.query('SELECT name, rarity FROM item WHERE name LIKE "Talismano%" ORDER BY name', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							bottext = bottext + rows[i].name  + " (" + rows[i].rarity + ")\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Torna a Crea"]);				
						iKeys.push(["Cerca Ancora"]);
						if (prev == 1){
							iKeys.push([prevtxt]);
						}
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);
					}
				});
				return;
			}

			if (param == "Consumabili"){
				connection.query('SELECT name, rarity FROM item WHERE category IN (1,4) ORDER BY name', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Torna a Crea"]);				
						iKeys.push(["Cerca Ancora"]);
						if (prev == 1){
							iKeys.push([prevtxt]);
						}
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);					
					}
				});
				return;
			}

			if (param == "Rifugio"){
				connection.query('SELECT name, rarity FROM item WHERE category IN (5) ORDER BY name', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var bottext = "Risultati per categoria '" + param + "':\n";
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							bottext = bottext + rows[i].name + " (" + rows[i].rarity + ")\n";
							iKeys.push(["Cerca " + rows[i].name]);
						}

						iKeys.push(["Torna a Crea"]);				
						iKeys.push(["Cerca Ancora"]);
						if (prev == 1){
							iKeys.push([prevtxt]);
						}
						iKeys.push(["Torna al menu"]);

						var kb2 = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, bottext, kb2);					
					}
				});
				return;
			}

			var query = 'LIKE "%' + param + '%"';
			if (param.indexOf("*") != -1){
				param = param.replace("*", "");
				query = ' = "' + param + '"';
			}

			connection.query('SELECT * FROM item WHERE name ' + query, function(err, rows, fields) {
				if (err) throw err;
				var result = 0;

				var bottext = "Risultati per '" + param + "':\n";
				if (Object.keys(rows).length > 0){
					var iKeys = [];

					var key = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": iKeys
						}
					};

					var itemsArr = [];
					var j = 0;
					var found = 0;
					var name = "";

					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {

						name = rows[i].name;
						//console.log("Name: " + name);

						if (name != ""){
							if (len == 1){
								bottext = bottext + "\n_" + name + "_\n";
							}else{
								bottext = bottext + name + " (" + rows[i].rarity + ")\n";
							}

							j = 0;
							found = 0;

							itemsArr.push([name.toLowerCase()]);

							while (j < Object.keys(itemsArr).length){
								if (found == 0){
									if (itemsArr[j].indexOf(param.toLowerCase()) > -1){
										found = 1;
									}else{
										found = 0;
									}
								}
								j++;
							}

							if (found == 0){
								iKeys.push(["Cerca " + name]);
							}else if (found == 1){
								iKeys.push(["Cerca *" + name]);
							}
						}
					}

					iKeys.push(["Cerca Ancora"]);
					iKeys.push(["Torna a Crea"]);				
					if (prev == 1){
						iKeys.push([prevtxt]);
					}
					iKeys.push(["Torna al menu"]);

					if (Object.keys(rows).length == 1){

						if (rows[0].searchable == 0){
							bot.sendMessage(message.chat.id, "Le informazioni su questo oggetto sono nascoste üëÄ ", search);
							return;
						}

						setAchievement(message.chat.id, player_id, 22, 1);

						var name = rows[0].name;
						var power = 0;
						var crit = rows[0].critical;
						var rarity = rows[0].rarity;
						var level_nec = 0;
						var item_id = rows[0].id;

						if (rows[0].power != 0){
							if (crit > 0){
								power = rows[0].power + " (Arma), Probab. x2: " + crit + "%";
							}else{
								power = rows[0].power + " (Arma)";
							}
						}else if (rows[0].power_armor != 0){
							if (crit > 0){
								power = rows[0].power_armor + " (Armatura), Probab. /2: " + crit + "%";
							}else{
								power = rows[0].power_armor + " (Armatura)";
							}
						}else if (rows[0].power_sheld != 0){
							if (crit > 0){
								power = rows[0].power_shield + " (Scudo), Probab. annull: " + crit + "%";
							}else{
								power = rows[0].power_shield + " (Scudo)";
							}
						}
						if (rarity == "UR"){
							level_nec = "15";
						}else if (rarity == "L"){
							level_nec = "30";
						}else if (rarity == "E"){
							level_nec = "50";
						}else if (rarity == "UE"){
							level_nec = "60";
						}

						var price = rows[0].value;
						var dragon_power = rows[0].dragon_power;
						var reborn = rows[0].reborn;
						var category = rows[0].category;
						var est = rows[0].estimate;
						var consumable = rows[0].cons;
						var sellable = rows[0].allow_sell;
						var craft_pnt = rows[0].pnt_sum;
						var reload_est = rows[0].reload_est;

						var cons = "No";
						var cons_pnt = "";
						if (consumable == 1){
							cons = "Si";
							if (rows[0].id == 92){
								cons_pnt = " - Vita: 5%";
							}else if (rows[0].id == 93){
								cons_pnt = " - Vita: 10%";
							}else if (rows[0].id == 94){
								cons_pnt = " - Vita: 20%";
							}

							if (rows[0].id == 7){
								cons_pnt = " - Danno: 100-300";
							}else if (rows[0].id == 17){
								cons_pnt = " - Danno: 500";
							}else if (rows[0].id == 95){
								cons_pnt = " - Danno: 600";
							}else if (rows[0].id == 38){
								cons_pnt = " - Danno: 3000-7000";
							}else if (rows[0].id == 106){
								cons_pnt = " - Danno: 900-1000";						
							}else if (rows[0].id == 107){
								cons_pnt = " - Danno: 3500-4000";
							}else if (rows[0].id == 108){
								cons_pnt = " - Danno: 7000-8000";
							}
						}

						if (category == 2){
							tal = "*Potere Talismano*: " + rows[0].description;
						}

						var desc = "";
						if (rows[0].description != null){
							if ((category == 3) || (category == 2)){
								desc = "*Potere Oggetto*: " + rows[0].description;
							}else{
								desc = "*Descrizione*: " + rows[0].description;							
							}
						}

						stars = "Nessuna";
						if (reborn >= 2){
							stars = rebSym(reborn);
						}

						var extra = "";

						if ((rows[0].power != 0) || (rows[0].power_armor != 0) || (rows[0].power_shield)){
							if (name.indexOf("Necrolama") != -1){
								power = Math.round(50+(lev/2));
								extra = ", Probab. x2: " + crit + "%";
							}else if (name.indexOf("Corazza Necro") != -1){
								power = Math.round(25+(lev/2));
								power = -Math.abs(power);
								extra = ", Probab. /2: " + crit + "%";
							}else if (name.indexOf("Scudo Necro") != -1){
								power = Math.round(20+(lev/2));
								power = -Math.abs(power);
								extra = ", Probab. annull: " + crit + "%";							
							}
							bottext += "\n*Giocatore*: " + power + extra;
							if ((level_nec != 0) && (reborn == 1)){
								bottext += "\n*Livello richiesto*: " + level_nec;
							}
						}
						bottext += "\n*Rinascita richiesta*: " + stars;
						if (dragon_power != 0){
							bottext += "\n*Drago*: " + dragon_power;
						}
						bottext += "\n*Rarit√†*: " + rarity + " (" + formatNumber(price) + " ¬ß, al negozio: " + formatNumber(Math.round(price/2)) + " ¬ß)";
						bottext += "\n*Consumabile*: " + cons + cons_pnt;
						bottext += "\n*Punti creazione*: " + craft_pnt;

						if (reload_est >= 50){
							connection.query('SELECT DISTINCT(from_id), price FROM market_direct_history WHERE time BETWEEN date_sub(NOW(),INTERVAL 1 WEEK) AND NOW() AND price != (SELECT value FROM item WHERE id = ' + item_id + ') AND item_id = ' + item_id, function (err, rows, fields){
								if (err) throw err;
								var price = 0;
								var arr = [];
								if (Object.keys(rows).length > 0){
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										arr.push(rows[i].price);
									}
									price = estimate(arr);
									connection.query('UPDATE item SET estimate = ' + price + ' WHERE id = ' + item_id, function(err, rows, fields) {
										if (err) throw err;
									});
								}
							});
							connection.query('UPDATE item SET reload_est = 0 WHERE id = ' + item_id, function(err, rows, fields) {
								if (err) throw err;
							});
						}else{
							connection.query('UPDATE item SET reload_est = reload_est+1 WHERE id = ' + item_id, function(err, rows, fields) {
								if (err) throw err;
							});
						}

						connection.query('SELECT COUNT(*) As num FROM inventory WHERE item_id = ' + item_id + ' AND player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							var poss = rows[0].num;

							connection.query('SELECT (SELECT COUNT(*) FROM player) As player, COUNT(DISTINCT(player_id)) As cnt FROM inventory WHERE item_id = ' + item_id, function(err, rows, fields) {
								if (err) throw err;

								bottext += "\n*Posseduti*: " + poss + " (" + Math.round((rows[0].cnt/rows[0].player)*100) + "%)";
								if ((desc != "") && (desc != null)){
									bottext += "\n" + desc;
								}
								if (sellable == 0){
									bottext += "\nNon pu√≤ essere venduto o scambiato con i giocatori";
								}
								//bottext += "\n";

								connection.query('SELECT material_result FROM craft, item WHERE craft.material_result = item.id AND item.name = "' + name + '"', function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										connection.query('SELECT id FROM item WHERE  item.name="' + name + '"', function(err, rows, fields) {
											if (err) throw err;
											result = rows[0].id;
											connection.query('SELECT craft.*, item.name, item.rarity FROM `craft`, item where material_result = item.id AND ((material_1 = ' + result + ' AND material_2 = ' + result + ' AND material_3 = ' + result + ') OR (material_1 = ' + result + ' AND material_2 = ' + result + ') OR (material_1 = ' + result + ' AND material_3 = ' + result + ') OR (material_2 = ' + result + ' AND material_3 = ' + result + ') OR material_1 = ' + result + ' OR material_2 = ' + result + ' OR material_3 = ' + result + ')', function(err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length > 0){
													bottext = bottext + "\n\nCon questo oggetto puoi creare:\n";

													var iKeys2 = [];

													var kb2 = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": iKeys2
														}
													};

													for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
														if (rows[i].name != ""){
															bottext = bottext + "> " + rows[i].name + " (" + rows[i].rarity + ")\n";
															if (rows[i].name.indexOf(" ") != -1){
																iKeys2.push(["Cerca " + rows[i].name]);
															}else{
																iKeys2.push(["Cerca *" + rows[i].name]);
															}
														}
													}

													iKeys2.push(["Cerca Ancora"]);
													iKeys2.push(["Torna a Crea"]);				
													if (prev == 1){
														iKeys2.push([prevtxt]);
													}
													iKeys2.push(["Torna al menu"]);

													bot.sendMessage(message.chat.id, bottext, kb2);
												}else{
													bot.sendMessage(message.chat.id, bottext, search);
												}
											});
										});
										return;
									}
									result = rows[0].material_result;

									connection.query('SELECT claws_id, saddle_id FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										var claws_id = 999;
										var saddle_id = 999;

										if (Object.keys(rows).length > 0){
											claws_id = rows[0].claws_id;
											saddle_id = rows[0].saddle_id;
										}

										var mat1 = "";
										var mat1id = "";
										var mat1p = "";
										var mat1r = "";
										var mat1q = "";
										var mat1ex = "";

										var mat2 = "";
										var mat2id = "";
										var mat2p = "";
										var mat2r = "";
										var mat2q = "";
										var mat2ex = "";

										var mat3 = "";
										var mat3id = "";
										var mat3p = "";
										var mat3r = "";
										var mat3q = "";
										var mat3ex = "";

										var mat4 = "";
										var mat4id = "";
										var mat4p = "";
										var mat4r = "";
										var mat4q = "";
										var mat4ex = "";

										connection.query('SELECT item.id, item.name, item.craftable, item.rarity FROM craft, item WHERE craft.material_1 = item.id AND craft.material_result=' + result, function(err, rows, fields) {
											if (err) throw err;
											mat1 = rows[0].name;
											if (rows[0].craftable == 1){
												mat1p = rows[0].name;
											}else{
												mat1p = "*" + rows[0].name + "*";
											}
											mat1id = rows[0].id;
											mat1r = rows[0].rarity;
											connection.query('SELECT item.id, item.name, item.craftable, item.rarity FROM craft, item WHERE craft.material_2 = item.id AND craft.material_result=' + result, function(err, rows, fields) {
												if (err) throw err;
												mat2 = rows[0].name;
												if (rows[0].craftable == 1){
													mat2p = rows[0].name;
												}else{
													mat2p = "*" + rows[0].name + "*";
												}
												mat2id = rows[0].id;
												mat2r = rows[0].rarity;
												connection.query('SELECT item.id, item.name, item.craftable, item.rarity FROM craft, item WHERE craft.material_3 = item.id AND craft.material_result=' + result, function(err, rows, fields) {
													if (err) throw err;
													mat3 = rows[0].name;
													if (rows[0].craftable == 1){
														mat3p = rows[0].name;
													}else{
														mat3p = "*" + rows[0].name + "*";
													}
													mat3id = rows[0].id;
													mat3r = rows[0].rarity;
													connection.query('SELECT COUNT(*) As num FROM item, inventory WHERE item.id = inventory.item_id AND item.name = "' + mat1 + '" AND inventory.player_id=' + player_id, function(err, rows, fields) {
														if (err) throw err;
														if (rows[0].num > 0){
															mat1ex = "‚òëÔ∏è ";
														}else if ((mat1id == weapon1) || (mat1id == weapon2) || (mat1id == weapon3) || (mat1id == weapon4)){
															mat1ex = "üó°";
														}else if ((mat1id == claws_id) || (mat1id == saddle_id)){
															mat1ex = "üêâ";
														}	
														mat1q = rows[0].num;
														connection.query('SELECT COUNT(*) As num FROM item, inventory WHERE item.id = inventory.item_id AND item.name = "' + mat2 + '" AND inventory.player_id=' + player_id, function(err, rows, fields) {
															if (err) throw err;
															if (rows[0].num > 0){
																mat2ex = "‚òëÔ∏è ";
															}else if ((mat2id == weapon1) || (mat2id == weapon2) || (mat2id == weapon3) || (mat2id == weapon4)){
																mat2ex = "üó°";
															}else if ((mat2id == claws_id) || (mat2id == saddle_id)){
																mat2ex = "üêâ";
															}	
															mat2q = rows[0].num;
															connection.query('SELECT COUNT(*) As num FROM item, inventory WHERE item.id = inventory.item_id AND item.name = "' + mat3 + '" AND inventory.player_id=' + player_id, function(err, rows, fields) {
																if (err) throw err;
																if (rows[0].num > 0){
																	mat3ex = "‚òëÔ∏è ";
																}else if ((mat3id == weapon1) || (mat3id == weapon2) || (mat3id == weapon3) || (mat3id == weapon4)){
																	mat3ex = "üó°";
																}else if ((mat3id == claws_id) || (mat3id == saddle_id)){
																	mat3ex = "üêâ";
																}	
																mat3q = rows[0].num;

																bottext = bottext + "\n\nMateriali necessari:\n> " + mat1p + " (" + mat1r + ", " + mat1q + ") " + mat1ex + "\n> " + mat2p + " (" + mat2r + ", " + mat2q + ") " + mat2ex + "\n> " + mat3p + " (" + mat3r + ", " + mat3q + ") " + mat3ex;

																connection.query('SELECT craft.*, item.name, item.rarity FROM `craft`, item where material_result = item.id AND ((material_1 = ' + result + ' AND material_2 = ' + result + ' AND material_3 = ' + result + ') OR (material_1 = ' + result + ' AND material_2 = ' + result + ') OR (material_1 = ' + result + ' AND material_3 = ' + result + ') OR (material_2 = ' + result + ' AND material_3 = ' + result + ') OR material_1 = ' + result + ' OR material_2 = ' + result + ' OR material_3 = ' + result + ')', function(err, rows, fields) {
																	if (err) throw err;

																	var iKeys3 = [];

																	iKeys3.push(["Crea " + name]);

																	if (mat1.indexOf(" ") != -1){
																		iKeys3.push(["Cerca " + mat1]);
																	}else{
																		iKeys3.push(["Cerca *" + mat1]);
																	}
																	if (mat2.indexOf(" ") != -1){
																		iKeys3.push(["Cerca " + mat2]);
																	}else{
																		iKeys3.push(["Cerca *" + mat2]);
																	}
																	if (mat3.indexOf(" ") != -1){
																		iKeys3.push(["Cerca " + mat3]);
																	}else{
																		iKeys3.push(["Cerca *" + mat3]);
																	}

																	var kb = {
																		parse_mode: "Markdown",
																		reply_markup: {
																			resize_keyboard: true,
																			//one_time_keyboard: true,
																			"keyboard": iKeys3
																		}
																	};

																	if (Object.keys(rows).length > 0){
																		bottext = bottext + "\n\nCon questo oggetto puoi creare:\n";
																		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
																			bottext = bottext + "> " + rows[i].name + " (" + rows[i].rarity + ")\n";
																			if (rows[i].name.indexOf(" ") != -1){
																				iKeys3.push(["Cerca " + rows[i].name]);
																			}else{
																				iKeys3.push(["Cerca *" + rows[i].name]);
																			}
																		}

																		iKeys3.push(["Cerca Ancora"]);
																		iKeys3.push(["Torna a Crea"]);
																		if (prev == 1){
																			iKeys3.push([prevtxt]);
																		}
																		iKeys3.push(["Torna al menu"]);
																		bot.sendMessage(message.chat.id, bottext, kb);
																	}else{
																		iKeys3.push(["Cerca Ancora"]);
																		iKeys3.push(["Torna a Crea"]);				
																		if (prev == 1){
																			iKeys3.push([prevtxt]);
																		}
																		iKeys3.push(["Torna al menu"]);
																		bot.sendMessage(message.chat.id, bottext, kb);
																	}
																});
															});
														});
													});
												});
											});
										});
									});
								});
							});
						});
					}else{
						if (Object.keys(bottext).length > 4000){
							bottext = "La ricerca ha prodotto troppi risultati, prova a restringere il campo";
							bot.sendMessage(message.chat.id, bottext, search);
						}else{
							bot.sendMessage(message.chat.id, bottext, key);
						}
					}
				}else{
					bot.sendMessage(message.chat.id, "Nessun risultato, riprova con una parola chiave diversa. Se cerchi il nome preciso dell\'oggetto visualizzerai anche gli oggetti necessari per crearlo.", search);
				}
			});
		});
	});
}

bot.onText(/lista ricerche/i, function(message) {
	connection.query('SELECT id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		connection.query('SELECT term FROM search_history WHERE player_id = ' + player_id + ' ORDER BY id DESC LIMIT 100', function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length > 0){
				var iKeys = [];
				for (var i = 0, len = Object.keys(rows).length-1; i < len; i++) {
					iKeys.push(["Cerca " + rows[i].term]);
				}
				iKeys.push(["Torna al menu"]);

				var kb = {
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": iKeys
					}
				};

				bot.sendMessage(message.chat.id, "Seleziona la ricerca precedente", kb);
			}else{
				bot.sendMessage(message.chat.id, "Nessuna cronologia presente", back);
			}
		});
	});
});

function cerca(message){
	connection.query('SELECT id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var iKeys = [["Cerca Armi"],["Cerca Armature","Cerca Scudi"],["Cerca Talismani","Cerca Drago"],["Cerca Consumabili","Cerca Rifugio"],["Cerca C","Cerca NC"],["Cerca R","Cerca UR"],["Cerca L","Cerca E"],["Cerca UE","Cerca S"],["Cerca U","Cerca X"],["Cerca D","Lista Ricerche"],["Torna al menu"]];

		var kb = {
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": iKeys
			}
		};

		bot.sendMessage(message.chat.id, "Cosa vuoi cercare?\nPuoi cercare per rarit√† o categoria o scrivere Cerca NomeOggetto da qualsiasi schermata del bot. Per forzare la ricerca di un oggetto preciso scrivi Cerca *NomeOggetto", kb);
	});
};

bot.onText(/alchimia/i, function(message) {

	var alchemy = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			//"keyboard": [['Sintesi ‚ú®', 'Crea üì¶'],['Incanta üíé ','Scomponi üíé '],['Utilizza Polvere üå™','Trasmogrificazione üåÄ'],['Torna allo zaino'],['Torna al menu']]
			"keyboard": [['Sintesi ‚ú®'],['Incanta üíé ','Scomponi üíé '],['Utilizza Polvere üå™','Trasmogrificazione üåÄ'],['Torna allo zaino'],['Torna al menu']]
		}		
	}

	bot.sendMessage(message.chat.id, "Quale operazione vuoi effettuare?", alchemy);
});

bot.onText(/genera scaglia evolutiva/i, function(message){
	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		if (reborn < 4){
			bot.sendMessage(message.chat.id, "Devi essere almeno Rinascita 3 per creare questo oggetto", alchemy);
			return;
		}

		var gYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Torna all'alchimia"],['Torna al menu']]
			}		
		}

		var alchemy = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna all'alchimia"],['Torna al generatore'],['Torna al menu']]
			}		
		}

		bot.sendMessage(message.chat.id, "Per creare questo particolare oggetto, *estremamente raro* ti servir√†:\n> 1000 Polvere\n> 7500 Mana per tipo\nProcedi?", gYesNo).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){									
					connection.query('SELECT COUNT(id) As qnt FROM inventory WHERE item_id = 646 AND player_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;

						if (rows[0].qnt < 1000){
							bot.sendMessage(message.chat.id, "Non hai abbastanza Polvere", alchemy);
							return;
						}
						connection.query('SELECT mana_1, mana_2, mana_3 FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							if ((rows[0].mana_1 < 7500) || (rows[0].mana_2 < 7500) || (rows[0].mana_3 < 7500)){
								bot.sendMessage(message.chat.id, "Non hai abbastanza Mana", alchemy);
								return;
							}

							connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 646 LIMIT 1000', function(err, rows, fields) {
								if (err) throw err;
								connection.query('UPDATE event_mana_status SET mana_1 = mana_1 - 7500, mana_2 = mana_2 - 7500, mana_3 = mana_3 - 7500 WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ', 649)', function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Dalle Polveri e dal potere Magico, si innalza un oggetto curioso: √® una *Scaglia Evolutiva*!", alchemy);
									});
								});
							});
						});	
					});
				}
			}
		});
	});
});

bot.onText(/utilizza polvere/i, function(message) {
	connection.query('SELECT id, class, reborn, holiday, account_id, travel_id, cave_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = rows[0].account_id.toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		var player_id = rows[0].id;
		var class_id = rows[0].class;
		var reborn = rows[0].reborn;

		var alchemy = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna all'alchimia"],['Torna al generatore'],['Torna al menu']]
			}		
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Genera Oggetto"],['Genera Scaglia Evolutiva'],["Torna all'alchimia"],['Torna al menu']]
			}		
		}

		var gYesNo = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Torna al Generatore di Polvere"]]
			}
		};

		connection.query('SELECT COUNT(id) As qnt FROM inventory WHERE item_id = 646 AND player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var dust = rows[0].qnt;

			bot.sendMessage(message.chat.id, "Cosa vuoi fare con la polvere? Ne possiedi *" + dust + "* unit√†", kb).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {

					if (answer.text == "Genera Oggetto"){
						connection.query('SELECT COUNT(id) As qnt FROM inventory WHERE item_id = 646 AND player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							if (rows[0].qnt == 0){
								bot.sendMessage(message.chat.id, "Non hai Polvere da utilizzare", alchemy);
								return;
							}

							var rar1 = 40;
							var rar2 = 60;
							var rar3 = 80;
							var rar4 = 100;

							bot.sendMessage(message.chat.id, "Puoi creare un oggetto utilizzando la Polvere (ad esclusione degli equipaggiamenti):\n" +
											"Raro -> " + rar1 + "\n" +
											"Ultra Raro -> " + rar2 + "\n" +
											"Leggendario -> " + rar3 + "\n" +
											"Epico -> " + rar4 + "\n" +
											"Se l'oggetto √® craftato, richieder√† il *doppio* della polvere + una quantit√† dipendente dal valore\n\n" +
											"Inserisci il nome dell'oggetto, al momento c'√® una piccolissima probabilit√† di fallimento nella creazione.", alchemy).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text.indexOf("Torna al") != -1){
										return;
									}
									connection.query('SELECT id, estimate, craftable, rarity, name FROM item WHERE rarity IN ("R","UR","L","E") AND power = 0 AND power_shield = 0 AND power_armor = 0 AND dragon_power = 0 AND name = "' + answer.text + '"', function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "L'oggetto non esiste o la rarit√† non √® consentita", alchemy);
											return;
										}
										var itemId = rows[0].id;
										var itemName = rows[0].name;
										var rarity = rows[0].rarity;
										var craft = rows[0].craftable;
										var estimate = rows[0].estimate;

										var nec = 0;

										if (rarity == "R"){
											nec = rar1;
										}else if (rarity == "UR"){
											nec = rar2;
										}else if (rarity == "L"){
											nec = rar3;
										}else if (rarity == "E"){
											nec = rar4;
										}
										if (craft == 1){
											nec = nec*2;
											nec += Math.round(estimate/10000);
										}

										bot.sendMessage(message.chat.id, "Sicuro di voler generare l'oggetto *" + itemName + "* (" + rarity + ")?\nTi coster√† *" + nec + "* unit√† di Polvere", gYesNo).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {
												if (answer.text.toLowerCase() == "si"){
													connection.query('SELECT COUNT(id) As qnt FROM inventory WHERE item_id = 646 AND player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;

														if (rows[0].qnt < nec){
															bot.sendMessage(message.chat.id, "Non hai abbastanza Polvere per generare questo oggetto, " + rows[0].qnt + "/" + nec, alchemy);
															return;
														}

														var rand = Math.random()*100;

														if (rand > 5){
															connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 646 LIMIT ' + nec, function(err, rows, fields) {
																if (err) throw err;
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + itemId + ')', function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "L'oggetto " + itemName + " (" + rarity + ") √® stato generato con successo!", alchemy);
																});
															});
															//console.log("Oggetto generato: " + itemName + " per " + message.from.username);
															setAchievement(message.chat.id, player_id, 48, 1);
														}else{
															connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 646 LIMIT ' + nec, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Dannazione! La generazione √® fallita e hai perso la polvere necessaria, che sfortuna!", alchemy);
															});
															//console.log("Oggetto generato fallito per " + message.from.username);
														}
													});
												};
											};
										});
									});
								}
							});
						});
					}
				}
			});
		});
	});
});

bot.onText(/filtro/i, function(message) {
	var backpackFilter = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [['Solo Base','Solo Creati'],['Solo C','Solo NC','Solo R'],['Solo UR','Solo L','Solo E'],['Solo UE','Solo U','Solo S'],['Solo I','Solo D'],['Torna allo zaino']]
		}
	};

	bot.sendMessage(message.chat.id, "Seleziona il filtro per visualizzare solo una parte dello zaino", backpackFilter);
});

bot.onText(/cambia visualizzazione/i, function(message) {

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna allo Zaino"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, bag_min FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		if (rows[0].bag_min == 0){
			connection.query('UPDATE player SET bag_min = 1 WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione _riassunta_ dello zaino", kb);
			});
		}else{
			connection.query('UPDATE player SET bag_min = 0 WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione _estesa_ dello zaino", kb);
			});
		}
	});
});

bot.onText(/Bacheca IN/i, function(message) {
	connection.query('SELECT id, global_event FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var pnt = rows[0].global_event;
		var text = "";

		var backPack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna allo Zaino"],["Torna al menu"]]
			}
		};

		connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, COUNT(item.name) As num FROM `inventory`, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND rarity = "IN" GROUP BY item.name ORDER BY rarity.id DESC, item.name ASC', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				text = "*" + rows[0].rname + "*:\n\n";

				for (i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (rows[i].craftable == 0){
						rows[i].name = "*" + rows[i].name + "*";
					}
					text = text + "> " + rows[i].name + " (" + rows[i].num + ")\n";
				}
			}else{
				text += "Nessun oggetto inestimabile disponibile\n";
			}

			text += "\nPunti Imprese Globali con alta partecipazione: " + pnt + " / 5";

			bot.sendMessage(message.chat.id, text + "\nQuesti oggetti sono unici e vengono ottenuti solamente al termine delle imprese globali!", backPack);
		});
	});
});

bot.onText(/zaino/i, function(message) {

	if (message.text.indexOf("zeppo") != -1){
		return;
	}

	var backpack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [['Filtro','Pozioni','Cerca üîé'],["Bacheca IN"],['Equipaggia','Set','Rimuovi'],['Cambia Visualizzazione'],['Torna al menu']]
		}
	};

	var backpackB = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna allo Zaino"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday, total_life, life, account_id, bag_min FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Account non trovato, contatta @fenix45 per segnalare");
			return;
		}

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var bottext = message.from.username + ", ecco il contenuto del tuo zaino:\n\n";
		var player_total_life = rows[0].total_life;
		var player_life = rows[0].life;
		var bag_min = rows[0].bag_min;


		connection.query('SELECT chest.name As name, COUNT(chest.name) As num FROM inventory_chest, chest WHERE player_id=' + player_id + ' AND chest.id = inventory_chest.chest_id GROUP BY chest.name ORDER BY chest.id', function(err, rows, fields) {
			if (err) throw err;
			bottext = bottext + "<b>Scrigni:</b>\n";
			if (Object.keys(rows).length > 0){
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					bottext = bottext + "> " + rows[i].name + " (" + rows[i].num + ")\n";
				}
			}else{
				bottext = bottext + "Nessuno scrigno disponibile\n";
			}

			bottext = bottext + "\n";

			connection.query('SELECT type, power, quantity FROM magic WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0){
					bottext = bottext + "<b>Incantesimi:</b>\n";
					var n = "";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].type == 1){
							n = "Furia dei Mari";
						}else if (rows[i].type == 2){
							n = "Tempesta Folgorante";
						}else if (rows[i].type == 3){
							n = "Impeto di Fiamme";
						}else if (rows[i].type == 4){
							n = "Ira Astrale";
						}
						bottext = bottext + "> " + n + " " + rows[i].power + " (" + rows[i].quantity + ")\n";
					}
					bottext = bottext + "\n";
				}

				connection.query('SELECT inventory.player_id, item.craftable, item.name, rarity.id, rarity.name As rname, COUNT(item.name) As num FROM `inventory`, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND rarity.shortname != "IN" GROUP BY item.name ORDER BY rarity.id DESC, item.name ASC', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){

						var i = 0;
						var raritypre = rows[0].id;

						if (bag_min == 0){
							bottext = bottext + "<b>" + rows[0].rname + "</b>:\n";
							for (i = 0, len = Object.keys(rows).length; i < len; i++) {

								if (rows[i].id != raritypre){
									bottext = bottext + "\n<b>" + rows[i].rname + "</b>:\n";
								}
								if (rows[i].craftable == 0){
									rows[i].name = "<b>" + rows[i].name + "</b>";
								}
								bottext = bottext + "> " + rows[i].name + " (" + rows[i].num + ")\n";
								raritypre = rows[i].id;
							}
						}else{
							var raritycnt = 0;
							bottext = bottext + "<b>" + rows[0].rname + "</b>: ";
							for (i = 0, len = Object.keys(rows).length; i < len; i++) {

								if (rows[i].id != raritypre){
									bottext += raritycnt + "\n<b>" + rows[i].rname + "</b>: ";
									raritycnt = 0;
								}

								raritycnt += rows[i].num;
								raritypre = rows[i].id;
							}
							bottext += raritycnt;
						}
					}else{
						bottext = bottext + "Nessun oggetto disponibile\n";
					}

					var max = 3000;

					if (Object.keys(bottext).length > max){
						var arr = bottext.split("\n");
						var text = "";
						for (var i = 0, len = Object.keys(arr).length; i < len; i++) {
							text += arr[i] + "\n";
							if ((Object.keys(text).length+Object.keys(arr[i]).length) >= max){
								bot.sendMessage(message.chat.id, text, backpack);
								text = "";
							}
						}
						if (text != ""){
							setTimeout(function() {
								bot.sendMessage(message.chat.id, text, backpack);
								setTimeout(function() {
									bot.sendMessage(message.chat.id, "Questo √® il contenuto del tuo zaino, le voci in grassetto rappresentano gli oggetti <b>base</b>, tutti gli altri gli oggetti creati. Puoi filtrarlo scrivendo 'Solo C' con la rarit√† desiderata.", backpack);
								}, 600);
							}, 300);
						}
					}else{
						bot.sendMessage(message.chat.id, bottext, backpack);
					}
				});
			});
		});
	});
});

bot.onText(/^set$|torna ai set|^Imposta (.+)/i, function(message) {

	//	if ((message.from.username != "Gaius87") && (message.from.username != "fenix45")){
	//		bot.sendMessage(message.chat.id, "A breve", back);
	//		return;
	//	}

	if (message.text == "Nuovo Set"){
		return;
	}

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var setBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna ai set"],["Torna al menu"]]
			}
		};

		var setYesno = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Elimina"],["Torna ai set"],["Torna al menu"]]
			}
		};

		var setYesNo2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Si"],["Torna ai set"],["Torna al menu"]]
			}
		};

		if (message.text.toLowerCase().indexOf("imposta") != -1){

			if (message.text.indexOf("(") != -1){
				message.text = message.text.substring(0, message.text.indexOf("("));
			}

			var reg = /Imposta (.+)/i;
			var found = message.text.match(reg);
			var set = found[1];

			connection.query('SELECT id FROM set_list WHERE name = "' + set + '" AND player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Set non valido", setBack);
					return;
				}

				var setId = rows[0].id;

				connection.query('SELECT S.id, S.name, I1.name As weapon, I1.id As wId, I1.power As power1, I1.critical As crit1, I2.name As armor, I2.id As aId, I2.power_armor As power2, I2.critical As crit2, I3.name As shield, I3.id As sId, I3.power_shield As power3, I3.critical As crit3, I4.name As charm, I4.id As cId FROM set_list S LEFT JOIN item I1 ON I1.id = S.item_weapon LEFT JOIN item I2 ON I2.id = S.item_armor LEFT JOIN item I3 ON I3.id = S.item_shield LEFT JOIN item I4 ON I4.id = S.item_charm WHERE S.id = ' + setId, function(err, rows, fields) {
					if (err) throw err;

					var setId = rows[0].id;
					var text = "Set *" + rows[0].name + "* (" + setId + ")\n\n";

					if (rows[0].weapon != null){
						text += "Arma: " + rows[0].weapon + "\n";
					}
					if (rows[0].armor != null){
						text += "Armatura: " + rows[0].armor + "\n";
					}
					if (rows[0].shield != null){
						text += "Scudo: " + rows[0].shield + "\n";
					}
					if (rows[0].charm != null){
						text += "Talismano: " + rows[0].charm + "\n";
					}

					var wName = rows[0].weapon;
					var aName = rows[0].armor;
					var sName = rows[0].shield;
					var cName = rows[0].charm;

					var wId = rows[0].wId;
					var aId = rows[0].aId;
					var sId = rows[0].sId;
					var cId = rows[0].cId;

					var pow1 = rows[0].power1;
					var pow2 = rows[0].power2;
					var pow3 = rows[0].power3;

					var crit1 = rows[0].crit1;
					var crit2 = rows[0].crit2;
					var crit3 = rows[0].crit3;

					bot.sendMessage(message.chat.id, text + "\nConfermi il set?", setYesno).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text.toLowerCase() == "si"){
								connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + wId, function(err, rows, fields) {
									if (err) throw err;
									if ((Object.keys(rows).length == 0) && (wName != null)){
										bot.sendMessage(message.chat.id, "Non possiedi " + wName, setBack);
										return;
									}
									connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + aId, function(err, rows, fields) {
										if (err) throw err;
										if ((Object.keys(rows).length == 0) && (aName != null)){
											bot.sendMessage(message.chat.id, "Non possiedi " + aName, setBack);
											return;
										}
										connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + sId, function(err, rows, fields) {
											if (err) throw err;
											if ((Object.keys(rows).length == 0) && (sName != null)){
												bot.sendMessage(message.chat.id, "Non possiedi " + sName, setBack);
												return;
											}
											connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + cId, function(err, rows, fields) {
												if (err) throw err;
												if ((Object.keys(rows).length == 0) && (cName != null)){
													bot.sendMessage(message.chat.id, "Non possiedi " + cName, setBack);
													return;
												}

												connection.query('SELECT weapon_id, weapon2_id, weapon3_id, charm_id FROM player WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													if (wId != null){
														if (rows[0].weapon_id != 0){
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].weapon_id + ')', function(err, rows, fields) {
																if (err) throw err;
															});
														}
													}
													if (aId != null){
														if (rows[0].weapon2_id != 0){
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].weapon2_id + ')', function(err, rows, fields) {
																if (err) throw err;
															});
														}
													}
													if (sId != null){
														if (rows[0].weapon3_id != 0){
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].weapon3_id + ')', function(err, rows, fields) {
																if (err) throw err;
															});
														}
													}
													if (cId != null){
														if (rows[0].charm_id != 0){
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].charm_id + ')', function(err, rows, fields) {
																if (err) throw err;
															});
														}
													}

													connection.query('SELECT weapon, weapon_id, weapon_crit, weapon2, weapon2_id, weapon2_crit, weapon3, weapon3_id, weapon3_crit, charm_id FROM player WHERE id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;

														if (wId == null){
															wId = rows[0].weapon_id;
														}else{
															connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + wId + ' LIMIT 1', function(err, rows, fields) {
																if (err) throw err;
															});
														}
														if (aId == null){
															aId = rows[0].weapon2_id;
														}else{
															connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + aId + ' LIMIT 1', function(err, rows, fields) {
																if (err) throw err;
															});
														}
														if (sId == null){
															sId = rows[0].weapon3_id;
														}else{
															connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + sId + ' LIMIT 1', function(err, rows, fields) {
																if (err) throw err;
															});
														}
														if (cId == null){
															cId = rows[0].charm_id;
														}else{
															connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + cId + ' LIMIT 1', function(err, rows, fields) {
																if (err) throw err;
															});
														}

														if (pow1 == null){
															pow1 = rows[0].weapon;
														}
														if (pow2 == null){
															pow2 = rows[0].weapon2;
														}
														if (pow3 == null){
															pow3 = rows[0].weapon3;
														}

														if (crit1 == null){
															crit1 = rows[0].weapon_crit;
														}
														if (crit2 == null){
															crit2 = rows[0].weapon2_crit;
														}
														if (crit3 == null){
															crit3 = rows[0].weapon3_crit;
														}

														connection.query('UPDATE player SET weapon_id = '+wId+', weapon = '+pow1+', weapon_crit = '+crit1+', ' +
																		 'weapon2_id = '+aId+', weapon2 = '+pow2+', weapon2_crit = '+crit2+', ' +
																		 'weapon3_id = '+sId+', weapon3 = '+pow3+', weapon3_crit = '+crit3+', ' +
																		 'charm_id = '+cId+' WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Set equipaggiato!", setBack);
														});
													});
												});
											});
										});
									});
								});
							}else if (answer.text == "Elimina"){
								bot.sendMessage(message.chat.id, "Sei sicuro di voler eliminare il set?", setYesNo2).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text.toLowerCase() == "si"){
											connection.query('DELETE FROM set_list WHERE id = ' + setId, function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Set eliminato!", setBack);
											});
										}
									};
								});
							}
						};
					});
				});
			});
			return;
		};

		connection.query('SELECT name, quantity FROM set_list WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			iKeys = [];
			if (Object.keys(rows).length > 0){
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					iKeys.push(["Imposta " + rows[i].name + " (" + rows[i].quantity + " oggetti)"]);
				}
			}
			iKeys.push(["Nuovo Set","Carica Set"]);
			iKeys.push(["Torna al menu"]);

			var setList = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": iKeys
				}
			};

			bot.sendMessage(message.chat.id, "Imposta o modifica un set di equipaggiamento", setList).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					var resp = answer.text.toLowerCase();
					if (resp == "nuovo set"){
						bot.sendMessage(message.chat.id, "Aggiungi un nuovo set utilizzando questo formato:\nNOMESET: ARMA,ARMATURA,SCUDO,TALISMANO\n" +
										"_Esempio:_ Guerriero: Spada Antimateria,Armatura Nova,Scudo Statico,Talismano Guerriero\n" +
										"Se salti un campo, verr√† mantenuto l'oggetto attuale equipaggiato\n" +
										"_Esempio:_ Contadino: Coltello a Baionetta,Protezione di Stoffa,,Talismano della Forza\n\nAttenzione: Non usare parole chiave come 'viaggio' o 'missione', o non riuscirai pi√π ad impostarlo!", setBack).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								var resp = answer.text;

								if ((resp == "Torna al menu") || (resp == "Torna ai set")){
									return;
								}

								var reg = new RegExp("([a-zA-Z0-9 ]+): *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*)");
								var reg2 = /([a-zA-Z0-9 ]+): *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*), *([a-zA-Z\- '√†√®√©√¨√≤√π]*)/i;
								if (reg.test(resp) == false){
									bot.sendMessage(message.chat.id, "Sintassi non valida, riprova", setBack);
									return;
								}

								var found = resp.match(reg);

								if (found == null){
									bot.sendMessage(message.chat.id, "Errore di sintassi, riprova", setBack);
									return;
								}

								var title = found[1].trim();
								var weapon1 = found[2].trim();
								var weapon2 = found[3].trim();
								var weapon3 = found[4].trim();
								var weapon4 = found[5].trim();

								var text = "Set *" + title + "*:\n";

								if (weapon1 != ""){
									text += weapon1;
								}
								if (weapon2 != ""){
									text += weapon2;
								}
								if (weapon3 != ""){
									text += weapon3;
								}
								if (weapon4 != ""){
									text += weapon4;
								}

								var w1 = null;
								var w2 = null;
								var w3 = null;
								var w4 = null;
								var qnt = 0;

								connection.query('SELECT name FROM set_list WHERE name = "' + title + '" AND player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length > 0){
										bot.sendMessage(message.chat.id, "Non puoi utilizzare due nomi uguali", setBack);
										return;
									}

									connection.query('SELECT id FROM item WHERE name = "' + weapon1 + '" AND power > 0', function(err, rows, fields) {
										if (err) throw err;
										if ((Object.keys(rows).length == 0) && (weapon1 != "")){
											bot.sendMessage(message.chat.id, "L'arma non √® valida", setBack);
											return;
										}else if (weapon1 == ""){
											w1 = 0;
										}else{
											w1 = rows[0].id;
											qnt++;
										}
										connection.query('SELECT id FROM item WHERE name = "' + weapon2 + '" AND power_armor < 0', function(err, rows, fields) {
											if (err) throw err;
											if ((Object.keys(rows).length == 0) && (weapon2 != "")){
												bot.sendMessage(message.chat.id, "L'armatura non √® valida", setBack);
												return;
											}else if (weapon2 == ""){
												w2 = 0;
											}else{
												w2 = rows[0].id;
												qnt++;
											}
											connection.query('SELECT id FROM item WHERE name = "' + weapon3 + '" AND power_shield < 0', function(err, rows, fields) {
												if (err) throw err;
												if ((Object.keys(rows).length == 0) && (weapon3 != "")){
													bot.sendMessage(message.chat.id, "Lo scudo non √® valido", setBack);
													return;
												}else if (weapon3 == ""){
													w3 = 0;
												}else{
													w3 = rows[0].id;
													qnt++;
												}
												connection.query('SELECT id FROM item WHERE name = "' + weapon4 + '" AND name LIKE "Talismano%"', function(err, rows, fields) {
													if (err) throw err;
													if ((Object.keys(rows).length == 0) && (weapon4 != "")){
														bot.sendMessage(message.chat.id, "Il talismano non √® valido", setBack);
														return;
													}else if (weapon4 == ""){
														w4 = 0;
													}else{
														w4 = rows[0].id;
														qnt++;
													}

													connection.query('INSERT INTO set_list (player_id, quantity, name, item_weapon, item_armor, item_shield, item_charm) ' +
																	 'VALUES (' + player_id + ',' + qnt + ',"' + title + '",' + w1 + ',' + w2 + ',' + w3 + ',' + w4 + ')', function(err, rows, fields) {
														if (err) throw err;
														connection.query('SELECT MAX(id) As maxid FROM set_list WHERE player_id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Set *" + title + "* creato! (Codice importazione: " + rows[0].maxid + ")", setBack);
														});
													});
												});
											});
										});
									});
								});
							}
						});
					}else if (resp == "carica set"){
						bot.sendMessage(message.chat.id, "Inserisci il codice del set da importare", setBack).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Torna al set"){
									return;
								}	
								var code = parseInt(answer.text);

								if (isNaN(code)){
									bot.sendMessage(message.chat.id, "Questo codice set non esiste", setBack);
									return;
								}

								connection.query('SELECT * FROM set_list WHERE id = ' + code, function(err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Questo codice set non esiste", setBack);
										return;
									}

									var title = rows[0].name;

									connection.query('INSERT INTO set_list (player_id, quantity, name, item_weapon, item_armor, item_shield, item_charm) ' +
													 'VALUES (' + player_id + ',' + rows[0].quantity + ',"' + rows[0].name + '",' + rows[0].item_weapon + ',' + rows[0].item_armor + ',' + rows[0].item_shield + ',' + rows[0].item_charm + ')', function(err, rows, fields) {
										if (err) throw err;
										connection.query('SELECT MAX(id) As maxid FROM set_list WHERE player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Set *" + title + "* importato! (Codice condivisione: " + rows[0].maxid + ")", setBack);
										});
									});
								});		
							}
						});
					}
				}
			});
		});	
	});
});

bot.onText(/^solo (.+)/i, function(message) {

	var backPack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna allo Zaino"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var soloRarity = message.text.substring(message.text.indexOf(" ")+1);
		var text = "";

		if (soloRarity.toLowerCase() == "i"){
			connection.query('SELECT type, power, quantity FROM magic WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0){
					text = "*Incantesimi:*\n\n";
					var n = "";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].type == 1){
							n = "Furia dei Mari";
						}else if (rows[i].type == 2){
							n = "Tempesta Folgorante";
						}else if (rows[i].type == 3){
							n = "Impeto di Fiamme";
						}else if (rows[i].type == 4){
							n = "Ira Astrale";
						}
						text = text + "> " + n + " " + rows[i].power + " (" + rows[i].quantity + ")\n";
					}
				}else{
					text = text + "Nessun incantesimo disponibile\n";
				}
				if (Object.keys(text).length > 4000){
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				}else{
					bot.sendMessage(message.chat.id, text, backPack);
				}
			});
		}else if (soloRarity.toLowerCase() == "base"){
			connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, COUNT(item.name) As num FROM `inventory`, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND craftable = 0 GROUP BY item.name ORDER BY item.name ASC', function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0){
					text = "*Oggetti base:*\n\n";
					for (i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].craftable == 0){
							rows[i].name = "*" + rows[i].name + "*";
						}
						text = text + "> " + rows[i].name + " (" + rows[i].num + ")\n";
					}
				}else{
					text = text + "Nessun oggetto base disponibile\n";
				}
				if (Object.keys(text).length > 4000){
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				}else{
					bot.sendMessage(message.chat.id, text, backPack);
				}
			});
		}else if (soloRarity.toLowerCase() == "creati"){
			connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, COUNT(item.name) As num FROM `inventory`, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND craftable = 1 GROUP BY item.name ORDER BY item.name ASC', function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0){
					text = "*Oggetti creati:*\n\n";
					for (i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].craftable == 0){
							rows[i].name = "*" + rows[i].name + "*";
						}
						text = text + "> " + rows[i].name + " (" + rows[i].num + ")\n";
					}
				}else{
					text = text + "Nessun oggetto creato disponibile\n";
				}
				if (Object.keys(text).length > 4000){
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				}else{
					bot.sendMessage(message.chat.id, text, backPack);
				}
			});
		}else{
			connection.query('SELECT inventory.player_id, item.name, item.craftable, rarity.id, rarity.name As rname, COUNT(item.name) As num FROM `inventory`, item, rarity WHERE player_id = ' + player_id + ' AND rarity.shortname = item.rarity AND inventory.item_id = item.id AND rarity = "' + soloRarity + '" GROUP BY item.name ORDER BY rarity.id DESC, item.name ASC', function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0){
					text = "*" + rows[0].rname + "*:\n\n";

					for (i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].craftable == 0){
							rows[i].name = "*" + rows[i].name + "*";
						}
						text = text + "> " + rows[i].name + " (" + rows[i].num + ")\n";
					}
				}else{
					text = text + "Nessun oggetto di questa rarit√† disponibile\n";
				}
				if (Object.keys(text).length > 4000){
					bot.sendMessage(message.chat.id, "Questo filtro mostra troppi risultati, riprova", backPack);
				}else{
					bot.sendMessage(message.chat.id, text, backPack);
				}
			});
		}
	});
});

bot.onText(/^Top|Torna alle top/i, function(message) {
	var kb = {
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [['Le Mie Classifiche'],['Creazioni','Settimanale'],['Abilit√†','Rango'],['Per Livello','Draghi'],['Imprese Completate','Missioni'],['Collezione Artefatti','Classifica Contrabbandiere'],['Impresa Globale'],['Cambia Top','Torna al menu']]
		}
	};

	bot.sendMessage(message.chat.id, "Seleziona il tipo di classifica da visualizzare", kb);
});

bot.onText(/^Cambia Top/i, function(message) {
	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna alle Top"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, top_min FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;

		if (rows[0].top_min == 0){
			connection.query('UPDATE player SET top_min = 1 WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione delle prime posizioni in classifica", kb);
			});
		}else{
			connection.query('UPDATE player SET top_min = 0 WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(message.chat.id, "Hai attivato la visualizzazione della tua posizione in classifica", kb);
			});
		}
	});
});

bot.onText(/^Le Mie Classifiche/i, function(message) {

	var text = "La tua posizione nelle varie classifiche:\n";
	var c = 1;
	var mypnt = 0;
	var mypos = 0;

	var banned_join = banlist_id.join();
	connection.query('SELECT nickname, craft_count As points FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" GROUP BY nickname, craft_count, exp, weapon ORDER BY points DESC', function(err, rows, fields) {
		if (err) throw err;
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
				mypnt = rows[i].points;
				mypos = c;
			}
			c++;
		}
		text = text + "\n*Punti crafting*: " + mypos + "¬∞ con " + mypnt;
		c = 1;
		mypnt = 0;
		mypos = 0;

		connection.query('SELECT nickname, craft_week As points FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" GROUP BY nickname, craft_week, exp, weapon ORDER BY points DESC', function(err, rows, fields) {
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
					mypnt = rows[i].points;
					mypos = c;
				}
				c++;
			}
			text = text + "\n*Punti crafting settimanali*: " + mypos + "¬∞ con " + mypnt + " pnt";
			c = 1;
			mypnt = 0;
			mypos = 0;

			connection.query('SELECT nickname, rank As points FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" GROUP BY nickname, rank, exp, weapon ORDER BY points DESC', function(err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
						mypnt = rows[i].points;
						mypos = c;
					}
					c++;
				}
				text = text + "\n*Punti rango*: " + mypos + "¬∞ con " + mypnt;
				c = 1;
				mypnt = 0;
				mypos = 0;

				connection.query('SELECT nickname, achievement_count As points FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" GROUP BY nickname, achievement_count, exp, weapon ORDER BY points DESC', function(err, rows, fields) {
					if (err) throw err;
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
							mypnt = rows[i].points;
							mypos = c;
						}
						c++;
					}
					text = text + "\n*Imprese giornaliere*: " + mypos + "¬∞ con " + mypnt + " pnt";
					c = 1;
					mypnt = 0;
					mypos = 0;

					connection.query('SELECT nickname, mission_count As points FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" GROUP BY nickname, mission_count, exp, weapon ORDER BY points DESC', function(err, rows, fields) {
						if (err) throw err;
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
								mypnt = rows[i].points;
								mypos = c;
							}
							c++;
						}
						text = text + "\n*Missioni completate*: " + mypos + "¬∞ con " + mypnt;
						c = 1;
						mypnt = 0;
						mypos = 0;

						connection.query('SELECT nickname, ability As points FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" GROUP BY nickname, ability, exp, weapon ORDER BY points DESC', function(err, rows, fields) {
							if (err) throw err;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
									mypnt = rows[i].points;
									mypos = c;
								}
								c++;
							}
							text = text + "\n*Abilit√†*: " + mypos + "¬∞ con " + mypnt;
							c = 1;
							mypnt = 0;
							mypos = 0;

							connection.query('SELECT nickname, exp, reborn, case reborn when 1 then FLOOR(exp/10) when 2 then FLOOR(exp/10)+100 when 3 then FLOOR(exp/10)+100+150 when 4 then FLOOR(exp/10)+100+150+200 when 5 then FLOOR(exp/10)+100+150+200+300 end as lev FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" ORDER BY lev DESC', function(err, rows, fields) {
								if (err) throw err;
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
										mypnt = Math.floor(rows[i].exp/10) + " R" + (rows[i].reborn-1);
										mypos = c;
									}
									c++;
								}
								text = text + "\n*Livello*: " + mypos + "¬∞ con livello " + mypnt;
								c = 1;
								mypnt = 0;
								mypos = 0;

								connection.query('SELECT dragon.name, dragon.type, dragon.level, player.nickname FROM dragon, player WHERE player.account_id NOT IN (' + banned_join + ') AND player_id = player.id AND player_id != 1 AND player_id != 3 ORDER BY level DESC', function(err, rows, fields) {
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
											mypos = c;
											mypnt = rows[i].level;
										}
										c++;
									}
									text = text + "\n*Drago*: " + mypos + "¬∞ con livello " + mypnt;
									c = 1;
									mypnt = 0;
									mypos = 0;

									connection.query('SELECT DISTINCT(name), player.nickname, COUNT(DISTINCT(name)) As tot FROM inventory_rarity, player WHERE player.id = inventory_rarity.player_id AND player.account_id NOT IN (' + banned_join + ') AND player.nickname != "fenix45" AND player.nickname != "LastSoldier95" AND name LIKE "Artefatto%" GROUP BY player.nickname HAVING COUNT(DISTINCT(name)) > 0 ORDER BY COUNT(DISTINCT(name)) DESC', function(err, rows, fields) {
										if (err) throw err;
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
												mypos = c;
												mypnt = "(" + rows[i].tot + "/5)";
											}
											c++;
										}
										if (mypnt == 0)
											text = text + "\n*Artefatti*: Non possiedi artefatti";
										else
											text = text + "\n*Artefatti*: " + mypos + "¬∞ con " + mypnt;
										c = 1;
										mypnt = 0;
										mypos = 0;

										connection.query('SELECT nickname, total_cnt FROM merchant_offer, player WHERE account_id NOT IN (' + banned_join + ') AND merchant_offer.player_id = player.id AND nickname != "fenix45" AND nickname != "LastSoldier95" ORDER BY total_cnt DESC', function(err, rows, fields) {
											if (err) throw err;
											for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
												if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
													mypos = c;
													mypnt = rows[i].total_cnt;
												}
												c++;
											}
											text = text + "\n*Contrabbandiere*: " + mypos + "¬∞ con offerte " + mypnt;
											c = 1;
											mypnt = 0;
											mypos = 0;

											connection.query('SELECT nickname, SUM(value) As cnt FROM achievement_global A, player P WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" AND A.player_id = P.id GROUP BY player_id ORDER BY SUM(value) DESC', function(err, rows, fields) {
												if (err) throw err;
												for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
													if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
														mypos = c;
														mypnt = rows[i].cnt;
													}
													c++;
												}
												if (mypos > 0)
													text = text + "\n*Impresa Globale*: " + mypos + "¬∞ con punti " + mypnt;

												c = 1;
												mypnt = 0;
												mypos = 0;

												var keyrank = {
													parse_mode: "Markdown",
													reply_markup: {
														resize_keyboard: true,
														//one_time_keyboard: true,
														"keyboard": [['Top'],['Torna al menu']]
													}
												};

												bot.sendMessage(message.chat.id, text, keyrank);
											});
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/^Creazioni/i, function(message) {
	getRank(message, 20, 0);
});

bot.onText(/^Settimanale/i, function(message) {
	getRank(message, 20, 1);
});

bot.onText(/^Abilit√†$/i, function(message) {
	getRank(message, 20, 6);
});

bot.onText(/^Draghi$/i, function(message) {
	getRankDr(message, 20);
});

bot.onText(/^Rango$/i, function(message) {
	getRank(message, 20, 2);
});

bot.onText(/^Imprese Completate$/i, function(message) {
	getRank(message, 20, 4);
});

bot.onText(/^Missioni$/i, function(message) {
	getRank(message, 20, 5);
});

bot.onText(/^Collezione Artefatti$/i, function(message) {
	getRankArt(message, 100);
});

bot.onText(/^Per Livello$/i, function(message) {
	getRankLev(message, 20);
});

bot.onText(/^Impresa Globale$/i, function(message) {
	getRankAch(message, 20);
});

function getRank(message, size, type){
	var t = "craft_count";
	var tx = "sui punti creazione";
	var tval = "pnt";
	if (type == 1){
		t = "craft_week";
		tx = "sui punti creazione settimanali";
	} else if (type == 2){
		t = "rank";
		tx = "sui punti rango dungeon";
	} else if (type == 4){
		t = "achievement_count";
		tx = "sulle imprese giornaliere completate";
	} else if (type == 5){
		t = "mission_count";
		tx = "sulle missioni completate";
	} else if (type == 6){
		t = "ability";
		tx = "sull'abilit√†";
	}

	var text = "Classifica basata " + tx + ":\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var mypos = 0;

	var banned_join = banlist_id.join();

	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1){
			connection.query('SELECT nickname, ' + t + ' As points FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" GROUP BY nickname, ' + t + ', exp, weapon ORDER BY points DESC', function(err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < size+1){
						rows[i].points = formatNumber(rows[i].points);
						text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].points + " " + tval + ")\n";
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
						mypnt = rows[i].points;
						mypos = c;
					}
					c++;
				}
				text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + mypnt + " " + tval + ")";

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}else{
			connection.query('SELECT nickname, ' + t + ' As points FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" GROUP BY nickname, ' + t + ', exp, weapon ORDER BY points DESC', function(err, rows, fields) {
				if (err) throw err;

				var range = 5;

				var nickname = [];
				var points = [];
				var mypos = 0;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					points.push(rows[i].points);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase()){
						mypos = i;
					}
				}

				for (var i = (mypos-range); i < (mypos+(range+1)); i++) {
					if (nickname[i] != undefined){
						if (i == mypos){
							text += (i+1) + "¬∞ <b>" + nickname[i] + "</b> (" + points[i] + " " + tval + ")\n";
						}else{
							text += (i+1) + "¬∞ " + nickname[i] + " (" + points[i] + " " + tval + ")\n";
						}
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		};
	});
};

function getRankLev(message, size){
	var text = "Classifica basata sul livello:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var mypos = 0;

	var banned_join = banlist_id.join();

	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1){
			connection.query('SELECT nickname, exp, reborn, case reborn when 1 then FLOOR(exp/10) when 2 then FLOOR(exp/10)+100 when 3 then FLOOR(exp/10)+100+150 when 4 then FLOOR(exp/10)+100+150+200 when 5 then FLOOR(exp/10)+100+150+200+300 end as lev FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" ORDER BY lev DESC', function(err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < size+1){
						text = text + c + "¬∞ " + rows[i].nickname + " (" + Math.floor(rows[i].exp/10) + " R" + (rows[i].reborn-1) + ")\n";
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
						mypnt = Math.floor(rows[i].exp/10) + " R" + (rows[i].reborn-1);
						mypos = c;
					}
					c++;
				}
				text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + mypnt + ")";

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}else{
			connection.query('SELECT nickname, exp, reborn, case reborn when 1 then FLOOR(exp/10) when 2 then FLOOR(exp/10)+100 when 3 then FLOOR(exp/10)+100+150 when 4 then FLOOR(exp/10)+100+150+200 when 5 then FLOOR(exp/10)+100+150+200+300 end as lev FROM player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" ORDER BY lev DESC', function(err, rows, fields) {
				if (err) throw err;

				var range = 5;

				var nickname = [];
				var exp = [];
				var reborn = [];
				var mypos = 0;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					exp.push(rows[i].exp);
					reborn.push(rows[i].reborn);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase()){
						mypos = i;
					}
				}
				for (var i = (mypos-range); i < (mypos+(range+1)); i++) {
					if (nickname[i] != undefined){
						if (i == mypos){
							text += (i+1) + "¬∞ <b>" + nickname[i] + "</b> (" + Math.floor(exp[i]/10) + " R" + (reborn[i]-1) + ")\n";
						}else{
							text += (i+1) + "¬∞ " + nickname[i] + " (" + Math.floor(exp[i]/10) + " R" + (reborn[i]-1) + ")\n";
						}
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}
	});
}

function getRankDr(message, size){
	var text = "Classifica draghi:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var myinfo = 0;

	var banned_join = banlist_id.join();

	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1){
			connection.query('SELECT dragon.name, dragon.type, dragon.level, player.nickname FROM dragon, player WHERE player.account_id NOT IN (' + banned_join + ') AND player_id = player.id AND player_id != 1 AND player_id != 3 ORDER BY level DESC', function(err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < size+1){
						text = text + c + "¬∞ " + rows[i].name + " " + rows[i].type + " (" + rows[i].level + ", " + rows[i].nickname + ")\n";
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
						mypnt = rows[i].points;
						myinfo = c + "¬∞ " + rows[i].name + " " + rows[i].type + " (" + rows[i].level + ", " + rows[i].nickname + ")\n";
					}
					c++;
				}
				text = text + "\nTu:\n" + myinfo;

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}else{
			connection.query('SELECT dragon.name, dragon.type, dragon.level, player.nickname FROM dragon, player WHERE player.account_id NOT IN (' + banned_join + ') AND player_id = player.id AND player_id != 1 AND player_id != 3 ORDER BY level DESC', function(err, rows, fields) {
				if (err) throw err;

				var range = 5;

				var nickname = [];
				var name = [];
				var type = [];
				var level = [];
				var mypos = 0;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					name.push(rows[i].name);
					type.push(rows[i].type);
					level.push(rows[i].level);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase()){
						mypos = i;
					}
				}
				for (var i = (mypos-range); i < (mypos+(range+1)); i++) {
					if (nickname[i] != undefined){
						if (i == mypos){
							text += (i+1) + "¬∞ <b>" + name[i] + " " + type[i] + "</b> (" + level[i] + ", " + nickname[i] + ")\n";
						}else{
							text += (i+1) + "¬∞ " + name[i] + " " + type[i] + " (" + level[i] + ", " + nickname[i] + ")\n";
						}
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}

	});
};

function getRankArt(message, size){
	var text = "Classifica ottenimento artefatti:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var myinfo = 0;
	var size = 20;

	var banned_join = banlist_id.join();

	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1){
			connection.query('SELECT DISTINCT(name), player.nickname, COUNT(DISTINCT(name)) As tot FROM inventory_rarity, player WHERE player.id = inventory_rarity.player_id AND player.account_id NOT IN (' + banned_join + ') AND player.nickname != "fenix45" AND player.nickname != "LastSoldier95" AND name LIKE "Artefatto%" GROUP BY player.nickname HAVING COUNT(DISTINCT(name)) > 0 ORDER BY COUNT(DISTINCT(name)) DESC', function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Ancora nessun giocatore ha ottenuto un artefatto", back);
					return;
				}

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c<31){
						if (c < size+1){
							text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].tot + "/5)\n";
						}
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
						mypnt = rows[i].points;
						myinfo = c + "¬∞ " + rows[i].nickname + " (" + rows[i].tot + "/5)\n";
					}
					c++;
				}
				if (myinfo == "0"){
					myinfo = "Non possiedi artefatti";
				}
				text = text + "\nTu:\n" + myinfo;

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}else{
			connection.query('SELECT DISTINCT(name), player.nickname, COUNT(DISTINCT(name)) As tot FROM inventory_rarity, player WHERE player.id = inventory_rarity.player_id AND player.account_id NOT IN (' + banned_join + ') AND player.nickname != "fenix45" AND player.nickname != "LastSoldier95" AND name LIKE "Artefatto%" GROUP BY player.nickname HAVING COUNT(DISTINCT(name)) > 0 ORDER BY COUNT(DISTINCT(name)) DESC', function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Ancora nessun giocatore ha ottenuto un artefatto", back);
					return;
				}

				var range = 5;

				var nickname = [];
				var tot = [];
				var mypos = 0;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					tot.push(rows[i].tot);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase()){
						mypos = i;
					}
				}
				for (var i = (mypos-range); i < (mypos+(range+1)); i++) {
					if (nickname[i] != undefined){
						if (i == mypos){
							text += (i+1) + "¬∞ <b>" + nickname[i] + "</b> (" + tot[i] + "/5)\n";
						}else{
							text += (i+1) + "¬∞ " + nickname[i] + " (" + tot[i] + "/5)\n";
						}
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}
	});
};

function getRankAch(message, size){
	var text = "Classifica Impresa Globale:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var mypos = 0;
	var size = 20;

	connection.query('SELECT global_eventwait FROM config', function(err, rows, fields) {
		if (err) throw err;

		if (rows[0].global_eventwait == 1){
			bot.sendMessage(message.chat.id, "La classifica sar√† disponibile a breve", keyrank);
			return;
		}

		var banned_join = banlist_id.join();

		connection.query('SELECT top_min, global_event, id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
			if (err) throw err;

			var global_event = rows[0].global_event;
			var top_min = rows[0].top_min;
			var player_id = rows[0].id;

			connection.query('SELECT IFNULL(SUM(value),0) As cnt FROM achievement_global WHERE player_id = ' + rows[0].id, function(err, rows, fields) {
				if (err) throw err;

				if ((rows[0].cnt == 0) && (message.from.username != "fenix45")){
					bot.sendMessage(message.chat.id, "Contribuisci all'obbiettivo dell'impresa globale per visualizzarne la classifica", keyrank);
					return;
				}

				if (top_min == 1){
					connection.query('SELECT nickname, SUM(value) As cnt FROM achievement_global A, player P WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" AND A.player_id = P.id GROUP BY player_id ORDER BY SUM(value) DESC', function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "La classifica √® ancora vuota", keyrank);
							return;
						}

						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (c < size+1){
								text += c + "¬∞ " + rows[i].nickname + " (" + formatNumber(rows[i].cnt) + ")\n";
							}
							if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
								mypnt = rows[i].cnt;
								mypos = c;
							}
							c++;
						}
						text += "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + formatNumber(mypnt) + ")";

						connection.query('(SELECT nickname, SUM(A.value) As cnt FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (' + banned_join + ') GROUP BY A.player_id ORDER BY SUM(A.value) DESC LIMIT 100) UNION (SELECT nickname, SUM(A.value) As cnt FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (' + banned_join + ') AND P.global_event < 5 GROUP BY A.player_id ORDER BY SUM(A.value) DESC LIMIT 100)', function(err, rows, fields) {
							if (err) throw err;

							var found = 0;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
									found = 1;
									break;
								}
							}

							if (found == 1){
								text += "\n\nA questo punteggio la partecipazione all'impresa <b>verr√† considerata</b> nelle tue statistiche!";
							}else{
								text += "\n\nA questo punteggio la partecipazione all'impresa <b>NON verr√†</b> considerata nelle tue statistiche, impegnati di pi√π per aumentare i tuoi punti!";
							}

							bot.sendMessage(message.chat.id, text, keyrank);
						});
					});
				}else{
					connection.query('SELECT nickname, SUM(value) As cnt FROM achievement_global A, player P WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" AND A.player_id = P.id GROUP BY player_id ORDER BY SUM(value) DESC', function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "La classifica √® ancora vuota", keyrank);
							return;
						}

						var range = 5;

						var nickname = [];
						var point = [];
						var mypos = 0;

						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							nickname.push(rows[i].nickname);
							point.push(rows[i].cnt);
							if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase()){
								mypos = i;
							}
						}

						for (var i = (mypos-range); i < (mypos+(range+1)); i++) {
							if (nickname[i] != undefined){
								if (i == mypos){
									text += (i+1) + "¬∞ <b>" + nickname[i] + "</b> (" + formatNumber(point[i]) + ")\n";
								}else{
									text += (i+1) + "¬∞ " + nickname[i] + " (" + formatNumber(point[i]) + ")\n";
								}
							}
						}

						connection.query('(SELECT nickname, SUM(A.value) As cnt FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (' + banned_join + ') GROUP BY A.player_id ORDER BY SUM(A.value) DESC LIMIT 100) UNION (SELECT nickname, SUM(A.value) As cnt FROM player P, achievement_global A WHERE P.id = A.player_id AND P.account_id NOT IN (' + banned_join + ') AND P.global_event < 5 GROUP BY A.player_id ORDER BY SUM(A.value) DESC LIMIT 100)', function(err, rows, fields) {
							if (err) throw err;

							var found = 0;
							for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
								if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
									found = 1;
									break;
								}
							}

							if (found == 1){
								text += "\n\nA questo punteggio la partecipazione all'impresa <b>verr√† considerata</b> nelle tue statistiche!";
							}else{
								text += "\n\nA questo punteggio la partecipazione all'impresa <b>NON verr√†</b> considerata nelle tue statistiche, impegnati di pi√π per aumentare i tuoi punti!";
							}

							bot.sendMessage(message.chat.id, text, keyrank);
						});
					});
				}
			});
		});
	});
}

bot.onText(/Classifica Contrabbandiere/i, function(message) {
	var text = "Classifica offerte accettate:\n";
	var c = 1;
	var mypnt = 0;
	var totpnt = 0;
	var myinfo = 0;
	var size = 20;

	var banned_join = banlist_id.join();

	connection.query('SELECT top_min FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (rows[0].top_min == 1){
			connection.query('SELECT nickname, total_cnt FROM merchant_offer, player WHERE account_id NOT IN (' + banned_join + ') AND merchant_offer.player_id = player.id AND nickname != "fenix45" AND nickname != "LastSoldier95" ORDER BY total_cnt DESC', function(err, rows, fields) {
				if (err) throw err;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c<31){
						if (c < size+1){
							text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].total_cnt + ")\n";
						}
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
						mypnt = rows[i].total_cnt;
						myinfo = c + "¬∞ " + rows[i].nickname + " (" + rows[i].total_cnt + ")\n";
					}
					c++;
				}
				text = text + "\nTu:\n" + myinfo;

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}else{
			connection.query('SELECT nickname, total_cnt FROM merchant_offer, player WHERE account_id NOT IN (' + banned_join + ') AND merchant_offer.player_id = player.id AND nickname != "fenix45" AND nickname != "LastSoldier95" ORDER BY total_cnt DESC', function(err, rows, fields) {
				if (err) throw err;

				var range = 5;

				var nickname = [];
				var total_cnt = [];
				var mypos = 0;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					nickname.push(rows[i].nickname);
					total_cnt.push(rows[i].total_cnt);
					if (message.from.username.toLowerCase() == rows[i].nickname.toLowerCase()){
						mypos = i;
					}
				}
				for (var i = (mypos-range); i < (mypos+(range+1)); i++) {
					if (nickname[i] != undefined){
						if (i == mypos){
							text += (i+1) + "¬∞ <b>" + nickname[i] + "</b> (" + total_cnt[i] + ")\n";
						}else{
							text += (i+1) + "¬∞ " + nickname[i] + " (" + total_cnt[i] + ")\n";
						}
					}
				}

				bot.sendMessage(message.chat.id, text, keyrank);
			});
		}
	});
});

bot.onText(/emporio/i, function(message) {
	var oggetto = "";
	var iKeys = [];

	var price_drop = 0;
	var price_drop_msg = "";
	var n = new Date().getDay()
	var n2 = new Date().getDate();

	if (n == 0){
		if (n2 < 7){
			sconto = 20;
		}
		price_drop = 1;
		price_drop_msg = "*Oggi il prezzo √® ridotto del " + sconto + "%!*\n";
	}

	connection.query('SELECT id, holiday, money, account_id, mission_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		helpMsg(message.chat.id, player_id, 6);

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Compra","Vendi","Ricicla"],["Torna alla piazza"],["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, price_drop_msg + "Hai a disposizione " + formatNumber(money) + " ¬ß, cosa vuoi fare?", kb).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "compra"){
					connection.query('SELECT value, name FROM chest WHERE id < 7', function(err, rows, fields) {
						if (err) throw err;
						if (price_drop == 1){
							iKeys.push(["Compra Pozione Piccola (" + formatNumber(parseInt(1200-Math.round((1200/100)*sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Pozione Media (" + formatNumber(parseInt(2400-Math.round((2400/100)*sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Pozione Grande (" + formatNumber(parseInt(4800-Math.round((4800/100)*sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Piuma di Fenice (" + formatNumber(parseInt(6000-Math.round((6000/100)*sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Cenere di Fenice (" + formatNumber(parseInt(25000-Math.round((25000/100)*sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Bevanda Energetica (" + formatNumber(parseInt(20000-Math.round((20000/100)*sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Bevanda Energetica Plus (" + formatNumber(parseInt(38000-Math.round((38000/100)*sconto))) + " ¬ß)"]);
							iKeys.push(["Compra Gemma (150.000 ¬ß)"]);
						}else{
							iKeys.push(["Compra Pozione Piccola (1.200 ¬ß)"]);
							iKeys.push(["Compra Pozione Media (2.400 ¬ß)"]);
							iKeys.push(["Compra Pozione Grande (4.800 ¬ß)"]);
							iKeys.push(["Compra Piuma di Fenice (6.000 ¬ß)"]);
							iKeys.push(["Compra Cenere di Fenice (25.000 ¬ß)"]);
							iKeys.push(["Compra Bevanda Energetica (20.000 ¬ß)"]);
							iKeys.push(["Compra Bevanda Energetica Plus (38.000 ¬ß)"]);
							iKeys.push(["Compra Gemma (150.000 ¬ß)"]);
						}

						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (price_drop == 1){
								rows[i].value = rows[i].value-Math.round((rows[i].value/100)*sconto);
							}
							iKeys.push(["Compra " + rows[i].name + " (" + rows[i].value + " ¬ß)"]);
						}
						iKeys.push(["Torna all'emporio"]);
						iKeys.push(["Torna al menu"]);

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, "Seleziona l'oggetto da acquistare.", kb);
					});
				}else if (answer.text.toLowerCase() == "vendi"){
					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Valore < 1000","Valore < 2000"],["Valore < 7000","Valore < 10000"],["Valore < 20000","Valore > 20000"],["Vendi C","Vendi NC"],["Vendi R","Vendi UR"],["Vendi L","Vendi E"],["Torna all'emporio"],["Torna al menu"]]
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona una categoria", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {

							if (answer.text.indexOf("Valore") == -1){
								return;
							}

							var filter = answer.text.substring(answer.text.indexOf(" ")+1);
							if (filter == "< 1000"){
								filter = "<= 1000";
							}else if (filter == "< 2000"){
								filter = "<= 2000 AND ROUND(value/2) > 1000";
							}else if (filter == "< 7000"){
								filter = "<= 7000 AND ROUND(value/2) > 2000";
							}else if (filter == "< 10000"){
								filter = "<= 10000 AND ROUND(value/2) > 7000";
							}else if (filter == "< 20000"){
								filter = "<= 20000 AND ROUND(value/2) > 10000";
							}else if (filter == "> 20000"){
								filter = "> 20000";
							}

							connection.query('SELECT ROUND(item.value/2) As value, item.name, COUNT(item.name) As Num FROM inventory, item WHERE ROUND(value/2) ' + filter + ' AND inventory.player_id=' + player_id + ' AND inventory.item_id = item.id GROUP BY item.name LIMIT 100', function(err, rows, fields) {
								if (err) throw err;
								for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
									iKeys.push(["Vendi " + rows[i].name + " (" + rows[i].value + " ¬ß) posseduti: " + rows[i].Num]);
								}

								if (Object.keys(iKeys).length > 0){
									iKeys.push(["Torna all'emporio"]);									
									iKeys.push(["Torna al menu"]);

									var kb = {
										parse_mode: "Markdown",
										reply_markup: {
											resize_keyboard: true,
											//one_time_keyboard: true,
											"keyboard": iKeys
										}
									};

									bot.sendMessage(message.chat.id, "Seleziona l'oggetto da vendere", kb);
								}else{

									var kb = {
										parse_mode: "Markdown",
										reply_markup: {
											resize_keyboard: true,
											//one_time_keyboard: true,
											"keyboard": [["Torna all'emporio"],["Torna al menu"]]
										}
									};

									bot.sendMessage(message.chat.id, "Nessun oggetto nello zaino.", kb);
								};
							});
						};
					});
				}
			};
		});
	});
});

bot.onText(/ricicla/i, function(message) {
	connection.query('SELECT id, holiday, money, account_id, mission_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;

		var kbR = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["C","NC","R"],["UR","L","E"],["Torna all'emporio"],["Torna al menu"]]
			}
		};

		var kb2 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Ricicla Ancora"],["Torna al menu"]]
			}
		};

		var kbC = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Stessa Rarit√†"],["Rarit√† Superiore"],["Torna al menu"]]
			}
		};

		if (message.text.indexOf(":") != -1){
			var parts = message.text.split(":");
			var oggetto = parts[1].trim();

			bot.sendMessage(message.chat.id, "Con quale modalit√† vuoi riciclare " + oggetto + "?", kbC).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if ((answer.text == "Stessa Rarit√†") || (answer.text == "Rarit√† Superiore")){
						connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							connection.query('SELECT item_id, name, COUNT(name) AS quantity, rarity FROM inventory_rarity WHERE nickname = "' + message.from.username + '" AND name = "' + oggetto + '" GROUP BY name, nickname HAVING COUNT(name) >= 5', function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Non possiedi l'oggetto specificato.", back);
									return;
								}

								var rarity = rows[0].rarity;
								var nRarity = rarity;

								var price = 0;

								if (answer.text == "Rarit√† Superiore"){
									if (nRarity == "C"){
										nRarity = "NC";
										price = 500;
									}else if (nRarity == "NC"){
										nRarity = "R";
										price = 750;
									}else if (nRarity == "R"){
										nRarity = "UR";
										price = 1000;
									}else if (nRarity == "UR"){
										nRarity = "L";
										price = 1500;
									}else if (nRarity == "L"){
										nRarity = "E";
										price = 2000;
									}else{
										bot.sendMessage(message.chat.id, "Non puoi riciclare questa rarit√†!", back);
										return;
									}
								}

								if (money < price){
									bot.sendMessage(message.chat.id, "Non hai abbastanza monete (" + price + " ¬ß)", back);
									return;
								}

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
								});

								setAchievement(message.chat.id, player_id, 15, 1);

								connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + rows[0].item_id + ' LIMIT 5', function(err, rows, fields) {
									if (err) throw err;
									connection.query('SELECT id, name FROM item WHERE rarity = "' + nRarity + '" AND name != "' + oggetto + '" AND craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
										if (err) throw err;
										var itemName = rows[0].name;
										connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Hai riciclato gli oggetti e ricevuto *" + itemName + "* (" + nRarity + ")!", kb2);
										});
									});
								});
							});
						});
					};
				};
			});
			return;
		}

		var iKeys = [];

		bot.sendMessage(message.chat.id, "Seleziona la rarit√† dell'oggetto da riciclare, puoi anche usare 'Ricicla: NomeOggetto'", kbR).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				var r = answer.text;

				if ((r == "Torna al menu") || (r == "Torna all'emporio")){
					return;
				}

				if ((r == "C") || (r == "NC") || (r == "R") || (r == "UR") || (r == "L") || (r == "E")){
					//kek
				}else{
					bot.sendMessage(message.chat.id, "Rarit√† non valida", back);
					return;
				}

				connection.query('SELECT nickname, name, COUNT(name) AS quantity, rarity FROM `inventory_rarity` WHERE rarity = "' + r + '" AND nickname = "' + message.from.username + '" GROUP BY name, nickname HAVING COUNT(name) >= 5', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Non hai oggetti di rarit√† " + r + " riciclabili.", back);
						return;
					}
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						iKeys.push([rows[i].name + " (" + rows[i].rarity + ", " + rows[i].quantity + ")"]);
					}

					iKeys.push(["Torna all'emporio"]);
					iKeys.push(["Torna al menu"]);

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": iKeys
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona gli oggetti da riciclare, consumandone 5 riceverai un oggetto della stessa rarit√†, o superiore (in questo caso ti coster√† C: 500, NC: 750, R: 1000, UR: 1500 o L: 2000 ¬ß).", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var oggetto = answer.text;

							if ((oggetto == "Torna al menu") || (oggetto == "Torna all'emporio")){
								return;
							}

							var pos = oggetto.indexOf("(");
							oggetto = oggetto.substr(0, pos-1);

							bot.sendMessage(message.chat.id, "Con quale modalit√† vuoi riciclare " + oggetto + "?", kbC).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if ((answer.text == "Stessa Rarit√†") || (answer.text == "Rarit√† Superiore")){
										connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;

											connection.query('SELECT item_id, name, COUNT(name) AS quantity, rarity FROM `inventory_rarity` WHERE nickname = "' + message.from.username + '" AND name = "' + oggetto + '" AND rarity = "' + r + '" GROUP BY name, nickname HAVING COUNT(name) >= 5', function(err, rows, fields) {
												if (err) throw err;
												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "Non possiedi l'oggetto specificato.", back);
													return;
												}

												var rarity = rows[0].rarity;
												var nRarity = rarity;

												var price = 0;

												if (answer.text == "Rarit√† Superiore"){
													if (nRarity == "C"){
														nRarity = "NC";
														price = 500;
													}else if (nRarity == "NC"){
														nRarity = "R";
														price = 750;
													}else if (nRarity == "R"){
														nRarity = "UR";
														price = 1000;
													}else if (nRarity == "UR"){
														nRarity = "L";
														price = 1500;
													}else if (nRarity == "L"){
														nRarity = "E";
														price = 2000;
													}else{
														bot.sendMessage(message.chat.id, "Non puoi riciclare questa rarit√†!", back);
														return;
													}
												}

												if (money < price){
													bot.sendMessage(message.chat.id, "Non hai abbastanza monete (" + price + " ¬ß)", back);
													return;
												}

												connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});

												setAchievement(message.chat.id, player_id, 15, 1);

												connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + rows[0].item_id + ' LIMIT 5', function(err, rows, fields) {
													if (err) throw err;
													connection.query('SELECT id, name FROM item WHERE rarity = "' + nRarity + '" AND name != "' + oggetto + '" AND craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
														if (err) throw err;
														var itemName = rows[0].name;
														connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Hai riciclato gli oggetti e ricevuto *" + itemName + "* (" + nRarity + ")!", kb2);
														});
													});
												});
											});
										});
									};
								};
							});
						};
					});
				});
			};
		});
	});
});

bot.onText(/^vendi/i, function(message) {
	var oggetto = message.text.substring(message.text.indexOf(" ")+1);

	if (oggetto.indexOf("(") != -1){
		oggetto = oggetto.substring(0, oggetto.indexOf("(")-1);
	}

	if (crazyMode == 1){
		bot.sendMessage(message.chat.id, "Durante il weekend folle non puoi vendere oggetti", back);
		return;
	}

	if (message.text.toLowerCase() == "vendi"){
		return;
	}

	if (oggetto.trim() == ""){
		return;
	}

	var conf = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Conferma"],["Torna all'emporio"]]
		}
	};
	var store = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna all'emporio"]]
		}
	};

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["1"],["2"],["3"],["4"],["5"],["10"],["Torna al menu"]]
		}
	};


	if ((oggetto == "C") || (oggetto == "NC") || (oggetto == "R") || (oggetto == "UR") || (oggetto == "L") || (oggetto == "E")){
		connection.query('SELECT id, money, holiday FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
			if (err) throw err;

			var player_id = rows[0].id;
			if (rows[0].holiday == 1){
				bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
				return;
			}

			bot.sendMessage(message.chat.id, "Sei veramente sicuro di voler vendere tutta la rarit√† " + oggetto + " al prezzo base?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text.toLowerCase() == "si"){
						connection.query('SELECT ROUND(SUM(item.value)/2) As total FROM inventory, item WHERE inventory.item_id = item.id AND rarity = "' + oggetto + '" AND player_id=' + player_id, function(err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Non hai oggetti da vendere!", store);
								return;
							}

							var total = rows[0].total;

							if (crazyMode == 1){
								total = total+(total*10/100);
							}

							if (total == null){
								bot.sendMessage(message.chat.id, "Non hai oggetti da vendere!", store);
								return;
							}

							bot.sendMessage(message.chat.id, "Prezzo calcolato: " + formatNumber(total) + " ¬ß, continuare?", yesno).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text.toLowerCase() == "si"){
										connection.query('SELECT ROUND(SUM(item.value)/2) As total FROM inventory, item WHERE inventory.item_id = item.id AND rarity = "' + oggetto + '" AND player_id=' + player_id, function(err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length == 0){
												bot.sendMessage(message.chat.id, "Non hai oggetti da vendere!", store);
												return;
											}

											total = rows[0].total;

											if (crazyMode == 1){
												total = total*3;
											}

											console.log("ZAINO VENDUTO PER " + total);

											connection.query('DELETE inventory FROM inventory, item WHERE inventory.item_id = item.id AND rarity = "' + oggetto + '" AND player_id=' + player_id, function(err, rows, fields) {
												if (err) throw err;
												connection.query('UPDATE player SET money = money + ' + total + ' WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai venduto tutta la rarit√† *" + oggetto + "* per *" + formatNumber(total) + "* ¬ß!", store);
												});
											});
										});
									}
								}
							});
						});
					}
				}
			});
		});
		return;
	}

	bot.sendMessage(message.chat.id, "Seleziona la quantit√† di " + oggetto + " da vendere", kb).then(function() {
		answerCallbacks[message.chat.id] = function(answer) {
			var quantity = parseInt(answer.text);
			if ((quantity <= 0) || (isNaN(quantity)) || (re.test(quantity) == false)){
				bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
				return;
			}
			connection.query('SELECT id, holiday, money, account_id, mission_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
				if (err) throw err;

				var account_id = (rows[0].account_id).toString();
				if (banlist_id.indexOf(account_id) != -1){
					var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
					bot.sendMessage(message.chat.id, text, mark);
					return;
				}
				if (rows[0].holiday == 1){
					bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
					return;
				}

				var player_id = rows[0].id;
				var money = parseInt(rows[0].money);

				connection.query('SELECT item.name, item.id, item.value FROM item, inventory WHERE inventory.item_id = item.id AND item.name="' + oggetto + '" AND inventory.player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Oggetto non valido.", store);
						return;
					}
					if (Object.keys(rows).length < quantity){
						bot.sendMessage(message.chat.id, "Non hai abbastanza oggetti", store);
						return;
					}
					var item_id = rows[0].id;
					var itemName = rows[0].name;
					var singleValue = Math.round(parseInt(rows[0].value)/2);
					var value = singleValue*quantity;

					if (crazyMode == 1){
						value = value+(value*10/100);
					}

					connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 677', function(err, rows, fields) {

						var bonus = ""
						if (rows[0].cnt > 0){
							value = value+Math.round(value/3);
							bonus = ", aumentati grazie al Coupon";
							var rand = Math.random()*100;
							if (rand < 30){
								bonus += " (Appena Scaduto)";
								connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 677 LIMIT 1', function(err, rows, fields) {
									if (err) throw err;
								});
							}
						}

						setAchievement(message.chat.id, player_id, 7, value);

						var newmoney = money+value;

						connection.query('UPDATE player SET money = ' + newmoney + ' WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							var d = new Date();
							var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
							for (var i = 0; i < quantity; i++) {
								connection.query('INSERT INTO market_direct_history(item_id, price, time, from_id, to_id, buyer, type) VALUES (' + item_id + ',' + singleValue + ',"' + long_date + '",' + player_id + ',0,"Negozio",3)', function(err, rows, fields) {
									if (err) throw err;
								});
							};

							connection.query('DELETE FROM `inventory` WHERE `player_id`=' + player_id + ' AND `item_id`=' + item_id + ' LIMIT ' + quantity, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai venduto " + quantity + "x " + itemName + " per " + value + " ¬ß" + bonus, store);
							});

						});
					});
				});
			});
		};
	});
});

bot.onText(/compra/i, function(message) {

	if (crazyMode == 1){
		bot.sendMessage(message.chat.id, "Non puoi acquistare durante il weekend folle", back);
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var money = rows[0].money;
		var player_id = rows[0].id;

		var oggetto = message.text.substring(message.text.indexOf(" ")+1);
		var price_drop = 0;
		var n = new Date().getDay()
		var n2 = new Date().getDate();

		if (n == 0){
			if (n2 < 7){
				sconto = 20;
			}
			price_drop = 1;
		}

		if ((oggetto == "") || (oggetto == " ")){
			return;
		}

		var store = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna all'emporio"],["Torna al menu"]]
			}
		};

		var pos = oggetto.indexOf("(");
		if (pos != -1){
			oggetto = oggetto.substr(0, pos-1);
		}

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 7', function(err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0){
				abBonus = rows[0].ability_level*rows[0].val;

				var rand = Math.random()*100;
				if (rand < abBonus){
					abBonus = 1;
				}
			}

			if (oggetto.indexOf("Scrigno") != -1){
				connection.query('SELECT value, id FROM chest WHERE `name`="' + oggetto + '" AND id < 7', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Scrigno non valido.", store);
						return;
					}
					var chest_id = rows[0].id;

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["1"],["2"],["3"],["4"],["5"],["10"],["Torna al menu"]]
						}
					};

					bot.sendMessage(message.chat.id, "Seleziona la quantit√† di scrigni da acquistare", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var quantity = answer.text;
							if (quantity == "Torna al menu"){
								return;
							}
							if ((quantity < 1) || (re.test(quantity) == false)){
								bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
								return;
							}

							var price = rows[0].value;

							if (price_drop == 1){
								price -= Math.round((rows[0].value/100)*sconto);
							}

							quantity = Math.floor(quantity);
							price = price*parseInt(quantity);

							connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;

								if (rows[0].money-price < 0){
									bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione.", store);
									return;
								}

								var bonus_text = "";
								if (abBonus == 1){
									price = Math.round(price/2);
									bonus_text = " grazie al tuo talento!";
								}

								setAchievement(message.chat.id, player_id, 14, quantity, chest_id);

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									for (var i = 0; i < quantity; i++) {
										connection.query('INSERT INTO `inventory_chest`(`player_id`, `chest_id`) VALUES (' + player_id + ',' + chest_id + ')', function(err, rows, fields) {
											if (err) throw err;
										});
									};
									bot.sendMessage(message.chat.id, "Acquisto completato con successo! Hai speso " + price + " ¬ß" + bonus_text, store);
								});
							});
						};
					});
				});
			}else if (oggetto.indexOf("Pozione") != -1){
				if (crazyMode == 1){
					bot.sendMessage(message.chat.id, "Non puoi acquistare pozioni durante il weekend folle", back);
					return;
				}
				connection.query('SELECT id FROM item WHERE name = "' + oggetto + '"', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Pozione non valida.", store);
						return;
					}
					var potion_id = rows[0].id;

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["1"],["2"],["3"],["4"],["5"],["10"],["Torna al menu"]]
						}
					};


					bot.sendMessage(message.chat.id, "Seleziona la quantit√† di pozioni da acquistare", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var quantity = answer.text;
							if (quantity == "Torna al menu"){
								return;
							}
							if ((quantity < 1) || (re.test(quantity) == false)){
								bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
								return;
							}

							quantity = parseInt(quantity);
							quantity = Math.floor(quantity);

							var value = 0;
							if (potion_id == "92"){
								value = 1200;
							}else if (potion_id == "93"){
								value = 2400;
							}else if (potion_id == "94"){
								value = 4800;
							}else{
								bot.sendMessage(message.chat.id, "Errore sconosciuto", store);
								return;
							}

							var price = parseInt(value);

							if (price_drop == 1){
								price -= Math.round(value/100)*sconto;
							}

							price = price*quantity;
							connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;

								if (rows[0].money-price < 0){
									bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione.", store);
									return;
								}

								var bonus_text = "";
								if (abBonus == 1){
									price = Math.round(price/2);
									bonus_text = " grazie al tuo talento!";
								}

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									for (var i = 0; i < quantity; i++) {
										connection.query('INSERT INTO `inventory`(`player_id`, `item_id`) VALUES (' + player_id + ',' + potion_id + ')', function(err, rows, fields) {
											if (err) throw err;
										});
									};
									bot.sendMessage(message.chat.id, "Acquisto completato con successo! Hai speso " + price + " ¬ß" + bonus_text, store);
								});
							});
						};
					});
				});
			}else if (oggetto.indexOf("Bevanda Energetica") != -1){
				bot.sendMessage(message.chat.id, "Acquistare? La bevanda verr√† attivata immediatamente! Attento, se hai una bevanda (di qualsiasi tipo) gi√† attiva, l'acquisto della nuova la rimpiazzer√†.", yesno).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text.toLowerCase() == "si"){
							var price = 20000;
							var missions = 3;

							if (oggetto.indexOf("Plus") != -1){
								price = 38000;
								missions = 6;
							}

							if (price_drop == 1){
								price -= Math.round((price/100)*sconto);
							}

							connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;

								if (rows[0].money-price < 0){
									bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione.", store);
									return;
								}

								var bonus_text = "";
								if (abBonus == 1){
									price = Math.round(price/2);
									bonus_text = " grazie al tuo talento!";
								}

								setAchievement(message.chat.id, player_id, 16, 1);

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									connection.query('UPDATE `player` SET `boost_id`=1, boost_mission = ' + missions + ' WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Acquisto completato con successo! Hai speso " + price + " ¬ß" + bonus_text, store);
									});
								});	
							});
						}
					};
				});
			}else if ((oggetto.indexOf("Piuma di Fenice") != -1) || (oggetto.indexOf("Cenere di Fenice") != -1)){
				if (crazyMode == 1){
					bot.sendMessage(message.chat.id, "Non puoi acquistare piume o cenere durante il weekend folle", back);
					return;
				}
				connection.query('SELECT id, name FROM item WHERE `name`="' + oggetto + '"', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						bot.sendMessage(message.chat.id, "Oggetto non valido.", store);
						return;
					}
					var item_id = rows[0].id;

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["1"],["2"],["3"],["4"],["5"],["10"],["Torna al menu"]]
						}
					};

					var name = rows[0].name;
					bot.sendMessage(message.chat.id, "Seleziona la quantit√† di " + name + " da acquistare", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var quantity = answer.text;
							if (quantity == "Torna al menu"){
								return;
							}
							if ((quantity < 1) || (re.test(quantity) == false)){
								bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
								return;
							}

							quantity = parseInt(quantity);
							quantity = Math.floor(quantity);

							var value = 0;
							if (name == "Piuma di Fenice"){
								value = 6000;
							}else if (name == "Cenere di Fenice"){
								value = 25000;
							}
							var price = parseInt(value);

							if (price_drop == 1){
								price -= Math.round(value/100)*sconto;
							}

							price = price*quantity;

							connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;

								if (rows[0].money-price < 0){
									bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione.", store);
									return;
								}

								var bonus_text = "";
								if (abBonus == 1){
									price = Math.round(price/2);
									bonus_text = " grazie al tuo talento!";
								}

								if (name == "Piuma di Fenice"){
									setAchievement(message.chat.id, player_id, 17, quantity);
								}

								connection.query('UPDATE player SET money = money-' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									for (var i = 0; i < quantity; i++) {
										connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + item_id + ')', function(err, rows, fields) {
											if (err) throw err;
										});
									};
									bot.sendMessage(message.chat.id, "Acquisto di " + quantity + "x " + name + " completato con successo! Hai speso " + price + " ¬ß" + bonus_text, store);
								});
							});
						};
					});
				});
			}else if (oggetto.indexOf("Gemma") != -1){
				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["1"],["2"],["3"],["4"],["5"],["10"],["Torna al menu"]]
					}
				};

				if (player_id != 1){
					var d = new Date();
					if (d.getDay != 3){
						if ((d.getHours < 9) || (d.getHours > 12)){
							bot.sendMessage(message.chat.id, "Le gemme possono essere acquistate solamente il mercoled√¨ mattina (9-12)", store);
							return;
						}
					}
				}

				bot.sendMessage(message.chat.id, "Seleziona la quantit√† di gemme da acquistare", kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						var quantity = answer.text;
						if (quantity == "Torna al menu"){
							return;
						}
						if ((quantity < 1) || (re.test(quantity) == false)){
							bot.sendMessage(message.chat.id, "Quantit√† non valida", store);
							return;
						}

						quantity = parseInt(quantity);
						quantity = Math.floor(quantity);

						var value = 150000;
						var price = parseInt(value);

						if (price_drop == 1){
							//	price -= Math.round(value/100)*sconto;
						}

						price = price*quantity;

						connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;

							if (rows[0].money-price < 0){
								bot.sendMessage(message.chat.id, "Non hai abbastanza credito a disposizione.", store);
								return;
							}

							var bonus_text = "";
							if (abBonus == 1){
								price = Math.round(price/2);
								bonus_text = " grazie al tuo talento!";
							}

							connection.query('UPDATE player SET money = money-' + price + ', gems = gems + ' + quantity + ' WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Acquisto completato con successo! Hai speso " + price + " ¬ß" + bonus_text, store);
							});
						});
					};
				});
			}
		});
	});
});

bot.onText(/^Artefatti|Torna agli artefatti/i, function(message) {
	//if (message.from.username != "fenix45"){
	//	bot.sendMessage(message.chat.id, "Non √® ancora giunto il momento giovane xxxawan!", back);
	//	return;
	//}

	var artifacts = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Artefatto Fiammeggiante"],["Artefatto Elettrico"],["Artefatto Tempesta"],["Artefatto Buio"],["Artefatto Divinatorio"],["Torna al menu"]]
		}
	};

	var get = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Ottieni Artefatto"],["Torna agli artefatti"],["Torna al menu"]]
		}		
	};

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;

		if (rows[0].reborn < 4){
			bot.sendMessage(message.chat.id, "Per accedere agli artefatti devi aver raggiunto almeno la Rinascita 3", back);
			return;
		}

		connection.query('SELECT COUNT(id) As cnt FROM artifacts WHERE player_id = ' + player_id, function (err, rows, fields){
			if (err) throw err;

			if (rows[0].cnt == 5){
				bot.sendMessage(message.chat.id, "Hai ottenuto tutti gli Artefatti!", back);
				return;
			}

			bot.sendMessage(message.chat.id, 	"Gli Artefattiüåü sono degli strumenti di *incredibile potenza*, che una volta uniti insieme possono fornire una forza sovraumana.\n" +
							"Tuttavia per ottenerli √® necessario completare diverse *'prove'* riservate solo ai migliori combattenti.\n" +
							"A quale artefatto vuoi aspirare?", artifacts).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text == "Artefatto Fiammeggiante"){
						bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi raggiungere 85 punti dungeon e possedere 5.000.000 ¬ß, questi ultimi ti verranno sottratti per completare il rituale.", get).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if (answer.text == "Ottieni Artefatto"){
									connection.query('SELECT id FROM artifacts WHERE item_id = 614 AND player_id = ' + player_id, function (err, rows, fields){
										if (err) throw err;

										if (Object.keys(rows).length > 0){
											bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
											return;
										}

										connection.query('SELECT * FROM player WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;

											var money = rows[0].money;
											var rank = rows[0].rank;

											if (money < 5000000){
												bot.sendMessage(message.chat.id, "Non hai abbastanza monete (" + formatNumber(money) + "/5.000.000)", back);
												return;
											}

											if (rank < 85){
												bot.sendMessage(message.chat.id, "Non hai abbastanza punti rango (" + rank + "/85)", back);
												return;
											}

											connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ',614)', function (err, rows, fields){
												if (err) throw err;
												connection.query('UPDATE player SET money = money - ' + 5000000 + ' WHERE id = ' + player_id, function (err, rows, fields){
													if (err) throw err;
													connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',614)', function (err, rows, fields){
														if (err) throw err;
														bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Fiammeggiante*!", back);
													});
												});
											});
										});
									});
								}
							}
						});
					}else if (answer.text == "Artefatto Elettrico"){
						connection.query('SELECT id FROM artifacts WHERE item_id = 614 AND player_id = ' + player_id, function (err, rows, fields){
							if (err) throw err;

							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Fiammeggiante*!", back);
								return;
							}

							bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi raggiungere 10.000 punti creazione, il drago al livello 100 e possedere 10.000.000 ¬ß, questi ultimi ti verranno sottratti per completare il rituale.", get).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text == "Ottieni Artefatto"){
										connection.query('SELECT id FROM artifacts WHERE item_id = 615 AND player_id = ' + player_id, function (err, rows, fields){
											if (err) throw err;

											if (Object.keys(rows).length > 0){
												bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
												return;
											}

											connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;

												if ((Object.keys(rows).length > 0) && (rows[0].level < 100)){
													bot.sendMessage(message.chat.id, "Il tuo drago non √® ad un livello abbastanza alto", back);
													return;
												}

												connection.query('SELECT * FROM player WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													var money = rows[0].money;
													var craft_count = rows[0].craft_count;

													if (money < 10000000){
														bot.sendMessage(message.chat.id, "Non hai abbastanza monete (" + formatNumber(money) + "/10.000.000)", back);
														return;
													}

													if (craft_count < 10000){
														bot.sendMessage(message.chat.id, "Non hai abbastanza punti creazione (" + craft_count + "/10.000)", back);
														return;
													}

													connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ',615)', function (err, rows, fields){
														if (err) throw err;
														connection.query('UPDATE player SET money = money - ' + 10000000 + ' WHERE id = ' + player_id, function (err, rows, fields){
															if (err) throw err;
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',615)', function (err, rows, fields){
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Elettrico*!", back);
															});
														});
													});
												});
											});
										});
									}
								}
							});
						});
					}else if (answer.text == "Artefatto Tempesta"){
						connection.query('SELECT id FROM inventory WHERE item_id = 615 AND player_id = ' + player_id, function (err, rows, fields){
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Elettrico*!", back);
								return;
							}
							bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi portare al livello 10 almeno 5 Talenti, possedere 20 Gemme (verranno consumate) e raggiungere le 100 Imprese giornaliere completate.", get).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text == "Ottieni Artefatto"){
										connection.query('SELECT id FROM artifacts WHERE item_id = 644 AND player_id = ' + player_id, function (err, rows, fields){
											if (err) throw err;

											if (Object.keys(rows).length > 0){
												bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
												return;
											}

											connection.query('SELECT COUNT(id) As num FROM ability WHERE player_id = ' + player_id + ' AND ability_level = 10', function(err, rows, fields) {
												if (err) throw err;

												if (rows[0].num < 5){
													bot.sendMessage(message.chat.id, "I Talenti non sono ancora ad un livello sufficiente", back);
													return;
												}

												connection.query('SELECT * FROM player WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													if (rows[0].achievement_count < 100){
														bot.sendMessage(message.chat.id, "Non hai abbastanza punti imprese (" + rows[0].achievement_count + "/100)", back);
														return;
													}

													if (rows[0].gems < 20){
														bot.sendMessage(message.chat.id, "Non hai abbastanza gemme (" + rows[0].gems + "/20)", back);
														return;
													}

													connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ',644)', function (err, rows, fields){
														if (err) throw err;
														connection.query('UPDATE player SET gems = gems - ' + 20 + ' WHERE id = ' + player_id, function (err, rows, fields){
															if (err) throw err;
															connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',644)', function (err, rows, fields){
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Tempesta*!", back);
															});
														});
													});
												});
											});
										});
									}
								}
							});
						});
					}else if (answer.text == "Artefatto Buio"){
						connection.query('SELECT id FROM inventory WHERE item_id = 644 AND player_id = ' + player_id, function (err, rows, fields){
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Tempesta*!", back);
								return;
							}
							bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi aver completato 1000 missioni, vinto 400 ispezioni (effettuate o respinte), e ottenuto 2000 Polvere (S).", get).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text == "Ottieni Artefatto"){
										connection.query('SELECT id FROM artifacts WHERE item_id = 648 AND player_id = ' + player_id, function (err, rows, fields){
											if (err) throw err;

											if (Object.keys(rows).length > 0){
												bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
												return;
											}

											connection.query('SELECT mission_count FROM player WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;

												if (rows[0].mission_count < 1000){
													bot.sendMessage(message.chat.id, "Non hai completato abbastanza missioni (" + rows[0].mission_count + "/1000)", back);
													return;
												}

												connection.query('SELECT from_id, COUNT(from_id) As cnt FROM heist_history WHERE from_id = ' + player_id + ' AND fail = 0', function(err, rows, fields) {
													if (err) throw err;

													var cnt = 0;
													cnt = parseInt(rows[0].cnt);

													connection.query('SELECT to_id, COUNT(to_id) As cnt FROM heist_history WHERE to_id = ' + player_id + ' AND fail > 0', function(err, rows, fields) {
														if (err) throw err;

														cnt = cnt + parseInt(rows[0].cnt);
														if (cnt < 400){
															bot.sendMessage(message.chat.id, "Non hai vinto abbastanza ispezioni (" + cnt + "/400)", back);
															return;
														}

														connection.query('SELECT COUNT(*) As qnt FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 646', function (err, rows, fields){
															if (err) throw err;

															if (rows[0].qnt < 2000){
																bot.sendMessage(message.chat.id, "Non hai raccolto abbastanza polvere (" + rows[0].qnt + "/2000)", back);
																return;
															}

															connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ',648)', function (err, rows, fields){
																if (err) throw err;
																connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 646 LIMIT 2000', function (err, rows, fields){
																	if (err) throw err;
																	connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',648)', function (err, rows, fields){
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Buio*!", back);
																	});
																});
															});
														});
													});
												});
											});
										});
									}
								}
							});
						});
					}else if (answer.text == "Artefatto Divinatorio"){
						connection.query('SELECT id FROM inventory WHERE item_id = 648 AND player_id = ' + player_id, function (err, rows, fields){
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Devi prima ottenere l'*Artefatto Buio*!", back);
								return;
							}

							bot.sendMessage(message.chat.id, "Per ottenere questo artefatto devi:\n" +
											"> Raggiungere il livello 1000\n" +
											"> Aver raggiunto rango 400\n" +
											"> Aver completato 20 scalate complete nello stesso team\n" +
											"> Aver venduto almeno 300 oggetti al Contrabbandiere\n" +
											"> Aver partecipato e aiutato a vincere 5 imprese globali\n\n" +
											"L'artefatto √® pronto ma non pu√≤ essere ancora ottenuto in quanto potrebbe essere aggiornato lievemente", get).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text == "Ottieni Artefatto"){

										if (message.from.username != "fenix45"){
											bot.sendMessage(message.chat.id, "L'artefatto √® pronto ma non pu√≤ essere ancora ottenuto in quanto potrebbe essere aggiornato lievemente, pazienta", back);
											return;
										}

										connection.query('SELECT id FROM artifacts WHERE item_id = 675 AND player_id = ' + player_id, function (err, rows, fields){
											if (err) throw err;

											if (Object.keys(rows).length > 0){
												bot.sendMessage(message.chat.id, "Hai gi√† ottenuto questo artefatto!", back);
												return;
											}

											connection.query('INSERT INTO artifacts (player_id, item_id) VALUES (' + player_id + ',675)', function (err, rows, fields){
												if (err) throw err;
												connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',675)', function (err, rows, fields){
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Hai ottenuto l'*Artefatto Divinatorio*!", back);
												});
											});
										});
									}
								}
							});
						});
					}
				}
			});
		});
	});
});

bot.onText(/^Edificio/i, function(message) {
	connection.query('SELECT id, lore_page FROM player WHERE nickname = "' + message.from.username + '"', function (err, rows, fields){
		if (err) throw err;

		var next = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Indaga oltre"],["Torna al menu"]]
			}		
		};

		var prev = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["D√©j√† vu"],["Torna al menu"]]
			}		
		};

		var house = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Edificio"],["Torna al menu"]]
			}		
		};


		var page = rows[0].lore_page;
		var player_id = rows[0].id;

		if (page == 0){
			bot.sendMessage(message.chat.id, 	"Vi √®, in lontananza, un edificio che non avevi mai scorto prima di adesso; una strana forza magica ti attrae verso quel posto. Ti ci dirigi, per scoprire i segreti celati dietro a tale edificio.\n" +
							"Esso √® fatto da Assi di Legno Lavorato, disposte in modo asimmetrico, e dai buchi che vi si formano si intravedono macabri tavoli vuoti. La porta √® barricata con altre Assi di Legno, e di fronte a essa vi √® affisso un cartello; la scritta, per√≤, √® completamente erosa dal tempo, e vi si legge una sola parola: Lore.\n" +
							"L'insieme di questi aspetti ti fa pienamente comprendere che quest'edificio sia abbandonato da molti anni, e nonostante il tuo istinto d'avventuriero ti dica che il suddetto posto celi dei macabri misteri, decidi di non indagare oltre.", next).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text == "Indaga oltre"){
						connection.query('UPDATE player SET lore_page = 1 WHERE id = ' + player_id, function (err, rows, fields){
							if (err) throw err;
							bot.sendMessage(message.chat.id, "...", house);
						});
					}
				}
			});
		}else{	//Importante che l'ultima sia else e non abbia update
			bot.sendMessage(message.chat.id,	"Un sol monito, pregno di ignoto, ne sovrasta la fragile entrata:\n\n'In missione, erra per effimeri sempiterni'.", prev).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text == "D√©j√† vu"){
						connection.query('UPDATE player SET lore_page = 0 WHERE id = ' + player_id, function (err, rows, fields){
							if (err) throw err;
							bot.sendMessage(message.chat.id, "...", house);
						});
					}
				};
			});
		}

	});
});

bot.onText(/^Albero Talenti$|Albero/i, function(message) {

	var next = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Albero Talenti"],["Torna al menu"]]
		}		
	};

	var prev = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna all'Albero"],["Torna al menu"]]
		}		
	};

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var my_money = rows[0].money;
		var iKeys = [];

		if ((Math.floor(rows[0].exp/10) < 50) && (rows[0].reborn == 1)){
			bot.sendMessage(message.chat.id, "Devi aver raggiunto almeno il livello 50 per accedere a questa funzionalit√†", back);
			return;
		}

		connection.query('SELECT ability.ability_id, ability.ability_level, ability_list.name, ability_list.val, ability_list.det FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var ablist = "";
			var abarr = [];
			var abname = [];

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (rows[i].ability_level == 10){
					ablist += "> *" + rows[i].name + "* (Liv " + rows[i].ability_level + ", " + (rows[i].ability_level*rows[i].val) + rows[i].det + ")\n";
				}else{
					ablist += "> " + rows[i].name + " (Liv " + rows[i].ability_level + ", " + (rows[i].ability_level*rows[i].val) + rows[i].det + ")\n";
				}
				abarr[rows[i].ability_id] = rows[i].ability_level;
			}

			connection.query('SELECT name, id FROM ability_list', function(err, rows, fields) {
				if (err) throw err;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					iKeys.push([rows[i].name]);
					abname[rows[i].id] = rows[i].name;
				}
				iKeys.push(["Torna al menu"]);

				var ability_list = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": iKeys
					}
				};

				bot.sendMessage(message.chat.id, "Seleziona il Talento da apprendere o potenziare\n" + ablist, ability_list).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text == "Torna al menu"){
							return;
						}
						connection.query('SELECT * FROM ability_list WHERE name = "' + answer.text + '"', function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Talento non valido", prev);
								return;
							}

							var ability_id = rows[0].id;
							var ability_desc = rows[0].description;
							var ability_prev = rows[0].prev;
							var ability_name = rows[0].name;
							var val = rows[0].val;
							var sym = rows[0].det;

							if (ability_prev != 0){
								if (abarr[ability_prev] == undefined){
									bot.sendMessage(message.chat.id, "Questo Talento richiede prima il potenziamento di: " + abname[ability_prev], prev);
									return;
								}else{
									if (abarr[ability_prev] < 10){
										bot.sendMessage(message.chat.id, "Questo Talento richiede prima il potenziamento al livello massimo di: " + abname[ability_prev], prev);
										return;
									}
								}
							}

							connection.query('SELECT ability_level FROM ability WHERE player_id = ' + player_id + ' AND ability_id = ' + ability_id, function(err, rows, fields) {
								if (err) throw err;

								var text = "Caratteristiche Talento " + ability_name + " :\n" + ability_desc;
								var text2 = "";
								var text3 = "\n\nFornisce: ";
								var text4 = "\nLivello massimo: ";
								var money = 0;
								var itemid = 0;
								var itemqnt = 0;
								var learn = "apprendere questo talento";
								var level = 0;
								var maxlev = 0;
								var forlevel = "per livello";

								if (Object.keys(rows).length > 0){
									level = parseInt(rows[0].ability_level);
									learn = "potenziare questo talento al livello " + (level+1);
								}

								if (ability_id == 1){			// 1% ogni livello
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level == 0){
										money = 300000;
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Scheggia di Hatrurite";
										itemid = 91;
									}else if (level == 1){
										money = 400000;
										itemqnt = 2;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Scheggia di Palladio";
										itemid = 151;
									}else if (level >= 2){
										money = 500000;
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Componente Ultra Cristallo";
										itemid = 562;
									}
								}else if (ability_id == 2){		// 100 monete ogni livello
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 10){
										money = 5000*(level+1);
										itemqnt = (level+1);
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Ala della Fenice";
										itemid = 345;
									}
								}else if (ability_id == 3){		// -30 secondi ogni livello
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 10){
										money = 50000*(level+1);
										itemqnt = (level*2);
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Lama Maledetta";
										itemid = 104;
									}
								}else if (ability_id == 4){		// +2% riuscita ispezione
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 5){
										money = 50000*(level+1);
										itemqnt = (level*2);
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Sfera Tempesta";
										itemid = 296;
									}else if (level < 10){
										money = 25000*(level+1);
										itemqnt = (level*2);
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Spirito di Palladio";
										itemid = 357;
									}
								}else if (ability_id == 5){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 5){
										money = 10000*(level+1);
										itemqnt = level;
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Frammento Divino";
										itemid = 190;
									}else if (level < 10){
										money = 10000*(level+1);
										itemqnt = level;
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Nucleo Supernova";
										itemid = 565;
									}
								}else if (ability_id == 6){
									text3 += val + sym + ", +10% probabilit√† di tornare in vita con il 50% di salute " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 2){
										money = 25000*(level+1);
										itemqnt = 300;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Polvere";
										itemid = 646;
									}else if (level < 4){
										money = 50000*(level+1);
										itemqnt = 30;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Oro Bianco";
										itemid = 276;
									}else if (level < 5){
										money = 50000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Urlo di Morte";
										itemid = 532;
									}else if (level < 6){
										money = 50000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Respiro di Morte";
										itemid = 201;
									}else if (level < 7){
										money = 75000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Soffio di Morte";
										itemid = 598;
									}else if (level < 8){
										money = 50000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Necronucleo";
										itemid = 200;	
									}else if (level < 9){
										money = 100000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Concentrato Ultraterreno Vulcano";
										itemid = 636;
									}else if (level < 10){
										money = 100000*(level+1);
										itemqnt = 2;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Concentrato Ultraterreno Tsunami";
										itemid = 637;
									}
								}else if (ability_id == 7){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 1){
										money = 50000*(level+1);
										itemqnt = 50;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Cuscino";
										itemid = 10;
									}else if (level < 2){
										money = 50000*(level+1);
										itemqnt = 40;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Molla";
										itemid = 11;
									}else if (level < 3){
										money = 50000*(level+1);
										itemqnt = 30;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Metallo";
										itemid = 23;
									}else if (level < 4){
										money = 50000*(level+1);
										itemqnt = 30;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Carta";
										itemid = 1;
									}else if (level < 6){
										money = 50000*(level+1);
										itemqnt = 30;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Cordino Fragile";
										itemid = 5;
									}else if (level < 8){
										money = 50000*(level+1);
										itemqnt = 25;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Diamante";
										itemid = 9;
									}else if (level < 10){
										money = 50000*(level+1);
										itemqnt = 25;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Pietra del Sangue";
										itemid = 20;
									}
								}else if (ability_id == 8){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 1){
										money = 50000*(level+1);
										itemqnt = 3;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Rubino del Dio Vulcano";
										itemid = 451;
									}else if (level < 2){
										money = 50000*(level+1);
										itemqnt = 2;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Pendolo";
										itemid = 403;
									}else if (level < 4){
										money = 50000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Spirito del Fato";
										itemid = 288;
									}else if (level < 5){
										money = 50000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Struttura della Piramide Meteorite";
										itemid = 427;
									}else if (level < 6){
										money = 60000*(level+1);
										itemqnt = 10;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Frammento di Osmio";
										itemid = 663;
									}else if (level < 7){
										money = 60000*(level+1);
										itemqnt = 10;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Zaffiro del Dio Eolo";
										itemid = 450;
									}else if (level < 8){
										money = 60000*(level+1);
										itemqnt = 20;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Smeraldo della Dea Gea";
										itemid = 452;
									}else if (level < 9){
										money = 70000*(level+1);
										itemqnt = 20;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Mithril";
										itemid = 311;
									}else if (level < 9){
										money = 80000*(level+1);
										itemqnt = 20;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Elemento Zero";
										itemid = 323;
									}else if (level < 10){
										money = 90000*(level+1);
										itemqnt = 40;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Laccio Antico";
										itemid = 406;
									}
								}else if (ability_id == 9){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 5){
										money = 15000*(level+1);
										itemqnt = (level+1);
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Propulsore X";
										itemid = 202;
									}else if (level < 10){
										money = 15000*(level+1);
										itemqnt = (level+1)-5;
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Generatore del Vuoto";
										itemid = 321;
									}
								}else if (ability_id == 10){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 5){
										money = 20000*(level+1);
										itemqnt = (level+1);
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Anima delle Ere";
										itemid = 317;
									}else if (level < 10){
										money = 30000*(level+1);
										itemqnt = (level+1)-5;
										if (itemqnt == 0){
											itemqnt = 1;
										}
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Batteria Infinita";
										itemid = 479;
									}
								}else if (ability_id == 11){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 10){
										money = 30000*(level+1);
										itemqnt = (level+1);
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Plutonio";
										itemid = 238;
									}
								}else if (ability_id == 12){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 5){
										money = 30000*(level+1);
										itemqnt = (level+1);
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Lama Celeste";
										itemid = 102;
									}else if (level < 10){
										money = 35000*(level+1);
										itemqnt = (level+1);
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Manico Diabolico";
										itemid = 103;
									}
								}else if (ability_id == 13){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 3){
										money = 10000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Respiro di Morte";
										itemid = 201;
									}else if (level < 6){
										money = 10000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Urlo di Morte";
										itemid = 532;
									}else if (level < 8){
										money = 10000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Soffio di Morte";
										itemid = 598;
									}else if (level < 10){
										money = 10000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Necronucleo";
										itemid = 200;
									}
								}else if (ability_id == 14){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 2){
										money = 50000*(level+1);
										itemqnt = 10;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Gesso";
										itemid = 142;
									}else if (level < 6){
										money = 100000*(level+1);
										itemqnt = 5;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Ambra";
										itemid = 223;
									}else if (level < 8){
										money = 100000*(level+1);
										itemqnt = 10;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Mithril";
										itemid = 311;
									}else if (level < 10){
										money = 150000*(level+1);
										itemqnt = 10;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Generatore di Ioni";
										itemid = 165;
									}
								}else if (ability_id == 15){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 5){
										money = 20000*(level+1);
										itemqnt = 5;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Anfora di Vento";
										itemid = 428;
									}else if (level < 10){
										money = 50000*(level+1);
										itemqnt = 10;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Stemma Ciclonico";
										itemid = 434;
									}
								}else if (ability_id == 16){
									text3 += val + sym + " " + forlevel;
									maxlev = 10;
									text4 += maxlev;
									if (level < 3){
										money = 100000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Runa Supernova";
										itemid = 343;
									}else if (level < 5){
										money = 200000*(level+1);
										itemqnt = 1;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Carica G";
										itemid = 529;
									}else if (level < 8){
										money = 300000*(level+1);
										itemqnt = 3;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Nucleo Celeste";
										itemid = 625;
									}else if (level < 9){
										money = 400000*(level+1);
										itemqnt = 3;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Nucleo Cremisi";
										itemid = 624;
									}else if (level < 10){
										money = 500000*(level+1);
										itemqnt = 3;
										text2 += "\n> " + formatNumber(money) + " ¬ß";
										text2 += "\n> " + itemqnt + "x Nucleo Elettrico";
										itemid = 623;
									}
								}else{
									bot.sendMessage(message.chat.id, "Talento non valido", prev);
									return;
								}

								if (level >= maxlev){
									bot.sendMessage(message.chat.id, text + text3 + "\nLivello massimo raggiunto", prev);
									return;
								}

								var text5 = "";
								var check = 0;
								if (my_money < money){
									text5 = "\nüö´ Monete non sufficienti (" + formatNumber(my_money) + " su " + formatNumber(money) + ")";
									check++;
								}

								connection.query('SELECT COUNT(*) As cnt, item.name FROM inventory, item WHERE inventory.item_id = item.id AND player_id = ' + player_id + ' AND item_id = ' + itemid, function(err, rows, fields) {
									if (err) throw err;

									if (rows[0].cnt < itemqnt){
										text5 = "\nüö´ Oggetti non sufficienti (" + rows[0].cnt + " su " + itemqnt + ")";
										check++;
									}

									if (check == 2){
										text5 = "\nüö´ Oggetti e monete non sufficienti";
									}
									if (check == 0){
										text5 = "\n‚úÖ Possiedi tutto il necessario";
									}

									var ability_pot = {
										parse_mode: "Markdown",
										reply_markup: {
											resize_keyboard: true,
											//one_time_keyboard: true,
											"keyboard": [["Conferma"],["Cerca " + rows[0].name],["Torna all'Albero"]]
										}		
									};

									bot.sendMessage(message.chat.id, text + "\n\nPer " + learn + " sono necessari:" + text2 + text5 + text3 + text4, ability_pot).then(function() {
										answerCallbacks[message.chat.id] = function(answer) {
											if (answer.text.toLowerCase() == "conferma"){
												connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													if (rows[0].money - money < 0){
														bot.sendMessage(message.chat.id, "Non hai abbastanza monete", prev);
														return;
													}

													if (level >= maxlev){
														bot.sendMessage(message.chat.id, "Questo talento √® stato potenziato al massimo", prev);
														return;
													}

													connection.query('SELECT id, COUNT(*) As num FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + itemid, function(err, rows, fields) {
														if (err) throw err;

														if (rows[0].num < itemqnt){
															bot.sendMessage(message.chat.id, "Non hai abbastanza oggetti necessari", prev);
															return;
														}

														setAchievement(message.chat.id, player_id, 18, 1);

														connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;

															connection.query('SELECT * FROM ability WHERE player_id = ' + player_id + ' AND ability_id = ' + ability_id, function(err, rows, fields) {
																if (err) throw err;

																if (Object.keys(rows).length > 0){
																	connection.query('UPDATE ability SET ability_level = ability_level+1 WHERE player_id = ' + player_id + ' AND ability_id = ' + ability_id, function(err, rows, fields) {
																		if (err) throw err;
																		connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + itemid + ' LIMIT ' + itemqnt, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Talento potenziato! Livello: *" + level + " -> " + (level+1) + "*", prev);
																		});
																	});
																}else{
																	connection.query('INSERT INTO ability (player_id, ability_level, ability_id) VALUES (' + player_id + ',1,' + ability_id + ')', function(err, rows, fields) {
																		if (err) throw err;
																		connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + itemid + ' LIMIT ' + itemqnt, function(err, rows, fields) {
																			if (err) throw err;
																			bot.sendMessage(message.chat.id, "Talento appreso!", prev);
																		});
																	});
																}
															});
														});
													});
												});
											}
										};
									});
								});
							});
						});
					};
				});
			});
		});
	});
});

bot.onText(/equipaggia/i, function(message) {

	if (message.text == "Equipaggia Drago"){
		return;
	}

	var equip = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Equipaggia Ancora"],["Torna allo zaino"],["Torna al menu"]]
		}
	};

	var oggetto = message.text.substring(message.text.indexOf(" ")+1, message.text.lenght);
	if ((message.text.indexOf(" ") != -1) && (oggetto != "Ancora")){
		connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
			if (err) throw err;

			var account_id = (rows[0].account_id).toString();
			if (banlist_id.indexOf(account_id) != -1){
				var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
				bot.sendMessage(message.chat.id, text, mark);
				return;
			}

			var player_id = rows[0].id;
			var player_reborn = rows[0].reborn;
			var player_level = Math.floor(rows[0].exp/10);

			if (rows[0].holiday == 1){
				bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
				return;
			}

			bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					var resp = answer.text;
					if (resp.toLowerCase() != "si"){
						return;
					}

					oggetto = oggetto.toLowerCase();

					if (oggetto.indexOf("talismano") != -1){
						connection.query('SELECT * FROM player WHERE charm_id != 0 AND id = ' + player_id, function(err, rows, fields) {						
							if (err) throw err;

							var charm_id = 0;
							if (Object.keys(rows).length > 0){
								charm_id = rows[0].charm_id;
							}
							connection.query('SELECT COUNT(item.name) As num, item.reborn, item.id FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND item.name = "' + oggetto + '"', function(err, rows, fields) {
								if (err) throw err;
								if (rows[0].num > 0){
									if (player_reborn < rows[0].reborn){
										bot.sendMessage(message.chat.id, "Non hai il livello rinascita necessario.", equip);	
										return;
									}

									var itemid = rows[0].id;

									if (charm_id != 0){
										connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + charm_id + ')', function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Il Talismano precedentemente equipaggiato √® tornato nell'inventario", equip);
										});
									}

									connection.query('UPDATE player SET charm_id = ' + itemid + ' WHERE id = ' + player_id , function(err, rows, fields) {
										if (err) throw err;
										connection.query('DELETE FROM inventory WHERE item_id = ' + itemid + ' AND player_id = ' + player_id  + ' LIMIT 1', function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Talismano equipaggiato!", equip);
										});
									});
								}else{
									bot.sendMessage(message.chat.id, "Non puoi equipaggiare questo talismano.", equip);
								}
							});
						});
					}else{
						connection.query('SELECT COUNT(*) As num, item.reborn, item.critical, item.power, item.power_armor, item.power_shield, item.id, item.rarity FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id=' + player_id + ' AND item.name = "' + oggetto + '" AND (item.power <> 0 OR item.power_armor <> 0 OR item.power_shield <> 0)', function(err, rows, fields) {
							if (err) throw err;
							if (rows[0].num > 0){
								var itemid = rows[0].id;
								var power = rows[0].power;
								var power_a = rows[0].power_armor;
								var power_s = rows[0].power_shield;
								var critical = rows[0].critical;
								var reborn = rows[0].reborn;
								var rarity = rows[0].rarity;

								var level_nec = 0;
								if (rarity == "UR"){
									level_nec = 15;
								}else if (rarity == "L"){
									level_nec = 30;
								}else if (rarity == "E"){
									level_nec = 50;
								}else if (rarity == "UE"){
									level_nec = 60;
								}
								if ((player_level < level_nec) && (player_reborn == 1)){
									bot.sendMessage(message.chat.id, "Non hai il livello necessario. (" + level_nec + ")", equip);	
									return;
								}

								if (player_reborn < reborn){
									bot.sendMessage(message.chat.id, "Non hai il livello rinascita necessario.", equip);	
									return;
								}

								if (power != 0){ //Arma
									connection.query('SELECT * FROM player WHERE weapon_id != 0 AND id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										var weapon_id = 0;
										if (Object.keys(rows).length > 0){
											weapon_id = rows[0].weapon_id;
										}

										if ((itemid == 221) || (itemid == 638) || (itemid == 639) || (itemid == 640)){
											power = Math.round(50+(player_level/2));
										}

										if (weapon_id != 0){
											connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon_id + ')', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "L'Arma precedentemente equipaggiata √® tornata nell'inventario", equip);
											});
										}

										connection.query('UPDATE player SET weapon=' + power + ', weapon_id=' + itemid + ', weapon_crit=' + critical + ' WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
											if (err) throw err;
											connection.query('DELETE FROM inventory WHERE item_id = ' + itemid + ' AND player_id = ' + player_id  + ' LIMIT 1', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Arma equipaggiata!", equip);
											});
										});
									});
								}else if (power_a != 0){ //Armatura
									connection.query('SELECT * FROM player WHERE weapon2_id != 0 AND id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										var weapon2_id = 0;
										if (Object.keys(rows).length > 0){
											weapon2_id = rows[0].weapon2_id;
										}

										if ((itemid == 577) || (itemid == 688) || (itemid == 689) || (itemid == 690)){
											power_a = Math.round(25+(player_level/2));
											power_a = -Math.abs(power_a);
										}

										if (weapon2_id != 0){
											connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon2_id + ')', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "L'Armatura precedentemente equipaggiata √® tornata nell'inventario", equip);
											});
										}

										connection.query('UPDATE player SET weapon2=' + power_a  + ', weapon2_id=' + itemid + ', weapon2_crit=' + critical + ' WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
											if (err) throw err;
											connection.query('DELETE FROM inventory WHERE item_id = ' + itemid + ' AND player_id = ' + player_id  + ' LIMIT 1', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Armatura equipaggiata!", equip);
											});
										});
									});
								}else if (power_s != 0) { //Scudo
									connection.query('SELECT * FROM player WHERE weapon3_id != 0 AND id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										var weapon3_id = 0;
										if (Object.keys(rows).length > 0){
											weapon3_id = rows[0].weapon3_id;
										}

										if ((itemid == 600) || (itemid == 671) || (itemid == 672) || (itemid == 673)){
											power_s = Math.round(20+(player_level/2));
											power_s = -Math.abs(power_s);
										}

										if (weapon3_id != 0){
											connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon3_id + ')', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Lo Scudo precedentemente equipaggiato √® tornato nell'inventario", equip);
											});
										}

										connection.query('UPDATE player SET weapon3=' + power_s + ', weapon3_id=' + itemid + ', weapon3_crit=' + critical + ' WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
											if (err) throw err;
											connection.query('DELETE FROM inventory WHERE item_id = ' + itemid + ' AND player_id = ' + player_id  + ' LIMIT 1', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Scudo equipaggiato!", equip);
											});
										});
									});					
								}else{
									bot.sendMessage(message.chat.id, "Non puoi equipaggiare l'oggetto specificato.", equip);
								}
							}else{
								bot.sendMessage(message.chat.id, "Non puoi equipaggiare l'oggetto specificato.", equip);
							}
						});
					}
				};
			});
		});
		return;	
	}

	var bottext = "*Oggetti equipaggiabili:*\n";

	connection.query('SELECT id, charm_id, weapon_id, account_id, weapon2_id, exp, weapon3_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var player_level = Math.floor(rows[0].exp/10);
		var charm_id = rows[0].charm_id;
		var weapon_id = rows[0].weapon_id;
		var weapon2_id = rows[0].weapon2_id;
		var weapon3_id = rows[0].weapon3_id;
		var noequip = 0;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		connection.query('SELECT item.power, item.power_armor, item.power_shield, item.critical, item.name, item.id FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id=' + player_id + ' AND (item.power <> 0 OR item.power_armor <> 0 OR item.power_shield <> 0) GROUP BY item.name', function(err, rows, fields) {
			if (err) throw err;
			var iKeys = [];
			if (Object.keys(rows).length > 0){
				bottext = bottext + "\n*Armi/Protezioni:*\n";
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if ((rows[i].id == 221) || (rows[i].id == 638) || (rows[i].id == 639) || (rows[i].id == 640)){
						rows[i].power = Math.round(50+(player_level/2));
					}
					if ((rows[i].id == 577) || (rows[i].id == 688) || (rows[i].id == 689) || (rows[i].id == 690)){
						rows[i].power_armor = -Math.round(25+(player_level/2));
					}
					if ((rows[i].id == 600) || (rows[i].id == 671) || (rows[i].id == 672) || (rows[i].id == 673)){
						rows[i].power_shield = -Math.round(20+(player_level/2));
					}

					if (rows[i].power != 0){
						if ((rows[i].id == weapon_id) || (rows[i].id == weapon2_id) || (rows[i].id == weapon3_id)){
							bottext = bottext + "> " + rows[i].name + " (+" + rows[i].power + " danno, " + rows[i].critical + ") ‚òëÔ∏è \n";
						}else{
							bottext = bottext + "> " + rows[i].name + " (+" + rows[i].power + " danno, " + rows[i].critical + ")\n";
						}
					}else if (rows[i].power_armor != 0){
						if ((rows[i].id == weapon_id) || (rows[i].id == weapon2_id) || (rows[i].id == weapon3_id)){
							bottext = bottext + "> " + rows[i].name + " (" + rows[i].power_armor + " danno subito, " + rows[i].critical + ") ‚òëÔ∏è \n";
						}else{
							bottext = bottext + "> " + rows[i].name + " (" + rows[i].power_armor + " danno subito, " + rows[i].critical + ")\n";
						}
					}else if (rows[i].power_shield != 0){
						if ((rows[i].id == weapon_id) || (rows[i].id == weapon2_id) || (rows[i].id == weapon3_id)){
							bottext = bottext + "> " + rows[i].name + " (" + rows[i].power_shield + " danno subito, " + rows[i].critical + ") ‚òëÔ∏è \n";
						}else{
							bottext = bottext + "> " + rows[i].name + " (" + rows[i].power_shield + " danno subito, " + rows[i].critical + ")\n";
						}
					}
					iKeys.push(["Equipaggia " + rows[i].name]);
				}
			}else{
				bottext = bottext + "Nessun arma o protezione equipaggiabile.";
				noequip = 1;
			}
			bottext = bottext + "\n";
			connection.query('SELECT item.name, item.id FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND item.name LIKE "Talismano%" GROUP BY item.name', function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0){
					bottext = bottext + "*Talismani:*\n";
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].id == charm_id){
							bottext = bottext + "> " + rows[i].name + " ‚òëÔ∏è \n";
						}else{
							bottext = bottext + "> " + rows[i].name + "\n";
						}
						iKeys.push(["Equipaggia " + rows[i].name]);
					}
				}else{
					bottext = bottext + "Nessun talismano equipaggiabile.";
					noequip = noequip+1;
				}

				if (noequip == 2){
					bot.sendMessage(message.chat.id, bottext, back);
					return;
				}

				iKeys.push(["Niente"]);
				iKeys.push(["Torna allo zaino"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": iKeys
					}
				};

				if (Object.keys(bottext).length > 3800){
					bot.sendMessage(message.chat.id, "Hai troppi oggetti equipaggiabili, usa Equipaggia NomeOggetto per procedere ugualmente", back);
					return;
				}

				bot.sendMessage(message.chat.id, bottext + "\nCosa vuoi equipaggiare?\nQuando equipaggiato l'oggetto verr√† rimosso dall'inventario, usa Rimuovi per disequipaggiarlo", kb);
			});
		});		
	});
});

bot.onText(/rimuovi/i, function(message) {
	var oggetto = "";

	var kbEquip = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Equipaggia"],["Rimuovi"],["Torna allo zaino"],["Torna al menu"]]
		}
	};

	connection.query('SELECT id, holiday, account_id, weapon_id, weapon2_id, weapon3_id, charm_id, mission_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var weapon_id = rows[0].weapon_id;
		var weapon2_id = rows[0].weapon2_id;
		var weapon3_id = rows[0].weapon3_id;
		var charm_id = rows[0].charm_id;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var oggetto = message.text.substring(message.text.indexOf(" ")+1);

		if ((message.text.indexOf(" ") != -1) && (oggetto != " ") && (oggetto != "")){
			bot.sendMessage(message.chat.id, "Confermi?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					var resp = answer.text;
					if (resp.toLowerCase() != "si"){
						return;
					}

					oggetto = oggetto.toLowerCase();

					if (oggetto == "arma"){
						if (weapon_id != 0){
							connection.query('UPDATE player SET weapon=0, weapon_id=0 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon_id + ')', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Arma rimossa dall'equipaggiamento.", kbEquip);
								});
							});
						}else{
							bot.sendMessage(message.chat.id, "Non hai nessun arma equipaggiata.", kbEquip);
						}
					}else if (oggetto == "armatura"){
						if (weapon2_id != 0){
							connection.query('UPDATE player SET weapon2=0, weapon2_id=0 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon2_id + ')', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Armatura rimossa dall'equipaggiamento.", kbEquip);
								});
							});
						}else{
							bot.sendMessage(message.chat.id, "Non hai nessun armatura equipaggiata.", kbEquip);
						}
					}else if (oggetto == "scudo"){
						if (weapon3_id != 0){
							connection.query('UPDATE player SET weapon3=0, weapon3_id=0 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon3_id + ')', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Scudo rimosso dall'equipaggiamento.", kbEquip);
								});
							});
						}else{
							bot.sendMessage(message.chat.id, "Non hai nessuno scudo equipaggiato.", kbEquip);
						}
					}else if (oggetto == "talismano"){
						if (charm_id != 0){
							connection.query('UPDATE player SET charm_id=0 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + charm_id + ')', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Talismano rimosso dall'equipaggiamento.", kbEquip);
								});
							});
						}else{
							bot.sendMessage(message.chat.id, "Non hai nessun talismano equipaggiato", kbEquip);
						}
					}else if (oggetto == "tutto"){
						var text = "";
						if (weapon_id != 0){
							text += "> Arma\n";
							connection.query('UPDATE player SET weapon=0, weapon_id=0 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon_id + ')', function(err, rows, fields) {
									if (err) throw err;
								});
							});
						}
						if (weapon2_id != 0){
							text += "> Armatura\n";
							connection.query('UPDATE player SET weapon2=0, weapon2_id=0 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon2_id + ')', function(err, rows, fields) {
									if (err) throw err;
								});
							});
						}
						if (weapon3_id != 0){
							text += "> Scudo\n";
							connection.query('UPDATE player SET weapon3=0, weapon3_id=0 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + weapon3_id + ')', function(err, rows, fields) {
									if (err) throw err;
								});
							});
						}
						if (charm_id != 0){
							text += "> Talismano\n";
							connection.query('UPDATE player SET charm_id=0 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',' + charm_id + ')', function(err, rows, fields) {
									if (err) throw err;
								});
							});
						}

						if (text == ""){
							bot.sendMessage(message.chat.id, "Non hai alcun oggetto equipaggiato", back);
						}else{
							bot.sendMessage(message.chat.id, text + "\nRimossi e reinseriti nello zaino", back);
						}
					}else{
						bot.sendMessage(message.chat.id, "Equipaggiamento non valido.", back);
						return;
					}
				};
			});			
			return;	
		}


		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Rimuovi Arma","Rimuovi Armatura"],["Rimuovi Scudo","Rimuovi Talismano"],["Rimuovi Tutto"],["Torna allo zaino"],["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, "Cosa vuoi rimuovere?", kb);
	});
});


bot.onText(/torna a crea|crea (.+)/i, function(message) {
	var oggetto = "";
	var inventario = "";
	var bottext = "Oggetti creabili:\n";

	connection.query('SELECT id, holiday, money, reborn, account_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var money = rows[0].money;
		var reborn = rows[0].reborn;

		if (message.text.indexOf("üì¶") == -1){
			if ((message.text.indexOf(" ") != -1) && (message.text != "Torna a Crea")){
				var oggetto = message.text.substring(message.text.indexOf(" ")+1, message.text.lenght);

				if ((oggetto.indexOf("Oggetto") == -1) && (oggetto != "Ancora")){
					var parts = oggetto.split(",");
					var qnt = 1;
					if (Object.keys(parts).length > 1){
						oggetto = parts[0];
						qnt = parts[1].trim();
					}
					//console.log("Creazione di " + qnt + "x " + oggetto);
					creaOggetto(message, player_id, oggetto, money, reborn, parseInt(qnt));
					return;
				}
			}
		}

		connection.query('SELECT item_id FROM inventory WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					inventario = inventario + '"' + rows[i].item_id + '",';
				}
				inventario = inventario.slice(0, -1);
				connection.query('SELECT item.name, item.rarity, item.power, craft.material_1, craft.material_2, craft.material_3 FROM craft, item WHERE craft.material_result = item.id AND material_1 IN (' + inventario + ') AND material_2 IN (' + inventario + ') AND material_3 IN (' + inventario + ') ORDER BY item.name', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].power != 0){
								if (rows[i].power > 0){
									bottext = bottext + "> " + rows[i].name + " (" + rows[i].rarity + ") +" + rows[i].power + " danno\n";
								}else{
									bottext = bottext + "> " + rows[i].name + " (" + rows[i].rarity + ") " + rows[i].power + " danno subito\n";	
								}
							}else{
								bottext = bottext + "> " + rows[i].name + " (" + rows[i].rarity + ")\n";
							}
							iKeys.push(["Crea " + rows[i].name]);
						}
						iKeys.push(["Niente"]);

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						if (Object.keys(bottext).length > 3500){
							bot.sendMessage(message.chat.id, "La tua lista creabili √® troppo lunga, utilizza Crea NomeOggetto per procedere comunque", back);
						}else{
							bot.sendMessage(message.chat.id, bottext + "\nCosto:\nUR 500 ¬ß - L 750 ¬ß - E 1000 ¬ß\nUE 10k ¬ß - U 50k - X 100k ¬ß\nSpecifica la quantit√† per creare pi√π copie! (es. Crea Coltello di Pietra,3)", kb);
						}

						//	connection.query('SELECT item.name, item.rarity, item.power, craft.material_1, craft.material_2, craft.material_3 FROM craft, item WHERE craft.material_result = item.id AND material_1 IN (' + inventario + ') AND material_2 IN (' + inventario + ') AND material_3 IN (' + inventario + ') ORDER BY item.name', function(err, rows, fields) {
						//		if (err) throw err;
						//	});
					}else{
						bot.sendMessage(message.chat.id, "Non puoi fabbricare nessun oggetto.", back);
					}
				});
			}
		});
	});
});

function creaOggetto(message, player_id, oggetto, money, reborn, quantity = 1){
	var inventario = "";

	if (!checkSpam(message)){
		return;
	}

	if (isNaN(quantity)){
		bot.sendMessage(message.chat.id, "Quantit√† non valida", back);
		return;
	}

	quantity = parseInt(quantity);

	if (player_id != 1){
		if ((quantity < 1) || (quantity > 3)){
			bot.sendMessage(message.chat.id, "Puoi creare al massimo 3 copie dello stesso oggetto contemporaneamente", back);
			return;
		}
	}

	if ((eventFestival == 1) && (quantity > 1)){
		bot.sendMessage(message.chat.id, "Non puoi creare oggetti multipli durante il festival", back);
		return;
	}

	connection.query('SELECT id, term FROM search_history WHERE player_id = ' + player_id + ' ORDER BY id DESC LIMIT 2', function(err, rows, fields) {
		if (err) throw err;

		var prevtxt = "";
		var iKeys = [];

		iKeys.push(["Crea " + oggetto]);
		iKeys.push(["Crea Ancora"]);

		if (Object.keys(rows).length == 2){
			prevtxt = "Torna a " + rows[1].term;
			iKeys.push([prevtxt]);
		}

		var craft_fail = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Cerca " + oggetto],["Crea Ancora"],["Torna al menu"]]
			}
		};

		/*
		connection.query('SELECT item_id FROM inventory WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					inventario = inventario + '"' + rows[i].item_id + '",';
				}
				inventario = inventario.slice(0, -1);
		*/

		//connection.query('SELECT craft.material_1, craft.material_2, craft.material_3, craft.material_result, item.name FROM craft, item WHERE craft.material_result = item.id AND material_1 IN (' + inventario + ') AND material_2 IN (' + inventario + ') AND material_3 IN (' + inventario + ') AND item.name = "' + oggetto + '" ORDER BY item.id', function(err, rows, fields) {
		connection.query('SELECT craft.material_1, craft.material_2, craft.material_3, craft.material_result, item.name FROM craft, item WHERE craft.material_result = item.id AND item.name = "' + oggetto + '"', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste", craft_fail);
			}else{
				var mat1 = rows[0].material_1;
				var mat2 = rows[0].material_2;
				var mat3 = rows[0].material_3;
				var matR = rows[0].material_result;
				var craftexp = 0;

				oggetto = rows[0].name;

				connection.query('SELECT name, rarity, reborn, power FROM item WHERE id = ' + matR, function(err, rows, fields) {
					if (err) throw err;

					var result_name = rows[0].name;
					var result_rarity = rows[0].rarity;
					var result_reborn = rows[0].reborn;
					var result_power = rows[0].power;

					if (reborn < result_reborn){
						bot.sendMessage(message.chat.id, "La tua rinascita non √® sufficente per creare questo oggetto.", back);
						return;
					}

					connection.query('SELECT name, rarity, reborn FROM item WHERE id IN (' + mat1 + ',' + mat2 + ',' + mat3 + ')', function(err, rows, fields) {
						if (err) throw err;

						var cost = 0;
						var Rmoney = "";
						if (result_rarity == "L"){
							cost = 750;
							craftexp = 3;
						}else if (result_rarity == "UR"){
							cost = 500;
							craftexp = 2;
						}else if (result_rarity == "E"){
							cost = 1000;
							craftexp = 5;
						}else if (result_rarity == "X"){
							cost = 100000;
							craftexp = 50;
						}else if (result_rarity == "UE"){
							cost = 10000;
							craftexp = 25;
						}else if (result_rarity == "U"){
							cost = 50000;
							craftexp = 35;
						}

						cost = cost*quantity;
						craftexp = craftexp*quantity;

						if (cost > 0)
							Rmoney = "\n> " + formatNumber(cost) + " ¬ß";

						var n1 = rows[0].name;
						var n2 = rows[1].name;
						var n3 = rows[2].name;

						bot.sendMessage(message.chat.id, "Stai per consumare i seguenti oggetti:\n> " + quantity + "x " + n1 + "\n> " + quantity + "x " + n2 + "\n> " + quantity + "x " + n3 + Rmoney + "\n\nProcedi?", yesno).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {

								var res = answer.text.toLowerCase();
								if (res == "Torna al menu"){
									return;
								}else if (res == "si"){
									connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										money = rows[0].money;
										connection.query('SELECT COUNT(inventory.id) As qnt, item.name FROM inventory, item WHERE item.id = inventory.item_id AND player_id = ' + player_id + ' AND item_id = ' + mat1, function (err, rows, fields){
											if (err) throw err;
											if (rows[0].qnt < quantity){
												bot.sendMessage(message.chat.id, "Non possiedi abbastanza " + rows[0].name + " (" + rows[0].qnt + " su " + quantity + ")", craft_fail);
												return;
											}
											connection.query('SELECT COUNT(inventory.id) As qnt, item.name FROM inventory, item WHERE item.id = inventory.item_id AND  player_id = ' + player_id + ' AND item_id = ' + mat2, function (err, rows, fields){
												if (err) throw err;
												if (rows[0].qnt < quantity){
													bot.sendMessage(message.chat.id, "Non possiedi abbastanza " + rows[0].name + " (" + rows[0].qnt + " su " + quantity + ")", craft_fail);
													return;
												}
												connection.query('SELECT COUNT(inventory.id) As qnt, item.name FROM inventory, item WHERE item.id = inventory.item_id AND player_id = ' + player_id + ' AND item_id = ' + mat3, function (err, rows, fields){
													if (err) throw err;
													if (rows[0].qnt < quantity){
														bot.sendMessage(message.chat.id, "Non possiedi abbastanza " + rows[0].name + " (" + rows[0].qnt + " su " + quantity + ")", craft_fail);
														return;
													}

													if (cost > 0){
														if (money < cost){
															bot.sendMessage(message.chat.id, "Ti servono " + cost + " ¬ß per creare questo oggetto.", craft_fail);
															return;
														}else{
															connection.query('UPDATE `player` SET money = money-' + cost + ' WHERE `nickname` = "' + message.from.username + '"', function(err, rows, fields) {
																if (err) throw err;
															});
														}
													};

													for (i = 0; i < quantity; i++){
														connection.query('INSERT INTO `inventory`(`player_id`, `item_id`) VALUES (' + player_id + ',' + matR + ')', function(err, rows, fields) {
															if (err) throw err;
														});
													};

													connection.query('DELETE FROM `inventory` WHERE item_id=' + mat1 + ' AND player_id = ' + player_id + ' LIMIT ' + quantity, function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('DELETE FROM `inventory` WHERE item_id=' + mat2 + ' AND player_id = ' + player_id + ' LIMIT ' + quantity, function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('DELETE FROM `inventory` WHERE item_id=' + mat3 + ' AND player_id = ' + player_id + ' LIMIT ' + quantity, function(err, rows, fields) {
														if (err) throw err;
													});

													connection.query('UPDATE player SET craft_week = craft_week + ' + craftexp + ', craft_count = craft_count + ' + craftexp + ' WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
														if (err) throw err;
													});

													connection.query('SELECT team_id FROM team_player WHERE player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;

														if (Object.keys(rows).length > 0){
															connection.query('UPDATE team SET craft_count = craft_count+' + craftexp + ' WHERE id = ' + rows[0].team_id, function(err, rows, fields) {
																if (err) throw err;
															});
														}
													});

													iKeys.push(["Torna a *" + oggetto]);
													iKeys.push(["Torna al menu"]);

													var craft = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": iKeys
														}
													};

													if (result_power > 0){
														setAchievement(message.chat.id, player_id, 34, quantity);
													}

													setAchievementProgress(player_id, 4);

													if (quantity == 1){
														bot.sendMessage(message.chat.id, "Hai creato *" + oggetto + "*!", craft);
													}else{
														bot.sendMessage(message.chat.id, "Hai creato " + quantity + "x *" + oggetto + "*!", craft); 
													}

													setAchievement(message.chat.id, player_id, 10, craftexp);
													setAchievement(message.chat.id, player_id, 12, quantity, matR);
													var today = new Date();
													if ((today.getDay() == 6) || (today.getDay() == 0)){
														checkFestival(message.chat.id, player_id, matR);
													}
												});
											});
										});
									});
								};
							};
						});
					});
				});
			}
		});
		//}
		//});	
	});
}

function checkFestival(chat_id, player_id, item_id){
	if (eventFestival == 0){
		return;
	}

	connection.query('SELECT event_crafting_item.price, event_crafting_item.id As eventId, event_crafting_item.cnt, item.id FROM event_crafting_item, item WHERE item.id = event_crafting_item.item_id ORDER BY event_crafting_item.id DESC LIMIT 1', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (rows[0].id == item_id){

				var price = rows[0].price;
				var cnt = rows[0].cnt;
				var eventId = rows[0].eventId;

				connection.query('UPDATE event_crafting_item SET price = price+10, cnt = cnt+1 WHERE id = ' + eventId, function(err, rows, fields) {
					if (err) throw err;
					connection.query('UPDATE event_crafting_status SET cnt = cnt+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						connection.query('UPDATE player SET money = money + ' + price + ' WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							var plur = "e";
							if ((parseInt(cnt)+1) == 1){
								plur = "a";
							}
							bot.sendMessage(chat_id, "Hai creato l'oggetto per il festival! Hai ottenuto *" + price + " ¬ß*, √® stato creato " + (parseInt(cnt)+1) + " volt" + plur + "!", back);
						});
					});
				});
			}
		}
	});
}

bot.onText(/^test$/i, function(message) {
	if (message.from.username == "fenix45"){
		setAchievementProgress(1, 1);
		setAchievementProgress(1, 2);
		setAchievementProgress(1, 3);
		setAchievementProgress(1, 4);
	}
});

function setAchievementProgress(player_id, type, manual = 0){
	connection.query('SELECT * FROM player WHERE id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;

		var chat_id = rows[0].chat_id;
		var lev = Math.floor(rows[0].exp/10);
		var reb = rows[0].reborn;

		if (type == 1){
			for (var i = 0, len = Object.keys(progLev).length; i < len; i++) {
				if (getRealLevel(reb, lev) >= progLev[i]){
					achievementDetail(player_id, chat_id, type, i, progLevRew[i], "Hai raggiunto il livello " + progLev[i]);
				}
			}
		}else if (type == 2){
			var miss = rows[0].mission_count;
			for (var i = 0, len = Object.keys(progMis).length; i < len; i++) {
				if (miss >= progMis[i]){
					achievementDetail(player_id, chat_id, type, i, progMisRew[i], "Hai completato " + progMis[i] + " missioni");
				}
			}
		}else if (type == 3){
			var dung = rows[0].dungeon_count;
			for (var i = 0, len = Object.keys(progDung).length; i < len; i++) {
				if (dung >= progDung[i]){
					achievementDetail(player_id, chat_id, type, i, progDungRew[i], "Hai completato " + progDung[i] + " dungeon");
				}
			}
		}else if (type == 4){
			var craft = rows[0].craft_count;
			for (var i = 0, len = Object.keys(progCraft).length; i < len; i++) {
				if (craft >= progCraft[i]){
					achievementDetail(player_id, chat_id, type, i, progCraftRew[i], "Hai raggiunto " + progCraft[i] + " punti creazione");
				}
			}
		}
	});
};

function achievementDetail(player_id, chat_id, type, subtype, reward, msg){
	connection.query('SELECT COUNT(id) As cnt FROM achievement_progressive_status WHERE subtype = ' + subtype + ' AND type = ' + type + ' AND player_id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		if (rows[0].cnt == 0){
			bot.sendMessage(chat_id, msg + " e ottenuto <i>" + formatNumber(reward) + "</i> ¬ß!", html);
			connection.query('UPDATE player SET money = money + ' + reward + ' WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				connection.query('INSERT INTO achievement_progressive_status (player_id, type, subtype) VALUES (' + player_id + ',' + type + ',' + subtype + ')', function(err, rows, fields) {
					if (err) throw err;
				});
			});
		}
	});
};

function setAchievement(chat_id, player_id, type, increment, itemId = 0){
	connection.query('SELECT achievement_count FROM player WHERE id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;

		var achievement_count = parseInt(rows[0].achievement_count)+1;

		connection.query('SELECT name, value, type, achievement_id, item_id, reward FROM achievement_daily, achievement_list WHERE achievement_daily.achievement_id = achievement_list.id AND achievement_list.type = ' + type, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				var count_ach = rows[0].value;
				var ach_id = rows[0].achievement_id;
				var reward = rows[0].reward;
				var item_id = rows[0].item_id;
				var name = rows[0].name;

				if (item_id != 0){
					if ((item_id == 0) || (item_id != itemId)){
						return;
					}
				}

				connection.query('SELECT progress, completed FROM achievement_status WHERE achievement_id = ' + ach_id + ' AND player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;

					var completed = 0;
					var progress = 0;
					if (Object.keys(rows).length == 0){
						connection.query('INSERT INTO achievement_status (player_id, achievement_id, progress) VALUES (' + player_id + ',' + ach_id + ',0)', function(err, rows, fields) {
							if (err) throw err;

							if ((progress+increment >= count_ach) && (completed == 0)){
								//console.log("Impresa: " + player_id + " - " + type + " - " + increment + " - " + itemId);

								connection.query('UPDATE player SET achievement_count = achievement_count+1, money = money+' + reward + ' WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
								});
								connection.query('UPDATE achievement_status SET completed = 1 WHERE player_id = ' + player_id + ' AND achievement_id = ' + ach_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai completato l'impresa giornaliera *" + name + "* e hai ricevuto " + formatNumber(reward) + " ¬ß!", mark);
									setAchievement(chat_id, player_id, 40, 1);
								});
								if ((achievement_count % 10) == 0){
									var randChest = Math.random()*100;
									var chest_id = 0;
									var chest_name = "";
									if (randChest <= 60){
										chest_id = 4;
										chest_name = "Scrigno di Diamante";
									}else if (randChest <= 90){
										chest_id = 5;
										chest_name = "Scrigno Leggendario";
									}else{
										chest_id = 6;
										chest_name = "Scrigno Epico";
									}
									connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chest_id + ')', function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(chat_id, "Hai completato *10 imprese* e hai ricevuto " + chest_name + "!", mark);
									});
								}
							}
							connection.query('UPDATE achievement_status SET progress = progress+' + increment + ' WHERE player_id = ' + player_id + ' AND achievement_id = ' + ach_id, function(err, rows, fields) {
								if (err) throw err;
							});
						});
					}else{
						completed = rows[0].completed;
						progress = rows[0].progress;

						if ((progress+increment >= count_ach) && (completed == 0)){
							//console.log("Impresa: " + player_id + " - " + type + " - " + increment + " - " + itemId);

							connection.query('UPDATE player SET achievement_count = achievement_count+1, money = money+' + reward + ' WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
							});
							connection.query('UPDATE achievement_status SET completed = 1 WHERE player_id = ' + player_id + ' AND achievement_id = ' + ach_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai completato l'impresa giornaliera *" + name + "* e hai ricevuto " + formatNumber(reward) + " ¬ß!", mark);
								setAchievement(chat_id, player_id, 40, 1);
							});

							if ((achievement_count % 10) == 0){
								var randChest = Math.random()*100;
								var chest_id = 0;
								var chest_name = "";
								if (randChest <= 60){
									chest_id = 4;
									chest_name = "Scrigno di Diamante";
								}else if (randChest <= 90){
									chest_id = 5;
									chest_name = "Scrigno Leggendario";
								}else{
									chest_id = 6;
									chest_name = "Scrigno Epico";
								}
								connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chest_id + ')', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai completato *10 imprese* e hai ricevuto " + chest_name + "!", mark);
								});
							}
						}
						if (completed == 0){
							connection.query('UPDATE achievement_status SET progress = progress+' + increment + ' WHERE player_id = ' + player_id + ' AND achievement_id = ' + ach_id, function(err, rows, fields) {
								if (err) throw err;
							});
						}
					}
				});
			};
		});
	});
}

bot.onText(/^scrigni|torna agli scrigni/i, function(message) {
	s = message.text;
	var scrigno = "";
	var iKeys = [];

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		connection.query('SELECT chest.name As name, COUNT(chest.name) As num, (SELECT COUNT(*) FROM inventory_chest WHERE player_id = ' + player_id + ') As tot FROM inventory_chest, chest WHERE inventory_chest.player_id=' + player_id + ' AND inventory_chest.chest_id = chest.id GROUP BY chest.name ORDER BY chest.id', function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length > 0){

				if (rows[0].tot > 1){
					iKeys.push(["Apri tutti"]);
				}

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					iKeys.push(["Apri " + rows[i].name + " (" + rows[i].num + ")"]);
				}

				iKeys.push(["Torna al menu"]);

				var kb = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": iKeys
					}
				};

				var plur = "i";
				if (rows[0].tot == 1){
					plur = "o";
				}

				bot.sendMessage(message.chat.id, "Possiedi " + rows[0].tot + " scrign" + plur, kb);
			}else{
				bot.sendMessage(message.chat.id, "Non possiedi nessuno scrigno.", back);
			}
		});
	});
});

bot.onText(/^apri/i, function(message) {

	/*
	if (message.from.username != "fenix45"){
		bot.sendMessage(message.chat.id, "Manutenzione", back);
		return;
	}
	*/

	connection.query('SELECT id, reborn, account_id, holiday, mkeys FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var reborn = rows[0].reborn;
		var mkeys = rows[0].mkeys;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var chestMore = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Scrigni"],["Torna al menu"]]
			}
		};

		var scrigno = message.text.substring(message.text.indexOf(" ")+1);
		if (scrigno.indexOf("(") != -1){
			scrigno = scrigno.substring(0, scrigno.indexOf("(")-1);
		}
		if ((scrigno == "") || (scrigno == " ")){
			return;
		}

		var all = "";
		if (scrigno != "tutti"){
			all = ' AND chest.name = "' + scrigno + '"';
		}else{
			all = ' AND chest.id != 8';
		}	

		connection.query('SELECT chest.id, chest.name FROM chest, inventory_chest WHERE chest.id = inventory_chest.chest_id AND inventory_chest.player_id = ' + player_id + all, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				if (scrigno != "tutti"){
					bot.sendMessage(message.chat.id, "Non possiedi lo scrigno selezionato", chestMore);
				}else{
					bot.sendMessage(message.chat.id, "Non possiedi nessuno scrigno apribile", chestMore);
				}
				return;
			}

			var qnt = Object.keys(rows).length;
			qnt = qnt.toString();
			var rarity = rows[0].id;

			if (scrigno != "tutti"){
				if (rarity == 8){
					var chestYesNo = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Si"],["Torna agli scrigni"],["Torna al menu"]]
						}
					};

					bot.sendMessage(message.chat.id, "Vuoi aprire lo Scrigno Mistico? Conterr√† un oggetto Base (R-E) di alto valore ed una üíé. Ti coster√† 15 üóù (" + mkeys + ").", chestYesNo).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var resp = answer.text;
							if ((resp == "Torna al menu") || (resp == "Torna agli scrigni")){
								return;
							}
							if (answer.text.toLowerCase() == "si"){
								connection.query('SELECT mkeys FROM player WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									if (rows[0].mkeys < 15){
										bot.sendMessage(message.chat.id, "Non hai abbastanza Chiavi Mistiche, te ne servono 15", chestMore);
										return;
									}

									connection.query('DELETE FROM inventory_chest WHERE player_id = ' + player_id + ' AND chest_id = 8 LIMIT 1', function(err, rows, fields) {
										if (err) throw err;
										connection.query('UPDATE player SET mkeys = mkeys-15 WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											connection.query('SELECT shortname FROM rarity WHERE id > 2 AND id < 7 ORDER BY RAND()', function(err, rows, fields) {
												if (err) throw err;
												var rarity = rows[0].shortname;
												connection.query('SELECT I.name, I.id, I.estimate FROM item I INNER JOIN (SELECT id FROM item WHERE craftable = 0 AND rarity = "' + rarity + '" ORDER BY estimate DESC LIMIT 10) I2 ON I.id = I2.id ORDER BY RAND()', function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Nello Scrigno Mistico hai trovato *" + rows[0].name + "* ed una üíé!", back);
													connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
													});
												});
											});
										});
									});
								});
							};
						};
					});
					return;
				}
			}

			if (scrigno == "tutti"){
				var chestNum = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Si"],["Torna al menu"]]
					}
				};
			}else if (qnt > 150){
				var chestNum = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["1"],["150"],[qnt],["Torna al menu"]]
					}
				};
			}else if (qnt > 1){
				var chestNum = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["1"],[qnt],["Torna al menu"]]
					}
				};
			}else{
				var chestNum = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["1"],["Torna al menu"]]
					}
				};
			}

			var alltxt = "Sicuro di voler aprire tutti gli scrigni?";
			if (scrigno != "tutti"){
				alltxt = "Possiedi " + qnt + " *" + scrigno + "*, quanti ne vuoi aprire?";
			}

			bot.sendMessage(message.chat.id, alltxt, chestNum).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					var resp = answer.text;
					if (resp == "Torna al menu"){
						return;
					}

					if (scrigno != "tutti"){
						resp = parseInt(resp);
						if ((resp < 1) || (resp > parseInt(qnt))){
							bot.sendMessage(message.chat.id, "Quantit√† non valida", chestMore);
							return;
						}
					}else{
						resp = 10000;
					}

					var quantity = 1;
					quantity = resp;
					var limit = "LIMIT " + quantity;

					var allsql = "";
					if (scrigno != "tutti"){
						allsql = 'inventory_chest.chest_id = ' + rarity + ' AND ';
					}else{
						allsql = 'chest.id != 8 AND ';
					}

					connection.query('SELECT inventory_chest.id, chest_id, rarity_shortname FROM inventory_chest, chest WHERE ' + allsql + 'inventory_chest.chest_id = chest.id AND player_id = "' + player_id + '" ORDER BY chest.id ' + limit, function(err, rows, fields) {
						if (err) throw err;

						var id = 0;
						var chest_rarity = "";
						var chest_id = 0;
						var item_name = "";
						var item_rarity = "";
						var index = 0;
						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "Non possiedi gli scrigni indicati", chestMore);
							return;
						}
						if (Object.keys(rows).length > 150){
							bot.sendMessage(message.chat.id, "Purtroppo non puoi aprire cos√¨ tanti scrigni insieme :(", chestMore);
							return;
						}

						var itemqnt = Object.keys(rows).length;
						var i = 0;
						var index = 0;
						var len = Object.keys(rows).length;

						var itemsArray = [];
						var special = 0;

						for (i = 0; i < len; i++){
							chest_rarity = rows[i].rarity_shortname;
							chest_id = rows[i].chest_id;

							id = rows[i].id;

							connection.query('SELECT id, name, rarity FROM item WHERE rarity = "' + chest_rarity + '" AND craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
								if (err) throw err;

								special = 0;
								item_name = rows[0].name;
								item_rarity = rows[0].rarity;
								if (item_rarity == "U"){
									var randU = Math.random()*100;
									var perc = 0;
									if (reborn <= 2){
										perc = 5;
									}else if (reborn == 3){
										perc = 10;
									}else if (reborn == 4){
										perc = 15;
									}else if (reborn == 5){
										perc = 20;
									}
									if (perc >= randU){
										item_name = "Gemma";
										item_rarity = "üíé";
										special = 1;
									}
								}
								itemsArray.push(item_name +  " (" + item_rarity + ")");
								index++;

								if (special == 0){
									connection.query('INSERT INTO inventory (player_id, item_id) VALUES(' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
										if (err) throw err;
									});
								}else{
									connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
									});
								}

								connection.query('DELETE FROM `inventory_chest` WHERE `player_id` = ' + player_id + ' AND id = ' + this.id, function(err, rows, fields) {
									if (err) throw err;
								});

								if (index == len){
									var msg = "";
									var arrLen = itemsArray.join().toString();

									var plur = "i";
									if (itemqnt == 1){
										plur = "o";
									}	
									msg = "Hai trovato " + itemqnt + " oggett" + plur + ":";
									var hist = {};
									itemsArray.map( function (a) { if (a in hist) hist[a] ++; else hist[a] = 1; } );
									Object.keys(hist).forEach(function(key) {
										msg += "\n> " + hist[key] + "x " + key;
									});

									if (Object.keys(msg).length > 4000){
										msg = "Hai trovato " + len + " oggetti!";
									}

									bot.sendMessage(message.chat.id, msg, chestMore);
									setAchievement(message.chat.id, player_id, 5, len);
								}
							}.bind( {id: id} ));
						}
					});
				};
			});
		});
	});
});

bot.onText(/weekend della follia/i, function(message) {
	if (crazyMode == 0){
		bot.sendMessage(message.chat.id, "La modalit√† follia non √® attiva!", back);
		return;
	}

	var bonus = 	"> Tutte le missioni velocizzate\n" +
		"> Ricompense scrigni doppi nelle missioni\n" +
		"> Danno raddoppiato in boss e dungeon\n" +
		"> Monete raddoppiate nelle ispezioni\n" +
		"> Possibilit√† maggiore di trovare U Base e missioni U!\n" +
		"> Eventi in missione particolari e curiosi\n" +
		"> Il tempo di attesa tra una stanza e l'altra del dungeon √® ridotto di 2 minuti\n" +
		"> Uccidendo i mob nel dungeon otterrai scrigni pi√π rari e pi√π monete!\n" +
		"> Nessun limite all'utilizzo di Varchi nei dungeon\n" +
		"> Ottieni una gemma per ogni missione L/E iniziata nell'evento\n" +
		"> I tempi delle ispezioni sono ridotti\n" +
		"> La probabilit√† di trovare bevande e oggetti speciali in missione √® aumentata\n" +
		"> Puoi vendere pi√π oggetti al Contrabbandiere\n" +
		"> Gli incantamenti iniziati nel folle durano 1 settimana\n" +
		"> Possono essere acquistati 3 pacchetti delle Offerte Giornaliere\n" +

		"\nI bonus possono cambiare di volta in volta!";

	bot.sendMessage(message.chat.id, "*Follia!*\nQuesto evento dura fino a domenica a mezzanotte, con questi *bonus*:\n\n" + bonus, back);
});

bot.onText(/evento della luna/i, function(message) {
	if (message.from.username != "fenix45"){
		if (luckyMode == 0){
			bot.sendMessage(message.chat.id, "L'evento della luna non √® attivo!", back);
			return;
		}
	}

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Ruota della Luna"],["Torna al menu"]]
		}
	};

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna all'evento della luna"],["Torna al menu"]]
		}
	};

	var kbYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Si"],["Torna all'evento della luna"],["Torna al menu"]]
		}
	};

	var mode = 0;
	var d = new Date();
	if (d.getDay() == 6){
		mode = 1;
	}else if (d.getDay() == 0){
		mode = 2;
	}else{
		bot.sendMessage(message.chat.id, "L'evento della luna non √® attivo oggi!", back);
		return;
	}

	if (mode == 1){
		var bonus = "Durante la giornata _odierna_ la *Luna Dorata* si erge sopra di voi e vi porge il suo lato piuÃÄ luminoso, variando la fortuna attorno a voi, donandovi questi benefici:\n\n" +
			"> Senti che troverai di meglio nelle tue *missioni* con grande probabilitaÃÄ e fortuna\n" +
			"> Avverti i consigli della Luna Dorata e ti sovvengono in sogno mete con *tesori* piu grandi\n" +
			"> L‚Äôinfluenza della Luna Dorata ha aumentato la possibilitaÃÄ di trovare piu *pietre*\n" +
			"> La luce della Luna Dorata dona ai viaggiatori di *Dungeon* la possibilitaÃÄ di raddoppiare il loro Rango\n" +
			"> Il *Contrabbandiere* non ama molto la Luce della Luna Dorata e questo evento raro, in vista dell‚Äôaumento degli avventurieri, lo porta a valutare, in alcuni momenti, le sue offerte al doppio del prezzo\n" +
			"> *Ruota* della Luna Dorata\n" +
			"\n*Vuoi accedere alla Ruota?*";
	}else if (mode == 2){
		var bonus = "La Luna Dorata che illuminava il vostro cammino viene invasa da una luce purpurea e la sua luce ora emette un opaco bagliore violaceo, le leggende narrano che il giorno dopo la Luna Dorata vi sia la nefasta *Luna Nera*:\n\n" +
			"> Il bagliore della Luna Nera puoÃÄ far percorrere strade oscure che miglioreranno le vostre *missioni*, ma potrebbe anche far causare brutti avvenimenti traumatici\n" +
			"> Oscuri sono i percorsi irradiati dalla Luna Nera, possono portare a maggiori *tesori* o a piccoli guadagni\n" +
			"> L‚Äôinfluenza della Luna Nera puoÃÄ portarvi a grandi ritrovamenti o a vicoli ciechi senza ritorno nelle Cave di *Pietre*\n" +
			"> La Luna Nera puoÃÄ dare consigli corretti o sbagliati ai viaggiatori di Dungeon che iniziano le loro avventure sotto la sua influenza. Vi eÃÄ possibilitaÃÄ di raddoppiare i loro *Punti Rango* o di Annullarli\n" +
			"> Il *Contrabbandiere* adora la Luce della Luna Nera e aumenta notevolmente rispetto alla Luna Dorata la probabilitaÃÄ di raddoppiare i soldi dati per un oggetti, ma a volte puoÃÄ essere piuÃÄ guardingo e conclude in fretta le sue transazioni dimezzando il guadagno\n" +
			"> *Ruota* della Luna Nera\n" +
			"\n*Vuoi accedere alla Ruota?*";
	}

	bot.sendMessage(message.chat.id, bonus, kb);

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		connection.query('SELECT player_id FROM contest WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				connection.query('UPDATE player SET moon_coin = moon_coin+4 WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
					connection.query('INSERT INTO contest (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(message.chat.id, "Hai ricevuto 4 Monete Lunari per girare la ruota della fortuna!", mark);
					});
				});
			}
		});
	});
});

bot.onText(/ruota della luna|ruota/i, function(message) {

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna al menu"]]
		}
	};

	var kbBack = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna alla ruota"],["Torna al menu"]]
		}
	};

	var kbYesNo = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Si"],["Torna alla ruota"],["Torna al menu"]]
		}
	};

	var d = new Date();
	if (luckyMode == 0){
		if ((d.getDay() == 0) || (d.getDay() == 6)){
			bot.sendMessage(message.chat.id, "Puoi tentare la fortuna solamente in settimana!", back);
			return;
		}
	}

	connection.query('SELECT id, holiday, account_id, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var lev = Math.floor(rows[0].exp/10);

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (rows[0].reborn == 1){
			bot.sendMessage(message.chat.id, "La ruota √® utilizzabile solo dopo la Rinascita 1!", back)
			return;
		}

		bot.sendMessage(message.chat.id, "Un raggio della *Luna Dorata* colpisce il luogo dove risiedi ed una ruota magica appare dinnanzi a te.\n\n" +
						"Nell'insenatura vi eÃÄ lo spazio per un qualcosa grande come una moneta e le iscrizioni su essa recitano le seguenti parole:\n" +
						"_'Tu che sei baciato dalla Luna Dorata inserisci due Monete Lunari; in essa e potrai ricevere Piu Forza (+1 Livello giocatore/drago), La mia Luce (Gemme), PiuÃÄ Potere Arcano dalle molteplici sfaccettature (Mana di ogni tipo), Mappe del Tesoro (Molte Monete), Oggetti Unici (Scrigno Capsula), La mia luce nella tua arma, nel tuo scudo o nella tua armatura per una settimana (Incantamento su Arma,Scudo o Armatura per 7 Giorni), una grande quantitaÃÄ di Polvere, il potere dell‚Äôanima per il tuo Team (Punti Anima) o se il tuo destino saraÃÄ nefasto, nulla.'_\n\nProcedi?", kbYesNo).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text.toLowerCase() == "si"){
					connection.query('SELECT id, moon_coin FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
						if (err) throw err;

						if (rows[0].moon_coin < 2){
							bot.sendMessage(message.chat.id, "Non hai abbastanza monete lunari, te ne servono 2 per girare la ruota, puoi trovarle durante le missioni", kbBack);
							return;
						}

						var rand = Math.round(Math.random()*20);
						var player_id = rows[0].id;

						var rand2 = Math.random()*100;
						var magicN = "";
						var magic = 0;
						if (rand2 < 30){
							magic = 1;	//Blu
							magicN = "Blu";
						}else if (rand2 < 60){
							magic = 2;	//Giallo
							magicN = "Giallo";
						}else{
							magic = 3;	//Rosso
							magicN = "Rosso";
						}

						connection.query('UPDATE player SET moon_coin = moon_coin-2 WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (rand <= 3){
								if (lev == 1000){
									connection.query('UPDATE dragon SET exp = exp+70, level = level+1 WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai ricevuto +1 livello drago!", kbBack);
										checkDragon(player_id);
									});
								}else{
									connection.query('UPDATE player SET exp = exp+10 WHERE id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai ricevuto +1 livello!", kbBack);
									});
								}
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if ((rand >= 4) && (rand <= 6)){
								connection.query('UPDATE player SET gems = gems+2 WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai ricevuto 2üíé!", kbBack);
								});
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if ((rand >= 7) && (rand <= 9)){
								connection.query('UPDATE event_mana_status SET mana_1 = mana_1+500, mana_2 = mana_2+500, mana_3 = mana_3+500 WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai ricevuto +500 Mana per tipo!", kbBack);
								});
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if (rand == 10){
								connection.query('UPDATE event_mana_status SET mana_1 = mana_1+1000, mana_2 = mana_2+1000, mana_3 = mana_3+1000 WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai ricevuto +1.000 Mana per tipo!", kbBack);
								});
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if (rand == 11){
								connection.query('UPDATE player SET money = money+1000000 WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai ricevuto 1.000.000 ¬ß!", kbBack);
								});
							}else if (rand == 12){
								connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',7)', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai ricevuto uno Scrigno Capsula!", kbBack);
								});
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if (rand == 13){
								var d = new Date();
								d.setHours(d.getHours()+168);
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
								var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

								connection.query('UPDATE player SET weapon_enchant_bonus = ' + magic + ', weapon_enchant_end = "' + long_date + '", weapon_enchant = 30 WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai un incantamento +30 " + magicN + " all'arma per una settimana!", kbBack);
								});
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if (rand == 14){
								var d = new Date();
								d.setHours(d.getHours()+168);
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
								var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

								connection.query('UPDATE player SET weapon2_enchant_bonus = ' + magic + ', weapon2_enchant_end = "' + long_date + '", weapon2_enchant = 30 WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai un incantamento +30 " + magicN + " all'armatura per una settimana!", kbBack);
								});
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if (rand == 15){
								var d = new Date();
								d.setHours(d.getHours()+168);
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
								var short_date = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

								connection.query('UPDATE player SET weapon3_enchant_bonus = ' + magic + ', weapon3_enchant_end = "' + long_date + '", weapon3_enchant = 30 WHERE id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(message.chat.id, "Hai un incantamento +30 " + magicN + " allo scudo per una settimana!", kbBack);
								});
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if (rand == 16){
								for (var i = 0; i < 200; i++) {
									connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',646)', function(err, rows, fields) {
										if (err) throw err;
									});
								}
								bot.sendMessage(message.chat.id, "Hai ricevuto 200x Polvere!", kbBack);
								setAchievement(message.chat.id, player_id, 21, 1);
							}else if (rand == 17){
								connection.query('SELECT team_player.team_id FROM team_player WHERE player_id = ' + player_id, function(err, rows, fields) {
									if (err) throw err;
									var team_id = 0;
									if (Object.keys(rows).length > 0){
										team_id = rows[0].team_id;
										connection.query('UPDATE team SET point = point+50 WHERE id = ' + team_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Il tuo team ha ricevuto 50x Punti Anima!", kbBack);
										});
									}else{
										bot.sendMessage(message.chat.id, "Non sei in un team! Di conseguenza stavolta non ottieni nessun premio...", kbBack);
									}
								});
								setAchievement(message.chat.id, player_id, 21, 1);
							}else{
								bot.sendMessage(message.chat.id, "Purtroppo la ruota si √® fermata su un punto vuoto e non hai ricevuto nulla!", kbBack);
							}
							setAchievement(message.chat.id, player_id, 43, 1);
						});
					});
				};
			};
		});
	});
});

bot.onText(/arena/i, function(message) {
	if (arena == 0){
		bot.sendMessage(message.chat.id, "L'arena √® chiusa!", back);
		return;
	}

	var today = new Date();
	if ((today.getDay() != 6) && (today.getDay() != 0)){
		var text = "Classifica vittorie:\n";
		var c = 1;
		var mypnt = 0;
		var totpnt = 0;
		var mypos = 0;
		var size = 20;

		var banned_join = banlist_id.join();

		connection.query('SELECT nickname, win As points FROM event_arena_status, player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" AND player.id = event_arena_status.player_id ORDER BY win DESC', function(err, rows, fields) {
			if (err) throw err;
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (c < size+1){
					rows[i].points = formatNumber(rows[i].points);
					text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].points + ")\n";
				}
				if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
					mypnt = rows[i].points;
					mypos = c;
				}
				c++;
			}
			text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + mypnt + ")";

			c = 1;

			text += "\n\nClassifica sconfitte:\n";

			connection.query('SELECT nickname, lose As points FROM event_arena_status, player WHERE account_id NOT IN (' + banned_join + ') AND nickname != "LastSoldier95" AND nickname != "fenix45" AND player.id = event_arena_status.player_id ORDER BY lose DESC', function(err, rows, fields) {
				if (err) throw err;
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (c < size+1){
						rows[i].points = formatNumber(rows[i].points);
						text = text + c + "¬∞ " + rows[i].nickname + " (" + rows[i].points + ")\n";
					}
					if (rows[i].nickname.toLowerCase() == message.from.username.toLowerCase()){
						mypnt = rows[i].points;
						mypos = c;
					}
					c++;
				}
				text = text + "\nTu:\n" + mypos + "¬∞ " + message.from.username + " (" + mypnt + ")";

				bot.sendMessage(message.chat.id, text, back_html);
			});
		});
		return;
	}

	connection.query('SELECT id, holiday, account_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Continua all'arena"],["Torna al menu"]]
			}
		};
		var kb2 = {
			parse_mode: "HTML",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Scegli Drago 1","Scegli Drago 2"],["Punta Pietre"],["Torna al menu"]]
			}
		};
		var kb3 = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Entra nell'arena"],["Torna al menu"]]
			}
		};
		var kbBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Torna all'arena"],["Torna al menu"]]
			}
		};

		connection.query('SELECT * FROM event_arena_status WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				connection.query('INSERT INTO event_arena_status (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
					if (err) throw err;
					bot.sendMessage(message.chat.id, "Benvenuto nell'Arena dei Draghi 2.0!\nIn questa arena i draghi si sfideranno, avrai l'occasione di vincere le Pietre per potenziare il tuo drago scegliendo quale sar√† il probabile vincitore dello scontro, inizia!", kb);
				});
			}else{

				if (rows[0].extracted == 0){
					connection.query('SELECT id, level FROM dragon WHERE level > 10 ORDER BY RAND()', function(err, rows, fields) {
						if (err) throw err;

						var id1 = parseInt(rows[0].id);
						var level1 = parseInt(rows[0].level);

						connection.query('SELECT id, level FROM dragon WHERE level BETWEEN ' + (level1-10) + ' AND ' + (level1+10) + ' AND id != ' + id1 + ' ORDER BY RAND()', function(err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Non sono riuscito a trovare uno sfidante valido, riprova", kbBack);
								return;
							}

							var id2 = parseInt(rows[0].id);
							var level2 = parseInt(rows[0].level);

							var landType = 0;
							var landRand = Math.random()*60;
							if (landRand < 10){
								landType = 1;
							}else if (landRand < 20){
								landType = 2;
							}else if (landRand < 30){
								landType = 3;
							}else if (landRand < 40){
								landType = 4;
							}else if (landRand < 50){
								landType = 5;
							}else{
								landType = 6;
							}

							var now = new Date();
							now.setMinutes(now.getMinutes() + Math.round(Math.random()*15+15));
							var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
							var short_time = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());

							connection.query('UPDATE event_arena_status SET extracted = 1, dragon_1 = ' + id1 + ', dragon_2 = ' + id2 + ', land_type = ' + landType + ', fight_time = "' + long_date + '" WHERE player_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "I draghi sfidanti sono stati estratti!", kb3);
							});		
						});
					});
				}else{

					var d1 = rows[0].dragon_1;
					var d2 = rows[0].dragon_2;
					var choice = rows[0].choice;
					var bet_id = rows[0].bet_id;
					var landType = rows[0].land_type;

					var d = new Date(rows[0].fight_time);
					var short_time = addZero(d.getHours()) + ":" + addZero(d.getMinutes()) + ":" + addZero(d.getSeconds());

					connection.query('SELECT id, name, level, type FROM dragon WHERE id = ' + d1, function(err, rows, fields) {
						if (err) throw err;

						var name1 = rows[0].name;
						var type1 = rows[0].type;
						var id = rows[0].id;
						var level1 = rows[0].level;

						connection.query('SELECT name, level, type FROM dragon WHERE id = ' + d2, function(err, rows, fields) {
							if (err) throw err;

							var name2 = rows[0].name;
							var type2 = rows[0].type;
							var level2 = rows[0].level;

							var landDesc = "";
							if (landType == 1){
								landDesc = "Scottatura";
							}else if (landType == 2){
								landDesc = "Congelamento;"
							}else if (landType == 3){
								landDesc = "Avvelenamento";
							}else if (landType == 4){
								landDesc = "Sonno";
							}else if (landType == 5){
								landDesc = "Rallentamento";
							}else{
								landDesc = "Terrore";
							}

							if (choice == 0){
								choice = "-";
							}else if (choice == 1){
								choice = "‚ë†";
							}else if (choice == 2){
								choice = "‚ë°";
							}

							bot.sendMessage(message.chat.id, 	"La prossima Sfida si tiene in un'Arena con un terreno che provoca <b>" + landDesc + "</b> " + landSym(landType) + " tra:\n\n" +
											"‚ë† <b>" + name1 + " " + type1 + "</b> (LV " + level1 + ") " + dragonSym(type1) + "\n\n" +
											"               ‚öîÔ∏è\n\n" + 
											"‚ë° <b>" + name2 + " " + type2 + "</b> (LV " + level2 + ") " + dragonSym(type2) + "\n\n" +
											"Hai puntato su: " + choice + "\n\n" +
											"Lo scontro inizier√† alle " + short_time, kb2).then(function() {
								answerCallbacks[message.chat.id] = function(answer) {
									if (answer.text == "Torna al menu"){
										return;
									}

									connection.query('SELECT extracted FROM event_arena_status WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;

										if (rows[0].extracted == 0){
											bot.sendMessage(message.chat.id, "I draghi non sono ancora stati estratti!", kbBack);
											return;
										}

										if (answer.text == "Scegli Drago 1"){
											connection.query('UPDATE event_arena_status SET choice = 1 WHERE player_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Hai scelto il drago 1!", kbBack);
											});
										}else if (answer.text == "Scegli Drago 2"){
											connection.query('UPDATE event_arena_status SET choice = 2 WHERE player_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Hai scelto il drago 2!", kbBack);
											});
										}else if (answer.text == "Punta Pietre"){
											if (choice == 0){
												bot.sendMessage(message.chat.id, "Prima scegli il drago su cui puntare!", kbBack);
												return;
											}
											if (bet_id != 0){
												bot.sendMessage(message.chat.id, "Hai gi√† puntato su questo scontro!", kbBack);
												return;
											}
											bot.sendMessage(message.chat.id, "Specifica la pietra che vuoi puntare sul drago scrivendo il codice, " +
															"se vinci otterrai 2 pietre del tipo puntato, altrimenti la perderai. A volte puoi vincerne anche 3.\n" +
															"Pietra Anima di Legno -> 1\n" +
															"Pietra Anima di Ferro -> 2\n" +
															"Pietra Anima Preziosa -> 3\n" +
															"Pietra Cuore di Diamante -> 4\n" +
															"Pietra Cuore Leggendario -> 5\n" +
															"Pietra Spirito Epico -> 6\n\n" +
															"Attenzione, puoi puntare solamente una volta", kbBack).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													if ((answer.text == "Torna all'arena") || (answer.text == "Torna al menu")){
														return;
													}
													//if (answer.text.indexOf(",") != -1){
													/*
														var part = answer.text.split(",");
														var stone = (67+parseInt(part[0]));

														if ((part[0] < 1) || (part[0] > 6) || (re.test(part[0]) == false)){
															bot.sendMessage(message.chat.id, "Codice pietra non valido!", kbBack);
															return;
														}
														if ((part[1] < 1) || (part[1] > 3) || (re.test(part[1]) == false)){
															bot.sendMessage(message.chat.id, "Quantit√† non valida!", kbBack);
															return;
														}
														var qnt = part[1];
														*/

													var stone = (67+parseInt(answer.text));
													if ((parseInt(answer.text) < 1) || (parseInt(answer.text) > 6) || (re.test(parseInt(answer.text)) == false)){
														bot.sendMessage(message.chat.id, "Codice pietra non valido!", kbBack);
														return;
													}
													var qnt = 1;

													connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE item_id = ' + stone + ' AND player_id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;

														if (rows[0].cnt < qnt){
															bot.sendMessage(message.chat.id, "Non hai abbastanza pietre di quel tipo", kbBack);
															return;
														}

														connection.query('DELETE FROM inventory WHERE item_id = ' + stone + ' AND player_id = ' + player_id + ' LIMIT ' + qnt, function(err, rows, fields) {
															if (err) throw err;
															connection.query('UPDATE event_arena_status SET bet_id = ' + stone + ', bet_qnt = ' + qnt + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Puntata completata!", kbBack);
															});
														});
													});
													//}else{
													//	bot.sendMessage(message.chat.id, "Sintassi errata", kbBack);
													//}
												};
											});
										}
									});
								};
							});
						});
					});
				}
			};
		});
	});
});

function dragonSym(type){
	if (type == "delle Montagne"){
		return "üèî";
	}else if (type == "dei Cieli"){
		return "‚òÅÔ∏è";
	}else if (type == "Infernale"){
		return "üî•";
	}else if (type == "dell'Oscurit√†"){
		return "üîÆ";
	}else if (type == "dei Mari"){
		return "üåä";
	}else if (type == "dei Ghiacci"){
		return "‚ùÑÔ∏è";
	}
}

function landSym(type){
	if (type == 1){
		return "üí•";
	}else if (type == 2){
		return "‚õÑÔ∏è";
	}else if (type == 3){
		return "üíÄ";
	}else if (type == 4){
		return "üí§";
	}else if (type == 5){
		return "üö∂";
	}else if (type == 6){
		return "üë∫";
	}
}

function setFinishedArena(element, index, array){
	var watcher_id = element.player_id;
	var chat_id = element.chat_id;

	connection.query('SELECT player_id, win, lose, land_type, dragon_1, dragon_2, choice, bet_id, bet_qnt FROM event_arena_status WHERE player_id = ' + watcher_id, function(err, rows, fields) {
		if (err) throw err;

		var dragon1 = rows[0].dragon_1;
		var dragon2 = rows[0].dragon_2;
		var choice = rows[0].choice;
		var landType = rows[0].land_type;
		var bet_id = rows[0].bet_id;
		var bet_qnt = rows[0].bet_qnt;
		var win = rows[0].win;
		var lose = rows[0].lose;

		if (choice == 0){
			connection.query('UPDATE event_arena_status SET extracted = 0, dragon_1 = 0, dragon_2 = 0, land_type = 0, choice = 0, bet_id = 0, bet_qnt = 0, fight_time = NULL WHERE player_id = ' + watcher_id, function(err, rows, fields) {
				if (err) throw err;
				bot.sendMessage(chat_id, "Tempo scaduto per la selezione del drago preferito, torna all'arena per assistere ad un altro scontro");
			});
			return;
		}

		connection.query('SELECT * FROM dragon WHERE id = ' + dragon1, function(err, rows, fields) {
			if (err) throw err;

			var myId = rows[0].id;
			var name1 = rows[0].name;
			if (name1.lenght > 30){
				name1 = name1.substring(0, 30) + "...";
			}
			var myLife = Math.round(parseInt(rows[0].exp*10));
			var totMyLife = myLife;
			var myDmg = parseInt(rows[0].damage)+parseInt(rows[0].claws);
			var myCrit = parseInt(rows[0].critical);
			var myType = rows[0].type;
			var player_id1 = rows[0].player_id;

			connection.query('SELECT class, chat_id, charm_id, reborn FROM player WHERE id = ' + player_id1, function(err, rows, fields) {
				if (err) throw err;

				var reborn = rows[0].reborn;
				var class_id = rows[0].class;
				var charm_id = rows[0].charm_id;
				var chat_id1 = rows[0].chat_id;

				if (charm_id == 602){
					myDmg += 25;
					myCrit += 10;
				}
				if (charm_id == 695){
					myDmg += 30;
					myCrit += 15;
				}

				if ((class_id == 7) && (reborn == 3)){
					myCrit += 5;
				}
				if ((class_id == 7) && (reborn >= 4)){
					myCrit += 7;
				}

				connection.query('SELECT * FROM dragon WHERE id = ' + dragon2, function(err, rows, fields) {
					if (err) throw err;

					var enemyId = rows[0].player_id;
					var name2 = rows[0].name;
					if (name2.lenght > 30){
						name2 = name2.substring(0, 30) + "...";
					}
					var enemyLife = Math.round(parseInt(rows[0].exp*10));
					var enemyDmg = parseInt(rows[0].damage)+parseInt(rows[0].claws);
					var enemyCrit = parseInt(rows[0].critical);
					var enemyType = rows[0].type;
					var player_id2 = rows[0].player_id;

					connection.query('SELECT class, chat_id, charm_id, reborn FROM player WHERE id = ' + player_id2, function(err, rows, fields) {
						if (err) throw err;

						var reborn2 = rows[0].reborn;
						var class_id2 = rows[0].class;
						var enemyCharm_id = rows[0].charm_id;
						var chat_id2 = rows[0].chat_id;

						if (enemyCharm_id == 602){
							enemyDmg += 25;
							enemyCrit += 10;
						}
						if (enemyCharm_id == 695){
							enemyDmg += 30;
							enemyDmg += 15;
						}
						if ((class_id2 == 7) && (reborn2 == 3)){
							enemyCrit += 5;
						}
						if ((class_id2 == 7) && (reborn2 >= 4)){
							enemyCrit += 7;
						}

						var totEnemyLife = enemyLife;

						var rDmg = 0;
						var rDmg2 = 0;
						var killed = 0;
						var code = 0;
						var rand = 0;

						var landRand = 0;
						var landDesc = "";

						var critTxt1 = "";
						var critTxt2 = "";

						if (landType == 1){
							landDesc = "Scottatura";
						}else if (landType == 2){
							landDesc = "Congelamento;"
						}else if (landType == 3){
							landDesc = "Avvelenamento";
						}else if (landType == 4){
							landDesc = "Sonno";
						}else if (landType == 5){
							landDesc = "Rallentamento";
						}else{
							landDesc = "Terrore";
						}

						var weak = 0;

						if ((myType == "dell'Oscurit√†") && (enemyType == "dei Ghiacci")){
							myDmg = myDmg*1.5;
						}
						if ((myType == "dell'Oscurit√†") && (enemyType == "dei Cieli")){
							enemyDmg = enemyDmg*1.5;
							weak = 1;
						}

						if ((myType == "dei Ghiacci") && (enemyType == "dei Cieli")){
							myDmg = myDmg*1.5;
						}
						if ((myType == "dei Ghiacci") && (enemyType == "Infernale")){
							enemyDmg = enemyDmg*1.5;
							weak = 1;
						}

						if ((myType == "dei Mari") && (enemyType == "Infernale")){
							myDmg = myDmg*1.5;
						}
						if ((myType == "dei Mari") && (enemyType == "delle Montagne")){
							enemyDmg = enemyDmg*1.5;
							weak = 1;
						}

						if ((myType == "dei Cieli") && (enemyType == "dell'Oscurit√†")){
							myDmg = myDmg*1.5;
						}
						if ((myType == "dei Cieli") && (enemyType == "dei Ghiacci")){
							enemyDmg = enemyDmg*1.5;
							weak = 1;
						}

						if ((myType == "delle Montagne") && (enemyType == "dei Mari")){
							myDmg = myDmg*1.5;
						}
						if ((myType == "delle Montagne") && (enemyType == "dell'Oscurit√†")){
							enemyDmg = enemyDmg*1.5;
							weak = 1;
						}

						if ((myType == "Infernale") && (enemyType == "delle Montagne")){
							myDmg = myDmg*1.5;
						}
						if ((myType == "delle Montagne") && (enemyType == "dei Mari")){
							enemyDmg = enemyDmg*1.5;
							weak = 1;
						}

						var actions = [];

						actions.push("La salute di " + name2 + " " + dragonSym(enemyType) + " √® *" + totEnemyLife + "* hp, quella di " + name1 + " " + dragonSym(myType) + " √® *" + totMyLife + "* hp");
						actions.push("Lo scontro avviene su un terreno che provoca *" + landDesc + "* " + landSym(landType));
						actions.push("<=>");

						var nextNull = 0;
						var nextMid = 0;
						var nextCrit = 0;
						var nextWeak = 0;

						var nextNull2 = 0;
						var nextMid2 = 0;
						var nextCrit2 = 0;
						var nextWeak2 = 0;

						var landRandB = 0;
						var landRandB2 = 0;
						var landDmg = 0;
						var landDmg2 = 0;

						var hits = 0;
						var hits2 = 0;

						var hit_arr = ["ferisce","sfregia","squarta","urta","infilza"];
						var hit_len = Object.keys(hit_arr).length;

						while (killed == 0) {
							landRandB = Math.random()*100;
							landRandB2 = Math.random()*100;

							if (nextNull == 1){
								actions.push(name1 + " non √® riuscito a colpire l'avversario!");
								nextNull = 0;
							}else{
								hits2++;

								rDmg = Math.round(Math.random()*(myDmg*2)+myDmg);
								if (nextWeak == 1){
									landDmg = (rDmg/100)*10;
									rDmg -= landDmg;
									nextWeak = 0;
								}

								if (nextMid2 == 1){
									rDmg = rDmg/2;
									nextMid = 0;
								}

								rDmg = Math.round(rDmg);
								enemyLife = Math.round(enemyLife - rDmg);

								// drago 2 >> drago 1

								landDmg2 = (rDmg/100)*10;
								landDmg2 = Math.round(landDmg2);

								if ((landType == 1) && (enemyType != "Infernale")){
									if (landRandB2 < 50){
										actions.push("Per *Scottatura*, " + name2 + " subisce ulteriori " + landDmg2 + " danni");
										rDmg += landDmg;
									}
								}
								if ((landType == 2) && (enemyType != "dei Ghiacci")){
									if (landRandB2 < 40){
										actions.push("Per *Congelamento*, " + name2 + " viene paralizzato dal freddo");
										nextNull = 1;
									}
								}
								if ((landType == 3) && (enemyType != "delle Montagne")){
									if (landRandB2 < 50){
										actions.push("Per *Avvelenamento*, " + name2 + " ha il danno dimezzato");
										nextMid = 1;
									}
								}
								if ((landType == 4) && (enemyType != "dei Cieli")){
									if (landRandB2 < 40){
										actions.push("Per *Sonno*, " + name2 + " subisce un danno critico");
										nextCrit = 1;
									}
								}
								if ((landType == 5) && (enemyType != "dei Mari")){
									if (landRandB2 < 50){
										actions.push("Per *Rallentamento*, il danno di " + name2 + " sar√† pi√π debole");
										nextWeak = 1;
									}
								}
								if ((landType == 6) && (enemyType != "dell'Oscurit√†")){
									if (landRandB2 < 40){
										actions.push("Per *Terrore*, " + name2 + " rimane paralizzato");
										nextNull = 1;
									}
								}

								rand = Math.random()*100;
								if (rand <= myCrit){
									rDmg = rDmg*2;
									critTxt1 = "Danno Critico!";
								}else{
									critTxt1 = "";
								}

								actions.push(name1 + " " + hit_arr[Math.round(Math.random()*hit_len)-1] + " il drago avversario -" + rDmg + " (" + enemyLife + " hp) " + critTxt1);
							}

							if (enemyLife <= 0){
								killed = 1;
								code = 1;
								actions.push("*" + name1 + " √® il vincitore*! (" + hits + " turni)");
							}else{
								if (nextNull2 == 1){
									actions.push(name2 + " non √® riuscito a colpire l'avversario!");
									nextNull2 = 0;
								}else{
									hits++;

									rDmg2 = Math.round(Math.random()*(enemyDmg*2)+enemyDmg);
									if (nextWeak2 == 1){
										landDmg = (rDmg/100)*10;
										rDmg2 -= landDmg;
										nextWeak2 = 0;
									}

									if (nextMid2 == 1){
										rDmg2 = rDmg2/2;
										nextMid2 = 0;
									}

									// drago 1 >> drago 2

									landDmg = (rDmg2/100)*10;
									landDmg = Math.round(landDmg);

									if ((landType == 1) && (myType != "Infernale")){
										if (landRandB < 50){
											actions.push("Per *Scottatura*, " + name1 + " subisce ulteriori " + landDmg + " danni");
											rDmg2 += landDmg;
										}
									}
									if ((landType == 2) && (myType != "dei Ghiacci")){
										if (landRandB < 40){
											actions.push("Per *Congelamento*, " + name1 + " 1 viene paralizzato dal freddo");
											nextNull2 = 1;
										}
									}
									if ((landType == 3) && (myType != "delle Montagne")){
										if (landRandB < 50){
											actions.push("Per *Avvelenamento*, " + name1 + " ha il danno dimezzato");
											nextMid2 = 1;
										}
									}
									if ((landType == 4) && (myType != "dei Cieli")){
										if (landRandB < 40){
											actions.push("Per *Sonno*, " + name1 + " subisce un danno critico");
											nextCrit2 = 1;
										}
									}
									if ((landType == 5) && (myType != "dei Mari")){
										if (landRandB < 50){
											actions.push("Per *Rallentamento*, il danno di " + name1 + " sar√† pi√π debole");
											nextWeak2 = 1;
										}
									}
									if ((landType == 6) && (myType != "dell'Oscurit√†")){
										if (landRandB < 40){
											actions.push("Per *Terrore*, " + name1 + " rimane paralizzato");
											nextNull2 = 1;
										}
									}

									rand = Math.random()*100;
									if ((rand <= enemyCrit) || (nextCrit2 == 1)){
										rDmg2 = rDmg2*2;
										critTxt2 = "Danno Critico!";
										nextCrit2 = 0;
									}else{
										critTxt2 = "";
									}

									myLife = Math.round(myLife - rDmg2);
									rDmg2 = Math.round(rDmg2);

									actions.push(name2 + " " + hit_arr[Math.round(Math.random()*hit_len)-1] + " il drago avversario -" + rDmg2 + " (" + myLife + " hp) " + critTxt2);
								}
							};

							if (myLife <= 0){
								killed = 1;						
								code = 2;
								actions.push("*" + name2 + " √® il vincitore*! (" + hits2 + " turni)");
							}
						}

						var len = parseInt(Object.keys(actions).length);
						var battle = "";

						if (len > 60){
							actions.splice(20, (len-40));
							actions.splice(21, 0, "(...)");
							len = Object.keys(actions).length;
						}

						for (var i = 0; i < len; i++) {
							battle += actions[i] + "\n";
						}
						bot.sendMessage(chat_id, battle, mark);

						if (code == choice){
							connection.query('UPDATE event_arena_status SET extracted = 0, win = win+1, dragon_1 = 0, dragon_2 = 0, land_type = 0, choice = 0, bet_id = 0, bet_qnt = 0, fight_time = NULL WHERE player_id = ' + watcher_id, function(err, rows, fields) {
								if (err) throw err;

								connection.query('SELECT name FROM item WHERE id = ' + bet_id, function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										var stone = (67+Math.round(Math.random()*5+1));

										connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + watcher_id + ',' + stone + ')', function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('SELECT name FROM item WHERE id = ' + stone, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(chat_id, "Hai vinto e ottenuto " + rows[0].name + "!\nTorna all'arena per fare la prossima scelta!");
										});
									}else{

										var qnt = bet_qnt*2;
										var rand_bonus = Math.random()*100;
										var extra = "";
										if (rand_bonus < 5){
											qnt++;
											extra = " BONUS";
										}

										for (var i = 0; i < qnt; i++) {
											connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + watcher_id + ',' + bet_id + ')', function(err, rows, fields) {
												if (err) throw err;
											});
										}
										bot.sendMessage(chat_id, "*Hai vinto* e ottenuto " + qnt + "x *" + rows[0].name + "*" + extra + "!\nTorna all'arena per fare la prossima scelta!", mark);
									}

									if ((parseInt(win)+1) % 10 == 0){
										var chest = Math.round(Math.random()*2+3);

										connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + watcher_id + ',' + chest + ')', function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('SELECT name FROM name WHERE id = ' + chest, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(chat_id, "Come bonus per le vittorie ottenute hai vinto anche uno " + rows[0].name + "!");
										});
									}
								});
							});
						}else{
							connection.query('UPDATE event_arena_status SET extracted = 0, lose = lose+1, dragon_1 = 0, dragon_2 = 0, land_type = 0, choice = 0, bet_id = 0, bet_qnt = 0, fight_time = NULL WHERE player_id = ' + watcher_id, function(err, rows, fields) {
								if (err) throw err;
								connection.query('SELECT name FROM item WHERE id = ' + bet_id, function(err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0){
										bot.sendMessage(chat_id, "*Hai perso!*\nTorna all'arena per fare la prossima scelta!", mark);
									}else{
										bot.sendMessage(chat_id, "*Hai perso* e hai lasciato " + bet_qnt + "x " + rows[0].name + " alla segreteria dell'arena!\nTorna all'arena per fare la prossima scelta!", mark);
									}
								});
							});
						}

						//1 per drago 1, 2 per drago 2

						var dragon_win = 0;
						var dragon_lose = 0;

						if (choice == 1){
							dragon_win = dragon1;
							dragon_lose = dragon2;

							connection.query('UPDATE player SET money = money+1000 WHERE id = ' + player_id1, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id1, "Il tuo drago ha ottenuto una vittoria nell'arena! Hai vinto 1.000 ¬ß!");
							});
						}else{	
							dragon_win = dragon2;							
							dragon_lose = dragon1;

							connection.query('UPDATE player SET money = money+1000 WHERE id = ' + player_id2, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id2, "Il tuo drago ha ottenuto una vittoria nell'arena! Hai vinto 1.000 ¬ß!");
							});
						}

						connection.query('SELECT dragon_id FROM event_arena_dragon WHERE dragon_id = ' + dragon_win, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								connection.query('INSERT INTO event_arena_dragon (dragon_id, win, lose) VALUES (' + dragon_win + ', 1, 0)', function(err, rows, fields) {
									if (err) throw err;
								});
							}else{
								connection.query('UPDATE event_arena_dragon SET win = win+1 WHERE dragon_id = ' + dragon_win, function(err, rows, fields) {
									if (err) throw err;
								});
							}
						});
						connection.query('SELECT dragon_id FROM event_arena_dragon WHERE dragon_id = ' + dragon_lose, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								connection.query('INSERT INTO event_arena_dragon (dragon_id, win, lose) VALUES (' + dragon_lose + ', 0, 1)', function(err, rows, fields) {
									if (err) throw err;
								});
							}else{
								connection.query('UPDATE event_arena_dragon SET lose = lose+1 WHERE dragon_id = ' + dragon_lose, function(err, rows, fields) {
									if (err) throw err;
								});
							}
						});
					});
				});
			});
		});
	});
};

bot.onText(/affronta boss|^scalata boss|^boss/i, function(message) {
	var iKeys = [];
	var boss = "";
	var team_id = 0;
	calcLife(message);

	var bossKb = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Affronta Boss"],["Torna al menu"]]
		}
	};

	var bossKb2 = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Visualizza Boss"],["Torna al menu"]]
		}
	};

	connection.query('SELECT team_player.team_id, team_player.kill_streak, COUNT(*) As num FROM `player`, team_player WHERE player.nickname = "' + message.from.username + '" AND team_player.player_id = player.id', function(err, rows, fields) {
		if (err) throw err;
		var team_id = 0;
		if (rows[0].num > 0){
			team_id = rows[0].team_id;
		}else{
			bot.sendMessage(message.chat.id, "Puoi affrontare i boss solo se sei in un team.", back);
			return;
		}

		var kill_streak = rows[0].kill_streak;

		connection.query('SELECT players FROM team WHERE id = ' + team_id, function(err, rows, fields) {
			if (err) throw err;

			if ((rows[0].players < 3) && (team_id != 2)){
				bot.sendMessage(message.chat.id, "Il team deve possedere almeno 3 membri.", back);
				return;
			}

			connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
				if (err) throw err;
				var player_id = rows[0].id;
				var boss_id = rows[0].boss_id;
				var money = rows[0].money;
				var boss_time = rows[0].boss_time;
				var player_exp = rows[0].exp;
				var player_life = rows[0].life;
				var player_total_life = rows[0].total_life;
				var craft_count = rows[0].craft_count;
				var reborn = rows[0].reborn;
				var class_id = rows[0].class;
				var kill_streak_ok = rows[0].kill_streak_ok;

				var account_id = (rows[0].account_id).toString();
				if (banlist_id.indexOf(account_id) != -1){
					var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
					bot.sendMessage(message.chat.id, text, mark);
					return;
				}
				if (rows[0].holiday == 1){
					bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
					return;
				}

				if (player_id != 1){
					if ((class_id == 1) && (reborn >= 3)){
						bot.sendMessage(message.chat.id, "Raggiunta questa Rinascita la Vocazione √® obbligatoria, la puoi scegliere nella sezione Giocatore > Vocazione", back);
						return;
					}
				}

				if ((kill_streak >= 20) && (kill_streak_ok == 0)){
					connection.query('UPDATE player SET kill_streak_ok = 1 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
					});
				}

				helpMsg(message.chat.id, player_id, 3);

				if (rows[0].mission_id != 0){
					bot.sendMessage(message.chat.id, "Non puoi affrontare i boss finch√® sei in missione.", bossKb2);
					return;
				}

				if ((rows[0].travel_id != 0) || (rows[0].cave_id != 0)){
					if (rows[0].travel_id != 0){
						var time = new Date(rows[0].travel_time_end);
					}else{
						var time = new Date(rows[0].cave_time_end);				
					}
					bot.sendMessage(message.chat.id, "Sei in viaggio fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth()+1) + "/" + time.getFullYear(), bossKb2);
					return;
				}

				if (player_life <= 0){
					bot.sendMessage(message.chat.id, "Non hai abbastanza salute per combattere contro il boss! Riprova domani.", revive);
					return;
				}

				if (boss_time != null){
					var time = new Date(boss_time);
					bot.sendMessage(message.chat.id, "Non puoi ancora affrontare i boss, ti sei appena trasferito (" + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth()+1) + "/" + time.getFullYear() + ")", back);
					return;
				}

				if (Math.floor(player_exp/10) < 5){
					bot.sendMessage(message.chat.id, "Il tuo danno a questo livello √® troppo basso, √® sconsigliato procedere fino al raggiungimento del livello 5", back);
					return;
				}

				if (boss_id == 0){
					connection.query('SELECT team.boss_count, boss_team.life, boss_team.total_life, boss_team.killedby, boss_team.killeddate, team.boss_respawn, boss.name FROM team, boss_team, boss WHERE team.id = team_id AND boss_team.boss_id = boss.id AND unlocked = 1 AND team_id = ' + team_id + ' ORDER BY boss_id', function(err, rows, fields) {
						if (err) throw err;

						var boss_list = "\n";
						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "Il tuo team non √® ancora abilitato a visualizzare i boss, segnala a @fenix45.", back);
							return;
						}
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].life <= 0){
								if (rows[i].killeddate != null){
									var d = new Date(rows[i].killeddate);
									var short_date = addZero(d.getHours()) + ":" + addZero(d.getMinutes()) + ":" + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1);
								}else{
									var short_date = "?";
								}
								boss_list += (i+1) + ". <b>" + rows[i].name + "</b> (" + rows[i].killedby + " alle " + short_date + ")\n";
							}else{
								iKeys.push(["Affronta boss: " + rows[i].name]);
								boss_list += (i+1) + ". <b>" + rows[i].name + "</b> (" + rows[i].life + "/" + rows[i].total_life + " hp)\n";
							}
						}
						if (rows[0].boss_respawn != null){
							var d = new Date(rows[0].boss_respawn);
							var short_time = addZero(d.getHours()) + ":" + addZero(d.getMinutes()) + ":" + addZero(d.getSeconds());
							var short_date = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

							boss_list += "\nI boss tornano in vita il " + short_date + " alle " + short_time;
						}

						var boss_count = rows[0].boss_count;

						if ((reborn == 5) && (boss_count < 100)){
							console.log("NOBOSS: " + reborn + "-" + player_exp/10 + "-" + boss_count);
							bot.sendMessage(message.chat.id, "Il tuo livello √® troppo alto per affrontare i boss in questo team", back);
							return;
						}
						if ((player_exp/10 >= 300) && (boss_count < 100)){
							console.log("NOBOSS: " + reborn + "-" + player_exp/10 + "-" + boss_count);
							bot.sendMessage(message.chat.id, "Il tuo livello √® troppo alto per affrontare i boss in questo team", back);
							return;
						}
						if ((player_exp/10 >= 200) && (boss_count < 100)){
							console.log("NOBOSS: " + reborn + "-" + player_exp/10 + "-" + boss_count);
							bot.sendMessage(message.chat.id, "Il tuo livello √® troppo alto per affrontare i boss in questo team", back);
							return;
						}

						iKeys.push(["Torna al menu"]);

						if (message.text.indexOf(":") != -1){
							var boss = message.text.substring(message.text.indexOf(":")+1).trim();

							connection.query('SELECT boss_team.id, boss.description, boss.name FROM boss_team, boss WHERE boss_team.boss_id = boss.id AND unlocked = 1 AND team_id = ' + team_id + ' AND name = "' + boss + '" AND life > 0', function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length > 0){
									var boss_id = rows[0].id;
									var desc = "";
									if (rows[0].description != null){
										desc = rows[0].description + "\n\n";
									}
									var name = rows[0].name;
									connection.query('UPDATE `player` SET `boss_id`=' + boss_id + ' WHERE `id` = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, desc + "Hai deciso di affrontare <b>" + name + "</b>!", bossKb);
									});
								}else{
									bot.sendMessage(message.chat.id, "Questo boss non √® valido!", back);
								}
							});

							connection.query('SELECT MAX(boss_id) As max FROM boss_team WHERE team_id = ' + team_id, function(err, rows, fields) {
								if (err) throw err;
								if (parseInt(rows[0].max) < 31){
									console.log("Boss massimo: " + rows[0].max);
									connection.query('SELECT * FROM boss WHERE id > ' + rows[0].max, function(err, rows, fields) {
										if (err) throw err;
										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											if (rows[i].id == 1){
												connection.query('INSERT INTO `boss_team`(`id`, `boss_id`, `life`, `total_life`, `unlocked`, `team_id`) VALUES (DEFAULT,' + rows[i].id + ',' + rows[i].total_life + ',' + rows[i].total_life + ',1,' + team_id + ')', function(err, rows, fields) {
													if (err) throw err;
												});
											}else{
												connection.query('INSERT INTO `boss_team`(`id`, `boss_id`, `life`, `total_life`, `unlocked`, `team_id`) VALUES (DEFAULT,' + rows[i].id + ',' + rows[i].total_life + ',' + rows[i].total_life + ',0,' + team_id + ')', function(err, rows, fields) {
													if (err) throw err;
												});
											}
											console.log("Boss mancante aggiunto: " + rows[i].id);
										}
									});	
								}
							});

							return;
						};

						var kb = {
							parse_mode: "HTML",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						bot.sendMessage(message.chat.id, "Seleziona il boss, i partecipanti ricevono il bottino in base al danno.\nI boss tornano in vita ogni 48 ore dopo aver ucciso il primo.\nPer sbloccare i boss successivi, il tuo team deve sconfiggerli in ordine.\n" + boss_list, kb);
					});
				}else{
					connection.query('SELECT boss_team.life, boss_team.total_life, boss.name, boss_team.unlocked FROM boss_team, boss WHERE boss_team.boss_id = boss.id AND boss_team.id = ' + boss_id, function(err, rows, fields) {
						if (err) throw err;

						if (Object.keys(rows).length == 0){
							bot.sendMessage(message.chat.id, "Errore misterioso, contatta l'admin per segnalarlo.", back);
							return;
						}

						if (rows[0].unlocked == 0){
							connection.query('UPDATE `player` SET `boss_id`=0 WHERE `id`=' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Sei pronto a tornare a sfidare il boss!", bossKb);
							});
							return;
						}

						var boss_life = rows[0].life;

						connection.query('UPDATE `player` SET magic_to = 1, dragon_to = 1 WHERE id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
						});

						var kb = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Attacco Leggero","Attacco Pesante"],["Incantesimi"],["Utilizzabili Boss"],["Visualizza Boss"],["Torna al menu"]]
							}
						};

						bot.sendMessage(message.chat.id, "*La tua salute*: " + player_life + " / " + player_total_life + "\n*Salute " + rows[0].name + "*: " + rows[0].life + " / " + rows[0].total_life + "\nCosa vuoi fare?", kb);
					});
				};
			});
		});
	});
});

bot.onText(/^Incantesimi$/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var to = rows[0].magic_to;

		if (to == 0){
			return;
		}

		var text = 	"Incantesimi:\n" +
			"*Furia dei Mari*: Ricarica la salute in base al danno assorbito (non lo annulla)\n" +
			"*Tempesta Folgorante*: Paralizza il bersaglio per alcuni turni\n" +
			"*Impeto di Fiamme*: Infligge un notevole danno al bersaglio\n" +
			"*Ira Astrale*: Aumenta la probabilit√† di critico per alcuni turni (dal turno successivo)\n" +
			"\nSe gli incantesimi vengono applicati al boss, ne beneficiano tutti i giocatori che lo attaccano.";

		connection.query('DELETE FROM magic WHERE quantity <= 0', function(err, rows, fields) {
			if (err) throw err;

			connection.query('SELECT type, power, quantity FROM magic WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0){
					var n = "";
					var iKeys = [];
					for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
						if (rows[i].type == 1){
							n = "Furia dei Mari";
						}else if (rows[i].type == 2){
							n = "Tempesta Folgorante";
						}else if (rows[i].type == 3){
							n = "Impeto di Fiamme";
						}else if (rows[i].type == 4){
							n = "Ira Astrale";
						}
						iKeys.push(["Lancia " + n + " " + rows[i].power + " (" + rows[i].quantity + ")"]);
					}

					if (to == 1){
						iKeys.push(["Affronta Boss"]);
					}else if (to == 2){
						iKeys.push(["Torna al Dungeon"]);
					}
					iKeys.push(["Torna al menu"]);

					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": iKeys
						}
					};

					var extra = "";
					if (to == 1){
						extra = "il boss";
					}else if (to == 2){
						extra = "il mostro";
					}

					bot.sendMessage(message.chat.id, text + "\nSeleziona l'incantesimo da utilizzare contro " + extra + "!", kb);
				}else{
					var kb = {
						parse_mode: "Markdown",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": [["Affronta Boss"],["Dungeon"],["Torna al menu"]]
						}
					};
					bot.sendMessage(message.chat.id, text + "\n\nNon possiedi alcun incantesimo, puoi ottenerli attraverso la Sintesi!", kb);
					return;
				}
			});
		});
	});
});

bot.onText(/^Attacco leggero|^Attacco pesante|^Lancia ([a-zA-Z ]+) ([0-9]+)/i, function(message, match) {

	var bossKb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Affronta Boss"],["Torna al menu"]]
		}
	};

	var double = 0;
	if (message.text.indexOf("Pesante") != -1){
		double = 1;
	}

	if (!checkSpam(message)){
		return;
	}

	fixBoss();

	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Non ho trovato il tuo account", back);
			return;
		}

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (Math.floor(rows[0].exp/10) < 5){
			bot.sendMessage(message.chat.id, "Il tuo danno a questo livello √® troppo basso, √® sconsigliato procedere fino al raggiungimento del livello 5", back);
			return;
		}

		var player_id = rows[0].id;
		var weapon_id = rows[0].weapon_id;
		var weapon2_id = rows[0].weapon2_id;
		var weapon3_id = rows[0].weapon3_id;
		var boss_time = rows[0].boss_time;
		var reborn = rows[0].reborn;
		var class_id = rows[0].class;
		var player_paralyzed = rows[0].paralyzed;
		var automagic1 = rows[0].weapon_enchant_bonus;
		var automagic2 = rows[0].weapon2_enchant_bonus;
		var automagic3 = rows[0].weapon3_enchant_bonus;
		var boost_cast = rows[0].boost_cast;

		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;
		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Scalata Boss"],["Torna al menu"]]
			}
		};

		if (rows[0].res_time != null){
			var now = new Date();
			var res_time = new Date(rows[0].res_time);
			var sec = Math.round(((res_time - now)/1000));
			if (sec > 0){
				bot.sendMessage(message.chat.id, "Sei appena tornato in vita, attendi ancora " + toTime(sec, 1), kb);
				return;
			}else{
				connection.query('UPDATE player SET res_time = NULL WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			}
		}

		if ((boost_mission == 0) && (boost_id != 0)){
			connection.query('UPDATE player SET boost_id = 0 WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});
		}

		var critical = parseInt(rows[0].weapon_crit);
		var critical_armor = parseInt(rows[0].weapon2_crit);
		var critical_shield = parseInt(rows[0].weapon3_crit);

		if (charm_id == 404){
			critical += 6;
		}
		if (charm_id == 493){
			critical += 2;
		}
		if (charm_id == 494){
			critical += 4;
		}
		if (charm_id == 495){
			critical_armor += 3;
		}
		if (charm_id == 496){
			critical_shield += 3;
		}
		if (charm_id == 696){
			critical += 5;
			critical_armor += 5;
			critical_shield += 3;
		}
		if ((class_id == 2) && (reborn == 3)){
			critical_armor += 5;
		}
		if ((class_id == 2) && (reborn >= 4)){
			critical_armor += 7;
			critical_shield += 7;
		}
		if ((class_id == 4) && (reborn == 3)){
			critical += 2;
			critical_armor += 2;
			critical_shield += 2;
		}
		if ((class_id == 4) && (reborn >= 4)){
			critical += 7;
			critical_armor += 7;
			critical_shield += 7;
		}
		if ((class_id == 5) && (reborn == 3)){
			critical_shield += 3;
		}
		if ((class_id == 5) && (reborn >= 4)){
			critical_shield += 5;
		}
		if ((class_id == 6) && (reborn == 3)){
			critical_armor += 2;
		}
		if ((class_id == 6) && (reborn == 3)){
			critical_shield += 2;
		}
		if ((class_id == 6) && (reborn >= 4)){
			critical_armor += 7;
		}
		if ((class_id == 6) && (reborn >= 4)){
			critical_shield += 7;
		}
		if ((class_id == 6) && (reborn == 5)){
			critical_armor += 7;
		}
		if ((class_id == 6) && (reborn == 5)){
			critical_shield += 7;
		}
		if ((class_id == 8) && (reborn == 3)){
			critical_shield += 5;
		}
		if ((class_id == 8) && (reborn >= 4)){
			critical_shield += 7;
		}
		if ((class_id == 8) && (reborn == 5)){
			critical += 7;
		}
		if ((class_id == 9) && (reborn == 3)){
			critical += 2;
			critical_shield += 2;
		}
		if ((class_id == 9) && (reborn >= 4)){
			critical += 7;
			critical_shield += 7;
		}

		var danno = Math.round(Math.random()*(rows[0].exp/10+rows[0].weapon)+rows[0].weapon);
		danno += rows[0].weapon_enchant;

		var charm_id = rows[0].charm_id;
		var player_exp = rows[0].exp;

		if (charm_id == 62){
			danno += 5;
		}else if (charm_id == 184){
			danno += 15;
		}else if (charm_id == 188){
			danno += 20;
		}else if (charm_id == 698){
			danno += 30;
		}

		var bonus = 0;
		if (rows[0].weapon2 < 0){
			var bonus = Math.abs(rows[0].weapon2)+Math.abs(rows[0].weapon3)+rows[0].weapon2_enchant+rows[0].weapon3_enchant;
			bonus = Math.round(Math.random()*((rows[0].exp/10+bonus)/2)+bonus);
		}
		var shield = rows[0].weapon3;
		var armor = rows[0].weapon2;

		danno = parseInt(danno);
		bonus = parseInt(bonus);

		var magic = 0;
		var magicId = 0;
		var magicPow = 0;
		var magicPowBase = 0;

		if (message.text.indexOf("Lancia") != -1){
			if (rows[0].magic_to == 1){
				//match[1] = match[1].slice(0, -1);
				if (match[1] == "Furia dei Mari"){
					magic = 1;
				}else if (match[1] == "Tempesta Folgorante"){
					magic = 2;
				}else if (match[1] == "Impeto di Fiamme"){
					magic = 3;
				}else if (match[1] == "Ira Astrale"){
					magic = 4;
				}
			}else{
				return;
			}
		}

		if (rows[0].mission_id != 0){
			bot.sendMessage(message.chat.id, "Non puoi affrontare i boss finch√® sei in missione.", back);
			return;
		}

		if ((rows[0].travel_id != 0) || (rows[0].cave_id != 0)){
			if (rows[0].travel_id != 0){
				var time = new Date(rows[0].travel_time_end);
			}else{
				var time = new Date(rows[0].cave_time_end);
			}
			bot.sendMessage(message.chat.id, "Sei in viaggio fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth()+1) + "/" + time.getFullYear(), abort_travel_2);
			return;
		}

		var pow = 0;
		if (match[2] != undefined){
			pow = match[2];
		}

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 10', function(err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			if (Object.keys(rows).length > 0){
				abBonus = parseInt(rows[0].ability_level)*rows[0].val;
			}

			var magicDouble = 0;
			connection.query('SELECT type, id, power, quantity FROM magic WHERE player_id = ' + player_id + ' AND power = ' + pow + ' AND type = ' + magic, function(err, rows, fields) {
				if (err) throw err;

				if (magic != 0){
					if (Object.keys(rows).length > 0){
						if (rows[0].quantity == 0){
							bot.sendMessage(message.chat.id, "Hai terminato gli utilizzi dell'incantesimo selezionato!", bossKb);
							return;
						}else{
							magicId = rows[0].id;
							magicPow = rows[0].power;
							magicPowBase = magicPow;

							var rand = Math.random()*100;
							if ((class_id == 4) && ((magic == 3) || (magic == 4)) && (reborn == 5)){
								abBonus += 25;
							}
							if (rand < abBonus){
								magicDouble = 1;
								//console.log("BOSS_DOUBLE");
							}
						}
					}else{
						bot.sendMessage(message.chat.id, "Non possiedi l'incantesimo selezionato!", bossKb);
						return;
					}
				}

				var automagic = 0;

				if (charm_id == 698){
					boost_cast += 3;
				}

				if (magic == 0){
					var magicrand = Math.random()*100;
					if (magicrand < (5+boost_cast)){
						if (weapon_id == 630){
							magic = 2;
							automagic = 1;
							magicPow = 50;
						}else if (weapon_id == 631){
							magic = 3;
							automagic = 1;
							magicPow = 50;
						}else if (weapon_id == 632){
							magic = 1;
							automagic = 1;
							magicPow = 50;
						}
					}
					if (magicrand < (10+boost_cast)){
						if (weapon_id == 638){
							magic = 2;
							automagic = 1;					
							magicPow = 200;
						}else if (weapon_id == 639){
							magic = 3;
							automagic = 1;
							magicPow = 150;
						}else if (weapon_id == 640){
							magic = 1;
							automagic = 1;
							magicPow = 150;
						}
					}
					if ((magicrand > 80) && (automagic1 > 0)){
						var magicrand2 = Math.random()*100;
						if (automagic1 == 1){
							magic = 1;
							automagic = 1;
							magicPow = 50;
						}else if (automagic1 == 2){
							magic = 2;
							automagic = 1;
							magicPow = 150;
						}else{
							magic = 3;
							automagic = 1;
							magicPow = 50;
						}
					}
				}

				var check = 0;
				if (magicDouble == 1){
					if (automagic == 0){
						if ((class_id == 2) && (reborn == 3)){
							magicPow += magicPow*0.1;
							magicPow += magicPowBase;
							check = 1;
						}
						if ((class_id == 2) && (reborn == 4)){
							magicPow += magicPow*0.25;
							magicPow += magicPowBase;
							check = 1;
						}
						if ((class_id == 2) && (reborn == 5)){
							magicPow += magicPow*0.25;
							magicPow += magicPow*0.50;
							magicPow += magicPowBase;
							check = 1;
						}
					}
					if ((class_id == 3) && (reborn == 5)){
						magicPow += magicPow*0.3;
						magicPow += magicPowBase;
						check = 1;
					}
					if (check == 0){
						magicPow += magicPowBase;
					}
				}else{
					if (automagic == 0){
						if ((class_id == 2) && (reborn == 3)){
							magicPow += magicPow*0.1;
						}
						if ((class_id == 2) && (reborn == 4)){
							magicPow += magicPow*0.25;
						}
						if ((class_id == 2) && (reborn == 5)){
							magicPow += magicPow*0.25;
							magicPow += magicPow*0.50;
						}
					}
					if ((class_id == 3) && (reborn == 5)){
						magicPow += magicPow*0.3;
					}
				}

				connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 1', function(err, rows, fields) {
					if (err) throw err;

					var abBonus = 0;
					if (Object.keys(rows).length > 0){
						abBonus = rows[0].ability_level*rows[0].val;
						critical += abBonus;
						critical_armor += abBonus;
						critical_shield += abBonus;
					}

					connection.query('SELECT team_player.team_id, team_player.suspended, COUNT(*) As num, team.boost_id FROM player, team_player, team WHERE team.id = team_player.team_id AND player.id = ' + player_id + ' AND team_player.player_id = player.id', function(err, rows, fields) {
						if (err) throw err;
						var team_id = 0;
						if (rows[0].num > 0){
							team_id = rows[0].team_id;
						}else{
							bot.sendMessage(message.chat.id, "Puoi affrontare i boss solo se sei in un team.", back);
							return;
						}

						var team_boost_id = rows[0].boost_id;
						if (team_boost_id == 1){
							danno += danno*0.5;
						}

						if (boss_time != null){
							bot.sendMessage(message.chat.id, "Non puoi ancora affrontare i boss, ti sei appena trasferito.", back);
							return;				
						}

						if (rows[0].suspended == 1){
							bot.sendMessage(message.chat.id, "Non puoi attaccare i boss finch√® sei sospeso", back);
							return;
						}

						connection.query('SELECT level FROM team_boost WHERE team_id = ' + team_id + ' AND boost_id = 1', function(err, rows, fields) {
							if (err) throw err;

							if (Object.keys(rows).length > 0){
								danno += danno*(0.03*rows[0].level);
							}

							connection.query('SELECT level FROM team_boost WHERE team_id = ' + team_id + ' AND boost_id = 3', function(err, rows, fields) {
								if (err) throw err;

								var boost_reduction = 0;
								if (Object.keys(rows).length > 0){
									boost_reduction = (0.03*rows[0].level);
								}

								connection.query('SELECT players FROM team WHERE id = ' + team_id, function(err, rows, fields) {
									if (err) throw err;

									if ((rows[0].players < 3) && (team_id != 2)){
										bot.sendMessage(message.chat.id, "Il team deve possedere almeno 3 membri.", back);
										return;
									}

									connection.query('SELECT critical, damage, defense, claws, saddle FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length > 0){
											if ((class_id == 7) && (reborn > 1)){
												rows[0].claws += rows[0].claws*0.5;
											}
											if ((class_id == 7) && (reborn > 1)){
												rows[0].saddle += rows[0].saddle*0.5;
											}
											if ((class_id == 7) && (reborn >= 4)){
												rows[0].damage += rows[0].damage*0.5;
											}
											if ((class_id == 7) && (reborn >= 4)){
												rows[0].defense += rows[0].defense*0.5;
											}
											danno += parseInt(rows[0].damage);
											danno += parseInt(rows[0].claws);
											bonus += parseInt(rows[0].defense);
											bonus += parseInt(rows[0].saddle);
											var dragon_crit = rows[0].critical;
											if (charm_id == 602){
												danno += 25;
												dragon_crit += 10;
											}
											if (charm_id == 695){
												danno += 30;
												dragon_crit += 15;
											}
											if ((class_id == 7) && (reborn == 3)){
												dragon_crit += 5;
											}
											if ((class_id == 7) && (reborn >= 4)){
												dragon_crit += 7;
											}
											if ((class_id == 7) && (reborn == 5)){
												critical += dragon_crit/2;
											}
										}

										connection.query('SELECT * FROM player WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											var boss_id = rows[0].boss_id;
											var money = rows[0].money;
											var player_exp = rows[0].exp;
											var player_life = rows[0].life;
											var player_total_life = rows[0].total_life;
											var craft_count = rows[0].craft_count;

											if (player_life <= 0){
												bot.sendMessage(message.chat.id, "Non abbastanza salute per combattere contro il boss! Riprova domani.", revive);
												return;
											}

											if (boss_id > 0){
												connection.query('SELECT boss_team.life, boss_team.countdown, boss_team.paralyzed, boss.id As bossNum, boss_team.critic, boss_team.id, boss_team.total_life, boss.name, boss_team.unlocked FROM boss_team, boss WHERE boss_team.boss_id = boss.id AND boss_team.id = ' + boss_id, function(err, rows, fields) {
													if (err) throw err;

													if (Object.keys(rows).length == 0){
														bot.sendMessage(message.chat.id, "Errore misterioso, contatta l'admin per segnalarlo.", back);
														return;
													}

													var boss_num = rows[0].bossNum;
													if (rows[0].unlocked == 0){
														connection.query('UPDATE player SET boss_id = 0 WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Sei pronto a tornare a sfidare il boss!", bossKb);
														});
														return;
													}

													if (boss_num == 31){
														if ((magic != 0) && (automagic == 0)){
															bot.sendMessage(message.chat.id, "Questo boss √® immune agli incantesimi lanciati manualmente!");
															magic = 0;
														}
													}

													var boss_life = rows[0].life;
													var critic = rows[0].critic;
													var countdown = rows[0].countdown;
													var boss_total_life = rows[0].total_life;

													var vita;
													var vita_tot;
													if (boss_life <= 0){
														bot.sendMessage(message.chat.id, "Il boss √® gi√† stato sconfitto!", back);
													}
													var boss_drop = boss_total_life/10;
													var critical_rand = Math.round(Math.random()*100)+1;
													var crit_bool = 0;
													var crit_txt = "";

													if (double == 1){
														danno = danno*1.5;
													}

													if (crazyMode == 1){
														danno = danno*2;
													}

													if (critic > 0){
														critical += 50;
													}

													if (critical_rand <= critical){
														danno = danno*2;
														crit_bool = 1;
													}

													var magic_txt = "";
													if (magic == 3){
														var prop = 100*magicPow/200;
														danno = danno*(prop/15);
														if (magicDouble == 1){
															magic_txt = "con un incantesimo (x2), ";
														}else{
															magic_txt = "con un incantesimo, ";
														}
													}

													var magic_txt2 = "";
													var extra_bonus = 0;
													if (magic == 1){
														var prop = 100*magicPow/150;
														extra_bonus = bonus*(prop/5);
														if (magicDouble == 1){
															magic_txt2 = ", assorbito grazie ad un incantesimo (x2)";
														}else{
															magic_txt2 = ", assorbito grazie ad un incantesimo";
														}
													}

													if ((class_id == 8) && (reborn > 1)){
														danno += danno*0.1;
													}
													if ((class_id == 8) && (reborn == 5)){
														danno += danno*0.1;
													}
													if ((class_id == 8) && ((reborn == 3) || (reborn >= 4))){
														danno += danno*0.07;
													}

													//638 - Hoenir
													//639 - Xocotl
													//640 - Hydros

													if (boss_num == 28){			//Hoenir - Acqua
														if (weapon_id == 638){
															danno = 0;
														}
														if (weapon_id == 639){
															danno = danno*1.5;
														}
														if (weapon_id == 640){
															danno = danno*0.5;
														}
													}
													if (boss_num == 29){			//Hydros - Elettro
														if (weapon_id == 640){
															danno = 0;
														}
														if (weapon_id == 638){
															danno = danno*1.5;
														}
														if (weapon_id == 639){
															danno = danno*0.5;
														}
													}
													if (boss_num == 30){			//Xocotl - Fuoco
														if (weapon_id == 639){
															danno = 0;
														}
														if (weapon_id == 640){
															danno = danno*1.5;
														}
														if (weapon_id == 638){
															danno = danno*0.5;
														}
													}

													danno = Math.floor(danno);

													var multi = Math.round(Math.floor(player_exp/10)/10);
													if (multi >= 5){
														danno = danno*5;
													}else{
														danno = danno*multi;
													}

													var kb = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": [["Attacco Leggero","Attacco Pesante"],["Incantesimi"],["Utilizzabili Boss"],["Visualizza Boss"],["Torna al menu"]]
														}
													};

													var next = {
														parse_mode: "Markdown",
														reply_markup: {
															resize_keyboard: true,
															//one_time_keyboard: true,
															"keyboard": [["Continua"],["Torna al menu"]]
														}
													};

													var status = "Normale";
													var paralyzed = rows[0].paralyzed;
													var critic = rows[0].critic;
													if (paralyzed > 0){
														status = "Paralizzato (" + paralyzed + " turni)";
													}
													if (critic > 0){
														status = "Vulnerabile (" + critic + " turni)";
													}

													// Annulla quando paralizzato
													/*
														if ((paralyzed > 0) && (automagic == 1) && (magic == 2)){
															automagic = 0;
															magic = 0;
														}
														if ((critic > 0) && (automagic == 1) && (magic == 4)){
															automagic = 0;
															magic = 0;
														}
														*/

													if ((paralyzed > 0) && (automagic == 1) && (magic == 2)){
														automagic = 0;
														magic = 0;
														connection.query('UPDATE player SET boost_cast = boost_cast+5 WHERE id = ' + player_id, function (err, rows, fields) {
															if (err) throw err;
														});
													}

													bot.sendMessage(message.chat.id, "Battaglia contro il boss:\nStato boss: " + status + "\nSalute boss: *" + formatNumber(boss_life) + "* hp\nLa tua salute: *" + formatNumber(player_life) + "* hp", next).then(function() {
														answerCallbacks[message.chat.id] = function(answer) {
															if (answer.text != "Continua"){
																return;
															}

															if (magic != 0){
																setAchievement(message.chat.id, player_id, 6, 1);
															}

															if (crit_bool == 1){
																setAchievement(message.chat.id, player_id, 33, 1);
															}

															if ((boost_mission > 0) && (boost_id == 6)){
																connection.query('UPDATE player SET boost_mission = boost_mission-1 WHERE id = ' + player_id, function(err, rows, fields) {
																	if (err) throw err;
																});
																danno = danno*2;
															}

															var meParalyzed = 0;
															if (player_paralyzed > 0){
																connection.query('UPDATE player SET paralyzed = paralyzed-1 WHERE id = ' + player_id, function (err, rows, fields) {
																	if (err) throw err;
																});
																meParalyzed = 1;
																danno = 0;
																magic = 0;
															}

															if ((magic == 2) && (meParalyzed == 0)){
																var turn = 0;
																if (magicPow < 100){
																	turn = 1;
																}else if (magicPow < 200){
																	turn = 2;
																}else if (magicPow < 250){
																	turn = 3;
																}else if (magicPow < 300){
																	turn = 4;
																}else if (magicPow < 350){
																	turn = 5;
																}else if (magicPow < 400){
																	turn = 6;
																}else{
																	turn = 7;
																}
																var r = Math.random()*100;
																if ((automagic == 1) && (r < 50))
																	turn++;
																paralyzed = turn;
																connection.query('UPDATE boss_team SET paralyzed = ' + turn + ' WHERE id = ' + boss_id, function (err, rows, fields) {
																	if (err) throw err;
																	if (magicDouble == 1){
																		bot.sendMessage(message.chat.id, "Il boss √® stato paralizzato per " + turn + " turni (x2)!");
																	}else{
																		bot.sendMessage(message.chat.id, "Il boss √® stato paralizzato per " + turn + " turni!");
																	}

																	connection.query('UPDATE player SET boost_cast = 0 WHERE id = ' + player_id, function (err, rows, fields) {
																		if (err) throw err;
																	});
																});
															}

															if ((magic == 4) && (meParalyzed == 0)){
																var turn = 0;
																if (magicPow < 100){
																	turn = 1;
																}else if (magicPow < 200){
																	turn = 2;
																}else if (magicPow < 250){
																	turn = 3;
																}else if (magicPow < 300){
																	turn = 4;
																}else if (magicPow < 350){
																	turn = 5;
																}else if (magicPow < 400){
																	turn = 6;
																}else{
																	turn = 7;
																}
																var r = Math.random()*100;
																if ((automagic == 1) && (r < 50))
																	turn++;
																critic = turn;
																connection.query('UPDATE boss_team SET critic = ' + turn + ' WHERE id = ' + boss_id, function (err, rows, fields) {
																	if (err) throw err;
																	if (magicDouble == 1){
																		bot.sendMessage(message.chat.id, "Il boss √® vulnerabile ai colpi critici per " + turn + " turni (x2)!");
																	}else{
																		bot.sendMessage(message.chat.id, "Il boss √® vulnerabile ai colpi critici per " + turn + " turni!");
																	}
																});
															}

															connection.query('SELECT boss_team.life, boss_team.paralyzed, boss_team.critic, boss_team.total_life FROM boss_team, boss WHERE boss_team.boss_id = boss.id AND boss_team.id = ' + boss_id, function(err, rows, fields) {
																if (err) throw err;

																var lifeB = rows[0].life;	
																if (paralyzed == 0)
																	paralyzed = rows[0].paralyzed;
																if (critic == 0)
																	critic = rows[0].critic;

																if (lifeB <= 0){
																	bot.sendMessage(message.chat.id, "Il boss √® gi√† stato sconfitto", bossKb);
																	return;
																}

																if (paralyzed > 0){
																	// Riduce il count sotto
																}
																if (critic > 0){
																	connection.query('UPDATE boss_team SET critic = critic-1 WHERE id = ' + boss_id, function(err, rows, fields) {
																		if (err) throw err;
																	});
																}

																if (lifeB-danno <= 0){
																	danno = lifeB;
																}
																lifeB = lifeB-danno;
																setAchievement(message.chat.id, player_id, 2, danno);
																connection.query('UPDATE boss_team SET life = life-' + danno + ' WHERE id = ' + boss_id, function(err, rows, fields) {
																	if (err) throw err;
																});

																connection.query('INSERT INTO boss_damage (boss_id, player_id, team_id, damage) VALUES (' + boss_id + ',' + player_id + ',' + team_id + ',' + danno + ')', function(err, rows, fields) {
																	if (err) throw err;
																});

																if ((magic != 0) && (automagic == 0) && (meParalyzed == 0)){
																	if (magic != 3){		//SCALA MAGIE ECCETTO FIAMME
																		connection.query('UPDATE magic SET quantity = quantity - 1 WHERE id = ' + magicId, function (err, rows, fields){
																			if (err) throw err;
																			//console.log("Magia con ID " + magicId + " utilizzata");
																		});
																	}
																}

																if (lifeB <= 0){
																	if ((magic != 0) && (automagic == 0) && (meParalyzed == 0)){
																		if (magic == 3){	//SCALA SOLO FIAMME
																			connection.query('UPDATE magic SET quantity = quantity - 1 WHERE id = ' + magicId, function (err, rows, fields){
																				if (err) throw err;
																				//console.log("Magia con ID " + magicId + " utilizzata");
																			});
																		}
																	}

																	finishedBoss(message, boss_id);

																	connection.query('SELECT boss_respawn FROM team WHERE id = ' + team_id, function(err, rows, fields) {
																		if (err) throw err;
																		if (rows[0].boss_respawn == null){
																			var now = new Date();
																			now.setHours(now.getHours() + 48);
																			var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
																			var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());							

																			connection.query('UPDATE team SET boss_respawn = "' + long_date + '" WHERE id = ' + team_id, function(err, rows, fields) {
																				if (err) throw err;
																				bot.sendMessage(message.chat.id, "Il primo boss √® stato ucciso, il tuo team ha tempo fino alle " + short_date + " di dopodomani prima che i boss tornino in vita!");
																			});
																		}
																	});

																	var bonus_drop = 0;
																	var bonus_act = 0;
																	var acc_bonus = 0;

																	connection.query('SELECT T2.players, T2.level FROM team T1 JOIN team T2 ON T1.child_team = T2.id WHERE T1.id = ' + team_id, function (err, rows, fields){
																		if (err) throw err;

																		//Se questa √® la madre
																		if (Object.keys(rows).length > 0){
																			if (rows[0].level >= 5){
																				//bonus_drop += Math.round(parseInt(rows[0].players)*100)/2;
																				bonus_act = 1;
																				acc_bonus = 1;
																			}
																		}

																		connection.query('SELECT T2.players, T2.level FROM team T1 JOIN team T2 ON T1.id = T2.id WHERE T1.child_team = ' + team_id, function (err, rows, fields){
																			if (err) throw err;

																			//Se questa √® la accademia
																			if (Object.keys(rows).length > 0){
																				if ((rows[0].level >= 5) && (bonus_act == 0)){
																					//bonus_drop += Math.round(parseInt(rows[0].players)*100)/2;
																					acc_bonus = 1;
																				}
																			}

																			connection.query('SELECT level FROM team_boost WHERE team_id = ' + team_id + ' AND boost_id = 2', function(err, rows, fields) {
																				if (err) throw err;

																				var boost_bonus = 0;
																				if (Object.keys(rows).length > 0){
																					boost_bonus = (0.03*rows[0].level);
																				}

																				connection.query('SELECT team.level, team.kill_num1, team.kill_num2, player.id, player.nickname, player.chat_id, (SELECT COUNT(nickname) FROM `player`, team_player WHERE player.id = team_player.player_id AND team_player.team_id = ' + team_id + ') As num FROM player, team_player, team WHERE team.id = team_player.team_id AND player.id = team_player.player_id AND team_player.team_id = ' + team_id, function(err, rows, fields) {
																					if (err) throw err;
																					var drop = parseInt((boss_drop) + (parseInt(rows[0].num)*20));

																					var bonus = 0;
																					var bonus_parz = 0;
																					var bonus_compl = 0;

																					if (rows[0].kill_num1 > 0)
																						bonus_parz = Math.floor(Math.log(rows[0].kill_num1)*1000)+800;

																					if (rows[0].kill_num2 > 0)
																						bonus_compl = Math.floor(Math.log2(rows[0].kill_num2)*1500)+1500;

																					bonus_drop += (100*rows[0].level)+bonus_parz+bonus_compl;

																					if (Object.keys(rows).length > 0){
																						if (rows[0].num > 0){
																							if (team_boost_id == 2){
																								bonus_drop += bonus_drop*0.5;
																							}
																							bonus_drop += bonus_drop*boost_bonus;
																							bonus_drop = Math.round(bonus_drop);

																							teamBoss(team_id, bonus_drop, message);
																						}
																					}

																					var now = new Date();
																					var rand = Math.round(Math.random()*5+3);
																					now.setHours(now.getHours() + rand);
																					var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

																					connection.query('UPDATE boss_team SET paralyzed = 0, critic = 0, killedby = "' + message.from.username + '", killeddate = "' + getNow("en") + '" WHERE id = ' + boss_id, function(err, rows, fields) {
																						if (err) throw err;
																						connection.query('SELECT boss_id FROM boss_team WHERE id = ' + boss_id, function(err, rows, fields) {
																							if (Object.keys(rows).length > 0){
																								connection.query('UPDATE boss_team SET unlocked = 1 WHERE team_id = ' + team_id + ' AND boss_id = ' + (parseInt(rows[0].boss_id)+1), function(err, rows, fields) {
																									if (err) throw err;
																								});
																							}
																						});

																						connection.query('UPDATE player SET money = money+' + drop + ' WHERE id = ' + player_id, function(err, rows, fields) {
																							if (err) throw err;

																							var randCaps = Math.round(Math.random()*100);
																							if ((randCaps < 2) && (player_exp > 500)){
																								connection.query('SELECT COUNT(*) As num FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 169', function(err, rows, fields) {
																									if (err) throw err;

																									if (rows[0].num == 0){
																										connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + player_id + ',169)', function(err, rows, fields) {
																											if (err) throw err;
																											bot.sendMessage(message.chat.id, "Hai ottenuto una RARISSIMA *Capsula di Antimateria*!", back);
																										});
																									};
																								});
																							}

																							if (boss_num == 20){
																								connection.query('UPDATE team SET kill_num1 = kill_num1+1 WHERE id = ' + team_id, function(err, rows, fields) {
																									if (err) throw err;

																									incremBoss(team_id);

																								});
																							}else if (boss_num == 31){
																								connection.query('UPDATE team SET kill_num2 = kill_num2+1 WHERE id = ' + team_id, function(err, rows, fields) {
																									if (err) throw err;

																									incremBoss(team_id);
																								});
																							}

																							connection.query('UPDATE team SET boss_count=boss_count+1 WHERE id = ' + team_id, function(err, rows, fields) {
																								if (err) throw err;
																								var point = 1;
																								var extra = "";
																								if (acc_bonus > 0){
																									point += acc_bonus;
																									extra = " (+1 da Accademia/Madre)";
																								}
																								connection.query('UPDATE team SET point = point+' + point + ' WHERE id = ' + team_id, function(err, rows, fields) {
																									if (err) throw err;
																									if (boss_num != 31){
																										bot.sendMessage(message.chat.id, "Hai UCCISO il boss e ottenuto:" +
																														"\n> *" + formatNumber(drop+bonus_drop) + "* ¬ß" +
																														"\n> *" + formatNumber(bonus_drop) + "* ¬ß al team" +
																														"\n> *1* Punto Anima" + extra +
																														"\nInoltre hai sbloccato il boss successivo!", bossKb);
																									}else{
																										bot.sendMessage(message.chat.id, "Hai UCCISO il boss e ottenuto:" +
																														"\n> *" + formatNumber(drop+bonus_drop) + "* ¬ß" +
																														"\n> *" + formatNumber(bonus_drop) + "* ¬ß al team" +
																														"\n> *1* Punto Anima" + extra, bossKb);
																									}
																								});
																								setAchievement(message.chat.id, player_id, 19, 1);
																							});
																							if ((armor == 0) && (shield == 0)){
																								setAchievement(message.chat.id, player_id, 44, 1);
																							}
																						});
																					});
																				});
																			});
																		});
																	});
																}else{

																	if (crit_bool == 1){
																		crit_txt = " CRITICI";
																		setAchievement(message.chat.id, player_id, 33, 1);
																	}

																	if (paralyzed > 0){
																		connection.query('UPDATE boss_team SET paralyzed = paralyzed-1 WHERE id = ' + boss_id, function(err, rows, fields) {
																			if (err) throw err;

																			bot.sendMessage(message.chat.id, "Il boss √® paralizzato!", kb).then(function() {
																				answerCallbacks[message.chat.id] = function(answer) {
																					if (answer.text == "Consumabili"){
																						Consumabili(message, player_id, 1, player_total_life, player_life, boss_id);
																					}
																				};
																			});

																			setTimeout(function() {
																				bot.sendMessage(message.chat.id, "Hai colpito il boss " + magic_txt + "e hai inflitto *" + formatNumber(danno) + "* danni" + crit_txt + ", ha ancora " + lifeB + " hp", mark);
																			}, 500);
																		});
																		if ((magic != 0) && (automagic == 0)){
																			if (magic == 3){
																				connection.query('UPDATE magic SET quantity = quantity-1 WHERE id = ' + magicId, function (err, rows, fields){
																					if (err) throw err;
																					//console.log("Magia con ID " + magicId + " utilizzata");
																				});
																			}
																		}
																		return;
																	}

																	var damage = 0;
																	var max = Math.round((boss_drop/15)*1.5);
																	var min = Math.round((boss_drop/16)*1.5);
																	damage = Math.round(Math.random()*max+min)-bonus;
																	var heal = Math.round(Math.max(player_total_life*(magicPow/1000), (player_total_life*((magicPow/900)+0.2)) - damage));
																	damage = damage-extra_bonus;

																	//console.log(damage, min, max);

																	var critical_rand2 = Math.round(Math.random()*100)+1;
																	var crit_txt2 = "";

																	if ((critical_rand2 <= critical_armor) && (meParalyzed == 0)){
																		damage = damage/1.5;
																		crit_txt2 = ", ridotti grazie alla tua corazza";
																		setAchievement(message.chat.id, player_id, 31, 1);
																	}

																	var critical_rand3 = Math.round(Math.random()*100)+1;
																	var crit_bool3 = 0;
																	var crit_txt3 = "";

																	if ((critical_rand3 <= critical_shield) && (meParalyzed == 0)){
																		crit_bool3 = 1;
																		crit_txt3 = ", assorbito completamente dallo scudo";
																		setAchievement(message.chat.id, player_id, 32, 1);
																	}

																	if (charm_id == 63){
																		damage = damage-5;
																	}else if (charm_id == 186){
																		damage = damage-15;
																	}else if (charm_id == 189){
																		damage = damage-20;
																	}

																	var dmg = damage*Math.max(1, 1.5 - ((2*boss_total_life)/1000000) + ((3*boss_num)/31));
																	damage = dmg;

																	if (double == 1){
																		damage = damage*1.5;
																	}
																	if ((class_id == 2) && (reborn > 1)){
																		damage += damage*0.05;
																	}
																	if ((class_id == 6) && (reborn > 1)){
																		damage -= damage*0.15;
																	}
																	if ((class_id == 8) && (reborn > 1)){
																		damage += damage*0.1;
																	}
																	if ((class_id == 8) && (reborn == 5)){
																		damage += damage*0.1;
																	}
																	if ((class_id == 8) && ((reborn == 3) || (reborn >= 4))){
																		damage += damage*0.07;
																	}
																	if ((class_id == 9) && (reborn > 1)){
																		damage += damage*0.1;
																	}

																	if (boost_reduction > 0){
																		damage -= damage*boost_reduction;
																	}

																	if (team_boost_id == 3){
																		damage -= damage*0.5;
																	}

																	var special = "";
																	var specialRand = Math.random()*100;
																	if (specialRand <= 20){
																		if (boss_num == 28){
																			special = "Obliterazione";
																			damage = Math.round(getRandomArbitrary(player_total_life*0.1,player_total_life*0.2));
																		}
																		if (boss_num == 29){
																			special = "Ascensione di Nettuno";
																			damage = Math.round(getRandomArbitrary(player_total_life*0.2,player_total_life*0.3));
																		}
																		if (boss_num == 30){
																			special = "Colonne dell'Inferno";
																			damage = Math.round(getRandomArbitrary(player_total_life*0.4,player_total_life*0.5));
																		}
																	}

																	var enemy_magic = "";
																	var enemy_magicRand = Math.random()*100;
																	var heal_enemy = 0;
																	var restored = "";
																	if ((boss_num >= 18) && (special == "") && (paralyzed == 0)){
																		//console.log(">>> DANNI: " + damage);
																		if ((boss_num-17) > enemy_magicRand){
																			var rand2 = Math.random()*100;

																			if (boss_num == 30){
																				rand2 = 20;
																			}else if (boss_num == 29){
																				rand2 = 50;
																			}else if (boss_num == 28){
																				rand2 = 80;
																			}

																			if (rand2 < 30){
																				var r = 100;
																				rand = Math.random()*100;
																				if ((weapon3_id == 672) || (automagic3 == 3)){
																					r = 50;
																				}
																				if (r >= rand){
																					enemy_magic = "Impeto di Fiamme";
																					damage = damage*4;
																					if ((weapon2_id == 688) || (automagic2 == 3)){
																						var r2 = Math.random()*100;
																						if (r2 < 50){
																							var restore = Math.round(getRandomArbitrary(100,300));
																							restored = " Hai assorbito " + formatNumber(restore) + " Mana Rosso dall'incantesimo!";
																							connection.query('UPDATE event_mana_status SET mana_3 = mana_3 + ' + restore + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																								if (err) throw err;
																							});
																						}
																					}
																				}
																			}else if (rand2 < 60){
																				var r = 100;
																				rand = Math.random()*100;
																				if ((weapon3_id == 673) || (automagic3 == 1)){
																					r = 50;
																				}
																				if (r >= rand){
																					enemy_magic = "Furia dei Mari";
																					heal_enemy = getRandomArbitrary(boss_total_life*0.01, boss_total_life*0.05);
																					if (boss_life+heal_enemy > boss_total_life){
																						heal_enemy = boss_total_life-boss_life;
																					}
																					if (heal_enemy < 0)
																						heal_enemy = Math.abs(heal_enemy);
																					if (heal_enemy > 50000){
																						heal_enemy = 50000;
																					}
																					heal_enemy = Math.round(heal_enemy);
																					connection.query('UPDATE `boss_team` SET `life`=life+' + heal_enemy + ' WHERE id=' + boss_id, function(err, rows, fields) {
																						if (err) throw err;
																					});
																					if ((weapon2_id == 689) || (automagic2 == 1)){
																						var r2 = Math.random()*100;
																						if (r2 < 50){
																							var restore = Math.round(getRandomArbitrary(100,300));
																							restored = " Hai assorbito " + formatNumber(restore) + " Mana Blu dall'incantesimo!";
																							connection.query('UPDATE event_mana_status SET mana_1 = mana_1 + ' + restore + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																								if (err) throw err;
																							});
																						}
																					}
																				}
																			}else{
																				var r = 100;
																				rand = Math.random()*100;
																				if ((weapon3_id == 671) || (automagic3 == 2)){
																					r = 50;
																				}
																				if (r >= rand){
																					enemy_magic = "Tempesta Folgorante";
																					connection.query('UPDATE player SET paralyzed = 2 WHERE id = ' + player_id, function(err, rows, fields) {
																						if (err) throw err;
																					});
																					if ((weapon2_id == 690) || (automagic2 == 2)){
																						var r2 = Math.random()*100;
																						if (r2 < 50){
																							var restore = Math.round(getRandomArbitrary(100,300));
																							restored = " Hai assorbito " + formatNumber(restore) + " Mana Giallo dall'incantesimo!";
																							connection.query('UPDATE event_mana_status SET mana_2 = mana_2 + ' + restore + ' WHERE player_id = ' + player_id, function(err, rows, fields) {
																								if (err) throw err;
																							});
																						}
																					}
																				}
																			}
																		}
																	}

																	var necroD = 10;

																	if (boss_num == 31){
																		countdown++;
																		if (countdown >= necroD){
																			special = "Necro-Anima";
																			damage = player_life;
																			countdown = 0;
																		}else{
																			if (countdown == necroD-3){
																				bot.sendMessage(message.chat.id, "3...");
																			}else if (countdown == necroD-2){
																				bot.sendMessage(message.chat.id, "2...");
																			}else if (countdown == necroD-1){
																				bot.sendMessage(message.chat.id, "1...");
																			}
																		}
																		connection.query('UPDATE boss_team SET countdown = ' + countdown + ' WHERE id = ' + boss_id, function(err, rows, fields) {
																			if (err) throw err;
																			//console.log("Countdown: " + boss_id + " " + countdown);
																		});
																	}

																	damage = Math.round(damage);

																	if (damage <= 0){
																		damage = 0;
																	}

																	if (crit_bool3 == 1){
																		damage = 0;
																	}

																	setAchievement(message.chat.id, player_id, 30, damage);

																	connection.query('UPDATE `player` SET `life`=life-' + damage + ' WHERE id=' + player_id, function(err, rows, fields) {
																		if (err) throw err;

																		if (magic == 3){
																			connection.query('UPDATE magic SET quantity = quantity - 1 WHERE id = ' + magicId, function (err, rows, fields){
																				if (err) throw err;
																				//console.log("Magia con ID " + magicId + " utilizzata");
																			});
																		}

																		var extra = "attacca";
																		if (special != ""){
																			extra = "colpisce con *" + special + "*";
																		}
																		if (enemy_magic != ""){
																			extra = "colpisce con *" + enemy_magic + "*";
																			if (heal_enemy != 0){
																				extra += " recuperando " + heal_enemy + " hp";
																			}
																		}

																		if (player_life - damage <= 0){
																			var msg = "";
																			if (danno != 0){
																				if ((extra != "") && (extra != "attacca")){
																					extra = " e ti " + extra;
																					msg = "Hai colpito il boss infliggendo un danno pari a *" + formatNumber(danno) + "* hp, il boss ti infligge *" + formatNumber(damage) + "* hp " + extra + "!" + restored;
																				}else{
																					msg = "Hai colpito il boss infliggendo un danno pari a *" + formatNumber(danno) + "* hp, ma sei stato sconfitto con un colpo mortale da *" + formatNumber(damage) + "* hp!" + restored;
																				}
																			}else{
																				if (meParalyzed == 0){
																					msg = "Il boss ti " + extra + " con un colpo mortale da *" + formatNumber(damage) + "* hp!" + restored;
																				}else{
																					msg = "Essendo paralizzato non riesci a colpire, invece il boss ti " + extra + " con un colpo mortale da *" + formatNumber(damage) + "* hp!" + restored;
																				}
																			}
																			bot.sendMessage(message.chat.id, msg, revive);
																			return;
																		}

																		if (magic_txt2 != ""){
																			connection.query('UPDATE player SET life = life+' + heal + ' WHERE id = ' + player_id, function(err, rows, fields) {
																				if (err) throw err;
																				calcLife(message);
																				console.log("Ricarica salute boss: " + heal);
																			});
																			if (magicDouble == 1){
																				magic_txt2 += " (+" + formatNumber(heal) + " hp - x2)";
																			}else{
																				magic_txt2 += " (+" + formatNumber(heal) + " hp)";
																			}
																		}

																		if (damage <= 0){
																			var txt = "Hai evitato il colpo del boss" + crit_txt3 + magic_txt2 + "!";
																			if (enemy_magic != ""){
																				txt = "Il boss lancia " + enemy_magic + "! Comunque riesci ad evitare il colpo successivo!" + restored;
																			}

																			bot.sendMessage(message.chat.id, txt, kb).then(function() {
																				answerCallbacks[message.chat.id] = function(answer) {
																					if (answer.text == "Consumabili"){
																						Consumabili(message, player_id, 1, player_total_life, player_life, boss_id);
																					}
																				};
																			});
																		}else{
																			bot.sendMessage(message.chat.id, "Il boss ti " + extra + " e perdi *" + formatNumber(damage) + "* hp" + crit_txt2 + magic_txt2 + ", hai ancora " + formatNumber(player_life - damage) + " hp!" + restored, kb).then(function() {
																				answerCallbacks[message.chat.id] = function(answer) {
																					if (answer.text == "Consumabili"){
																						Consumabili(message, player_id, 1, player_total_life, player_life, boss_id);
																					}
																				};
																			});
																		}

																		setTimeout(function() {
																			if (meParalyzed == 0){
																				bot.sendMessage(message.chat.id, "Hai colpito il boss " + magic_txt + "e hai inflitto *" + formatNumber(danno) + "* danni" + crit_txt + ", ha ancora " + formatNumber(lifeB) + " hp", mark);
																			}else if (meParalyzed == 1){
																				if ((player_paralyzed-1) != 0){
																					bot.sendMessage(message.chat.id, "Non sei riuscito a colpire il boss, sei ancora paralizzato per " + (player_paralyzed-1) + " turni", mark);
																				}else{
																					bot.sendMessage(message.chat.id, "Non sei riuscito a colpire il mostro, e ora non sei pi√π paralizzato");
																				}
																			}
																		}, 500);
																	});
																}
															});
														};
													});
												});
											}
										});
									});
								});
							});
						});
					});
				});
			});
		});
	});
});

bot.onText(/visualizza boss/i, function(message) {
	var bossKb = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Affronta Boss"],["Torna al menu"]]
		}
	};


	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		connection.query('SELECT team_id FROM team_player WHERE player_id=' + player_id, function(err, rows, fields) {
			if (err) throw err;	

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non sei in un team!", back)
				return;
			}

			var team_id = rows[0].team_id;

			connection.query('SELECT boss_team.life, boss_team.total_life, boss_team.killedby, boss_team.killeddate, boss.name FROM boss_team, boss WHERE boss_team.boss_id = boss.id AND unlocked = 1 AND team_id = ' + team_id + ' ORDER BY boss_id', function(err, rows, fields) {
				if (err) throw err;
				var boss_list = "\n";
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					if (rows[i].life <= 0){
						if (rows[i].killeddate != null){
							var d = new Date(rows[i].killeddate);
							var short_date = addZero(d.getHours()) + ":" + addZero(d.getMinutes()) + ":" + addZero(d.getSeconds()) + " del " + addZero(d.getDate()) + "/" + addZero(d.getMonth()+1);
						}else{
							var short_date = "?";
						}
						boss_list += (i+1) + ". <b>" + rows[i].name + "</b> (" + rows[i].killedby + " alle " + short_date + ")\n";
					}else{
						boss_list += (i+1) + ". <b>" + rows[i].name + "</b> (" + rows[i].life + "/" + rows[i].total_life + " hp)\n";
					}
				}
				connection.query('SELECT boss_respawn FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					if (rows[0].boss_respawn != null){
						var d = new Date(rows[0].boss_respawn);
						var short_time = addZero(d.getHours()) + ":" + addZero(d.getMinutes()) + ":" + addZero(d.getSeconds());
						var short_date = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear();

						boss_list += "I boss tornano in vita il " + short_date + " alle " + short_time;
					}
					bot.sendMessage(message.chat.id, boss_list, bossKb);
				});
			});
		});
	});
});

bot.onText(/^pozioni|utilizzabili boss|^‚öí$/i, function(message) {
	connection.query('SELECT id, life, total_life, boss_id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var life = rows[0].life;
		var total_life = rows[0].total_life;
		var boss_id = rows[0].boss_id;

		if (life <= 0){
			bot.sendMessage(message.chat.id, "Sei morto, per tornare in vita ti serve una Piuma di Fenice!", revive);
			return;
		}

		if (message.text.indexOf("Utilizzabili") != -1){
			if (message.text.indexOf("Boss") != -1){
				Consumabili(message, player_id, 1, total_life, life, boss_id);
			}
		}else if (message.text.toLowerCase().indexOf("pozioni") != -1){
			Consumabili(message, player_id, 2, total_life, life, 0);			
		}else if (message.text.indexOf("‚öí") != -1){
			Consumabili(message, player_id, 4, total_life, life, 0);
		}
	});
});

bot.onText(/Torna in Vita/i, function(message) {

	connection.query('SELECT id, life, total_life, refilled FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var player_id = rows[0].id;
		var life = rows[0].life;
		var total_life = rows[0].total_life;
		var refilled = rows[0].refilled;

		connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 619', function(err, rows, fields) {
			if (err) throw err;

			var piume = rows[0].cnt;

			connection.query('SELECT COUNT(id) As cnt FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 647', function(err, rows, fields) {
				if (err) throw err;

				var ceneri = rows[0].cnt;

				var kbHeal = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Piuma di Fenice (" + piume + ")"],["Cenere di Fenice (" + ceneri + ")"],["Intervento Divino"],["Torna al menu"]]
					}
				};

				var kbBack = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Affronta Boss"],["Dungeon"],["Torna al menu"]]
					}
				};

				if (life <= 0){
					bot.sendMessage(message.chat.id, "Vuoi usare una Piuma di Fenice o una Cenere di Fenice per tornare in vita? Nel caso della Piuma dovrai attendere 3 minuti prima di tornare ad affrontare i boss!", kbHeal).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text.indexOf("Piuma di Fenice") != -1){
								connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 619', function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Non possiedi nessuna Piuma di Fenice", back);
									}else{
										connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 619 LIMIT 1', function(err, rows, fields) {
											if (err) throw err;
											connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 6', function(err, rows, fields) {
												if (err) throw err;

												var ten = total_life/100*10;
												var perc = 0;
												var life = ten;
												var abBonus = 0;
												if (Object.keys(rows).length > 0){
													perc = total_life/100*rows[0].val;
													life += (perc*rows[0].ability_level);
												}

												var now = new Date();
												now.setMinutes(now.getMinutes() + 3);
												var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
												var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());

												connection.query('UPDATE player SET life = ' + life + ', res_time = "' + long_date + '" WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "Bentornato! üåü", kbBack);
													setAchievement(message.chat.id, player_id, 20, 1);
												});
											});
										});
									}
								});
							}else if (answer.text.indexOf("Cenere di Fenice") != -1){
								connection.query('SELECT id FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 647', function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Non possiedi nessuna Cenere di Fenice", back);
									}else{
										connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 647 LIMIT 1', function(err, rows, fields) {
											if (err) throw err;

											connection.query('UPDATE player SET life = total_life WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Bentornato! üåü", kbBack);
												setAchievement(message.chat.id, player_id, 20, 1);
											});
										});
									}
								});
							}else if (answer.text == "Intervento Divino"){
								connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 6', function(err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Devi apprendere questo talento prima di poterlo utilizzare", back);
										return;
									}

									if (rows[0].ability_level == 0){
										bot.sendMessage(message.chat.id, "Devi apprendere questo talento prima di poterlo utilizzare", back);
										return;
									}

									if (refilled >= 3){
										bot.sendMessage(message.chat.id, "Hai gi√† consumato i 3 tentativi di oggi!", back);
										return;
									}

									var refill = Math.round(total_life/2);
									var rand = Math.random()*100;
									var prob = rows[0].ability_level*10;

									if (rand <= prob){
										connection.query('UPDATE player SET refilled = refilled+1, life = ' + refill + ' WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "L'Intervento Divino ti ha concesso di tornare in battaglia con " + refill + " hp!", kbBack);
										});
									}else{
										connection.query('UPDATE player SET refilled = refilled+1 WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "L'Intervento Divino stavolta non ha funzionato! Hai ancora " + ((3-refilled)-1) + " tentativi!", revive);
										});	
									}
								});
							}
						}
					});
				}else{
					bot.sendMessage(message.chat.id, "Sei in salute, non √® necessario tornare in vita", back);
				}
			});
		});
	});
});

function Consumabili(message, player_id, from, player_total_life, player_life, boss_id){

	var query = "";
	if ((from == 1) || (from == 3)){ //BOSS
		query = 'SELECT item.name, item.id, COUNT(item.name) As num FROM inventory, item WHERE inventory.item_id = item.id AND category IN (1,4) AND player_id = ' + player_id + ' GROUP BY item.name';
	}else if ((from == 2) || (from == 4)){ //ZAINO - DUNGEON
		query = 'SELECT item.name, item.id, COUNT(item.name) As num FROM inventory, item WHERE inventory.item_id = item.id AND category = 1 AND player_id = ' + player_id + ' GROUP BY item.name';
	}

	connection.query('SELECT * FROM boss_team WHERE id = ' + boss_id, function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			var boss_life = rows[0].life;
			var boss_total_life = rows[0].total_life;
		}
		connection.query(query, function(err, rows, fields) {
			if (err) throw err;
			var itemKeys = [];

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": itemKeys
				}
			};

			var kbAgain = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Usa Ancora"],["Affronta Boss","Torna al dungeon"],["Torna al menu"]]
				}
			};
			var kbAgainD = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Usa Ancora"],["Torna al dungeon"],["Torna al menu"]]
				}
			};

			if (Object.keys(rows).length > 0){
				var desc = "";
				var perc1 = 0;
				var perc2 = 0;
				var perc3 = 0;
				var perc4 = 0;
				var perc5 = 0;
				var perc6 = 0;
				var perc7 = 0;								
				var perc8 = 0;								
				var perc9 = 0;								
				var perc10 = 0;			

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					//Pozioni
					if (rows[i].id == "92"){
						perc1 = Math.round((player_total_life/100)*5);
						desc = "Recupera " + perc1 + " hp";
					}else if (rows[i].id == "93"){
						perc2 = Math.round((player_total_life/100)*10);
						desc = "Recupera " + perc2 + " hp";
					}else if (rows[i].id == "94"){
						perc3 = Math.round((player_total_life/100)*20);
						desc = "Recupera " + perc3 + " hp";
					}else if (rows[i].id == "17"){ 					//Molotov 500
						perc4 = 500;
						desc = perc4 + " danno istantaneo";
					}else if (rows[i].id == "95"){					//Bomba di Schegge 600
						perc5 = 600;
						desc = perc5 + " danno istantaneo";
					}else if (rows[i].id == "7"){
						perc6 = Math.round((Math.random()*200)+100); 		//Pietra piccola 100-300
						desc = perc6 + " danno istantaneo";
					}else if (rows[i].id == "38"){
						perc7 = Math.round((Math.random()*4000)+3000); 		//Dirigibile Esplosivo 3000-7000
						desc = perc7 + " danno istantaneo";
					}else if (rows[i].id == "106"){
						perc8 = Math.round((Math.random()*100)+900); 		//Bomba Distruttiva 900-1000
						desc = perc8 + " danno istantaneo";
					}else if (rows[i].id == "107"){
						perc9 = Math.round((Math.random()*500)+3500); 		//Bomba Nucleare 3500-4000
						desc = perc9 + " danno istantaneo";
					}else if (rows[i].id == "108"){
						perc10 = Math.round((Math.random()*1000)+7000); 	//Bomba al Plutonio 7000-8000
						desc = perc10 + " danno istantaneo";
					}else if (rows[i].id == "594"){
						perc11 = Math.round((player_total_life/100)*30);
						desc = "Recupera " + perc11 + " hp";
					}else if (rows[i].id == "595"){
						perc12 = Math.round((player_total_life/100)*50);
						desc = "Recupera " + perc12 + " hp";
					}else if (rows[i].id == "596"){
						perc13 = Math.round((player_total_life/100)*70);
						desc = "Recupera " + perc13 + " hp";
					}else if (rows[i].id == "597"){
						perc14 = Math.round((player_total_life/100)*100);
						desc = "Recupera " + perc14 + " hp";
					}

					itemKeys.push([rows[i].name + " (" + rows[i].num + ") - " + desc]);
				}
				if (from == 1){
					itemKeys.push(["Affronta Boss"]);
				}
				if (from == 2){
					itemKeys.push(["Torna allo Zaino"]);
				}
				if (from == 4){
					itemKeys.push(["Torna al dungeon"]);
				}
				itemKeys.push(["Torna al menu"]);

				bot.sendMessage(message.chat.id, "Quale oggetto vuoi usare?", kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {

						var oggetto = answer.text;
						if (oggetto == "Affronta Boss"){
							return;
						}else if (oggetto == "Torna al menu"){
							return;
						}else if (oggetto == "Torna allo Zaino"){
							return;
						}else if (oggetto == "Torna al dungeon"){
							return;
						}

						var pos = oggetto.indexOf(" (");
						if (pos != -1){
							oggetto = oggetto.substring(0, pos);
						}
						connection.query('SELECT id, category FROM item WHERE name = "' + oggetto + '"', function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length <= 0){
								if ((from == 2) || (from == 3)){
									bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste!", back);
								}else{
									bot.sendMessage(message.chat.id, "L'oggetto specificato non esiste!", kb);
								}
								return;
							}

							var item_id = rows[0].id;
							var category = rows[0].category;
							var perc = 0;

							if (item_id == "92"){
								perc = perc1;
							}else if (item_id == "93"){
								perc = perc2;
							}else if (item_id == "94"){
								perc = perc3;
							}else if (item_id == "17"){
								perc = perc4;
							}else if (item_id == "95"){
								perc = perc5;
							}else if (item_id == "7"){
								perc = perc6;
							}else if (item_id == "38"){
								perc = perc7;
							}else if (item_id == "106"){
								perc = perc8;
							}else if (item_id == "107"){
								perc = perc9;
							}else if (item_id == "108"){
								perc = perc10;
							}else if (item_id == "594"){
								perc = perc11;
							}else if (item_id == "595"){
								perc = perc12;
							}else if (item_id == "596"){
								perc = perc13;
							}else if (item_id == "597"){
								perc = perc14;
							}else{
								if (from == 4){
									bot.sendMessage(message.chat.id, "Errore selezione oggetto", kbAgainD);
								}else{
									bot.sendMessage(message.chat.id, "Errore selezione oggetto", kbAgain);									
								}
								return;
							}

							if (category == 1){
								if (item_id == 92){
									var kbNum = {
										parse_mode: "Markdown",
										reply_markup: {
											resize_keyboard: true,
											//one_time_keyboard: true,
											"keyboard": [["1"],["2"],["3"],["4"],["5"],["10"],["Torna al menu"]]
										}
									};
								}else if (item_id == 93){
									var kbNum = {
										parse_mode: "Markdown",
										reply_markup: {
											resize_keyboard: true,
											//one_time_keyboard: true,
											"keyboard": [["1"],["2"],["3"],["8"],["9"],["Torna al menu"]]
										}
									};
								}else{
									var kbNum = {
										parse_mode: "Markdown",
										reply_markup: {
											resize_keyboard: true,
											//one_time_keyboard: true,
											"keyboard": [["1"],["2"],["3"],["4"],["5"],["Torna al menu"]]
										}
									};
								}

								if (player_life <= 0){
									bot.sendMessage(message.chat.id, "Sei morto, per tornare in vita ti serve una Piuma di Fenice o la Cenere di Fenice!", revive);
									return;
								}

								bot.sendMessage(message.chat.id, "Quante pozioni vuoi usare?", kbNum).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {

										var qnt = parseInt(answer.text);
										if ((answer.text == "Torna al menu") || (answer.text == "Affronta boss")){
											return;
										}
										if ((qnt < 1) || (qnt > 10) || (re.test(qnt) == false)){
											if (from == 4){
												bot.sendMessage(message.chat.id, "Quantit√† non valida", kbAgainD);
											}else{
												bot.sendMessage(message.chat.id, "Quantit√† non valida", kbAgain);
											}
											return;
										}

										connection.query('SELECT item.name FROM inventory, item WHERE item.id = inventory.item_id AND item_id = ' + item_id + ' AND player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length < qnt){
												if (from == 4){
													bot.sendMessage(message.chat.id, "Non hai abbastanza pozioni", kbAgainD);
												}else{
													bot.sendMessage(message.chat.id, "Non hai abbastanza pozioni", kbAgain);
												}
												return;
											}

											var itemName = rows[0].name;

											connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id + ' LIMIT ' + qnt, function(err, rows, fields) {
												if (err) throw err;

												perc = perc*qnt;
												setAchievement(message.chat.id, player_id, 35, qnt);

												var all = 0;
												if ((player_life + perc) >= player_total_life){
													perc = player_total_life - player_life;
													all = 1;
												}

												connection.query('UPDATE player SET life = life+' + perc + ' WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
													if (all == 1){
														if ((from == 2) || (from == 3)){
															bot.sendMessage(message.chat.id, "Hai recuperato tutti gli hp!", kbAgain).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if ((answer.text != "Torna al menu") && (answer.text != "Affronta Boss") && (answer.text != "Torna al dungeon")){
																		player_life = player_total_life;
																		Consumabili(message, player_id, from, player_total_life, player_life, boss_id);
																		return;
																	}
																};
															});
														}else if (from == 4){
															bot.sendMessage(message.chat.id, "Hai recuperato tutti gli hp!", kbAgainD).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if ((answer.text != "Torna al menu") && (answer.text != "Affronta Boss") && (answer.text != "Torna al dungeon")){
																		player_life = player_total_life;
																		Consumabili(message, player_id, from, player_total_life, player_life, boss_id);
																		return;
																	}
																};
															});
														}else{
															bot.sendMessage(message.chat.id, "Hai recuperato tutti gli hp!", kbAgain).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if ((answer.text != "Torna al menu") && (answer.text != "Affronta Boss") && (answer.text != "Torna al dungeon")){
																		player_life = player_total_life;
																		Consumabili(message, player_id, from, player_total_life, player_life, boss_id);
																		return;
																	}
																};
															});
														}
													}else{
														if ((from == 2) || (from == 3)){
															bot.sendMessage(message.chat.id, "Hai usato " + qnt + "x " + itemName + ", hai recuperato " + perc + " hp, ora hai " + (player_life+perc) + "/" + player_total_life + " hp!", kbAgain).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if ((answer.text != "Torna al menu") && (answer.text != "Affronta Boss") && (answer.text != "Torna al dungeon")){
																		player_life = player_life+perc;
																		Consumabili(message, player_id, from, player_total_life, player_life, boss_id);
																		return;
																	}
																};
															});
														}else if (from == 4){
															bot.sendMessage(message.chat.id, "Hai usato " + qnt + "x " + itemName + ", hai recuperato " + perc + " hp, ora hai " + (player_life+perc) + "/" + player_total_life + " hp!", kbAgainD).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if ((answer.text != "Torna al menu") && (answer.text != "Affronta Boss") && (answer.text != "Torna al dungeon")){
																		player_life = player_life+perc;
																		Consumabili(message, player_id, from, player_total_life, player_life, boss_id);
																		return;
																	}
																};
															});														
														}else{
															bot.sendMessage(message.chat.id, "Hai usato " + qnt + "x " + itemName + ", hai recuperato " + perc + " hp, ora hai " + (player_life+perc) + "/" + player_total_life + " hp!", kbAgain).then(function() {
																answerCallbacks[message.chat.id] = function(answer) {
																	if ((answer.text != "Torna al menu") && (answer.text != "Affronta Boss") && (answer.text != "Torna al dungeon")){
																		player_life = player_life+perc;
																		Consumabili(message, player_id, from, player_total_life, player_life, boss_id);
																		return;
																	}
																};
															});
														}
													}
												});
											});
										});
									};
								});
							}else if (category == 4){

								/*
								if (message.from.username != "fenix45"){
									bot.sendMessage(message.chat.id, "Manutenzione", back);
									return;
								}
								*/

								var kbNum = {
									parse_mode: "Markdown",
									reply_markup: {
										resize_keyboard: true,
										//one_time_keyboard: true,
										"keyboard": [["1"],["2"],["3"],["4"],["5"],["10"],["Torna al menu"]]
									}
								};

								bot.sendMessage(message.chat.id, "Quanti ne vuoi usare?", kbNum).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {

										var qnt = parseInt(answer.text);
										if ((answer.text == "Torna al menu") || (answer.text == "Affronta boss")){
											return;
										}
										if ((qnt < 1) || (qnt > 10) || (re.test(qnt) == false)){
											if (from == 4){
												bot.sendMessage(message.chat.id, "Quantit√† non valida", kbAgainD);
											}else{
												bot.sendMessage(message.chat.id, "Quantit√† non valida", kbAgain);
											}
											return;
										}

										connection.query('SELECT item.name FROM inventory, item WHERE item.id = inventory.item_id AND item_id = ' + item_id + ' AND player_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length < qnt){
												if (from == 4){
													bot.sendMessage(message.chat.id, "Non hai abbastanza oggetti", kbAgainD);
												}else{
													bot.sendMessage(message.chat.id, "Non hai abbastanza oggetti", kbAgain);
												}
												return;
											}

											connection.query('SELECT boss_id FROM boss_team WHERE id = ' + boss_id, function(err, rows, fields) {
												if (err) throw err;

												if (rows[0].boss_id == 31){
													perc = 0;
												}

												perc = perc*qnt;

												if ((boss_life - perc) <= 500){
													bot.sendMessage(message.chat.id, "Il bersaglio ha pochi hp, non puoi usare un oggetto lanciabile per ucciderlo.", kb);
												}

												connection.query('SELECT * FROM boss_team WHERE id = ' + boss_id, function(err, rows, fields) {
													if (err) throw err;

													var lifeB = rows[0].life;
													var totlifeB = rows[0].total_life;

													if (lifeB <= 0){
														connection.query('UPDATE `player` SET boss_id = 0 WHERE id=' + player_id, function(err, rows, fields) {
															if (err) throw err;
															bot.sendMessage(message.chat.id, "Purtroppo il boss √® gi√† stato sconfitto, riprova domani o selezionane un altro.", back);
															return;
														});
													}else{
														connection.query('UPDATE boss_team SET life = life-' + perc + ' WHERE id = ' + boss_id, function(err, rows, fields) {
															if (err) throw err;
															connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + item_id + ' LIMIT ' + qnt, function(err, rows, fields) {
																if (err) throw err;

																bot.sendMessage(message.chat.id, "Hai usato un oggetto lanciabile, hai inflitto " + formatNumber(perc) + " danni!\nSalute boss: " + (lifeB-perc) + "/" + totlifeB, kbAgain).then(function() {
																	answerCallbacks[message.chat.id] = function(answer) {
																		if ((answer.text != "Torna al menu") && (answer.text != "Affronta Boss")){
																			Consumabili(message, player_id, from, player_total_life, player_life, boss_id);
																			return;
																		}
																	};
																});
																setAchievement(message.chat.id, player_id, 29, perc);
															});
														});
													};
												});
											});
										});
									};
								});
							}
						});
					};
				});
			}else{
				var Keys = [];
				if (from == 1){
					Keys.push(["Affronta Boss"]);
				}else{
					Keys.push(["Torna al menu"]);
				}

				var kbBack = {
					parse_mode: "Markdown",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": Keys
					}
				};

				bot.sendMessage(message.chat.id, "Non possiedi nessun consumabile, creali o cercali nelle missioni.", kbBack);
			}
		});
	});
}

bot.onText(/spia rifugio|spia:/i, function(message) {

	var spy_null = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Nessuno"]]
		}
	};

	if (!checkSpam(message)){
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (rows[0].spy_count >= 15){
			bot.sendMessage(message.chat.id, "Hai raggiunto il limite giornaliero.");
			return;
		}

		var player_id = rows[0].id;
		var level = Math.floor(rows[0].exp/10);
		var power = rows[0].weapon;
		var myhouse = rows[0].house_id;

		if (rows[0].money < 500){
			bot.sendMessage(message.chat.id, "Non hai abbastanza soldi.", back);
			return;
		}

		if (rows[0].heist_protection != null){
			bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi spiare gli altri utenti", back);
			return;
		}

		if (message.text.indexOf(":") != -1){
			var player = message.text.substring(message.text.indexOf(":")+1);
			player = player.replace("@","").trim();

			connection.query('SELECT id, heist_protection, chat_id, account_id, house_id FROM player WHERE nickname = "' + player + '"', function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0){
					bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova.", back);
				}else{
					var chat_id = rows[0].chat_id;
					var house_id = rows[0].house_id;

					var account_id = (rows[0].account_id).toString();
					if (banlist_id.indexOf(account_id) != -1){
						bot.sendMessage(message.chat.id, "Non puoi spiare un giocatore bannato", back);
						return;
					}

					if (rows[0].heist_protection != null){
						bot.sendMessage(message.chat.id, "Il bersaglio √® sotto protezione", back);
						return;
					}

					if (rows[0].id == 1){
						bot.sendMessage(message.chat.id, "Guardone :>", back);
						return;
					}

					if (rows[0].id == 3){
						bot.sendMessage(message.chat.id, "Non si fanno ste cose :c", back);
						return;
					}

					if (player_id == rows[0].id){
						bot.sendMessage(message.chat.id, "Per visualizzare il tuo equipaggiamento visita la sezione Giocatore", back);
						return;
					}

					setAchievement(message.chat.id, player_id, 42, 1);
					getInfo(message, player, myhouse);
					connection.query('UPDATE player SET spy_count = spy_count+1, money=money-500 WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
						if (err) throw err;
					});

					if (message.from.username != "fenix45"){
						if (house_id == 1){
							bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che qualcuno ha spiato il tuo rifugio!");
						}else if (house_id == 2){
							bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che qualcuno *di livello " + level + "* ha spiato il tuo rifugio!", mark);
						}else if ((house_id == 3) || (house_id == 4)){
							bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che *un livello " + level + ", con +" + power + " di danno* ha spiato il tuo rifugio!", mark);									
						}else if (house_id >= 5){
							bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che <b>" + message.from.username + "</b> ha spiato il tuo rifugio!", html);
						}
					}
				}
			});
			return;
		}

		bot.sendMessage(message.chat.id, "Puoi spiare un rifugio inserendo il nickname del giocatore, dovrai pagare 500 ¬ß!\nInserisci il nickname del giocatore oppure scrivi *Spia: Nomegiocatore*", spy_null).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				var player = answer.text;
				if (player == "Nessuno"){
					return;
				}
				player = player.replace("@","").trim();

				connection.query('SELECT id, heist_protection, chat_id, house_id, account_id FROM player WHERE nickname="' + player + '"', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var chat_id = rows[0].chat_id;
						var house_id = rows[0].house_id;

						var account_id = (rows[0].account_id).toString();
						if (banlist_id.indexOf(account_id) != -1){
							bot.sendMessage(message.chat.id, "Non puoi spiare un giocatore bannato", back);
							return;
						}

						if (rows[0].heist_protection != null){
							bot.sendMessage(message.chat.id, "Il bersaglio √® sotto protezione", back);
							return;
						}

						if (rows[0].id == 1){
							bot.sendMessage(message.chat.id, "Guardone :>", back);
							return;
						}

						if (rows[0].id == 3){
							bot.sendMessage(message.chat.id, "Non si fanno ste cose :c", back);
							return;
						}

						if (player_id == rows[0].id){
							bot.sendMessage(message.chat.id, "Per visualizzare il tuo equipaggiamento visita la sezione Giocatore", back);
							return;
						}

						setAchievement(message.chat.id, player_id, 42, 1);
						getInfo(message, player, myhouse);
						connection.query('UPDATE player SET spy_count = spy_count+1, money=money-100 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
							if (err) throw err;
						});

						if (message.from.username != "fenix45"){
							if (house_id == 1){
								bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che qualcuno ha spiato il tuo rifugio!");
							}else if (house_id == 2){
								bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che qualcuno *di livello " + level + "* ha spiato il tuo rifugio!", mark);
							}else if ((house_id == 3) || (house_id == 4)){
								bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che *un livello " + level + ", con +" + power + " di danno* ha spiato il tuo rifugio!", mark);									
							}else if (house_id >= 5){
								bot.sendMessage(chat_id, "Le pattuglie intorno al villaggio ci hanno avvisato che *" + message.from.username.replace(new RegExp("_", "g"), " ") + "* ha spiato il tuo rifugio!", mark);
							}
						}
					}else{
						bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova.", back);
					}
				});
			};
		});
	});
});

bot.onText(/xxxteria/i, function(message) {
	if ((message.from.username != "fenix45") && (xxxteria == 0)){
		bot.sendMessage(message.chat.id, "Lo xxxteria √® ancora chiusa!", back);
		return;
	}

	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["1 Biglietto (750 ¬ß)","5 Biglietti (3000 ¬ß)"],["20 Biglietti (10.000 ¬ß)"],["Torna al menu"]]
		}
	};

	var today = new Date();
	if ((today.getDay() != 6) && (today.getDay() != 0)){
		bot.sendMessage(message.chat.id, "Oggi la xxxteria √® chiusa! Torna nel weekend!", back);
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if ((rows[0].exp/10 < 25) && (rows[0].reborn == 1)){
			bot.sendMessage(message.chat.id, "Devi essere almeno livello 25 per partecipare alla xxxteria", back)
			return;
		}

		if (rows[0].craft_count <= 25){
			bot.sendMessage(message.chat.id, "Devi possedere almeno 25 punti creazione per partecipare alla xxxteria", back)
			return;			
		}

		var prize = "";
		var date = new Date();
		var text = "";
		switch(date.getDay()){
			case 6:
				prize += "> Scrigni (R, UR, L)\n";
				prize += "> Monete\n";
				prize += "> Oggetti (UR, L)\n";
				prize += "> Gemme!\n";
				break;
			case 0: 
				prize += "> Scrigni (UR, L, E)\n";
				prize += "> Monete (Tante!)\n";
				prize += "> Oggetti (L, E)\n";
				prize += "> Gemme!\n";
				extra = "Torna tra poco per acquistare i biglietti dell'estrazione della domenica!";
				break;
							}

		connection.query('SELECT extracted FROM `event_lottery_prize`', function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].extracted == 1){
				bot.sendMessage(message.chat.id, "L'estrazione √® in corso o √® terminata!", back)
				return;
			}
			connection.query('SELECT COUNT(*) As num FROM event_lottery_coins WHERE player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '")', function(err, rows, fields) {
				if (err) throw err;
				var ticketNum = rows[0].num;
				bot.sendMessage(message.chat.id, "Benvenuto nella Lootteria!\nAcquista biglietti per avere pi√π probabilit√† di essere estratto, l'estrazione avverr√† ogni sabato e domenica tra le 17 e le 20 (sabato Leggendari, domenica Epici)!\nPossiedi " + ticketNum + "/20 biglietti\n\nI premi oggi sono i seguenti:\n" + prize, kb);
			});
		});
	});
});

bot.onText(/bigliett/i, function(message) {
	if ((message.from.username != "fenix45") && (xxxteria == 0)){
		bot.sendMessage(message.chat.id, "Lo xxxteria √® chiusa!", back);
		return;
	}

	if (xxxteria == 1){
		var today = new Date();
		if ((today.getDay() != 6) && (today.getDay() != 0)){
			bot.sendMessage(message.chat.id, "Oggi la xxxteria √® chiusa! Torna nel weekend!", back);
			return;
		}
	}

	var ticketNum = parseInt(message.text.substring(0, message.text.indexOf(" ")));

	if ((ticketNum != 1) && (ticketNum != 2) && (ticketNum != 3) && (ticketNum != 4) && (ticketNum != 5) && (ticketNum != 20)){
		bot.sendMessage(message.chat.id, "Numero biglietti non valido", back);
		return;
	}

	if (xxxteriaBlock == 1){
		bot.sendMessage(message.chat.id, "Non √® momentaneamente possibile acquistare biglietti", back);
		return;
	}

	bot.sendMessage(message.chat.id, "Confermi l'acquisto di " + ticketNum + " biglietti?", yesno).then(function() {
		answerCallbacks[message.chat.id] = function(answer) {
			if (answer.text.toLowerCase() == "si"){

				connection.query('SELECT extracted FROM `event_lottery_prize`,item WHERE item.id = event_lottery_prize.item_id', function(err, rows, fields) {
					if (err) throw err;
					if (rows[0].extracted == 1){
						bot.sendMessage(message.chat.id, "Durante l'estrazione non puoi acquistare biglietti!", back)
						return;
					}

					connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
						if (err) throw err;
						var player_id = rows[0].id;
						var money = rows[0].money;

						if (rows[0].craft_count <= 25){
							bot.sendMessage(message.chat.id, "Non hai abbastanza punti creazione per partecipare alla xxxteria", back)
							return;			
						}

						if ((rows[0].exp/10 < 25) && (rows[0].reborn == 1)){
							bot.sendMessage(message.chat.id, "Devi essere almeno livello 25 per partecipare alla xxxteria", back)
							return;
						}

						connection.query('SELECT COUNT(*) As num FROM event_lottery_coins WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							var playerTicket = parseInt(rows[0].num);

							if ((playerTicket > 20) || (playerTicket+ticketNum > 20)){
								bot.sendMessage(message.chat.id, "Puoi possedere al massimo 20 biglietti per estrazione", back);
								return;
							}

							var tot = ticketNum*750;
							if (ticketNum == 5){
								tot = 3000;
							}else if (ticketNum == 20){
								tot = 10000;
							}

							if (money-tot <= 0){
								bot.sendMessage(message.chat.id, "Non hai abbastanza soldi", back);
								return;
							}

							for (var i = 0; i < ticketNum; i++) {
								connection.query('INSERT INTO event_lottery_coins (player_id) VALUES (' + player_id + ')', function(err, rows, fields) {
									if (err) throw err;
								});
							}
							connection.query('UPDATE player SET money = money - ' + tot + ' WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai acquistato " + ticketNum + " biglietti per " + tot + " ¬ß!", back);
							});
						});
					});
				});
			};
		};
	});
});

bot.onText(/necro del destino|prova necro/i, function(message) {
	var d = new Date();
	if (d.getDay() != 1){
		bot.sendMessage(message.chat.id, "Puoi tentare la fortuna solamente il luned√¨!", back);
		return;
	}

	connection.query('SELECT id, account_id, holiday FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back);
			return;
		}

		var player_id = rows[0].id;
		var item_list = "532,169,201,200,598";

		connection.query('SELECT item.name, COUNT(item.id) As qnt FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND item.id IN (' + item_list + ') GROUP BY item.name', function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Non hai nessun oggetto utile disponibile, ti serve un oggetto U (tranne le pietre del drago)", back);
				return;
			}

			var iKeys = [];

			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				iKeys.push([rows[i].name + " (" + rows[i].qnt + ")"]);
			}
			iKeys.push(["Torna al menu"]);

			var items = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": iKeys
				}
			};

			var nBack = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Torna alla prova necro"],["Torna al menu"]]
				}
			};

			bot.sendMessage(message.chat.id, "Seleziona un oggetto U tra quelli in lista per tentare la fortuna. In caso di vittoria otterrai un oggetto creabile E o L e una üíé, in caso di sconfitta ne perderai uno craftato di uguale rarit√†, tenta la fortuna!", items).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					if (answer.text == "Torna al menu"){
						return;
					}

					var ogg = answer.text.substring(0, answer.text.indexOf("(")-1);

					bot.sendMessage(message.chat.id, "Sei sicuro di voler consumare " + ogg + "?", yesno).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text.toLowerCase() == "si"){
								var sql = 'SELECT item.id FROM inventory, item WHERE inventory.item_id = item.id AND inventory.player_id = ' + player_id + ' AND inventory.item_id IN (' + item_list + ') AND item.name = "' + ogg + '"';
								connection.query(sql, function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Oggetto non valido, riprova", back);
										return;
									}
									var itemId = rows[0].id;


									var rand = Math.random()*100;
									var rarity = "";
									if (rand < 30){
										rarity = "E";
									}else{
										rarity = "L";
									}
									connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + itemId + ' LIMIT 1', function(err, rows, fields) {
										if (err) throw err;
									});
									if (rand < 50){
										connection.query('SELECT id, name FROM item WHERE craftable = 1 AND rarity = "' + rarity + '" ORDER BY RAND()', function(err, rows, fields) {
											if (err) throw err;
											var itemName = rows[0].name;
											connection.query('UPDATE player SET gems = gems + 1 WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
											});
											connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[0].id + ')', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "INCREDIBILE! Con grande fortuna hai vinto *" + itemName + "* e una üíé!", back);
											});
										});
									}else{
										connection.query('SELECT item.id, item.name FROM inventory, item WHERE inventory.item_id = item.id AND player_id = ' + player_id + ' AND rarity = "' + rarity + '" AND craftable = 1 ORDER BY RAND()', function(err, rows, fields) {
											if (err) throw err;
											if (Object.keys(rows).length > 0){
												connection.query('DELETE FROM inventory WHERE player_id = ' + player_id + ' AND item_id = ' + rows[0].id + ' LIMIT 1', function(err, rows, fields) {
													if (err) throw err;
												});
												bot.sendMessage(message.chat.id, "NOOOOO! Purtroppo hai perso *" + rows[0].name + "*!", back);
											}else{
												if (rarity == "L"){
													var money = 50000;
												}else{
													var money = 100000;
												}
												connection.query('UPDATE player SET money = money - ' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});
												bot.sendMessage(message.chat.id, "NOOOOO! Purtroppo hai perso *" + money + "* ¬ß!", back);
											}
										});
									}
								});
							};
						};
					});
				};
			});
		});
	});
});

bot.onText(/Sfide del Destino/i, function(message) {
	var kb = {
		parse_mode: "Markdown",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Ruota della Luna üåï"],["Necro del Destino üîÆ"],["Torna al menu"]]
		}
	};
	bot.sendMessage(message.chat.id, "Seleziona il tipo di prova che vuoi affrontare", kb);
});

bot.onText(/Contatta lo Gnomo|Torna dallo Gnomo/i, function(message) {

	/*
	if (message.from.username != "fenix45"){
		bot.sendMessage(message.chat.id, "Manutenzione", back);
		return;
	}
	*/

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var myexp = rows[0].exp;
		var house_id = rows[0].house_id;
		var lev = Math.floor(myexp/10);
		var life = rows[0].life;
		var reborn = rows[0].reborn;
		var ability = rows[0].ability;
		var heist_protection = rows[0].heist_protection;
		var heist_streak = rows[0].heist_streak;

		connection.query('SELECT * FROM heist_progress WHERE from_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				var kb = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Cambia Rune","Tieni Combinazione"],["Rinuncia","Regole"],["Torna al Rifugio"]]
					}
				};

				var rBack = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Torna dallo Gnomo","Torna al Rifugio"],["Torna al menu"]]
					}
				};

				var kbYesNo = {
					parse_mode: "HTML",
					reply_markup: {
						resize_keyboard: true,
						//one_time_keyboard: true,
						"keyboard": [["Si"],["Torna dallo Gnomo"]]
					}
				};

				var my_comb = "";
				var travel = parseInt(rows[0].travel);
				travel++;
				var combi = String(rows[0].combination);
				var isMatch = rows[0].isMatch;
				var toId = rows[0].to_id;

				if (rows[0].wait_time != null){
					var now = new Date(rows[0].wait_time);
					var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());
					bot.sendMessage(message.chat.id, "Il tuo gnomo sta ancora raccogliendo le rune, attendi fino alle " + short_date, back);
					return;
				}

				if (rows[0].my_combination == 0){
					for (i=0; i<5; i++){
						my_comb += String(Math.round(Math.random()*5+1));
					}

					my_comb = String(my_comb);

					var now = new Date();
					now.setMinutes(now.getMinutes() + 5);
					var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
					var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());

					connection.query('UPDATE heist_progress SET my_combination = ' + my_comb + ', wait_time = "' + long_date + '", travel=travel+1 WHERE from_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;

						bot.sendMessage(message.chat.id, "Il tuo gnomo √® andato a recuperare alcune rune, dovrai attendere il suo ritorno alle " + short_date, back);
					});
					return;
				}else{
					my_comb = String(rows[0].my_combination);
				}

				connection.query("SELECT chat_id, nickname, money FROM player WHERE id = " + toId, function(err, rows, fields) {
					if (err) throw err;

					var nick = rows[0].nickname;
					var toChat = rows[0].chat_id;
					var toMoney = rows[0].money;

					var my_comb_arr = my_comb.split("");

					bot.sendMessage(message.chat.id,"Lo gnomo torna dal rifugio con 5 Rune, su ogni runa √® scritto un numero:\n\nüí¨ " + my_comb_arr.join(" ") + "\n\nPer entrare nel rifugio di <b>" + nick + "</b> devi possedere delle Rune di un valore pi√π alto rispetto a quelle del guardiano del cancello, come procedi?\n\nPuoi cambiare le Rune ancora " + (4-travel) + " volte", kb).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text == "Cambia Rune"){

								if (travel >= 4){
									bot.sendMessage(message.chat.id, "Non puoi cambiare Rune pi√π di 2 volte per ispezione!", rBack);
									return;
								}

								bot.sendMessage(message.chat.id, "Inserisci le posizioni delle Rune che vuoi cambiare, separate da una virgola. Dopo 5 minuti il tuo gnomo torner√† con le nuove rune.", rBack).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if ((answer.text == "Torna al rifugio") || (answer.text == "Torna dallo Gnomo")){
											return;
										}

										var numbers = answer.text.trim().split(",");
										var len = Object.keys(numbers).length;

										if (len < 1){
											bot.sendMessage(message.chat.id, "Inserisci almeno un numero, riprova", rBack);
											return;
										}

										if (len > 5){
											bot.sendMessage(message.chat.id, "Troppi numeri, massimo 5, riprova", rBack);
											return;
										}

										var check = 0;
										var checkn = 0;

										for (var i = 0; i < len; i++) {
											numbers[i] = Math.round(numbers[i]);

											if (isNaN(numbers[i])){
												bot.sendMessage(message.chat.id, "Almeno un numero non √® valido, riprova", rBack);
												return;
											}
											if ((numbers[i] < 1) || (numbers[i] > 5)){
												bot.sendMessage(message.chat.id, numbers[i] + " non √® valido, deve essere compreso tra 1 e 5", rBack);
												return;
											}
											checkn = 0;
											for (var j = 0; j < len; j++) {
												if (numbers[i] == numbers[j]){
													checkn++;
												}
												if (checkn >= 2){
													bot.sendMessage(message.chat.id, numbers[i] + " non √® valido, √® gi√† stato inserito", rBack);
													return;
												}
											}
										}

										var now = new Date();
										now.setMinutes(now.getMinutes() + 5);
										var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
										var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());

										connection.query('UPDATE heist_progress SET changeComb = ' + numbers.join("") + ', wait_time = "' + long_date + '", travel = travel+1 WHERE from_id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Lo gnomo √® stato inviato a sostituire le rune richieste, torner√† alle " + short_date, rBack);
										});
									};
								});

							}else if (answer.text == "Tieni Combinazione"){

								if (travel == 1){
									setAchievement(message.chat.id, player_id, 8, 1);
								}

								var num = [];
								var end = "";
								var end_num = 0;

								var final1 = 0;
								var final2 = 0;
								var final_n1 = "";
								var final_n2 = "";
								var couple1 = 0;
								var couple2 = 0;

								var dcouple1 = 0;
								var dcouple2 = 0;
								var dcouple1b = 0;
								var dcouple2b = 0;
								var dcoupled1 = 0;
								var dcoupled2 = 0;
								var dcoupleSolo1 = 0;
								var dcoupleSolo2 = 0;

								var triple1 = 0;
								var triple2 = 0;
								var triple_a1 = 0;
								var triple_a2 = 0;
								var triple_b1 = 0;
								var triple_b2 = 0;
								var triple_d1 = 0;
								var triple_d2 = 0;

								var full1_d = 0;
								var full1_t = 0;
								var full1 = 0;
								var full2 = 0;
								var quad1 = 0;
								var quad2 = 0;
								var dquad1 = 0;
								var dquad2 = 0;
								var penta1 = 0;
								var penta2 = 0;
								var scalef1 = 0;
								var scalef2 = 0;
								var scales1 = 0;
								var scales2 = 0;

								for (i = 0; i<2; i++){

									if (i == 0){
										num = my_comb.split("");
									}else{
										num = combi.split("");
									}
									num.sort();

									end = "";
									end_num = 0;

									//Cinque di un tipo
									if ((num[0] == num[1]) && (num[1] == num[2]) && (num[2] == num[3]) && (num[3] == num[4])){
										end = "Cinque di un tipo";
										end_num = 8;
									}

									if ((i == 0) && (end_num == 8)){
										penta1 = num[0];
									}else{
										penta2 = num[0];
									}

									if (end_num == 0){
										//Quattro di un tipo
										var dquad = 0;
										if ((num[0] == num[1]) && (num[1] == num[2]) && (num[2] == num[3])){
											end = "Quattro di un tipo";
											end_num = 7;
											dquad = num[4];
										}
										if ((num[1] == num[2]) && (num[2] == num[3]) && (num[3] == num[4])){
											end = "Quattro di un tipo";
											end_num = 7;
											dquad = [0];
										}

										if ((i == 0) && (end_num == 7)){
											quad1 = num[1];
											dquad1 = dquad;
										}else{
											quad2 = num[1];
											dquad2 = dquad;
										}
									}

									if (end_num == 0){
										//Scala di 6
										if ((num[0] == 2) && (num[1] == 3) && (num[2] == 4) && (num[3] == 5) && (num[4] == 6)){
											end = "Scala di 6";
											end_num = 6;
										}

										if ((i == 0) && (end_num == 6)){
											scales1 = num[0];
										}else{
											scales2 = num[0];
										}
									}

									if (end_num == 0){
										//Scala di 5
										if ((num[0] == 1) && (num[1] == 2) && (num[2] == 3) && (num[3] == 4) && (num[4] == 5)){
											end = "Scala di 5";
											end_num = 5;
										}

										if ((i == 0) && (end_num == 5)){
											scalef1 = num[0];
										}else{
											scalef2 = num[0];
										}
									}

									if (end_num == 0){
										//Full House
										var full = 0;
										var fullDouble = 0;
										var fullTris = 0;
										var array_full = [];

										if ((num[0] == num[1]) && (num[1] == num[2])){
											full++;
											fullTris = num[0];
											array_full.push(num[3]);
											array_full.push(num[4]);
										}else if ((num[1] == num[2]) && (num[2] == num[3])){
											full++;
											fullTris = num[1];
											array_full.push(num[0]);
											array_full.push(num[4]);
										}else if ((num[2] == num[3]) && (num[3] == num[4])){
											full++;
											fullTris = num[2];
											array_full.push(num[0]);
											array_full.push(num[1]);
										}

										if (full == 1){
											if (array_full[0] == array_full[1]){
												full++;
												fullDouble = array_full[0];
											}

											if (fullDouble != fullTris){
												if (full == 2){
													end = "Full";
													end_num = 4;
												}
												if ((i == 0) && (end_num == 4)){
													full1_d = fullDouble;
													full1_t = fullTris;
												}else{
													if (fullTris == full1_t){
														full2 = fullDouble;
														full1 = full1_d;
													}else{
														full2 = fullTris;
														full1 = full1_t;
													}
												}
											}
										}
									}

									if (end_num == 0){
										//Tre di un tipo
										var triple = 0;
										var triple_d = 0;
										if ((num[0] == num[1]) && (num[1] == num[2])){
											end = "Tre di un tipo";
											end_num = 3;
											triple = num[0];

											if (i == 0){
												triple_a1 = num[3];
												triple_a2 = num[4];
											}else{
												triple_b1 = num[3];
												triple_b2 = num[4];
											}
										}
										if ((num[1] == num[2]) && (num[2] == num[3])){
											end = "Tre di un tipo";
											end_num = 3;
											triple = num[1];

											if (i == 0){
												triple_a1 = num[0];
												triple_a2 = num[4];
											}else{
												triple_b1 = num[0];
												triple_b2 = num[4];
											}
										}
										if ((num[2] == num[3]) && (num[3] == num[4])){
											end = "Tre di un tipo";
											end_num = 3;
											triple = num[2];

											if (i == 0){
												triple_a1 = num[0];
												triple_a2 = num[1];
											}else{
												triple_b1 = num[0];
												triple_b2 = num[1];
											}
										}

										if ((i == 0) && (end_num == 3)){
											triple1 = triple;
										}else{
											triple2 = triple;

											if (triple_a2 == triple_b2){
												if (triple_a1 >= triple_b1){
													triple_d1 = triple_a1;
													triple_d2 = 0;
												}else{
													triple_d1 = 0;
													triple_d2 = triple_b1;
												}
											}else{
												if (triple_a2 >= triple_b2){
													triple_d1 = triple_a2;
													triple_d2 = 0;
												}else{
													triple_d1 = 0;
													triple_d2 = triple_b2;
												}
											}
										}
									}

									if (end_num == 0){
										//Doppia Coppia
										var double = 0;
										var doubleN = 0;
										var doubleN2 = 0;
										if (num[0] == num[1]){
											double++;
											doubleN = num[0];
										}
										if (num[1] == num[2]){
											double++;
											if (double == 2)
												doubleN2 = doubleN;
											if (num[1] > doubleN)
												doubleN = num[1];
										}
										if (num[2] == num[3]){
											double++;
											if (double == 2)
												doubleN2 = doubleN;
											if (num[2] > doubleN)
												doubleN = num[2];
										}
										if (num[3] == num[4]){
											double++;
											if (double == 2)
												doubleN2 = doubleN;
											if (num[3] > doubleN)
												doubleN = num[3];
										}
										if (double == 2){
											end = "Doppia Coppia";
											end_num = 2;
										}

										var checkN = 0;

										if ((i == 0) && (end_num == 2)){
											dcouple1 = doubleN;
											dcouple1b = doubleN2;

											for (k=0;k<5;k++){
												checkN = 0;
												for (j=0;j<5;j++){
													if (num[k] == num[j])
														checkN++;
												}
												if (checkN == 1)
													dcoupleSolo1 = num[k];
											}
										}else{
											dcouple2 = doubleN;
											dcouple2b = doubleN2;

											for (k=0;k<5;k++){
												checkN = 0;
												for (j=0;j<5;j++){
													if (num[k] == num[j])
														checkN++;
												}
												if (checkN == 1)
													dcoupleSolo2 = num[k];
											}
										}
									}

									if (end_num == 0){
										//Coppia
										var coup = 0;
										if (num[0] == num[1]){
											end = "Coppia";
											end_num = 1;
											coup = num[0];
										}
										if (num[1] == num[2]){
											end = "Coppia";
											end_num = 1;
											coup = num[1];
										}
										if (num[2] == num[3]){
											end = "Coppia";
											end_num = 1;
											coup = num[2];
										}
										if (num[3] == num[4]){
											end = "Coppia";
											end_num = 1;
											coup = num[3];
										}

										if ((i == 0) && (end_num == 1)){
											couple1 = coup;
										}else{
											couple2 = coup;
										}
									}

									if (i == 0){
										final1 = end_num;
										final_n1 = end;
									}else{
										final2 = end_num;
										final_n2 = end;
									}
								}

								var text = "Punti 1: " + final1 + " (" + final_n1 + ")\nPunti 2: " + final2 + " (" + final_n2 + ")";
								console.log(text);

								if ((final1 == 1) && (final2 == 1)){	//Coppia
									if (couple1 >= couple2){
										final1++;
									}else{
										final2++;
									}
								}
								if ((final1 == 2) && (final2 == 2)){	//Doppia Coppia

									console.log(dcouple1, dcouple2, dcouple1b, dcouple2b, dcoupleSolo1, dcoupleSolo2);

									if (dcouple1 > dcouple2){
										final1++;
									}else if (dcouple1 == dcouple2){
										if (dcouple1b > dcouple2b){
											final1++;
										}else if (dcouple1b == dcouple2b){
											if (dcoupleSolo1 >= dcoupleSolo2)
												final1++;
											else
												final2++;
										}else{
											final2++;
										}
									}else{
										final2++;
									}
								}
								if ((final1 == 3) && (final2 == 3)){	//Tris
									if (triple1 == triple2){
										if (triple_d1 >= triple_d2){
											final1++;
										}else{
											final2++;
										}
									}else{
										if (triple1 >= triple2){
											final1++;
										}else{
											final2++;
										}
									}
								}
								if ((final1 == 4) && (final2 == 4)){	//Full
									if (full1 >= full2){
										final1++;
									}else{
										final2++;
									}
								}
								if ((final1 == 5) && (final2 == 5)){	//Scala 5
									if (scalef1 >= scalef2){
										final1++;
									}else{
										final2++;
									}
								}
								if ((final1 == 6) && (final2 == 6)){	//Scala 6
									if (scales1 >= scales2){
										final1++;
									}else{
										final2++;
									}
								}
								if ((final1 == 7) && (final2 == 7)){	//Quattro uguali
									if (quad1 > quad2){
										final1++;
									}else{
										if (quad1 == quad2){
											if (dquad1 >= dquad2){
												final1++;
											}else{
												final2++;
											}
										}else{
											final2++;
										}
									}
								}
								if ((final1 == 8) && (final2 == 8)){	//Cinque uguali
									if (penta1 >= penta2){
										final1++;
									}else{
										final2++;
									}
								}

								if (final1 >= final2){
									connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 5', function(err, rows, fields) {
										if (err) throw err;

										var abBonus = 0;
										if (Object.keys(rows).length > 0){
											abBonus = rows[0].ability_level*(rows[0].val/10);
										}

										var money = ability*10;
										money += money*(abBonus/10);

										if (toMoney < money){
											money = toMoney;
										}

										if (money < 0){
											money = 0;
										}

										money = Math.round(money);

										connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + toId, function(err, rows, fields) {
											if (err) throw err;

											if (crazyMode == 1){
												money = money*2;
											}

											connection.query('UPDATE player SET money = money+' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												connection.query('DELETE FROM heist_progress WHERE from_id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;

													connection.query('UPDATE player SET mkeys = mkeys+1 WHERE id = ' + player_id, function(err, rows, fields) {
														if (err) throw err;
													});

													bot.sendMessage(message.chat.id, "La tua combinazione di rune (" + my_comb + ") √® migliore di quella del guardiano (" + combi + ")! In una stanzetta all'interno del rifugio hai trovato un sacchettino contenente " + money + " ¬ß ed una Chiave Mistica  üóù!", back);
													bot.sendMessage(toChat, message.from.username + " √® riuscito a sconfiggere il guardiano del tuo rifugio, purtroppo avendo lasciato incustodito un sacchettino di monete, hai perso " + money + " ¬ß");

													var heistRand = Math.random()*100;
													if (heist_streak+1 >= 15){
														var chestStreak = 4;
														if (heistRand % 2 == 0){
															chestStreak = 5;
														}
														connection.query('UPDATE player SET heist_streak = 0 WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
															connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chestStreak + ')', function(err, rows, fields) {
																if (err) throw err;
																connection.query('SELECT name FROM chest WHERE id = ' + chestStreak, function(err, rows, fields) {
																	if (err) throw err;
																	bot.sendMessage(message.chat.id, "Per aver sconfitto 15 guardiani hai ricevuto uno <b>" + rows[0].name + "</b>!", html);
																});
															});
														});
													}else{
														connection.query('UPDATE player SET heist_streak = heist_streak+1 WHERE id = ' + player_id, function(err, rows, fields) {
															if (err) throw err;
														});
													}
												});
											});
										});
									});

									if (isMatch == 1){
										setAchievement(message.chat.id, player_id, 13, 1);

										connection.query('UPDATE player SET ability = ability+3, exp = exp+3 WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE player SET ability = ability-3 WHERE ability > 0 AND id = ' + toId, function(err, rows, fields) {
											if (err) throw err;
										});
									}

									var d = new Date();
									var history_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

									connection.query('INSERT INTO heist_history (from_id, to_id, rate1, fail, time) VALUES ' +
													 '(' + player_id + ',' + toId + ',0,0,"' + history_date + '")', function (err, rows, fields){
										if (err) throw err;
									});
								}else{
									connection.query('DELETE FROM heist_progress WHERE from_id = ' + player_id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "La tua combinazione di rune (" + my_comb + ") √® peggiore di quella del guardiano (" + combi + ")! Il portone del rifugio si blocca ed il tuo gnomo √® costretto a tornare indietro", back);
										bot.sendMessage(toChat, "<b>" + message.from.username + "</b> non √® riuscito a sconfiggere il guardiano del tuo portone, cos√¨ √® stato respinto", html);
									});

									if (isMatch == 1){
										setAchievement(toChat, toId, 9, 1);	

										connection.query('UPDATE player SET exp = exp+1 WHERE id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE player SET ability = ability-3 WHERE ability > 0 AND id = ' + player_id, function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE player SET ability = ability+3 WHERE id = ' + toId, function(err, rows, fields) {
											if (err) throw err;
										});					
									}

									var d = new Date();
									var history_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

									connection.query('INSERT INTO heist_history (from_id, to_id, rate1, fail, time) VALUES ' +
													 '(' + player_id + ',' + toId + ',0,1,"' + history_date + '")', function (err, rows, fields){
										if (err) throw err;
									});
								}
							}else if (answer.text == "Rinuncia"){
								bot.sendMessage(message.chat.id, "Sicuro di voler rinunciare all'ispezione?", kbYesNo).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text.toLowerCase() == "si"){
											connection.query('DELETE FROM heist_progress WHERE from_id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(message.chat.id, "Hai deciso di rinunciare all'ispezione", back);
												bot.sendMessage(toChat, "<b>" + message.from.username + "</b> ha rinunciato all'ispezione nel tuo rifugio", html);
											});

											if (isMatch == 1){
												setAchievement(toChat, toId, 9, 1);						
											}

											connection.query('UPDATE `player` SET ability = ability-3 WHERE id = ' + player_id, function(err, rows, fields) {
												if (err) throw err;
											});
											connection.query('UPDATE `player` SET ability = ability+3 WHERE id = ' + toId, function(err, rows, fields) {
												if (err) throw err;
											});

											var d = new Date();
											var history_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

											connection.query('INSERT INTO heist_history (from_id, to_id, rate1, fail, time) VALUES ' +
															 '(' + player_id + ',' + toId + ',0,1,"' + history_date + '")', function (err, rows, fields){
												if (err) throw err;
											});
										}
									};
								});
							}else if (answer.text == "Regole"){
								bot.sendMessage(message.chat.id, "Regole dello Scontro tra Rune:\nPer vincere contro il guardiano dovrai possedere una combinazione di rune con un valore pi√π alto delle sue, in base a questo schema:\n- Coppia (2 uguali)\n- Doppia Coppia (2 coppie)\n- Tris (tre uguali)\n- Full (coppia e tris)\n- Scala 5 (da 1 a 5)\n- Scala 6 (da 2 a 6)\n- 4 Uguali\n- 5 Uguali\n\nPuoi cambiarne 1 o pi√π inviando lo gnomo, oppure rinunciare (verr√† considerata come un'ispezione persa)", rBack);
							}
						};
					});
				});
			}else{
				bot.sendMessage(message.chat.id, "Il tuo gnomo non √® appostato a nessun rifugio", back);
			}
		});
	});
});

bot.onText(/^rifugio|Torna al rifugio/i, function(message) {

	if (message.text.indexOf("Elettricista") != -1){
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var player_id = rows[0].id;
		var myexp = rows[0].exp;
		var house_id = rows[0].house_id;
		var lev = Math.floor(myexp/10);
		var life = rows[0].life;
		var reborn = rows[0].reborn;
		var ability = rows[0].ability;
		var heist_protection = rows[0].heist_protection;
		var heist_streak = rows[0].heist_streak;
		var custom_name_h = rows[0].custom_name_h;

		if ((life <= 0) && (myexp > 10)){
			bot.sendMessage(message.chat.id, "Non puoi iniziare ispezioni da morto.", revive);
			return;
		}

		if ((lev < 15) && (reborn == 1)){
			bot.sendMessage(message.chat.id, "Il tuo livello √® ancora troppo basso.", back);
			return;
		}

		var iKeys = [];
		connection.query('SELECT 1 FROM heist_progress WHERE from_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				iKeys.push(["Contatta lo Gnomo"]);
			}
			iKeys.push(["Ispezione","Spia Rifugio"]);
			iKeys.push(["Prelevazione","Migliora Rifugio","Protezione"]);
			iKeys.push(["Torna al menu"]);

			var kb = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": iKeys
				}
			};

			var kb2 = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": [["Matchmaking (100 ¬ß)"],["Inserisci il Nickname (200 ¬ß)"],["Torna al Rifugio"]]
				}
			};

			connection.query('SELECT name FROM house WHERE id = ' + house_id, function(err, rows, fields) {
				if (err) throw err;

				if (custom_name_h != null){
					rifugio = "Rifugio " + custom_name_h + " (" + house_id + ")";
				}else{
					rifugio = rows[0].name + " (" + house_id + ")";
				}

				bot.sendMessage(message.chat.id, "Bentornato nel tuo *" + rifugio + "*, possiedi *" + ability + "* punti abilit√†! Cosa vuoi fare?", kb).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text == "Ispezione"){

							if (heist_protection != null){
								bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi ispezionare gli altri utenti", back);
								return;
							}

							bot.sendMessage(message.chat.id, "Invia uno gnomo ad un rifugio di un altro giocatore per cercare di ottenere il suo bottino e una Chiave Mistica, puoi usare il Matchmaking per sceglierlo casualmente in base alla tua abilit√† oppure inserire il suo nickname", kb2);
						}
					};
				});
			});
		});
	});
});


bot.onText(/matchmaking/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var myexp = rows[0].exp;
		var lev = Math.floor(myexp/10)
		var reborn = rows[0].reborn;
		var myab = rows[0].ability;
		var from_id = rows[0].id;
		var weapon_bonus = rows[0].weapon;
		var life = rows[0].life;
		var house_id = rows[0].house_id;
		var money = rows[0].money;
		var heist_count = rows[0].heist_count;
		var last_mm = rows[0].last_mm;

		var travel = rows[0].travel_id;
		var cave = rows[0].cave_id;

		if ((life <= 0) && (myexp > 10)){
			bot.sendMessage(message.chat.id, "Non puoi iniziare ispezioni da morto.", revive);
			return;
		}

		if ((lev < 15) && (reborn == 1)){
			bot.sendMessage(message.chat.id, "Il tuo livello √® ancora troppo basso, torna quando avrai raggiunto il livello 15.", back);
			return;
		}

		connection.query('SELECT id FROM heist_progress WHERE from_id=' + from_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				bot.sendMessage(message.chat.id, "Stai svolgendo un ispezione, completala prima di iniziarne un'altra", back);
				return;
			}

			connection.query('SELECT COUNT(*) As num, datetime FROM heist WHERE from_id=' + from_id, function(err, rows, fields) {
				if (err) throw err;
				if (rows[0].num > 0){
					var date = new Date(rows[0].datetime);
					var short_date = addZero(date.getHours()) + ":" + addZero(date.getMinutes()) + ":" + addZero(date.getSeconds());
					bot.sendMessage(message.chat.id, "Sei in un ispezione fino alle " + short_date, kb_heist);
					return;
				}

				if (heist_count >= 10){
					bot.sendMessage(message.chat.id, "Puoi ispezionare un rifugio solamente 10 volte al giorno, riprova domani dalle 3.", back);
					return;
				}

				if (money < 100){
					bot.sendMessage(message.chat.id, "Non hai abbastanza monete!", back);
					return;
				}

				connection.query('SELECT team_id FROM team_player WHERE player_id = ' + from_id, function(err, rows, fields) {
					if (err) throw err;

					var team_id = 0;
					var heist_limit = 3;
					if (Object.keys(rows).length > 0){
						team_id = parseInt(rows[0].team_id);
						heist_limit = 10;
					}

					var offset = Math.round(myab/2);
					var offset2 = Math.round(myab/3);
					var limit = 30;
					var count = 100;
					var i = 0;
					var banned_join = banlist_id.join();
					var minexp = 150;

					connection.query("SELECT nickname, exp, team_player.team_id FROM player, team_player WHERE player.heist_limit < " + heist_limit + " AND player.account_id NOT IN (" + banned_join + ",1,3) AND team_player.player_id = player.id AND team_player.team_id != " + team_id + " AND heist_protection IS NULL AND ability BETWEEN " + (myab-offset) + " AND " + (myab+offset2) + " AND nickname <> '" + message.from.username + "' AND money > 0 AND exp > " + minexp + " AND player.id != " + last_mm + " ORDER BY ability DESC, heist_limit ASC, RAND() LIMIT " + limit, function(err, rows, fields) {
						if (err) throw err;
						if (Object.keys(rows).length < 3){
							offset += 20;
							offset2 += 20;
							connection.query("SELECT nickname, exp, team_player.team_id FROM player, team_player WHERE player.heist_limit < " + heist_limit + " AND player.account_id NOT IN (" + banned_join + ",1,3) AND team_player.player_id = player.id AND team_player.team_id != " + team_id + " AND heist_protection IS NULL AND ability BETWEEN " + (myab-offset) + " AND " + (myab+offset2) + " AND nickname <> '" + message.from.username + "' AND money > 0 AND exp > " + minexp + " AND player.id != " + last_mm + " ORDER BY ability DESC, heist_limit ASC, RAND() LIMIT " + limit, function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length < 3){
									offset += 50;
									offset2 += 50;
									connection.query("SELECT nickname, exp, team_player.team_id FROM player, team_player WHERE player.heist_limit < " + heist_limit + " AND player.account_id NOT IN (" + banned_join + ",1,3) AND team_player.player_id = player.id AND team_player.team_id != " + team_id + " AND heist_protection IS NULL AND ability BETWEEN " + (myab-offset) + " AND " + (myab+offset2) + " AND nickname <> '" + message.from.username + "' AND money > 0 AND exp > " + minexp + " AND player.id != " + last_mm + " ORDER BY ability DESC, heist_limit ASC, RAND() LIMIT " + limit, function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length < 3){
											offset += 100;
											offset2 += 100;
											if (Object.keys(rows).length < 5){
												bot.sendMessage(message.chat.id, "Nessun giocatore adatto trovato, riprova.", back);
											}else{
												var rand;
												rand = Math.floor(Math.random()*Object.keys(rows).length); //0 sono io
												attack(rows[rand].nickname, message, from_id, weapon_bonus, 100, 1);
											}
										}else{
											var rand;
											rand = Math.floor(Math.random()*Object.keys(rows).length); //0 sono io
											attack(rows[rand].nickname, message, from_id, weapon_bonus, 100, 1);
										}
									});
								}else{
									var rand;
									rand = Math.floor(Math.random()*Object.keys(rows).length); //0 sono io
									attack(rows[rand].nickname, message, from_id, weapon_bonus, 100, 1);
								}
							});
						}else{
							var rand;
							rand = Math.floor(Math.random()*Object.keys(rows).length); //0 sono io
							attack(rows[rand].nickname, message, from_id, weapon_bonus, 100, 1);
						}
					});
				});
			});
		});
	});
});

bot.onText(/inserisci il nickname|ispeziona: /i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (wanted == 0){
			if (rows[0].heist_protection != null){
				bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi ispezionare gli altri utenti", back);
				return;
			}
		}

		var myexp = rows[0].exp;
		var lev = Math.floor(myexp/10);
		var reborn = rows[0].reborn;
		var from_id = rows[0].id;
		var weapon_bonus = rows[0].weapon;
		var life = rows[0].life;
		var house_id = rows[0].house_id;
		var money = rows[0].money;
		var heist_count = rows[0].heist_count;

		if ((lev < 15) && (reborn == 1)){
			bot.sendMessage(message.chat.id, "Il tuo livello √® ancora troppo basso.", back);
			return;
		}

		var travel = rows[0].travel_id;
		var cave = rows[0].cave_id;

		connection.query('SELECT COUNT(*) As num, datetime FROM heist WHERE from_id=' + from_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].num > 0){
				var date = new Date(rows[0].datetime);
				var short_date = addZero(date.getHours()) + ":" + addZero(date.getMinutes()) + ":" + addZero(date.getSeconds());
				bot.sendMessage(message.chat.id, "Sei in un ispezione fino alle " + short_date, kb_heist);
				return;
			}
			connection.query('SELECT id FROM heist_progress WHERE from_id=' + from_id, function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0){
					bot.sendMessage(message.chat.id, "Stai svolgendo un ispezione, completala prima di iniziarne un'altra", back);
					return;
				}

				connection.query('SELECT wanted_id FROM event_wanted_status WHERE player_id = ' + from_id, function(err, rows, fields) {
					if (err) throw err;

					var wanted_id = 0;
					if (Object.keys(rows).length > 0){
						wanted_id = rows[0].wanted_id;
					}

					if (money < 200){
						bot.sendMessage(message.chat.id, "Non hai abbastanza monete!", back);
						return;
					}

					if (message.text.indexOf(":") != -1){
						var usr = message.text.substring(message.text.indexOf(":")+2).replace("@","").trim();
						//console.log(usr);

						if (message.from.username.toLowerCase() == usr.toLowerCase()){
							bot.sendMessage(message.chat.id, "Non puoi ispezionare te stesso.", back);
							return;
						}

						usr = usr.replace(/[^\w\s]/gi, '');

						connection.query('SELECT id, account_id, reborn FROM player WHERE nickname="' + usr + '"', function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length > 0){
								var account_id = (rows[0].account_id).toString();
								if (banlist_id.indexOf(account_id) != -1){
									bot.sendMessage(message.chat.id, "Non puoi ispezionare un giocatore bannato", back);
									return;
								}

								var d = new Date();
								var time = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate());

								if ((wanted == 0) && (rows[0].id != wanted_id)){
									if (reborn > rows[0].reborn){
										bot.sendMessage(message.chat.id, "Puoi ispezionare solamente un giocatore con una rinascita pari o superiore alla tua", back);
										return;
									}
									if (heist_count >= 10){
										bot.sendMessage(message.chat.id, "Puoi ispezionare un rifugio solamente 10 volte al giorno, riprova domani dalle 3.", back);
										return;
									}
								}

								connection.query('SELECT id FROM heist_history WHERE from_id = ' + from_id + ' AND to_id = ' + rows[0].id + ' AND time LIKE "' + time + '%"', function(err, rows, fields) {
									if (err) throw err;
									if ((Object.keys(rows).length <= 2) || (wanted == 1)){
										attack(usr, message, from_id, weapon_bonus, 200, 0);
									}else{
										bot.sendMessage(message.chat.id, "Hai ispezionato troppe volte questo giocatore, riprova domani.", back);
									}
								});
							}else{
								bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova.", back);
							}
						});
						return;
					}

					bot.sendMessage(message.chat.id, "Inserisci il nickname del giocatore da sfidare.\n*OPPURE* puoi ispezionare un giocatore scrivendo *Ispeziona: Nomeutente*", mark).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (message.text.indexOf(":") != -1){
								return;
							}

							answer.text = answer.text.replace("@","").trim();

							if (message.from.username.toLowerCase() == answer.text.toLowerCase()){
								bot.sendMessage(message.chat.id, "Non puoi ispezionare te stesso.", back);
								return;
							}

							connection.query('SELECT reborn, id, account_id FROM player WHERE nickname="' + answer.text + '"', function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length > 0){

									var account_id = (rows[0].account_id).toString();
									if (banlist_id.indexOf(account_id) != -1){
										bot.sendMessage(message.chat.id, "Non puoi ispezionare un giocatore bannato", back);
										return;
									}

									var d = new Date();
									var time = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate());

									if ((wanted == 0) && (rows[0].id != wanted_id)){
										if (reborn > rows[0].reborn){
											bot.sendMessage(message.chat.id, "Puoi ispezionare solamente un giocatore con una rinascita pari o superiore alla tua", back);
											return;
										}
										if (heist_count >= 10){
											bot.sendMessage(message.chat.id, "Puoi ispezionare un rifugio solamente 10 volte al giorno, riprova domani dalle 3.", back);
											return;
										}
									}

									connection.query('SELECT id FROM heist_history WHERE from_id = ' + from_id + ' AND to_id = ' + rows[0].id + ' AND time LIKE "' + time + '%"', function(err, rows, fields) {
										if (err) throw err;
										if ((Object.keys(rows).length <= 2) || (wanted == 1)){
											attack(answer.text, message, from_id, weapon_bonus, 200, 0);
										}else{
											bot.sendMessage(message.chat.id, "Hai ispezionato troppe volte questo giocatore, riprova domani.", back);
										}
									});
								}else{
									bot.sendMessage(message.chat.id, "Giocatore non trovato, riprova.", back);
								}
							});
						};
					});
				});
			});
		});
	});
});

bot.onText(/^protezione$/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var player_id = rows[0].id;

		connection.query('SELECT * FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 237', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				bot.sendMessage(message.chat.id, "Ti serve il Campo di Forza.", back);
				return;
			}
			bot.sendMessage(message.chat.id, "Il Campo di Forza ti fornir√† protezione dalle Ispezioni per 24 ore, ma intanto non potrai ispezionare, confermi?", yesno).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {
					var conf = answer.text;
					if (conf == "Si"){

						connection.query('SELECT * FROM inventory WHERE player_id = ' + player_id + ' AND item_id = 237', function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								bot.sendMessage(message.chat.id, "Ti serve il Campo di Forza.", back);
								return;
							}

							var now = new Date();
							now.setHours(now.getHours() + 24);
							var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
							var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());

							connection.query('UPDATE player SET heist_protection = "' + long_date + '" WHERE id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Sei protetto fino alle " + short_date, back);
							});
							connection.query('DELETE FROM inventory WHERE item_id = 237 AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
								if (err) throw err;
							});					
						});
					}
				};
			});
		});
	});
});

bot.onText(/^prelevazione/i, function(message) {

	/*
	if (message.from.username != "fenix45"){
		bot.sendMessage(message.chat.id, "Manutenzione", back);
		return;
	}
	*/

	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var house_id = rows[0].house_id;
		var money = rows[0].money;
		var from_id = rows[0].id;
		var reborn = rows[0].reborn;
		var totlife1 = rows[0].total_life;

		var pre = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Preleva","Estrai"],["Torna al menu"]]
			}
		};

		var pBack = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Prelevazione"],["Torna al menu"]]
			}
		};

		if (xxxteria == 1){
			bot.sendMessage(message.chat.id, "Durante la xxxteria non puoi usare la capsula, monello üåù", back);
			return;			
		}

		if (rows[0].heist_protection != null){
			bot.sendMessage(message.chat.id, "A causa del campo di forza non puoi utilizzare le capsule", back);
			return;
		}

		bot.sendMessage(message.chat.id, "Seleziona il tipo di capsula da utilizzare.\nPrelevando otterrai un oggetto E o L da un giocatore casuale\nEstraendo otterrai uno scrigno ed un giocatore casuale dovr√† pagarlo per te", pre).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {

				if (answer.text == "Torna al menu"){
					return;
				}

				if ((answer.text != "Preleva") && (answer.text != "Estrai")){
					bot.sendMessage(message.chat.id, "Tipo non valido!", back);
					return;
				}

				var cId = 0;
				var t = "";

				if (answer.text == "Preleva"){
					cId = 220;
				}else if (answer.text == "Estrai"){
					cId = 618;
				}

				bot.sendMessage(message.chat.id, "Sicuro di voler continuare? Verr√† selezionato un giocatore casuale come bersaglio", yesno).then(function() {
					answerCallbacks[message.chat.id] = function(answer) {
						if (answer.text.toLowerCase() == "si"){
							connection.query('SELECT * FROM inventory WHERE player_id = ' + from_id + ' AND item_id = ' + cId, function(err, rows, fields) {
								if (err) throw err;

								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Ti serve una Capsula del tipo selezionato.", back);
									return;
								}

								if (cId == 220){
									connection.query("SELECT player.id As player_id, player.nickname, player.house_id, player.chat_id, count(item_id) As cnt " +
													 "FROM inventory_rarity, player " +
													 "WHERE player.reborn >= " + reborn + " AND player.market_ban = 0 AND player.capsule_limit < 5 AND player.id = inventory_rarity.player_id AND player.id != 3 AND player.heist_protection IS NULL AND rarity IN ('E','L') AND player.id != " + from_id + " " +
													 "GROUP BY nickname ORDER BY RAND() LIMIT 1", function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Non ci sono utenti prelevabili con questo tipo di capsula.", pBack);
											return;
										}

										var house_id = rows[0].house_id;
										var chat_id = rows[0].chat_id;
										var to_id = rows[0].player_id; 
										var nickname = rows[0].nickname;

										connection.query('SELECT name, item_id FROM inventory_rarity WHERE player_id = ' + to_id + ' AND (rarity = "E" OR rarity = "L") ORDER BY RAND() LIMIT 1', function(err, rows, fields) {
											if (err) throw err;

											var itemId = rows[0].item_id;

											connection.query('SELECT id FROM inventory WHERE player_id = ' + from_id + ' AND item_id = ' + cId, function (err, rows, fields){
												if (err) throw err;

												if (Object.keys(rows).length == 0){
													bot.sendMessage(message.chat.id, "Non possiedi la Capsula necessaria", pBack);
													return;
												}

												connection.query('SELECT name FROM item WHERE id = ' + itemId, function(err, rows, fields) {
													if (err) throw err;
													var itemName = rows[0].name;
													connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + from_id + ',' + itemId + ')', function(err, rows, fields) {
														if (err) throw err;
													});
													connection.query('DELETE FROM inventory WHERE player_id = ' + to_id + ' AND item_id = ' + itemId + ' LIMIT 1', function(err, rows, fields) {
														if (err) throw err;
														connection.query('DELETE FROM inventory WHERE item_id = 220 AND player_id = ' + from_id + ' LIMIT 1', function(err, rows, fields) {
															if (err) throw err;

															var randStone = Math.round(Math.random()*3);
															var stone_id = 70+randStone;
															connection.query('SELECT name FROM item WHERE id = ' + stone_id, function(err, rows, fields) {
																if (err) throw err;

																var stone_name = rows[0].name;
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + from_id + ',' + stone_id + ')', function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + from_id + ',' + stone_id + ')', function(err, rows, fields) {
																	if (err) throw err;
																});
																connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + from_id + ',' + stone_id + ')', function(err, rows, fields) {
																	if (err) throw err;
																});

																bot.sendMessage(message.chat.id, "Sei riuscito a rubare <b>" + itemName + "</b> da <b>" + nickname + "</b> ed il druido delle prelevazioni ti ha premiato con 3x " + stone_name + "!", back_html);
																if (house_id != 6){
																	bot.sendMessage(chat_id, "Un truffatore professionista √® riuscito a rubarti *" + itemName + "* dallo zaino!", mark);
																}else{
																	bot.sendMessage(chat_id, "Un truffatore di nome <b>" + message.from.username + "</b> √® riuscito a rubarti <b>" + itemName + "</b> dallo zaino!", html);
																}

																setAchievement(message.chat.id, from_id, 47, 1);

																var d = new Date();
																d.setHours(d.getHours() + 48);
																var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

																connection.query('UPDATE player SET capsule_limit = capsule_limit+1 WHERE id = ' + to_id, function(err, rows, fields) {
																	if (err) throw err;
																});

																var rand = Math.random()*200;
																if ((rand < 3) && (reborn >= 3)){
																	connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + from_id + ',532)', function(err, rows, fields) {
																		if (err) throw err;
																		bot.sendMessage(message.chat.id, "Un *Urlo di Morte* rieccheggia in lontananza... Wow!", mark);
																	});
																}
															});
														});
													});
												});
											});
										});
									});
								}else if (cId == 618){
									var chest = "";
									var money = 0;
									if ((reborn == 1) || (reborn == 2)){
										var rand = Math.round(Math.random());
										if (rand == 1){
											chest = 1;
											money = 600;
										}else{
											chest = 2;
											money = 1200;
										}
									}else if (reborn == 3){
										var rand = Math.round(Math.random());
										if (rand == 1){
											chest = 3;
											money = 2400;
										}else{
											chest = 4;
											money = 3600;
										}
									}else if ((reborn == 4) || (reborn == 5)){
										var rand = Math.round(Math.random());
										if (rand == 1){
											chest = 5;
											money = 7000;
										}else{
											chest = 6;
											money = 15000;
										}
									}

									connection.query("SELECT id, nickname, house_id, chat_id FROM player WHERE reborn >= " + reborn + " AND market_ban = 0 AND capsule_limit < 5 AND heist_protection IS NULL AND money > " + money + " AND id != 3 AND id != " + from_id + " ORDER BY RAND() LIMIT 1", function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Non ci sono utenti prelevabili con questo tipo di capsula.", pBack);
											return;
										}

										var house_id = rows[0].house_id;
										var chat_id = rows[0].chat_id;
										var to_id = rows[0].id;
										var nickname = rows[0].nickname;

										connection.query('SELECT id FROM inventory WHERE player_id = ' + from_id + ' AND item_id = ' + cId, function (err, rows, fields){
											if (err) throw err;

											if (Object.keys(rows).length == 0){
												bot.sendMessage(message.chat.id, "Non possiedi la Capsula necessaria", pBack);
												return;
											}

											connection.query('SELECT name FROM chest WHERE id = ' + chest, function(err, rows, fields) {
												if (err) throw err;
												var chestName = rows[0].name;
												connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + from_id + ',' + chest + ')', function(err, rows, fields) {
													if (err) throw err;
												});

												connection.query('UPDATE player SET money = money-' + money + ' WHERE id = ' + to_id, function(err, rows, fields) {
													if (err) throw err;
												});

												connection.query('DELETE FROM inventory WHERE item_id = 618 AND player_id = ' + from_id + ' LIMIT 1', function(err, rows, fields) {
													if (err) throw err;

													var randStone = Math.round(Math.random()*3);
													var stone_id = 70+randStone;
													connection.query('SELECT name FROM item WHERE id = ' + stone_id, function(err, rows, fields) {
														if (err) throw err;

														var stone_name = rows[0].name;
														connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + from_id + ',' + stone_id + ')', function(err, rows, fields) {
															if (err) throw err;
														});
														connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + from_id + ',' + stone_id + ')', function(err, rows, fields) {
															if (err) throw err;
														});
														connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + from_id + ',' + stone_id + ')', function(err, rows, fields) {
															if (err) throw err;
														});

														bot.sendMessage(message.chat.id, "Hai ottenuto uno <b>" + chestName + "</b>! Mentre <b>" + nickname + "</b> √® stato costretto a sborsare " + money + " ¬ß. Intanto il druido delle prelevazioni ti ha premiato con 3x " + stone_name + "!", back_html);
														if (house_id != 6){
															bot.sendMessage(chat_id, "Uno scassinatore professionista ti ha costretto a sborsare " + money + " ¬ß per il suo scrigno!");
														}else{
															bot.sendMessage(chat_id, "Un truffatore di nome <b>" + message.from.username + "</b> ti ha costretto a sborsare <b>" + money + "</b> ¬ß per il suo scrigno!", html);
														}

														setAchievement(message.chat.id, from_id, 47, 1);

														var d = new Date();
														d.setHours(d.getHours() + 48);
														var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

														connection.query('UPDATE player SET capsule_limit = capsule_limit+1 WHERE id = ' + to_id, function(err, rows, fields) {
															if (err) throw err;
														});

														var rand = Math.random()*200;
														if ((rand < 5) && (reborn >= 3)){
															connection.query('INSERT INTO inventory  (player_id, item_id) VALUES (' + from_id + ',532)', function(err, rows, fields) {
																if (err) throw err;
																bot.sendMessage(message.chat.id, "Un *Urlo di Morte* rieccheggia in lontananza... Wow!", mark);
															});
														}
													});
												});
											});
										});
									});
								}
							});
						};
					};
				});
			};
		});
	});
});

bot.onText(/migliora rifugio/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		var house_id = rows[0].house_id;
		var money = rows[0].money;
		var from_id = rows[0].id;

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if ((house_id+1) > 6){
			bot.sendMessage(message.chat.id, "Hai raggiunto il limite massimo di upgrade del rifugio.", back);
			return;
		}

		var level_text = "";
		var level = [];
		var level_money = 0;
		var check1 = "‚úÖ";
		var check2 = "‚úÖ";
		var check3 = "‚úÖ";

		if ((house_id+1) == 2){
			level_text = "> Cemento Armato\n> Materiale da Costruzione\n> Marmo";
			level = [144,145,148];
			level_money = 1500;
		}else if ((house_id+1) == 3){
			level_text = "> Progetto di Costruzione\n> Materiale da Costruzione\n> Marmo";
			level = [147,145,148];
			level_money = 3000;
		}else if ((house_id+1) == 4){
			level_text = "> Progetto di Costruzione\n> Titanio\n> Marmo";
			level = [147,149,148];
			level_money = 4500;
		}else if ((house_id+1) == 5){
			level_text = "> Progetto di Costruzione\n> Titanio\n> Oro Nero";
			level = [147,149,105];
			level_money = 7000;
		}else if ((house_id+1) == 6){
			level_text = "> Progetto Definitivo\n> Congegno Parallelo\n> Cella Blindata";
			level = [359,367,370];
			level_money = 10000;			
		}

		connection.query('SELECT inventory.item_id FROM player, inventory WHERE inventory.item_id = ' + level[0] + ' AND inventory.player_id = player.id AND player.id=' + from_id, function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				check1 = "";	
			}
			connection.query('SELECT inventory.item_id FROM player, inventory WHERE inventory.item_id = ' + level[1] + ' AND inventory.player_id = player.id AND player.id=' + from_id, function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0){
					check2 = "";
				}
				connection.query('SELECT inventory.item_id FROM player, inventory WHERE inventory.item_id = ' + level[2] + ' AND inventory.player_id = player.id AND player.id=' + from_id, function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						check3 = "";
					}


					if ((house_id+1) == 2){
						level_text = "> Cemento Armato " + check1 + "\n> Materiale da Costruzione " + check2 + "\n> Marmo " + check3;
					}else if ((house_id+1) == 3){
						level_text = "> Progetto di Costruzione " + check1 + "\n> Materiale da Costruzione " + check2 + "\n> Marmo " + check3;
					}else if ((house_id+1) == 4){
						level_text = "> Progetto di Costruzione " + check1 + "\n> Titanio " + check2 + "\n> Marmo " + check3;
					}else if ((house_id+1) == 5){
						level_text = "> Progetto di Costruzione " + check1 + "\n> Titanio " + check2 + "\n> Oro Nero " + check3;
					}else if ((house_id+1) == 6){
						level_text = "> Progetto Definitivo " + check1 + "\n> Congegno Parallelo " + check2 + "\n> Cella Blindata " + check3;
					}

					bot.sendMessage(message.chat.id, "Per passare al livello " + (house_id+1) + " del rifugio devi possedere i seguenti oggetti:\n" + level_text + "\nOltre a " + level_money + " ¬ß", yesno).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							var action = answer.text;
							if (action == "Torna al menu"){
								return;
							}

							if (money < level_money){
								bot.sendMessage(message.chat.id, "Non hai abbastanza monete!", back);
								return;
							}							

							connection.query('SELECT id FROM inventory WHERE item_id = ' + level[0] + ' AND player_id=' + from_id, function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0){
									bot.sendMessage(message.chat.id, "Non possiedi il primo oggetto richiesto.", back);
									return;
								}
								connection.query('SELECT id FROM inventory WHERE item_id = ' + level[1] + ' AND player_id=' + from_id, function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Non possiedi il secondo oggetto richiesto.", back);
										return;
									}
									connection.query('SELECT id FROM inventory WHERE item_id = ' + level[2] + ' AND player_id=' + from_id, function(err, rows, fields) {
										if (err) throw err;
										if (Object.keys(rows).length == 0){
											bot.sendMessage(message.chat.id, "Non possiedi il terzo oggetto richiesto.", back);
											return;
										}

										connection.query('UPDATE player SET house_id = house_id+1, money=money-' + level_money + ' WHERE id = ' + from_id, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(message.chat.id, "Potenziamento completato!", back);
										});

										connection.query('DELETE FROM inventory WHERE item_id = ' + level[0] + ' AND player_id = ' + from_id + ' LIMIT 1', function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('DELETE FROM inventory WHERE item_id = ' + level[1] + ' AND player_id = ' + from_id + ' LIMIT 1', function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('DELETE FROM inventory WHERE item_id = ' + level[2] + ' AND player_id = ' + from_id + ' LIMIT 1', function(err, rows, fields) {
											if (err) throw err;
										});
									});
								});
							});
						};
					});	
				});
			});
		});
	});
});

function attack(nickname, message, from_id, weapon_bonus, cost, source){
	connection.query('SELECT exp, ability, chat_id, heist_count, heist_limit, heist_protection, house_id, custom_name_h, id, money FROM player WHERE nickname = "' + nickname + '"', function(err, rows, fields) {
		if (err) throw err;
		var chat_id_nickname = rows[0].chat_id;
		var isMatch = source;

		/*
		if ((message.from.username != "fenix45") && (message.from.username != "Gaius87") && (message.from.username != "CH4R124RD")){
			bot.sendMessage(message.chat.id, "Manutenzione", back);
			return;
		}
		*/

		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Questo nickname non esiste, riprova.", back);
			return;
		}

		if ((nickname == "fenix45") || (nickname == "LastSoldier95")){
			bot.sendMessage(message.chat.id, "Dice il saggio: 'Campa cavallo sulla panca insieme alla capra facendo i cavolacci propri... In poche parole, fatti gli affari tuoi :>'", back);
			return;
		}

		var to_id = rows[0].id;
		var house_id = rows[0].house_id;
		var heist_count = parseInt(rows[0].heist_count);
		var heist_limit = parseInt(rows[0].heist_limit);
		var ability = parseInt(rows[0].ability);
		var custom_name_h = rows[0].custom_name_h;

		var match = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Matchmaking"],["Torna al menu"]]
			}
		};

		if (wanted == 0){
			if (rows[0].heist_protection != null){
				bot.sendMessage(message.chat.id, "Il bersaglio √® sotto protezione", match);
				return;
			}
			if (rows[0].money <= 0){
				bot.sendMessage(message.chat.id, "Il bersaglio ha poche monete, riprova cambiando giocatore.", match);
				return;				
			}

			if ((rows[0].exp <= 150) && (isMatch == 0)){
				bot.sendMessage(message.chat.id, "Il bersaglio ha poca esperienza, riprova cambiando giocatore.", match);
				return;
			}
		}

		connection.query('SELECT level, name, type FROM dragon WHERE player_id = ' + to_id, function(err, rows, fields) {
			if (err) throw err;

			var dragon_lev = 0;
			var dragon_name = "";

			if (Object.keys(rows).length > 0){
				dragon_lev = rows[0].level;
				dragon_name = rows[0].name + " " + rows[0].type;
			}

			connection.query('SELECT team.name FROM team_player, team WHERE team.id = team_player.team_id AND player_id = ' + to_id,  function(err, rows, fields) {
				if (err) throw err;

				var team_name = "-";

				if (wanted == 0){
					if (Object.keys(rows).length == 0){
						if (heist_limit >= 3){
							bot.sendMessage(message.chat.id, "Il bersaglio non possiede un team e ha raggiunto il limite di ispezioni subite. Riprova domani.", match);
							return;
						}
					}else{
						if (heist_limit >= 10){
							bot.sendMessage(message.chat.id, "Il bersaglio ha raggiunto il limite di ispezioni subite. Riprova domani.", match);
							return;
						}
						team_name = rows[0].name;
					}
				}

				if (isMatch == 1){
					connection.query('UPDATE player SET last_mm = ' + to_id + ' WHERE id = ' + from_id, function(err, rows, fields) {
						if (err) throw err;
					});
				}

				connection.query('SELECT name, rooms, grade FROM house WHERE id=' + house_id, function(err, rows, fields) {
					if (err) throw err;

					var house_name = rows[0].name;
					var grade = rows[0].grade;
					var rooms = rows[0].rooms;
					var iKeys = [];

					iKeys.push(["Invia Piedelesto"]);
					iKeys.push(["Invia Occhiofurbo"]);
					iKeys.push(["Invia Testacalda"]);
					iKeys.push(["Matchmaking (¬ß)"]);
					iKeys.push(["Torna al menu"]);

					var option = {
						parse_mode: "HTML",
						reply_markup: {
							resize_keyboard: true,
							//one_time_keyboard: true,
							"keyboard": iKeys
						}
					};

					connection.query('SELECT wanted_id FROM event_wanted_status WHERE player_id = ' + from_id, function(err, rows, fields) {
						if (err) throw err;

						var isWanted = 0;
						if (Object.keys(rows).length > 0){
							if (rows[0].wanted_id == to_id){
								isWanted = 1;
							}
						}

						connection.query('UPDATE player SET money = money-' + cost + ' WHERE id = ' + from_id, function(err, rows, fields) {
							if (err) throw err;
						});

						var dragon_text = "";
						if (dragon_lev > 0){
							dragon_text = " ed il drago üêâ <b>" + dragon_name + "</b> (" + dragon_lev + ") sorveglia la sua entrata";
						}

						if (custom_name_h != null){
							house_name = "Rifugio " + custom_name_h;
						}

						var text = "Stai per inviare uno gnomo servitore al rifugio di <b>" + nickname + "</b> (" + team_name + ") con abilit√† " + ability + ".\nAlloggia in un üèï <b>" + house_name + "</b> (" + house_id + ")" + dragon_text + ". Seleziona quale gnomo servitore vuoi inviare.";
						if (isWanted == 1){
							text = "Stai per inviare uno gnomo servitore alla cattura di <b>" + nickname + "</b>, seleziona quale gnomo esploratore vuoi inviare";
						}

						bot.sendMessage(message.chat.id, text, option).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {
								if ((answer.text == "Torna al menu") || (answer.text == "Matchmaking")){
									return;
								}

								var query = "";
								var method = 0;
								if (answer.text == "Invia Piedelesto"){
									method = 1;
								}else if (answer.text == "Invia Occhiofurbo"){
									method = 3;
								}else if (answer.text == "Invia Testacalda"){
									method = 2;
								}else{
									return;
								}

								//Secondi (massimo 6*600 + 100)
								var totTime = (grade*900);

								var rate = 50;

								if (method == 1){
									totTime = Math.round(totTime*0.6);
									rate = 40;
								}else if (method == 3){
									totTime = Math.round(totTime*1.2);
									rate = 60;
								}

								if (wanted == 1){
									totTime = Math.round(totTime/1.5);
								}

								if (crazyMode == 1){
									totTime = Math.round(totTime/2);
								}

								if (isWanted == 1){
									totTime = (Math.round(Math.random()*10+5)*method)*60;
								}

								var now = new Date();
								now.setSeconds(now.getSeconds() + totTime);
								var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());
								var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

								connection.query('INSERT INTO heist (from_id, to_id, datetime, rate1, grade, matchmaking) ' +
												 'VALUES (' + from_id + ',' + to_id + ',"' + long_date + '",' + rate + ',' + grade + ',' + isMatch + ')', function(err, rows, fields) {
									if (err) throw err;
									if (isWanted == 0){
										bot.sendMessage(message.chat.id, "Hai inviato il tuo gnomo esploratore all'ispezione del rifugio selezionato, torna alle " + short_date + " per risolvere i dilemma del rifugio ed ottenere una üóù", kb_heist);
									}else{
										bot.sendMessage(message.chat.id, "Hai inviato il tuo gnomo esploratore alla cattura del ricercato, torna alle " + short_date + " per scoprirne l'esito", kb_heist);
									}
								});
								connection.query('UPDATE player SET heist_count = heist_count+1 WHERE id = ' + from_id, function(err, rows, fields) {
									if (err) throw err;
								});
							};
						});
					});
				});
			});
		});
	});
}

function getRandomArbitrary(min, max) {
	return Math.random() * (max - min) + min;
}

bot.onText(/itinerario propizio|itinerari|regioni/i, function(message) {

	if (specialMission == 0){
		if (message.from.username != "fenix45"){
			return;
		}
	}

	var d = new Date();
	if ((d.getDay() != 6) && (d.getDay() != 0)){
		bot.sendMessage(message.chat.id, "Oggi l'evento non √® disponibile, torna nel weekend.", back);
		return;
	}

	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Il tuo account non √® stato trovato, usa /start per crearne uno nuovo.", back);
			return;
		}

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (rows[0].mission_special_id != 0){
			var time = new Date(rows[0].mission_special_time_end);
			bot.sendMessage(message.chat.id, "Sei in itinerario fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()), back);
			return;
		}

		if (rows[0].mission_id != 0){
			bot.sendMessage(message.chat.id, "Non puoi iniziare un itinerario finch√® sei in missione", abort_mission);
			return;
		}

		var player_id = rows[0].id;
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;
		var charm_id = rows[0].charm_id;
		var life = rows[0].life;		
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;
		var money = rows[0].money;
		var class_id = rows[0].class;
		var travel_id = rows[0].travel_id;
		var cave_id = rows[0].cave_id;

		if ((boost_mission <= 0) && (boost_id != 0)){
			connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				//console.log("BOOST_RESET: " + boost_id + " - " + boost_mission);
			});
			boost_mission = 0;
			boost_id = 0;
		}

		connection.query('SELECT * FROM rarity WHERE special_mission IS NOT NULL', function(err, rows, fields) {
			if (err) throw err;

			var iKeys = [];
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				iKeys.push([rows[i].special_mission + " (" + rows[i].shortname + ")"]);
			}

			iKeys.push(["Torna al menu"]);

			var kbRar = {
				parse_mode: "Markdown",
				reply_markup: {
					resize_keyboard: true,
					//one_time_keyboard: true,
					"keyboard": iKeys
				}
			};

			bot.sendMessage(message.chat.id, "*Itinerario Propizio*\nDurante la tua avventura hai trovato una *mappa* che indica con precisione tutti i carichi di merci che viaggiano nel mondo di Lootia" +
							" ed il loro contenuto, puoi recarti in quei luoghi e magari potresti trovare un oggetto tra quelli segnati, buona fortuna!\n\n" +
							"Seleziona la regione e segui un itinerario", kbRar).then(function() {
				answerCallbacks[message.chat.id] = function(answer) {

					if (answer.text == "Torna al menu"){
						return;
					}

					var reg4 = /\((.+)\)/i;
					var rar = answer.text.match(reg4);

					connection.query('SELECT * FROM mission_zone WHERE rarity = "' + rar[1] + '"', function(err, rows, fields) {
						if (err) throw err;

						var iKeys = [];
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							iKeys.push([rows[i].name + " (" + Math.round(rows[i].duration/60) + " minuti)"]);
						}

						iKeys.push(["Torna alle regioni"]);
						iKeys.push(["Torna al menu"]);

						var kbMiss = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": iKeys
							}
						};

						var missConf = {
							parse_mode: "Markdown",
							reply_markup: {
								resize_keyboard: true,
								//one_time_keyboard: true,
								"keyboard": [["Si"],["Torna agli itinerari"],["Torna al menu"]]
							}
						};

						bot.sendMessage(message.chat.id, "Seleziona la zona in cui iniziare un itinerario", kbMiss).then(function() {
							answerCallbacks[message.chat.id] = function(answer) {

								if ((answer.text == "Torna al menu") || (answer.text == "Torna alle regioni")){
									return;
								}

								var zn = answer.text.substring(0, answer.text.indexOf("(")-1);

								connection.query('SELECT * FROM mission_zone WHERE name = "' + zn + '"', function(err, rows, fields) {
									if (err) throw err;

									if (Object.keys(rows).length == 0){
										bot.sendMessage(message.chat.id, "Zona non valida", back);
										return;
									}

									var name = rows[0].name;
									var mission_id = rows[0].id;
									var duration = rows[0].duration;
									var mission_description = rows[0].description;
									var rarity = rows[0].rarity;
									var items = "";

									connection.query('SELECT item.name, item.rarity FROM mission_zone_item, item, mission_zone WHERE mission_zone_item.zone_id = mission_zone.id AND mission_zone.id = ' + mission_id + ' AND mission_zone_item.item_id = item.id', function(err, rows, fields) {
										if (err) throw err;

										for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
											items += "\n> " + rows[i].name + " (" + rows[i].rarity + ")";
										}

										if ((parseInt(life) <= 0) && (parseInt(exp) > 10)){
											bot.sendMessage(message.chat.id, "Non puoi affrontare gli itinerari da morto.", revive);
											return;
										}

										var parsedDate = new Date();
										var extra1 = "‚úÖ";
										var extra2 = "‚úÖ";

										if (charm_id == 60){ //Rapidit√†
											duration -= duration*0.05;
										}else if (charm_id == 187){
											duration -= duration*0.1;
										}else if (charm_id == 188){
											duration -= duration*0.15;
										}else{
											extra1 = "‚ùå";
										}
										if ((class_id == 3) && (reborn == 3)){
											duration -= (duration*0.05);
										}
										if ((class_id == 3) && (reborn >= 4)){
											duration -= (duration*0.1);
										}

										if (boost_id == 1){
											duration = duration/2;
											name = name + " (Velocizzata)";
										}else if ((boost_id == 0) || (boost_id == 3)){
											extra2 = "‚ùå";
										}

										parsedDate.setSeconds(parsedDate.getSeconds() + duration);

										bot.sendMessage(message.chat.id, "Iniziare l'itinerario nel " + name + "?\n\nTalismano Velocit√†: " + extra1 + "\nBevanda: " + extra2 + "\n\nOggetti trovabili in questo luogo:" + items, missConf).then(function() {
											answerCallbacks[message.chat.id] = function(answer) {
												if (answer.text.toLowerCase() == "si"){
													var mission_date = addZero(parsedDate.getHours()) + ":" + addZero(parsedDate.getMinutes()) + ":" + addZero(parsedDate.getSeconds());
													var description = mission_description.replace(new RegExp("%player%", "g"), message.from.username.replace(new RegExp("_", "g"), " "));
													var long_date = parsedDate.getFullYear() + "-" + addZero(parsedDate.getMonth()+1) + "-" + addZero(parsedDate.getDate()) + " " + addZero(parsedDate.getHours()) + ':' + addZero(parsedDate.getMinutes()) + ':' + addZero(parsedDate.getSeconds());
													bot.sendMessage(message.chat.id, "*" + name + "*\n" + message.from.username.replace(new RegExp("_", "g"), " ") + ", " + description + " " + mission_date + " _(" + toTime(duration) + ")_", back);

													connection.query('UPDATE `player` SET event=0,`mission_special_id`=' + mission_id + ',`chat_id`=' + message.chat.id + ', `mission_special_time_end`="' + long_date + '" WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
														if (err) throw err;
													});

													if (boost_id == 1){
														if (boost_mission-1 == 0){
															connection.query('UPDATE `player` SET boost_id = 0, boost_mission = 0 WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}else{
															connection.query('UPDATE `player` SET boost_mission = boost_mission - 1 WHERE id = ' + player_id, function (err, rows, fields) {
																if (err) throw err;
															});
														}
													}
													dailyChest(message, player_id);
												}
											};
										});
									});
								});
							};
						});
					});
				};
			});
		});
	});	
});

bot.onText(/missione/i, function(message) {
	connection.query('SELECT * FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			bot.sendMessage(message.chat.id, "Il tuo account non √® stato trovato, usa /start per crearne uno nuovo.", back);
			return;
		}

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		if (rows[0].mission_special_id != 0){
			var time = new Date(rows[0].mission_special_time_end);
			bot.sendMessage(message.chat.id, "Sei in itinerario fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()), back);
			return;
		}

		var player_id = rows[0].id;
		var boost_id = rows[0].boost_id;
		var boost_mission = rows[0].boost_mission;
		var charm_id = rows[0].charm_id;
		var life = rows[0].life;
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;
		var money = rows[0].money;
		var class_id = rows[0].class;

		if (player_id != 1){
			if ((class_id == 1) && (reborn >= 3)){
				bot.sendMessage(message.chat.id, "Raggiunta questa Rinascita la Vocazione √® obbligatoria, la puoi scegliere nella sezione Giocatore > Vocazione", back);
				return;
			}
		}

		helpMsg(message.chat.id, player_id, 2);

		if ((boost_mission <= 0) && (boost_id != 0)){
			connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
				//console.log("BOOST_RESET: " + boost_id + " - " + boost_mission);
			});
			boost_mission = 0;
			boost_id = 0;
		}

		if (parseInt(life) <= 0){
			if ((exp > 10) && (reborn == 1)){
				bot.sendMessage(message.chat.id, "Non puoi affrontare le missioni da morto.", revive);
				return;
			}else if (reborn > 1){
				bot.sendMessage(message.chat.id, "Non puoi affrontare le missioni da morto.", revive);
				return;
			}
		}

		if ((rows[0].travel_id != 0) || (rows[0].cave_id != 0)){
			bot.sendMessage(message.chat.id, "Non puoi andare in missione finch√® sei in viaggio.", back);
			return;
		}else{
			connection.query('SELECT mission_id, lore_page, lore_mission, mission_time_end, mission_auto_id FROM player WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;	
				var id = rows[0].mission_id;
				var time = new Date(rows[0].mission_time_end);
				var mission_auto = rows[0].mission_auto_id;
				var current = 0;
				var lore_page = rows[0].lore_page;
				var lore_mission = rows[0].lore_mission;

				connection.query('SELECT * FROM heist WHERE from_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;

					if (id != 0){
						bot.sendMessage(message.chat.id, "Sei in missione fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth()+1) + "/" + time.getFullYear(), abort_mission);
						return;
					}

					if ((lore_page == 1) && (lore_mission == 0)){
						var rand = Math.random()*100;
						if (rand < 5){
							var newDate = new Date();
							newDate.setHours(newDate.getHours() + 1);
							var mission_date = addZero(newDate.getHours()) + ":" + addZero(newDate.getMinutes()) + ":" + addZero(newDate.getSeconds());
							var description = "peregrini: furente, incoerente; rimbombo di passi; miraggio - rimbomba -, ora realt√†: e grigia √® la chioma, grigia la polvere d'un lungo itinerare, d'un vecchio, vetusto, che a lungo pot√© errare; e agli occhi l'effimero - strepita -, il sempiterno: o Lootia, te vide, di te volle scrivere, in te fu pregno. Giacque dunque la punta su un foglio, e di essa l'inchiostro grondante. Ma d'una tempesta si ode il crepito; langue, al suon della morte; fredda la quiete, prima del fremito. 'Al Tempio, al Tempio!', rimembri i canti, 'Al Tempo giocoso, a Spazi cangianti'. E rimbomba, o rimbomba, il suon dei suoi passi - quasi in un ballo in fa diesis minore -; urla la fenice, spirando la vita; a Un Nuovo Inizio sorge in albore." +
								"\nE s'aprir√† l'entrata al vecchio inchiostro di un possesso per sempre." +
								"\n\n...\n\nSilenzio.\n\n...\n\n" +
								"Ah, s√¨, ricevi anche un macabro omaggio e torni al Rifugio alle " + mission_date;
							var long_date = newDate.getFullYear() + "-" + addZero(newDate.getMonth()+1) + "-" + addZero(newDate.getDate()) + " " + addZero(newDate.getHours()) + ':' + addZero(newDate.getMinutes()) + ':' + addZero(newDate.getSeconds());
							connection.query('UPDATE `player` SET lore_mission = 1, event = 1, `mission_id` = 1001, `mission_time_end`="' + long_date + '" WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "<b>Polvere</b>\n" + message.from.username + ", " + description, abort_mission);
							});
							return;
						}
					}

					if (mission_auto == 0){
						mission_auto += 1;
					}

					connection.query('SELECT chest_id FROM mission_auto WHERE id = ' + mission_auto, function(err, rows, fields) {
						if (err) throw err;

						var chest_id = rows[0].chest_id;
						if (chest_id == 6){
							var rand = Math.random()*100;
							if (rand <= 30){
								chest_id = 7;
							}
						}

						var result = 0;
						if (chest_id != 7){
							var minTime = [0,600,1000,5200,9500,36000,85000];
							var maxTime = [0,900,3000,9400,23000,54000,93000];
							var stdev = [0,200,977,1787,6635,10220,3348];
							var media = [0,889,1822,6297,17252,47798,88004];

							var randx = 0;
							var randy = 1;
							var checkDuration = 0;

							while (randy > checkDuration){
								randx = getRandomArbitrary(minTime[chest_id], maxTime[chest_id]);
								randy = getRandomArbitrary(0, 1/Math.sqrt(2*stdev[chest_id]));
								checkDuration = (1/Math.sqrt(2*Math.PI*stdev[chest_id]))*Math.exp(-1/2*Math.pow((randx-media[chest_id])/stdev[chest_id]),2);
							}
							result = Math.round(randx);
						}else if (chest_id == 7){
							result = 172800;
						}

						var duration = result;

						connection.query('SELECT name, description, id As mission_id FROM mission WHERE chest_id = ' + chest_id + ' ORDER BY RAND()', function(err, rows, fields) {
							if (err) throw err;
							var dbDate = new Date;
							var parsedDate = new Date(Date.parse(dbDate));
							var name = rows[0].name;
							var mission_id = rows[0].mission_id;
							var mission_description = rows[0].description;

							var extra1 = "‚úÖ";
							var extra2 = "‚úÖ";

							if (charm_id == 60){
								duration = duration - (duration/100*5);
							}else if (charm_id == 187){
								duration = duration - (duration/100*10);
							}else if (charm_id == 188){
								duration = duration - (duration/100*15);
							}else if (charm_id == 697){
								duration = duration - (duration/100*20);
							}else{
								extra1 = "‚ùå";
							}
							if ((class_id == 3) && (reborn == 3)){
								duration -= (duration*0.05);
							}
							if ((class_id == 3) && (reborn >= 4)){
								duration -= (duration*0.1);
							}

							var newDate = new Date(parsedDate.getTime() + (1000 * duration));

							if (boost_id == 1){
								duration = duration/2;
								name = name + " (Velocizzata)";
								newDate = new Date(parsedDate.getTime() + (1000 * (Math.round(duration*100)/100)));
							}else if ((boost_id == 0) || (boost_id == 3) || (boost_id == 6)){
								extra2 = "‚ùå";
							}

							if (crazyMode == 1){
								duration = duration/2;
								name = name + " (FOLLE)";
								newDate = new Date(parsedDate.getTime() + (1000 * (Math.round(duration*100)/100)));
							}

							if (luckyMode == 1){
								name = name + " (FORTUNA?)";
							}

							connection.query('SELECT rarity_shortname FROM chest WHERE id = ' + chest_id, function(err, rows, fields) {
								if (err) throw err;

								var rarity_short = rows[0].rarity_shortname;
								if (rarity_short == "U"){
									rarity_short = "E";
								}

								bot.sendMessage(message.chat.id, "Iniziare la missione?\nRarit√† Scrigno: " + rarity_short + "\nTalismano Velocit√†: " + extra1 + "\nBevanda: " + extra2, yesno).then(function() {
									answerCallbacks[message.chat.id] = function(answer) {
										if (answer.text.toLowerCase() != "si"){
											return;
										}

										var mission_date = addZero(newDate.getHours()) + ":" + addZero(newDate.getMinutes()) + ":" + addZero(newDate.getSeconds());
										var description = mission_description.replace(new RegExp("%player%", "g"), message.from.username);
										var long_date = newDate.getFullYear() + "-" + addZero(newDate.getMonth()+1) + "-" + addZero(newDate.getDate()) + " " + addZero(newDate.getHours()) + ':' + addZero(newDate.getMinutes()) + ':' + addZero(newDate.getSeconds());

										bot.sendMessage(message.chat.id, "<b>" + name + "</b>\n" + message.from.username + ", " + description + " " + mission_date + " <i>(" + toTime(duration) + ")</i>", abort_mission);

										if ((mission_auto+1) > max_mission_id){
											mission_auto = 1;
										}else{
											mission_auto++;
										}

										connection.query('UPDATE `player` SET event = 0, `mission_id`=' + mission_id + ',`chat_id`=' + message.chat.id + ', mission_auto_id=' + mission_auto + ',`mission_time_end`="' + long_date + '" WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
											if (err) throw err;
										});

										if (boost_id == 1){
											if (boost_mission-1 == 0){
												connection.query('UPDATE `player` SET boost_id = 0, boost_mission = 0 WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											}else{
												connection.query('UPDATE `player` SET boost_mission = boost_mission - 1 WHERE id = ' + player_id, function (err, rows, fields) {
													if (err) throw err;
												});
											}
										}
										if (crazyMode == 1){
											if ((rarity_short == "L") || (rarity_short == "E")){
												connection.query('UPDATE `player` SET `gems`=gems+1 WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(message.chat.id, "FOLLE! Hai ricevuto una Gemma üíé!");
												});					
											}
										}

										dailyChest(message, player_id);
									};
								});
							});
						});
					});
				});
			});
		};
	});
});

function helpMsg(chat_id, player_id, type){
	connection.query('SELECT * FROM help_message WHERE player_id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length == 0){
			connection.query('INSERT INTO help_message (player_id, type_' + type + ') VALUES (' + player_id + ',1)', function(err, rows, fields) {
				if (err) throw err;
			});
		}else{
			var name = 'rows[0].type_' + type;
			if (eval(name) == 1){
				return;
			}
			connection.query('UPDATE help_message SET type_' + type + ' = 1 WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});
		}

		var text = "";
		switch (type){
			case 1:
				text = 	"*LE IMPRESE*\n\n" +
					"Le imprese sono degli obbiettivi giornalieri di tipi molto differenti, che vanno dalle missioni da completare, a viaggi, a oggetti da creare. Ogni impresa completata fornisce ¬ß e viene contata per un premio finale dopo un certo numero di completamenti. Le imprese vengono resettate ogni giorno a mezzanotte e non sono disponibili durante il weekend, a differenza degli eventi. Nella schermata principale inoltre viene visualizzata l'impresa che si √® prossimi a completare, cos√¨ da agevolarne l'ottenimento del premio. Infine per quanto riguarda i casi in cui un'impresa fosse riferita ad un oggetto, quest'ultimo verr√† visualizzato in questa sezione del men√π.";
				break;
			case 2:
				text = 	"*LE MISSIONI*\n\n" +
					"Le missioni sono uno dei tanti modi per ottenere oggetti nel bot, una volta iniziate √® sufficiente attendere il tempo specificato per ricevere automaticamente uno scrigno corrispondente alla rarit√† della stessa. Dopo aver ottenuto lo scrigno, recarsi nella sezione Scrigni del menu principale per aprirlo. Nelle missioni √® possibile ottenere bevande che offrono vari effetti come raddoppio delle monete o diminuzione del tempo di attesa. I Talismani e altri oggetti equipaggiabili possono influire nella missione. Si tratta di una delle funzioni fondamentali del gioco, svolgine il pi√π possibile!";
				break;
			case 3:
				text = "*I BOSS*\n\n" +
					"I boss sono dei temibili mostri affrontabili solamente in team, alla loro uccisione tutti ne otterrete monete e esperienza. E' possibili utilizzare diversi tipi di attacchi come il Leggero, il Pesante, gli Incantesimi e i Consumabili, considerando che il boss √® condiviso fra tutti i membri, √® necessario coordinarsi il pi√π possibile per sconfiggerli tutti e 20 e ottenere il premio finale. Tuttavia se ti trovi ad un livello basso, √® sconsigliato lanciarsi anche contro i boss pi√π deboli.";
				break;
			case 4:
				text = "*IL TEAM*\n\n" +
					"I team sono dei gruppi di giocatori utili a ottenere pi√π monete e affrontare i boss per ottenere exp, √® possibile anche creare dei sotto team, dette accademie. La partecipazione e la collaborazione √® importante per abbattere tutti i boss e scalare la classifica.";
				break;
			case 5:
				text = "*IL DRAGO*\n\n" +
					"Il drago √® il tuo fedele compagno di avventure, pu√≤ nascere con 6 pietre di diverso tipo ottenute dalle cave dal livello 10, una volta nato √® necessario dargli da mangiare per farlo crescere e ottenere pi√π bonus in battaglia e nei viaggi, come l'aumento del danno e la riduzione dei tempi di attesa, come la produzione continua di bevande grazie ai suoi poteri. Inoltre √® utile negli eventi e nella difesa del rifugio.";
				break;
			case 6:
				text = "*IL NEGOZIO*\n\n" +
					"Nel negozio √® possibile acquistare Pozioni, Scrigni o Piume di Fenice, oppure vendere qualsiasi oggetto a prezzo base, tramite la funzione Ricicla invece √® possibile convertire 5 oggetti uguali in un altro oggetto della stessa rarit√† oppure della rarit√† successiva.";
				break;
			case 7:
				text = "*IL MERCATO*\n\n" +
					"Il mercato √® il luogo in cui si possono incontrare mercanti che vendono oggetti a buon prezzo, oppure regalarne. Da qui puoi seguire il link per entrare nel gruppo apposito e commerciare in gran quantit√†. Il Mercante Pazzo mette a disposizione dei pacchetti di oggetti a buon prezzo ogni giorno, ricorda di darci un'occhiata!";
				break;
			case 8:
				text = "*IL GIOCATORE*\n\n" +
					"In questa sezione trovi tutte le informazioni sul tuo giocatore, oppure su quelle del giocatore che stai spiando, in base al livello del tuo rifugio ti vengono rivelate pi√π informazioni sul bersaglio. Attraverso i pulsanti di Statistiche puoi visualizzare altre informazioni sulla tua avventura, se non visualizzi ancora il drago, visita l'apposita sezione dal men√π principale per ottenere altre informazioni. Ecco una descrizione per ogni voce:\n\nGiocatore üë§\nOgni simbolo sta ad indicare la tua esperienza e la tua RINASCITA\nüîÖ Rinascita 0 \nüîÜ Rinascita 1\nüí´ Rinascita 2\nüî± Rinascita 3\n‚öúÔ∏è Rinascita 4\nüèπ La tua vocazione, una volta scelta non sar√† possibile cambiarla!\nüíé Le Gemme in tuo possesso\nüí∞ I soldi in tuo possesso\n‚ù§Ô∏è La tua vita, attuale e totale\nüì¶ I punti creazione che hai realizzato fin'ora, tra parentesi quelli settimanali\n\nEquipaggiamento ‚öîÔ∏è\nüó° La tua fedelissima arma\nü•ã La tua armatura\nüõ° Il tuo scudo\nüìø Il talismano che indossi\nüí• Il range del tuo danno base\n\nüêâ Il migliore amico del giocatore, il tuo draghetto!\nüí± Informazioni sulla tua abilit√† nelle ispezioni, il tuo rango e una piccola descrizione personale";
				break;
			case 9:
				text = "*LA MODALITA' VACANZA*\n\n" +
					"Puoi attivare la modalit√† vacanza per essere protetto dalle ispezioni durante un periodo in cui non giochi, essa si attiva automaticamente se non giochi per un lungo periodo di tempo cos√¨ da non diventare preda facile. La durata minima √® 2 settimane durante le quali non potrai effettuare alcuna azione nel bot. Procedi con cautela.";
				break;
					}
		bot.sendMessage(chat_id, text, mark);
	});
}

bot.onText(/^imprese/i, function(message) {

	if (message.text.toLowerCase().indexOf("completate") != -1){
		return;
	}

	connection.query('SELECT id, account_id, achievement_count, dungeon_count, mission_count, craft_count, exp, reborn FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var player_id = rows[0].id;
		var cnt = rows[0].achievement_count;
		var lev = Math.floor(rows[0].exp/10);
		var mission_count = rows[0].mission_count;
		var dungeon_count = rows[0].dungeon_count;
		var craft_count = rows[0].craft_count;
		var reb = rows[0].reborn;

		helpMsg(message.chat.id, player_id, 1);
		setAchievementProgress(player_id, 1);

		connection.query('SELECT SUM(value) As globalVal FROM achievement_global', function(err, rows, fields) {
			if (err) throw err;

			var globalVal = rows[0].globalVal;
			if (globalVal == null){
				globalVal = 0;
			}

			connection.query('SELECT global_eventon, global_eventwait, global_cap FROM config', function (err, rows, fields){
				if (err) throw err;

				var global = rows[0].global_eventon;
				var globalw = rows[0].global_eventwait;
				var global_cap = rows[0].global_cap;

				connection.query('SELECT L.name, L.det, L.value, L.reward, L.type, S.progress, I.name As itemName FROM achievement_daily D INNER JOIN achievement_list L ON D.achievement_id = L.id LEFT JOIN achievement_status S ON S.achievement_id = D.achievement_id AND S.player_id = ' + player_id + ' LEFT JOIN item I ON D.item_id = I.id', function(err, rows, fields) {
					if (err) throw err;
					var text = "*Imprese giornaliere*\n";
					if (Object.keys(rows).length > 0){
						for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
							if (rows[i].progress == null){
								rows[i].progress = 0;
							}
							if (rows[i].type == 12){
								rows[i].name += " (" + rows[i].itemName + ")";
							}
							if (rows[i].progress >= rows[i].value){
								text += "> *" + rows[i].name + "*: " + formatNumber(rows[i].reward) + " ¬ß ottenuti ‚úÖ \n";
							}else{
								text += "> *" + rows[i].name + "*: " + formatNumber(rows[i].progress) + "/" + formatNumber(rows[i].value) + " " + rows[i].det + " (" + formatNumber(rows[i].reward) + " ¬ß)\n";
							}
						}
					}else{
						text += "Oggi non sono disponibili imprese giornaliere :(\n";
					}

					text += "\n*Imprese complessive*\n";

					var end = 0;
					for (var i = 0, len = Object.keys(progLev).length; i < len; i++) {
						if (getRealLevel(reb, lev) >= progLev[i]){
							end = (i+1);
						}
					}
					if (progLev[end] == undefined){
						text += "Imprese per livello completate\n";
					}else{
						text += "Livello " + getRealLevel(reb, lev) + " su " + progLev[end] + " totali (" + formatNumber(progLevRew[end]) + " ¬ß)\n";
					}

					end = 0;
					for (var i = 0, len = Object.keys(progMis).length; i < len; i++) {
						if (mission_count >= progMis[i]){
							end = (i+1);
						}
					}
					if (progMis[end] == undefined){
						text += "Imprese per missioni completate\n";
					}else{
						text += mission_count + " su " + progMis[end] + " missioni completate (" + formatNumber(progMisRew[end]) + " ¬ß)\n";
					}

					end = 0;
					for (var i = 0, len = Object.keys(progDung).length; i < len; i++) {
						if (dungeon_count >= progDung[i]){
							end = (i+1);
						}
					}
					if (progDung[end] == undefined){
						text += "Imprese per dungeon completate\n";
					}else{
						text += dungeon_count + " su " + progDung[end] + " dungeon completati (" + formatNumber(progDungRew[end]) + " ¬ß)\n";
					}

					end = 0;
					for (var i = 0, len = Object.keys(progCraft).length; i < len; i++) {
						if (craft_count >= progCraft[i]){
							end = (i+1);
						}
					}
					if (progCraft[end] == undefined){
						text += "Imprese di creazione completate\n";
					}else{
						text += craft_count + " su " + progCraft[end] + " punti creazione (" + formatNumber(progCraftRew[end]) + " ¬ß)\n";
					}

					var time_start = new Date("2017-09-22 12:00:00");
					var now = new Date();
					var diffD = Math.floor(((now - time_start)/1000)/60/60/24);	
					var diffH = Math.floor(((now - time_start)/1000)/60/60);	
					diffD = Math.abs(diffD);
					diffH = Math.abs(diffH);
					var diff = "";
					if (diffD < 2){
						diff = diffH + " ore";
					}else{
						diff = diffD + " giorni";
					}

					text += "\n*Impresa globale*\n";
					if (globalVal >= global_cap){
						text += "Impresa completata! Se hai partecipato all'impresa, riceverai una ricompensa!\n";
					}else{
						if (globalw == 0)
							text += "Completamento: *" + formatNumber(globalVal) + "*/*" + formatNumber(global_cap) + "* stanze dungeon completate\nTempo rimanente: *" + diff + "*\n";
						else
							text += "L'impresa globale sta raccogliendo dati e sar√† disponibile a breve\n";
					}
					bot.sendMessage(message.chat.id, text + "\n*Imprese giornaliere completate*: " + cnt, back);
				});
			});
		});
	});
});

function getRealLevel(reb, lev){
	if (reb == 2){
		lev += 100;
	}
	if (reb == 3){
		lev += 100;
		lev += 150;
	}
	if (reb == 4){
		lev += 100;
		lev += 150;
		lev += 200;
	}
	if (reb == 5){
		lev += 100;
		lev += 150;
		lev += 200;
		lev += 300;
	}
	return lev;
}

function getLevel(lev){
	var reb = 0;
	if (lev >= 750){
		lev -= 100;
		lev -= 150;
		lev -= 200;
		lev -= 300;
		reb = 5;
	}else if (lev >= 450){
		lev -= 100;
		lev -= 150;
		lev -= 200;
		reb = 4;
	}else if (lev >= 250){
		lev -= 100;
		lev -= 150;
		reb = 3;
	}else if (lev >= 100){
		lev -= 100;
		reb = 2;
	}
	return lev + " R" + (reb-1);
}

bot.onText(/^vacanza/i, function(message) {
	var iKeys = [];
	connection.query('SELECT account_id, holiday, id FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}

		var holiday = rows[0].holiday;
		var player_id = rows[0].id;
		var btn = "Avvia Modalit√† Vacanza";

		helpMsg(message.chat.id, player_id, 9);

		if (holiday != 0){
			btn = "Disattiva Modalit√† Vacanza";
		}

		var kb = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [[btn],["Torna al menu"]]
			}
		};

		bot.sendMessage(message.chat.id, "Puoi entrare in modalit√† vacanza quando sai di non riuscire ad accedere al gioco per lungo tempo, non vuoi essere Ispezionato o espulso dal team.\nDurante questo periodo non potrai effettuare alcuna operazione se non di visualizzazione. *La durata minima √® 2 settimane*, quando vuoi disattivarla dopo questo periodo torna su questa pagina e clicca Disattiva Modalit√† Vacanza.",kb).then(function() {
			answerCallbacks[message.chat.id] = function(answer) {
				if (answer.text == "Avvia Modalit√† Vacanza"){
					var now = new Date();
					now.setDate(now.getDate()+14);
					var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

					var now2 = new Date();
					now2.setDate(now2.getDate()+365);
					var long_date2 = now2.getFullYear() + "-" + addZero(now2.getMonth()+1) + "-" + addZero(now2.getDate()) + " " + addZero(now2.getHours()) + ':' + addZero(now2.getMinutes()) + ':' + addZero(now2.getSeconds());

					bot.sendMessage(message.chat.id, "Sei sicuro? Non potrai annullare la modalit√† per due settimane!", yesno).then(function() {
						answerCallbacks[message.chat.id] = function(answer) {
							if (answer.text.toLowerCase() == "si"){
								connection.query('INSERT INTO holiday (player_id, time_end) VALUES (' + player_id + ',"' + long_date + '")', function(err, rows, fields) {
									if (err) throw err;
									connection.query('UPDATE player SET holiday = 1, heist_protection = "' + long_date2 + '" WHERE id = ' + player_id, function (err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(message.chat.id, "Hai attivato la modalit√† vacanza!", back);
									});
								});
							}
						};
					});
				}else if (answer.text == "Disattiva Modalit√† Vacanza"){
					if (holiday == 0){
						bot.sendMessage(message.chat.id, "Non sei in vacanza!", back);
						return;
					}

					connection.query('SELECT time_end FROM holiday WHERE player_id = ' + player_id, function (err, rows, fields) {					
						if (err) throw err;

						var now = new Date();
						var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

						if (rows[0].time_end > long_date){
							var now = new Date(rows[0].time_end);
							var long_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds()) + " del " + addZero(now.getDate()) + "/" + addZero(now.getMonth()+1) + "/" + now.getFullYear();
							bot.sendMessage(message.chat.id, "Non puoi ancora tornare dalla vacanza, devi aspettare fino alle " + long_date + "!", back);
							return;
						}

						connection.query('UPDATE player SET holiday = 0, heist_protection = NULL WHERE id = ' + player_id, function (err, rows, fields) {
							if (err) throw err;
							connection.query('DELETE FROM holiday WHERE player_id = ' + player_id, function (err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(message.chat.id, "Hai disattivato la modalit√† vacanza!", back);
							});
						});
					});
				}
			};
		});
	});
});

bot.onText(/viaggi/i, function(message) {

	var iKeys = [];

	connection.query('SELECT mission_special_id, mission_special_time_end, mission_id, id, reborn, exp, life, account_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;

		var account_id = (rows[0].account_id).toString();
		if (banlist_id.indexOf(account_id) != -1){
			var text = "Il tuo account √® stato *bannato* per il seguente motivo: _" + banlist_tx[banlist_id.indexOf(account_id)] + "_";
			bot.sendMessage(message.chat.id, text, mark);
			return;
		}
		if (rows[0].holiday == 1){
			bot.sendMessage(message.chat.id, "Sei in modalit√† vacanza!", back)
			return;
		}

		var lev = rows[0].exp/10;
		var life = rows[0].life;
		var exp = rows[0].exp;
		var reborn = rows[0].reborn;
		var player_id = rows[0].id;

		if ((life <= 0) && (exp > 10)){
			bot.sendMessage(message.chat.id, "Non puoi affrontare i viaggi da morto.", revive);
			return;
		}

		if (rows[0].mission_id != 0){
			bot.sendMessage(message.chat.id, "Non puoi andare in viaggio finch√® sei in missione.", back);
			return;
		}else{

			connection.query('SELECT * FROM event_mana_status WHERE player_id = ' + player_id, function(err, rows, fields) {
				if (err) throw err;

				if (Object.keys(rows).length > 0){
					if (rows[0].zone_id != 0){
						bot.sendMessage(message.chat.id, "Non puoi andare in viaggio finch√® sei in miniera.", back);
						return;
					}
				}

				connection.query('SELECT travel_id, travel_time_end, cave_id, cave_time_end, id, boost_id, boost_mission, charm_id FROM player WHERE nickname="' + message.from.username + '"', function(err, rows, fields) {
					if (err) throw err;
					var player_id = rows[0].id;
					var boost_id = rows[0].boost_id;
					var boost_mission = rows[0].boost_mission;
					var charm_id = rows[0].charm_id;

					if (rows[0].travel_id != 0){
						var time = new Date(rows[0].travel_time_end);
						bot.sendMessage(message.chat.id, "Sei in viaggio fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth()+1) + "/" + time.getFullYear(), abort_travel);
						return;
					}else if (rows[0].cave_id != 0){
						var time = new Date(rows[0].cave_time_end);
						bot.sendMessage(message.chat.id, "Sei in viaggio fino alle " + addZero(time.getHours()) + ":" + addZero(time.getMinutes()) + ":" + addZero(time.getSeconds()) + " del " + addZero(time.getDate()) + "/" + addZero(time.getMonth()+1) + "/" + time.getFullYear(), abort_travel_2);
						return;
					}else{
						var extra = "SELECT name, duration FROM cave UNION ALL ";
						if ((lev < 10) && (reborn == 1)){
							extra = "";
						}

						connection.query('SELECT * FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							var dragon_boost = 0;
							var dragon_level = 0;
							var text = "";

							if (Object.keys(rows).length > 0){
								dragon_level = rows[0].level;
								if (dragon_level >= 50){
									dragon_level = 50;
								}
								dragon_boost = 1;
								text = " Il drago velocizza i tuoi viaggi.";
							}

							connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 15', function(err, rows, fields) {
								if (err) throw err;

								var abBonus = 0;
								var double = 0;
								if (Object.keys(rows).length > 0){
									var rand = Math.random()*100;
									abBonus = parseInt(rows[0].ability_level)*rows[0].val;
									if (rand < abBonus){
										double = 1;
									}
								}

								connection.query(extra + 'SELECT name, duration FROM travel', function(err, rows, fields) {
									if (err) throw err;
									for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
										if (dragon_boost == 1){
											iKeys.push(["Viaggia a " + rows[i].name + " (" + Math.floor(rows[i].duration-(rows[i].duration*dragon_level/100)) + " ore)"]);								
										}else{
											iKeys.push(["Viaggia a " + rows[i].name + " (" + rows[i].duration + " ore)"]);
										}
									}
									if (Object.keys(iKeys).length > 0){
										iKeys.push(["Torna al menu"]);
										var viaggio = "";

										var kb = {
											parse_mode: "Markdown",
											reply_markup: {
												resize_keyboard: true,
												//one_time_keyboard: true,
												"keyboard": iKeys
											}
										};

										if (message.text.indexOf("Viaggia a") != -1){
											viaggio = message.text.substring(getPosition(message.text," ",2)+1);

											var pos = viaggio.indexOf("(");
											if (pos != -1){
												viaggio = viaggio.substr(0, pos-1);
											}

											if ((boost_id == 3) && (boost_mission <= 0)){
												connection.query('UPDATE player SET boost_id = 0 AND boost_mission = 0 WHERE id = ' + player_id, function(err, rows, fields) {
													if (err) throw err;
												});
												boost_id = 0;
											}

											var boost_text = "";

											if (viaggio.indexOf("Cava") != -1){						
												boost_text = "\nBevanda: ‚ùå";
												if ((boost_id == 3) && (boost_mission > 0)){
													boost_text = "\nBevanda: ‚úÖ";
												}
												if ((charm_id == 603) || (charm_id == 695)){
													boost_text += "\nTalismano bonus pietre: ‚úÖ";
												}else{
													boost_text += "\nTalismano bonus pietre: ‚ùå";
												}											
											}

											bot.sendMessage(message.chat.id, "Iniziare il viaggio?" + boost_text, yesno).then(function() {
												answerCallbacks[message.chat.id] = function(answer) {
													var resp = answer.text;
													if (resp.toLowerCase() != "si"){
														return;
													}
													var cavepos = viaggio.indexOf("Cava");
													if (cavepos != -1){
														if ((exp < 100) && (reborn == 1)){
															bot.sendMessage(message.chat.id, "Non puoi viaggiare in cava fino al livello 10.", back);
															return;
														}

														connection.query('SELECT * FROM cave WHERE name = "' + viaggio + '"', function(err, rows, fields) {
															if (err) throw err;
															if (Object.keys(iKeys).length == 0){
																bot.sendMessage(message.chat.id, "Cava non valida.", back);
																return;
															}else{

																if (double == 1){
																	rows[0].duration = Math.round(rows[0].duration/2);
																}

																var dbDate = new Date();
																var parsedDate = new Date(Date.parse(dbDate));
																var newDate = new Date(parsedDate.getTime() + (1000*60*60*Math.floor(rows[0].duration-(rows[0].duration*dragon_level/100))));
																var short_date = addZero(newDate.getDate()) + "/" + addZero(newDate.getMonth()+1) + "/" + newDate.getFullYear() + " alle " + addZero(newDate.getHours()) + ":" + addZero(newDate.getMinutes()) + ":" + addZero(newDate.getSeconds());

																var long_date = newDate.getFullYear() + "-" + addZero(newDate.getMonth()+1) + "-" + addZero(newDate.getDate()) + " " + addZero(newDate.getHours()) + ':' + addZero(newDate.getMinutes()) + ':' + addZero(newDate.getSeconds());

																bot.sendMessage(message.chat.id, "*" + rows[0].name + "*\n" + message.from.username.replace(new RegExp("_", "g"), " ") + ", ti aspetta un esplorazione di _" + Math.floor(rows[0].duration-(rows[0].duration*dragon_level/100)).toString() + " ore_ nella " + viaggio + " che terminer√† il " + short_date, abort_travel_2);

																connection.query('UPDATE `player` SET `exp`=exp+1,`cave_id`=' + rows[0].id + ',`chat_id`=' + message.chat.id + ',`cave_time_end`="' + long_date + '" WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
																	if (err) throw err;
																});
															}
														});
													}else{
														connection.query('SELECT * FROM travel WHERE name = "' + viaggio + '"', function(err, rows, fields) {
															if (err) throw err;
															if (Object.keys(rows).length == 0){
																bot.sendMessage(message.chat.id, "Viaggio non valido.", back);
																return;
															}else{

																if (double == 1){
																	rows[0].duration = Math.round(rows[0].duration/2);
																}

																var dbDate = new Date();
																var parsedDate = new Date(Date.parse(dbDate));
																var newDate = new Date(parsedDate.getTime() + (1000*60*60*Math.floor(rows[0].duration-(rows[0].duration*dragon_level/100))));
																var short_date = addZero(newDate.getDate()) + "/" + addZero(newDate.getMonth()+1) + "/" + newDate.getFullYear() + " alle " + addZero(newDate.getHours()) + ":" + addZero(newDate.getMinutes()) + ":" + addZero(newDate.getSeconds());	
																var long_date = newDate.getFullYear() + "-" + addZero(newDate.getMonth()+1) + "-" + addZero(newDate.getDate()) + " " + addZero(newDate.getHours()) + ':' + addZero(newDate.getMinutes()) + ':' + addZero(newDate.getSeconds());

																bot.sendMessage(message.chat.id, "*" + rows[0].name + "*\n" + message.from.username.replace(new RegExp("_", "g"), " ") + ", ti aspetta un viaggio di _" +  Math.floor(rows[0].duration-(rows[0].duration*dragon_level/100)).toString() + " ore_, " + rows[0].description + " " + short_date, abort_travel);
																connection.query('UPDATE `player` SET `exp`=exp+1,`travel_id`=' + rows[0].id + ',`chat_id`=' + message.chat.id + ',`travel_time_end`="' + long_date + '" WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
																	if (err) throw err;
																});
															}
														});
													}
												};
											});
											return;
										};
										bot.sendMessage(message.chat.id, "Seleziona il viaggio da intraprendere." + text + "\nAttenzione: iniziando il viaggio non potrai far missioni o affrontare i boss.", kb);
									}
								});
							});
						});
					}
				});	
			});
		}
	});
});


//FUNZIONI

function refreshBosses(){
	connection.query('SELECT id FROM team WHERE boss_respawn < NOW() AND boss_respawn IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			var team_id = rows[0].id;
			connection.query('SELECT id, team_id, boss_id FROM boss_team WHERE team_id = ' + team_id, function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length > 0){
					rows.forEach(respawnBoss);
				}
				console.log("Respawn boss per team " + rows[0].team_id);
			});

			connection.query('SELECT player_id, chat_id FROM `team_player`, player WHERE team_player.player_id = player.id AND team_id = ' + team_id + ' ORDER BY team_player.id', function(err, rows, fields) {
				if (err) throw err;

				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					bot.sendMessage(rows[i].chat_id, "I boss sono tornati in vita, torna a combattere!");
				}
			});
		}
	});
}

function respawnBoss(element, index, array){

	if (element.boss_id == 1){
		connection.query('UPDATE boss_team SET life = total_life, killedby = "", killeddate = NULL, unlocked = 1 WHERE id = ' + element.id, function(err, rows, fields) {
			if (err) throw err;
		});	
	}else{
		connection.query('UPDATE boss_team SET life = total_life, killedby = "", killeddate = NULL, unlocked = 0 WHERE id = ' + element.id, function(err, rows, fields) {
			if (err) throw err;
		});
	}
	connection.query('UPDATE team SET boss_respawn = NULL, boost_id = 0 WHERE id = ' + element.team_id, function(err, rows, fields) {
		if (err) throw err;
	});
	connection.query('DELETE FROM boss_damage WHERE team_id = ' + element.team_id, function(err, rows, fields) {
		if (err) throw err;
	});
	connection.query('UPDATE player P INNER JOIN team_player T ON P.id = T.player_id SET P.boss_id = 0 WHERE T.team_id = ' + element.team_id, function(err, rows, fields) {
		if (err) throw err;
	});
}

function respawnBossMan(team_id){
	connection.query('SELECT id, team_id, boss_id FROM boss_team WHERE team_id = ' + team_id, function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (rows[i].boss_id == 1){
					connection.query('UPDATE boss_team SET life = total_life, killedby = "", killeddate = NULL, unlocked = 1 WHERE id = ' + rows[i].id, function(err, rows, fields) {
						if (err) throw err;
					});	
				}else{
					connection.query('UPDATE boss_team SET life = total_life, killedby = "", killeddate = NULL, unlocked = 0 WHERE id = ' + rows[i].id, function(err, rows, fields) {
						if (err) throw err;
					});
				}
			};
			connection.query('UPDATE team SET boss_respawn = NULL, boost_id = 0 WHERE id = ' + team_id, function(err, rows, fields) {
				if (err) throw err;
			});
			connection.query('DELETE FROM boss_damage WHERE team_id = ' + team_id, function(err, rows, fields) {
				if (err) throw err;
			});
			connection.query('UPDATE player P INNER JOIN team_player T ON P.id = T.player_id SET P.boss_id = 0 WHERE T.team_id = ' + team_id, function(err, rows, fields) {
				if (err) throw err;
			});
		};
	});
}

function refreshLife(){
	connection.query('UPDATE player SET life = total_life, paralyzed = 0', function(err, rows, fields) {
		if (err) throw err;
		console.log(getNow("it") + " Vita resettata.");
	});
	connection.query('DELETE FROM daily_chest', function(err, rows, fields) {
		if (err) throw err;
		console.log(getNow("it") + " Scrigni giornalieri resettati.");
	});
	connection.query('UPDATE merchant_offer SET day_cnt = 0', function(err, rows, fields) {
		if (err) throw err;
		console.log(getNow("it") + " Contrabbandiere resettato.");
	});
}

function checkDragonSleep(){
	connection.query('SELECT player.chat_id, dragon.id, dragon.name, dragon.sleep_h, dragon.total_life FROM dragon, player WHERE dragon.player_id = player.id AND sleep_time_end < NOW() AND sleep_time_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + " 1 drago svegliato");
			}else{
				console.log(getNow("it") + " " + Object.keys(rows).length + " draghi svegliati");
			}
			rows.forEach(setDragonSleep);
		}
	});
};

function setDragonSleep(element, index, array){
	var sleep_h = element.sleep_h;
	var life = Math.round(element.total_life/100*(sleep_h*10));
	var chat_id = element.chat_id;

	connection.query('UPDATE dragon SET sleep_time_end = NULL, sleep_h = 0, life = ' + life + ' WHERE id = ' + element.id, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "Il tuo drago si √® risvegliato dopo aver recuperato il " + (sleep_h*10) + "% della salute!");
	});
};

function checkDragonTopCd(){
	connection.query('SELECT player.chat_id, dragon_top_status.id FROM dragon_top_status, player WHERE dragon_top_status.player_id = player.id AND wait_time < NOW() AND wait_time IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + " 1 drago timeout vetta");
			}else{
				console.log(getNow("it") + " " + Object.keys(rows).length + " draghi timeout vetta");
			}
			rows.forEach(setDragonTopCd);
		}
	});
};

function setDragonTopCd(element, index, array){
	var chat_id = element.chat_id;

	connection.query('UPDATE dragon_top_status SET wait_time = NULL WHERE id = ' + element.id, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "Il drago pu√≤ tornare a combattere!");
	});
};

function checkTeam(){
	connection.query('SELECT id, chat_id FROM player WHERE team_time < NOW() AND team_time IS NOT NULL', function(err, rows, fields) {
		var chat_id = 0;
		var id = 0;
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				chat_id = rows[i].chat_id;
				id = rows[i].id;

				bot.sendMessage(chat_id, "E' scaduto il tempo di attesa per accedere ad un nuovo team!");

				connection.query('UPDATE player SET team_time = NULL WHERE id = ' + id, function(err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
	connection.query('SELECT id, chat_id FROM player WHERE boss_time < NOW() AND boss_time IS NOT NULL', function(err, rows, fields) {
		var chat_id = 0;
		var id = 0;
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				chat_id = rows[i].chat_id;
				id = rows[i].id;

				connection.query('UPDATE player SET boss_time = NULL WHERE id = ' + id, function(err, rows, fields) {
					if (err) throw err;
				});
			}
		}
	});
};

function checkEvents(){
	connection.query('SELECT * FROM `player` WHERE event = 0 AND mission_id != 0 AND money > 500 AND exp > 100 ORDER BY RAND() LIMIT 10', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + " 1 evento da notificare");
			}else{
				console.log(getNow("it") + " " + Object.keys(rows).length + " eventi da notificare");
			}
			rows.forEach(setEvents);
		}
	});
}

function setEvents(element, index, array){
	var player_id = 0;
	var chat_id = 0;
	var level = 0;
	var rand = 0;
	var text = "";
	var itemName = "";
	var itemName2 = "";
	var itemName3 = "";
	var chat_id_t = 0;
	var money = 0;

	rand = Math.round(Math.random()*46);

	if (crazyMode == 1){
		rand = Math.round(Math.random()*50);
	}

	player_id = element.id;
	boss_id = element.boss_id;
	chat_id = element.chat_id;
	level = element.exp/10;
	exp = element.exp;
	money = element.money;

	//console.log(player_id, rand, chat_id);
	if (rand == 0){
		connection.query('SELECT item.id, item.name, item.rarity FROM `item` WHERE item.rarity IN ("C", "NC") AND item.craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			connection.query('INSERT INTO inventory  (player_id, item_id) VALUES(' + player_id + ', ' + rows[0].id + ')', function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione hai incontrato un mercante, che con la sua immensa ed incredibile gentilezza ti lascia un dono per il tuo grande coraggio, ti ha regalato un " + itemName;
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 1){
		var damage = Math.round(Math.random()*(exp*3))+1;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione un mostro ti ha attaccato alle spalle e ti ha tolto " + damage + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 2){
		var damage = Math.round(Math.random()*(exp*2))+1;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione una trappola ti ha sorpreso e hai perso " + damage + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 3){
		var value = Math.round(Math.random()*(exp*5))+1;
		if (money - value <= 0){
			return;
		}
		if (value <= 0){
			value == 0;
		}
		connection.query('UPDATE player SET money = money - ' + value + ' WHERE player.id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione un ladro ti ha spintonato e rubato " + value + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 4){
		var value = Math.round(Math.random()*(exp))+50;
		if (money - value <= 0){
			value = 1;
		}
		connection.query('UPDATE player SET money = money - ' + value + ' WHERE player.id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione incontri un uomo bisognoso, decidi di donargli " + value + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 5){
		var value = Math.round(Math.random()*(exp*2))+10;
		connection.query('UPDATE player SET money = money + ' + value + ' WHERE player.id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione trovi un sacchetto pieno d'oro, ottieni cos√¨ " + value + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 6){
		connection.query('SELECT life, total_life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var value = Math.round(Math.random()*(rows[0].total_life/5))+10;

			connection.query('UPDATE player SET life = life + ' + value + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione ti imbatti in un piccolo villaggio e recuperi " + value + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 7){
		connection.query('SELECT item.id, item.name, item.rarity FROM `item` WHERE item.rarity IN ("C", "NC") AND item.craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			connection.query('INSERT INTO inventory  (player_id, item_id) VALUES(' + player_id + ', ' + rows[0].id + ')', function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione salvi un bambino dai manigoldi del villaggio, e ricevi come ricompensa " + itemName;
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 8){
		var value = Math.round(Math.random()*(exp/4))+15;
		connection.query('UPDATE player SET life = life + ' + value + ' WHERE player.id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			text = "Durante una missione ricevi una bevanda rigenerante, grazie ad essa recuperi " + value + " hp";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 9){
		connection.query('SELECT item.id, item.name, item.rarity FROM `item` WHERE item.rarity IN ("NC","R") AND item.craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			connection.query('INSERT INTO inventory  (player_id, item_id) VALUES(' + player_id + ', ' + rows[0].id + ')', function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione trovi un piccolo scrigno che potrebbe contentere qualcosa di interessante, lo apri e trovi " + itemName;
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 10){
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() - 10);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione trovi una scorciatoia, risparmi cos√¨ 10 minuti";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 11){
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 10);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione ti imbatti in un bivio, tuttavia prendi la strada pi√π lunga, tornerai 10 minuti pi√π tardi";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 12){
		var damage = Math.round(Math.random()*(level*2))+10;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione il cielo si fa scuro e comincia a piovere, solamente che la pioggia che cade ti brucia la pelle, perdi cos√¨ " + damage + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 13){
		connection.query('SELECT item.id, item.name FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity IN ("C","NC","R") AND inventory.player_id = ' + player_id + ' ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				var itemId = rows[0].id;
				var itemName = rows[0].name;
				connection.query('DELETE FROM inventory WHERE item_id = ' + itemId + ' AND player_id=' + player_id + ' LIMIT 1', function(err, rows, fields) {
					if (err) throw err;
					text = "Durante la missione ti accorgi che lo zaino √® pi√π leggero, controlli ed effettivamente manca l'oggetto " + itemName + "!";
					bot.sendMessage(chat_id, text);
				});
			}else{
				text = "Durante la missione ti accorgi che lo zaino √® pi√π leggero, controlli ma non manca nulla! Era solo un impressione...";
				bot.sendMessage(chat_id, text);
			}
		});
	}else if (rand == 14){
		var textArray = [
			'Durante la missione rischi di scivolare scalando una montagna, ma per fortuna mantieni salda la presa e non succede nulla',
			'Durante la missione un cavallo sulla collina vicina, diventa improvvisamente un orco. Fortunatamente non ti vede e non succede nulla',
			'Durante la missione osservi un uccellino che sta consumando il suo pranzo, quando ti accorgi che in realt√† si tratta di uno stivale, decidi di andartene e non succede nulla',
			'Durante la missione vedi uno scheletro adagiato su un angolino della strada, ma ti strofini gli occhi e ti accorgi che in realt√† si tratta di una paperella, ah',
			'Durante la missione inizi una missione, ma nemmeno in quella accade nulla di strano, che strano, peccato',
			'Durante la missione... no fa troppo caldo, quindi non fai nulla',
			'Durante la missione un ladro ti spintona e ti ruba lo zaino. Ah! Scherzavo.',
			'Durante la missione trovi il collo di Maurizio Costanzo che in realt√† non esiste quindi non succede nulla',
			'Durante la missione vedi un mercante addormentato. Decidi di derubarlo quando all\'improvviso risuona una voce che fa "E SE POI TE NE PENTI?". Allora cambi idea e continui per la tua strada'
		];
		var rand = Math.floor(Math.random()*textArray.length);
		bot.sendMessage(chat_id, textArray[rand]);
	}else if (rand == 15){
		var damage = Math.round(Math.random()*(exp*7))+40;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione scivoli da un dirupo molto alto, ti rompi un osso della gamba e perdi " + damage + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 16){
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 20);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione un goblin ti nota e ti insegue con la bava alla bocca, sei costretto a deviare la strada quindi tornerai 20 minuti pi√π tardi";
			bot.sendMessage(chat_id, text);
		});			
	}else if (rand == 17){
		var value = Math.round(Math.random()*(exp*3))+5;
		if (money - value <= 0){
			value = money;
		}
		connection.query('UPDATE player SET money = money - ' + value + ' WHERE player.id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione ti distrai in un casin√≤, ma sfortunatamente non sei un buon giocatore cos√¨ perdi " + value + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 18){
		var value = Math.round(Math.random()*(exp*3))+5;
		connection.query('UPDATE player SET money = money + ' + value + ' WHERE player.id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione ti distrai in un casin√≤, sei un gran giocatore! Vinci cos√¨ " + value + " ¬ß";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 19){
		connection.query('SELECT item.id, item.name, item.rarity FROM `item` WHERE item.rarity IN ("C","NC","R") AND item.craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			itemName2 = rows[1].name;
			itemName3 = rows[2].name;
			connection.query('INSERT INTO inventory  (player_id, item_id) VALUES(' + player_id + ', ' + rows[0].id + ')', function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione noti un mercante qualche metro davanti a te, ad un certo punto per√≤ il suo sacco pieno si rompe, raccogli gli oggetti e trovi " + itemName + ", " + itemName2 + " e " + itemName3;
				bot.sendMessage(chat_id, text);
			});
			connection.query('INSERT INTO inventory  (player_id, item_id) VALUES(' + player_id + ', ' + rows[1].id + ')', function(err, rows, fields) {
				if (err) throw err;
			});
			connection.query('INSERT INTO inventory  (player_id, item_id) VALUES(' + player_id + ', ' + rows[2].id + ')', function(err, rows, fields) {
				if (err) throw err;
			});
		});
	}else if (rand == 20){
		var damage = Math.round(Math.random()*(exp*2))+40;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione trovi uno scrigno pieno di monete d'oro sul ciglio della strada, solo che dopo un attimo ti accorgi che si tratta di cioccolata, preso dalla disperazione divori il contenuto dello scrigno e perdi " + damage + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 21){
		var itemId = Math.round(Math.random()*5+68);
		connection.query('SELECT item.id, item.name, item.rarity FROM `item` WHERE item.id = ' + itemId + ' AND item.craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			connection.query('INSERT INTO inventory  (player_id, item_id) VALUES(' + player_id + ', ' + rows[0].id + ')', function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione senti qualcosa toccarti un piede, abbassi lo sguardo e vedi una pietra strana, ricevi " + itemName + "!";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 22){
		var damage = Math.round(Math.random()*(exp/2))+20;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione uno stregone ti coglie di sorpresa e ti ruba " + damage + " hp, che poi andr√† a donare alla congrega dei maghi oscuri";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 23){
		var damage = Math.round(Math.random()*(exp/2))+120;
		connection.query('SELECT * FROM player WHERE craft_count > 20 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			var nick = rows[0].nickname.replace(new RegExp("_", "g"), " ");
			var chat_id2 = rows[0].chat_id;
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE id = ' + rows[0].id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione trovi un arco e una freccia per terra, decidi di scoccarla verso il cielo in segno vittorioso ma senza volerlo colpisci un passante di nome " + nick + ", che perde " + damage + " hp";
				bot.sendMessage(chat_id, text);
				var text2 = "Vedi una freccia in lontananza avvicinarsi a te a gran velocit√†, ti si conficca nel braccio e purtroppo perdi " + damage + " hp!";
				bot.sendMessage(chat_id2, text2);
			});
		});			
	}else if (rand == 24){
		var money = Math.round(Math.random()*(exp))+20;
		connection.query('SELECT chat_id, nickname FROM player WHERE exp > 30 AND money >= ' + money + ' ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;

			var chat_id2 = rows[0].chat_id;

			text = "Durante la missione vedi qualcuno con la testa china sul cellulare, con la coda dell'occhio noti che sta giocando ad uno strano bot, leggi il suo nickname e scopri che si chiama " + rows[0].nickname + ", per fargli uno scherzo gli fai uno sgambetto e gli fai cliccare a caso, cos√¨ perde " + money + " ¬ß";
			var text2 = "Un passante per la strada ti fa uno sgambetto e cliccando a caso sul cellulare perdi " + money + " ¬ß!";
			bot.sendMessage(chat_id, text);
			bot.sendMessage(chat_id2, text2);

			connection.query('UPDATE player SET money = money - ' + money + ' WHERE nickname="' + rows[0].nickname + '"', function(err, rows, fields) {
				if (err) throw err;
			});
		});
	}else if (rand == 25){
		var money = Math.round(Math.random()*(exp))+50;
		connection.query('UPDATE player SET money = money + ' + money + ' WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});

		text = "Durante la missione trovi una leva nascosta dentro un albero cavo. Curioso la tiri, ma non succede niente. In realt√† la leva ha fatto cadere un sacchettino pieno di qualcosa, ottieni " + money + " ¬ß!";
		bot.sendMessage(chat_id, text);
	}else if (rand == 26){
		var damage = Math.round(Math.random()*(exp*2))+20;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione trovi un pulsante a forma di papera e inizi a premerlo a ripetizione. Dopo giusto alcuni secondi ti accorgi che il pulsante ti toglie hp ogni volta che lo tocchi, infatti hai perso " + damage + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 27){
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 15);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione finisci nel mezzo di un uragano. Sollevato e lanciato lontano, quando ti riprendi scopri di essere tornato al luogo di partenza. Corri per recuperare il tempo perso, ma aumenti il tempo missione di 15 minuti";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 28){
		var damage = Math.round(Math.random()*(exp*2))+20;
		if (boss_id > 0){
			connection.query('UPDATE boss_team SET life = life - ' + damage + ' WHERE id = ' + boss_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione vedi sfrecciare sopra di te una figura rossa. Ti distrai non tanto per la figura, ma per il fatto che sembra aver perso una nocciolina che precipitando ti urta la fronte attirando la tua attenzione. Un po'per vendetta un po' per fame mangi la nocciolina con tutto il guscio e scopri con sommo piacere che era una super arachide di super Pippo. Ti precipiti contro il boss che stai sfidando, che perde immediatamente " + damage + " hp con un megapugno!";
				bot.sendMessage(chat_id, text);
			});
		};
	}else if (rand == 29){
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			connection.query('UPDATE player SET life = life - (life/10) WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione incontri tutti i boss riuniti assieme. Ti fissano, tu li fissi. Loro ti colpiscono violentemente e ti lasciano a terra nel fango";
				bot.sendMessage(chat_id, text);
			});
		});			
	}else if (rand == 30){
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() - 15);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione senti che qualcuno ti sta seguendo. Inizi a girare la zona per seminarlo, ma dopo esserti accorto che si tratta della tua ombra scopri di aver corso nella direzione giusta, risparmiandoti 15 minuti di viaggio";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 31){
		var damage = Math.round(Math.random()*(exp*3))+100;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione ti distrai giocando a Loot Bot sul cellulare e sbatti violentemente contro un muro, perdendo " + damage + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 32){
		connection.query('SELECT item.id, item.name FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity IN ("NC","R") AND inventory.player_id = ' + player_id + ' ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				var itemId = rows[0].id;
				var itemName = rows[0].name;
				connection.query('DELETE FROM inventory WHERE item_id = ' + itemId + ' AND player_id=' + player_id + ' LIMIT 1', function(err, rows, fields) {
					if (err) throw err;
					text = "Durante la missione incontri un uomo seduto sul marciapiede, decidi cos√¨ di derubarlo. Si scopre per√≤ che quell'uomo √® LastSoldier95. Lui ti guarda, apparentemente non succede nulla. Ma quando controlli nello zaino, noti che manca " + itemName + "!";
					bot.sendMessage(chat_id, text);
				});
			}else{
				text = "Durante la missione incontri un uomo seduto sul marciapiede, decidi cos√¨ di derubarlo. Si scopre per√≤ che quell'uomo √® LastSoldier95. Lui ti guarda, non succede nulla. Oggi √® magnanimo.";
				bot.sendMessage(chat_id, text);
			}
		});
	}else if (rand == 33){
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 60);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			connection.query('SELECT name, id FROM chest WHERE id IN (1,2) ORDER BY RAND()', function(err, rows, fields) {
				if (err) throw err;
				var chestName = rows[0].name;
				var chestId = rows[0].id;
				connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES (' + player_id + ',' + chestId + ')', function(err, rows, fields) {
					if (err) throw err;
				});
				text = "Durante la missione decidi di intraprendere un'altra missione. Impiegherai un ora in pi√π per tornare, ma ricevi " + chestName;
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 34){
		var damage = Math.round(Math.random()*(exp/5))+10;
		connection.query('SELECT nickname FROM player WHERE exp > 30 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			text = "Durante la missione incontri " + rows[0].nickname + " e vi salutate. Entrambi recuperate " + damage + " hp (d'altronde √® salutare).";
			bot.sendMessage(chat_id, text);

			connection.query('UPDATE player SET life = life + ' + damage + ' WHERE nickname="' + rows[0].nickname + '"', function(err, rows, fields) {
				if (err) throw err;
			});
			connection.query('UPDATE player SET life = life + ' + damage + ' WHERE nickname="' + element.nickname + '"', function(err, rows, fields) {
				if (err) throw err;
			});				
		});
	}else if (rand == 35){
		var damage = Math.round(Math.random()*(exp/2))+1;
		connection.query('SELECT life FROM player WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life - damage <= 0){
				return;
			}
			connection.query('UPDATE player SET life = life - ' + damage + ' WHERE player.id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione incontri Jovanotti che ti lancia un faffo. Perdi " + damage + " hp";
				bot.sendMessage(chat_id, text);
			});
		});
	}else if (rand == 36){
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() - 60);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione cadi in un portale spazio temporale a forma di papera. Impiegherai un ora in meno per tornare.";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 37){
		connection.query('SELECT item.id, item.name, item.rarity FROM item WHERE item.rarity = "R" AND item.craftable = 0 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			itemName = rows[0].name;
			connection.query('INSERT INTO inventory (player_id, item_id) VALUES(' + player_id + ', ' + rows[0].id + ')', function(err, rows, fields) {
				if (err) throw err;
				text = "Durante la missione entri erroneamente nell'ufficio di fenix45. Prima di andartene per√≤, vai al suo computer personale e modifichi i dati del tuo pg aggiungendo 10000 ¬ß e " + itemName;
				bot.sendMessage(chat_id, text);

				connection.query('UPDATE player SET money = money + 10000 WHERE player.id=' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			});
		});
	}else if (rand == 38){
		connection.query('SELECT mission_time_end FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() + 30);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET life = life + (life/20), mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			text = "Durante la missione incontri tua nonna che ti invita a fare uno spuntino. Impieghi 30 minuti in pi√π per tornare, ma recuperi un po' di salute.";
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 39){
		connection.query('UPDATE player SET mission_id = 0, mission_time_end = null WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});			
		text = "Durante una missione dimentichi di essere in missione e torni nel tuo rifugio senza ricompense.";
		bot.sendMessage(chat_id, text);
	}else if (rand == 40){
		connection.query('SELECT name, id FROM chest WHERE id < 5 ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			text = "Durante una missione pesti per sbaglio un sasso che in realt√† era una leva nascosta! Si apre una fenditura nel muro e trovi uno " + rows[0].name + "!";
			bot.sendMessage(chat_id, text);

			connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES(' + player_id + ', ' + rows[0].id + ')', function(err, rows, fields) {
				if (err) throw err;
			});				
		});
	}else if (rand == 41){
		connection.query('SELECT life, total_life FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			if (rows[0].life < rows[0].total_life){
				text = "Durante una missione incontri una fata graziosissima, diventate cos√¨ amici che decide di ricaricarti la vita al massimo!";
				bot.sendMessage(chat_id, text);

				connection.query('UPDATE player SET life = total_life WHERE player.id=' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			};
		});
	}else if (rand == 42){
		connection.query('SELECT mission_time_end, money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var time_end = new Date(rows[0].mission_time_end);
			time_end.setMinutes(time_end.getMinutes() - 20);

			var long_date = time_end.getFullYear() + "-" + addZero(time_end.getMonth()+1) + "-" + addZero(time_end.getDate()) + " " + addZero(time_end.getHours()) + ':' + addZero(time_end.getMinutes()) + ':' + addZero(time_end.getSeconds());
			connection.query('UPDATE player SET mission_time_end = "' + long_date + '" WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});

			if (rows[0].money > 250){
				text = "Durante una missione incontri un motociclista spericolato che ti d√† un passaggio, risparmi cos√¨ 20 minuti di missione, ma per ringraziarlo gli dai 250 ¬ß";
				connection.query('UPDATE player SET money = money-250 WHERE id=' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			}else{
				text = "Durante una missione incontri un motociclista spericolato che ti d√† un passaggio, risparmi cos√¨ 20 minuti di missione, per stavolta lo fa gratuitamente";
			}
			bot.sendMessage(chat_id, text);			
		});
	}else if (rand == 43){
		connection.query('SELECT item.name, item.id FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity = "NC" AND inventory.player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var money = 500;
			var itemName = rows[0].name;
			if (Object.keys(rows).length > 0){
				text = "Durante una missione, all'improvviso irrompe un fulmine, accecandoti. Ti accorgi in realt√† che il fulmine nient'altro era il boss di un villaggio vicino, che rubava ai sudditi e per non farsi riconoscere si era lanciato su se stesso un incantesimo che lo rendeva veloce come un fulmine. Quest'ultimo ti ha preso dallo zaino " + itemName + " ma al suo posto ti ha lasciato " + money + " ¬ß.";
				connection.query('DELETE FROM inventory WHERE item_id = ' + rows[0].id + ' AND player_id=' + player_id + ' LIMIT 1', function(err, rows, fields) {
					if (err) throw err;
				});
			}else{
				money = 300;
				text = "Durante una missione, all'improvviso irrompe un fulmine, accecandoti. Ti accorgi in realt√† che il fulmine nient'altro era il boss di un villaggio vicino, che rubava ai sudditi e per non farsi riconoscere si era lanciato su se stesso un incantesimo che lo rendeva veloce come un fulmine. Quest'ultimo non ti ha preso nulla dallo zaino, e ti ha lasciato " + money + " ¬ß.";
			}
			connection.query('UPDATE player SET money = money+' + money + ' WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 44){
		connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ', 73)', function(err, rows, fields) {
			if (err) throw err;
		});
		text = "Durante la missione incontri il grande mastro domatore di draghi Fuligah. Dopo una breve chiaccherata ti lascia in dono una Pietra Spirito Epico!";
		bot.sendMessage(chat_id, text);			
	}else if (rand == 45){
		connection.query('UPDATE player SET life = life - (life/3) WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});

		text = "Durante la missione incontri l'immenso drago di LastSoldier95 intento a consumare il suo pasto quotidiano. Dato che non vuoi diventare parte del banchetto, pian pianino torni indietro senza fare il minimo rumore e senza farti vedere. Ma quando pensi di essere scappato, il drago ti starnutisce addosso e perdi 1/3 della tua salute.";
		bot.sendMessage(chat_id, text);
	}else if (rand == 46){
		var rand = Math.random()*100;
		var text2 = "";
		if (rand > 50){
			text2 = "per la profonda disperazione ti distrai, inciampi e perdi il 2% delle monete";
			connection.query('UPDATE player SET money = money - ((money/100)*2) WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});				
		}else{
			connection.query('UPDATE player SET money = money + ((money/100)*5) WHERE id=' + player_id, function(err, rows, fields) {
				if (err) throw err;
			});	
			text2 = "tuttavia ci riprensa e si rende conto che in effetti, non fosse poi cos√¨ male, allora si congratula con te e ti regala il 5% delle monete in pi√π!"
		}

		text = "Durante la missione ti viene l'ispirazione poetica e decidi di scrivere una poesia avventurosa, ma appena finisci di scriverla non essendo un bravo scrittore dietro di te appare Lara997 e te la strappa perch√® scritta male, " + text2;
		bot.sendMessage(chat_id, text);
	}else if (rand == 47){
		connection.query('SELECT money FROM player WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			var money = rows[0].money;

			if (money < 1000){
				connection.query('SELECT item.id, item.name FROM item, inventory WHERE item.rarity = "R" AND item.id = inventory.player_id AND inventory.player_id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						return;
					}
					var itemName = rows[0].name;
					var itemId = rows[0].id;
					text = "Durante la missione vedi una insegna che recita L'EMPORIO e decidi di entrare a dare un'occhiata. Il simpatico proprietario ekvas ti ubriaca di chiacchiere sull'andamento del mercato e dei prezzi. Esci con una Colla ma ti accorgi di esser stato convinto a scambiarla con " + itemName + "...";

					connection.query('DELETE FROM inventory WHERE item_id = ' + item_id + ' AND player_id=' + player_id + ' LIMIT 1', function(err, rows, fields) {
						if (err) throw err;
					});
				});
			}else{
				var lost = Math.round(money/100)*5;
				text = "Durante la missione vedi una insegna che recita L'EMPORIO e decidi di entrare a dare un'occhiata. Il simpatico proprietario ekvas ti ubriaca di chiacchiere sull'andamento del mercato e dei prezzi. Esci con una Colla ma ti accorgi di esser stato convinto a pagarla " + lost + " ¬ß...";

				connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',3)', function(err, rows, fields) {
					if (err) throw err;
				});

				connection.query('UPDATE player SET money = money - ' + lost + ' WHERE id=' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			}
			bot.sendMessage(chat_id, text);
		});
	}else if (rand == 48){
		connection.query('INSERT INTO  inventory_chest (player_id, chest_id) VALUES(' + player_id + ', 6)', function(err, rows, fields) {
			if (err) throw err;
		});

		text = "Durante la missione senti scorrere la follia dentro di te, al punto che senti l'anima esplodere e mostrare tutto il suo spirito d'avventura. Intraprendi una missione alla velocit√† della luce e questa missione ti fornisce uno Scrigno Epico!";
		bot.sendMessage(chat_id, text);			
	}else if (rand == 49){
		connection.query('UPDATE player SET exp = exp + 15 WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});
		text = "Durante la missione incontri un folle barcollante sul ciglio della strada, avvicinandoti scopri che si tratta di un elfo delle Lande Immaginarie, una razza ormai estinta, notandolo in fin di vita gli vai a comprare alcune pozioni, e lui ricambia donandoti 15 exp con un incantesimo";
		bot.sendMessage(chat_id, text);
	}else if (rand == 50){
		connection.query('SELECT item.id, item.name FROM inventory, item WHERE inventory.item_id = item.id AND item.rarity = "L" AND inventory.player_id = ' + player_id + ' ORDER BY RAND()', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length == 0){
				text = "Durante la missione ti rechi all'Emporio della Follia, deciso ad acquistare qualche strano intruglio ma stavolta arrivi troppo tardi, √® chiuso.";
				bot.sendMessage(chat_id, text);
				return;
			}
			var item1 = rows[0].name;
			var item1_id = rows[0].id;
			connection.query('SELECT item.id, item.name FROM item WHERE item.rarity = "L" ORDER BY RAND()', function(err, rows, fields) {
				if (err) throw err;
				var item2 = rows[0].name;
				var item2_id = rows[0].id;

				connection.query('UPDATE inventory SET item_id = ' + item2_id + ' WHERE item_id = ' + item1_id + ' AND player_id = ' + player_id + ' LIMIT 1', function(err, rows, fields) {
					if (err) throw err;
				});

				text = "Durante la missione ti rechi all'Emporio della Follia, incuriosito dai prodotti acquisti la Polvere Inverter, da applicare su un oggetto nello zaino ne cambia l'aspetto. Incuriosito procedi subito seguendo le istruzioni e il tuo oggetto " + item1 + " si trasforma in un " + item2 + "!";
				bot.sendMessage(chat_id, text);
			});
		});
	}

	connection.query('UPDATE player SET event = 1 WHERE player.id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
	});
};

function refreshHeists(){
	connection.query('UPDATE player SET heist_count = 0, heist_limit = 0, capsule_limit = 0, spy_count = 0', function(err, rows, fields) {
		if (err) throw err;
		console.log(getNow("it") + " Ispezioni aggiornate");
	});
};

function checkRefill(){
	connection.query('SELECT player.id, player.total_life, chat_id, ability.ability_level FROM player, ability WHERE ability.player_id = player.id AND ability.ability_id = 6 AND ability.ability_level > 0 AND player.life <= 0 AND player.refilled < 3', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + " 1 player resuscitato");
			}else{
				console.log(getNow("it") + " " + Object.keys(rows).length + " player resuscitati");
			}
			rows.forEach(setRefill);
		}
	});
};

function setRefill(element, index, array) {
	//console.log(element);
	var player_id = element.id;
	var chat_id = element.chat_id;
	var tot = element.total_life;

	var refill = Math.round(tot/2);
	var rand = Math.random()*100;
	var prob = element.ability_level*10;

	if (prob > 50){
		prob = 50;
	}

	if (player_id == 1){
		prob = 100;
	}

	//console.log(rand, prob);

	if (rand < prob){
		connection.query('UPDATE player SET refilled = refilled+1, life = ' + refill + ' WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "L'Intervento Divino ti ha concesso di tornare in battaglia con " + refill + " hp!");
		});
	}else{
		connection.query('UPDATE player SET refilled = refilled+1 WHERE id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});	
	}
};

function checkAct(){
	connection.query('SELECT P.nickname, P.id As player_id, P.chat_id, CAST(L.time As date) As last_action, CURDATE(), DATEDIFF(CURDATE(), CAST(L.time As date)) As last_access FROM player P INNER JOIN last_command L ON P.account_id = L.account_id WHERE P.holiday != 1 HAVING last_access > 60 LIMIT 20', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 giocatore espulso\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " giocatori espulsi\x1b[0m");
			}
			rows.forEach(setFinishedAct);
		}
	});
};

function setFinishedAct(element, index, array) {
	var player_id = element.player_id;
	var nickname = element.nickname;
	var chat_id = element.chat_id;
	var last_access = element.last_access;

	console.log(">> " + player_id + " - " + nickname + " inattivo da " + last_access + " giorni");

	var now = new Date();
	now.setDate(now.getDate()+14);
	var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());

	var now2 = new Date();
	now2.setDate(now2.getDate()+365);
	var long_date2 = now2.getFullYear() + "-" + addZero(now2.getMonth()+1) + "-" + addZero(now2.getDate()) + " " + addZero(now2.getHours()) + ':' + addZero(now2.getMinutes()) + ':' + addZero(now2.getSeconds());

	connection.query('INSERT INTO holiday (player_id, time_end) VALUES (' + player_id + ',"' + long_date + '")', function(err, rows, fields) {
		if (err) throw err;
		connection.query('UPDATE player SET holiday = 1, heist_protection = "' + long_date2 + '" WHERE id = ' + player_id, function (err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Per inattivit√† √® stata attivata automaticamente la modalit√† vacanza!");
		});
	});
}

function checkTeamAct(){
	connection.query('SELECT P.nickname, P.chat_id, T.team_id, T.player_id, CAST(L.time As date) As last_action, CURDATE(), DATEDIFF(CURDATE(), CAST(L.time As date)) As last_access FROM player P INNER JOIN team_player T ON P.id = T.player_id INNER JOIN last_command L ON P.account_id = L.account_id WHERE P.holiday != 1 HAVING last_access > 14 LIMIT 20', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 giocatore espulso\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " giocatori espulsi\x1b[0m");
			}
			rows.forEach(setFinishedTeamAct);
		}
	});
};

function setFinishedTeamAct(element, index, array) {
	var player_id = element.player_id;
	var nickname = element.nickname;
	var chat_id = element.chat_id;
	var team_id = element.team_id;

	//console.log(">> " + player_id + " - " + nickname + " in espulsione");

	connection.query('DELETE FROM team_player WHERE player_id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "Sei stato espulso dal team per inattivit√†");
		connection.query('SELECT P.chat_id FROM player P, team_player T WHERE T.player_id = P.id AND T.team_id = ' + team_id + ' AND T.role = 1', function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(rows[0].chat_id, nickname + " √® stato espulso dal team per inattivit√†");
		});
	});
};

function checkHeists(){
	connection.query('SELECT heist.id FROM `player`, heist WHERE player.id = heist.from_id AND heist.datetime < NOW() AND heist.datetime IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 ispezione terminata\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " ispezioni terminate\x1b[0m");
			}
			rows.forEach(setFinishedHeist);
		}
	});
};

function checkHeistsProgress(){
	connection.query('SELECT player.id, chat_id, changeComb, my_combination, to_id, nickname FROM player, heist_progress WHERE player.id = heist_progress.from_id AND heist_progress.wait_time < NOW() AND heist_progress.wait_time IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 ispezione progressiva terminata\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " ispezioni progressive terminate\x1b[0m");
			}
			rows.forEach(setFinishedHeistProgress);
		}
	});
};

function checkChestEvent(){
	connection.query('SELECT event_chest_list.id, event_chest_list.player_id, player.chat_id FROM `event_chest_list`, player WHERE event_chest_list.player_id = player.id AND time_end < NOW() AND time_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 evento cassa terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " eventi cassa terminati\x1b[0m");
			}
			rows.forEach(setFinishedChestEvent);
		}
	});
};

function checkDust(){
	connection.query('SELECT player.nickname, event_dust_status.qnt, event_dust_status.generated, player.chat_id, event_dust_status.max_qnt, event_dust_status.id, player.id As player_id FROM event_dust_status, player WHERE player.id = event_dust_status.player_id AND extracting = 1 AND last_update < DATE_SUB(NOW(), INTERVAL 1 HOUR) AND notified = 0', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			rows.forEach(setDust);			
		}
	});
};

function setDust(element, index, array){
	var id = element.id;
	var player_id = element.player_id;
	var nick = element.nickname;
	var chat_id = element.chat_id;
	var max_qnt = element.max_qnt;
	var qnt = element.qnt;
	var generated = element.generated;

	connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 14', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			qnt += parseInt(rows[0].ability_level);
		}

		if (generated+qnt >= max_qnt){
			bot.sendMessage(chat_id, "Il generatore √® pieno! Svuotalo per produrre altra polvere!");
			connection.query('UPDATE event_dust_status SET notified = 1 WHERE id = ' + id, function(err, rows, fields) {
				if (err) throw err;
			});
		}
		if (generated < max_qnt){
			var d = new Date();
			var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
			if (generated+qnt > max_qnt)
				qnt = max_qnt-generated;
			connection.query('UPDATE event_dust_status SET generated = generated+' + qnt + ', last_update = "' + long_date + '" WHERE id = ' + id, function(err, rows, fields) {
				if (err) throw err;
			});
		}
	});
};

function checkMissions(){
	connection.query('SELECT nickname, id, mission_id, chat_id FROM `player` WHERE mission_time_end < NOW() AND mission_time_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length == 0){
			if (firstStart == 0){
				console.log("\x1b[31mxxx Online: " + getNow("it") + "\x1b[0m");
				firstStart = 1;
			}
		}else{
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 missione terminata\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " missioni terminate\x1b[0m");
			}
			rows.forEach(setFinishedMission);
		}
	});
};

function checkSpecialMissions(){
	connection.query('SELECT nickname, id, mission_special_id, chat_id FROM `player` WHERE mission_special_time_end < NOW() AND mission_special_time_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 itinerario terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " itinerari terminati\x1b[0m");
			}
			rows.forEach(setFinishedSpecialMission);
		}
	});
};

function checkEnchant(){
	connection.query('SELECT id, chat_id FROM `player` WHERE weapon_enchant_end < NOW() AND weapon_enchant_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 incantamento arma terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " incantamento terminato\x1b[0m");
			}
			rows.forEach(setFinishedEnchant1);
		}
	});
};

function checkEnchant2(){
	connection.query('SELECT id, chat_id FROM `player` WHERE weapon2_enchant_end < NOW() AND weapon2_enchant_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 incantamento armatura terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " incantamento terminato\x1b[0m");
			}
			rows.forEach(setFinishedEnchant2);
		}
	});
};

function checkEnchant3(){
	connection.query('SELECT id, chat_id FROM `player` WHERE weapon3_enchant_end < NOW() AND weapon3_enchant_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 incantamento scudo terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " incantamento terminato\x1b[0m");
			}
			rows.forEach(setFinishedEnchant3);
		}
	});
};

function setFinishedEnchant1(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;

	connection.query('UPDATE player SET weapon_enchant_end = NULL, weapon_enchant = 0, weapon_enchant_bonus = 0 WHERE id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "L'incantamento dell'arma √® terminato");
	});
};

function setFinishedEnchant2(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;

	connection.query('UPDATE player SET weapon2_enchant_end = NULL, weapon2_enchant = 0, weapon2_enchant_bonus = 0 WHERE id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "L'incantamento dell'armatura √® terminato");
	});
};

function setFinishedEnchant3(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;

	connection.query('UPDATE player SET weapon3_enchant_end = NULL, weapon3_enchant = 0, weapon3_enchant_bonus = 0 WHERE id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "L'incantamento dello scudo √® terminato");
	});
};

function checkDragonArena(){
	connection.query('SELECT player_id, chat_id FROM player, event_arena_status WHERE event_arena_status.player_id = player.id AND fight_time < NOW() AND fight_time IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 scontro drago terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " draghi terminati\x1b[0m");
			}
			rows.forEach(setFinishedArena);
		}
	});
};

function checkMerchant(){
	connection.query('SELECT M.player_id, P.chat_id, M.day_cnt FROM player P, merchant_offer M WHERE P.id = M.player_id AND M.time_end < NOW() AND M.time_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 contrabbandiere terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " contrabbandieri terminati\x1b[0m");
			}
			rows.forEach(setFinishedMerchant);
		}
	});
};

function setFinishedMerchant(element, index, array) {
	var player_id = element.player_id;
	var chat_id = element.chat_id;
	var day_cnt = element.day_cnt;

	connection.query('UPDATE merchant_offer SET time_end = NULL WHERE player_id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		if (day_cnt < merchant_limit){
			var d = new Date();
			if ((d.getHours() > 8) && (d.getHours() < 23)){
				bot.sendMessage(chat_id, "Il Contrabbandiere ha una nuova offerta per te!");
			}
		}
	});
};

function reloadFestival(){
	connection.query('SELECT MAX(id) As maxid FROM event_crafting_item', function(err, rows, fields) {
		if (err) throw err;

		connection.query('SELECT id FROM event_crafting_item WHERE time < NOW() AND time IS NOT NULL AND id = ' + rows[0].maxid, function(err, rows, fields) {
			if (err) throw err;

			if (Object.keys(rows).length == 0){
				return;
			}

			connection.query('SELECT rarity, name, id FROM item WHERE craftable = 1 AND rarity IN ("NC","R","UR","L") ORDER BY RAND()', function(err, rows, fields) {
				if (err) throw err;

				var d = new Date();
				d.setHours(d.getHours() + 2);
				var time_end = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

				var value = 0;
				if (rows[0].rarity == "NC"){
					value = 1500;
				}else if (rows[0].rarity == "R"){
					value = 2000;
				}else if (rows[0].rarity == "UR"){
					value = 3000;
				}else if (rows[0].rarity == "L"){
					value = 5000;
				}else if (rows[0].rarity == "E"){
					value = 10000;
				}

				connection.query('INSERT INTO event_crafting_item (item_id, time, price) VALUES (' + rows[0].id + ',"' + time_end + '",' + value + ')', function(err, rows, fields) {
					if (err) throw err;
					console.log(getNow("it") + "\x1b[32m Festival aggiornato\x1b[0m");
				});
			});
		});
	});
};

function checkDungeonNotification(){
	connection.query('SELECT player_id, id FROM dungeon_status WHERE TIMESTAMPDIFF(MINUTE, NOW(), finish_time) < 60 AND finish_time IS NOT NULL AND notified = 0', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 dungeon notificato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " dungeon notificati\x1b[0m");
			}
			rows.forEach(setFinishedDungeonNotification);
		}
	});
};

function checkDungeonNotificationIstance(){
	connection.query('SELECT id FROM dungeon_list WHERE TIMESTAMPDIFF(MINUTE, NOW(), finish_date) < 180 AND finish_date IS NOT NULL AND notified = 0', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 istanza dungeon notificata\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " istanze dungeon notificate\x1b[0m");
			}
			rows.forEach(setFinishedDungeonNotificationIstance);
		}
	});
};

function setFinishedDungeonNotification(element, index, array) {
	var player_id = element.player_id;
	var id = element.id;

	connection.query('SELECT chat_id FROM player WHERE id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		var chat_id = rows[0].chat_id;
		connection.query('UPDATE dungeon_status SET notified = 1 WHERE id = ' + id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Ti rimane solamente 1 ora per terminare il dungeon! Forza!");
		});
	});
};

function setFinishedDungeonNotificationIstance(element, index, array) {
	var dungeon_id = element.id;

	connection.query('UPDATE dungeon_list SET notified = 1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
		if (err) throw err;
	});

	connection.query('SELECT player_id FROM dungeon_status WHERE dungeon_id = ' + dungeon_id, function(err, rows, fields) {
		if (err) throw err;
		for (i = 0; i < Object.keys(rows).length; i++){
			connection.query('SELECT chat_id FROM player WHERE id = ' + rows[i].player_id, function(err, rows, fields) {
				if (err) throw err;
				var chat_id = rows[0].chat_id;
				bot.sendMessage(chat_id, "Ti rimangono solamente 3 ore prima del crollo dell'istanza! Forza!");
			});
		};
	});
};

function checkDungeonRoom(){
	connection.query('SELECT dungeon_status.id As room_id, player.id As player_id, player.chat_id As chat_id FROM dungeon_status, player WHERE dungeon_status.player_id = player.id AND room_time < NOW() AND room_time IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 stanza terminata\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " stanze terminate\x1b[0m");
			}
			rows.forEach(setFinishedDungeonRoom);
		}
	});
};

function checkGnome(){
	connection.query('SELECT heist_progress.id As progressId, player.id As player_id, player.chat_id As chat_id FROM heist_progress, player WHERE heist_progress.from_id = player.id AND time_end < NOW() AND time_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 gnomo scaduto\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " gnomi scaduti\x1b[0m");
			}
			rows.forEach(setFinishedGnome);
		}
	});
};

function setFinishedGnome(element, index, array){
	var chat_id = element.chat_id;

	connection.query('DELETE FROM heist_progress WHERE id = ' + element.progressId, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(chat_id, "Il tuo gnomo √® stato troppo tempo fuori! E' tornato al tuo rifugio senza aver terminato la partita.");
	});
};

function checkDungeonEnd(){
	connection.query('SELECT id, chat_id FROM player WHERE dungeon_time < NOW() AND dungeon_time IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 dungeon terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " dungeon terminati\x1b[0m");
			}
			rows.forEach(setFinishedDungeonEnd);
		}
	});
};

function checkDungeonExpire(){
	connection.query('SELECT dungeon_status.id As dungeon_status_id, dungeon_status.dungeon_id As dungeon_id, player.id As player_id, player.chat_id FROM dungeon_status, player WHERE dungeon_status.player_id = player.id AND dungeon_status.finish_time < NOW() AND dungeon_status.finish_time IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 giocatore istanza dungeon scaduto\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " giocatori in istanze dungeon scaduti\x1b[0m");
			}
			rows.forEach(setFinishedDungeonExpire);
		}
	});
};

function checkIstanceExpire(){
	/*
	connection.query('SELECT dungeon_list.id As dungeon_id, player.id As player_id, player.chat_id FROM dungeon_status, player, dungeon_list ' +
			'WHERE dungeon_status.dungeon_id = dungeon_list.id AND dungeon_status.player_id = player.id AND dungeon_list.finish_date < NOW() ' +
			'AND dungeon_list.finish_date IS NOT NULL AND dungeon_list.main <> 1 LIMIT 100', function(err, rows, fields) {
	*/
	connection.query('SELECT dungeon_list.id As dungeon_id FROM dungeon_list WHERE dungeon_list.finish_date < NOW() AND dungeon_list.finish_date IS NOT NULL AND dungeon_list.main = 0 LIMIT 100', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 istanza dungeon scaduta\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " istanze dungeon scadute\x1b[0m");
			}
			rows.forEach(setFinishedIstanceExpire);
		}
	});
};

function setFinishedIstanceExpire(element, index, array){
	var dungeon_id = element.dungeon_id;

	console.log("Cancellazione istanza ID " + dungeon_id);

	connection.query('SELECT player.id As player_id, player.chat_id FROM dungeon_status, player, dungeon_list ' +
					 'WHERE dungeon_status.dungeon_id = dungeon_list.id AND dungeon_status.player_id = player.id AND dungeon_list.id = ' + dungeon_id, function(err, rows, fields) {
		if (Object.keys(rows).length > 0){
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				console.log("Notifica crollo istanza ID " + dungeon_id + " del player id " + rows[i].player_id);
				bot.sendMessage(rows[i].chat_id, "L'intera istanza √® scaduta, sei costretto ad uscire dal dungeon!");
			}
		}
		connection.query('DELETE FROM dungeon_list WHERE id = ' + dungeon_id, function(err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM dungeon_status WHERE dungeon_id = ' + dungeon_id, function(err, rows, fields) {
			if (err) throw err;
		});
	});

};

function setFinishedDungeonExpire(element, index, array){
	var player_id = element.player_id;
	var dungeon_status_id = element.dungeon_status_id;
	var dungeon_id = element.dungeon_id;
	var chat_id = element.chat_id;

	connection.query('UPDATE dungeon_list SET duration = duration-1 WHERE id = ' + dungeon_id, function(err, rows, fields) {
		if (err) throw err;
		connection.query('DELETE FROM dungeon_status WHERE id = ' + dungeon_status_id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Hai impiegato troppo tempo per completare il dungeon, i muri cominciano a crollare e sei costretto a scappare!");
		});	
	});
};

function setFinishedDungeonEnd(element, index, array){
	var player_id = element.id;
	var chat_id = element.chat_id;

	connection.query('UPDATE player SET dungeon_time = NULL WHERE id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(element.chat_id, "I dungeon sono di nuovo disponibili!");
	});	
};

function setFinishedDungeonRoom(element, index, array){
	var player_id = element.player_id;
	var chat_id = element.chat_id;

	connection.query('UPDATE dungeon_status SET room_time = NULL WHERE id = ' + element.room_id, function(err, rows, fields) {
		if (err) throw err;
		bot.sendMessage(element.chat_id, "Sei tornato in forze per proseguire il dungeon!");
	});

	globalAchievement(player_id, 1);
};

function setFinishedChestEvent(element, index, array){
	var player_id = element.player_id;
	connection.query('SELECT item_id FROM `event_chest_content` WHERE player_id = ' + player_id, function(err, rows, fields) {
		if (err) throw err;
		for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
			connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ',' + rows[i].item_id + ')', function(err, rows, fields) {
				if (err) throw err;
			});
		}
		connection.query('DELETE FROM event_chest_content WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});
		connection.query('DELETE FROM event_chest_list WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});

		bot.sendMessage(element.chat_id, "L'offerta nella vetrina evento √® terminata, tutti gli oggetti sono tornati nell'inventario.");
	});
};

function checkEventMissions(){
	connection.query('SELECT player.nickname, player.id As player_id, player.chat_id, mission_event_status.mission_id FROM `player`, mission_event_status WHERE mission_event_status.player_id = player.id AND mission_end < NOW() AND mission_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 missione evento terminata\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " missioni evento terminate\x1b[0m");
			}
			rows.forEach(setFinishedEventMission);
		}
	});
};

function teamBoss(team_id, drop, message){
	connection.query('SELECT team_player.notification, player.id, player.nickname, player.chat_id, (SELECT COUNT(nickname) FROM `player`, team_player WHERE player.id = team_player.player_id AND team_player.team_id = ' + team_id + ') As num FROM `player`, team_player WHERE team_player.suspended = 0 AND player.id = team_player.player_id AND team_player.team_id = ' + team_id, function(err, rows, fields) {
		if (err) throw err;
		rows.forEach(function (element, index, arr) {
			setTeamBoss(element, index, arr, drop, message.from.username, message, team_id);
		});
	});
};

function setTeamBoss(element, index, array, drop, killerName, message, team_id) {
	var chat_id = element.chat_id;
	var notify = element.notification;

	//console.log("BOSSKILL: " + element.nickname + " " + element.id + " " + team_id);

	connection.query('SELECT boss_team.boss_id FROM boss_team, player WHERE boss_team.id = player.boss_id AND player.id = ' + element.id, function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (rows[0].boss_id == 20){
				connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + element.id + ',7)', function(err, rows, fields) {
					if (err) throw err;
					if (notify == 1){
						bot.sendMessage(chat_id, "Partecipando all'uccisione del Titano hai ottenuto uno *Scrigno Capsula*, ma la salute di tutti i boss precedenti √® aumentata! Inoltre il tempo massimo √® stato esteso per consentirti di continuare la scalata.", back);
					}
				});
				connection.query('SELECT boss_respawn FROM team WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
					if (rows[0].boss_respawn != null){
						var now = new Date(rows[0].boss_respawn);
						now.setHours(now.getHours() + 1);
						var long_date = now.getFullYear() + "-" + addZero(now.getMonth()+1) + "-" + addZero(now.getDate()) + " " + addZero(now.getHours()) + ':' + addZero(now.getMinutes()) + ':' + addZero(now.getSeconds());
						var short_date = addZero(now.getHours()) + ":" + addZero(now.getMinutes()) + ":" + addZero(now.getSeconds());							

						connection.query('UPDATE team SET boss_respawn = "' + long_date + '" WHERE id = ' + team_id, function(err, rows, fields) {
							if (err) throw err;
						});
					}
				});
			}
			if (rows[0].boss_id == 31){
				if (notify == 1){
					bot.sendMessage(chat_id, "Partecipando all'uccisione di Phoenix hai ottenuto una gran quantit√† di Mana, alcune üíé e vari ü¶ã, ma la salute degli ultimi boss √® aumentata!", back);
				}
				var mana = Math.round(getRandomArbitrary(1000, 2500));
				var gems = Math.round(getRandomArbitrary(5, 10));
				connection.query('UPDATE event_mana_status SET mana_1 = mana_1 + ' + mana + ', mana_2 = mana_2 + ' + mana + ', mana_3 = mana_3 + ' + mana + ' WHERE player_id = ' + element.id, function(err, rows, fields) {
					if (err) throw err;
				});
				connection.query('UPDATE player SET gems = gems+' + gems + ' WHERE id = ' + element.id, function(err, rows, fields) {
					if (err) throw err;
				});
				connection.query('UPDATE team_player SET kill_streak = kill_streak+1 WHERE player_id = ' + element.id, function(err, rows, fields) {
					if (err) throw err;
				});
				connection.query('UPDATE team SET point = point+1 WHERE id = ' + team_id, function(err, rows, fields) {
					if (err) throw err;
				});			
			}
		}

		connection.query('UPDATE `player` SET exp=exp+1, `money` = money+' + drop + ', boss_id = 0 WHERE id = ' + element.id, function(err, rows, fields) {
			if (err) throw err;
			if (notify == 1){
				if (element.nickname != killerName){
					bot.sendMessage(chat_id, killerName + " del tuo team ha ucciso un boss e hai guadagnato <b>" + formatNumber(drop) + "</b> ¬ß!", html);
				}
			}
		});
	});
};

function finishedBoss(message, boss_id){
	var team_id = 0;
	connection.query('SELECT team_id, COUNT(id) As num FROM `team_player` WHERE suspended = 0 AND player_id = (SELECT id FROM player WHERE nickname = "' + message.from.username + '") ORDER BY `team_id` ASC', function(err, rows, fields) {
		if (err) throw err;
		if (rows[0].num == 0){
			console.log("No team error.");
		}
		team_id = rows[0].team_id;

		connection.query('SELECT life FROM boss_team WHERE id = ' + boss_id, function(err, rows, fields) {
			if (err) throw err;
			if (rows[0].life <= 0){
				var sql = 'SELECT team_player.notification, (SELECT COUNT(*) FROM boss_damage WHERE boss_id = ' + boss_id + ' AND team_id = ' + team_id + ') As num,' + ' player.nickname, player.id, player.chat_id , SUM(boss_damage.damage) As damage FROM `boss_damage`, player, team_player ' +
					'WHERE team_player.player_id = player.id AND player.id = boss_damage.player_id AND boss_damage.boss_id = ' + boss_id + ' ' +
					'AND boss_damage.team_id = ' + team_id + ' GROUP BY player.nickname ORDER BY damage DESC';

				connection.query(sql, function(err, rows, fields) {
					if (err) throw err;
					if (rows[0].num > 0){
						rows.forEach(setFinishedBoss);

						/*
						connection.query('DELETE FROM boss_damage WHERE team_id = ' + team_id, function(err, rows, fields) {
							if (err) throw err;
						});
						*/
					}else{
						console.log("Errore boss");
					}
				});
			}
		});
	});
};

function setFinishedBoss(element, index, array){

	var damage = element.damage;
	var player_id = element.id;
	var chat_id = element.chat_id;
	var notify = element.notification;

	connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + player_id + ' AND ability_id = 12', function(err, rows, fields) {
		if (err) throw err;

		var abBonus = 0;
		if (Object.keys(rows).length > 0){
			abBonus = rows[0].ability_level*rows[0].val;
		}

		var money = damage/2;
		money = Math.round(money+(money*abBonus/100));

		connection.query('UPDATE `player` SET exp=exp+2, `money`=money+' + money + ' WHERE id=' + player_id, function(err, rows, fields) {
			if (err) throw err;
			if (notify == 1){
				bot.sendMessage(chat_id, "Il boss √® stato ucciso! Grazie al tuo contributo hai guadagnato *" + formatNumber(money) + "* ¬ß!", mark);
			}
		});
	});
};

function checkTravels(){
	connection.query('SELECT nickname, id, travel_id, chat_id FROM `player` WHERE travel_time_end < NOW() AND travel_time_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 viaggio terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " viaggi terminati\x1b[0m");
			}
			rows.forEach(setFinishedTravel);
		}
	});
};

function resetDungeonSkip(){
	connection.query('UPDATE player SET dungeon_skip = 0 WHERE dungeon_skip != 0', function(err, rows, fields) {
		if (err) throw err;
	});
};

function resetRefill(){
	connection.query('UPDATE player SET refilled = 0 WHERE refilled > 0', function(err, rows, fields) {
		if (err) throw err;
	});	
};

function checkCave(){
	connection.query('SELECT nickname, reborn, boost_id, charm_id, id, cave_id, chat_id, boost_mission FROM `player` WHERE cave_time_end < NOW() AND cave_time_end IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 viaggio cava terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " viaggi cava terminati\x1b[0m");
			}
			rows.forEach(setFinishedCave);
		}
	});
};

function checkRebornChest(){
	connection.query('SELECT chat_id, parent_id As parent_id, reborn_chest_status.rarity_id FROM player, reborn_chest, reborn_chest_status WHERE reborn_chest.parent_id = reborn_chest_status.id AND player.id = reborn_chest_status.player_id AND time_end < NOW() AND time_end IS NOT NULL GROUP BY parent_id', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 cassa rinascita terminata\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " casse rinascita terminate\x1b[0m");
			}
			rows.forEach(setFinishedRebornChest);
		}		
	});
};

function setFinishedRebornChest(element, index, array) {
	var chat_id = element.chat_id;
	var rarity_id = element.rarity_id;
	var parent_id = element.parent_id;

	connection.query('SELECT shortname FROM rarity WHERE id = ' + rarity_id, function(err, rows, fields) {
		if (err) throw err;

		var rarity = rows[0].shortname;

		connection.query('DELETE FROM reborn_chest_status WHERE id = ' + parent_id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "La cassa rinascita " + rarity + " √® scaduta!");
		});
	});
}

function checkGlobalMsg(){
	connection.query('SELECT global_msg FROM config', function(err, rows, fields) {
		if (err) throw err;
		var msg = rows[0].global_msg;
		connection.query('SELECT * FROM global_msg LIMIT 200', function(err, rows, fields) {
			if (err) throw err;
			if (Object.keys(rows).length > 0){
				for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
					bot.sendMessage(rows[i].chat_id, msg + "\n\nUsa /globali per bloccare la ricezioni di questi messaggi, sconsigliato!", html);
					console.log("Invio msg globale a " + rows[i].chat_id + " " + rows[i].id + "/" + Object.keys(rows).length);
					connection.query('DELETE FROM global_msg WHERE chat_id = ' + rows[i].chat_id, function(err, rows, fields) {
						if (err) throw err;
					});
				}
			}
		});
	});
}

function checkProtection(){
	connection.query('SELECT nickname, id, chat_id FROM `player` WHERE heist_protection < NOW() AND heist_protection IS NOT NULL', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 protezione terminata\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " protezioni terminate\x1b[0m");
			}
			rows.forEach(setFinishedProtection);
		}
	});
};

function setFinishedProtection(element, index, array) {
	var chat_id = element.chat_id;
	connection.query('UPDATE `player` SET `heist_protection`=NULL WHERE nickname="' + element.nickname + '"', function(err, rows, fields) {
		if (err) throw err;
		//console.log(getNow("it") + " Protezione terminata per " + element.nickname);
		bot.sendMessage(chat_id, "L'effetto del Campo di Forza √® terminato!");
	});
}

function checkBoost(){
	connection.query('SELECT nickname, id, boost_id, chat_id FROM `player` WHERE boost_mission = 0 AND boost_id != 0', function(err, rows, fields) {
		if (err) throw err;

		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + "\x1b[32m 1 boost terminato\x1b[0m");
			}else{
				console.log(getNow("it") + "\x1b[32m " + Object.keys(rows).length + " boost terminati\x1b[0m");
			}
			rows.forEach(setFinishedBoost);
		}
	});
};

function toTime(seconds, withSec = 0){
	var numdays = Math.floor((seconds % 31536000) / 86400);
	var numhours = Math.floor(((seconds % 31536000) % 86400) / 3600);
	var numminutes = Math.floor((((seconds % 31536000) % 86400) % 3600) / 60);
	var numseconds = Math.floor((((seconds % 31536000) % 86400) % 3600) % 60);

	if (withSec == 0){
		if (numdays > 0){
			if (numdays == 1){
				return numdays + " giorno, " + numhours + " ore e " + numminutes + " min";
			}else{
				return numdays + " giorni, " + numhours + " ore e " + numminutes + " min";
			}
		}else{
			if (numhours > 1){
				return numhours + " ore e " + numminutes + " min";
			}else if (numhours == 1){
				return numhours + " ora e " + numminutes + " min";
			}else if (numhours < 1){
				return numminutes + " min";
			}
		}
	}else{
		if (numdays > 0){
			if (numdays == 1){
				return numdays + " giorno, " + numhours + " ore, " + numminutes + " min e " + numseconds + " sec";
			}else{
				return numdays + " giorni, " + numhours + " ore, " + numminutes + " min e " + numseconds + " sec";
			}
		}else{
			if (numhours > 1){
				return numhours + " ore e " + numminutes + " min e " + numseconds + " sec";
			}else if (numhours == 1){
				return numhours + " ora e " + numminutes + " min e " + numseconds + " sec";
			}else if (numhours < 1){
				return numminutes + " min e " + numseconds + " sec";
			}
		}
	}
}

function setFinishedEventMission(element, index, array) {
	var chat_id = element.chat_id;

	//console.log("Event: " + element.player_id + " - " + element.mission_id);

	connection.query('SELECT choice FROM mission_event_text WHERE id = ' + element.mission_id, function(err, rows, fields) {
		if (err) throw err;
		var choice = rows[0].choice;
		connection.query('UPDATE mission_event_status SET mission_end = NULL, mission_id = 0, choice_id = ' + rows[0].choice + ' WHERE player_id = ' + element.player_id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Hai completato la missione evento!\nProsegui la storia attraverso il pulsante nel men√π.");
		});
	});
}


function setFinishedMission(element, index, array) {
	var chat_id = element.chat_id;

	connection.query('SELECT charm_id, class, mission_auto_id, boost_id, boost_mission, reborn, exp FROM player WHERE id = ' + element.id, function(err, rows, fields) {
		if (err) throw err;
		var charm_id = parseInt(rows[0].charm_id);
		var auto_id = parseInt(rows[0].mission_auto_id);
		var boost_id = parseInt(rows[0].boost_id);
		var boost_mission = parseInt(rows[0].boost_mission);
		var reborn = parseInt(rows[0].reborn);
		var class_id = parseInt(rows[0].class);
		var level = Math.floor(rows[0].exp/10);

		if ((boost_mission <= 0) && (boost_id != 0)){
			connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + element.id, function(err, rows, fields) {
				if (err) throw err;
			});
			boost_mission = 0;
			boost_id = 0;
		}

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 9', function(err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			var double = 0;
			if (Object.keys(rows).length > 0){
				var rand = Math.random()*100;
				abBonus = parseInt(rows[0].ability_level)*rows[0].val;
				if (rand < abBonus){
					double = 1;
				}
			}

			if (rows.affectedRows == 0){
				console.log(">> ERRORE UPDATE MISSIONE: " + element.mission_id + " DI " + element.nickname);
				return;
			}

			connection.query('UPDATE player SET mission_id = 0, mission_time_end = NULL WHERE id = ' + element.id, function(err, rows, fields) {
				if (err) throw err;

				if (element.mission_id == 1001){
					connection.query('INSERT INTO `inventory`(`player_id`, `item_id`) VALUES (' + element.id + ',15)', function(err, rows, fields) {
						if (err) throw err;
					});
					bot.sendMessage(chat_id, "Missione completata!\nHai trovato un misterioso *Tavolino*", mark);
					return;
				}

				connection.query('SELECT chest_id FROM mission WHERE id = ' + element.mission_id, function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length == 0){
						console.log(">> ERRORE CHEST: " + element.mission_id + " DI " + element.nickname);
						return;
					}

					var mission_chest = rows[0].chest_id;
					var rand = 0;
					var evolved = 0;
					var evolved_text = "";

					rand = Math.round((Math.random()*100)+1);
					var bonus = 0;
					if (charm_id == 61){
						bonus = 5;
					}else if(charm_id == 185){
						bonus = 10;
					}else if(charm_id == 189){
						bonus = 15;
					}else if(charm_id == 697){
						bonus = 20;
					}

					if ((class_id == 3) && (reborn >= 4)){
						bonus += 5;
					}
					if ((class_id == 3) && (reborn == 3)){
						bonus += 2.5;
					}
					if ((class_id == 7) && (reborn == 3)){
						bonus += 10;
					}
					if ((class_id == 7) && (reborn >= 4)){
						bonus += 15;
					}

					var exp_lost = 0;
					if (luckyMode == 1){
						var d = new Date();
						if (d.getDay() == 6){
							bonus += 50;
						}else if (d.getDay() == 0){
							var r = Math.random();
							if (r < 50){
								bonus += 50;
							}else if ((r > 50) && (r < 75)){
								exp_lost = 1;
							}
						}
					}

					if (boost_id == 5){
						bonus = bonus*2;
					}

					if (mission_chest < 6){
						if (rand <= bonus){
							mission_chest++;
							evolved = 1;
						}
					}

					//console.log(getNow("it") + " Scrigno: " + mission_chest + " - Rand: " + rand);

					rand = Math.random()*100;

					connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 11', function(err, rows, fields) {
						if (err) throw err;

						var abBonus = 0;
						var rand_c = 15;

						if (Object.keys(rows).length > 0){
							abBonus = rows[0].ability_level*rows[0].val;
						}
						rand_c += abBonus;

						var d = new Date();
						if (d.getDay() == 2){
							rand_c += 10;
						}
						if (crazyMode == 1){
							rand_c += 20;
						}

						if ((rand >= 5) && (rand <= rand_c) && (boost_id == 0)){
							var rand2 = Math.round(Math.random()*6);
							if (rand2 == 0){
								connection.query('UPDATE `player` SET `boost_id`=1,`boost_mission`= 3 WHERE id = ' + element.id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Energetica! Per 3 missioni il tempo di esecuzione missioni √® dimezzato.");
								});
							}else if (rand2 == 1){
								connection.query('UPDATE `player` SET `boost_id`=2,`boost_mission`= 3 WHERE id = ' + element.id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Scrigno! Per 3 missioni gli scrigni ottenuti a fine missione sono raddoppiati.");
								});
							}else if (rand2 == 2){
								if (level > 20){
									connection.query('UPDATE `player` SET `boost_id`=3,`boost_mission`= 3 WHERE id = ' + element.id, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(chat_id, "Hai trovato una Bevanda Fiamma di Drago! Per 3 viaggi in cava le pietre ottenute sono raddoppiate.");
									});
								}
							}else if (rand2 == 3){
								connection.query('UPDATE `player` SET `boost_id`=4,`boost_mission`= 2 WHERE id = ' + element.id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Livellante! Per 2 missioni i punti esperienza ottenuti a fine missione sono raddoppiati.");
								});
							}else if (rand2 == 4){
								connection.query('UPDATE `player` SET `boost_id`=5,`boost_mission`= 3 WHERE id = ' + element.id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Quadrifoglio! Per 3 missioni la fortuna √® raddoppiata.");
								});
							}else if (rand2 == 5){
								connection.query('UPDATE `player` SET `boost_id`=6,`boost_mission`= 3 WHERE id = ' + element.id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Furia! Per 3 attacchi il tuo danno √® raddoppiato.");
								});
							}else if (rand2 == 6){
								connection.query('UPDATE `player` SET `boost_id`=7,`boost_mission`= 3 WHERE id = ' + element.id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Hai trovato una Bevanda Bottino! Per 3 missioni fornisce il doppio delle monete.");
								});
							}

							setAchievement(chat_id, element.id, 37, 1);
						}

						/*
						if (rand <= 2){
							connection.query('UPDATE `player` SET `token`=token+1 WHERE id = ' + element.id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai trovato un Gettone del Destino!");
								setAchievement(chat_id, element.id, 37, 1);
							});
						}
						*/

						if ((rand > 2) && (rand < 5)){
							connection.query('SELECT id FROM inventory_chest WHERE player_id = ' + element.id + ' AND chest_id = 8', function(err, rows, fields) {
								if (err) throw err;
								if (Object.keys(rows).length == 0){
									connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + element.id + ',8)', function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(chat_id, "Hai trovato uno Scrigno Mistico! Che fortuna!");
									});
								}
							});
							setAchievement(chat_id, element.id, 37, 1);
						}

						if ((rand > 99) && (reborn >= 2)){
							connection.query('UPDATE player SET gems = gems+1 WHERE id = ' + element.id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(chat_id, "Hai trovato una Gemma üíé!");
								setAchievement(chat_id, element.id, 37, 1);
							});					
						}

						if (luckyMode == 1){
							if ((rand > 80) && (rand < 84)){
								connection.query('UPDATE player SET moon_coin = moon_coin+1 WHERE id = ' + element.id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Al ritorno dalla missione vedi un bagliore lucente per terra e abbassi lo sguardo... Hai trovato una Moneta Lunare üåï!");
								});	
								setAchievement(chat_id, element.id, 37, 1);
							}
						}else{
							if ((rand > 80) && (rand < 81) && (mission_chest >= 3)){
								connection.query('UPDATE player SET moon_coin = moon_coin+1 WHERE id = ' + element.id, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(chat_id, "Al ritorno dalla missione vedi un bagliore lucente per terra e abbassi lo sguardo... Hai trovato una Moneta Lunare üåï!");
								});	
								setAchievement(chat_id, element.id, 37, 1);
							}
						}

						if (auto_id == (max_mission_id+1)){
							auto_id = 1;
						}

						connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 2', function(err, rows, fields) {
							if (err) throw err;

							var abBonus = 0;
							if (Object.keys(rows).length > 0){
								abBonus = parseInt(rows[0].ability_level)*rows[0].val;
							}

							connection.query('SELECT rarity.shortname As rarity FROM mission_auto, mission, rarity WHERE mission.chest_id = rarity.id AND mission.chest_id = mission_auto.chest_id AND mission_auto.id = ' + auto_id + ' LIMIT 1', function(err, rows, fields) {
								if (err) throw err;
								var rarity_miss = "";

								if (Object.keys(rows).length > 0){
									rarity_miss = "\nLa prossima sar√† di rarit√† " + rows[0].rarity;
								}

								connection.query('SELECT name, rarity_shortname, id FROM chest WHERE id = ' + mission_chest, function(err, rows, fields) {
									if (err) throw err;
									if (Object.keys(rows).length == 0){
										bot.sendMessage(chat_id, "Si √® verificato un problema, contatta l'amministratore @fenix45.");
										return;
									}
									var chest_id = rows[0].id;
									var money = Math.round(((Math.random()*100)+100)*mission_chest);

									if (luckyMode == 1){
										var d = new Date();
										if (d.getDay() == 6){
											var rand = Math.random()*100;
											if (rand < 75){
												money = money*2;
											}
										}else if (d.getDay() == 0){
											var rand = Math.random()*100;
											if (rand < 50){
												money = money*2;
											}else{
												money = money/2;
											}
										}
									}

									money += abBonus;

									if (boost_id == 7){
										money = money*2;
									}

									if (charm_id == 697){
										money += money*0.2;
									}

									var exp = 0;
									exp = mission_chest;
									exp = exp-exp_lost;

									if (evolved == 1){
										evolved_text = ", evoluto grazie alla fortuna";
									}
									if (boost_id == 4){
										exp = exp*2;
									}

									var crazyText = "";
									var num = 1;

									if (boost_id == 2){
										num++;
										crazyText = num + "x ";

										connection.query('INSERT INTO `inventory_chest`(`player_id`, `chest_id`) VALUES (' + element.id + ',' + chest_id + ')', function(err, rows, fields) {
											if (err) throw err;
										});
									}
									if (double == 1){
										num++;
										crazyText = num + "x ";

										connection.query('INSERT INTO `inventory_chest`(`player_id`, `chest_id`) VALUES (' + element.id + ',' + chest_id + ')', function(err, rows, fields) {
											if (err) throw err;
										});
									}
									if (crazyMode == 1){
										num++;
										crazyText = num + "x ";

										connection.query('INSERT INTO `inventory_chest`(`player_id`, `chest_id`) VALUES (' + element.id + ',' + chest_id + ')', function(err, rows, fields) {
											if (err) throw err;
										});
									}

									if (crazyMode == 1){
										var rand = Math.random()*100;
										if ((chest_id >= 5) && (rand < 3)){
											connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + element.id + ',200)', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(chat_id, "Sei stato veramente molto fortunato ed hai ottenuto un Necronucleo! Woah!");
											});
										}

										if ((chest_id == 6) && (rand > 90)){
											connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + element.id + ',7)', function(err, rows, fields) {
												if (err) throw err;
												bot.sendMessage(chat_id, "FOLLE! Hai trovato uno *Scrigno Capsula*!", mark);
											});
											return;
										}
									}

									if ((class_id == 7) && (reborn > 1)){
										money -= money*0.15;
									}
									if ((class_id == 9) && (reborn > 1)){
										money += money*0.15;
									}
									if ((class_id == 9) && (reborn == 5)){
										money += money*0.05;
									}

									if (reborn == 1){
										money = money*5;
									}

									money = Math.round(money);

									bot.sendMessage(chat_id, "Missione completata! Hai ottenuto:\n" + crazyText + "*" + rows[0].name + "* (" + rows[0].rarity_shortname + ")" + evolved_text + ", *" + formatNumber(money)  + "* ¬ß e *" + exp + "* exp!" + rarity_miss, mark);

									connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + element.id + ',' + chest_id + ')', function(err, rows, fields) {
										if (err) throw err;
									});

									connection.query('UPDATE player SET exp = exp + ' + exp + ', mission_count = mission_count + 1, money = money + ' + money + ' WHERE id = ' + element.id, function(err, rows, fields) {
										if (err) throw err;
										setAchievementProgress(element.id, 2);
									});

									//if ((villa == 1) || (element.nickname == "fenix45")){
									if (villa == 1){
										connection.query('SELECT points FROM event_villa_status WHERE player_id = ' + element.id, function (err, rows, fields) {
											if (err) throw err;

											if (Object.keys(rows).length > 0){
												var points = parseInt(rows[0].points);
												connection.query('UPDATE event_villa_status SET points = points+' + chest_id + ' WHERE player_id = ' + element.id, function (err, rows, fields) {
													if (err) throw err;
													bot.sendMessage(chat_id, "Hai ricevuto " + chest_id + " punti per l'evento di LastSoldier95! Ora ne possiedi *" + (points+chest_id) + "*!", mark);
												});
											};
										});
									}

									if ((boost_id == 2) || (boost_id == 4) || (boost_id == 5) || (boost_id == 7)){
										if (boost_mission-1 == 0){
											connection.query('UPDATE player SET boost_mission = 0, boost_id = 0 WHERE id = ' + element.id, function(err, rows, fields) {
												if (err) throw err;
											});
										}else{
											connection.query('UPDATE player SET boost_mission = boost_mission-1 WHERE id = ' + element.id, function(err, rows, fields) {
												if (err) throw err;
											});
										}
									}

									setAchievement(chat_id, element.id, 1, 1);
								});
							});
						});
					});
				});
			});
		});
	});
}

function setFinishedSpecialMission(element, index, array) {
	var chat_id = element.chat_id;
	var mission_id = element.mission_special_id;

	connection.query('SELECT charm_id, class, boost_id, boost_mission, reborn FROM player WHERE nickname="' + element.nickname + '"', function(err, rows, fields) {
		if (err) throw err;
		var charm_id = parseInt(rows[0].charm_id);
		var boost_id = parseInt(rows[0].boost_id);
		var boost_mission = parseInt(rows[0].boost_mission);
		var reborn = parseInt(rows[0].reborn);
		var class_id = parseInt(rows[0].class);

		if ((boost_mission <= 0) && (boost_id != 0)){
			connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE nickname = "' + element.nickname + '"', function(err, rows, fields) {
				if (err) throw err;
			});
			boost_mission = 0;
			boost_id = 0;
		}

		connection.query('UPDATE `player` SET `mission_special_id`=0,`mission_special_time_end`=NULL WHERE nickname="' + element.nickname + '" AND mission_special_id != 0', function(err, rows, fields) {
			if (err) throw err;

			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 11', function(err, rows, fields) {
				if (err) throw err;

				var abBonus = 0;
				var rand_c = 15;

				if (Object.keys(rows).length > 0){
					abBonus = rows[0].ability_level*rows[0].val;
				}
				rand_c += abBonus;

				var d = new Date();
				if (d.getDay() == 2){
					rand_c += 10;
				}

				connection.query('SELECT item.name, rarity.id As rarityid, item.rarity, item.id FROM item, rarity, mission_zone_item WHERE item.rarity = rarity.shortname AND zone_id = ' + mission_id + ' AND item.id = mission_zone_item.item_id ORDER BY RAND()', function(err, rows, fields) {
					if (err) throw err;

					var item_id = rows[0].id;
					var exp = rows[0].rarityid;
					var num = 1;

					if (boost_id == 2){
						num++;

						connection.query('INSERT INTO `inventory`(`player_id`, `item_id`) VALUES (' + element.id + ',' + item_id + ')', function(err, rows, fields) {
							if (err) throw err;
						});
					}
					if (boost_id == 4){
						exp = exp*2;
					}

					bot.sendMessage(chat_id, "Itinerario completato! Hai ottenuto:\n" + num + "x *" + rows[0].name + "* (" + rows[0].rarity + "), *" + exp + "* exp e della *Polvere* (S)!", mark);

					connection.query('INSERT INTO `inventory`(`player_id`, `item_id`) VALUES (' + element.id + ',' + item_id + ')', function(err, rows, fields) {
						if (err) throw err;
					});
					connection.query('INSERT INTO `inventory`(`player_id`, `item_id`) VALUES (' + element.id + ',646)', function(err, rows, fields) {
						if (err) throw err;
					});

					connection.query('UPDATE player SET exp=exp+' + exp + ' WHERE nickname="' + element.nickname + '"', function(err, rows, fields) {
						if (err) throw err;
					});

					if ((boost_id == 2) || (boost_id == 4) || (boost_id == 5)){
						if (boost_mission-1 == 0){
							connection.query('UPDATE player SET boost_mission = 0, boost_id = 0 WHERE id = ' + element.id, function(err, rows, fields) {
								if (err) throw err;
							});
						}else{
							connection.query('UPDATE player SET boost_mission = boost_mission-1 WHERE id = ' + element.id, function(err, rows, fields) {
								if (err) throw err;
							});
						}
					}
				});
			});
		});
	});
}

function setFinishedHeistProgress(element, index, array) {
	var player_id = element.id;
	var chat_id = element.chat_id;
	var ext = element.extracted;
	var word = element.word;
	var to_id = element.to_id;
	var nick = element.nickname;
	var changeComb = String(element.changeComb);
	var myComb = String(element.my_combination);

	var rBack = {
		parse_mode: "HTML",
		reply_markup: {
			resize_keyboard: true,
			//one_time_keyboard: true,
			"keyboard": [["Torna al Rifugio"],["Torna al menu"]]
		}
	};

	if (changeComb == 0){
		connection.query('UPDATE heist_progress SET wait_time = NULL WHERE from_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
			bot.sendMessage(chat_id, "Il tuo gnomo ha terminato la raccolta delle rune, torna al rifugio!", rBack);
		});
	}else{
		var numbers = changeComb.split("");
		var my_numbers = myComb.split("");
		var len = Object.keys(numbers).length;

		var randCom = 0;
		for (i=0;i<len;i++){
			randCom = Math.round(Math.random()*5+1);
			if (randCom != my_numbers[numbers[i]-1])
				my_numbers[numbers[i]-1] = randCom;
			else
				i--;
		}

		connection.query('UPDATE heist_progress SET my_combination = ' + my_numbers.join("") + ', changeComb = 0, wait_time = NULL WHERE from_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;
		});

		connection.query('SELECT level FROM dragon WHERE player_id = ' + player_id, function(err, rows, fields) {
			if (err) throw err;

			var dragon = 0;
			if (Object.keys(rows).length > 0){
				dragon = rows[0].level/4;
			}

			var rand = Math.random()*100;
			var text = "";

			if ((rand > 3) && (rand < 8)){
				connection.query('SELECT id, name FROM item WHERE rarity = "D" AND name LIKE "Pietra%" ORDER BY RAND()', function(err, rows, fields) {
					if (err) throw err;
					if (Object.keys(rows).length > 0){
						var name = rows[0].name;
						var id = rows[0].id;
						connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ', ' + id + ')', function(err, rows, fields) {
							if (err) throw err;
							connection.query('UPDATE heist_progress SET wait_time = NULL WHERE from_id = ' + player_id, function(err, rows, fields) {
								if (err) throw err;
								text = "Durante il viaggio √® caduto in un buco profondo ed ha trovato una <b>" + name + "</b>!";
								bot.sendMessage(chat_id, "Il tuo gnomo ha cambiato le rune richieste, torna al rifugio!\n" + text, rBack);
							});
						});
					}
				});
			}else if ((rand > 10) && (rand < 12)){
				connection.query('SELECT item.id, item.name FROM inventory, item WHERE item.id = inventory.item_id AND item.rarity NOT IN ("U","IN","S","D") AND inventory.player_id = ' + player_id + ' ORDER BY RAND()', function(err, rows, fields) {
					if (err) throw err;
					var name = "";
					var id = 0;
					if (Object.keys(rows).length > 0){
						name = rows[0].name;
						id = rows[0].item_id;
						connection.query('DELETE FROM inventory WHERE player_id = ' + to_id + ' AND item_id = ' + id + ' LIMIT 1', function(err, rows, fields) {
							if (err) throw err;
						});
						connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + player_id + ', ' + id + ')', function(err, rows, fields) {
							if (err) throw err;
						});
					}

					connection.query('UPDATE heist_progress SET wait_time = NULL WHERE from_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						if (id != 0){
							text = "Durante il viaggio √® stato catturato dai guardiani del rifugio e durante la sua avventurosa fuga √® riuscito a sgraffignare un <b>" + name + "</b>!";
							bot.sendMessage(chat_id, "Il tuo gnomo ha cambiato le rune richieste, torna al rifugio!\n" + text, rBack);
							connection.query('SELECT chat_id FROM player WHERE id = ' + to_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(rows[0].chat_id, "Lo gnomo di " + nick + " √® riuscito a sgraffignarti <b>" + name + "</b>!", html);
							});
						}
					});
				});
			}else if ((rand > 20) && (rand < 22)){
				connection.query('SELECT C.id, C.name FROM chest C, inventory_chest I WHERE C.id = I.chest_id AND I.player_id = ' + to_id + ' ORDER BY RAND()', function(err, rows, fields) {
					if (err) throw err;

					var name = "";
					var id = 0;
					if (Object.keys(rows).length > 0){
						name = rows[0].name;
						id = rows[0].id;
						connection.query('DELETE FROM inventory_chest WHERE player_id = ' + to_id + ' AND chest_id = ' + id + ' LIMIT 1', function(err, rows, fields) {
							if (err) throw err;
						});
						connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + player_id + ', ' + id + ')', function(err, rows, fields) {
							if (err) throw err;
						});
					}

					connection.query('UPDATE heist_progress SET wait_time = NULL WHERE from_id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						if (id != 0){
							text = "Durante il viaggio √® stato catturato e durante la sua avventurosa fuga √® riuscito a sgraffignare un <b>" + name + "</b>!";
							bot.sendMessage(chat_id, "Il tuo gnomo ha cambiato le rune richieste, torna al rifugio!\n" + text, rBack);
							connection.query('SELECT chat_id FROM player WHERE id = ' + to_id, function(err, rows, fields) {
								if (err) throw err;
								bot.sendMessage(rows[0].chat_id, "Lo gnomo di " + nick + " √® riuscito a sgraffignarti <b>" + name + "</b>!", html);
							});
						}
					});
				});
			}else{
				bot.sendMessage(chat_id, "Il tuo gnomo ha cambiato le rune richieste, torna al rifugio!", rBack);
				return;
			};
		});
	};
};

function setFinishedHeist(element, index, array) {
	connection.query('SELECT player.nickname, player.exp, player.heist_streak, player.ability, player.money, player.id, player.chat_id, heist.grade, heist.rate1, heist.to_id, heist.matchmaking FROM player, heist WHERE heist.from_id = player.id AND heist.id = ' + element.id, function(err, rows, fields) {
		if (err) throw err;
		var fromNick = rows[0].nickname;
		var fromId = rows[0].id;
		var toId = rows[0].to_id;
		var fromChat = rows[0].chat_id;
		var fromMoney = parseInt(rows[0].money);
		var fromAbility = parseInt(rows[0].ability);
		var fromLevel = Math.floor(rows[0].exp/10);
		var streak = parseInt(rows[0].heist_streak);
		var isMatch = rows[0].matchmaking;
		var rate = rows[0].rate1;		//Probabilit√† di successo
		var grade = rows[0].grade;

		var kbNext = {
			parse_mode: "Markdown",
			reply_markup: {
				resize_keyboard: true,
				//one_time_keyboard: true,
				"keyboard": [["Contatta lo Gnomo"],["Torna al menu"]]
			}
		};

		connection.query('SELECT * FROM dragon WHERE player_id = ' + toId, function(err, rows, fields) {
			if (err) throw err;
			var dragon_room = 0;
			var dragon_level = 0;
			var dragon_name = "";
			if (Object.keys(rows).length > 0){
				dragon_level = rows[0].level;
				dragon_name = rows[0].name + " " + rows[0].type;
			}
			connection.query('SELECT player.nickname, player.ability, player.id As playerid, player.chat_id, player.money FROM player, heist WHERE heist.to_id = player.id AND heist.id = ' + element.id, function(err, rows, fields) {
				if (err) throw err;
				if (Object.keys(rows).length == 0){
					console.log("Errore id ispezione: " + element.id);
					return;
				}
				var toNick = rows[0].nickname;
				var toId = rows[0].playerid;
				var toMoney = parseInt(rows[0].money);
				var toChat = rows[0].chat_id;
				var toAbility = parseInt(rows[0].ability);

				connection.query('SELECT wanted_id, player_id FROM event_wanted_status WHERE player_id = ' + fromId, function(err, rows, fields) {
					if (err) throw err;

					if ( ((wanted == 1) || (fromId == 1)) && (Object.keys(rows).length > 0) ){
						if (toId == rows[0].wanted_id){
							var rand_succ = Math.random()*100;
							var wantedId = rows[0].wanted_id;

							connection.query('SELECT heist_win_2 FROM event_wanted_status WHERE player_id = ' + wantedId, function(err, rows, fields) {
								if (err) throw err;
								var heist = rows[0].heist_win_2;

								var randChest = 0;
								var chest_id = 0;

								randChest = Math.round((Math.random()*99)+1);
								if ((randChest <= 100) && (randChest >= 50)){			//50%
									chest_id = 2;
								}else if ((randChest < 50) && (randChest >= 20)){		//30%   
									chest_id = 3;
								}else if ((randChest < 20) && (randChest >= 5)){ 		//15%
									chest_id = 4;
								}else if ((randChest < 5) && (randChest >= 0)){ 		//5%
									chest_id = 5;
								}
								connection.query('SELECT name, rarity_shortname FROM chest WHERE id = ' + chest_id, function(err, rows, fields) {
									if (err) throw err;
									connection.query('INSERT INTO `inventory_chest`(`player_id`, `chest_id`) VALUES (' + fromId + ',' + chest_id + ')', function(err, rows, fields) {
										if (err) throw err;
									});
									bot.sendMessage(fromChat, "Come ricompensa per il tentativo hai ricevuto uno *" + rows[0].name + "* (" + rows[0].rarity_shortname + ")!", mark);
								});

								connection.query('SELECT money, chat_id FROM player WHERE id = ' + wantedId, function(err, rows, fields) {
									if (err) throw err;

									var wanted_chat = rows[0].chat_id;

									if (rand_succ < 35){
										var money = ((parseInt(heist)*100)+1000);

										if (money > 15000){
											money = 15000;
										}

										bot.sendMessage(wanted_chat, "Lo gnomo di " + fromNick + " √® riuscito a catturarti! Andr√† meglio la prossima volta!");

										connection.query('UPDATE player SET money = money + ' + money + ' WHERE id = ' + fromId, function(err, rows, fields) {
											if (err) throw err;
											bot.sendMessage(fromChat, "Il tuo gnomo ha catturato il ricercato e hai ottenuto la sua taglia pari a *" + money + "* ¬ß\nTorna nella schermata dell'evento per visualizzare il nuovo ricercato!", mark);
										});

										connection.query('UPDATE event_wanted_status SET heist_win = heist_win+1 WHERE player_id = ' + fromId, function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE event_wanted_status SET heist_lost_2 = heist_lost_2+1 WHERE player_id = ' + wantedId, function(err, rows, fields) {
											if (err) throw err;
										});

										var banned_join = banlist_id.join();

										connection.query('SELECT nickname, from_id, COUNT(from_id) FROM heist_history, player, event_wanted_status WHERE account_id NOT IN (' + banned_join + ') AND fail = 0 AND event_wanted_status.player_id = player.id AND player.id = heist_history.from_id AND player.id != ' + fromId + ' AND time between DATE_SUB(now(),INTERVAL 2 MONTH) AND NOW() GROUP BY from_id ORDER BY COUNT(from_id) DESC LIMIT 200', function(err, rows, fields) {
											if (err) throw err;

											var len = Object.keys(rows).length;
											var rand = Math.round(Math.random()*len);

											var sel = rows[rand].from_id;
											connection.query('UPDATE event_wanted_status SET wanted_id = ' + sel + ' WHERE player_id = ' + fromId, function(err, rows, fields) {
												if (err) throw err;
												//bot.sendMessage(fromChat, "Ora ispeziona il nuovo ricercato!");
											});
										});
									}else{
										bot.sendMessage(wanted_chat, "Lo gnomo di " + fromNick + " ha tentato di catturarti, ma fortunatamente sei riuscito a scappare!");
										bot.sendMessage(fromChat, "Il tuo tentativo di cattura √® stato un FALLIMENTO, riprova tentando ancora!");

										connection.query('UPDATE event_wanted_status SET heist_lost = heist_lost+1 WHERE player_id = ' + fromId, function(err, rows, fields) {
											if (err) throw err;
										});
										connection.query('UPDATE event_wanted_status SET heist_win_2 = heist_win_2+1 WHERE player_id = ' + wantedId, function(err, rows, fields) {
											if (err) throw err;
										});
									}
									connection.query('DELETE FROM `heist` WHERE `id`=' + element.id, function(err, rows, fields) {
										if (err) throw err;
									});
								});
							});
							return;
						}
					}
					connection.query('SELECT house_id FROM player WHERE id = ' + toId, function(err, rows, fields) {
						if (err) throw err;

						var to_house_id = rows[0].house_id;

						rate -= to_house_id*5;
						rate -= dragon_level/5;
						rate += fromLevel/20;

						connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + fromId + ' AND ability_id = 4', function(err, rows, fields) {
							if (err) throw err;

							var abBonus = 0;
							var abBonus2 = 0;
							if (Object.keys(rows).length > 0){
								abBonus = rows[0].ability_level;
								rate = parseInt(rate)+(abBonus*rows[0].val);
							}

							var rand = Math.random()*100;
							var fail = 1;

							if (rate < 5)
								rate = 5;
							if (rate > 80)
								rate = 80;

							if (rand < rate){
								fail = 0;
							}
							console.log("Ispezione con prob " + rate + " risultato: " + fail + " (0 = successo) e house id nemico: " + to_house_id);

							if (fromId == 1)
								fail = 0;

							connection.query('UPDATE player SET heist_limit = heist_limit+1 WHERE id = ' + toId, function(err, rows, fields) {
								if (err) throw err;
							});

							if (fail == 1){
								connection.query('SELECT chat_id FROM player WHERE id = ' + toId, function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(fromChat, "Il tuo gnomo non √® riuscito a raggiungere il rifugio nemico, dannazione!");
									bot.sendMessage(rows[0].chat_id, "Lo gnomo di <b>" + fromNick + "</b> √® stato respinto dal tuo guardiano del cancello!", html);
								});

								var d = new Date();
								var history_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

								connection.query('INSERT INTO heist_history (from_id, to_id, rate1, fail, time) VALUES ' +
												 '(' + fromId + ',' + toId + ',0,1,"' + history_date + '")', function (err, rows, fields){
									if (err) throw err;
								});
							}else{
								var d = new Date();
								d.setHours(d.getHours() + 12);
								var long_date = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
								var short_time = addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());

								var combi = "";
								for (i=0; i<5; i++){
									combi += String(Math.round(Math.random()*5+1));
								}

								connection.query('INSERT INTO heist_progress (from_id, to_id, combination, time_end, isMatch) VALUES (' + fromId + ',' + toId + ',' + combi + ', "' + long_date + '",' + isMatch + ')', function(err, rows, fields) {
									if (err) throw err;
									bot.sendMessage(fromChat, "Il tuo gnomo √® arrivato al rifugio nemico, il guardiano del cancello ti propone uno strano gioco con le Rune, hai tempo fino alle " + short_time + " per vincere!", kbNext);
									connection.query('SELECT chat_id FROM player WHERE id = ' + toId, function(err, rows, fields) {
										if (err) throw err;
										bot.sendMessage(rows[0].chat_id, "Lo gnomo di <b>" + fromNick + "</b> √® riuscito ad arrivare davanti al tuo rifugio!", html);
									});
								});
							}
							connection.query('DELETE FROM heist WHERE id = ' + element.id, function(err, rows, fields) {
								if (err) throw err;
							});
						});
					});
				});
			});
		});
	});
};

function setFinishedTravel(element, index, array) {
	var chat_id = element.chat_id;

	connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 9', function(err, rows, fields) {
		if (err) throw err;

		var abBonus = 0;
		var double = 0;
		if (Object.keys(rows).length > 0){
			var rand = Math.random();
			abBonus = parseInt(rows[0].ability_level)*rows[0].val;
			if (rand < abBonus){
				double = 1;
			}
		}

		connection.query('UPDATE player SET travel_id = 0, travel_time_end = NULL WHERE id = ' + element.id, function(err, rows, fields) {
			if (err) throw err;
			connection.query('SELECT chest_id, money FROM travel WHERE id="' + element.travel_id + '"', function(err, rows, fields) {
				if (err) throw err;
				var mission_chest = rows[0].chest_id;
				var money = rows[0].money;
				connection.query('SELECT name, rarity_shortname FROM chest WHERE id = "' + mission_chest + '"', function(err, rows, fields) {
					if (err) throw err;
					var chest_id = mission_chest;

					var qnt = 5;

					if (double == 1){
						qnt = 10;
					}

					bot.sendMessage(chat_id, "Viaggio completato, hai trovato " + qnt + "x *" + rows[0].name + "* (" + rows[0].rarity_shortname + ") e *" + formatNumber(money) + "* ¬ß!", mark);

					for (i = 0; i < qnt; i++){
						connection.query('INSERT INTO inventory_chest (player_id, chest_id) VALUES (' + element.id + ',' + chest_id + ')', function(err, rows, fields) {
							if (err) throw err;
						});
					}

					connection.query('UPDATE player SET travel_limit = 0, money = money + ' + money + ', exp = exp + ' + (chest_id*5-1) + ' WHERE id = ' + element.id, function(err, rows, fields) {
						if (err) throw err;
					});
				});
			});
		});
	});
}

function setFinishedCave(element, index, array) {
	var chat_id = element.chat_id;
	var boost_id = element.boost_id;
	var boost_mission = element.boost_mission;

	if ((boost_mission <= 0) && (boost_id != 0)){
		connection.query('UPDATE player SET boost_id = 0, boost_mission = 0 WHERE id = ' + element.id, function(err, rows, fields) {
			if (err) throw err;
		});
		boost_mission = 0;
		boost_id = 0;
	}

	connection.query('SELECT * FROM cave WHERE id=' + element.cave_id, function(err, rows, fields) {
		if (err) throw err;

		var rand = 0;
		var stone_id = 0;
		var charm_id = element.charm_id;

		var caveid = parseInt(element.cave_id)+2;
		if (charm_id == 603){
			caveid += 2;
		}
		if (charm_id == 695){
			caveid += 5;
		}

		if (luckyMode == 1){
			var d = new Date();
			if (d.getDay() == 6){
				var rand = Math.random()*100;
				if (rand < 15){
					caveid = caveid*2;
				}
			}else if (d.getDay() == 0){
				var rand = Math.random()*100;
				if (rand < 10){
					caveid = caveid*2;
				}else if ((rand > 10) && (rand < 25)){
					caveid = 0;
				}
			}
		}

		connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 16', function(err, rows, fields) {
			if (err) throw err;

			var abBonus = 0;
			var double = 0;
			if (Object.keys(rows).length > 0){
				var rand = Math.random()*100;
				abBonus = parseInt(rows[0].ability_level)*rows[0].val;
				if ((rand < abBonus) && (luckyMode == 0)){
					caveid = caveid*2;
				}
			}

			connection.query('SELECT ability_level, val FROM ability, ability_list WHERE ability.ability_id = ability_list.id AND player_id = ' + element.id + ' AND ability_id = 8', function(err, rows, fields) {
				if (err) throw err;

				var abBonus = 0;
				if (Object.keys(rows).length > 0){
					abBonus = parseInt(rows[0].ability_level)*rows[0].val;
				}

				var boost_text = "";
				if (boost_id == 3){
					caveid = caveid*2;
					boost_text = "\n\nRaddoppiate grazie alla Bevanda Fiamma di Drago!";
					connection.query('UPDATE player SET boost_mission = boost_mission-1 WHERE id = ' + element.id, function(err, rows, fields) {
						if (err) throw err;
					});
				}

				var text = "";
				var rand2 = 0;
				var evolved = 0;

				for (i = 0; i < caveid; i++){ 
					evolved = 0;

					rand = Math.round(Math.random()*100);
					if (rand <= 5){
						stone_id = 73;
					}else if (rand <= 15){
						stone_id = 72;
					}else if (rand <= 30){
						stone_id = 71;
					}else if (rand <= 50){
						stone_id = 70;
					}else if (rand <= 75){
						stone_id = 69;
					}else if (rand <= 100){
						stone_id = 68;
					}

					rand2 = Math.random()*100;
					if ((rand2 < abBonus) && (stone_id != 73)){
						evolved = 1;
						stone_id++;
					}
					connection.query('INSERT INTO inventory (player_id, item_id) VALUES(' + element.id + ', ' + stone_id + ")", function(err, rows, fields) {
						if (err) throw err;
					});
					if (evolved == 1){
						connection.query('SELECT name FROM item WHERE id=' + stone_id, function(err, rows, fields) {
							if (err) throw err;
							text = text + "\n> " + rows[0].name + " evoluta!";
						});
					}else{
						connection.query('SELECT name FROM item WHERE id=' + stone_id, function(err, rows, fields) {
							if (err) throw err;
							text = text + "\n> " + rows[0].name;
						});
					}
				}

				connection.query('UPDATE player SET cave_limit = 0, cave_id = 0, cave_time_end = NULL WHERE id = ' + element.id + ' AND cave_id != 0', function(err, rows, fields) {
					if (err) throw err;
					if (caveid == 0){
						bot.sendMessage(chat_id, "Hai completato l'esplorazione della cava ma non hai ottenuto alcuna pietra!");
					}else{
						bot.sendMessage(chat_id, "Hai completato l'esplorazione della cava e hai ottenuto:" + text + boost_text);
					}
				});

				var now = new Date();
				var rand = Math.random()*200;
				if ((now.getHours() == 11) && (rand < 3) && (element.reborn >= 3)){
					connection.query('INSERT INTO inventory (player_id, item_id) VALUES (' + element.id + ',201)', function(err, rows, fields) {
						if (err) throw err;
						bot.sendMessage(chat_id, "Hai ottenuto un Respiro di Morte! Che fortuna!");
					});
				}
				setAchievement(chat_id, element.id, 11, 1);
			});
		});
	});
}

function setFinishedBoost(element, index, array) {
	var chat_id = element.chat_id;
	connection.query('UPDATE `player` SET `boost_id`=0, `boost_mission`=0 WHERE nickname="' + element.nickname + '" AND boost_id != 0', function(err, rows, fields) {
		if (err) throw err;
		//console.log(getNow("it") + " Boost terminato per " + element.nickname);
		bot.sendMessage(chat_id, "Effetto della bevanda terminato!");
	});
}

function checkReborn(){
	connection.query('SELECT id, exp, life, total_life, reborn, chat_id, nickname FROM player WHERE exp >= 1000', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			for (var i = 0, len = Object.keys(rows).length; i < len; i++) {
				if (rows[i].reborn == 1){
					if (rows[i].exp >= 1000){
						connection.query('UPDATE player SET exp = 1000 WHERE id = ' + rows[i].id, function(err, rows, fields) {
							if (err) throw err;
						});
					}
				}else if (rows[i].reborn == 2){
					if (rows[i].exp >= 1500){
						connection.query('UPDATE player SET exp = 1500 WHERE id = ' + rows[i].id, function(err, rows, fields) {
							if (err) throw err;
						});
					}
				}else if (rows[i].reborn == 3){
					if (rows[i].exp >= 2000){
						connection.query('UPDATE player SET exp = 2000 WHERE id = ' + rows[i].id, function(err, rows, fields) {
							if (err) throw err;
						});
					}				
				}else if (rows[i].reborn == 4){
					if (rows[i].exp >= 3000){
						var player_id = rows[i].id;
						var chat_id = rows[i].chat_id;
						var nick = rows[i].nickname;
						connection.query('UPDATE player SET exp = 3000 WHERE id = ' + rows[i].id, function(err, rows, fields) {
							if (err) throw err;
						});
						connection.query('SELECT player_id FROM tear WHERE type = 1 AND player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								lacrima(this.player_id, this.chat_id);
								console.log("Lacrima 1 consegnata a " + this.nick);
							}
						}.bind( {player_id: player_id, chat_id: chat_id, nick: nick} ));
					}
				}else if (rows[i].reborn == 5){
					var player_id = rows[i].id;
					var chat_id = rows[i].chat_id;
					var nick = rows[i].nickname;

					if (rows[i].exp >= 5000){
						connection.query('SELECT player_id FROM tear WHERE type = 2 AND player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								lacrima2(this.player_id, this.chat_id);
								console.log("Lacrima 2 consegnata a " + this.nick);
							}
						}.bind( {player_id: player_id, chat_id: chat_id, nick: nick} ));
					}
					if (rows[i].exp >= 9000){
						connection.query('SELECT player_id FROM tear WHERE type = 3 AND player_id = ' + player_id, function(err, rows, fields) {
							if (err) throw err;
							if (Object.keys(rows).length == 0){
								lacrima3(this.player_id, this.chat_id);
								console.log("Lacrima 3 consegnata a " + this.nick);
							}
						}.bind( {player_id: player_id, chat_id: chat_id, nick: nick} ));
					}
					if (rows[i].exp >= 10000){
						connection.query('UPDATE player SET exp = 10000 WHERE id = ' + rows[i].id, function(err, rows, fields) {
							if (err) throw err;
						});
					}
				}

				var life = rows[i].exp*10;
				if ((rows[i].life == 0) && (rows[i].total_life == 0)){
					connection.query('UPDATE player SET life = ' + life + ', total_life = ' + life + ' WHERE id = ' + rows[i].id, function(err, rows, fields) {
						if (err) throw err;
					});
				}else{
					connection.query('UPDATE player SET total_life = ' + life + ' WHERE id = ' + rows[i].id, function(err, rows, fields) {
						if (err) throw err;
					});
					/*
					var diff_life = life-rows[i].total_life;
					connection.query('UPDATE player SET life=life+' + diff_life + ', total_life = ' + life + ' WHERE id = ' + rows[i].id, function(err, rows, fields) {
						if (err) throw err;
					});
					*/
				}
			}
		}
	});
};

function checkTeamClean(){
	connection.query('SELECT team.id, team.name, team.players, COUNT(team_player.player_id) As cnt FROM team LEFT JOIN team_player ON team.id = team_player.team_id GROUP BY team.id HAVING cnt = 0', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + " 1 team da cancellare");
			}else{
				console.log(getNow("it") + " " + Object.keys(rows).length + " team da cancellare");
			}
			rows.forEach(setFinishedTeamClean);
		}
	});
};

function setFinishedTeamClean(element, index, array) {
	var name = element.name;
	var id = element.id;

	connection.query('DELETE FROM team WHERE id = ' + id, function(err, rows, fields) {
		if (err) throw err;
		console.log("Team eliminato: " + name);
	});
};

function checkTeamPlayers(){
	connection.query('SELECT team.id, team.name, team.players, COUNT(team_player.player_id) As cnt FROM team LEFT JOIN team_player ON team.id = team_player.team_id GROUP BY team.id', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){
			if (Object.keys(rows).length == 1){
				console.log(getNow("it") + " 1 team adeguato");
			}else{
				console.log(getNow("it") + " " + Object.keys(rows).length + " team adeguato");
			}
			rows.forEach(setFinishedTeamPlayers);
		}
	});
};

function setFinishedTeamPlayers(element, index, array) {
	var name = element.name;
	var id = element.id;
	var players = element.players;
	var cnt = element.cnt;

	if (players != cnt){
		connection.query('UPDATE team SET players = ' + cnt + ' WHERE id = ' + id, function(err, rows, fields) {
			if (err) throw err;
			console.log("Team adeguato: " + name + " " + players + " -> " + cnt);
		});
	}
};

function calcLife(message){
	connection.query('SELECT id, exp, life, weapon_id, weapon2_id, weapon3_id, total_life, reborn FROM player WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
		if (err) throw err;
		if (Object.keys(rows).length > 0){

			var player_id = rows[0].id;

			if (rows[0].reborn == 1){
				if (rows[0].exp >= 1000){
					connection.query('UPDATE player SET exp = 1000 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						//console.log("\x1b[36m" + message.from.username + " ha raggiunto il livello massimo (1)" + "\x1b[0m");
					});
				}
			}else if (rows[0].reborn == 2){
				if (rows[0].exp >= 1500){
					connection.query('UPDATE player SET exp = 1500 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						//console.log("\x1b[36m" + message.from.username + " ha raggiunto il livello massimo (2)" + "\x1b[0m");
					});
				}
			}else if (rows[0].reborn == 3){
				if (rows[0].exp >= 2000){
					connection.query('UPDATE player SET exp = 2000 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						//console.log("\x1b[36m" + message.from.username + " ha raggiunto il livello massimo (3)" + "\x1b[0m");
					});
				}				
			}else if (rows[0].reborn == 4){
				if (rows[0].exp >= 3000){
					connection.query('UPDATE player SET exp = 3000 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						//console.log("\x1b[36m" + message.from.username + " ha raggiunto il livello massimo (4)" + "\x1b[0m");
					});
				}				
			}else if (rows[0].reborn == 5){
				if (rows[0].exp >= 10000){
					connection.query('UPDATE player SET exp = 10000 WHERE id = ' + player_id, function(err, rows, fields) {
						if (err) throw err;
						//console.log("\x1b[36m" + message.from.username + " ha raggiunto il livello massimo (5)" + "\x1b[0m");
					});
				}				
			}

			var life = rows[0].exp*10;
			if ((rows[0].life == 0) && (rows[0].total_life == 0)){
				connection.query('UPDATE player SET life = ' + life + ', total_life = ' + life + ' WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			}else{
				connection.query('UPDATE player SET total_life = ' + life + ' WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
				/*
				var diff_life = life-rows[0].total_life;
				connection.query('UPDATE player SET life=life+' + diff_life + ', total_life = ' + life + ' WHERE nickname = "' + message.from.username + '"', function(err, rows, fields) {
					if (err) throw err;
				});
				*/
			}

			var lev = Math.floor(rows[0].exp/10);
			var power = Math.round(50+(lev/2));

			if ((rows[0].weapon_id == 221) || (rows[0].weapon_id == 638) || (rows[0].weapon_id == 639) || (rows[0].weapon_id == 640)){
				//console.log("Necrolama aggiornata: " + power);
				connection.query('UPDATE player SET weapon = ' + power + ' WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			}

			power = Math.round(25+(lev/2));			
			power = -Math.abs(power);

			if ((rows[0].weapon2_id == 577) || (rows[0].weapon2_id == 688) || (rows[0].weapon2_id == 689) || (rows[0].weapon2_id == 690)){
				//console.log("Corazza Necro aggiornata: " + power);
				connection.query('UPDATE player SET weapon2 = ' + power + ' WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			}

			power = Math.round(20+(lev/2));			
			power = -Math.abs(power);

			if ((rows[0].weapon3_id == 600) || (rows[0].weapon3_id == 671) || (rows[0].weapon3_id == 672) || (rows[0].weapon3_id == 673)){
				//console.log("Scudo Necro aggiornato: " + power);
				connection.query('UPDATE player SET weapon3 = ' + power + ' WHERE id = ' + player_id, function(err, rows, fields) {
					if (err) throw err;
				});
			}

			connection.query('UPDATE player SET life = total_life WHERE life > total_life', function(err, rows, fields) {
				if (err) throw err;
			});
			connection.query('UPDATE player SET life = 0 WHERE life < 0', function(err, rows, fields) {
				if (err) throw err;
			});
		}else{
			bot.sendMessage(message.chat.id, "Il tuo account non √® stato trovato, ripristina il nickname oppure premi /start per registrarti.");
		}
	});
}

function addZero(i) {
	if (i < 10) {
		i = "0" + i;
	}
	return i;
}

function formatNumber(num) {
	return ("" + num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, function($1) { return $1 + "." });
}

function toDate(lang, date) {
	var d = new Date(date);
	if (lang == "it"){
		var datetime = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear() + " alle " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	}else if (lang == "en"){
		var datetime = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	}else{
		var datetime = "Lingua non specificata";
	}
	return datetime;	
}

function getNow(lang, obj) {
	var d = new Date();
	obj = typeof obj !== 'undefined' ? obj : false;
	if (lang == "it"){
		var datetime = addZero(d.getDate()) + "/" + addZero(d.getMonth()+1) + "/" + d.getFullYear() + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	}else if (lang == "en"){
		var datetime = d.getFullYear() + "-" + addZero(d.getMonth()+1) + "-" + addZero(d.getDate()) + " " + addZero(d.getHours()) + ':' + addZero(d.getMinutes()) + ':' + addZero(d.getSeconds());
	}else{
		var datetime = "Lingua non specificata";
	}
	if (obj == true){
		datetime = new Date(datetime);
	}
	return datetime
}

function callNTimes( time, fn) {
	function callFn() {
		if (1 < 0) return;
		fn();
		setTimeout(callFn, time);
	}
	setTimeout(callFn, time);
}

function findAndRemove(array, str){
	for (var i = 0; i < array.length; i++) {
		if (array[i] == str){
			array.splice(i, 1);
		}
	}
	return array;
}

function findInArray(array, str){
	for (var i = 0; i < array.length; i++) {
		if (array[i] == str){
			return true;
		}
	}
	return false;
}

function getPosition(str, m, i) {
	return str.split(m, i).join(m).length;
}

function shuffle(array) {
	var currentIndex = array.length, temporaryValue, randomIndex;

	while (0 !== currentIndex) {
		randomIndex = Math.floor(Math.random() * currentIndex);
		currentIndex -= 1;

		temporaryValue = array[currentIndex];
		array[currentIndex] = array[randomIndex];
		array[randomIndex] = temporaryValue;
	}
	return array;
}

function mysql_real_escape_string (str) {
	return str.replace(/[\0\x08\x09\x1a\n\r"'\\\%]/g, function (char) {
		switch (char) {
			case "\0":
				return "\\0";
			case "\x08":
				return "\\b";
			case "\x09":
				return "\\t";
			case "\x1a":
				return "\\z";
			case "\n":
				return "\\n";
			case "\r":
				return "\\r";
			case "\"":
			case "'":
			case "\\":
			case "%":
				return "\\"+char;
					}
	});
}

function estimate(values) {
	if (values.length <= 2)
		return average(values);
	var avg = average(values),
		upper = [],
		lower = [];
	values.forEach( function(val) {
		if (val >= avg)
			upper.push(val);
		else
			lower.push(val);
	});

	if (upper.length == 0)
		return average(lower);
	if (lower.length == 0)
		return average(upper);

	var upperDev = deviationFromAvg(upper, avg),
		lowerDev = deviationFromAvg(lower, avg);
	if (upperDev >= lowerDev)
		return estimate(lower);
	else
		return estimate(upper);
}

function searchArrayInString(str, strArray) {
	for (var j=0; j<strArray.length; j++) {
		if (str.indexOf(strArray[j]) != -1)
			return j;
	}
	return -1;
}

function average(values){
	var sum = 0;
	values.forEach( function(el) { sum += +el; } );
	return Math.floor(sum / values.length);
}

function deviationFromAvg(values, avg){
	var dev = 0;
	values.forEach( function(el) { dev += Math.abs(el - avg); } );
	return Math.floor(dev / values.length);
}

